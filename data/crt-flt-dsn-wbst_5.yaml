- en: Chapter 5. Developing Your Site
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。开发您的网站
- en: In this chapter, we'll be developing the flat website we designed in [Chapter
    4](ch04.html "Chapter 4. Designing Your Own Flat Website"), *Designing Your Own
    Flat Website*. We will use the Designmodo Flat UI for this, which was created
    on top of Twitter Bootstrap, a frontend framework that has predeveloped components
    that allow a quicker development. We will also cover the usage of jQuery to build
    our navigation animation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发我们在[第4章](ch04.html "第4章。设计您自己的扁平网站")中设计的扁平网站，*设计您自己的扁平网站*。我们将使用Designmodo
    Flat UI，它是基于Twitter Bootstrap创建的，这是一个具有预先开发组件的前端框架，可以加快开发速度。我们还将介绍使用jQuery来构建我们的导航动画。
- en: Creating our folder tree
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的文件夹树
- en: Properly organizing your files, as well as creating a comprehensive file structure,
    is very important when working in big projects. In smaller projects, you might
    not realize the importance of this, but it's a habit you should build from the
    beginning, so that when you work on bigger projects, you implement good practices
    from the beginning.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型项目中，正确组织文件以及创建全面的文件结构非常重要。在较小的项目中，您可能意识不到这一点的重要性，但这是您应该从一开始就建立的习惯，这样当您在更大的项目上工作时，您就可以从一开始实施良好的实践。
- en: 'This is extremely easy to do, and it''s also something you can adapt to your
    personal taste. I like to keep my files organized in categories. When I begin
    a development project, one of the first things I like to do is create three folders:
    `css`, where I obviously keep my CSS style files; `img`, where I save the images
    used to build the website, and `js`, where I keep all my JavaScript files. In
    the root of your main folder, you should have your HTML files in a way that you
    can easily load the rest of your files by using relative paths.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常容易做到，而且也是您可以根据个人喜好进行调整的事情。我喜欢将我的文件组织在类别中。当我开始一个开发项目时，我最喜欢做的一件事就是创建三个文件夹：`css`，我在其中保存我的CSS样式文件；`img`，我保存用于构建网站的图像；`js`，我保存所有的JavaScript文件。在您的主文件夹的根目录中，您应该以一种可以通过使用相对路径轻松加载其余文件的方式拥有您的HTML文件。
- en: This is a very simple task, but it helps you organize all your files in a way
    that lets you use relative paths, work locally, and export everything to your
    server more easily by the end of the project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的任务，但它可以帮助您以一种让您可以使用相对路径、在本地工作，并在项目结束时更轻松地将所有内容导出到服务器的方式来组织所有文件。
- en: 'A typical folder tree for a web development project will look similar to what
    is shown in the following screenshot:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 网站开发项目的典型文件夹树将类似于以下截图所示的内容：
- en: '![Creating our folder tree](img/0048OS_05_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的文件夹树](img/0048OS_05_01.jpg)'
- en: Now that we covered how we're going to start our project, let's get down to
    business. But before we start the development of our project, we need to get our
    images ready.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了如何开始我们的项目，让我们开始吧。但在我们开始项目的开发之前，我们需要准备好我们的图片。
- en: Prepping our images
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备我们的图片
- en: The first step of our development project is based in Photoshop. We need to
    go back to our website design file and export the images we need for our page.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发项目的第一步是基于Photoshop。我们需要回到我们的网站设计文件并导出我们页面所需的图片。
- en: Since we designed such a minimal page, most of the elements in our page are
    made by HTML elements, not by images. We still have a couple of images though,
    such as our avatar and work thumbnails, so let's export them to use them in our
    page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们设计了一个如此简约的页面，我们页面中的大部分元素都是由HTML元素制作的，而不是由图像制作的。不过，我们仍然有一些图像，比如我们的头像和作品缩略图，所以让我们将它们导出来以便在我们的页面中使用。
- en: 'Regarding the avatar, there are two ways that we can go about doing this; the
    easy way and the proper way. The easy way is to just export our circle avatar
    and its border as a `.png` file with a transparent background. The following screenshot
    shows the `Avatar.png` file with a transparent background:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于头像，我们可以有两种方法来处理；简单的方法和正确的方法。简单的方法是将我们的圆形头像及其边框导出为带有透明背景的`.png`文件。以下截图显示了带有透明背景的`Avatar.png`文件：
- en: '![Prepping our images](img/0048OS_05_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![准备我们的图片](img/0048OS_05_02.jpg)'
- en: By exporting a transparent `.png` file, we can easily use the image in the web
    page with any background color, which will work and is probably good enough. But
    this is not the best way to go about doing this. What if you want to change your
    avatar after the website is done? Or what if you want to update the website colors
    and change your stroke color? You will then need to go back to Photoshop and export
    this image all over again, and that is just a pain.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导出一个透明的`.png`文件，我们可以轻松地在网页中使用带有任何背景颜色的图像，这将起作用，可能已经足够了。但这并不是处理这个问题的最佳方式。如果您想在网站完成后更改头像怎么办？或者如果您想更新网站颜色并更改描边颜色怎么办？那么您将需要回到Photoshop并重新导出这个图像，这就很麻烦了。
- en: 'But luckily enough, we can make most of the effects in HTML, so that you can
    use just a regular-squared image for the avatar, and let the rest be done by code.
    This way, you will be able to update your avatar by just changing the regular
    avatar image or a couple of lines of CSS. Also, if you are doing this project
    for a client or a company, you are simplifying the updates in the future by making
    the updates independent of designer work. We will visit the code for this a bit
    further on in the book; for now, just make sure you export your avatar as a 128
    x 128 px square image. This should look similar to what is shown in the following
    screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但幸运的是，我们可以在HTML中实现大部分效果，这样您就可以只使用一个普通的方形图像作为头像，让其余的工作由代码完成。这样，您只需通过更改常规头像图像或几行CSS代码就可以更新您的头像。此外，如果您为客户或公司做这个项目，您可以通过使更新独立于设计师工作来简化将来的更新。我们将在本书的稍后部分讨论此代码；现在，只需确保将您的头像导出为128
    x 128像素的方形图像。这应该与以下截图中显示的内容类似：
- en: '![Prepping our images](img/0048OS_05_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![准备我们的图片](img/0048OS_05_03.jpg)'
- en: Now, let's export our thumbnails. This part is pretty easy; just make sure you
    export all the thumbnails with the same size to keep it consistent as well as
    easier to update in the future. There are several ways of doing this. I like to
    create a new document with the image dimension (225 x 141 px), copy and paste
    all my layers there, and save them individually. Then, I save that document as
    a template for any future usage. This way, I know that every time I need to create
    a thumbnail, I'll just use that same document.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们导出我们的缩略图。这部分非常简单；只需确保以相同大小导出所有缩略图，以保持一致性并且更容易在将来更新。有几种方法可以做到这一点。我喜欢创建一个具有图像尺寸（225
    x 141像素）的新文档，将所有图层复制粘贴到那里，并单独保存它们。然后，我将该文档保存为任何将来使用的模板。这样，我知道每次需要创建缩略图时，我只需使用同一文档。
- en: 'However, you can use other methods for this. You can use slices and create
    slices (keyboard shortcut *C*) for each one of your images in the document, and
    export the sliced images directly (on the **Save for Web & Devices** menu, you
    can select the type of slices you''d like to export). You can also use the new
    feature in Photoshop called **Generate image assets**, available since 2013 in
    Photoshop CC, which allows you to easily rename a layer or folder to a filename
    (such as `background.png`), and then just choose to automatically generate an
    image file from that layer. This is a good way of creating several assets for
    a big project, and it''s very easy to update because the assets are generated
    automatically with any file saving option. If you''re interested in knowing more
    about image assets generator, I definitely recommend that you should refer to
    the Adobe Help link: [http://helpx.adobe.com/photoshop/using/generate-assets-layers.html](http://helpx.adobe.com/photoshop/using/generate-assets-layers.html).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以使用其他方法来实现这一点。您可以使用切片并为文档中的每个图像创建切片（键盘快捷键*C*），然后直接导出切片图像（在**保存为Web和设备**菜单上，您可以选择要导出的切片类型）。您还可以使用Photoshop中自2013年以来可用的名为**生成图像资产**的新功能，该功能允许您轻松将图层或文件夹重命名为文件名（例如`background.png`），然后只需选择自动生成图像文件。这是创建大型项目的多个资产的好方法，而且非常容易更新，因为资产会随着任何文件保存选项自动生成。如果您对图像资产生成器想了解更多信息，我强烈建议您参考Adobe帮助链接：[http://helpx.adobe.com/photoshop/using/generate-assets-layers.html](http://helpx.adobe.com/photoshop/using/generate-assets-layers.html)。
- en: Anyway, you can go on doing this if you want, but make sure that you maintain
    consistency on your image size and that you export them with 100 percent opacity,
    because if you're thinking of possibly using any kind of rollover effect, we can
    and will do it with CSS later on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果您愿意，您可以继续进行此操作，但请确保保持图像大小的一致性，并以100%的不透明度导出它们，因为如果您考虑可能使用任何一种鼠标悬停效果，我们可以并且将在以后使用CSS来实现。
- en: The only other two images we're missing are the Twitter and Facebook icons.
    For these, we'll save them as 32 x 32 px square transparent `.png`, so that we
    can still use them if we ever wish to change the background of the footer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还缺少的另外两个图像是Twitter和Facebook图标。对于这些图标，我们将它们保存为32 x 32像素的方形透明`.png`，这样如果我们希望更改页脚的背景，我们仍然可以使用它们。
- en: We are now done with our image prepping!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了图像准备工作！
- en: Developing our page
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发我们的页面
- en: Now that we have our images ready, let's start creating our page. Just like
    with the design, we'll create from top to bottom, starting in the header and developing
    the layout down to the footer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的图像准备好了，让我们开始创建我们的页面。就像设计一样，我们将从上到下创建，从头部开始，逐渐开发布局直到页脚。
- en: We are going to be using Designmodo Flat UI Free for this, so the first thing
    we need to do is to import the files we're going to use. If you haven't done it
    already, download this from [http://designmodo.com/flat-free/](http://designmodo.com/flat-free/).
    Visit the page and click on **Download HTML**. This will get you a ZIP file with
    the Designmodo Flat UI Free pack, Twitter Bootstrap 3, and some example files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Designmodo Flat UI Free进行此操作，因此我们需要做的第一件事是导入我们将要使用的文件。如果您还没有这样做，请从[http://designmodo.com/flat-free/](http://designmodo.com/flat-free/)下载。访问该页面并单击**下载HTML**。这将为您提供一个包含Designmodo
    Flat UI Free包、Twitter Bootstrap 3和一些示例文件的ZIP文件。
- en: 'So, just as we covered earlier, let''s start by creating our folder tree. Create
    the following folders: `css`, `js`, and `img`. We will also need extra resources,
    so create two extra folders: `fonts`, where we will save the custom fonts used
    and `bootstrap`, where we will save the bootstrap files we''re going to be using.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，就像我们之前讨论的那样，让我们从创建我们的文件夹树开始。创建以下文件夹：`css`，`js`和`img`。我们还需要额外的资源，因此创建两个额外的文件夹：`fonts`，我们将保存使用的自定义字体，以及`bootstrap`，我们将保存要使用的bootstrap文件。
- en: Designmodo Flat UI Free pack is built on top of Twitter Bootstrap, so we will
    effectively be using Twitter Bootstrap to build this page. Twitter Bootstrap is
    a frontend framework that comes with a variety of predeveloped elements and styles,
    which makes it easier and quicker for a developer to create simple pages. I am
    a firm believer of optimizing work, and there's no need to be continuously reinventing
    the wheel. Most of the things we're going to use have been done hundreds or millions
    of times, so let's make use of the common effort to make our own lives easier.
    Here's when Twitter Bootstrap comes really handy. If you want to learn more about
    Twitter Bootstrap and see all the examples and guides, you can do so online at
    [http://getbootstrap.com/](http://getbootstrap.com/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Designmodo Flat UI Free包是建立在Twitter Bootstrap之上的，因此我们将有效地使用Twitter Bootstrap来构建此页面。Twitter
    Bootstrap是一个前端框架，带有各种预先开发的元素和样式，这使得开发人员更容易更快地创建简单页面。我坚信优化工作，并且没有必要不断重新发明轮子。我们要使用的大多数东西已经做了数百次甚至数百万次，所以让我们利用共同的努力来让我们自己的生活更轻松。这就是Twitter
    Bootstrap真正方便的时候。如果您想了解更多关于Twitter Bootstrap并查看所有示例和指南，可以在线查看[http://getbootstrap.com/](http://getbootstrap.com/)。
- en: 'Now that we have our file structure created, let''s populate it with the needed
    files. First up, let''s upload the images we previously exported from Photoshop
    into the `img` folder. In our `css` folder, we''ll paste the `flat-ui.css` file
    from the Designmodo pack. We won''t be using any JavaScript for now, so we don''t
    need to copy the JavaScript files provided in the pack. Copy the content of the
    Designmodo pack''s `fonts` folder into your own `fonts` folder, and copy the `bootsrap`
    folder as well and paste it in your `root` folder. This includes all the styles
    and resources used by Bootstrap. By now, your main folder should look similar
    to what is shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了文件结构，让我们用所需的文件填充它。首先，让我们将之前从Photoshop导出的图像上传到`img`文件夹中。在我们的`css`文件夹中，我们将粘贴Designmodo包中的`flat-ui.css`文件。我们现在不会使用任何JavaScript，所以我们不需要复制包中提供的JavaScript文件。将Designmodo包的`fonts`文件夹的内容复制到你自己的`fonts`文件夹中，并将`bootsrap`文件夹也复制并粘贴到你的`root`文件夹中。这包括Bootstrap使用的所有样式和资源。到目前为止，你的主文件夹应该看起来与下面的截图类似：
- en: '![Developing our page](img/0048OS_05_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![开发我们的页面](img/0048OS_05_04.jpg)'
- en: This includes all the required files to start creating our page, and with these
    in place, we can finally start the HTML.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括开始创建我们的页面所需的所有文件，有了这些文件，我们终于可以开始编写HTML了。
- en: Open your HTML editor and create a new file called `index.html`. This will be
    our website. The Designmodo pack has a file called `template.html`, which is a
    clean starter page with the basic HTML structure already initialized, which is
    a good foundation to work on. So open the file, copy its content, and paste it
    into your `index.html` file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的HTML编辑器，创建一个名为`index.html`的新文件。这将是我们的网站。Designmodo包中有一个名为`template.html`的文件，这是一个带有基本HTML结构的干净的起始页面，已经初始化好了，这是一个很好的基础来进行工作。所以打开文件，复制其内容，并粘贴到你的`index.html`文件中。
- en: 'The following screenshot shows what you should have on your index file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了你在索引文件上应该有的内容：
- en: '![Developing our page](img/0048OS_05_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![开发我们的页面](img/0048OS_05_05.jpg)'
- en: We can delete some content from here. The favicon part, `<link rel="shortcut
    icon" href="images/favicon.ico">`, can be deleted as we didn't design a favicon
    for this page, as well as for all the scripts being loaded after `<!-- Load JS
    here for greater good =============================-->`. We will be using JavaScript,
    but we will be loading the files as we need them to avoid having unnecessary files
    occupying space.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这里删除一些内容。favicon部分，`<link rel="shortcut icon" href="images/favicon.ico">`，可以删除，因为我们没有为这个页面设计favicon，以及在`<!--在这里加载JS以获得更好的效果=============================-->`之后加载的所有脚本都可以删除。我们将使用JavaScript，但我们将根据需要加载文件，以避免不必要的文件占用空间。
- en: We won't be creating any CSS file for now; we will only focus on creating the
    HTML file and getting the document with the content ready to style it afterwards.
    As we are using Twitter Bootstrap, we'll try to replicate our design as best as
    possible just by using existing features and styles from Bootstrap, and only after
    that can we create our own styles to customize the page to our needs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不会创建任何CSS文件；我们只会专注于创建HTML文件，并准备好内容后再进行样式设置。由于我们使用Twitter Bootstrap，我们将尽量通过使用Bootstrap的现有功能和样式来复制我们的设计，只有在那之后我们才能创建自己的样式来定制页面以满足我们的需求。
- en: 'So, to create our header, we will need a `<div>` element that will fill the
    whole browser in width to create that visual effect we designed. To do this, we
    will be using a class called `jumbotron` that Bootstrap already provides. You
    can see the example Bootstrap file online at [http://getbootstrap.com/examples/jumbotron/](http://getbootstrap.com/examples/jumbotron/).
    Essentially, this is a `div` class, the width of which is defined as 100 percent
    and stretches to fill the browser with a different background color. The structure
    for this `div` is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要创建我们的标题，我们将需要一个填满整个浏览器宽度的`<div>`元素，以创建我们设计的视觉效果。为此，我们将使用Bootstrap已经提供的一个名为`jumbotron`的类。你可以在[http://getbootstrap.com/examples/jumbotron/](http://getbootstrap.com/examples/jumbotron/)上在线查看示例Bootstrap文件。基本上，这是一个`div`类，其宽度定义为100%，并且拉伸以填满浏览器，并具有不同的背景颜色。这个`div`的结构如下：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Insert this code right after the `<body>` tag. If you save and refresh your
    file in the browser, you''ll be able to see the effect of the layer filling the
    browser in the `Jumbotron` div. Now, we just need to insert our content inside
    the `div` container, as shown in the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<body>`标签后面插入这段代码。如果你保存并在浏览器中刷新文件，你将能够看到`Jumbotron` div中填充浏览器的效果。现在，我们只需要在`div`容器中插入我们的内容，就像下面的代码所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, we''re using `class="text-center"` in some of our elements.
    This is a Bootstrap class responsible to set the text alignment to be centered,
    and it will center our elements, making this look a bit like our design header.
    Granted, there are some things changes to be made, but we will make these changes
    afterwards in CSS. The following screenshot shows how our HTML file looks when
    we open it in the browser:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在一些元素中使用了`class="text-center"`。这是Bootstrap类负责将文本对齐设置为居中，它将使我们的元素居中，使其看起来有点像我们的设计标题。当然，还有一些需要改变的地方，但我们将在CSS中进行这些更改。下面的截图显示了当我们在浏览器中打开HTML文件时，我们的HTML文件是什么样子的：
- en: '![Developing our page](img/0048OS_05_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![开发我们的页面](img/0048OS_05_06.jpg)'
- en: Pretty close to what we're looking to do, right?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 非常接近我们想要做的事情，对吧？
- en: 'Now, for our `About` section, we will need to create a title, two blocks of
    text, and a button. Luckily enough, this is also mostly done by using Bootstrap
    styles. For the title, we will use an `<h2>` tag; for the blocks, we will use
    a paragraph with a specific block class, which will look like this: `<div class="col-md-6">`.
    Twitter Bootstrap comes with a responsive grid system implemented, which is composed
    of 12 columns. So in this case, we want to create two blocks that will occupy
    each half of the screen. So, every block will have six columns, hence the class
    `col-md-6` is used. As I said, this is a responsive grid, which means that the
    website will adapt to tablets and smartphones by dynamically resizing the columns''
    sizes to fit the devices used.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于我们的“关于”部分，我们需要创建一个标题、两个文本块和一个按钮。幸运的是，这也大多是通过使用Bootstrap样式完成的。对于标题，我们将使用`<h2>`标签；对于文本块，我们将使用一个带有特定块类的段落，它将如下所示：`<div
    class="col-md-6">`。Twitter Bootstrap带有一个实现的响应式网格系统，由12列组成。所以在这种情况下，我们想要创建两个占据屏幕一半的块。因此，每个块将有六列，因此使用`col-md-6`类。正如我所说的，这是一个响应式网格，这意味着网站将根据平板电脑和智能手机动态调整列的大小，以适应所使用的设备。
- en: 'Our button is also easily implemented by using Bootstrap tags; in this case,
    it is the flat style, due to the Designmodo Flat UI pack. Our button will look
    like this: `<p class="text-center"><button class="btn btn-hg btn-primary">Download
    Resume</button></p>`. The button element has the `btn` class, which is the main
    class responsible for giving the button its look; the others are to set color
    and behavior. We will change this afterwards to use our color and font options.
    So, the HTML code for this section is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的按钮也很容易通过使用Bootstrap标签来实现；在这种情况下，它是平面样式，因为Designmodo Flat UI包。我们的按钮将如下所示：`<p
    class="text-center"><button class="btn btn-hg btn-primary">下载简历</button></p>`。按钮元素有`btn`类，这是负责给按钮外观的主要类；其他类是用来设置颜色和行为的。我们稍后会更改这个，以使用我们的颜色和字体选项。因此，这部分的HTML代码如下：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Just replace the text of our bigger block of text to adapt it to the column;
    our **About Me** section should look like the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将我们更大的文本块的文本替换为适应列；我们的**关于我**部分应该如下截图所示：
- en: '![Developing our page](img/0048OS_05_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![开发我们的页面](img/0048OS_05_07.jpg)'
- en: 'Next, we will create our `Work` section. Since this will also have a blue wide
    background, we will be using the `jumbotron div` element again for our main container.
    We have a grid of 2 x 4 thumbnails in our design, and since rows and columns compose
    the Bootstrap grid, we will need to create two rows, one for each line of four
    thumbnails. Thinking about the way that the 12-column grid works in Bootstrap,
    we will need to use *12/4 = 3* columns for each thumbnail, of which we have four.
    The following is our final code for the work section:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建我们的“工作”部分。由于这也将有一个蓝色的宽背景，我们将再次使用`jumbotron div`元素作为我们的主容器。在我们的设计中，我们有一个2
    x 4的缩略图网格，由行和列组成Bootstrap网格，我们需要创建两行，每行四个缩略图。考虑Bootstrap中12列网格的工作方式，我们将需要使用*12/4
    = 3*列来放置每个缩略图，我们有四个。以下是我们工作部分的最终代码：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, here you can see that we created a `jumbotron div` element for the background,
    two row `div` elements for our lines, and each row has four divisions with an
    image inside, which is our thumbnail. It is important to check the classes we
    used for this `div` element because they are used for grids. The div used, `<div
    class="text-center col-sm-6 col-md-3">`, has three different classes. The `text-center`
    class is used to center our image in the block; it''s responsive, it will change
    size depending on the screen size, and we don''t want the image to be larger than
    the original file size, as that will create pixilation and ruin the image quality.
    The class `col-md-3` is responsible to align the positioning of the images in
    the grid in desktop devices, meaning that each will occupy three columns. The
    class `col-sm-6` refers to tablet devices, and it means that in tablet widths,
    it will show two thumbnails per line. This creates a better adaptive experience
    as it will show four thumbnails per line on desktops, two on tablets, and only
    one on smartphones, the smallest of them all, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这里你可以看到我们为背景创建了一个`jumbotron div`元素，两行`div`元素用于我们的线条，每一行都有四个带有图片的分区，这是我们的缩略图。检查我们用于这个`div`元素的类是很重要的，因为它们用于网格。使用的`div`，`<div
    class="text-center col-sm-6 col-md-3">`，有三个不同的类。`text-center`类用于在块中居中我们的图片；它是响应式的，会根据屏幕尺寸改变大小，我们不希望图片比原始文件大小大，因为那样会导致像素化并破坏图片质量。`col-md-3`类负责在桌面设备中对齐图像在网格中的位置，这意味着每个图像将占据三列。`col-sm-6`类是指平板设备，在平板宽度上，它将每行显示两个缩略图。这样可以创建更好的自适应体验，因为它将在桌面上每行显示四个缩略图，在平板上显示两个，在智能手机上只显示一个，这是所有设备中最小的，如下面的截图所示：
- en: '![Developing our page](img/0048OS_05_08.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![开发我们的页面](img/0048OS_05_08.jpg)'
- en: With only the Bootsrap code, we were able to create a responsive grid of thumbnails
    that we can use for our `Work` section, quickly and easily.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 只用Bootstrap代码，我们就能够快速轻松地创建一个响应式的缩略图网格，我们可以用于我们的“工作”部分。
- en: 'The `Contact` section is probably the easiest of them all, as we just need
    to create three lines of content. We will use a `<h2>` element for the title again,
    and then two `<p>` elements for each line of content, as shown in the following
    code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “联系”部分可能是最简单的部分，因为我们只需要创建三行内容。我们将再次使用`<h2>`元素作为标题，然后使用两个`<p>`元素来表示每行内容，如下所示的代码所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code is fairly simple as well. We're just using the `text-center` tag to
    center the text in the page, and then we're creating a link in the e-mail, so
    that the visitor can click directly to send any mail. By using `href=mailto:designer@portfolio.com`,
    we're allowing the browser to open a mail program to create a new e-mail with
    the `e-mail` field already filled with this information, making it easier to send
    a message. This behavior might not be good in every case, because sometimes the
    default e-mail program might not be configured, or the user might use a webmail
    client that won't be able to open this kind of link, so use this only if you believe
    it makes sense to.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 代码也很简单。我们只是使用`text-center`标签来使页面中的文本居中，然后我们在电子邮件中创建一个链接，以便访问者可以直接点击发送任何邮件。通过使用`href=mailto:designer@portfolio.com`，我们允许浏览器打开邮件程序以创建一个填充有此信息的`e-mail`字段的新电子邮件，从而更容易发送消息。这种行为在每种情况下可能都不好，因为有时默认的电子邮件程序可能没有配置，或者用户可能使用无法打开这种链接的网络邮件客户端，因此只有在您认为有意义时才使用。
- en: 'The following screenshot shows how our simple contact section looks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们简单的联系部分的外观：
- en: '![Developing our page](img/0048OS_05_09.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![开发我们的页面](img/0048OS_05_09.jpg)'
- en: The last element to create is the footer, and we'll again use the `jumbotron
    div` element for this. We will need to make some more adjustments to make sure
    that the footer sticks to the bottom of the page, but we'll do that in a minute
    when we work in our page styles.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的最后一个元素是页脚，我们将再次使用`jumbotron div`元素。我们需要进行一些调整，以确保页脚固定在页面底部，但我们将在稍后在页面样式中进行。
- en: 'So, for the footer, we''ll create the `jumbotron div` element, a paragraph
    with our copyright text, and two hyperlinks with the social network icons. This
    won''t look at all like what we''re trying to achieve, but our content is there
    as we need it, and now it''s only down to the styles to change the look of it.
    The following is the final piece of code for our footer:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于页脚，我们将创建`jumbotron div`元素，一个包含版权文本的段落，以及两个带有社交网络图标的超链接。这看起来一点也不像我们想要实现的样子，但我们的内容已经在那里，现在只需要样式来改变它的外观。以下是我们页脚的最终代码：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this last piece of code, our basic HTML page is done, ready for some styling
    work with CSS.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这最后一段代码，我们的基本HTML页面已经完成，准备用CSS进行一些样式工作。
- en: Styling our page with CSS
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用CSS样式化我们的页面
- en: Let's start by creating a new file called `main.css` in the `css` folder. This
    will be where we will place our own styles to customize the look of the page to
    our design. With our file in place, we now need to link our CSS file in our HTML
    page. Go to your `index.html` file and add `<link href="css/main.css" rel="stylesheet">`
    to the `<head>` tag, and make sure you add it after `bootsrap.css` and `flat-ui.css`;
    otherwise, our styles might be overridden and won't work.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在`css`文件夹中创建一个名为`main.css`的新文件。这将是我们放置自己的样式以定制页面外观的地方。有了我们的文件，现在我们需要在我们的HTML页面中链接我们的CSS文件。转到您的`index.html`文件并在`<head>`标签中添加`<link
    href="css/main.css" rel="stylesheet">`，并确保您在`bootsrap.css`和`flat-ui.css`之后添加它；否则，我们的样式可能会被覆盖并且不起作用。
- en: 'The first change we''ll be making is the text color. As we want it to be the
    color we set in our design, let''s set the text color to `#222222` for every element
    in the `<body>` tag. We do this by using the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的第一个更改是文本颜色。因为我们希望它是我们在设计中设置的颜色，让我们将`<body>`标签中的每个元素的文本颜色设置为`#222222`。我们可以使用以下代码来实现：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s start with the header, let''s make its background blue. The color
    code we will choose for this is `#3498db`, and since we want to change this for
    every `jumbotron div` element, we''ll target the `jumbotron` class, as shown in
    the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从页眉开始，让我们把它的背景设为蓝色。我们将为此选择的颜色代码是`#3498db`，因为我们想要为每个`jumbotron div`元素更改这个，我们将定位`jumbotron`类，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file and refresh it in the browser, and you'll notice that it will
    immediately look a lot more like your design with the blue background sections.
    For the avatar, I told you before that we could do the circle avatar in CSS. We're
    able to do this because of CSS3, which allows us to easily create rounded corners
    in borders and border-radius. By setting that border at 50 percent, it will create
    such a radius in every corner that leads to a perfect circle. So, keep in mind
    that this won't work in every browser, as not all browsers support CSS3, but you
    should always use the latest technologies and techniques available to make good
    use of them, while always keeping in mind a graceful degradation of older versions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并在浏览器中刷新，您会注意到它会立即看起来更像您设计的样子，有蓝色背景部分。关于头像，我之前告诉过您我们可以在CSS中创建圆形头像。我们能够做到这一点是因为CSS3，它允许我们轻松地在边框和边框半径中创建圆角。通过将边框设置为50％，它将在每个角落创建这样的半径，从而形成一个完美的圆形。因此，请记住，这不会在每个浏览器中起作用，因为并非所有浏览器都支持CSS3，但您应该始终使用最新的技术和技巧来充分利用它们，同时始终牢记对旧版本的优雅降级。
- en: 'In this case, the only problem is that the avatar will be a square rather than
    a circle in older browsers. This is not a major problem because it''s just a visual
    difference and it doesn''t influence the business or usability at all. But going
    back to our avatar, we want it as a circle and with a white border, so we need
    to target our avatar in our CSS selectors. Since our avatar is just an `<img>`
    tag, we need to go back to the HTML file and change our tag to include a class,
    such as `<img class="avatar" src="img/avatar.jpg"/>`. Now, we can target `.avatar`
    in our CSS, and the following is the code we will use for the effects:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，唯一的问题是在旧版浏览器中，头像将是一个正方形而不是一个圆形。这不是一个主要问题，因为这只是一个视觉上的差异，它并不影响业务或可用性。但是回到我们的头像，我们希望它是一个圆形，并带有一个白色边框，所以我们需要在我们的CSS选择器中定位我们的头像。由于我们的头像只是一个`<img>`标签，我们需要回到HTML文件并更改我们的标签以包括一个类，比如`<img
    class="avatar" src="img/avatar.jpg"/>`。现在，我们可以在我们的CSS中定位`.avatar`，以下是我们将用于效果的代码：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will do the trick and our avatar will now look exactly like in our original
    design. However, you might run into some problems with Safari and other browsers,
    as each browser has slightly different ways of rendering these elements. So, you
    can make a small change and it will still work. Instead of having the image in
    your HTML file, you can define it as background image from the CSS, and this will
    solve the problem. In your HTML file, change the line to `<p class="text-center"><span
    class="avatar"></span></p>`; in the CSS file, add the following parameters:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将起作用，我们的头像现在看起来与我们原始设计中的一模一样。然而，你可能会在Safari和其他浏览器中遇到一些问题，因为每个浏览器渲染这些元素的方式略有不同。所以，你可以做一个小改变，它仍然会起作用。不要把图片放在你的HTML文件中，你可以在CSS中将其定义为背景图片，这样就可以解决问题了。在你的HTML文件中，将该行改为`<p
    class="text-center"><span class="avatar"></span></p>`；在CSS文件中，添加以下参数：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, it should work in Safari as well, but every time you try some new technology,
    make sure to check where it works and breaks, because there''s always some way
    to adapt your code to make it work. The following screenshot shows how your avatar
    works in live HTML pages:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它应该在Safari中也能工作了，但每次尝试新技术时，一定要检查它在哪里工作和中断，因为总有一种方法可以调整你的代码使其工作。以下截图显示了你的头像在实时HTML页面中的工作方式：
- en: '![Styling our page with CSS](img/0048OS_05_10.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![用CSS为我们的页面设置样式](img/0048OS_05_10.jpg)'
- en: 'For the menu, the following is the code we''re going to use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于菜单，我们将使用以下代码：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, always indent your code, be it HTML, CSS, JavaScript, or any other
    language. It makes it easier for you and others to read and to quickly visualize
    and analyze a bigger chunk of code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，无论是HTML、CSS、JavaScript还是其他任何语言，都要缩进你的代码。这样可以让你和其他人更容易阅读和快速可视化和分析更大的代码块。
- en: As you can see, we're using new IDs in this CSS. The `#header` class is the
    ID that we've set in the HTML for the whole header `<div>`, and `#menu` is the
    ID set for the `<p>` element where we have our menu links. As we start to do more
    and more styling, we will need to set classes and IDs to be able to select specific
    elements in the HTML file. Here, we're making sure that our links are uppercase
    by using `text-transform` and changing the color to white. Also, we're changing
    the font weight to a heavier weight in order to adapt to our design.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在这个CSS中使用了新的ID。`#header`类是我们在HTML中为整个页眉`<div>`设置的ID，`#menu`是我们为包含菜单链接的`<p>`元素设置的ID。随着我们进行更多的样式设置，我们需要设置类和ID来能够选择HTML文件中的特定元素。在这里，我们通过使用`text-transform`确保我们的链接是大写，并将颜色改为白色。此外，我们将字体重量改为更重的重量，以适应我们的设计。
- en: 'For the `About` section, we need to change some things, such as the title size,
    font size of the text, as well as line height. Finally, we''ll use margin and
    padding to make the spacing between elements exactly as we had designed. A really
    important part of this CSS is the `text-align: justify` property that makes the
    block of text have the same text alignment as that of our design, shaping the
    text to fit the block and helping to visually define the layout.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '对于“关于”部分，我们需要改变一些东西，比如标题大小、文本的字体大小，以及行高。最后，我们将使用边距和填充来确保元素之间的间距与我们设计的完全一样。这个CSS的一个非常重要的部分是`text-align:
    justify`属性，它使文本块具有与我们设计相同的文本对齐方式，使文本适应块并有助于视觉上定义布局。'
- en: 'We also want to change the color of the button to match our color palette,
    so we do that by defining the background color of the `.btn` element. This way
    we override the color previously used. We will also change the color on mouse
    rollover, so we will use the selector `.btn:hover` to change the style of the
    element when the mouse is over it. You will notice that there''s a small fade
    when you rollover the button, and this comes from `css-transitions` being used
    in the Designmodo Flat UI pack''s CSS files, which set this as an effect applied
    to every link and button. Let''s use the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想改变按钮的颜色以匹配我们的调色板，所以我们通过定义`.btn`元素的背景颜色来实现这一点。这样我们就覆盖了先前使用的颜色。我们还将在鼠标悬停时改变颜色，所以我们将使用选择器`.btn:hover`来在鼠标悬停时改变元素的样式。你会注意到当你悬停在按钮上时会有一个小的淡入淡出效果，这是由Designmodo
    Flat UI包的CSS文件中使用的`css-transitions`产生的效果，它将这个效果应用到每个链接和按钮上。让我们使用以下代码：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot is how our `About` section looks after setting the
    CSS:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是我们设置CSS后“关于”部分的样子：
- en: '![Styling our page with CSS](img/0048OS_05_11.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![用CSS为我们的页面设置样式](img/0048OS_05_11.jpg)'
- en: 'Our `Work` section doesn''t require a lot of changes on the CSS file, as it''s
    already pretty similar to what we''re looking to do. So, we''ll just change the
    background color of the `jumbotron div` element, and leave some margin between
    the elements to make them equally spaced, as shown in the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“工作”部分在CSS文件上不需要太多的改变，因为它已经非常接近我们想要做的样式。所以，我们只需改变“jumbotron div”元素的背景颜色，并在元素之间留下一些边距，使它们等距分布，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For our `Contacts` section, our content is composed by an `<h2>` tag, a link,
    and text for the phone number. This is fairly easy to stylize as well, and it''s
    mostly just color and text size changes, along with a margin setting to adapt
    to this part. Use the following code for the `Contacts` section:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的“联系人”部分，我们的内容由一个`<h2>`标签、一个链接和电话号码的文本组成。这也很容易进行样式化，主要是颜色和文本大小的改变，以及边距设置以适应这一部分。使用以下代码来设置“联系人”部分：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At last, let''s work on our footer. This currently doesn''t resemble much of
    our design, so we need to make it smaller by defining its height, making the text
    smaller, and aligning our icons to the right. To align our icons, we''ll be using
    `float: right`; we''ll use `margin` to create some spacing between the icons.
    The following is the CSS part of code created for this bit:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，让我们来处理我们的页脚。目前这与我们的设计不太相似，所以我们需要通过定义其高度、缩小文本并将图标对齐到右侧来使其更小。为了对齐我们的图标，我们将使用`float:
    right`；我们将使用`margin`来在图标之间创建一些间距。以下是为此部分创建的CSS代码的一部分：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We had to set the class icon for the element `<a href="#" class="icon"><img
    src="img/fb-icon.png"></a>`, so that we could effectively target just these icons
    and align them to the right in the same line. This concludes the CSS work for
    our layout page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为元素`<a href="#" class="icon"><img src="img/fb-icon.png"></a>`设置类图标，这样我们就可以有效地只针对这些图标并将它们对齐到同一行的右侧。这完成了我们布局页面的CSS工作。
- en: 'By just using some simple CSS lines to align elements and change some colors,
    this looks extremely similar to our design. Let''s take a look at how our page
    appears now. It should look similar to what is shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的CSS行来对齐元素并更改一些颜色，这看起来与我们的设计非常相似。让我们来看看我们的页面现在是什么样子。它应该看起来与下面的截图类似：
- en: '![Styling our page with CSS](img/0048OS_05_12.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: 使用CSS为我们的页面添加样式
- en: Using jQuery for navigation
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery进行导航
- en: 'As we said before, we can use a slide to the `section` code to create our single
    page website navigation, so that when the user clicks in the menu, the page scrolls
    to the beginning of that section. To accomplish that effect, we will be using
    a jQuery plugin called `PageScroller`, available at [http://pagescroller.com/](http://pagescroller.com/).
    There are two versions: Pro and Lite. For this exercise, the Lite version will
    be enough, as we only need the minimum functionality. The way we''re going to
    implement this is extremely easy as well, but if you''re looking for more options,
    you can check the plugin `readme` file and the website.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，我们可以使用幻灯片到`section`代码来创建我们的单页网站导航，这样当用户点击菜单时，页面就会滚动到该部分的开头。为了实现这种效果，我们将使用一个名为`PageScroller`的jQuery插件，可在[http://pagescroller.com/](http://pagescroller.com/)上找到。有两个版本：Pro和Lite。对于这个练习，Lite版本就足够了，因为我们只需要最低限度的功能。我们要实现的方式也非常简单，但如果您想要更多选项，可以查看插件的`readme`文件和网站。
- en: 'First of all, we''ll need to load the JavaScript files needed for this. After
    unpacking the plugin, copy and paste the `jquery.pagescroller.lite.js` file into
    your `js` folder. We will also need jQuery for this, but we will load it from
    the **Content Delivery Network** (**CDN**) from an external path. So, include
    these two lines in your `<head>` element, ideally before the `</head>` tag, as
    shown in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要加载所需的JavaScript文件。解压插件后，将`jquery.pagescroller.lite.js`文件复制并粘贴到您的`js`文件夹中。我们还需要jQuery，但我们将从外部路径的**内容传送网络**（**CDN**）加载它。因此，请在您的`<head>`元素中包含这两行，理想情况下是在`</head>`标记之前，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will load the JavaScript files to your page, but you will now need to initialize
    the plugin.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的页面上加载JavaScript文件，但现在您需要初始化插件。
- en: 'You can do this by simply calling the function `pageScroller()` inside a `document.ready`
    JavaScript function, which means that it will only be started after our document
    is loaded. Take a look at the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`document.ready` JavaScript函数中简单调用函数`pageScroller()`来实现这一点，这意味着它只会在文档加载后启动。看一下下面的代码：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With the script loaded and initialized, everything is ready to go. So, the
    way that the plugin works is listening to clicks on the element specific when
    initialized, that in this case we defined as our `#menu div` element in `navigation:
    ''#menu''`. Now, it will look for the `class` section to scroll to it, so we need
    to add this class to our titles.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '脚本加载和初始化后，一切都准备就绪。因此，插件的工作方式是在特定元素上监听点击事件，当初始化时，在这种情况下，我们将其定义为我们的`#menu div`元素中的`navigation:
    ''#menu''`。现在，它将查找`class`部分以滚动到它，因此我们需要将这个类添加到我们的标题中。'
- en: 'Ideally, we want to add this to either the beginning of our container or our
    `<h2>` title for the section. The following code shows how we have defined the
    sections in our HTML document:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望将其添加到容器的开头或我们部分的`<h2>`标题。以下代码显示了我们如何在HTML文档中定义部分：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This way, we're targeting the beginning of our sections each time by adding
    the class section to it, and when clicking in the menu, it will scroll the page
    to the corresponding section. Try it out, and you'll see that it scrolls directly
    to the section clicked in the menu.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们每次通过向其添加类部分来定位我们部分的开头，并在菜单中点击时，它将滚动页面到相应的部分。试一试，你会发现它会直接滚动到菜单中点击的部分。
- en: This kind of navigation works even better with bigger sections, but it's a quick
    and easy way to add a cool and easy navigation to our single-page website.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种导航方式即使在更大的部分中也能更好地工作，但这是一种快速简便的方式，可以为我们的单页网站添加一个酷炫且简单的导航。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This is it for our development! In this chapter, we developed our single-page
    website by using the Designmodo Flat UI pack to simplify the workflow. We put
    organization of files, image exporting, and project phases in practice, and we
    learned how to approach a project and what you should have in mind in bigger projects.
    We also had our first interaction with Twitter Bootstrap, which is the foundation
    of the Flat UI pack. We managed to create a very similar look to our layout by
    just using HTML, predefined Bootstrap classes, and custom CSS styles to create
    the exact design we've done before. We also used `PageScroller` to create our
    single-page scroll navigation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的开发工作！在本章中，我们使用Designmodo Flat UI包开发了我们的单页网站，以简化工作流程。我们实践了文件组织、图像导出和项目阶段，并学习了如何处理项目以及在更大的项目中应该考虑什么。我们还与Twitter
    Bootstrap有了第一次互动，这是Flat UI包的基础。我们成功地通过使用HTML、预定义的Bootstrap类和自定义CSS样式来创建与之前完全相同的设计。我们还使用了`PageScroller`来创建我们的单页滚动导航。
- en: Next, let's see how we can create our own Flat UI kit by creating our own components.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何通过创建自己的Flat UI套件来创建自己的组件。
