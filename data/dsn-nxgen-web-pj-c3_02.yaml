- en: Chapter 2. Shiny Buttons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。闪亮按钮
- en: CSS3 buttons have been considered a hot topic since they were first introduced
    on cutting-edge browsers' nightly builds. Buttons are important, well-recognized
    elements of the majority of user interfaces. What makes them a hot topic for web
    developers is that CSS3 buttons are easy to modify by simply changing the text
    or the stylesheet declarations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从它们首次出现在尖端浏览器的夜间构建以来，CSS3按钮一直被认为是一个热门话题。按钮是大多数用户界面中重要且广为人知的元素。对于Web开发人员而言，使它们成为热门话题的原因是CSS3按钮易于通过简单更改文本或样式表声明来修改。
- en: 'In this chapter, we''ll create buttons that mimic their real-world counterparts
    using only CSS3\. While doing so, we''ll explore new CSS properties and tricks
    to achieve our goals. We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将仅使用CSS3创建模仿现实世界对应物的按钮。在这样做的同时，我们将探索新的CSS属性和技巧来实现我们的目标。我们将涵盖以下主题：
- en: A coin-operated push button
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个投币式按钮
- en: The `:before` and `:after` pseudo-selectors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:before`和`:after`伪选择器'
- en: Gradients
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变
- en: Avoiding experimental prefixes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免实验性前缀
- en: Shadows
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阴影
- en: Adding labels
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加标签
- en: Handling mouse clicks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理鼠标点击
- en: Small change in CSS, big results
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS中的小改变，大结果
- en: An ON/OFF switch
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个开关
- en: The active state
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动状态
- en: The checked state
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选中状态
- en: Adding colors
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加颜色
- en: Supporting older browsers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持旧版浏览器
- en: A final note on CSS gradient syntax
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于CSS渐变语法的最后说明
- en: Creating a coin-operated push button
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个投币式按钮
- en: 'In the first part of this chapter we focus on creating a realistic coin-operated
    push button. We want to use as much CSS as possible and to take advantage of the
    new features without using images. The following screenshot is a glimpse of the
    result:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们专注于创建一个逼真的投币式按钮。我们希望尽可能多地使用CSS，并利用新功能而不使用图像。以下截图是结果的一瞥：
- en: '![Creating a coin-operated push button](img/3264OT_02_00.01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Creating a coin-operated push button](img/3264OT_02_00.01.jpg)'
- en: 'To start with, let''s create a folder called `shiny_buttons`, where we''ll
    store all of the project''s files. Then, we need a file, `index.html`, filled
    with very little markup:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个名为`shiny_buttons`的文件夹，我们将在其中存储所有项目文件。然后，我们需要一个填充了非常少标记的文件`index.html`：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As the markup shows, we are using a single `<a>` element to declare our button.
    An anchor tag may not seem sophisticated enough to produce a complex button and
    leads us to believe that we'll need more HTML, but this is not the case. We can
    achieve amazing results using only this tag, along with our CSS3 declarations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标记所示，我们使用单个`<a>`元素来声明我们的按钮。锚标记可能看起来不够复杂，无法产生复杂的按钮，并且让我们相信我们需要更多的HTML，但事实并非如此。我们可以仅使用此标记以及我们的CSS3声明来实现惊人的结果。
- en: The :before and :after pseudo-selectors
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`:before`和`:after`伪选择器'
- en: 'As we discovered in the previous chapter, pseudo-selectors can be treated as
    elements and styled without the need to add additional markup to the HTML page.
    If we set the `<a>` element to `position:relative`, and both `:after` and `:before`
    to `position:absolute`, we can place them using coordinates relative to the position
    of `<a>`. Let''s try this by creating an `application.css` file in a `css` folder
    within the project:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中发现的，伪选择器可以被视为元素并且可以在不需要向HTML页面添加额外标记的情况下进行样式化。如果我们将`<a>`元素设置为`position:relative`，并且将`:after`和`:before`都设置为`position:absolute`，我们可以使用相对于`<a>`位置的坐标来放置它们。让我们尝试通过在项目中的`css`文件夹中创建一个`application.css`文件来实现这一点：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we load what we''ve done so far in a browser, we start noticing the shape
    of a coin-op push button. Two circles, one within the other, positioned to the
    left of the label, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中加载到目前为止所做的工作，我们开始注意到一个投币式按钮的形状。两个圆，一个在另一个内部，位于标签的左侧，如下截图所示：
- en: '![The :before and :after pseudo-selectors](img/3264OT_02_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![The :before and :after pseudo-selectors](img/3264OT_02_01.jpg)'
- en: All we did to create the circle shape was to impose a border radius equal to
    half the size of the box. Well done! Now we can remove the green and red circle
    backgrounds and move on to explore gradients.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的一切是创建圆形形状，就是施加一个边框半径等于盒子尺寸的一半。干得好！现在我们可以移除绿色和红色的圆形背景，然后继续探索渐变。
- en: Gradients
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐变
- en: 'When using CSS gradients, we instruct the browser''s layout engine to draw
    patterns following our CSS directions. A **gradient** corresponds to a runtime-generated,
    size-independent image, and so it can be used wherever the `url()` notation is
    allowed. There are four types of gradients: `linear-gradient`, `repeating-linear-gradient`
    , `radial-gradient`, and `repeating-radial-gradient`. The following gradient code
    example provides an introductory overview of each of them:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用CSS渐变时，我们指示浏览器的布局引擎根据我们的CSS方向绘制图案。**渐变**对应于运行时生成的、大小独立的图像，因此可以在允许`url()`表示法的任何地方使用。有四种类型的渐变：`linear-gradient`，`repeating-linear-gradient`，`radial-gradient`和`repeating-radial-gradient`。以下渐变代码示例提供了对它们的简要概述：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The gradient syntax
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渐变语法
- en: In the preceding gradient code example, it is clear that each statement contains
    positional information (for example, `top left` or `45deg`) with color steps,
    which can optionally have a value indicating where the color is to stop. If two
    colors stop at exactly the same position, we obtain a sharp color change instead
    of a gradient.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的渐变代码示例中，很明显每个语句都包含位置信息（例如`top left`或`45deg`）和颜色步骤，这些颜色步骤可以选择性地具有指示颜色停止的值。如果两种颜色停在完全相同的位置，我们将获得一个锐利的颜色变化而不是渐变。
- en: 'Extra parameters are allowed for radial gradients. In particular, we can choose
    the shape of the gradient, between circle and ellipsis, and how the gradient fills
    the element''s area. To specify, we can choose among the following options:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 径向渐变允许额外的参数。特别是，我们可以选择渐变的形状，圆形和椭圆形之间，以及渐变如何填充元素的区域。具体来说，我们可以在以下选项中进行选择：
- en: '`closest-side`: With this parameter, the gradient expands until it meets the
    closest side of the containing element'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closest-side`：使用此参数，渐变会扩展直到与包含元素的最近一侧相遇'
- en: '`closest-corner`: With this parameter, the gradient expands until it meets
    the closest corner of the containing element'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closest-corner`：使用此参数，渐变会扩展到达包含元素的最近一角'
- en: '`farthest-side`: With this parameter, the gradients expands until it meets
    the farthest side of the containing element'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`farthest-side`：使用此参数，渐变会扩展到达包含元素的最远一侧'
- en: '`farthest-corner`: With this parameter, the gradients expands until it meets
    the farthest corner of the containing element'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`farthest-corner`：使用此参数，渐变会扩展到达包含元素的最远一角'
- en: '`contain`: This is an alias to `closest-side`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`包含`：这是`closest-side`的别名'
- en: '`cover`: This is an alias to `farthest-corner`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover`：这是`farthest-corner`的别名'
- en: 'The following screenshot shows the result of the preceding code executed in
    a browser:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在浏览器中执行前面代码的结果：
- en: '![The gradient syntax](img/3264OT_02_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![渐变语法](img/3264OT_02_02.jpg)'
- en: 'Unfortunately, the previous screenshot does not illustrate what we see if we
    run the example code in a web browser. As a matter of fact, if we execute the
    previous code in a browser supporting CSS3 gradients, such as Google Chrome, what
    we obtain is a list of white boxes with black borders. This is because gradients
    are considered experimental and thus need to be prefixed with a browser-specific
    string for every browser we want to support (for example, `-webkit-`, `-ms-`,
    `-o-`, and `-moz-`). This means that we have to duplicate the statement for each
    browser we''d like to support. For example, in the `#linear` selector from the
    previous code, to achieve the maximum compatibility, we should have written:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，之前的截图并没有说明我们在web浏览器中运行示例代码时看到的情况。事实上，如果我们在支持CSS3渐变的浏览器（例如Google Chrome）中执行之前的代码，我们得到的是一列带有黑色边框的白色框。这是因为渐变被视为实验性质的，因此需要为每个我们想要支持的浏览器添加特定的前缀（例如，`-webkit-`，`-ms-`，`-o-`和`-moz-`）。这意味着我们必须为每个想要支持的浏览器重复声明。例如，在之前代码中的`#linear`选择器中，为了实现最大的兼容性，我们应该写成：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Avoiding experimental prefixes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免实验性前缀
- en: 'We need to find a way to avoid writing a lot of duplicated CSS code only to
    implement all the existing browser experimental prefixes. A good solution is provided
    by Prefix Free ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)),
    a small JavaScript library created by Lea Verou that detects the user''s browser
    and dynamically adds the required prefixes. To install it, we just need to download
    the `.js` file in a `js` folder within our project, name it `prefixfree.js`, and
    add the corresponding script tag to `index.html` just after the `css` request:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要找到一种方法来避免编写大量重复的CSS代码，以实现所有现有的浏览器实验性前缀。一个很好的解决方案是由Lea Verou创建的Prefix Free（[http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)），这是一个小型的JavaScript库，它可以检测用户的浏览器并动态添加所需的前缀。要安装它，我们只需要在项目中的`js`文件夹中下载`.js`文件，命名为`prefixfree.js`，并在`index.html`中的`css`请求之后添加相应的脚本标签。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From this point on, we don't have to worry about prefixes anymore because this
    library will do the heavy lifting for us. There are, however, some minor drawbacks;
    some properties are not automatically detected and prefixed (for example, `radial-gradient`
    and `repeating-radial-gradient` are not prefixed with `-moz-`) and we have to
    suffer a brief delay, roughly equal to the script download time, before the CSS
    gets correctly prefixed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们不再需要担心前缀，因为这个库会为我们完成繁重的工作。然而，也有一些小的缺点；有些属性不会自动检测和添加前缀（例如，`radial-gradient`和`repeating-radial-gradient`不会添加`-moz-`前缀），并且我们需要忍受一个短暂的延迟，大致等于脚本下载时间，才能正确地添加前缀。
- en: 'So, let''s move on and add some gradients to our push buttons:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续向我们的按钮添加一些渐变：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In order to focus specifically on the subject of adding new features to our
    buttons, the preceding code does not repeat the existing CSS declarations from
    `application.css`. It doesn't matter how we apply the new instructions; we can
    either append the previous statements or merge the properties of each selector.
    In any case, the results will be the same.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了专注于向我们的按钮添加新功能的主题，前面的代码没有重复现有的`application.css`中的CSS声明。无论我们如何应用新的指令，我们都可以追加之前的声明或合并每个选择器的属性。无论如何，结果都是一样的。
- en: With the previous code, we created two light points, using radial gradients
    to simulate the shape and the reflection of our push button. CSS3 allows us to
    create this effect by supporting the `rgba()` notation, which accepts an alpha
    value between `0` (transparent) and `1` (opaque).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述代码，我们使用径向渐变创建了两个光点，模拟了我们按钮的形状和反射。CSS3允许我们通过支持`rgba()`符号来创建这种效果，该符号接受`0`（透明）到`1`（不透明）之间的alpha值。
- en: 'Let''s try the result in the browser:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中尝试一下结果：
- en: '![Avoiding experimental prefixes](img/3264OT_02_03.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![避免实验性前缀](img/3264OT_02_03.jpg)'
- en: Upcoming syntax changes for CSS3 gradients
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3渐变的即将到来的语法更改
- en: 'The latest editor draft about CSS3 gradients ([http://www.w3.org/TR/2012/CR-css3-images-20120417/](http://www.w3.org/TR/2012/CR-css3-images-20120417/))
    introduced a small syntax change when providing keywords to define positional
    information. So, instead of writing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CSS3渐变的最新编辑草案（[http://www.w3.org/TR/2012/CR-css3-images-20120417/](http://www.w3.org/TR/2012/CR-css3-images-20120417/)）在提供关键字定义位置信息时引入了一个小的语法更改。因此，我们不再需要写：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We now need to write:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要写成：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For the radial gradient syntax there are a few more changes; so what we wrote
    earlier:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于径向渐变的语法，还有一些更改；因此，我们之前写的：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'was changed to:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 被更改为：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unfortunately, this new syntax is not well supported across browsers at the
    time of writing this book. So we'll stick with the old syntax, which instead has
    a good support.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这种新的语法在撰写本书时在各种浏览器中的支持并不好。因此，我们将继续使用旧的语法，因为它有很好的支持。
- en: Shadows
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阴影
- en: 'Shadows are implemented in CSS3 with two different properties sharing similar
    syntaxes, `box-shadow` and `text-shadow`. Let''s create another example to showcase
    how they work:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3中实现阴影有两个不同的属性，具有相似的语法，`box-shadow`和`text-shadow`。让我们创建另一个示例来展示它们的工作原理：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Essentially, `box-shadow` and `text-shadow` are similar. Both of these properties
    have shadow offset (first two parameters) and blur (third parameter). Only `box-shadow`
    has the optional fourth parameter that controls the spread of the shadow or distance
    of blur.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，`box-shadow` 和 `text-shadow` 是相似的。这两个属性都有阴影偏移（前两个参数）和模糊（第三个参数）。只有 `box-shadow`
    有一个可选的第四个参数，用于控制阴影的扩散或模糊的距离。
- en: Next comes the color, and then, optionally and only for the `box-shadow` property,
    an extra keyword, `inset`, that results in a shadow dropped inside the element
    and not outside. Finally, more shadows can be defined, separated by commas (`,`).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是颜色，然后，仅对于 `box-shadow` 属性，还有一个额外的关键字 `inset`，它导致阴影落在元素内部而不是外部。最后，可以用逗号（`,`）分隔定义更多阴影。
- en: 'The following screenshot shows the result of the preceding code executed in
    a browser:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在浏览器中执行上述代码的结果：
- en: '![Shadows](img/3264OT_02_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![阴影](img/3264OT_02_04.jpg)'
- en: 'With this new knowledge, we can now add more effects to our push buttons. Let''s
    add some more properties to `application.css`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些新知识，我们现在可以向我们的按钮添加更多效果。让我们在 `application.css` 中添加一些属性：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, reload the project in the browser.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在浏览器中重新加载项目。
- en: '![Shadows](img/3264OT_02_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![阴影](img/3264OT_02_05.jpg)'
- en: Adding labels
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标签
- en: 'Each button must have its own symbol on it. To obtain this result, we can use
    an HTML5 `data-*` attribute, such as `data-symbol`. HTML5 considers all `data-*`
    attributes valid and free for developers to be used to hold some application-specific
    information, such as in this case. We can then insert the value of the custom
    attribute inside the push button using the `content` property. Let''s see how,
    but first we need to update our `<a>` elements. So let''s edit `index.html`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按钮必须有自己的符号。为了获得这个结果，我们可以使用HTML5的 `data-*` 属性，比如 `data-symbol`。HTML5认为所有 `data-*`
    属性都是有效的，并且可以自由地由开发人员用来保存一些特定于应用程序的信息，就像在这种情况下一样。然后，我们可以使用 `content` 属性将自定义属性的值插入到按钮中。让我们看看如何做，但首先我们需要更新我们的
    `<a>` 元素。所以让我们编辑 `index.html`：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To type the Black star (★) (Unicode character: U+2605), we can do a copy and
    paste from [http://www.fileformat.info/info/unicode/char/2605/index.htm](http://www.fileformat.info/info/unicode/char/2605/index.htm),
    or we can use the character map included in Windows.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要输入黑星（★）（Unicode字符：U+2605），我们可以从[http://www.fileformat.info/info/unicode/char/2605/index.htm](http://www.fileformat.info/info/unicode/char/2605/index.htm)复制粘贴，或者我们可以使用Windows中包含的字符映射。
- en: 'Next, we need to add proper instructions to `application.css`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在 `application.css` 中添加适当的说明：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the result in the browser:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了浏览器中的结果：
- en: '![Adding labels](img/3264OT_02_06.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![添加标签](img/3264OT_02_06.jpg)'
- en: Indeed, we can change the button's symbol simply by modifying the value of the
    `data-symbol` attribute.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可以通过修改 `data-symbol` 属性的值来简单地改变按钮的符号。
- en: Handling mouse clicks
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理鼠标点击
- en: 'Almost done! Now we need to make the button a bit more responsive. To achieve
    this, we can take advantage of the `:active` pseudo-selector to modify some shadows.
    Let''s add the following lines to `application.css`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎完成了！现在我们需要使按钮更具响应性。为了实现这一点，我们可以利用 `:active` 伪选择器来修改一些阴影。让我们在 `application.css`
    中添加以下行：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'By increasing the value of the `line-height` property, we move the symbol down
    a bit, giving the illusion that it has been pushed down with the button. Let''s
    reload the project in the browser and check the result:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加 `line-height` 属性的值，我们将符号向下移动了一点，给人一种它已经被按钮按下的错觉。让我们重新加载浏览器中的项目并检查结果：
- en: '![Handling mouse clicks](img/3264OT_02_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![处理鼠标点击](img/3264OT_02_07.jpg)'
- en: Small changes in CSS, big results
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS中的小改变，大结果
- en: 'We have now completed the first kind of buttons. Before moving on to the next
    one, we better pause for a second to realize that all the shadows and gradients
    we have coded are basically colorless; they simply add white or black to the underlying
    color. This means that we can choose a different background color for each button.
    So let''s add the following code to `application.css`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了第一种按钮。在继续下一个之前，我们最好停顿一下，意识到我们编写的所有阴影和渐变基本上都是无色的；它们只是为底色添加了白色或黑色。这意味着我们可以为每个按钮选择不同的背景颜色。所以让我们在
    `application.css` 中添加以下代码：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows the result:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了结果：
- en: '![Small changes in CSS, big results](img/3264OT_02_08.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![CSS中的小改变，大结果](img/3264OT_02_08.jpg)'
- en: Creating an ON/OFF switch
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个开关
- en: 'Ok, now we''ll style some checkbox buttons to try and match the appearance
    of some recording studio buttons ("REC"). The following is a screenshot of the
    final result:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们将样式一些复选框按钮，尝试匹配一些录音室按钮（"REC"）的外观。以下是最终结果的截图：
- en: '![Creating an ON/OFF switch](img/3264OT_02_08.02.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个开关](img/3264OT_02_08.02.jpg)'
- en: 'First, let''s add the checkboxes to `index.html`, just after the previous `article`
    element:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在 `index.html` 中添加复选框，就在之前的 `article` 元素后面：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we did in the previous chapter, we now want to hide the `input` element.
    Let''s do this by adding a few lines to `application.css`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在上一章中所做的那样，我们现在想隐藏 `input` 元素。让我们通过在 `application.css` 中添加几行来实现这一点：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Good! We want this element to act like some sort of button, so we force the
    cursor to assume the pointer icon by using the `cursor` property.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们希望这个元素像某种按钮一样工作，所以我们使用 `cursor` 属性强制光标采用指针图标。
- en: Creating a mask
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个遮罩
- en: Now we set a background color for the `article` element. This is fairly important
    for what we're going to build.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为 `article` 元素设置了背景颜色。这对我们即将构建的内容非常重要。
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we focus on the `:before` and `:after` pseudo-selectors:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们关注 `:before` 和 `:after` 伪选择器：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What we've done now is to use a gradient as a sort of mask. In essence, we've
    created a transparent circle with a radius of `50px`, and then we used the background
    color to cover the remaining area.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在所做的是使用渐变作为一种遮罩。实质上，我们创建了一个半径为 `50px` 的透明圆，然后我们使用背景颜色来覆盖剩余的区域。
- en: 'Ok, now the tricky part. To emulate the shape of the button, we create a box
    with rounded corners, and then we use the `box-shadow` property to give the illusion
    of height:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是棘手的部分。为了模拟按钮的形状，我们创建一个带有圆角的框，然后使用`box-shadow`属性来产生高度的错觉。
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The last of the shadow declared (the one highlighted) is also used as a mask.
    It has the same color as the background, and it spreads for `30px` around the
    box we just created, covering the transparent area we declared with the previous
    gradient.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影的最后一个声明（高亮显示的声明）也被用作遮罩。它与背景颜色相同，并且在我们刚刚创建的框周围扩展了`30px`，覆盖了我们之前用前一个渐变声明的透明区域。
- en: 'What is this all about? Let''s try to explain it with a scheme:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这到底是什么？让我们试着用一个方案来解释一下：
- en: '![Creating a mask](img/3264OT_02_09.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![创建遮罩](img/3264OT_02_09.jpg)'
- en: The preceding diagram displays the three shapes we used one above the other.
    If we turn off the `box-shadow` one, then every color set with the `background-color`
    property on `label:before` will be visible within the mask created by the `background-image`
    property of `label:before`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了我们使用的三个形状，一个在另一个上面。如果我们关闭`box-shadow`，那么在`label:before`上设置的每个颜色都将在`label:before`的`background-image`属性创建的遮罩内可见。
- en: 'To see what we''ve done so far, let''s load the project in a browser:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看我们到目前为止所做的工作，让我们在浏览器中加载项目：
- en: '![Creating a mask](img/3264OT_02_10.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![创建遮罩](img/3264OT_02_10.jpg)'
- en: The active state
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动状态
- en: Now we need to handle the active state as we've done before. To simulate the
    pressure, we lower the height of the element and change the offset of some shadows.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要像以前一样处理活动状态。为了模拟压力，我们降低了元素的高度，并改变了一些阴影的偏移。
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s try this in the browser:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中试一试：
- en: '![The active state](img/3264OT_02_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![活动状态](img/3264OT_02_11.jpg)'
- en: Adding the checked state
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加已选状态
- en: What we want to do now, basically, is to change the text of the label from OFF
    to ON and remove the `box-shadow` mask in order to expose a background color that
    we'll use to simulate a light propagating from the button.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们基本上要做的是将标签的文本从OFF更改为ON，并删除`box-shadow`遮罩，以暴露我们将用来模拟从按钮传播光的背景颜色。
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We don't want to activate this effect while the button is still pressed, so
    we have added the `:not(:active)` pseudo-selector.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在按钮仍然被按下时激活这种效果，因此我们添加了`:not(:active)`伪选择器。
- en: Adding colors
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加颜色
- en: 'Let''s set different colors for each button. This time, we need to specify
    one color for the OFF state and one for the ON state:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为每个按钮设置不同的颜色。这一次，我们需要为关闭状态和打开状态分别指定一种颜色：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And the following screenshot shows the result:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的截图显示了结果：
- en: '![Adding colors](img/3264OT_02_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![添加颜色](img/3264OT_02_12.jpg)'
- en: Supporting older browsers
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持旧版浏览器
- en: This project is not meant to degrade gracefully on older browsers, so we need
    to apply a different technique to detect when features essential to this project
    are missing and provide an alternative CSS2 stylesheet.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目不打算在旧版浏览器上优雅地降级，因此我们需要应用一种不同的技术来检测这个项目所需的功能是否缺失，并提供一种替代的CSS2样式表。
- en: For this, we rely on a JavaScript library called `Modernizr.js` ([http://modernizr.com/](http://modernizr.com/)),
    which shows methods for each HTML5/CSS3 feature. These methods simply return `true`
    or `false` depending on the presence of the desired feature. Then, we are going
    to use a small library included in `Modernizr.js`, called yepnope.js, ([http://yepnopejs.com](http://yepnopejs.com))
    to dynamically choose which stylesheet we want to load.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们依赖于一个名为`Modernizr.js`的JavaScript库（[http://modernizr.com/](http://modernizr.com/)），它显示了每个HTML5/CSS3功能的方法。这些方法根据所需功能的存在与否简单地返回`true`或`false`。然后，我们将使用`Modernizr.js`中包含的一个小库，称为yepnope.js（[http://yepnopejs.com](http://yepnopejs.com)），动态选择我们想要加载的样式表。
- en: First of all, we need to download the library. To do so, we have to mark the
    checkboxes corresponding to which features we want to test, from the download
    page at [http://modernizr.com/download/](http://modernizr.com/download/). Let's
    mark **border-radius**, **box-shadow**, **CSS Gradients**, and **multiple backgrounds**.
    Then, hit the **Generate** button, and then the **Download** button, saving the
    file as `modernizr.js` under the `js` folder for our project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载这个库。为此，我们必须在下载页面[http://modernizr.com/download/](http://modernizr.com/download/)上标记对应于我们想要测试的功能的复选框，然后点击**Generate**按钮，然后点击**Download**按钮，将文件保存为`modernizr.js`，保存在我们项目的`js`文件夹下。
- en: 'Ok, now we need to change something within the `<head>` tag of our `index.html`
    file to make this new trick work. The new `<head>` section is shown as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们需要在我们的`index.html`文件的`<head>`标签中做一些更改，以使这个新技巧起作用。新的`<head>`部分如下所示：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We''ve just got to remember to create a `css/olderbrowsers.css` file containing
    some CSS2 instructions to style these elements for older browsers, such as the
    following instructions:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要记住创建一个`css/olderbrowsers.css`文件，其中包含一些CSS2指令，用于为旧版浏览器样式化这些元素，例如以下指令：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We also have to consider that relying only on JavaScript may sometimes be a
    hazardous choice because we aren't providing a non-JavaScript alternative. An
    easy workaround might be setting `olderbrowsers.css` as the default stylesheet
    and then dynamically loading `application.css` only when the required CSS3 properties
    are supported.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须考虑，仅依赖JavaScript有时可能是一个危险的选择，因为我们没有提供非JavaScript的替代方案。一个简单的解决方法可能是将`olderbrowsers.css`设置为默认样式表，然后仅在所需的CSS3属性得到支持时动态加载`application.css`。
- en: 'To do so, however, we have to add a few lines to `application.css` to void
    the `olderbrowsers.css` properties:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了这样做，我们必须在`application.css`中添加一些行来避免`olderbrowsers.css`的属性：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we can change our previous HTML code as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以按照以下方式更改我们之前的HTML代码：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Supporting IE10
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持IE10
- en: 'Internet Explorer 10 supports all the CSS features shows in this project. However,
    we have to face the fact that Prefix Free doesn''t add the `-ms-` experimental
    prefix on the `radial-gradient` notation. This is not a big problem because our
    buttons works well without gradients too, except for the `radial-gradient` notation
    we used as a mask in the ON/OFF switch. To find a way around this, we can add
    the following lines to `application.css`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 10支持该项目中展示的所有CSS特性。然而，我们不得不面对一个事实，即Prefix Free在`radial-gradient`符号上没有添加`-ms-`实验性前缀。这并不是一个大问题，因为我们的按钮即使没有渐变也能正常工作，除了我们在ON/OFF开关中用作蒙版的`radial-gradient`符号。为了解决这个问题，我们可以在`application.css`中添加以下行：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This project goes into details with gradients and shadows, demonstrating how
    these properties can be employed to achieve amazing effects using a very small
    set of HTML elements.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目详细介绍了渐变和阴影，演示了如何利用一小组HTML元素来实现惊人的效果。
- en: Before moving on to the next chapter, it might be useful to know that there
    are a few online gradient generators that let us compose a gradient using a nice
    UI and then provide us the right CSS syntax to include in our stylesheet. They
    can be found at [http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/),
    [http://www.cssbuttongenerator.com/](http://www.cssbuttongenerator.com/), and
    [http://css3generator.com/](http://css3generator.com/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，了解一下在线渐变生成器可能会很有用，它们可以让我们使用友好的UI来组合渐变，然后提供正确的CSS语法以包含在我们的样式表中。它们可以在[http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)、[http://www.cssbuttongenerator.com/](http://www.cssbuttongenerator.com/)和[http://css3generator.com/](http://css3generator.com/)找到。
- en: In the next chapter, we'll learn how to deal with multiple device visualizations
    by creating a menu that works on both desktop and smartphones!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何通过创建一个在桌面和智能手机上都能工作的菜单来处理多个设备的可视化。
