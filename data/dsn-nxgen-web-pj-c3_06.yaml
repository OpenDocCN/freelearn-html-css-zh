- en: Chapter 6. Parallax Scrolling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 视差滚动
- en: What is **parallax scrolling**? Parallax scrolling is a visual effect technique
    that tries to achieve a sense of depth by moving the elements of a scene, which
    have different speeds, for them to respond to a user action, such as the scrolling
    of a web page. This technique has been widely used in the 2D video game industry
    since the eighties.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是**视差滚动**？视差滚动是一种视觉效果技术，试图通过移动场景中具有不同速度的元素来实现深度感，以响应用户的操作，比如网页的滚动。这种技术自80年代以来在2D视频游戏行业被广泛使用。
- en: In this chapter, we'll discover how to enhance our websites with parallax scrolling
    and other cool effects that respond to page scrolling. To achieve this, we'll
    dig into some advanced—and sometimes experimental—CSS 3D techniques and learn
    how to deal with perspective effectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将发现如何通过视差滚动和其他对页面滚动响应的酷炫效果来增强我们的网站。为了实现这一点，我们将深入一些高级的——有时是实验性的——CSS 3D技术，并学习如何有效处理透视。
- en: Due to some implementation differences, we will then focus on how to obtain
    similar effects on different layout engines, such as WebKit and Gecko.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些实现差异，我们将重点关注如何在不同的布局引擎（如WebKit和Gecko）上获得类似的效果。
- en: If you are working on a Windows operating system and using Chrome, you might
    have to switch to Firefox (or IE10) if the CSS 3D results are not as expected
    due to an absent or unsupported GPU. To check this, we can navigate to **about:gpu**
    from our Chrome browser and check whether the **3D CSS** checkbox has been enabled
    or not.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Windows操作系统并且使用Chrome，如果由于缺少或不支持的GPU而导致CSS 3D效果不如预期，您可能需要切换到Firefox（或IE10）。为了检查这一点，我们可以从Chrome浏览器中导航到**about:gpu**，并检查**3D
    CSS**复选框是否已启用。
- en: 'Here are the topics covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Discovering perspective
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现透视
- en: Creating a cube
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个立方体
- en: Perspective origin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透视原点
- en: CSS 3D parallax
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 3D 视差
- en: Differences between layout engines
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局引擎之间的差异
- en: Changing parallax on page scroll
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面滚动时改变视差
- en: Creating a parallax-enabled image gallery
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个支持视差的图库
- en: Discovering perspective
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现透视
- en: As we started exploring in the previous chapter, CSS3 introduces the possibility
    to move our HTML elements in a three-dimensional space. We can now move and rotate
    them around each of the three axes, namely, x, y, and z. While dealing with movement
    around x and y axes is quite easy to figure out, things become a little messy
    when the z axis comes into play.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中开始探索的那样，CSS3引入了在三维空间中移动我们的HTML元素的可能性。我们现在可以沿着x、y和z三个轴移动和旋转它们。虽然处理围绕x和y轴的运动相当容易理解，但当z轴出现时，情况就变得有些混乱。
- en: 'Moving an element along the z axis means getting it closer to or farther away
    from our viewpoint, but this action has some hidden problems, for example, take
    the following statement:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着z轴移动一个元素意味着使其离我们的视点更近或更远，但这个动作有一些隐藏的问题，例如，接下来看下面的陈述：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How can we imagine moving an object of a distance measured in pixels towards
    us? To solve this dilemma, W3C has introduced a property called `perspective`
    that basically tells the browser what distance we're observing the page from.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何想象将一个以像素为单位测量的距离的对象向我们移动？为了解决这个困境，W3C引入了一个称为`perspective`的属性，基本上告诉浏览器我们从什么距离观察页面。
- en: So if we set `500px` as the perspective property, objects placed at the z axis
    with a distance of `250` pixels will look twice as big, and objects placed at
    the z axis with a distance of `500` pixels half as big.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们将`500px`设置为透视属性，放置在z轴上距离为`250`像素的对象将看起来是原来的两倍大，而放置在z轴上距离为`500`像素的对象将看起来是原来的一半大。
- en: 'Let''s try this out with a small example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个小例子来尝试一下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we run this code in a browser (such as Chrome, Firefox, or IE10) that supports
    CSS 3D features, we''ll notice a result similar to the one shown in the following
    screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在支持CSS 3D特性的浏览器（如Chrome、Firefox或IE10）中运行此代码，我们将注意到与以下截图中显示的结果类似的结果：
- en: '![Discovering perspective](img/3264OT_06_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![发现透视](img/3264OT_06_1.jpg)'
- en: 'On increasing the `perspective` property''s value, the result will look flatter,
    on the other hand, if this property is reduced, the red box will look stretched
    to the horizon. Here''s an example with `perspective: 250px`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '增加`perspective`属性的值，结果看起来会更扁平，另一方面，如果减少这个属性，红色的框看起来会被拉伸到地平线上。这里有一个`perspective:
    250px`的例子：'
- en: '![Discovering perspective](img/3264OT_06_2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![发现透视](img/3264OT_06_2.jpg)'
- en: Creating a cube
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个立方体
- en: 'To better understand some of the `perspective` properties, we can use what
    we have learned until now to create a real 3D cube using only CSS. We''ll need
    six `div` tags, one for each side, plus one that will act as a container for the
    others:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解一些`perspective`属性，我们可以利用我们到目前为止学到的知识，仅使用CSS创建一个真正的3D立方体。我们需要六个`div`标签，每个面一个，再加上一个作为其他面的容器：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'First of all, we have to apply some properties to the `#container` selector;
    let''s insert the following chunk of CSS code within the `style` tag that we already
    defined:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将一些属性应用于`#container`选择器；让我们在已经定义的`style`标签中插入以下一段CSS代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we tell the browser that what's inside this container must be rendered
    taking into account the position on the z axis, and we set the `perspective` property
    to `500px` for the `#container` selector and the elements within the container.
    Last but not least, we ask the browser to also render the rear face of the `div`
    tag that we'll use to create the cube.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉浏览器，容器内的内容必须考虑到z轴上的位置进行渲染，并且我们为`#container`选择器和容器内的元素设置了`perspective`属性为`500px`。最后但同样重要的是，我们要求浏览器也渲染我们将用来创建立方体的`div`标签的后面。
- en: 'Good, now let''s create the faces. We can begin with some basic properties
    for `.square`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们创建面。我们可以从`.square`的一些基本属性开始：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Okay, now each square lays down one over the other and we can begin adjusting
    them one by one. Let''s start with `.back`, we have to move it away from the camera
    to half its size, so set the `transform` property to `-100px`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在每个正方形都放在另一个上面，我们可以开始逐个调整它们。让我们从`.back`开始，我们必须将其从相机移开到一半大小，所以将`transform`属性设置为`-100px`：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next we look at `.left`. Here we have to apply a rotation against its y axis
    first and then translate it by half of its size to the left-hand side. This is
    because every transformation, unless stated differently, has its origin in the
    center of the element; also, we have to remember that transformations are applied
    in sequence, so the element has to be translated against its z axis in order to
    achieve the correct result:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们看`.left`。在这里，我们首先必须对其y轴应用旋转，然后将其向左移动一半大小。这是因为除非另有说明，否则每个转换都是以元素中心为原点；另外，我们必须记住转换是按顺序应用的，所以元素必须沿其z轴进行平移，以获得正确的结果：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s a screenshot reminding us of the progress we have made so far:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个提醒我们迄今为止取得的进展的屏幕截图：
- en: '![Creating a cube](img/3264OT_06_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个立方体](img/3264OT_06_3.jpg)'
- en: 'We can use the same strategy with all the remaining faces:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用相同的策略处理所有剩余的面：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we now try to take a screenshot of this experiment (as shown here), we may
    encounter a small disappointment:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试对这个实验进行截图（如图所示），我们可能会遇到一点小失望：
- en: '![Creating a cube](img/3264OT_06_4.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个立方体](img/3264OT_06_4.jpg)'
- en: The `.front` selector's `div` tag covers all the other `div` tags. This small
    experiment shows us that the vanishing point of a scene is set, by default, to
    the center of the element that holds the `perspective` property.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`.front`选择器的`div`标签覆盖了所有其他`div`标签。这个小实验向我们展示了一个场景的消失点默认设置为持有`perspective`属性的元素的中心。'
- en: The perspective-origin property
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 透视原点属性
- en: Luckily, we can easily change the vanishing point using the `perspective-origin`
    property that accepts two values, which can be expressed in all the common CSS
    measurement units or using literals, as happens with `background-position`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以使用`perspective-origin`属性轻松改变消失点，该属性接受两个值，可以用所有常见的CSS测量单位或使用文字表达，就像`background-position`一样。
- en: 'So we''ll add the following to `#container`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将把以下内容添加到`#container`：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And obtain a result similar to the one shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 并获得类似于这里显示的结果：
- en: '![The perspective-origin property](img/3264OT_06_5.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![透视原点属性](img/3264OT_06_5.jpg)'
- en: If we resize the browser window, we will also notice that the vanishing point
    changes because it is related to the `#container` selector that has the `width`
    and `height` properties set equal to the browser viewport.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调整浏览器窗口大小，我们还会注意到消失点会改变，因为它与`#container`选择器相关联，该选择器的`width`和`height`属性设置为与浏览器视口相等。
- en: This behavior is at the root of the trick that we'll use in the next chapter
    to build our parallax project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为是我们将在下一章中用来构建视差项目的技巧的根源。
- en: CSS 3D parallax
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 3D视差
- en: Good, now we have the tools that we need to start building our project. The
    basic idea behind what we're going to create is that if we place elements at a
    different height and scroll while keeping the vanishing point in the center of
    the viewable area, then we can obtain a cool parallax scrolling effect.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们有了开始构建项目所需的工具。我们要创建的基本想法是，如果我们将元素放置在不同的高度并在保持消失点在可见区域中心的情况下滚动，那么我们就可以获得一个很酷的视差滚动效果。
- en: 'As usual, we first need an HTML structure, so let''s begin with this. Let''s
    create the `index.html` file with the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们首先需要一个HTML结构，所以让我们从这里开始。让我们创建带有以下代码的`index.html`文件：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Along with this page, we have to create a file named `css/application.css`
    that will hold our CSS properties and selectors. As we did in the previous example,
    we will stretch `#body` to fit the browser''s viewport, so we can add a few lines
    of CSS code to `application.css`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个页面，我们还必须创建一个名为`css/application.css`的文件，其中将保存我们的CSS属性和选择器。就像我们在之前的例子中所做的那样，我们将`#body`拉伸到适合浏览器视口的大小，所以我们可以在`application.css`中添加几行CSS代码：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ve also added `overflow-y: auto` and `overflow-x: hidden` to the element,
    we''ll discuss how these will be useful in a moment.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还向元素添加了`overflow-y: auto`和`overflow-x: hidden`，我们将在一会儿讨论这些将如何有用。'
- en: Implementing parallax scrolling in WebKit
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在WebKit中实现视差滚动
- en: Ok, before continuing we now have to focus on a single layout engine at a time;
    this is because there are some differences between WebKit and Firefox regarding
    the implementation of the CSS 3D properties, and so we have to handle the two
    cases separately. Let's start with WebKit.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在继续之前，我们现在必须一次专注于一个布局引擎；这是因为在WebKit和Firefox之间关于实现CSS 3D属性的一些差异，所以我们必须分别处理这两种情况。让我们从WebKit开始。
- en: We can take advantage of a neat class that Lea Verou's Prefix Free puts automatically
    on the `html` element of the page where it's inserted. This class has a name equal
    to the experimental prefix needed for the browser; so if we're viewing the page
    from Internet Explorer, the class is `-ms-`, and if from Firefox, it's `-moz-`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用Lea Verou的Prefix Free自动放在插入页面的`html`元素上的一个整洁的类。这个类的名称与浏览器所需的实验性前缀相同；所以如果我们从Internet
    Explorer查看页面，类是`-ms-`，如果从Firefox查看，它是`-moz-`。
- en: 'So we can start adding the `perspective` and `transform-style` properties to
    `#body`, like we did in the previous example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以开始向`#body`添加`perspective`和`transform-style`属性，就像我们在之前的例子中所做的那样：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we have to deal with the `#container` selector; this has to be longer than
    the viewport—as usual all the images required for this project are located on
    the Packt Publishing website ([www.packtpub.com](http://www.packtpub.com)):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须处理`#container`选择器；这必须比视口更长——和往常一样，用于此项目的所有图像都位于Packt Publishing网站上（[www.packtpub.com](http://www.packtpub.com)）：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Due to the fact that we've applied the `overflow` property to `#body`, the scroll
    bar that we'll see in the browser doesn't belong to the whole HTML document, but
    instead belongs to `#body`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将`overflow`属性应用于`#body`，我们在浏览器中看到的滚动条并不属于整个HTML文档，而是属于`#body`。
- en: But `#body` also has a `perspective` property; this means that the vanishing
    point for the contained elements is always at the center of the browser screen,
    so we've achieved the structure that we wished to achieve at the beginning of
    this chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但`#body`也有一个`perspective`属性；这意味着包含元素的消失点始终位于浏览器屏幕的中心，因此我们已经实现了我们在本章开头希望实现的结构。
- en: 'To test our code, we can start adding a few elements inside the container and
    assign them different heights:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的代码，我们可以在容器内添加一些元素并分配它们不同的高度：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can use `transform: translateZ();` to set up the height:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以使用`transform: translateZ();`来设置高度：'
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Good, now we can test what we''ve done so far in a WebKit-compliant browser:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们可以在符合WebKit标准的浏览器中测试我们到目前为止所做的事情：
- en: '![Implementing parallax scrolling in WebKit](img/3264OT_06_6.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![在WebKit中实现视差滚动](img/3264OT_06_6.jpg)'
- en: While scrolling, we can note how the second image—the one closest to our viewpoint—moves
    faster than the first image. We've just achieved parallax on WebKit!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在滚动时，我们可以注意到第二张图片——离我们视点最近的图片——移动得比第一张图片快。我们刚刚在WebKit上实现了视差！
- en: Implementing parallax scrolling in Gecko
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Gecko中实现视差滚动
- en: There are some subtle implementation differences between Gecko and WebKit, along
    with some bugs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Gecko和WebKit之间存在一些微妙的实现差异，以及一些错误。
- en: 'First of all, the property `transform-style: preserve-3d` in Gecko doesn''t
    propagate to all the descendants of the matched elements, but only to first-level
    children. The `perspective` and `perspective-origin` properties also do the same.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，在Gecko中的`transform-style: preserve-3d`属性不会传播到匹配元素的所有后代，而只会传播到一级子元素。`perspective`和`perspective-origin`属性也是如此。'
- en: 'Fortunately, we can find a way around this problem. This can be done by expressing
    `perspective` as a transformation, for example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以找到解决这个问题的方法。例如，可以通过将`perspective`表达为一个转换来实现：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When we use this method, `perspective-origin` is no longer useful and `transform-origin`
    should be used in its place. Imposing `perspective` on Gecko-based browsers in
    this way results in the same behavior as when using perspective on WebKit-based
    browsers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用这种方法时，`perspective-origin`就不再有用了，应该用`transform-origin`代替。在Gecko内核的浏览器上这样强加`perspective`会导致与在WebKit内核的浏览器上使用perspective时相同的行为。
- en: 'So we can add a few lines of CSS code using the same strategy we did with WebKit:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以添加几行CSS代码，使用与我们在WebKit中所做的相同策略：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we open Firefox now and test our project, we''ll see something like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在打开Firefox并测试我们的项目，我们会看到类似这样的东西：
- en: '![Implementing parallax scrolling in Gecko](img/3264OT_06_7.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![在Gecko中实现视差滚动](img/3264OT_06_7.jpg)'
- en: 'Although the result looks like the one obtained with WebKit, scrolling the
    page in this case doesn''t generate any parallax effect. After a quick analysis,
    we may be tempted to assume that this behavior is caused by having placed the
    `transform: perspective` property on the wrong element (`#container` instead of
    `#body`), but the truth is that we consciously chose to act this way due to a
    subtle bug ([https://bugzilla.mozilla.org/show_bug.cgi?id=704469](https://bugzilla.mozilla.org/show_bug.cgi?id=704469))
    that removes the `transform: perspective` property from elements that have the
    `overflow` property.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管结果看起来与WebKit获得的结果相似，但在这种情况下滚动页面不会产生任何视差效果。经过快速分析，我们可能会认为这种行为是由于将`transform:
    perspective`属性放在了错误的元素（`#container`而不是`#body`）上导致的，但事实是我们有意选择这样做是因为一个微妙的错误（[https://bugzilla.mozilla.org/show_bug.cgi?id=704469](https://bugzilla.mozilla.org/show_bug.cgi?id=704469)）会从具有`overflow`属性的元素中移除`transform:
    perspective`属性。'
- en: So now the only way to make Gecko-based browsers behave as expected is to implement
    a small chunk of JavaScript that can dynamically modify our vanishing point, keeping
    it in the center of the browser window.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在使Gecko内核的浏览器表现如预期的唯一方法是实现一小段JavaScript代码，可以动态修改我们的消失点，使其保持在浏览器窗口的中心。
- en: 'This script has to adjust the `transform-origin` property in response to the
    scrolling event:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本必须根据滚动事件调整`transform-origin`属性：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Perfect! Now Gecko-based browsers will also behave as expected.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！现在Gecko内核的浏览器也会表现如预期。
- en: Implementing parallax scrolling in Internet Explorer
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Internet Explorer中实现视差滚动
- en: Internet Explorer 9 does not support CSS 3D transforms but IE10 does, so we
    can also try to run this project with that browser. To achieve the right behavior
    on IE10, we've to apply a few custom properties; this is because IE10 behaves
    in a way that is slightly different from those followed by the other two browsers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 9不支持CSS 3D变换，但IE10支持，所以我们也可以尝试在该浏览器上运行这个项目。为了在IE10上实现正确的行为，我们必须应用一些自定义属性；这是因为IE10的行为与其他两个浏览器的行为略有不同。
- en: 'Basically IE10 supports both the `perspective` and `transform: perspective`
    properties, but the former takes effect only on direct descendants of the element
    that have this property, and the latter works only on the element that has the
    property.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '基本上IE10支持`perspective`和`transform: perspective`属性，但前者只对具有此属性的元素的直接后代产生影响，后者只对具有该属性的元素起作用。'
- en: 'So we have to adopt a behavior closer to the one used for Gecko, but using
    `perspective` instead of `transform: perspective`. Here it is:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '所以我们必须采用一种更接近Gecko内核的行为，但使用`perspective`代替`transform: perspective`。这里是：'
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we also need to change our JavaScript code a bit in order to affect `perspective-origin`
    when the browser is Internet Explorer and supports 3D transforms. Here''s the
    code that can be used instead of the previous one:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们还需要稍微改变我们的JavaScript代码，以便在浏览器是Internet Explorer并支持3D变换时影响`perspective-origin`。以下是可以用来代替先前代码的代码：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To make this work, we must download Modernizr in order to check for CSS 3D
    support, we can create a custom build as we did in the previous chapter, but this
    time we only check the **CSS 3D** **Transforms** checkbox in the configuration
    panel ([http://modernizr.com/download/](http://modernizr.com/download/)). Next,
    we have to include the downloaded file ([js/modernizr.js](http://js/modernizr.js))
    in our page just after the other `script` tags:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个工作，我们必须下载Modernizr以检查CSS 3D支持，我们可以像在上一章中那样创建一个自定义构建，但这次我们只在配置面板中检查**CSS
    3D** **Transforms**复选框（[http://modernizr.com/download/](http://modernizr.com/download/)）。接下来，我们必须在页面中包含下载的文件（[js/modernizr.js](http://js/modernizr.js)）在其他`script`标签之后：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And here''s a screenshot from IE10:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是IE10的屏幕截图：
- en: '![Implementing parallax scrolling in Internet Explorer](img/3264OT_06_8.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![在Internet Explorer中实现视差滚动](img/3264OT_06_8.jpg)'
- en: Adding some randomness to the gallery
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向画廊添加一些随机性
- en: Now that we've addressed the browser compatibility issues, we can safely remove
    the experimental comments and classes we previously attached to the images.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了浏览器兼容性问题，我们可以安全地删除我们之前附加到图像的实验性注释和类。
- en: 'To create a sense of randomness, we can define a few groups of classes, each
    group having more variants of the same property, and then we can pick one class
    for each group of each image we want to display. Here''s an example; let''s add
    the following to `application.css`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了营造一种随机感，我们可以定义一些类的组，每个组有同一属性的更多变体，然后我们可以为每个图像的每个组选择一个类来显示。这是一个例子；让我们将以下内容添加到`application.css`：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we can substitute the images used in the previous section with this list,
    where each image has a `depth-*` and one `size-*` attribute (where `*` denotes
    a randomly chosen class from the ones defined in the preceding code) attached
    to it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以用这个列表替换上一节中使用的图像，其中每个图像都有一个`depth-*`和一个`size-*`属性（其中`*`表示在前面的代码中定义的随机选择的类）：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Last but the least, let''s define a basic CSS for each of these images:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的，让我们为每个图像定义基本的CSS：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Good, now let''s reload our browser and test this out:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在让我们重新加载浏览器并测试一下：
- en: '![Adding some randomness to the gallery](img/3264OT_06_09.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![向画廊添加一些随机性](img/3264OT_06_09.jpg)'
- en: Rotating the images
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转图像
- en: 'Since we''re dealing with a real 3D environment, we can try to develop more
    interesting effects using the same basic idea. For example, what if we rotate
    an element instead of simply moving it towards us? Let''s try! First of all we
    need to add a few more images to our gallery; this time we also decided to add
    some decorative text, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在处理一个真正的3D环境，我们可以尝试使用相同的基本思想开发更有趣的效果。例如，如果我们旋转一个元素而不是简单地将它向我们移动会怎么样？让我们试试！首先，我们需要向我们的画廊添加一些更多的图像；这次我们还决定添加一些装饰性文本，如下：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then we can use the `rotateX` transformation method on the images:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以对图像使用`rotateX`变换方法：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'A few more CSS properties to also style the paragraphs a little, and we''re
    done:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些CSS属性来稍微样式化段落，然后我们就完成了：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here''s a screenshot of the resulting gallery:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果画廊的屏幕截图：
- en: '![Rotating the images](img/3264OT_06_10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![旋转图像](img/3264OT_06_10.jpg)'
- en: A 3D panorama
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个3D全景
- en: Let's also experiment with the `rotateY` method to complete this project. This
    time we'll use this property along with the `perspective-origin` property trick
    to create a cool panoramic effect.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也尝试使用`rotateY`方法来完成这个项目。这次我们将使用这个属性以及`perspective-origin`属性技巧来创建一个很酷的全景效果。
- en: 'First of all we need a panorama image, and then we can use an image editor
    to cut it into three pieces wherein the central image is roughly twice the size
    of the other two (for example, 800 x 800 px and 500 x 800 px). Once we''ve finished
    this, we can then add these images just before the end of the `#container` selector:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们需要一个全景图像，然后我们可以使用图像编辑器将其切成三部分，其中中央图像的大小大约是其他两个的两倍（例如，800 x 800像素和500 x 800像素）。完成后，我们可以将这些图像添加到`#container`选择器的末尾之前：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we can use the `rotateY` method for both `.left` and `.right`, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以对`.left`和`.right`都使用`rotateY`方法，如下：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And here''s the result:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果：
- en: '![A 3D panorama](img/3264OT_06_11.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![一个3D全景](img/3264OT_06_11.jpg)'
- en: Dealing with older browsers
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理旧版本浏览器
- en: 'Although the core effects of this project take advantage of some CSS 3D properties
    that cannot be emulated in older versions of the browser, the whole structure
    is made using only CSS 2-compatible properties and selectors, and so can be viewed
    from almost any browser:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个项目的核心效果利用了一些CSS 3D属性，这些属性在旧版本的浏览器中无法模拟，但整个结构只使用了兼容CSS 2的属性和选择器，因此几乎可以在任何浏览器中查看：
- en: '![Dealing with older browsers](img/3264OT_06_12.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![处理旧版本浏览器](img/3264OT_06_12.jpg)'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Dealing with the third dimension could lead to a fight with a lot of small implementation
    differences, but once we tame them, the results are stunning and really enjoyable.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 处理第三维可能会导致与许多小的实现差异的斗争，但一旦我们驯服了它们，结果就会令人惊叹并且非常愉快。
- en: 'Here''s what we have discussed in this chapter so far:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本章讨论了以下内容：
- en: CSS can be used to transform elements and move them in a 3D space
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS可以用来转换元素并将它们移动到3D空间中
- en: We can use some properties to define the vanishing point in a 3D scene
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用一些属性来定义3D场景中的消失点
- en: A cool parallax scrolling effect can be emulated by using CSS 3D properties
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用CSS 3D属性，可以模拟出很酷的视差滚动效果
- en: Some JavaScript coding is required to deal with browser implementation differences
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一些JavaScript编码来处理浏览器实现差异
- en: In the next chapter, we'll learn how to enhance the HTML5 `video` element with
    CSS.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用CSS增强HTML5的`video`元素。
