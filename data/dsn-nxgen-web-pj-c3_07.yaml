- en: Chapter 7. Video Killed the Radio Star
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。视频杀死了广播明星
- en: 'Working with the CSS and HTML `video` element is, at the time of this writing,
    still sort of like practicing black magic. The main problem is that each browser
    leverages its particular video implementation technique; some of them use the
    GPU, while others use the same rendering engine used for the rest of the page.
    In this chapter, we''ll explore how to create masks and effects on a running video
    by leveraging the power of SVG and CSS. Here''s a list of the topics we''ll cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，使用CSS和HTML“video”元素仍然有点像黑魔法。主要问题是每个浏览器都利用其特定的视频实现技术；其中一些使用GPU，而其他一些使用用于页面其余部分的相同渲染引擎。在本章中，我们将探讨如何通过利用SVG和CSS的功能在运行视频上创建面具和效果。以下是我们将涵盖的主题列表：
- en: The HTML5 `video` element
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5“video”元素
- en: Masking with SVG
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SVG进行面具处理
- en: SVG animations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG动画
- en: WebKit-specific masking properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于WebKit的特定面具属性
- en: CSS filters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS滤镜
- en: The HTML5 video element
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5视频元素
- en: 'The HTML5 specification introduced new multimedia elements to allow a better
    integration of video and audio within a web page without the need to embed external
    plugins, such as Flash. Embedding a video is now as simple as writing this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5规范引入了新的多媒体元素，允许更好地将视频和音频整合到网页中，而无需嵌入外部插件，如Flash。现在嵌入视频就像写这样简单：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are a few caveats to consider, though; first of all, each browser supports
    only a fraction of the video codecs available, so if we want our element to be
    played, we need to encode our video at least in `mp4` and `webm` and then use
    an alternative syntax to include both of these formats, as shown here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是需要考虑一些注意事项；首先，每个浏览器只支持视频编解码器的一小部分，因此如果我们希望我们的元素能够播放，我们需要至少将我们的视频编码为`mp4`和`webm`，然后使用另一种语法来包含这两种格式，如下所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Miro** ([http://www.mirovideoconverter.com/](http://www.mirovideoconverter.com/))
    is a good, free video converting software and works with both the Mac and Windows
    operating systems. It''s really easy to use—just choose the desired output format
    and drop the file into the application window to begin the conversion process.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Miro**（[http://www.mirovideoconverter.com/](http://www.mirovideoconverter.com/)）是一款很好的免费视频转换软件，适用于Mac和Windows操作系统。它非常易于使用
    - 只需选择所需的输出格式，然后将文件拖放到应用程序窗口中开始转换过程。'
- en: 'Once we set up our `video` element, we''ll soon discover that most of the common
    CSS3 properties that should affect this element''s shape don''t behave the same
    way on all the browsers. For example, the `border-radius` property; in the following
    screenshot, this property is shown in action displaying videos in various browsers
    (note how this property behaves differently in different browsers):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了我们的“video”元素，我们很快就会发现大多数常见的CSS3属性在所有浏览器上对这个元素的形状的影响并不相同。例如，“border-radius”属性；在下面的屏幕截图中，显示了这个属性在各种浏览器中的不同行为（请注意这个属性在不同浏览器中的不同行为）：
- en: '![The HTML5 video element](img/3264OT_07_1.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5视频元素](img/3264OT_07_1.jpg)'
- en: WebKit-based browsers seem to ignore this property whereas Firefox and IE9 implement
    it correctly. This is probably due to the fact that Chrome and Safari play videos
    using the GPU and are thus less able to apply CSS modification on this content.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于WebKit的浏览器似乎忽略了这个属性，而Firefox和IE9正确实现了它。这可能是因为Chrome和Safari使用GPU播放视频，因此无法很好地对此内容应用CSS修改。
- en: These differences between layout engines require a careful approach when dealing
    with video and CSS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 布局引擎之间的这些差异在处理视频和CSS时需要谨慎对待。
- en: In the project, we're going to develop, using CSS, a small selection of modifications
    that can be applied to a video at runtime. Let's start with some basic masks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用CSS开发一小部分可以在运行时应用于视频的修改。让我们从一些基本的面具开始。
- en: Masks
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面具
- en: '**Masks** are useful tools when we need to hide part of some content; they
    are even more useful with videos because we can apply interesting effects that
    otherwise would require some dedicated software. There are several techniques
    we can employ to create a mask using HTML5/CSS3; however, support across browsers
    is inconsistent. In order to account for the inconsistencies, we will combine
    several techniques in our series.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**面具**是在我们需要隐藏部分内容时非常有用的工具；它们在视频中更加有用，因为我们可以应用有趣的效果，否则需要一些专门的软件。我们可以使用HTML5/CSS3创建面具的几种技术；然而，跨浏览器的支持是不一致的。为了解决这些不一致性，我们将在系列中结合几种技术。'
- en: 'To some small extent, we can use `border-radius` to mask our video, thus:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，我们可以使用“border-radius”来遮罩我们的视频，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As can you see, this method works with Firefox and IE, but for WebKit-based
    browsers we need to use a different approach.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这种方法适用于Firefox和IE，但对于基于WebKit的浏览器，我们需要使用不同的方法。
- en: 'If we''re working using a web server (such as Apache or IIS), we may want to
    configure it to serve video files with the appropriate content type. To achieve
    this, we can create a `.htaccess` file in the root of our project (if we''re using
    Apache) with the following content:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用Web服务器（如Apache或IIS）进行工作，可能需要配置它以使用适当的内容类型提供视频文件。为此，我们可以在项目的根目录（如果使用Apache）中创建一个“.htaccess”文件，内容如下：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we're using IIS, there is another procedure to be followed. This is fully
    explained in the guide at [http://blog.j6consultants.com.au/2011/01/10/cross-browser-html5-video-running-under-iis-7-5/](http://blog.j6consultants.com.au/2011/01/10/cross-browser-html5-video-running-under-iis-7-5/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用IIS，还有另一个程序需要遵循。这在[http://blog.j6consultants.com.au/2011/01/10/cross-browser-html5-video-running-under-iis-7-5/](http://blog.j6consultants.com.au/2011/01/10/cross-browser-html5-video-running-under-iis-7-5/)的指南中有详细说明。
- en: 'Since 2008, WebKit has supported a set of CSS properties that manage masks.
    We will use the `webkit-mask-box-image` selector to apply an image mask to our
    movie example. For this, we need a `300px` black circle similar to the one in
    the following image:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自2008年以来，WebKit支持一组管理面具的CSS属性。我们将使用“webkit-mask-box-image”选择器将图像面具应用到我们的电影示例中。为此，我们需要一个类似于以下图像中的“300px”黑色圆：
- en: '![Masks](img/3264OT_07_2.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![面具](img/3264OT_07_2.jpg)'
- en: And then, we will use the property introduced previously to set this black circle
    as the mask of the `video` element. When applied, the black parts of this image
    will let the underlying content be viewable whereas the white parts will keep
    the content completely hidden. Of course, gray colors can be used to partially
    hide/show the content.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用之前介绍的属性将这个黑色圆设置为`video`元素的蒙版。应用后，这个图像的黑色部分将让底层内容可见，而白色部分将完全隐藏内容。当然，灰色可以用来部分隐藏/显示内容。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here''s the result:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Masks](img/3264OT_07_3.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![蒙版](img/3264OT_07_3.jpg)'
- en: More advanced masking
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更高级的蒙版
- en: For now, we can only afford to work with basic types of masking, that is everything
    that can be emulated with the `border-radius` property. But, if we simply try
    to create a mask with a small circle at its center, we discover that this combination
    is not feasible with the previous technique because a rounded corner can only
    lie on an element side. Luckily, we can switch to a more complex but powerful
    one, which involves the SVG format.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只能处理基本类型的蒙版，也就是一切可以用`border-radius`属性模拟的东西。但是，如果我们尝试简单地创建一个中心有小圆的蒙版，我们会发现这种组合在以前的技术中是不可行的，因为圆角只能位于元素的一侧。幸运的是，我们可以转向一个更复杂但更强大的方法，涉及SVG格式。
- en: Both Gecko and WebKit support SVG masking via different CSS properties—Gecko-based
    browsers use the `mask` property, and WebKit uses `-webkit-mask-image`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Gecko和WebKit都支持SVG蒙版，通过不同的CSS属性——基于Gecko的浏览器使用`mask`属性，而WebKit使用`-webkit-mask-image`。
- en: 'These properties don''t just differ by name, they also behave differently:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性不仅名称不同，它们的行为也不同：
- en: The `mask` property needs to be linked to an SVG element called `<mask>` that
    basically is a container for all the shapes we'll use to mask our `html` element
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask`属性需要链接到一个名为`<mask>`的SVG元素，基本上是我们将用来蒙版`html`元素的所有形状的容器'
- en: The `-webkit-mask-image` property, on the other hand, needs to point to an SVG
    element containing all the shapes we want to overlay our video with
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，`-webkit-mask-image`属性需要指向一个包含我们想要用来覆盖视频的所有形状的SVG元素
- en: 'So, for example, here''s how we can implement the `mask` property properly:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是我们如何正确实现`mask`属性的：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And here''s how we can deal with the `-webkit-mask-image` property:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何处理`-webkit-mask-image`属性的：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, the SVG file, `svg/mask-circle.svg`, is defined as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，SVG文件`svg/mask-circle.svg`的定义如下：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In both these cases, the final result is the same and it''s shown here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，最终结果是相同的，如下所示：
- en: '![More advanced masking](img/3264OT_07_4.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![更高级的蒙版](img/3264OT_07_4.jpg)'
- en: 'The drawback of this method is that we have to create two distinct SVG fragments
    to suit both layout engines. Here comes a small improvement that can lead us to
    a better solution; by taking advantage of the `<use>` element, we can suit the
    needs of both properties in a single SVG file, named `svg/mask.svg`, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是我们必须创建两个不同的SVG片段来适应两种布局引擎。这里有一个小的改进，可以让我们走向更好的解决方案；通过利用`<use>`元素，我们可以在单个SVG文件`svg/mask.svg`中满足两种属性的需求，如下所示：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By using this method, we can obtain the same result as the previous image on
    both browsers and with a single CSS statement:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这种方法，我们可以在两个浏览器上获得与之前图像相同的结果，并且只需一个CSS语句：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Well done! Now we're ready to implement some masks in our project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们准备在项目中实现一些蒙版。
- en: Implementing the project
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现项目
- en: In this project, we'll use the beautiful trailer of Sintel ([http://www.sintel.org/about/](http://www.sintel.org/about/)),
    a movie released under the Creative Commons license.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用Sintel的精美预告片（[http://www.sintel.org/about/](http://www.sintel.org/about/)），这是根据知识共享许可发布的电影。
- en: As usual, we'll need a basic project structure with some folders (`css`, `img`,
    `svg`, `js`, `video`). The videos used in this project are either available on
    the Sintel website or can be downloaded from Packt's website ([www.packtpub.com](http://www.packtpub.com))
    along with the completed project. We are also going to use **Prefix Free** ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)),
    so let's download it and put it inside the `js` folder.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们需要一个基本的项目结构，包括一些文件夹（`css`，`img`，`svg`，`js`，`video`）。在这个项目中使用的视频要么可以在Sintel网站上找到，要么可以从Packt的网站（[www.packtpub.com](http://www.packtpub.com)）下载，以及完成的项目。我们还将使用**Prefix
    Free**（[http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)），所以让我们下载它并放到`js`文件夹中。
- en: 'Let''s create an `index.html` file to begin with:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`index.html`文件开始：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, in `application.css`, let''s do some basic CSS styling as well as the
    masking techniques that we just introduced:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`application.css`中，让我们进行一些基本的CSS样式以及刚刚介绍的蒙版技术：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And here''s the result once the **mask** button is pressed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦按下**mask**按钮，这就是结果：
- en: '![Implementing the project](img/3264OT_07_5.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![实现项目](img/3264OT_07_5.jpg)'
- en: Animating masks
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画蒙版
- en: SVG supports animations via some special elements. In this chapter, we'll use
    the most generic one, `<animate>`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: SVG支持通过一些特殊元素进行动画。在本章中，我们将使用最通用的一个`<animate>`。
- en: 'Here''s an example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The element that contains `<animate>` gets its property animated as described
    by the options specified within the tag's attributes. In the preceding code, we
    ask the browser to animate the opacity of the circle from being completely visible
    to getting hidden in five seconds.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`<animate>`的元素会根据标签属性中指定的选项描述进行属性动画。在上面的代码中，我们要求浏览器在五秒内将圆的不透明度从完全可见变为隐藏。
- en: 'So, we''ll be able to obtain an animation that works both on Gecko and WebKit
    browsers if we create a new SVG file, named `svg/mask-animate.svg`, with the following
    code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们创建一个新的SVG文件，命名为`svg/mask-animate.svg`，并使用以下代码，我们将能够在Gecko和WebKit浏览器上获得一个动画效果：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s the CSS we need to add to `css/application.css`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要添加到`css/application.css`的CSS：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And here''s the result with the mask that grows and shrinks in a 5-second animation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 并且这是蒙版在5秒动画中增长和缩小的结果：
- en: '![Animating masks](img/3264OT_07_6.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![动画蒙版](img/3264OT_07_6.jpg)'
- en: WebKit-specific properties
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebKit特定属性
- en: 'There are some extra properties related to masking that are available only
    for WebKit browsers; these work exactly as their `background` property counterparts,
    so here''s the list, taken from the original WebKit blog post:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些与蒙版相关的额外属性，只适用于WebKit浏览器；它们的工作方式与它们的`background`属性对应项完全相同，因此以下是原始WebKit博客文章中列出的列表：
- en: '`-webkit-mask` (`background`): This is a shortcut for all the other properties'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask`（`background`）：这是所有其他属性的快捷方式'
- en: '`-webkit-mask-attachment` (`background-attachment`): This defines whether the
    mask should scroll within the content or not'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-attachment`（`background-attachment`）：这定义了蒙版是否应在内容中滚动'
- en: '`-webkit-mask-clip` (`background-clip`): This specifies the clipping area of
    the mask'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-clip`（`background-clip`）：这指定了蒙版的裁剪区域'
- en: '`-webkit-mask-position` (`background-position`): This property specifies the
    position of the mask within the element'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-position`（`background-position`）：此属性指定元素内蒙版的位置'
- en: '`-webkit-mask-origin` (`background-origin`): This specifies where the coordinates
    0,0 should be placed within the element (for example, at the beginning of the
    padding area using `padding-box` as the value)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-origin`（`background-origin`）：这指定了坐标0,0应该放置在元素内的位置（例如，在使用`padding-box`作为值的填充区域的开始处）'
- en: '`-webkit-mask-image` (`background-image`): This points to one or more images
    or gradients to be used as masks'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-image`（`background-image`）：这指向一个或多个图像或渐变，用作蒙版'
- en: '`-webkit-mask-repeat` (`background-repeat`): This defines whether the mask
    should be repeated or not and and also whether in one or both directions'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-repeat`（`background-repeat`）：这定义了蒙版是否应重复，以及是在一个方向还是两个方向'
- en: '`-webkit-mask-composite` (`background-composite`): This specifies how two masks
    should merge when overlapping with each other'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-composite`（`background-composite`）：这指定了两个蒙版在重叠时应该如何合并'
- en: '`-webkit-mask-box-image` (`border-image`): This points to one or more images
    or gradients to be used as masks with the same properties and behavior used to
    define border images'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-mask-box-image`（`border-image`）：这指向一个或多个图像或渐变，用作具有相同属性和行为的蒙版来定义边框图像'
- en: 'With these new properties, we can create some extra effects by taking advantage
    of CSS transitions, for example, we can mask our movie with a gradient and then,
    using `:hover`, change its mask position; here''s the CSS code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些新属性，我们可以通过利用CSS过渡创建一些额外的效果，例如，我们可以用渐变蒙版我们的电影，然后使用`:hover`，改变它的蒙版位置；以下是CSS代码：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Due to the fact that these WebKit-mask properties were created during 2008
    and were probably never updated since then, we have to use the old WebKit gradient
    syntax; apart from that, everything else is pretty straightforward, as shown is
    the following image:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些WebKit蒙版属性是在2008年创建的，可能自那时以来从未更新过，我们必须使用旧的WebKit渐变语法；除此之外，其他一切都很简单，如下图所示：
- en: '![WebKit-specific properties](img/3264OT_07_7.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![WebKit特定属性](img/3264OT_07_7.jpg)'
- en: Masking with text
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文本蒙版
- en: 'We can use text to mask a `video` element; the procedure is similar to what
    we saw previously, but of course, we need to craft another ad hoc SVG file, named
    `svg/mask-text.svg`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用文本来蒙版`video`元素；该过程与我们之前看到的类似，但当然，我们需要制作另一个特定的SVG文件，命名为`svg/mask-text.svg`：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we cannot take advantage of the `<use>` element because of another difference
    between how mask positioning and mask size are determined.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们无法利用`<use>`元素，因为蒙版定位和蒙版大小的确定方式之间存在另一个差异。
- en: Gecko-based browsers can only afford fixed coordinates, while WebKit-based browsers
    can stretch the mask to fit the screen, if instead of `-webkit-mask-image`, we
    use `-webkit-mask-box-image` (as we saw in the very first example in this chapter).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Gecko的浏览器只能承受固定坐标，而基于WebKit的浏览器可以拉伸蒙版以适应屏幕，如果我们使用`-webkit-mask-box-image`（如本章中最初的示例中所示）而不是`-webkit-mask-image`。
- en: 'Here''s the required CSS:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所需的CSS：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And here''s a screenshot of the result:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果的屏幕截图：
- en: '![Masking with text](img/3264OT_07_8.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用文本蒙版](img/3264OT_07_8.jpg)'
- en: Filters
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滤镜
- en: 'Along with masks, filters are other powerful modifiers that can be applied
    to elements in order to obtain various effects, such as blur, grayscale, and many
    more. Of course, there are drawbacks; at the time of writing, filters support
    is inhomogeneous. The following are some of the drawbacks:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 除了蒙版，滤镜是其他强大的修改器，可以应用于元素，以获得各种效果，如模糊、灰度等。当然，也有缺点；在撰写本文时，滤镜支持是不均匀的。以下是一些缺点：
- en: IE9 supports some effects using the well-known `progid` filters
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IE9支持使用众所周知的`progid`滤镜的一些效果
- en: Firefox supports filters if declared within an SVG fragment
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox支持在SVG片段中声明滤镜
- en: Chrome, Safari, and other WebKit-based browsers support the last CSS filter
    specification
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome、Safari和其他基于WebKit的浏览器支持最后的CSS滤镜规范
- en: IE10 has not yet confirmed support for these properties, plus it will drop support
    for `progid` filters
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IE10尚未确认对这些属性的支持，而且它将放弃对`progid`滤镜的支持
- en: 'So, let''s implement the blur filter trying to keep the support as wide as
    possible. First, we''ll handle WebKit, which is very easy:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尽可能广泛地实现模糊滤镜。首先，我们将处理非常容易的WebKit：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The parameter passed to the `blur` function is the pixel radius of the effect.
    Next comes Gecko support; for this we have to use the `feGaussianBlur` element
    within a properly done SVG file, named `svg/filters.svg`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`blur`函数的参数是效果的像素半径。接下来是Gecko支持；为此，我们必须在一个正确完成的SVG文件中使用`feGaussianBlur`元素，命名为`svg/filters.svg`：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And then, we can refer to this effect using the `filter` property supported
    by Gecko:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用Gecko支持的`filter`属性来引用这个效果：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we can also implement this effect on IE9 by using the `progid` filters:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还可以通过使用`progid`滤镜在IE9上实现这种效果：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s the final CSS. Note how we added a `:hover` selector trick to change
    the blur on mouseover; this actually works only on WebKit-based browsers, but
    the support can easily be extended by following the previously-stated rules:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最终的CSS。请注意，我们添加了一个`:hover`选择器技巧来在鼠标悬停时改变模糊；这实际上只在基于WebKit的浏览器上有效，但可以通过遵循先前规则轻松扩展支持：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We also have to deal with the fact that both Gecko and IE9 refer to the same
    `filter` property but with really different valorizations. To find a way around
    this problem, we can use the special `-ms-` class added by Lea Verou's prefixfree
    library on the top-level `html` element.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须处理Gecko和IE9引用相同的`filter`属性但具有非常不同的值。为了解决这个问题，我们可以使用Lea Verou的prefixfree库在顶级`html`元素上添加的特殊`-ms-`类。
- en: 'And here''s the result:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Filters](img/3264OT_07_9.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![滤镜](img/3264OT_07_9.jpg)'
- en: On the current stable Chrome version, the `filter` property seems as if it is
    not working out of the box. This is because we need to enable filters on accelerated
    elements. So let's open a new tab and type `about:flags` into the address bar
    and enable the **GPU Accelerated SVG and CSS Filters** experimental feature.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前稳定的Chrome版本中，`filter`属性似乎无法直接使用。这是因为我们需要在加速元素上启用滤镜。因此，让我们打开一个新标签页，然后在地址栏中输入`about:flags`并启用**GPU加速的SVG和CSS滤镜**实验功能。
- en: Grayscale filter
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灰度滤镜
- en: Let's look at one more filter, grayscale! A grayscale filter basically turns
    all the colors of the target image or video to a corresponding gray value.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一个滤镜，灰度！灰度滤镜基本上将目标图像或视频的所有颜色转换为相应的灰度值。
- en: 'Here''s the complete CSS:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的CSS：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And here''s the SVG snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是SVG片段：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And finally, here''s a screenshot taken from IE9:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是从IE9中截取的屏幕截图：
- en: '![Grayscale filter](img/3264OT_07_10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![灰度滤镜](img/3264OT_07_10.jpg)'
- en: 'There are many more filters that can be applied to our elements; for a complete
    list, we can have a look at:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的元素可以应用许多其他滤镜；要获取完整列表，我们可以查看：
- en: The official filter draft specifications at [https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html](https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方滤镜草案规范在[https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html](https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html)
- en: The **Filter Effects** section of the SVG specifications at [http://www.w3.org/TR/SVG/filters.html](http://www.w3.org/TR/SVG/filters.html)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG规范的**滤镜效果**部分在[http://www.w3.org/TR/SVG/filters.html](http://www.w3.org/TR/SVG/filters.html)
- en: The **Filters** section on MSDN at [http://msdn.microsoft.com/en-us/library/ms532847(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ms532847(v=vs.85).aspx)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSDN上的**滤镜**部分在[http://msdn.microsoft.com/en-us/library/ms532847(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ms532847(v=vs.85).aspx)
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered how to deal with HTML5 `video` elements using
    CSS; we learned that browsers behave very differently, and therefore we have to
    implement various techniques to achieve compatibility.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了如何使用CSS处理HTML5 `video`元素；我们了解到浏览器的行为非常不同，因此我们必须实施各种技术以实现兼容性。
- en: We figured out how to dynamically add masks—static or animated—and how to create
    a filter, either using SVG or the new W3C specifications.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找出了如何动态添加蒙版 - 静态或动画 - 以及如何创建滤镜，无论是使用SVG还是新的W3C规范。
- en: In the next chapter we'll learn how to deal with complex animations.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何处理复杂的动画。
