- en: Chapter 10. CSS Charting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。CSS图表
- en: 'With just a simple Google search, we discover that there are plenty of amazing
    charting libraries around, such as **Google Chart Tools** ([https://developers.google.com/chart/](https://developers.google.com/chart/)),
    **Highcharts** ([http://www.highcharts.com/](http://www.highcharts.com/)), and
    **gRaphael** ([http://g.raphaeljs.com/](http://g.raphaeljs.com/)), to name a few.
    What we might not know is that there are some CSS techniques that allow us to
    create fully functional charts without using JavaScript libraries. In this chapter,
    we''ll explore some of these techniques, here are the topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的谷歌搜索，我们发现有很多令人惊叹的图表库，比如**Google Chart Tools**（[https://developers.google.com/chart/](https://developers.google.com/chart/)）、**Highcharts**（[http://www.highcharts.com/](http://www.highcharts.com/)）和**gRaphael**（[http://g.raphaeljs.com/](http://g.raphaeljs.com/)），仅举几例。我们可能不知道的是，有一些CSS技术可以让我们创建完全功能的图表，而不使用JavaScript库。在本章中，我们将探讨其中一些技术，以下是主题：
- en: Creating a bar chart
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个条形图
- en: Implementing a cross-browser, flexible box layout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现跨浏览器、灵活的盒子布局
- en: Handling and displaying `data-*` attributes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理和显示`data-*`属性
- en: Implementing advanced gradients
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现高级渐变
- en: Adding more chart series
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更多的图表系列
- en: Animating the chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为图表添加动画
- en: Creating a pie chart
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个饼图
- en: Creating a bar chart
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个条形图
- en: To create a bar chart, we need to set up an array of `div` elements all aligned
    to their bottom and then control their height properties. Then, we need to find
    a clever way to display each bar's label and, optionally, each bar's value.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个条形图，我们需要设置一个`div`元素数组，它们都对齐到底部，然后控制它们的高度属性。然后，我们需要找到一种聪明的方法来显示每个条的标签，以及可选的每个条的值。
- en: To create the `div` array, we could simply use a `div` container with `position:relative`
    containing a `div` element for each bar absolutely positioned with `bottom:0`.
    The problem with this technique is that we have to define the size of each bar
    in the CSS. We would also need to know in advance the number of bars of the chart
    we're styling, making our CSS less adaptable with different charts or dynamic
    modification of the chart that we're styling.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`div`数组，我们可以简单地使用一个具有`position:relative`的`div`容器，其中包含每个条的`div`元素，绝对定位为`bottom:0`。这种技术的问题在于我们需要在CSS中定义每个条的大小。我们还需要预先知道我们正在设计的图表的条数，这使得我们的CSS在不同的图表或动态修改我们正在设计的图表时变得不太适应。
- en: To solve this problem, we need to find a CSS structure that can equally subdivide
    the container's space between the children elements. We've already used the flexible
    box layout display mode in past chapters, however, we've typically used it for
    centering elements both horizontally and vertically. To solve our bar graph positioning
    issue is when the flexible box layout proves to be invaluable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要找到一个CSS结构，可以平均地将容器空间分配给子元素。我们在过去的章节中已经使用了灵活的盒子布局显示模式，但是，我们通常用它来水平和垂直居中元素。解决我们的条形图定位问题时，灵活的盒子布局就变得非常宝贵了。
- en: 'Let''s define an `index.html` file with a structure to develop our project,
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个`index.html`文件，用以下结构来开发我们的项目：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we can recognize three distinct components of this structure. First of
    all the `div` element with a `data-bar-chart` attribute; this is the container
    of the whole chart; it also holds all the bars. Then, we have the `div` elements
    with the `data-bar` attribute; each of them keeps the necessary space for the
    real bar chart within the container and hold the corresponding bar label in the
    `data-label` attribute.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以识别这个结构的三个不同组件。首先是具有`data-bar-chart`属性的`div`元素；这是整个图表的容器；它还包含所有的条。然后，我们有具有`data-bar`属性的`div`元素；它们中的每一个在容器内保留了真正的条形图所需的空间，并在`data-label`属性中保存相应的条形标签。
- en: Lastly, the `div` elements with the `.` `value` class represent the actual bar
    of the chart; the height of the bar is expressed with the `data-value-percentage`
    attribute, which ranges from `0%` to `100%`. We decided to go for a normalized
    value because this keeps our chart CSS implementation more generic and not fixed
    on this particular instance. To express the real value of each bar, we have defined
    another attribute, `data-value-label`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，具有`.value`类的`div`元素代表图表的实际条形；条的高度用`data-value-percentage`属性表示，范围从`0%`到`100%`。我们决定使用标准化值，因为这使得我们的图表CSS实现更通用，而不是固定在这个特定实例上。为了表示每个条的真实值，我们定义了另一个属性`data-value-label`。
- en: Before we begin, we need to set up, as usual, our development environment, so
    we need to create some folders in the root folder of our project, namely, `css`,
    `img`, `js`, and `scss`. We'll use Sass and Compass for this project, so we need
    to install them (if this has not already been done) by first installing Ruby ([http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/))
    and then executing `gem install compass` (or `sudo gem install compass`) from
    the command-line terminal.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要像往常一样设置我们的开发环境，所以我们需要在项目的根文件夹中创建一些文件夹，即`css`、`img`、`js`和`scss`。我们将在这个项目中使用Sass和Compass，所以我们需要安装它们（如果还没有安装），首先安装Ruby（[http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/)），然后从命令行终端执行`gem
    install compass`（或`sudo gem install compass`）。
- en: Lastly, we need to create a `config.rb` file in the root folder of the project,
    which can be done by copying the same file from the previous project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要在项目的根文件夹中创建一个`config.rb`文件，可以通过从上一个项目中复制相同的文件来完成。
- en: 'When everything has been set up, we can create an `application.scss` file under
    the `scss` folder containing only the following line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切都设置好后，我们可以在`scss`文件夹下创建一个`application.scss`文件，其中只包含以下一行：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We then can enter `compass watch .` from the command-line terminal and verify
    the presence of a corresponding `css/application.css` file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以从命令行终端输入`compass watch .`，并验证相应的`css/application.css`文件是否存在。
- en: Subdividing the space
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将空间细分
- en: 'Because we don''t want to develop a CSS bar chart implementation that only
    works for this specific HTML code, we have to distinguish between properties related
    to this chart from ones that are more generic and re-usable. For this reason,
    the main element has a class called `this_bar_chart`. We can use this class specifically
    for this chart, for example, to define `width` and `height` for this chart, thus
    we can write the following in `application.scss`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们不希望开发一个只适用于这个特定HTML代码的CSS条形图实现，我们必须区分与此图表相关的属性和更通用且可重复使用的属性。因此，主要元素有一个名为`this_bar_chart`的类。我们可以专门为这个图表使用这个类，例如，为这个图表定义`width`和`height`，因此我们可以在`application.scss`中编写以下内容：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Good! We now need to implement the flexible box layout to subdivide the spaces
    of elements with the `data-bar-chart` attribute equally between all the `data-bar`
    elements.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们现在需要实现弹性盒布局，以便在所有`data-bar`元素之间平均分配具有`data-bar-chart`属性的元素的空间。
- en: 'A minor complication is that there are currently two distinct flexbox syntaxes
    (as we saw in [Chapter 9](ch09.html "Chapter 9. Creating an Intro"), *Creating
    an Intro*), and browser support for both syntaxes is incomplete. To work around
    this complication, we will implement both. We need to set the container''s `display`
    property to either `box` (old syntax) or `flex` (new syntax) and then set a property
    `box-flex: 1` (old syntax) or `flex: 1` (new syntax) for each `data-bar` element.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '一个小的复杂之处在于目前有两种不同的flexbox语法（正如我们在[第9章](ch09.html "第9章. 创建介绍")中看到的，*创建介绍*），并且对这两种语法的浏览器支持都不完整。为了解决这个问题，我们将同时实现两种语法。我们需要将容器的`display`属性设置为`box`（旧语法）或`flex`（新语法），然后为每个`data-bar`元素设置`box-flex:
    1`（旧语法）或`flex: 1`（新语法）属性。'
- en: By specifying that each `data-bar` element has the same flex grow factor, all
    of these elements will synchronize to fill the container space at the same speed,
    resulting in the same width for each element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定每个`data-bar`元素具有相同的flex增长因子，所有这些元素将同步填充容器空间，速度相同，从而导致每个元素具有相同的宽度。
- en: 'Here is the code to add to `application.scss`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要添加到`application.scss`中的代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we try our project in a browser (Chrome, Firefox, Internet Explorer 10),
    we''ll notice how the container space gets equally subdivided between all the
    children, whatever the number:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中尝试我们的项目（Chrome，Firefox，Internet Explorer 10），我们会注意到容器空间在所有子元素之间均等地分割，无论数量如何：
- en: '![Subdividing the space](img/3264OT_10_1.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![分割空间](img/3264OT_10_1.jpg)'
- en: Adding Internet Explorer 8 and 9 support
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Internet Explorer 8和9支持
- en: Internet Explorer versions prior to Version 10 do not support flexbox in any
    of its forms. We can easily find a way around this problem by using a polyfill
    library (which we have already introduced in [Chapter 4](ch04.html "Chapter 4. Zooming
    User Interface"), *Zooming User Interface*) named flexie.js ([http://flexiejs.com/](http://flexiejs.com/)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 10之前的版本不支持任何形式的flexbox。我们可以通过使用一个polyfill库（我们已经在[第4章](ch04.html
    "第4章. 缩放用户界面")中介绍过，*缩放用户界面*）来轻松解决这个问题，该库名为flexie.js（[http://flexiejs.com/](http://flexiejs.com/)）。
- en: To add flexie, we need to first download jQuery ([http://jquery.com/](http://jquery.com/)),
    then Selectivzr ([http://selectivizr.com/](http://selectivizr.com/)), and finally
    flexie itself. All of these three files must be placed within the `js` folder.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加flexie，我们首先需要下载jQuery（[http://jquery.com/](http://jquery.com/)），然后是Selectivzr（[http://selectivizr.com/](http://selectivizr.com/)），最后是flexie本身。这三个文件都必须放在`js`文件夹中。
- en: 'Finally, we can place these three files within a conditional comment, ensuring
    that only Internet Explorer 8 and 9 need to perform these additional HTTP requests:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将这三个文件放在一个条件注释中，确保只有Internet Explorer 8和9需要执行这些额外的HTTP请求：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating bar labels
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条形标签
- en: Good! We can now remove the temporary border properties and move on to the next
    step, creating bar labels.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！我们现在可以删除临时边框属性并继续下一步，创建条形标签。
- en: At the moment, our bar labels are contained within the `data-bar` element as
    values of the `data-label` attribute, so we have to use an `:after` or `:before`
    pseudo selector in conjunction with a `content` property to be able to print them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的条形标签包含在`data-bar`元素内，作为`data-label`属性的值，因此我们必须使用`：after`或`：before`伪选择器与`content`属性结合使用才能打印它们。
- en: We also need to reserve some space for those labels, because, at the moment,
    all of the container's height is occupied by the bars of the chart to be created.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为这些标签保留一些空间，因为目前，容器的整个高度都被要创建的图表的条形占据了。
- en: We can achieve this by adding `padding-bottom` to the container (along with
    a `box-sizing` property to keep the original container height, where supported)
    and then placing the bar label outside and below each `data-bar` element, using
    absolute positioning.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向容器添加`padding-bottom`（以及`box-sizing`属性以保持原始容器高度，如果支持的话），然后使用绝对定位将条形标签放在每个`data-bar`元素的外部和下方来实现这一点。
- en: 'Here''s the small chunk of CSS code we can implement to achieve this behavior:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以实现这种行为的一小段CSS代码：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We used the `top:100%` property to move the `:before` selector's content outside
    the containing element without specifying a precise height value, by doing this,
    we keep our CSS chart instructions as generic as possible.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`top:100%`属性将`:before`选择器的内容移动到包含元素之外，而不指定精确的高度值，通过这样做，我们尽可能地保持我们的CSS图表指令的通用性。
- en: 'Reloading the project in the browser now shows the labels correctly placed
    at the bottom of the container, within its padding space:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中重新加载项目，标签将正确放置在容器底部，位于其填充空间内：
- en: '![Creating bar labels](img/3264OT_10_2.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![创建条形标签](img/3264OT_10_2.jpg)'
- en: Before moving on, we need to remember to remove the temporary properties that
    we defined during this step.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要记住删除在此步骤中定义的临时属性。
- en: Designing the bars
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计条形图
- en: 'Each bar contains a `.value` element, this element needs to be styled to respond
    to the following characteristics:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个条形包含一个`.value`元素，这个元素需要被设计以响应以下特征：
- en: Its height must conform to its `data-value-percentage` value
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的高度必须符合其`data-value-percentage`值
- en: It must be aligned on the bottom of its parent `data-bar` element
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须与其父元素`data-bar`的底部对齐
- en: It must show somewhere the value of its `data-value-label` value
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须在某处显示其`data-value-label`值
- en: It must have some sort of margin between itself and the next chart bar
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须在自身和下一个图表条之间有一定的间距
- en: Let's start with these last two points. First, we can use absolute positioning
    to place the `.value` element at the bottom of its parent and at a chosen distance
    from its parent's right and left borders.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最后两点开始。首先，我们可以使用绝对定位将`.value`元素放置在其父元素的底部，并与其父元素的右边和左边的边界的选择距离对齐。
- en: 'Here''s the required CSS:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所需的CSS：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The required behavior regarding the height of the bar can be achieved by looping
    from `0` to `100` and printing a CSS rule that sets the `height` property according
    to the current loop index as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关于条的高度的所需行为可以通过从`0`到`100`循环并打印一个CSS规则来实现，该规则根据当前循环索引设置`height`属性，如下所示：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we can use the same trick that we implemented with the chart labels
    to print each bar value, only this time, we need to place the text just over each
    colored bar. We also have to remember that, as with labels, we need to save some
    space for this text in case the bar''s `height` property is set to `100%`; therefore,
    we need to add a top padding (using the `padding-top` property) to the container,
    as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用与图表标签相同的技巧来打印每个条形的值，只是这一次，我们需要将文本放在每个有色条的正上方。我们还必须记住，与标签一样，如果条的`height`属性设置为`100%`，我们需要为这个文本保存一些空间；因此，我们需要向容器添加顶部填充（使用`padding-top`属性），如下所示：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Before showcasing the project, we need to provide at least one color for the
    chart bars, this is another temporary property because we're going to replace
    it when we introduce chart series later in this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在展示项目之前，我们需要为图表条提供至少一种颜色，这是另一个临时属性，因为当我们在本章后面介绍图表系列时，我们将替换它。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After a reload in our favorite browser, our project looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最喜欢的浏览器中重新加载后，我们的项目看起来像这样：
- en: '![Designing the bars](img/3264OT_10_3.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![设计条](img/3264OT_10_3.jpg)'
- en: Beautifying the chart
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 美化图表
- en: Now it's time to remove the temporary properties and beautify the chart a bit.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候删除临时属性并稍微美化图表了。
- en: There are many ways by which we can further beautify what we've done so far
    and make it look even better. First of all, we can use a custom font for both
    labels and bar values; next, we can add rounded corners and shadows. Finally,
    we can use gradients.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以进一步美化我们迄今为止所做的工作，并使其看起来更好。首先，我们可以为标签和条值使用自定义字体；接下来，我们可以添加圆角和阴影。最后，我们可以使用渐变。
- en: On the subject of gradients, we can implement a technique similar to the one
    we used in [Chapter 2](ch02.html "Chapter 2. Shiny Buttons"), *Shiny Buttons*,
    where we used gradients to handle highlights and shadows, setting the `background-color`
    property to the color of the bar.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于渐变，我们可以实现类似于我们在[第2章](ch02.html "第2章。闪亮按钮")中使用的技术，*闪亮按钮*，在那里我们使用渐变来处理高光和阴影，将`background-color`属性设置为条的颜色。
- en: 'Moving forward, we will choose a custom font, set some inset shadows, specify
    a `border-radius` property, and then define a gradient that goes from transparent
    to a solid color; here''s the required CSS:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，我们将选择自定义字体，设置一些内阴影，指定`border-radius`属性，然后定义从透明到实色的渐变；这是所需的CSS：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We have to specify `-ms-linear-gradient` explicitly because Compass doesn't
    handle the `-ms-` experimental prefix for this kind of property. This behavior
    by Compass is in fact correct, because Microsoft stated that most of the latest
    CSS3 properties work unprefixed on the new Internet Explorer ([http://blogs.msdn.com/b/ie/archive/2012/06/06/moving-the-stable-web-forward-in-ie10-release-preview.aspx](http://blogs.msdn.com/b/ie/archive/2012/06/06/moving-the-stable-web-forward-in-ie10-release-preview.aspx)),
    but at the time of writing, the current version of Internet Explorer 10 still
    requires the `-ms-` prefix.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须明确指定`-ms-linear-gradient`，因为Compass不能处理这种属性的`-ms-`实验性前缀。实际上，Compass的这种行为是正确的，因为微软表示最新的CSS3属性在新的Internet
    Explorer上可以无前缀地工作，但在撰写本文时，当前版本的Internet Explorer 10仍然需要`-ms-`前缀。
- en: 'Now, we can test out the project by simply adding a temporary `background-color`
    property to the `.value` element, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过简单地向`.value`元素添加临时的`background-color`属性来测试项目，如下所示：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And here''s the result:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Beautifying the chart](img/3264OT_10_4.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![美化图表](img/3264OT_10_4.jpg)'
- en: Results may vary on browsers that don't support the properties we've used to
    beautify the project. However, since the `background-color` property is set to
    the main color, key information from the chart is still available.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在不支持我们用来美化项目的属性的浏览器上，结果可能会有所不同。但是，由于`background-color`属性设置为主要颜色，图表的关键信息仍然可用。
- en: Chart lines
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表线
- en: We can also use background properties to draw the horizontal lines that usually
    mark and divide the background of a bar chart into steps, each representing 20
    percent of the total height.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用背景属性来绘制通常标记和将条形图的背景分成步骤的水平线，每个步骤代表总高度的20%。
- en: 'To proceed, we need to create a linear gradient that is mostly transparent,
    except for its very first pixel, and then we have to set the size of this background
    to 20 percent and repeat it; here''s the required CSS:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续，我们需要创建一个线性渐变，除了它的第一个像素外，大部分是透明的，然后我们必须将此背景的大小设置为20%，并重复它；这是所需的CSS：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And here''s the result:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Chart lines](img/3264OT_10_5.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图表线](img/3264OT_10_5.jpg)'
- en: This is not exactly what we were expecting; the last line is slightly higher
    up than the bottom of the bar. This is probably because the browser finds it difficult
    to align a repeating gradient when the container size is not a perfect multiplier
    of the number of times we want the background to fit.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是我们预期的结果；最后一行比条的底部略高。这可能是因为浏览器发现很难在容器大小不是我们希望背景适合的次数的完美倍数时对齐重复的渐变。
- en: 'We can try a different approach using a single gradient describing five small
    gray bands; here''s the CSS code that replaces the previous one:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试使用一个描述五个小灰色条带的单一渐变的不同方法；以下是替换先前代码的CSS代码：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Although the code appears less elegant, the results are far better than the
    previous attempt.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管代码看起来不够优雅，但结果比之前的尝试要好得多。
- en: '![Chart lines](img/3264OT_10_6.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图表线](img/3264OT_10_6.jpg)'
- en: Our current solution is not entirely perfect because we are forced to specify
    the size of the gray bands using percentages, and this may lead to thick bands
    when the size of the chart increases too much. All things considered, this is
    the best solution so far, so let's stick with it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前的解决方案并不完全完美，因为我们被迫使用百分比来指定灰色条带的大小，这可能会导致当图表的大小增加太多时出现粗条带。综上所述，这是迄今为止最好的解决方案，所以让我们坚持下去。
- en: Now we can remove the temporary CSS `background-color` property and move to
    the next chart enhancement, the series.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以删除临时的CSS`background-color`属性，并转移到下一个图表增强，系列。
- en: Chart series
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表系列
- en: 'In our markup, all the `.value` elements have another class, `.series1`; this
    is because we want our chart to support multiple series, so let''s add to our
    markup a new `.series2` set of elements:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的标记中，所有的`.value`元素都有另一个类`.series1`；这是因为我们希望我们的图表支持多个系列，所以让我们在标记中添加一个新的`.series2`元素集：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can assume that each chart series comes with a checkbox and a bunch of elements,
    all with the same `.seriesx` class, where `x` is a number between `1` and `4`
    (we don't support more than 4 series for each chart).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以假设每个图表系列都带有一个复选框和一堆元素，所有这些元素都有相同的`.seriesx`类，其中`x`是`1`到`4`之间的数字（我们不支持每个图表超过4个系列）。
- en: 'With this assumption, we can set up a Sass `@for` loop between `1` and `4`
    to accomplish the following tasks:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种假设下，我们可以设置一个Sass `@for`循环，完成以下任务：
- en: Set `background-color` for the series
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为系列设置`background-color`
- en: Hide the series if the corresponding checkbox is not checked
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果相应的复选框未被选中，则隐藏系列
- en: To dynamically create different colors for each series, we can rely on the **hsl**
    coordinate system (**hue saturation lightness**) because by simply changing the
    hue component, we can obtain colors that keep the same saturation and lightness,
    resulting in a more pleasant composition.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了动态创建不同颜色的系列，我们可以依赖于**hsl**坐标系统（**色相饱和度亮度**），因为通过简单地改变色相分量，我们可以获得保持相同饱和度和亮度的颜色，从而产生更愉悦的组合。
- en: To hide the series, we have to create a rather complex CSS rule that basically
    says that, if the checkbox with a class—say `series1`—is checked, get all the
    elements within the `data-bar-chart` series with the same series class (`series1`
    in this case) and set their `opacity` properties to `1`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要隐藏系列，我们必须创建一个相当复杂的CSS规则，基本上是说，如果具有类似`series1`的类的复选框被选中，就获取`data-bar-chart`系列中具有相同系列类（在这种情况下是`series1`）的所有元素，并将它们的`opacity`属性设置为`1`。
- en: 'Here''s the corresponding CSS:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的CSS：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And here''s the result:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Chart series](img/3264OT_10_7.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图表系列](img/3264OT_10_7.jpg)'
- en: Adding some animations
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些动画
- en: 'We have used `opacity` to hide the series in response to the checkbox uncheck
    so that we can add a `transition` directive and fade in and out the series:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`opacity`来隐藏系列以响应复选框的取消选中，以便我们可以添加`transition`指令并淡入和淡出系列：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Internet Explorer 8 and 9
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Internet Explorer 8和9
- en: Surprisingly, even Internet Explorer 8 understands and applies the complex rule
    that we defined before. The credit for this achievement goes to Selectivzr, a
    library we included with flexie and that has the ability to enable some CSS3 selectors
    from IE6 to IE8\. The only problem is that these browsers don't support the `opacity`
    property, so we have to detect this and switch back to the better supported `display:none`
    property.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，即使是Internet Explorer 8也能理解并应用我们之前定义的复杂规则。这一成就归功于Selectivzr，这是一个我们与flexie一起包含的库，它有能力在IE6到IE8中启用一些CSS3选择器。唯一的问题是这些浏览器不支持`opacity`属性，所以我们必须检测这一点，并切换回更好支持的`display:none`属性。
- en: We can use a custom Modernizr build to accomplish this task, so let's download
    it from the official website ([http://modernizr.com/download](http://modernizr.com/download))
    taking care to select the **opacity** checkbox from the **CSS3** column.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用自定义的Modernizr构建来完成这项任务，所以让我们从官方网站（[http://modernizr.com/download](http://modernizr.com/download)）下载它，注意从**CSS3**列中选择**opacity**复选框。
- en: 'Next, after having renamed the file to just `modernizr.js`, we can include
    it in the HTML file, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将文件重命名为`modernizr.js`后，我们可以将其包含在HTML文件中，如下所示：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we need to add another rule within the series'' loop that uses `display:none`
    instead of `opacity: 0` if the class `no-opacity` is present on the `html` element.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，我们需要在系列的循环中添加另一个规则，如果`html`元素上存在`no-opacity`类，则使用`display:none`而不是`opacity:
    0`。'
- en: 'Here''s the new loop, including the `.no-opacity` selector:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的循环，包括`.no-opacity`选择器：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Rotating the chart
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转图表
- en: By taking advantage of the CSS `transform` property, we can easily transform
    this chart from a vertical bar chart to a horizontal one. This process, however,
    cannot be defined generically, as we did for bars and series, because it is closely
    dependent upon the chart size; so, we'll use the `.this_bar_chart` selector.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用CSS `transform`属性，我们可以轻松地将这个图表从垂直条形图转换为水平条形图。然而，这个过程不能像我们为条和系列所做的那样通用地定义，因为它严重依赖于图表的大小；因此，我们将使用`.this_bar_chart`选择器。
- en: To accomplish this, we'll change the `width` and `height` properties of the
    chart (we'll set them both to `500px` to better handle the sub-sequential rotation),
    rotate the whole chart by `90` degrees, and then rotate back the text elements
    in order to keep them readable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将改变图表的`width`和`height`属性（将它们都设置为`500px`以更好地处理后续的旋转），将整个图表旋转`90`度，然后再次旋转文本元素以保持可读性。
- en: 'Here''s the CSS:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是CSS代码：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And this is the result:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果：
- en: '![Rotating the chart](img/3264OT_10_8.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![旋转图表](img/3264OT_10_8.jpg)'
- en: Of course, neither does this last implementation work, nor is it easily obtainable,
    in browsers where CSS `transform` properties are not supported.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在不支持CSS `transform`属性的浏览器中，这种最后的实现既不起作用，也不容易获得。
- en: Creating pie charts using only CSS and HTML
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅使用CSS和HTML创建饼图
- en: In conclusion of this chapter, I want to introduce to you a very smart technique
    I learned from Patrick Denny (Head Noggin of Atomic Noggin Enterprises) for creating
    pie charts out of nothing but HTML and CSS.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我想向你介绍一个非常聪明的技术，我从Patrick Denny（Atomic Noggin Enterprises的负责人）那里学到了，可以仅使用HTML和CSS创建饼图。
- en: 'The core of the technique focuses on how to obtain a slice of the chart of
    the desired size; this is achieved using the `clip` and `border-radius` properties
    on an HTML structure like this (we can create a new `pie.html` file):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术的核心是如何获得所需大小的图表切片；这是通过在HTML结构上使用`clip`和`border-radius`属性来实现的（我们可以创建一个新的`pie.html`文件）：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: First of all, we create a circle using a `.slice` selector and the `border-radius`
    property; we cut the circle in half.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`.slice`选择器和`border-radius`属性创建一个圆形；然后将圆形切成两半。
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, we cut off the other half of the circle by using the `clip` property,
    as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`clip`属性切掉圆形的另一半，如下所示：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, using the `clip` property on `.hold`, we cut off the other half of the
    circle with the `width` and `height` properties set to `200px`. The last step
    is easy, we can show a slice of the pie of a chosen size by rotating `.slice`
    by the correspondent angle:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过在`.hold`上使用`clip`属性，我们使用`width`和`height`属性设置为`200px`切掉圆形的另一半。最后一步很容易，我们可以通过旋转`.slice`来展示所选大小的饼图切片：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And here''s the result:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果：
- en: '![Creating pie charts using only CSS and HTML](img/3264OT_10_9.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![仅使用CSS和HTML创建饼图](img/3264OT_10_9.jpg)'
- en: By stacking some of these HTML structures one on top of the other, a fully-functional
    and pure CSS pie chart can be obtained.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将一些这样的HTML结构堆叠在一起，可以获得一个完全功能的纯CSS饼图。
- en: A more detailed procedure is described on Patrick's blog at [http://atomicnoggin.ca/blog/2010/02/20/pure-css3-pie-charts/.](http://atomicnoggin.ca/blog/2010/02/20/pure-css3-pie-charts/.).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更详细的步骤，请参阅Patrick的博客[http://atomicnoggin.ca/blog/2010/02/20/pure-css3-pie-charts/.](http://atomicnoggin.ca/blog/2010/02/20/pure-css3-pie-charts/.)
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've used resources and techniques introduced earlier in the
    book to build a rather complex visual graph. This project shows how CSS can be
    used to develop components that otherwise would require JavaScript or additional
    technologies such as Flash or Silverlight.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了本书早期介绍的资源和技术来构建一个相当复杂的视觉图表。这个项目展示了CSS如何被用来开发否则需要JavaScript或其他技术（如Flash或Silverlight）的组件。
