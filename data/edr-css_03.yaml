- en: Chapter 3. Implementing Received Wisdom
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。实施得到的智慧
- en: '*You often don''t really understand the problem until after the first time
    you implement a solution -The Cathedral and the Bazaar ([http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s02.html](http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s02.html))*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*你通常在第一次实施解决方案之后才真正理解问题 -《大教堂与集市》（[http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s02.html](http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/ar01s02.html)）*'
- en: In the last chapter we considered some of the more obvious difficulties of dealing
    with a large CSS codebase. In this chapter, we'll consider some existing approaches
    for dealing with those problems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们考虑了处理大规模CSS代码库的一些更明显的困难。在本章中，我们将考虑一些现有的方法来解决这些问题。
- en: Over the course of two years I've went on a CSS architecture and maintenance
    odyssey. Near the beginning of the experience I did what any sensible developer
    should do. I looked to see how smart people had dealt with the problem already.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在两年的时间里，我进行了CSS架构和维护的历程。在经历的开始，我做了任何明智的开发者都应该做的事情。我看了看聪明人是如何处理这个问题的。
- en: CSS architectural approaches can seem like the equivalent of diet pills for
    the overweight. It's easy to snatch at apparent solutions, hoping they'll be exactly
    what you need. However, you probably don't know exactly what you need until you've
    tried to solve your problems at least once.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS架构方法似乎就像是减肥药对于超重者的等效物。很容易抓住表面上的解决方案，希望它们会正是你所需要的。然而，直到你至少尝试解决了问题之后，你可能并不知道自己确切需要什么。
- en: That advice applies here too. It maybe that ECSS isn't the solution to the problems
    you have so if you're just starting to solve your CSS issues, be sure to consider
    what different methodologies offer too.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个建议在这里也适用。也许ECSS并不是你所面临问题的解决方案，所以如果你刚开始解决你的CSS问题，请务必考虑不同方法所提供的内容。
- en: 'At the time of my adventure, the principle approaches for dealing with CSS
    at scale were:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我冒险的时候，处理大规模CSS的主要方法是：
- en: '**OOCSS** (**Object Orientated CSS**), developed by *Nicole Sullivan* ([http://www.stubbornella.org/content/](http://www.stubbornella.org/content/))'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OOCSS**（**面向对象的CSS**），由*Nicole Sullivan*开发（[http://www.stubbornella.org/content/](http://www.stubbornella.org/content/)）'
- en: '**SMACSS** (**Scalable and Modular Architecture for CSS**), developed by *Jonathan
    Snook* ([https://snook.ca/](https://snook.ca/))'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SMACSS**（**可扩展和模块化CSS架构**），由*Jonathan Snook*开发（[https://snook.ca/](https://snook.ca/)）'
- en: '**BEM** (**Block Element Modifier**), developed by *Yandex* ([https://en.bem.info/](https://en.bem.info/))'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BEM**（**块元素修饰符**），由*Yandex*开发（[https://en.bem.info/](https://en.bem.info/)）'
- en: Now, I'll tell you unashamedly right now, I've stolen elements from each. However,
    none of those actually solved all the problems I had.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我会毫不羞愧地告诉你，我从每种方法中都偷了一些元素。然而，这些方法都没有真正解决我所面临的所有问题。
- en: Before we get to ECSS proper I'd like to briefly go over the advantages and
    disadvantages of each of the existing approaches I looked at. That way, at least
    when we get to ECSS you can appreciate the problems it is solving.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正式介绍ECSS之前，我想简要介绍一下我研究的每种现有方法的优缺点。这样，至少当我们开始介绍ECSS时，你就能够理解它所解决的问题了。
- en: On OOCSS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于OOCSS
- en: The most widely practised, and certainly most widely lauded of the existing
    approaches I looked at was OOCSS. That was the first approach that I utilised
    when trying to wrestle my ever growing CSS codebase.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我所研究的现有方法中最广泛使用的，也是最受赞扬的是OOCSS。这是我在试图解决不断增长的CSS代码库时首先采用的方法。
- en: One of the principal arguments for an OOCSS approach is that it removes duplication
    of code and therefore results in a more maintainable CSS codebase. In essence,
    you build a set of CSS *Lego* pieces you can then use in your HTML/templates to
    quickly build out designs. The hope is that once your OOCSS styles are written
    they shouldn't grow (much). You re-use where possible and extend where needed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: OOCSS方法的一个主要论点是它消除了代码的重复，因此导致了更易维护的CSS代码库。实质上，您构建了一组CSS *Lego* 片段，然后可以在HTML/模板中使用它们来快速构建设计。希望一旦编写了OOCSS样式，它们就不应该增长（太多）。在可能的情况下重复使用，在需要的地方扩展。
- en: Before we look at OOCSS I need to get some caveats out there.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看OOCSS之前，我需要先说明一些警告。
- en: This isn't an attack on OOCSS, Atomic CSS or any related **Single Responsibility
    Principle** (**SRP**) approaches. It's merely my argument that a different approach,
    depending upon your goals can offer a preferential outcome.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这并不是对OOCSS、Atomic CSS或任何相关的**单一职责原则**（**SRP**）方法的攻击。这只是我认为，根据你的目标，不同的方法可以提供更优选的结果。
- en: I'm not suggesting that the approach I advocate is a panacea to all CSS scaling
    problems. It is not (there are none).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我并不是在暗示我所倡导的方法是解决所有CSS扩展问题的灵丹妙药。它不是（没有）。
- en: Responsive web design, the Achilles heel of OOCSS
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式网页设计，OOCSS的软肋
- en: 'For me, the biggest problems with an OOCSS approach are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，OOCSS方法最大的问题是：
- en: Responsive Web Design
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式网页设计
- en: Frequent design changes and on-going maintenance
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁的设计更改和持续的维护
- en: An alien abstraction for new developers to learn
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对新开发者来说是一种陌生的抽象概念
- en: Let's see if I can demonstrate why I feel these issues are worth considering.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我能否证明为什么我觉得这些问题值得考虑。
- en: Responsive issues
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式问题
- en: 'I consider *Atomic CSS* ([https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/](https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/))
    (not to be confused with *Atomic Design* ([http://bradfrost.com/blog/post/atomic-web-design/](http://bradfrost.com/blog/post/atomic-web-design/)))
    to represent OOCSS taken the the nth-degree. Let''s consider an imaginary Atomic
    CSS example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为*Atomic CSS*（[https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/](https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/)）（不要与*Atomic
    Design* ([http://bradfrost.com/blog/post/atomic-web-design/](http://bradfrost.com/blog/post/atomic-web-design/)）混淆）代表了OOCSS的极致。让我们考虑一个想象中的Atomic
    CSS示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this OOCSS/Atomic CSS example, the visual needs of the element have been
    split up/abstracted into re-usable classes. One sets a block formatting context
    (`.blk`), another sets some margin (`.m-10`) and finally one provides a floating
    mechanism for the element (`.fr`). Un-opinionated and terse for sure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个OOCSS/原子CSS示例中，元素的视觉需求已经被拆分/抽象为可重复使用的类。一个设置了块格式上下文（`.blk`），另一个设置了一些边距（`.m-10`），最后一个为元素提供了浮动机制（`.fr`）。毫无疑问，这是一种不带偏见且简洁的方法。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: In principle, Atomic CSS is very similar to the first architectural approach
    I devised.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，原子CSS与我设计的第一种架构方法非常相似。
- en: 'It was called **PST!** which was an acronym for Position Structure Theme. The
    idea was this: there would be no semantic HTML classes/CSS selectors. Instead,
    every element on the page could be described by its position, structure and theme.
    Each new selector would just take the next available number. For example, `s1`,
    `s2`, `s3` and on and on. It wasn''t quite a class for each responsibility as
    is the case with Atomic CSS but it was a way of heavily abstracting stylistic
    needs.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它被称为**PST!**，这是Position Structure Theme的缩写。其想法是：不会有语义HTML类/CSS选择器。相反，页面上的每个元素都可以通过其位置、结构和主题来描述。每个新选择器只需使用下一个可用的数字。例如，`s1`，`s2`，`s3`等等。它并不完全是每个责任一个类，就像原子CSS一样，但它是一种大大抽象化的样式需求的方法。
- en: 'Markup looked like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 标记看起来像这样：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Like Atomic CSS it was terse, and there was no pondering on what to call something
    as you authored but in practice it was hugely problematic for my needs, for the
    same reasons described in this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像原子CSS一样，它很简洁，你在编写时不需要思考该如何称呼某个东西，但实际上，对于我来说，它对我的需求来说是非常有问题的，就像本章描述的原因一样。
- en: However, what happens when the viewport changes and we don't want 10px margin
    or the item floating?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当视口更改时，我们不希望有10像素的边距或项目浮动时会发生什么呢？
- en: We could of course make some classes to do things at certain breakpoints. For
    example, `Mplus-cc2` might change a colour at an *Mplus* breakpoint (Mplus here
    would be *Medium* size viewports and above). But I found this practice to be slow
    and laborious. Making very specific changes at certain breakpoints and tying them
    to a class that has to be added to the HTML seemed needlessly complex. Furthermore,
    you inevitably end up with a raft of SRP classes in your style sheets that are
    obsolete. What's the authoring mechanism for removing any cruft from the authoring
    styles sheets when no longer needed?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以在某些断点处创建一些类来执行某些操作。例如，`Mplus-cc2`可能会在*Mplus*断点（这里的Mplus是指*中等*大小的视口及以上）下更改颜色。但我发现这种做法很慢且费力。在某些断点处进行非常具体的更改，并将它们与必须添加到HTML中的类绑定起来似乎是毫无意义的复杂。此外，您最终会在样式表中得到一堆已过时的SRP类。当不再需要时，从编写样式表中删除任何无用的东西的机制是什么？
- en: Maintenance and iteration
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维护和迭代
- en: 'Let''s continue with our prior example. Suppose at some point in the future,
    we change our product to a more progressive layout mechanism; we move from float
    based layouts to Flexbox based layouts. At this point, we will now have twice
    the maintenance burden. We will need to not only change classes in the markup/templates
    but also alter the CSS rules themselves (or write entirely new ones). Furthermore,
    using `float` is redundant with Flexbox so either we leave `.fr` alone (and so
    it continues to exist, needlessly in our CSS) or we make `.fr` responsible for
    something else such as `justify-content: flex-end`. But then what happens if we
    change the flex-direction of our parent at a particular viewport? Arrgggghhhh!'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们继续使用之前的例子。假设在将来的某个时候，我们将产品更改为更具有进步性的布局机制；我们从基于浮动的布局转移到基于Flexbox的布局。在这一点上，我们现在将有两倍的维护负担。我们不仅需要更改标记/模板中的类，还需要修改CSS规则本身（或编写全新的规则）。此外，使用`float`在Flexbox中是多余的，因此要么我们让`.fr`保持不变（因此它在我们的CSS中继续存在，毫无意义），要么我们让`.fr`负责其他事情，比如`justify-content:
    flex-end`。但是如果我们在特定视口下更改父元素的flex-direction会发生什么呢？烦死了！'
- en: Hopefully you can see the inherent shortcomings of an OOCSS approach for maintenance
    when your designs change frequently or you need to render an entirely different
    layout at a different viewport?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您能看到OOCSS方法在设计频繁更改或需要在不同视口下呈现完全不同布局时的固有缺陷？
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Atomic CSS has developed considerably since Thierry's article in Smashing Magazine
    back in 2013\. Depending upon your goals, it may be just the thing you need, I
    would encourage you to check the project out at [http://acss.io](http://acss.io).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 自2013年Thierry在Smashing Magazine上发表文章以来，原子CSS已经有了相当大的发展。根据您的目标，这可能正是您需要的东西，我鼓励您在[http://acss.io](http://acss.io)上查看该项目。
- en: An alien abstraction for new developers
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对新开发人员来说是一种陌生的抽象
- en: Speedily on-boarding new developers may not be an important factor for everyone.
    However, for situations where developers join and leave a team (or perhaps even
    a company) fairly regularly, it can be an important consideration. I was looking
    for a solution that largely allowed developers to continue writing CSS as they
    knew it. Forcing new developers to learn an alien abstraction can be an additional
    unwanted burden. In addition, it may or may not also be problematic to apply that
    abstraction to the template layer; after all many solutions may not even have
    a template layer in the traditional sense.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 快速启用新开发人员可能对每个人来说都不是一个重要因素。然而，在开发人员经常加入和离开团队（甚至可能是公司）的情况下，这可能是一个重要的考虑因素。我正在寻找一种解决方案，它基本上允许开发人员继续按照他们所知道的方式编写CSS。强迫新开发人员学习陌生的抽象可能是一个额外的不需要的负担。此外，将该抽象应用到模板层可能会有问题，毕竟许多解决方案甚至可能没有传统意义上的模板层。
- en: A pure OOCSS example
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个纯粹的OOCSS示例
- en: It would be fair to argue that using Atomic CSS as an example is unfair, and
    perhaps doesn't fairly represent OOCSS. However, trying to get a canonical example
    of OOCSS is difficult as there seems to be so much disparity between what CSS
    authors believe it is, and how it is implemented.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，以原子CSS作为示例是不公平的，也许并不公平地代表了OOCSS。然而，试图找到一个OOCSS的典型示例是困难的，因为CSS作者对它的理解似乎存在很大的差异，以及它的实际实现方式。
- en: I'll therefore provide some further, OOCSS only, examples. I'm going to use
    Nicole Sullivan's original examples from her slides *Our best practices are killing
    us* ([http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us](http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将提供一些进一步的，仅限于OOCSS的例子。我将使用Nicole Sullivan在她的幻灯片*我们的最佳实践正在毁灭我们*（[http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us](http://www.slideshare.net/stubbornella/our-best-practices-are-killing-us)）中的原始例子。
- en: I was reluctant to do this as Nicole's original examples are now very old (2009,
    before Responsive Web Design was even a thing) and, without wishing to speak for
    her, I dare say she might use a different example and approach today.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我不愿意这样做，因为Nicole的原始例子现在已经很老了（2009年，甚至在响应式网页设计出现之前），而且，不想替她说话，我敢说她现在可能会使用不同的例子和方法。
- en: However, hopefully we can agree that the essential aims of OOCSS are *separation
    of structure from skin, and separating content from container* ([https://github.com/stubbornella/oocss/wiki](https://github.com/stubbornella/oocss/wiki))?
    Assuming we are in agreement on that, it is my conviction that OOCSS is detrimental
    to speed of creation and codebase maintainability in certain circumstances.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，希望我们能够达成共识，OOCSS的基本目标是*将结构与皮肤分离，将内容与容器分离*（[https://github.com/stubbornella/oocss/wiki](https://github.com/stubbornella/oocss/wiki)）？假设我们在这一点上达成一致，我坚信在某些情况下，OOCSS对于创作速度和代码库的可维护性是有害的。
- en: In a responsive web design, there are times where the structure is the skin.
    Or rather, the structure does different things in different contexts, and there
    is no sane way to handle this with OOCSS. You however will be the judge.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应式网页设计中，有时结构就是皮肤。或者说，结构在不同的上下文中有不同的作用，而使用OOCSS没有明智的处理方式。不过，你会做出判断。
- en: 'Consider this OOCSS example. First the markup:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下这个OOCSS的例子。首先是标记：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now the CSS (note, I have removed some OldIE specific property/values here):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的CSS（注意，我在这里删除了一些旧IE特定的属性/值）：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![A pure OOCSS example](img/ch3-1.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![一个纯OOCSS的例子](img/ch3-1.jpg)'
- en: The el clasico example of OOCSS; the Media object pattern
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: OOCSS的经典例子；媒体对象模式
- en: 'However, maybe this media object needs to be laid out differently at a 300px
    wide viewport. You could set a media query to make it a column based layout in
    that situation. But let''s say you have the same *object* in a different context
    at the same viewport width? And in that context, it shouldn''t be in a column
    layout. To surmise:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也许这个媒体对象在300px宽的视口下需要以不同的方式布局。你可以设置一个媒体查询，在这种情况下使它成为基于列的布局。但是假设你在同样的视口宽度下在不同的上下文中有相同的*对象*？在那个上下文中，它不应该是一个列布局。总结一下：
- en: One media object needs to be a column based layout at 300px wide (let's call
    this *media1*)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个媒体对象需要在300px宽的基于列的布局中（我们称之为*media1*）
- en: A second media object needs to be a row based layout at 300px wide (as it is
    within another context/container, we will call this *media2*)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个媒体对象需要在300px宽的基于行的布局中（因为它在另一个上下文/容器中，我们将其称为*media2*）
- en: 'Let''s make a class that separates more concerns. It makes a media object a
    column layout at a certain viewport:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制作一个分离更多关注的类。它使媒体对象在特定视口上成为列布局：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That gets added to any element that needs to be a column at that viewport (*media1*)
    so you'll need to head over to the templates/HTML to make that change, adding
    the class where needed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被添加到任何需要在该视口上成为列的元素（*media1*），所以你需要转到模板/HTML中进行更改，在需要的地方添加这个类。
- en: 'Furthermore, *media2* needs to have a different background colour at a larger
    viewport. Let''s add another class to separate that concern:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，*media2*需要在较大的视口上有不同的背景颜色。让我们添加另一个类来分离这个关注点：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Head into the HTML/template to add that style where needed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 进入HTML/模板，在需要的地方添加这个样式。
- en: 'Oh, and *media1* needs the `.img` to be wider at the larger viewport and not
    have the margin. We can make another class for that:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，*media1*需要在较大的视口上使`.img`更宽，而且不需要边距。我们可以为此制作另一个类：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Back into the HTML/templates to make that change happen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 回到HTML/模板中使这个变化发生。
- en: Hopefully now, you can see where this is headed? There's a lot of Single Responsibility
    Principle (SRP) classes being added to facilitate the many and varied scenarios
    our media object needs to facilitate.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现在你能看出这是怎么一回事了？我们需要添加很多单一职责原则（SRP）类来满足我们的媒体对象需要满足的许多不同情况。
- en: 'This approach was not making my large responsive code base more maintainable.
    In fact, quite the opposite. Whenever changes were needed it was necessary to
    go hunting for the particular SRP class for the specific situation and often add/remove
    HTML classes in the markup/templates too. Which made me ponder the question:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法并没有使我的大型响应式代码库更易于维护。事实上，恰恰相反。每当需要进行更改时，就必须去寻找特定情况的SRP类，并经常在标记/模板中添加/删除HTML类。这让我思考这个问题：
- en: '**Why can''t the thing, just be the thing?**'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**为什么这个东西就不能是这个东西呢？**'
- en: For now, you may counter with, *this is a daft example, if a design has so many
    eventualities, it should be normalised*. At which point I would counter that it
    shouldn't be necessary to. Those tasked with coding the front-end shouldn't need
    to hobble a designers creativity just because it makes their code less predictable.
    They should be able to code out a new design simply and easily without concerning
    themselves about how the new component/module/thing may impact others.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你可能会反驳说，*这是一个愚蠢的例子，如果一个设计有这么多可能性，那就应该是正常的*。在这一点上，我会反驳说这是不必要的。负责编写前端代码的人不应该因为这样会使他们的代码变得不可预测而限制设计师的创造力。他们应该能够简单轻松地编写出新的设计，而不必担心新的组件/模块/元素可能会影响其他部分。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Trying to prevent visual changes to a project merely because they make our codebase
    difficult to maintain and reason about is not a defensible stance. We should be
    able to build out any new visual treatment with speed and predictability without
    fear of inadvertently affecting other areas of the project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 试图阻止项目的视觉变化仅仅是因为它们使我们的代码库难以维护和理解，这并不是一个站得住脚的立场。我们应该能够以速度和可预测性构建任何新的视觉效果，而不必担心无意中影响项目的其他部分。
- en: When I've used OOCSS to tackle my needs, my speed to build new visuals decreased
    and the amount of SRP classes increased; often a class got used just once or twice
    on an entire project. Even with a considered naming convention for SRP classes,
    remembering the correct class name for a particular need can require constant
    mental juggling.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我使用OOCSS来满足我的需求时，我构建新视觉的速度减慢了，SRP类的数量增加了；通常一个类在整个项目中只被使用一两次。即使对于SRP类有一个考虑周到的命名约定，记住特定需求的正确类名可能需要不断地进行思维操纵。
- en: When using OOCSS on a rapidly changing project I also found that after some
    time, I found it incredibly frustrating to *unpick* these abstract classes when
    changes were needed. I was having to make many very similar abstract classes when
    they were seldom actually used. Utility classes like `w10`, `w15`, `w20`, `w25`
    etc for different width percentages seemed like a good idea and an obvious abstraction
    to make but they ultimately proved useless and problematic to iterate designs
    with (back to the problem of things needing to do different things in different
    contexts).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个快速变化的项目中使用OOCSS后，我发现在一段时间后，当需要进行更改时，解开这些抽象类变得非常令人沮丧。当它们很少被使用时，我不得不制作许多非常相似的抽象类。像`w10`、`w15`、`w20`、`w25`等不同宽度百分比的实用类似乎是一个好主意，也是一个明显的抽象，但最终它们被证明是无用的，并且在迭代设计时会出现问题（回到了在不同上下文中需要做不同事情的问题）。
- en: 'My first big lesson when employing OOCSS therefore was the same lesson that
    the fine fellow *Kaelig Deloumeau-Prigent* ([http://www.kaelig.fr/](http://www.kaelig.fr/))
    learnt in his time working on large CSS codebases at the BBC and The Guardian
    newspaper:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我使用OOCSS时的第一个重要教训与那位优秀的同行*Kaelig Deloumeau-Prigent*([http://www.kaelig.fr/](http://www.kaelig.fr/))在BBC和《卫报》工作时所学到的教训是一样的：
- en: '*Two years ago I wrote a book where I was preaching DRY code, but after working
    on enduring projects, it''s decoupling that became more important to me.*'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*两年前，我写了一本书，我在书中宣扬DRY代码，但在长期项目上的工作后，解耦对我来说变得更加重要。*'
- en: On large, rapidly changing projects, being able to easily decouple visual modules
    from the project is incredibly important for ongoing maintenance and OOCSS didn't
    facilitate this need well.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型、快速变化的项目中，能够轻松地将视觉模块与项目解耦对于持续维护非常重要，而OOCSS并没有很好地满足这一需求。
- en: SMACSS
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SMACSS
- en: SMACSS, which stands for Scalable Modular Architecture for CSS, is detailed
    fully in *Jonathan Snook's book on the subject* ([https://smacss.com/](https://smacss.com/)).
    I'm not going into detail about SMACSS here as I think you should go and check
    that book out for yourself. Reading SMACSS gave me plenty to chew over as I faced
    my own challenges and I certainly took things, such as how to think about state
    changes, from it. However, I will detail why SMACSS didn't work for me.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SMACSS代表可扩展模块化CSS架构，*Jonathan Snook关于这个主题的书*（[https://smacss.com/](https://smacss.com/)）中有详细介绍。我不打算在这里详细介绍SMACSS，因为我认为你应该自己去查看那本书。阅读SMACSS给了我很多思考的空间，我当时面临自己的挑战，我当然也从中学到了一些东西，比如如何思考状态变化。然而，我将详细说明为什么SMACSS对我不起作用。
- en: 'Again, like my caveat regarding my opinions on OOCSS, this isn''t a critique
    of SMACSS. It''s simply highlighting the parts that didn''t work for me and why
    I felt it failed to solve my own problems. SMACSS has clearly defined terminology
    and concepts for the visual aspects of a website. It therefore prescribes base,
    layout, modules and optional theme rules/files to support these definitions. For
    example, consider this suggested file structure:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，就像我对OOCSS的观点一样，这并不是对SMACSS的批评。它只是强调了对我来说不起作用的部分，以及为什么我觉得它未能解决我的问题。SMACSS对网站的视觉方面有明确定义的术语和概念。因此，它规定了基础、布局、模块和可选的主题规则/文件来支持这些定义。例如，考虑这个建议的文件结构：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Excerpt From: Jonathan Snook. *Scalable and Modular Architecture for CSS.**'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*摘自：Jonathan Snook. *Scalable and Modular Architecture for CSS.**'
- en: While these definitions make perfect sense in many scenarios, they didn't for
    mine. I wanted an approach that was looser, an approach that didn't make me need
    to consider fitting what I needed to build into those visual definitions; the
    applications I was building and maintaining often defied adherence to those definitions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些定义在许多情况下都是合理的，但对我来说并不是。我想要一种更宽松的方法，一种不需要我考虑如何将我需要构建的东西适应这些视觉定义的方法；我构建和维护的应用程序经常无法遵循这些定义。
- en: BEM
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BEM
- en: BEM is a methodology developed by the developers at [http://yandex.ru](http://yandex.ru).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: BEM是由[http://yandex.ru](http://yandex.ru)的开发人员开发的一种方法论。
- en: The key thing I took from BEM is just how much a naming convention can buy you
    when it comes to CSS maintenance.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我从BEM中学到的关键是，命名约定在CSS维护方面能为你带来多大的好处。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are interested in reading more about BEM, the canonical resource is
    [http://en.bem.info](https://en.bem.info). For a good explanation of where it
    all began I recommend starting here: [https://en.bem.info/method/history](https://en.bem.info/method)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对BEM感兴趣，官方资源是[http://en.bem.info](https://en.bem.info)。关于它的起源，我建议从这里开始阅读：[https://en.bem.info/method/history](https://en.bem.info/method)
- en: 'Again, like SMACSS, I''m not going to attempt to fully explain the ins and
    outs of BEM methodology. However, I will give you the *elevator pitch* explanation
    of the key points. The BEM methodology works around the notion that key areas
    of a page can be defined as **Blocks**. In turn, those key areas are made up of
    Elements. We can then represent the relationship between the Block and its Elements
    in the way we name things. Consider the OOCSS media object example from before.
    In a BEM approach we might use classes like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，就像SMACSS一样，我不打算完全解释BEM方法论的细节。然而，我会给你一个关键点的*电梯演讲*解释。BEM方法论围绕着页面的关键区域可以被定义为**块**的概念。然后，这些关键区域由元素组成。我们可以通过命名的方式来表示块和其元素之间的关系。考虑之前提到的OOCSS媒体对象示例。在BEM方法中，我们可能会使用这样的类：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What''s so useful about this naming scheme is that it clearly communicates
    a relationship between the elements and the block they belong to. Plus, away from
    the HTML, if we came across a selector like this in the CSS:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这种命名方案的有用之处在于它清晰地传达了元素与它们所属的块之间的关系。此外，远离HTML，如果我们在CSS中遇到这样的选择器：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We instantly know that this is a Element called **headshot** that lives inside
    a Block called **media**. This namespacing a component as part of something else
    helps to isolate styles and prevent the applied styles from *leaking* out - one
    of my major bug-bears with OOCSS. This was definitely a step in the right direction
    for the problems I was trying to solve.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们立即知道这是一个名为**headshot**的元素，它位于名为**media**的块内。将组件命名为其他组件的一部分有助于隔离样式，并防止应用的样式*泄漏*
    - 这是我对OOCSS的主要不满之一。这绝对是解决我尝试解决的问题的正确方向。
- en: 'BEM also has the notion of *modifiers*. A modifier is something that gets added
    to the Block to modify its appearance. Suppose we wanted to theme our media object
    differently in a different scenario. BEM facilitates it like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: BEM还有*修饰符*的概念。修饰符是添加到块上以修改其外观的东西。假设我们想在不同的情况下以不同的方式为我们的媒体对象设置主题。BEM可以这样实现：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The BEM documents dictate the use of a single underscore character to identify
    a Modifier for a Block. This modifier class must always be used alongside the
    block name. For example, you must do this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: BEM文档规定使用单个下划线字符来标识块的修饰符。这个修饰符类必须始终与块名称一起使用。例如，你必须这样做：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And not this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这样：
- en: '![BEM](img/Warning-image-1.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![BEM](img/Warning-image-1.jpg)'
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: I see the value in using modifiers in this manner but it proved problematic
    for me. Often the things I was styling needed to behave differently in a more
    traditional manner. Perhaps visuals needed to display differently depending upon
    the context they were being used, or if another class was being added above it
    in the DOM. Or due to certain media query conditions, or indeed any combination
    of those scenarios. I needed a way to author styles that was pragmatic enough
    to deal with the non-ideal situations that occurred. Some way to keep some sanity
    in the authoring style sheets no matter what was thrown at them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到了以这种方式使用修饰符的价值，但对我来说，这证明是有问题的。我经常需要对我正在设计的东西以更传统的方式进行不同的行为。也许视觉上需要根据它们被使用的上下文而显示不同，或者如果在DOM中添加了另一个类，或者由于某些媒体查询条件，或者任何这些情况的组合。我需要一种编写样式的方式，足够实用，可以处理发生的非理想情况。无论发生了什么，都能保持一些理智在编写样式表中。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Of all the existing CSS methodologies I looked at, I took the most from BEM.
    There is much to appreciate in BEM:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我查看的所有现有CSS方法中，我从BEM中学到了最多。BEM有很多值得赞赏的地方：
- en: All elements get the same specificity; a class is added to all the elements.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有元素具有相同的特异性；一个类被添加到所有元素。
- en: There is no use of type selectors so HTML structure isn't tightly coupled to
    the styles.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有使用类型选择器，因此HTML结构与样式没有紧密耦合。
- en: It's easy to reason about what the parent of an element is, whether viewing
    the DOM tree in the browser developer tools or the CSS in a code editor.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很容易推断出一个元素的父级是什么，无论是在浏览器开发者工具中查看DOM树，还是在代码编辑器中查看CSS。
- en: However, the use of modifiers didn't really fit my needs. Although perhaps it
    wasn't preferable, my reality was that often I would need to override styles on
    a Block (in BEM parlance) depending upon some eventuality above it or by the side
    of it in the DOM.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，修饰符的使用并不完全符合我的需求。尽管也许这并不是理想的，但我的现实是，通常我需要根据DOM中它上面或旁边的某种可能性来覆盖块的样式（在BEM术语中）。
- en: For example, in the scenario where existing logic is already determined in an
    application, there may be a scenario where a class like `contains2columns` would
    be added above the item in question in the DOM and I would need to style changes
    based upon that, as opposed to changes directly upon the Block in question.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在应用程序中已经确定了现有逻辑的情况下，可能会出现这样的情况，即在DOM中的问题项上方添加一个类`contains2columns`，我需要根据这个类进行样式更改，而不是直接在问题块上进行更改。
- en: With BEM I couldn't find a clear way of understanding how that eventuality should
    be handled. Or how I could contain those kinds of overrides in the authoring style
    sheets. I wanted to define items and encapsulate all the eventualities that may
    occur on a particular item.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BEM，我找不到一个清晰的方法来理解应该如何处理这种可能性。或者如何在编写样式表中包含这些类型的覆盖。我想要定义项目并封装可能发生在特定项目上的所有可能性。
- en: I also found the syntax confusing to reason over when glancing at classes. The
    differentiation between the way modifiers were written and the way elements were
    written was negligible. This would be an easy fix but it was still something that
    bugged me about it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览类时，我也发现语法令人困惑。修饰符的书写方式和元素的书写方式之间的区别微乎其微。这可能很容易解决，但这仍然是我对它感到困扰的事情。
- en: Finally, I realised I needed something extra. I wanted the ability to communicate
    and facilitate different contexts for a module. When a *thing* was created by
    the same piece of logic but could be used and styled differently in different
    contexts, I wanted a means of communicating that.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我意识到我需要一些额外的东西。我希望能够沟通和促进模块的不同上下文。当一个*东西*由相同的逻辑创建，但可以在不同的上下文中以不同的方式使用和样式化时，我希望有一种沟通的方式。
- en: From SMACSS the main thing I found useful was dealing with state. I liked the
    declarative manner in which classes like `is-pressed` or attributes `.btn[data-state=pressed]`
    clearly communicated the state of elements.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从SMACSS中我发现最有用的是处理状态。我喜欢类似`is-pressed`或属性`.btn[data-state=pressed]`这样的声明方式，清晰地传达了元素的状态。
- en: OOCSS turned out to be the antithesis of what I needed. Whilst I appreciate
    what OOCSS can offer, it wasn't the solution to the problems I had. I didn't want
    to create a Lego box of styles that authors could use to build up visuals in a
    DOM/template. The abstractions OOCSS facilitated were inherently *leaky* which
    made maintenance problematic (change the value in one rule and you may inadvertently
    effect many elements), it was also difficult to find ways of dealing with varying
    viewports, for all the reasons already explained and the additional abstraction
    added further complications when on-boarding new developers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: OOCSS结果证明是我所需要的东西的对立面。虽然我欣赏OOCSS能提供的东西，但它并不是我所面临问题的解决方案。我不想创建一个作者可以用来在DOM/模板中构建视觉效果的乐高样式盒。OOCSS促进的抽象本质上是*泄漏*的，这使得维护成为问题（更改一个规则中的值可能会无意中影响许多元素），而且在处理不同的视口时也很难找到方法，出于已经解释的所有原因以及添加的额外抽象在新开发人员入职时会带来更多的复杂性。
- en: 'Ultimately, by trying and failing, to varying degrees, with each of these existing
    solutions I finally fully understood my problems. Now it was time to tailor a
    bespoke solution. To paraphrase Pablo Picasso:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，通过尝试和失败，以不同程度，使用每一种现有的解决方案，我终于完全理解了我的问题。现在是时候定制一个专门的解决方案了。用巴勃罗·毕加索的话来说：
- en: '*Good coders copy, great coders steal **Pablo Picasso** (sort of - sorry Pablo)*'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*好的程序员抄袭，伟大的程序员窃取* **巴勃罗·毕加索**（有点像-抱歉巴勃罗）'
- en: Walk with me.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 跟我走。
