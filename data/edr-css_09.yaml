- en: Chapter 9. Tooling for an ECSS Approach
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 ECSS方法的工具
- en: In this final chapter we will look at some of the free and open-source tooling
    that's available to facilitate writing sane and maintainable style sheets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们将看一些免费和开源的工具，以便编写合理和可维护的样式表。
- en: When authoring the CSS for an enduring project, the technology employed to produce
    the CSS should be largely immaterial. We should always be aware that a better
    or more efficient tool may become available to achieve our aims and when possible,
    and if preferable, it should be embraced.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在为持久项目编写CSS时，用于生成CSS的技术应该基本上是无关紧要的。我们应该始终意识到可能会有更好或更有效的工具可用来实现我们的目标，如果可能的话，应该加以采纳。
- en: Therefore, it shouldn't matter whether Sass, PostCSS, LESS, Stylus, Myth or
    any other CSS processor is employed to author the style sheets. The authored style
    sheets should be as easy to migrate to another meta-language as possible, if and
    when needed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论是Sass、PostCSS、LESS、Stylus、Myth还是其他任何CSS处理器，都不应该成为编写样式表的障碍。如果需要的话，编写的样式表应尽可能容易迁移到另一种元语言。
- en: Furthermore, the CSS processor employed should best serve the needs of the project
    as a whole and not merely the preferences of any individual author. That said,
    there are some necessary capabilities for the CSS processor so we will cover that
    briefly next.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所采用的CSS处理器应该最好能满足整个项目的需求，而不仅仅是个别作者的偏好。也就是说，CSS处理器应具备一些必要的功能，接下来我们将简要介绍这些功能。
- en: CSS requisites for CSS processors
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS处理器的CSS要求
- en: I consider a CSS processor for style sheet authoring essential. This allows
    a differentiation between *authoring* style sheets (the style sheets that the
    author writes in their CSS processor of choice) and the *resultant* CSS (the compiled
    and minified CSS that gets served to the user).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为CSS处理器对于样式表编写是必不可少的。这允许区分*编写*的样式表（作者在其选择的CSS处理器中编写的样式表）和*结果*的CSS（编译和压缩后提供给用户的CSS）。
- en: 'Despite stating that a CSS processor is essential, the requisite features needed
    are fairly trivial:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管声明CSS处理器是必不可少的，但所需的功能相当微不足道：
- en: '**Variables**: To mitigate human errors with colour picking and specifying
    constants like grid measures'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：减少人为错误，如颜色选择和指定常量如网格尺寸'
- en: '**Partials**: To facilitate one-to-one parity of authoring style sheets with
    a feature branch, template or logic file'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分文件**：为了方便作者编写与特性分支、模板或逻辑文件相对应的样式表'
- en: '**Colour manipulations**: To allow consistent manipulation of the aforementioned
    variables e.g. being able to adjust or easily adjust the alpha of a colour'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色操作**：允许对上述变量进行一致的操作，例如能够调整颜色的alpha通道或轻松调整颜色'
- en: All other abilities are considered non-essential and should be appraised particular
    to the needs of the project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他能力被认为是非必要的，应根据项目的特定需求进行评估
- en: Building CSS from authoring style sheets
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从编写的样式表构建CSS
- en: A build system of some sort is required to compile the authoring style sheets
    into plain CSS.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需要某种构建系统将编写的样式表编译成纯CSS。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are many tools available to perform this task e.g Grunt, Gulp, and Brocolli
    to name just a few. However, just as there is no universally *right* CSS processor,
    or CSS methodology, so there is no universally *right* build tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可用于执行此任务，例如Grunt、Gulp和Brocolli等。然而，就像没有普遍*正确*的CSS处理器或CSS方法论一样，也没有普遍*正确*的构建工具。
- en: Besides merely compiling authoring style sheets into CSS, good tooling can provide
    further benefits.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将编写的样式表编译成CSS之外，良好的工具还可以提供进一步的好处。
- en: '**Linting**: To enable code conformity and prevent non-working code reaching
    deployment'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linting**：启用代码一致性并防止非工作代码达到部署'
- en: '**Aggressive minification**: Rebasing z-indexes, converting length values to
    smaller length values e.g. (while *1pt* is equivalent to *16px* it is one less
    character), merging alike selectors'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Aggressive minification**：重新定位z-index，将长度值转换为更小的长度值，例如（虽然*1pt*等同于*16px*，但字符数少了一个），合并相似的选择器'
- en: '**Autoprefixer**: To enable fast and accurate vendor prefixing and prevent
    vendor prefixes being present in the authoring style sheets'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Autoprefixer**：启用快速准确的供应商前缀，并防止供应商前缀出现在编写的样式表中'
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For considerations of what is deemed essential, syntax-wise, in style sheet
    authoring, refer to [Chapter 8](ch08.html "Chapter 8. The Ten Commandments of
    Sane Style Sheets"), *The Ten Commandments of Sane Style Sheets*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于样式表编写中被认为是必不可少的语法方面的考虑，请参阅[第8章](ch08.html "第8章 合理样式表的十诫")，“合理样式表的十诫”。
- en: Save to compile, the journey of an ECSS style sheet
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存编译，ECSS样式表的旅程
- en: In terms of tooling, at the time of writing, I currently write ECSS with the
    help of Gulp and PostCSS plus its many and varied plugins. It's a process that
    has worked well so I'll document it briefly here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就工具而言，在撰写本文时，我目前使用Gulp和PostCSS以及其众多插件来编写ECSS。这是一个运作良好的过程，所以我会在这里简要记录一下。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the very curious, a little more on my *journey from Sass to PostCSS can
    be found here* ([https://benfrain.com/breaking-up-with-sass-postcss/](https://benfrain.com/breaking-up-with-sass-postcss/)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常好奇的人，可以在这里找到更多关于我从Sass到PostCSS的*经历*（[https://benfrain.com/breaking-up-with-sass-postcss/](https://benfrain.com/breaking-up-with-sass-postcss/)）。
- en: The style sheet authors write into a partial CSS file (with a `*.css` file extension),
    using a syntax that is very similar to Sass.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表作者将样式表写入一个部分CSS文件（带有`*.css`文件扩展名），使用的语法与Sass非常相似。
- en: On saving an authoring style sheet, the Gulp watch task notices the file change
    and first runs the linting task. Then, providing all is well, it compiles the
    partial authoring style sheets to a CSS file, then auto-prefixes that CSS file
    and finally BrowserSync injects the changed CSS directly into the webpage I'm
    working on. Typically, a source map file is also created as some authors find
    working with source maps in the developer tools easier for debugging. All this
    happens before I can *Alt* + *Tab* into my browser window or even move my gaze
    from text editor to browser window.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存作者样式表时，Gulp watch 任务会注意到文件的更改，并首先运行 linting 任务。然后，如果一切正常，它会将部分作者样式表编译为 CSS
    文件，然后自动添加前缀，最后 BrowserSync 将更改的 CSS 直接注入到我正在工作的网页中。通常，在我可以 *Alt* + *Tab* 到浏览器窗口之前，或者甚至在我从文本编辑器移动到浏览器窗口之前，都会创建一个源映射文件，因为一些作者发现在开发者工具中使用源映射更容易进行调试。所有这些都发生在我可以
    *Alt* + *Tab* 到浏览器窗口之前，甚至在我可以从文本编辑器移动到浏览器窗口之前。
- en: 'Here''s an example `gulpfile.js` that demonstrate how PostCSS might be setup
    in a Gulp based build tool:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示如何在基于 Gulp 的构建工具中设置 PostCSS 的 `gulpfile.js` 示例：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With Gulp the build choices are fairly limitless, this is merely an illustration.
    However, note how the the first thing the `styles` task does, is run the `lint-styles` task.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Gulp，构建选择是相当无限的，这只是一个示例。但是，请注意 `styles` 任务的第一步是运行 `lint-styles` 任务。
- en: As mentioned in previous chapters, the linting of style sheets is a very important
    step on a project where multiple style sheets authors are involved. Let's look
    a little more at that next.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，样式表的 linting 是一个非常重要的步骤，特别是在涉及多个样式表作者的项目中。让我们接下来更深入地了解一下。
- en: Stylelint
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Stylelint
- en: Stylelint is a node based linting tool for the static analysis of style sheets.
    In layman's terms it will analyse your style sheets for the things you specifically
    care about and warn you of any problems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Stylelint 是一个基于 Node 的静态分析样式表的 linting 工具。通俗地说，它会分析你的样式表，找出你特别关心的问题，并警告你任何问题。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you use Sass you should check out *scss-lint* ([https://github.com/brigade/scss-lint](https://github.com/brigade/scss-lint))
    which provides similar functionality for Sass files.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Sass，你应该查看 *scss-lint*（[https://github.com/brigade/scss-lint](https://github.com/brigade/scss-lint)），它为
    Sass 文件提供了类似的功能。
- en: The linting job fails the build if any authoring errors are found. Typically
    it's most beneficial to have linting running in two places. In the text editor
    (e.g. Sublime) and in the build tool (e.g. Gulp). This way, if an author has the
    requisite text editor then the *editor based linting* ([https://github.com/kungfusheep/SublimeLinter-contrib-stylelint](https://github.com/kungfusheep/SublimeLinter-contrib-stylelint))
    indicates problems before an author even clicks *save*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现任何作者错误，linting 任务会导致构建失败。通常情况下，在两个地方运行 linting 是最有益的。在文本编辑器（例如 Sublime）和构建工具（例如
    Gulp）中。这样，如果作者有必要的文本编辑器，那么 *基于编辑器的 linting* ([https://github.com/kungfusheep/SublimeLinter-contrib-stylelint](https://github.com/kungfusheep/SublimeLinter-contrib-stylelint))
    就会在作者点击 *保存* 之前指出问题。
- en: Even if a user doesn't have in-editor linting available, the linting job runs
    via Gulp on save. The build step prevents compiled code making its way to production
    (as continuous integration software would also fail the build).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 即使用户没有编辑器中的 linting 功能，保存时 linting 任务也会通过 Gulp 运行。构建步骤可以防止编译后的代码进入生产环境（因为持续集成软件也会导致构建失败）。
- en: This is a massive time saver and has proved invaluable when it comes to peer-reviewing
    code and performing quality assurance tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个巨大的时间节省，对于代码的同行审查和质量保证测试来说是非常宝贵的。
- en: 'Here is an example `.stylelintrc` configuration for Stylelint (this is for
    v5 of Stylelint so future/previous versions may vary slightly):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Stylelint 的 `.stylelintrc` 配置示例（这是针对 Stylelint 的 v5 版本的，所以未来/之前的版本可能会有些许不同）：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is just an example, you can set whichever rules you care about from the
    *ever expanding list* ([http://stylelint.io/user-guide/rules/](http://stylelint.io/user-guide/rules/)).
    If using these sort of tools for the first time, you might also find it useful
    to download/clone *ecss-postcss-shell* ([https://github.com/benfrain/ecss-postcss-shell](https://github.com/benfrain/ecss-postcss-shell)).
    It's a basic Gulp setup to run the authored style sheets through PostCSS and lints
    the styles with Stylelint.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个示例，你可以从 *不断扩展的列表* ([http://stylelint.io/user-guide/rules/](http://stylelint.io/user-guide/rules/))
    中设置你关心的任何规则。如果是第一次使用这类工具，你可能还会发现下载/克隆 *ecss-postcss-shell* ([https://github.com/benfrain/ecss-postcss-shell](https://github.com/benfrain/ecss-postcss-shell))
    也很有用。这是一个基本的 Gulp 设置，用于通过 PostCSS 运行作者样式表，并使用 Stylelint 对样式进行 linting。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I've even contributed a little code to the Stylelint project, helping to add
    a rule called `selector-max-specificity` for controlling the maximum level of
    selector specificity any selector can have. If you are involved with controlling
    a CSS codebase, it's a great project to get involved in.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至为 Stylelint 项目贡献了一点代码，帮助添加了一个名为 `selector-max-specificity` 的规则，用于控制任何选择器的最大特异性级别。如果你参与控制
    CSS 代码库，这是一个很好的项目可以参与。
- en: 'If that wasn''t enough, Stylelint is extensible. It''s easy to add additional
    functionality. For current builds ECSS projects in my workplace we have additional
    Stylelint rules to:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不够，Stylelint 是可扩展的。很容易添加额外的功能。对于我工作中的当前构建 ECSS 项目，我们有额外的 Stylelint 规则：
- en: Ensure only overrides and media queries can be nested (prevents nests that don't
    use a parent (`&`) selector)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保只有覆盖和媒体查询可以嵌套（防止不使用父（`&`）选择器的嵌套）
- en: Ensure that key selectors match ECSS naming conventions (Stylelint now has a
    `selector-class-pattern` rule to help with this)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保关键选择器与 ECSS 命名约定匹配（Stylelint 现在有一个 `selector-class-pattern` 规则来帮助解决这个问题）
- en: Prevent key selectors from being compound (e.g. `.ip-Selector.ip-Selector2 {}`)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止关键选择器成为复合选择器（例如 `.ip-Selector.ip-Selector2 {}`）
- en: Ensure key selectors are singular (e.g. `.ip-Thing not .a-Parent .ip-Thing {}`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保关键选择器是单数（例如 `.ip-Thing` 而不是 `.a-Parent .ip-Thing {}`）
- en: These offer bespoke quality assurance that would be time consuming and error
    prone to perform *by hand*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些提供了定制的质量保证，如果手动执行将会耗费大量时间并容易出错。
- en: In case I'm not making it clear I want you to know that I love Stylelint and
    think linting is an indispensable piece of tooling for large CSS projects with
    multiple authors. I simply cannot recommend it highly enough.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我没有表达清楚，我想让你知道我喜欢Stylelint，并认为linting是大型CSS项目中不可或缺的工具，有多个作者。我简直无法推荐它。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There's a little more about Stylelint in *this blog post* ([https://benfrain.com/floss-your-style-sheets-with-stylelint/](https://benfrain.com/floss-your-style-sheets-with-stylelint/))
    or via the official *Stylelint* ([http://stylelint.io/](http://stylelint.io/))
    website.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Stylelint还有更多信息，请参阅*这篇博客文章* ([https://benfrain.com/floss-your-style-sheets-with-stylelint/](https://benfrain.com/floss-your-style-sheets-with-stylelint/))
    或者官方的*Stylelint* ([http://stylelint.io/](http://stylelint.io/)) 网站。
- en: Optimisation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化
- en: When CSS is heading for production, it takes an extra step through *cssnano* ([http://cssnano.co/](http://cssnano.co/)).
    It's a fantastic and modular CSS minifier by the extraordinarily talented Ben
    Briggs. Highly recommended.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当CSS即将投入生产时，它需要通过*cssnano* ([http://cssnano.co/](http://cssnano.co/)) 进行额外的处理。这是一个由非常有才华的Ben
    Briggs开发的出色且模块化的CSS缩小器。强烈推荐。
- en: Besides the more obvious minification step that cssnano provides, there are
    a number of micro-optimisations you can perform on your CSS just by incorporating
    plugins from the PostCSS eco-system. For example, by consistently ordering your
    CSS declarations, Gzip can compress the style sheet more effectively. That's not
    a job I want to do manually but the *postcss-sorting* ([https://github.com/hudochenkov/postcss-sorting](https://github.com/hudochenkov/postcss-sorting))
    plugin can do it for free. Here's comparison of Gzip file sizes using the various
    declaration sorting configurations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了cssnano提供的更明显的缩小步骤外，您还可以通过在PostCSS生态系统中使用插件执行一些微观优化。例如，通过一致地对CSS声明进行排序，Gzip可以更有效地压缩样式表。这不是我想要手动完成的工作，但*postcss-sorting* ([https://github.com/hudochenkov/postcss-sorting](https://github.com/hudochenkov/postcss-sorting))
    插件可以免费完成。以下是使用各种声明排序配置的Gzip文件大小的比较。
- en: 'To exemplify, I took a large test CSS file, and unsorted once Gzipped it was
    37.59 kB. Here are the file sizes of that same file when Gzipped after using the
    other declaration sorting configurations:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，我拿了一个大型的测试CSS文件，未排序时Gzip后大小为37.59 kB。这是同一个文件在使用其他声明排序配置后Gzip后的文件大小：
- en: 'postcss-sorting: 37.54'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'postcss-sorting: 37.54'
- en: 'CSSComb: 37.46'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CSSComb: 37.46'
- en: 'Yandex: 37.48'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Yandex: 37.48'
- en: 'Zen: 37.41'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Zen: 37.41'
- en: So at best we gain a saving of just under 1% of the original size. A tiny economy
    but one you can effectively get for free.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们最多只能节省原始大小的不到1%。虽然是微小的节约，但你可以免费有效地获得它。
- en: There are other such economies such as grouping alike media queries but I'll
    leave these micro-optimisations for you to explore should they pique your interest.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些类似的优化，比如将类似的媒体查询分组，但我会留下这些微观优化供您探索，如果您对它们感兴趣的话。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we've covered tooling to facilitate constant code quality and
    an improved style sheet authoring experience. However, you should be aware that
    out of everything we have covered, the specific tools listed here are likely to
    be the most short-lived. Tooling technology moves at a blistering pace. In just
    three years I went from vanilla CSS, to Sass (with *scss-lint* ([https://github.com/brigade/scss-lint](https://github.com/brigade/scss-lint))),
    to PostCSS and Stylelint while also moving from GUI build tools like CodeKit to
    JavaScript build tools Grunt, then Gulp and now NPM scripts.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了工具，以促进不断的代码质量和改进的样式表编写体验。然而，您应该知道，我们所涵盖的所有内容中，这里列出的具体工具可能是最短命的。工具技术发展迅速。仅仅三年时间，我从普通的CSS，转到了Sass（带有*scss-lint*（[https://github.com/brigade/scss-lint](https://github.com/brigade/scss-lint)）），再到了PostCSS和Stylelint，同时也从CodeKit这样的GUI构建工具转到了JavaScript构建工具Grunt，然后是Gulp，现在是NPM脚本。
- en: I have no idea what the best choice will be in 6 months time so the take away
    is to think about how tooling and approaches can improve the style sheet authoring
    experience across your teams, not necessarily what the current tools are.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道在6个月后最好的选择是什么，所以要记住的是要考虑工具和方法如何改进团队的样式表编写体验，而不是当前的工具是什么。
- en: '|   | *Be monogamous in your personal relationships and a philandering whore
    in your choice of tools and techniques* |   |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|   | *在你的个人关系中要忠诚，但在你选择的工具和技术上要多变* |   |'
- en: '|   | --*The Way Of Pragmatic Coding ([https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/](https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/))*
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '|   | --*务实编码之道 ([https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/](https://benfrain.com/be-better-front-end-developer-way-of-pragmatic-coding/))*
    |'
- en: The closing curly brace
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束的右花括号
- en: Now my friends we have reached the end of this little book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，朋友们，我们已经到达了这本小书的结尾。
- en: While I'd hope that some of you might be able to take ECSS *off the peg* and
    start implementing it wholesale, I'll be just as happy if it merely provokes your
    own journey of discovery.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我希望你们中的一些人能够接受ECSS并开始全面实施它，但如果它只是激发了你自己的探索之旅，我同样会很高兴。
- en: 'At the outset I was trying to find an approach to scaling CSS that dealt with
    the following problems:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我试图找到一种处理以下问题的CSS扩展方法：
- en: To allow the easy maintenance of a large CSS codebase over time
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许随着时间的推移轻松维护大型的CSS代码库
- en: To allow portions of CSS code to be removed from the codebase without effecting
    the remaining styles
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许从代码库中删除CSS代码的部分，而不影响其余的样式
- en: It should be possible to rapidly iterate on any new designs
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该能够快速迭代任何新设计
- en: Changing the properties and values applied to one visual element should not
    unintentionally effect others
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改应用于一个视觉元素的属性和值不应无意中影响其他元素
- en: Any solution should require minimal tooling and workflow changes to implement
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何解决方案都应该需要最少的工具和工作流程更改来实施
- en: Where possible, W3C standards such as ARIA should be used to communicate state
    change within the user interface
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，应使用W3C标准，如ARIA，来传达用户界面中的状态变化
- en: 'ECSS answers all of those problems:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ECSS解决了所有这些问题：
- en: Compartmentalizing CSS into modules allows easy removal of deprecated features
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS分隔成模块可以轻松删除已弃用的功能
- en: The unique naming convention avoids global naming collisions, reduces specificity
    and prevents unwanted changes to unrelated elements
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独特的命名约定避免了全局命名冲突，降低了特异性，并防止了对不相关元素的不必要更改
- en: As all new modules are *greenfield* it's simple to build out new designs
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于所有新模块都是*greenfield*，因此可以轻松构建新设计
- en: Despite some tooling to accommodate globbing imports and linting, we are still
    writing CSS in CSS files, making on-boarding developers a far easier process
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管有一些工具可以适应全局导入和linting，我们仍然在CSS文件中编写CSS，这使得开发人员的入职过程变得更加容易
- en: We can also embrace ARIA as a means to control and communicate state change,
    not just for assistive technology but in a wider sense too
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也可以接受ARIA作为控制和传达状态变化的手段，不仅仅是为了辅助技术，而且在更广泛的意义上也是如此
- en: The considerations of scaling CSS are a somewhat niche pursuit. In time, we
    will have things like *CSS Scoping* ([http://www.w3.org/TR/css-scoping-1/#scope-atrule](http://www.w3.org/TR/css-scoping-1/#scope-atrule))
    but until then we must use the tools and techniques at our disposal to bend existing
    technology to our will.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到CSS的扩展是一种有点小众的追求。在未来，我们将拥有诸如*CSS Scoping* ([http://www.w3.org/TR/css-scoping-1/#scope-atrule](http://www.w3.org/TR/css-scoping-1/#scope-atrule))之类的东西，但在那之前，我们必须利用手头的工具和技术来弯曲现有技术以符合我们的意愿。
- en: I've mentioned it numerous times but there are many ways to skin this cat. Other
    methods may be preferable. What follows is a list of people and resources, in
    no particular order that may help in your own odyssey.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经多次提到过，有很多方法可以解决这个问题。其他方法可能更可取。以下是一些人和资源的列表，没有特定顺序，可能有助于你自己的探索。
- en: Until next time dear reader, I wish you the most fruitful of adventures.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 亲爱的读者，直到下次，祝你探险愉快。
- en: '|   | *Absorb what is useful, reject what is useless, add what is specifically
    your own.* |   |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|   | *吸收有用的东西，拒绝无用的东西，添加特别属于你自己的东西。* |   |'
- en: '|   | --*Bruce Lee* |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|   | --*李小龙* |'
- en: Resources
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: 'Here are some folks that often talk or write about CSS architecture/scaling:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些经常谈论或写作关于CSS架构/扩展的人：
- en: 'Thierry Koblentz: [http://cssmojo.com/](http://cssmojo.com/)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thierry Koblentz：[http://cssmojo.com/](http://cssmojo.com/)
- en: Nicolas Gallagher: [http://nicolasgallagher.com/](http://nicolasgallagher.com/)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nicolas Gallagher：[http://nicolasgallagher.com/](http://nicolasgallagher.com/)
- en: Kaelig Deloumeau-Prigent: [http://kaelig.fr/](http://kaelig.fr/)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kaelig Deloumeau-Prigent：[http://kaelig.fr/](http://kaelig.fr/)
- en: Nicole Sullivan:[http://www.stubbornella.org/content/](http://www.stubbornella.org/content/)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nicole Sullivan：[http://www.stubbornella.org/content/](http://www.stubbornella.org/content/)
- en: 'Harry Roberts: [http://csswizardry.com/](http://csswizardry.com/)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈里·罗伯茨：[http://csswizardry.com/](http://csswizardry.com/)
- en: Jonathan Snook: [https://snook.ca/](https://snook.ca/)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乔纳森·斯努克：[https://snook.ca/](https://snook.ca/)
- en: 'Micah Godbolt: [http://www.godbolt.me/](http://www.godbolt.me/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Micah Godbolt：[http://www.godbolt.me/](http://www.godbolt.me/)
- en: 'For a discussion about using inline-styles via JavaScript: *Shop Talk show
    #180* ([http://shoptalkshow.com/episodes/180-panel-on-inline-styles/](http://shoptalkshow.com/episodes/180-panel-on-inline-styles/))'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '关于使用JavaScript内联样式的讨论：*Shop Talk show #180* ([http://shoptalkshow.com/episodes/180-panel-on-inline-styles/](http://shoptalkshow.com/episodes/180-panel-on-inline-styles/))'
- en: 'Interesting approaches/projects around CSS:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 围绕CSS的有趣方法/项目：
- en: 'Radium for React: [https://github.com/FormidableLabs/radium](https://github.com/FormidableLabs/radium)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React的Radium：[https://github.com/FormidableLabs/radium](https://github.com/FormidableLabs/radium)
- en: 'React Native for Web: [https://github.com/necolas/react-native-web](https://github.com/necolas/react-native-web)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native for Web：[https://github.com/necolas/react-native-web](https://github.com/necolas/react-native-web)
- en: CSS Modules: [https://github.com/css-modules](https://github.com/css-modules)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS模块：[https://github.com/css-modules](https://github.com/css-modules)
- en: 'Atomic CSS: [http://acss.io/](http://acss.io/)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子CSS：[http://acss.io/](http://acss.io/)
