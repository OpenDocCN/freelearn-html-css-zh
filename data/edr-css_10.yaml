- en: Appendix 1. CSS Selector Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录1. CSS选择器性能
- en: Back at the beginning of 2014 I was having a *debate* (I used air-quotes there
    people) with some fellow developers about the irrelevance, or not, of worrying
    about CSS selector speed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年初，我与一些其他开发人员进行了一场*辩论*（我在那里用了引号），讨论了担心CSS选择器速度的相关性或无关性。
- en: Whenever exchanging theories/evidence about the relative speed of CSS selectors,
    developers often reference *Steve Souders* ([http://stevesouders.com/](http://stevesouders.com/))
    work on CSS selectors from 2009\. It's used to validate claims such as *attribute
    selectors are slow* or *pseudo selectors are slow*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每当交换关于CSS选择器相对速度的理论/证据时，开发人员经常引用*Steve Souders*（[http://stevesouders.com/](http://stevesouders.com/)）2009年关于CSS选择器的工作。它被用来验证诸如*属性选择器速度慢*或*伪选择器速度慢*等说法。
- en: 'For the last few years, I''ve felt these kinds of things just weren''t worth
    worrying about. The sound-bite I have been wheeling out for years is:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，我觉得这些事情根本不值得担心。多年来我一直在重复的一句话是：
- en: '*With CSS, architecture is outside the braces; performance is inside*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*对于CSS，架构在大括号外；性能在大括号内*'
- en: But besides referencing *Nicole Sullivan's later post on Performance Calendar* ([http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/](http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/))
    to back up my conviction that the selectors used don't really matter, I had never
    actually tested the theory.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，除了参考*Nicole Sullivan在Performance Calendar上的后续帖子*（[http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/](http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/)）来支持我对所使用的选择器并不重要的信念外，我从未真正测试过这个理论。
- en: To try and address this, I attempted to produce some tests of my own that would
    settle the argument. At the least, I believed it would prompt someone with more
    knowledge/evidence to provide further data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我尝试自己进行一些测试，以解决这个争论。至少，我相信这会促使更有知识/证据的人提供进一步的数据。
- en: Testing selector speed
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试选择器速度
- en: 'Steve Souders'' aforementioned tests use JavaScript’s `new Date()`. However,
    nowadays, modern browsers (iOS/Safari were a notable exception at the time of
    testing) support the *Navigation Timing API* ([https://www.w3.org/TR/navigation-timing/](https://www.w3.org/TR/navigation-timing/))
    which gives us a more accurate measure we can use. For the tests, I implemented
    it like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Steve Souders之前的测试使用了JavaScript的`new Date()`。然而，现在，现代浏览器（iOS/Safari在测试时是一个明显的例外）支持*导航定时API*（[https://www.w3.org/TR/navigation-timing/](https://www.w3.org/TR/navigation-timing/)），这为我们提供了更准确的测量。对于测试，我实现了这样的方法：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This lets us limit the timing of the tests between the point all assets have
    been received (`responseEnd`) and the point the page is rendered (`loadEventEnd`).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们可以将测试的时间限制在所有资产都已接收（`responseEnd`）和页面呈现（`loadEventEnd`）之间。
- en: 'So, I set up a very simple test. 20 different pages, all with an identical,
    enormous DOM, made up of 1000 identical chunks of this markup:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我设置了一个非常简单的测试。20个不同的页面，所有页面都有相同的巨大DOM，由1000个相同的标记块组成：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '20 different CSS selection methods were tested to colour the inner most nodes
    red. Each page differed only in the rule applied to select the inner most node
    within the blocks. Here were the different selectors tested and a link to the
    the test page for that selector:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 测试了20种不同的CSS选择方法来将最内部的节点着色为红色。每个页面只在应用于选择块内最内部节点的规则上有所不同。以下是测试的不同选择器和该选择器的测试页面链接：
- en: Data attribute: [https://benfrain.com/selector-test/01.html](https://benfrain.com/selector-test/01.html)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据属性：[https://benfrain.com/selector-test/01.html](https://benfrain.com/selector-test/01.html)
- en: 'Data attribute (qualified): [https://benfrain.com/selector-test/02.html](https://benfrain.com/selector-test/02.html)'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据属性（带修饰）：[https://benfrain.com/selector-test/02.html](https://benfrain.com/selector-test/02.html)
- en: 'Data attribute (unqualified but with value): [https://benfrain.com/selector-test/03.html](https://benfrain.com/selector-test/03.html)'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据属性（未经修饰但有值）：[https://benfrain.com/selector-test/03.html](https://benfrain.com/selector-test/03.html)
- en: 'Data attribute (qualified with value): [https://benfrain.com/selector-test/04.html](https://benfrain.com/selector-test/04.html)'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据属性（带值）：[https://benfrain.com/selector-test/04.html](https://benfrain.com/selector-test/04.html)
- en: 'Multiple data attributes (qualified with values): [https://benfrain.com/selector-test/05.html](https://benfrain.com/selector-test/05.html)'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个数据属性（带值）：[https://benfrain.com/selector-test/05.html](https://benfrain.com/selector-test/05.html)
- en: Solo pseudo selector (e.g. `:after`): [https://benfrain.com/selector-test/06.html](https://benfrain.com/selector-test/06.html)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独伪选择器（例如`:after`）：[https://benfrain.com/selector-test/06.html](https://benfrain.com/selector-test/06.html)
- en: 'Combined classes (e.g. `class1.class2`): [https://benfrain.com/selector-test/07.html](https://benfrain.com/selector-test/07.html)'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组合类（例如`class1.class2`）：[https://benfrain.com/selector-test/07.html](https://benfrain.com/selector-test/07.html)
- en: Multiple classes: [https://benfrain.com/selector-test/08.html](https://benfrain.com/selector-test/08.html)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个类：[https://benfrain.com/selector-test/08.html](https://benfrain.com/selector-test/08.html)
- en: 'Multiple classes with child selector: [https://benfrain.com/selector-test/09.html](https://benfrain.com/selector-test/09.html)'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个类与子选择器：[https://benfrain.com/selector-test/09.html](https://benfrain.com/selector-test/09.html)
- en: 'Partial attribute matching (e.g. `[class<sup>ˆ=</sup>“wrap”]`): [https://benfrain.com/selector-test/10.html](https://benfrain.com/selector-test/10.html)'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部分属性匹配（例如`[class<sup>ˆ=</sup>“wrap”]`）：[https://benfrain.com/selector-test/10.html](https://benfrain.com/selector-test/10.html)
- en: nth-child selector: [https://benfrain.com/selector-test/11.html](https://benfrain.com/selector-test/11.html)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: nth-child选择器：[https://benfrain.com/selector-test/11.html](https://benfrain.com/selector-test/11.html)
- en: nth-child selector followed by another nth-child selector: [https://benfrain.com/selector-test/12.html](https://benfrain.com/selector-test/12.html)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 紧接着另一个nth-child选择器的nth-child选择器：[https://benfrain.com/selector-test/12.html](https://benfrain.com/selector-test/12.html)
- en: Insanity selection (all selections qualified, every class used e.g. `div.wrapper``>
    div.tagDiv > div.tagDiv.layer2 > ul.tagUL > li.tagLi > b.tagB > a.TagA.link`): [https://benfrain.com/selector-test/13.html](https://benfrain.com/selector-test/13.html)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 疯狂选择（所有选择都有资格，每个类都使用，例如`div.wrapper``> div.tagDiv > div.tagDiv.layer2 > ul.tagUL
    > li.tagLi > b.tagB > a.TagA.link`）：[https://benfrain.com/selector-test/13.html](https://benfrain.com/selector-test/13.html)
- en: 'Slight insanity selection (e.g. `.tagLi .tagB a.TagA.link`): [https://benfrain.com/selector-test/14.html](https://benfrain.com/selector-test/14.html)'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轻微疯狂选择（例如`.tagLi .tagB a.TagA.link`）：[https://benfrain.com/selector-test/14.html](https://benfrain.com/selector-test/14.html)
- en: Universal selector: [https://benfrain.com/selector-test/15.html](https://benfrain.com/selector-test/15.html)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通用选择器：[https://benfrain.com/selector-test/15.html](https://benfrain.com/selector-test/15.html)
- en: Element single: [https://benfrain.com/selector-test/16.html](https://benfrain.com/selector-test/16.html)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单一元素：[https://benfrain.com/selector-test/16.html](https://benfrain.com/selector-test/16.html)
- en: 'Element double: [https://benfrain.com/selector-test/17.html](https://benfrain.com/selector-test/17.html)'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元素双：[https://benfrain.com/selector-test/17.html](https://benfrain.com/selector-test/17.html)
- en: Element treble: [https://benfrain.com/selector-test/18.html](https://benfrain.com/selector-test/18.html)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元素三倍：[https://benfrain.com/selector-test/18.html](https://benfrain.com/selector-test/18.html)
- en: Element treble with pseudo: [https://benfrain.com/selector-test/19.html](https://benfrain.com/selector-test/19.html)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元素三倍带伪：[https://benfrain.com/selector-test/19.html](https://benfrain.com/selector-test/19.html)
- en: 'Single class: [https://benfrain.com/selector-test/20.html](https://benfrain.com/selector-test/20.html)'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单一类：[https://benfrain.com/selector-test/20.html](https://benfrain.com/selector-test/20.html)
- en: 'The test was run 5 times on each browser and the result averaged across the
    5 results. The browsers tested:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个浏览器上的测试运行了5次，并且结果是在5个结果之间平均的。测试的浏览器：
- en: Chrome 34.0.1838.2 dev
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome 34.0.1838.2 dev
- en: Firefox 29.0a2 Aurora
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox 29.0a2 Aurora
- en: Opera 19.0.1326.63
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera 19.0.1326.63
- en: Internet Explorer 9.0.8112.16421
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer 9.0.8112.16421
- en: Android 4.2 (7" tablet)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 4.2（7英寸平板电脑）
- en: A previous version of Internet Explorer (rather than the latest Internet Explorer
    available to me) was used to shed some light on how a *non evergreen *browser
    performed. All the other browsers tested received regular updates so I wanted
    to be sure that there wasn't a considerable difference in the way modern regularly
    updating browsers deal with CSS selectors and how slightly older ones do.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了Internet Explorer的以前版本（而不是我可以使用的最新Internet Explorer）来揭示*非常绿色*浏览器的表现。所有其他测试过的浏览器都定期更新，所以我想确保现代定期更新的浏览器处理CSS选择器的方式与稍旧的浏览器有没有明显的差异。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Want to try the same tests out for yourself? Go and grab the files from this
    GitHub link: [https://github.com/benfrain/css-performance-tests](https://github.com/benfrain/css-performance-tests).
    Just open each page in your browser of choice (remember the browser must support
    the Network Timing API to alert a response). Also be aware that when I performed
    the test I discarded the first couple of results as they tended to be unusually
    high in some browsers.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 想要自己尝试相同的测试吗？去这个GitHub链接获取文件：[https://github.com/benfrain/css-performance-tests](https://github.com/benfrain/css-performance-tests)。只需在您选择的浏览器中打开每个页面（记住浏览器必须支持网络定时API以警报响应）。还要注意，当我进行测试时，我丢弃了前几个结果，因为它们在某些浏览器中往往异常高。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When considering the results, don't consider one browser against another. That
    is not the purpose of the tests. The purpose is purely to try and evaluate the
    comparative difference in selection speed between the different selectors employed
    on each browser. For example, is selector 3 any faster than selector 7 on any
    browser? Therefore, when looking at the table, it makes more sense to look down
    the columns than across the rows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑结果时，不要将一个浏览器与另一个浏览器进行比较。这不是测试的目的。目的纯粹是为了尝试和评估每个浏览器上使用的不同选择器的选择速度之间的比较差异。例如，选择器3是否比任何浏览器上的选择器7更快？因此，当查看表格时，最好看列而不是行。
- en: 'Here are the results. All times in milliseconds:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果。所有时间以毫秒为单位：
- en: '| **Test** | **Chrome 34** | **Firefox 29** | **Opera 19** | **IE 19** | **Android
    4** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **测试** | **Chrome 34** | **Firefox 29** | **Opera 19** | **IE 19** | **Android
    4** |'
- en: '| 1 | 56.8 | 125.4 | 63.6 | 152.6 | 1455.2 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 56.8 | 125.4 | 63.6 | 152.6 | 1455.2 |'
- en: '| 2 | 55.4 | 128.4 | 61.4 | 141 | 1404.6 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 55.4 | 128.4 | 61.4 | 141 | 1404.6 |'
- en: '| 3 | 55 | 125.6 | 61.8 | 152.4 | 1363.4 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 55 | 125.6 | 61.8 | 152.4 | 1363.4 |'
- en: '| 4 | 54.8 | 129 | 63.2 | 147.4 | 1421.2 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 54.8 | 129 | 63.2 | 147.4 | 1421.2 |'
- en: '| 5 | 55.4 | 124.4 | 63.2 | 147.4 | 1411.2 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 55.4 | 124.4 | 63.2 | 147.4 | 1411.2 |'
- en: '| 6 | 60.6 | 138 | 58.4 | 162 | 1500.4 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 60.6 | 138 | 58.4 | 162 | 1500.4 |'
- en: '| 7 | 51.2 | 126.6 | 56.8 | 147.8 | 1453.8 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 51.2 | 126.6 | 56.8 | 147.8 | 1453.8 |'
- en: '| 8 | 48.8 | 127.4 | 56.2 | 150.2 | 1398.8 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 48.8 | 127.4 | 56.2 | 150.2 | 1398.8 |'
- en: '| 9 | 48.8 | 127.4 | 55.8 | 154.6 | 1348.4 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 48.8 | 127.4 | 55.8 | 154.6 | 1348.4 |'
- en: '| 10 | 52.2 | 129.4 | 58 | 172 | 1420.2 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 52.2 | 129.4 | 58 | 172 | 1420.2 |'
- en: '| 11 | 49 | 127.4 | 56.6 | 148.4 | 1352 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 49 | 127.4 | 56.6 | 148.4 | 1352 |'
- en: '| 12 | 50.6 | 127.2 | 58.4 | 146.2 | 1377.6 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 12 | 50.6 | 127.2 | 58.4 | 146.2 | 1377.6 |'
- en: '| 13 | 64.6 | 129.2 | 72.4 | 152.8 | 1461.2 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 13 | 64.6 | 129.2 | 72.4 | 152.8 | 1461.2 |'
- en: '| 14 | 50.2 | 129.8 | 54.8 | 154.6 | 1381.2 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 14 | 50.2 | 129.8 | 54.8 | 154.6 | 1381.2 |'
- en: '| 15 | 50 | 126.2 | 56.8 | 154.8 | 1351.6 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 15 | 50 | 126.2 | 56.8 | 154.8 | 1351.6 |'
- en: '| 16 | 49.2 | 127.6 | 56 | 149.2 | 1379.2 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 16 | 49.2 | 127.6 | 56 | 149.2 | 1379.2 |'
- en: '| 17 | 50.4 | 132.4 | 55 | 157.6 | 1386 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 17 | 50.4 | 132.4 | 55 | 157.6 | 1386 |'
- en: '| 18 | 49.2 | 128.8 | 58.6 | 154.2 | 1380.6 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 18 | 49.2 | 128.8 | 58.6 | 154.2 | 1380.6 |'
- en: '| 19 | 48.6 | 132.4 | 54.8 | 148.4 | 1349.6 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 19 | 48.6 | 132.4 | 54.8 | 148.4 | 1349.6 |'
- en: '| 20 | 50.4 | 128 | 55 | 149.8 | 1393.8 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 20 | 50.4 | 128 | 55 | 149.8 | 1393.8 |'
- en: '| Biggest Diff. | 16 | 13.6 | 17.6 | 31 | 152 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 最大差异 | 16 | 13.6 | 17.6 | 31 | 152 |'
- en: '| Lowest | 13 | 6 | 13 | 10 | 6 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 最低 | 13 | 6 | 13 | 10 | 6 |'
- en: The difference between fastest and slowest selector
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最快选择器和最慢选择器之间的差异
- en: The **Biggest Diff.** row shows the difference in milliseconds between the fastest
    and slowest selector. Of the desktop browsers, IE9 stands out as having the biggest
    difference between fastest and slowest selectors at **31** ms. The others are
    all around half of that figure. However, interestingly there .
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**最大差异**行显示了最快和最慢选择器之间的毫秒差异。在桌面浏览器中，IE9以**31**毫秒的最大差异脱颖而出。其他浏览器的差异都在这个数字的一半左右。然而，有趣的是。'
- en: The slowest selector
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最慢的选择器
- en: I was interested to note that the slowest selector type differed from browser
    to browser. Both Opera and Chrome found the *insanity* selector (test 13) the
    hardest to match (the similarity between Opera and Chrome here perhaps not surprising
    given they share the *blink* ([http://www.chromium.org/blink](http://www.chromium.org/blink))
    engine), while Firefox struggled with a single pseudo selector (*test 6* ([https://benfrain.com/selector-test/06.html](https://benfrain.com/selector-test/06.html))),
    as did the Android 4.2 device (a Tesco hudl 7" tablet). Internet Explorer 9's
    Achilles heel was the partial attribute selector (*test 10* ([https://benfrain.com/selector-test/10.html](https://benfrain.com/selector-test/10.html))).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到，最慢的选择器类型在不同的浏览器中有所不同。Opera和Chrome都发现*insanity*选择器（测试13）最难匹配（这里Opera和Chrome的相似性可能并不令人惊讶，因为它们共享*blink*引擎），而Firefox和Android
    4.2设备（Tesco hudl 7英寸平板电脑）都难以匹配单个伪选择器（*测试6*），Internet Explorer 9的软肋是部分属性选择器（*测试10*）。
- en: Good CSS architecture practices
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 良好的CSS架构实践
- en: One thing we can be clear on is that using a flat hierarchy of class-based selectors,
    as is the case with ECSS, provides selectors that are as fast as any others.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以肯定的是，使用基于类的选择器的扁平层次结构，就像ECSS一样，提供的选择器与其他选择器一样快。 '
- en: What does this mean?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这意味着什么？
- en: For me, it has confirmed my believe that it is absolute folly to worry about
    the type of selector used. Second guessing a selector engine is pointless as the
    manner selector engines work through selectors clearly differs. Further more,
    the difference between fastest and slowest selectors isn't massive, even on a
    ludicrous DOM size like this. As we say in the North of England, *There are bigger
    fish to fry*.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这证实了我的信念，即担心所使用的选择器类型是绝对愚蠢的。对选择器引擎进行猜测是毫无意义的，因为选择器引擎处理选择器的方式显然是不同的。而且，即使在像这样的庞大DOM上，最快和最慢的选择器之间的差异也不是很大。正如我们在英格兰北部所说，“有更重要的事情要做”。
- en: 'Since documenting my original results, Benjamin Poulain, a WebKit Engineer
    got in touch to point out his concerns with the methodology used. His comments
    were very interesting and some of the information he related is quoted verbatim
    below:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自从记录了我的原始结果以来，WebKit工程师本杰明·普兰联系我，指出了他对所使用方法的担忧。他的评论非常有趣，他提到的一些信息如下所述：
- en: '*By choosing to measure performance through the loading, you are measuring
    plenty of much much bigger things than CSS, CSS Performance is only a small part
    of loading a page.*'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*通过选择通过加载来衡量性能，你正在衡量比CSS大得多的东西，CSS性能只是加载页面的一小部分。*'
- en: 'If I take the time profile of `[class^="wrap"]` for example (taken on an old
    WebKit so that it is somewhat similar to Chrome), I see:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以`[class^="wrap"]`的时间配置文件为例（在旧的WebKit上进行，以便与Chrome有些相似），我看到：
- en: ~10% of the time is spent in the rasterizer.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ~10%的时间用于光栅化。
- en: ~21% of the time is spent on the first layout.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ~21%的时间用于第一次布局。
- en: ~48% of the time is spent in the parser and DOM tree creation
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ~48%的时间用于解析器和DOM树的创建
- en: ~8% is spent on style resolution
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ~8%用于样式解析
- en: ~5% is spent on collecting the style – this is what we should be testing and
    what should take most of the time. (The remaining time is spread over many many
    little functions).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ~5%用于收集样式-这是我们应该测试的内容，也是最耗时的内容。（剩下的时间分布在许多小函数中）。
- en: With the test above, let say we have a baseline of 100 ms with the fastest selector.
    Of that, 5 ms would be spent collecting style. If a second selector is 3 times
    slower, that would appear as 110 ms in total. The test should report a 300% difference
    but instead it only shows 10%.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上面的测试，我们可以说我们有一个基线为100毫秒的最快选择器。其中，5毫秒将用于收集样式。如果第二个选择器慢3倍，总共将显示为110毫秒。测试应该报告300%的差异，但实际上只显示了10%。
- en: 'At this point, I responded that whilst I understood what Benjamin was pointing
    out, my test was only supposed to illustrate that the same page, with all other
    things being equal, renders largely the same regardless of the selector used.
    Benjamin took the time to reply with further detail:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我回答说，虽然我理解本杰明指出的问题，但我的测试只是为了说明，相同的页面，在其他所有条件相同的情况下，无论使用哪种选择器，渲染基本上都是相同的。本杰明花时间回复并提供了更多细节：
- en: '*I completely agree it is useless to optimize selectors upfront, but for completely
    different reasons:*'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我完全同意提前优化选择器是没有用的，但原因完全不同：*'
- en: '>'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*It is practically impossible to predict the final performance impact of a
    given selector by just examining the selectors. In the engine, selectors are reordered,
    split, collected and compiled. To know the final performance of a given selectors,
    you would have to know in which bucket the selector was collected, how it is compiled,
    and finally what does the DOM tree looks like.*'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*仅仅通过检查选择器就几乎不可能预测给定选择器的最终性能影响。在引擎中，选择器被重新排序、拆分、收集和编译。要知道给定选择器的最终性能，你必须知道选择器被收集到了哪个桶中，它是如何编译的，最后DOM树是什么样子的。*'
- en: '>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*All of that is very different between the various engines, making the whole
    process even less predictable.*'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*各种引擎之间都非常不同，使整个过程变得更不可预测。*'
- en: '>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*The second argument I have against web developers optimizing selectors is
    that they will likely make things worse. The amount of misinformation about selectors
    is larger than correct cross-browser information. The chance of someone doing
    the right thing is pretty low.*'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我反对网页开发人员优化选择器的第二个论点是，他们可能会让情况变得更糟。关于选择器的错误信息比正确的跨浏览器信息要多。有人做正确的事情的机会是相当低的。*'
- en: '>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*In practice, people discover performance problems with CSS and start removing
    rules one by one until the problem go away. I think that is the right way to go
    about this, it is easy and will lead to correct outcome.*'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在实践中，人们发现CSS的性能问题，并开始逐条删除规则，直到问题消失。我认为这是正确的做法，这样做很容易，并且会导致正确的结果。
- en: Cause and effect
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 因果关系
- en: At this point I felt vindicated that the CSS selector used was almost entirely
    irrelevant. However, I did wonder what else we could gleam from the tests.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我感到CSS选择器的使用几乎是无关紧要的。然而，我想知道我们还能从测试中得出什么。
- en: If the number of DOM elements on the page was halved, as you might expect, the
    speed to complete any of the tests dropped commensurately. But getting rid of
    large parts of the DOM isn't always a possibility in the real world. This made
    me wonder what difference the amount of unused styles in the CSS would have on
    the results.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面上的DOM元素数量减半，正如你所期望的，完成任何测试的速度也相应下降。但在现实世界中，减少DOM的大部分并不总是可能的。这让我想知道CSS中未使用的样式数量对结果的影响。
- en: What difference does style bloat make?
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式膨胀会产生什么影响？
- en: '*Another test* ([https://benfrain.com/selector-test/2-01.html](https://benfrain.com/selector-test/2-01.html)):
    I grabbed a big fat style sheet that had absolutely no relevance to the DOM tree.
    It was about 3000 lines of CSS. All these irrelevant styles were inserted before
    a final rule that would select our inner `a.link` node and make it red. I did
    the same averaging of the results across 5 runs on each browser.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*另一个测试*（[https://benfrain.com/selector-test/2-01.html](https://benfrain.com/selector-test/2-01.html)）：我拿了一张与DOM树完全无关的庞大样式表。大约有3000行CSS。所有这些无关的样式都是在最后一个选择我们内部的`a.link`节点并将其变红的规则之前插入的。我对每个浏览器进行了5次运行的结果平均值。'
- en: '*Half those rules were then cut out and the test repeated* ([https://benfrain.com/selector-test/2-02.html](https://benfrain.com/selector-test/2-02.html))
    to give a comparison. Here are the results:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*然后删除了一半的规则并重复了测试*（[https://benfrain.com/selector-test/2-02.html](https://benfrain.com/selector-test/2-02.html)）以进行比较。以下是结果：'
- en: '| **Test** | **Chrome 34** | **Firefox 29** | **Opera 19** | **IE 19** | **Android
    4** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **测试** | **Chrome 34** | **Firefox 29** | **Opera 19** | **IE 19** | **Android
    4** |'
- en: '| Full bloat | 64.4 | 237.6 | 74.2 | 436.8 | 1714.6 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 完全膨胀 | 64.4 | 237.6 | 74.2 | 436.8 | 1714.6 |'
- en: '| Half bloat | 51.6 | 142.8 | 65.4 | 358.6 | 1412.4 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 一半膨胀 | 51.6 | 142.8 | 65.4 | 358.6 | 1412.4 |'
- en: Rules diet
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则减肥
- en: This provides some interesting figures. For example, Firefox was 1.7X slower
    to complete this test than it was with its slowest selector test (test 6). Android
    4.3 was 1.2X slower than its slowest selector test (test 6). Internet Explorer
    was a whopping 2.5X slower than its slowest selector!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一些有趣的数据。例如，Firefox在完成这个测试时比其最慢的选择器测试（测试6）慢了1.7倍。Android 4.3比其最慢的选择器测试（测试6）慢了1.2倍。Internet
    Explorer比其最慢的选择器慢了2.5倍！
- en: You can see that things dropped down considerably for Firefox when half of the
    styles were removed (approx 1500 lines). The Android device came down to around
    the speed of its slowest selector at that point too.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，当删除了一半的样式（大约1500行）后，Firefox的速度大大下降。Android设备在那时也降到了其最慢选择器的速度。
- en: Removing unused styles
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除未使用的样式
- en: Does this kind of horror scenario sound familiar to you? Enormous CSS files
    with all manner of selectors (often with selectors in that don't even work), heaps
    of ever more specific selectors seven or more levels deep, non-applicable vendor-prefix's,
    ID selectors all over the place and file sizes of 50–80 KB (sometimes more).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这种恐怖的场景对你来说是不是很熟悉？巨大的CSS文件包含各种选择器（通常包含甚至不起作用的选择器），大量更具体的选择器，七层或更深的选择器，不适用的供应商前缀，到处都是ID选择器，文件大小为50-80
    KB（有时更大）。
- en: If you are working on a code base that has a big fat CSS file like this, one
    that no-one is quite sure what all the styles are actually for, my advice would
    be to look there for your CSS optimisations before the selectors being employed.
    Hopefully by this point you will be convinced that an ECSS approach might help
    in this respect.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在处理一个有着庞大CSS文件的代码库，而且没有人确切知道所有这些样式实际上是用来做什么的，我的建议是在选择器之前查看CSS优化。希望到这一点你会相信ECSS方法在这方面可能会有所帮助。
- en: Then again, that won't necessarily help with the actual performance of your
    CSS.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不一定会帮助CSS的实际性能。
- en: Performance inside the brackets
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 括号内的性能
- en: 'The *final test* ([https://benfrain.com/selector-test/3-01.html](https://benfrain.com/selector-test/3-01.html))
    I ran was to hit the page with a bunch of *expensive* properties and values. Consider
    this rule:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*最终测试*（[https://benfrain.com/selector-test/3-01.html](https://benfrain.com/selector-test/3-01.html)）我进行的是对页面应用一堆*昂贵*的属性和值。考虑这条规则：'
- en: '[PRE2]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With that rule applied, here are the results:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 应用了这条规则后，以下是结果：
- en: '| **Test** | **Chrome 34** | **Firefox 29** | **Opera 19** | **IE 19** | **Android
    4** |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| **测试** | **Chrome 34** | **Firefox 29** | **Opera 19** | **IE 19** | **Android
    4** |'
- en: '| Expensive Styles | 65.2 | 151.4 | 65.2 | 259.2 | 1923 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 昂贵的样式 | 65.2 | 151.4 | 65.2 | 259.2 | 1923 |'
- en: Here all browsers are at least up with their slowest selector speed (IE was
    1.5X slower than its slowest selector test (10) and the Android device was 1.3X
    slower than the slowest selector test (test 6)) but that's not even the full picture.
    Try and scroll that page! Repaint on those kind of styles can bring a browser
    to its knees (or whatever the equivalent of knees is for a browser).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有浏览器至少都达到了其最慢选择器的速度（IE比其最慢的选择器测试（10）慢了1.5倍，Android设备比最慢的选择器测试（测试6）慢了1.3倍），但这还不是全部。试着滚动那个页面！这种样式的重绘可能会让浏览器崩溃（或者浏览器的等价物）。
- en: The properties we stick inside the braces are what really affects performance.
    It stands to reason that scrolling a page that requires endless expensive re-paints
    and layout changes is going to put a strain on the device. Nice HiDPI screen?
    It will be even worse as the CPU/GPU strains to get everything re-painted to screen
    in under 16 ms.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们放在大括号内的属性才是真正影响性能的。可以想象，滚动一个需要无休止昂贵的重绘和布局更改的页面会给设备带来压力。高分辨率屏幕？这会更糟，因为CPU/GPU会努力在16毫秒内将所有内容重新绘制到屏幕上。
- en: With the expensive styles test, on the 15" Retina MacBook Pro I tested on, the
    paint time shown in continuous paint mode in Chrome never dropped below 280 ms
    (and remember, we are aiming for sub–16 ms). To put that in perspective for you,
    the first selector test page, never went above 2.5 ms. That wasn't a typo. Those
    properties created a 112X increase in paint time. Holy expensive properties Batman!
    Indeed Robin. Indeed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在昂贵的样式测试中，在我测试的15英寸Retina MacBook Pro上，Chrome连续绘制模式中显示的绘制时间从未低于280毫秒（请记住，我们的目标是低于16毫秒）。为了让你有所了解，第一个选择器测试页面从未超过2.5毫秒。这不是打错字。这些属性导致绘制时间增加了112倍。天啊，这些属性真是昂贵啊！确实是罗宾。确实是。
- en: What properties are expensive?
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么属性是昂贵的？
- en: An *expensive* property/value pairing is one we can be pretty confident will
    make the browser struggle with when it has to repaint the screen (e.g. on scroll).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*昂贵*的属性/值配对是我们可以相当确信会使浏览器在重新绘制屏幕时感到吃力的（例如在滚动时）。'
- en: How can we know what will be an *expensive* style? Thankfully, we can apply
    common sense to this and get a pretty good idea what is going to tax the browser.
    Anything that requires a browser to manipulate/calculate before painting to the
    page will be more costly. For example, box-shadows, border-radius, transparency
    (as the browser has to calculate what is shown below), transforms and performance
    killers like CSS filters - if performance is your priority, anything like that
    is your worst enemy.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何知道什么样式是*昂贵*的？幸运的是，我们可以运用常识来得出一个相当好的想法，知道什么会让浏览器负担。任何需要浏览器在绘制到页面之前进行操作/计算的东西都会更加昂贵。例如，盒阴影，边框半径，透明度（因为浏览器必须计算下面显示的内容），变换和性能杀手，如CSS滤镜-如果性能是你的优先考虑因素，那么任何类似的东西都是你的大敌。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Juriy kangax Zaytsev did `a fantastic blog post also covering CSS performance` ([http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/](http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/)) back
    in 2012\. He was using the various developer tools to measure performance. He
    did a particularly good job of showing the difference that various properties
    had on performance. If this kind of thing interests you then that post is well
    worth your time.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Juriy kangax Zaytsev在2012年做了一篇`非常棒的博客文章，也涵盖了CSS性能`（[http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/](http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/)）。他使用各种开发者工具来衡量性能。他特别出色地展示了各种属性对性能的影响。如果你对这种事情感兴趣，那么这篇文章绝对值得一读。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Some takeaways from these tests:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些测试中得出的一些要点：
- en: Sweating over the selectors used in modern browsers is futile; most selection
    methods are now so fast it's really not worth spending much time over. Furthermore,
    there is disparity across browsers of what the slowest selectors are anyway. Look
    here last to speed up your CSS.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现代浏览器中纠结于所使用的选择器是徒劳的；大多数选择方法现在都非常快，真的不值得花太多时间在上面。此外，不同浏览器对最慢的选择器也存在差异。最后查看这里以加快你的CSS速度。
- en: Excessive unused styles are likely to cost more, performance wise, than any
    selectors you chose so look to tidy up there second. 3000 lines that are unused
    or surplus on a page are not even that uncommon. While it's common to bunch all
    the styles up into a great big single `styles.css`, if different areas of your
    site/web application can have different (additional) style sheets added (dependency
    graph style), that may be the better option.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过多的未使用样式可能会在性能上造成更多的损失，而不是你选择的任何选择器，所以第二要整理那里。在页面上有3000行未使用或多余的样式并不罕见。虽然将所有样式都捆绑到一个大的`styles.css`中很常见，但如果站点/网络应用的不同区域可以添加不同的（额外的）样式表（依赖图样式），那可能是更好的选择。
- en: If your CSS has been added to by a number of different authors over time, look
    to tools like *UnCSS* ([https://github.com/giakki/uncss](https://github.com/giakki/uncss))
    to automate the removal of styles; doing that process by hand is no fun!
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的CSS随着时间被多位不同的作者添加，可以使用*UnCSS*等工具（[https://github.com/giakki/uncss](https://github.com/giakki/uncss)）来自动删除样式；手动进行这个过程并不有趣！
- en: The battle for high performing CSS will not be won in the selectors used, it
    will be won with the judicious use of property and values.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高性能CSS的竞争不在于所使用的选择器，而在于对属性和值的慎重使用。
- en: Getting something painted to screen fast is obviously important but so is how
    a page feels when the user interacts with it. Look for expensive property and
    value pairs first (Chrome continuous repaint mode is your friend here), they are
    likely to provide the biggest gains.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速将某物绘制到屏幕上显然很重要，但用户与页面交互时页面的感觉也很重要。首先寻找昂贵的属性和值对（Chrome连续重绘模式在这里是你的朋友），它们可能会带来最大的收益。
