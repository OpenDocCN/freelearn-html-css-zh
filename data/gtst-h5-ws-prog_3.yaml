- en: Chapter 3. Configuring the Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。配置服务器
- en: WebSocket stands for bidirectional, full-duplex communication. As a result,
    we need two parties for this kind of conversation. In the previous chapter, we
    implemented the WebSocket client application. Now it's time to establish the other
    side of the channel, which is the WebSocket server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket代表双向全双工通信。因此，我们需要两方参与这种对话。在上一章中，我们实现了WebSocket客户端应用程序。现在是时候建立通道的另一端了，也就是WebSocket服务器。
- en: Why do I need a WebSocket server?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我需要一个WebSocket服务器？
- en: We assume that you have a minor familiarity with servers in general. A server
    is nothing but a remote computer that has specific hardware and software requirements
    in order to achieve high availability and up-time, enhanced security, and management
    of multiple concurrent connections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你对服务器有一定的了解。服务器只是一个具有特定硬件和软件要求的远程计算机，以实现高可用性和正常运行、增强的安全性和管理多个并发连接。
- en: A WebSocket server is nothing but a simple program that is able to handle WebSocket
    events and actions. It usually exposes similar methods to the WebSocket client
    API and most programming languages provide an implementation. The following diagram
    illustrates the communication process between a WebSocket server and a WebSocket
    client, emphasizing the triggered events and actions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket服务器只是一个能够处理WebSocket事件和操作的简单程序。它通常公开类似于WebSocket客户端API的方法，并且大多数编程语言都提供了实现。以下图表说明了WebSocket服务器和WebSocket客户端之间的通信过程，强调了触发的事件和操作。
- en: 'The following diagram shows WebSocket server and client event triggering:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了WebSocket服务器和客户端事件触发：
- en: '![Why do I need a WebSocket server?](img/6962_03_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![为什么我需要一个WebSocket服务器？](img/6962_03_01.jpg)'
- en: Do not get confused—a WebServer can either run on top of Apache or IIS—or it
    can be a completely different application by itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆——Web服务器可以在Apache或IIS之上运行，也可以是一个完全不同的应用程序。
- en: Considering the hardware, you could use a super-computer or your developer machine
    as a server. It's all down to the requirements and the budget of each project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到硬件，你可以使用超级计算机或你的开发者机器作为服务器。这完全取决于每个项目的要求和预算。
- en: Setting up the server
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置服务器
- en: Implementing a WebSocket server from scratch is not a hard process, though it
    requires specific knowledge and it's far from the purposes of this book. As a
    result, we are going to use one of the existing WebSocket implementations that
    are currently out there. Thanks to the large community of developers, we can easily
    pick the WebSocket server of our preferred programming language or framework.
    Furthermore, most of the implementations are open source, so you can even adjust
    them to your own needs if necessary!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始实现一个WebSocket服务器并不是一个困难的过程，尽管它需要特定的知识，而且远非本书的目的。因此，我们将使用当前已经存在的WebSocket实现之一。由于有着庞大的开发者社区，我们可以轻松地选择我们喜欢的编程语言或框架的WebSocket服务器。此外，大多数实现都是开源的，所以如果需要，你甚至可以调整它们以满足自己的需求！
- en: Selecting the technology that suits you
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择适合你的技术
- en: 'We have listed some popular WebSocket server implementations. Here are some
    questions you should ask yourself before picking one:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们列出了一些流行的WebSocket服务器实现。在选择之前，以下是一些你应该问自己的问题：
- en: What technology are you most familiar with?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你最熟悉哪种技术？
- en: What are the specific requirements of your project?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的项目有什么具体的要求？
- en: Do you already have a solution you want to enhance?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经有一个想要增强的解决方案了吗？
- en: Is the server's documentation thorough and understandable?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器的文档是否详尽且易懂？
- en: Is there an active support community for the server?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器是否有一个活跃的支持社区？
- en: Let's now have a look at the most popular WebSocket server libraries for the
    most extensively used programming languages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看最流行的WebSocket服务器库，适用于最广泛使用的编程语言。
- en: C/C++
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C/C++
- en: '| Tufao | [https://github.com/vinipsmaker/tufao](https://github.com/vinipsmaker/tufao)
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| Tufao | [https://github.com/vinipsmaker/tufao](https://github.com/vinipsmaker/tufao)
    |'
- en: '| Wslay | [http://wslay.sourceforge.net/](http://wslay.sourceforge.net/) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| Wslay | [http://wslay.sourceforge.net/](http://wslay.sourceforge.net/) |'
- en: '| Libwebsockets | [http://libwebsockets.org/trac](http://libwebsockets.org/trac)
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| Libwebsockets | [http://libwebsockets.org/trac](http://libwebsockets.org/trac)
    |'
- en: '| Mongoose | [https://code.google.com/p/mongoose/](https://code.google.com/p/mongoose/)
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Mongoose | [https://code.google.com/p/mongoose/](https://code.google.com/p/mongoose/)
    |'
- en: Java
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java
- en: '| Apache Tomcat | [http://tomcat.apache.org/](http://tomcat.apache.org/) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Apache Tomcat | [http://tomcat.apache.org/](http://tomcat.apache.org/) |'
- en: '| JBoss | [http://www.jboss.org/](http://www.jboss.org/) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| JBoss | [http://www.jboss.org/](http://www.jboss.org/) |'
- en: '| GlassFish | [http://glassfish.java.net/](http://glassfish.java.net/) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| GlassFish | [http://glassfish.java.net/](http://glassfish.java.net/) |'
- en: '| Atmosphere | [https://github.com/Atmosphere/atmosphere](https://github.com/Atmosphere/atmosphere)
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Atmosphere | [https://github.com/Atmosphere/atmosphere](https://github.com/Atmosphere/atmosphere)
    |'
- en: '| Play Framework | [http://www.playframework.com/](http://www.playframework.com/)
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Play Framework | [http://www.playframework.com/](http://www.playframework.com/)
    |'
- en: '| Jetty | [http://www.eclipse.org/jetty/](http://www.eclipse.org/jetty/) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Jetty | [http://www.eclipse.org/jetty/](http://www.eclipse.org/jetty/) |'
- en: '| jWebSocket | [http://jwebsocket.org/](http://jwebsocket.org/) |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| jWebSocket | [http://jwebsocket.org/](http://jwebsocket.org/) |'
- en: '| Migratory data | [http://migratorydata.com/](http://migratorydata.com/) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Migratory data | [http://migratorydata.com/](http://migratorydata.com/) |'
- en: '| Bristleback | [http://bristleback.pl/](http://bristleback.pl/) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Bristleback | [http://bristleback.pl/](http://bristleback.pl/) |'
- en: .NET
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET
- en: '| Internet Information Services 8 | [http://www.iis.net/](http://www.iis.net/)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Internet Information Services 8 | [http://www.iis.net/](http://www.iis.net/)
    |'
- en: '| Fleck | [https://github.com/statianzo/Fleck](https://github.com/statianzo/Fleck)
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Fleck | [https://github.com/statianzo/Fleck](https://github.com/statianzo/Fleck)
    |'
- en: '| SuperWebSocket | [http://superwebsocket.codeplex.com/](http://superwebsocket.codeplex.com/)
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| SuperWebSocket | [http://superwebsocket.codeplex.com/](http://superwebsocket.codeplex.com/)
    |'
- en: PHP
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PHP
- en: '| Php-websocket | [https://github.com/nicokaiser/php-websocket](https://github.com/nicokaiser/php-websocket)
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Php-websocket | [https://github.com/nicokaiser/php-websocket](https://github.com/nicokaiser/php-websocket)
    |'
- en: '| Rachet | [http://socketo.me/](http://socketo.me/) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Rachet | [http://socketo.me/](http://socketo.me/) |'
- en: '| Hoar | [https://github.com/hoaproject/Websocket](https://github.com/hoaproject/Websocket)
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| Hoar | [https://github.com/hoaproject/Websocket](https://github.com/hoaproject/Websocket)
    |'
- en: Python
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python
- en: '| Tornado | [http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| Tornado | [http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/)
    |'
- en: '| Pywebsocket | [https://code.google.com/p/pywebsocket/](https://code.google.com/p/pywebsocket/)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Pywebsocket | [https://code.google.com/p/pywebsocket/](https://code.google.com/p/pywebsocket/)
    |'
- en: '| Autobahn | [http://autobahn.ws/](http://autobahn.ws/) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Autobahn | [http://autobahn.ws/](http://autobahn.ws/) |'
- en: '| txWS | [https://github.com/MostAwesomeDude/txWS](https://github.com/MostAwesomeDude/txWS)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| txWS | [https://github.com/MostAwesomeDude/txWS](https://github.com/MostAwesomeDude/txWS)
    |'
- en: '| WebSocket for Python | [https://github.com/Lawouach/WebSocket-for-Python](https://github.com/Lawouach/WebSocket-for-Python)
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| WebSocket for Python | [https://github.com/Lawouach/WebSocket-for-Python](https://github.com/Lawouach/WebSocket-for-Python)
    |'
- en: Ruby
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ruby
- en: '| EM-WebSocket | [https://github.com/igrigorik/em-websocket](https://github.com/igrigorik/em-websocket)
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| EM-WebSocket | [https://github.com/igrigorik/em-websocket](https://github.com/igrigorik/em-websocket)
    |'
- en: '| Socky server | [https://github.com/socky/socky-server-ruby](https://github.com/socky/socky-server-ruby)
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Socky服务器 | [https://github.com/socky/socky-server-ruby](https://github.com/socky/socky-server-ruby)
    |'
- en: JavaScript
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript
- en: This is no joke. You can create a web server using JavaScript thanks to `Node.js`.
    `Node.js` ([http://nodejs.org](http://nodejs.org)) is an event-driven framework
    that lets you build real-time web applications. It is also interpreted by Google's
    JavaScript engine, V8\. Although the framework does not support WebSockets out-of-the-box,
    there are some quite good extensions which do so.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是开玩笑。你可以使用JavaScript创建一个Web服务器，这要感谢`Node.js`。`Node.js` ([http://nodejs.org](http://nodejs.org))是一个事件驱动的框架，让你构建实时Web应用程序。它也是由谷歌的JavaScript引擎V8解释的。虽然该框架不直接支持WebSockets，但有一些相当不错的扩展支持WebSockets。
- en: '| Socket IO | [http://socket.io/](http://socket.io/) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Socket IO | [http://socket.io/](http://socket.io/) |'
- en: '| WebSocket-Node | [https://github.com/Worlize/WebSocket-Node](https://github.com/Worlize/WebSocket-Node)
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| WebSocket-Node | [https://github.com/Worlize/WebSocket-Node](https://github.com/Worlize/WebSocket-Node)
    |'
- en: '| Node WebSocket Server | [https://github.com/miksago/node-websocket-server](https://github.com/miksago/node-websocket-server)
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Node WebSocket服务器 | [https://github.com/miksago/node-websocket-server](https://github.com/miksago/node-websocket-server)
    |'
- en: '`Node.js` is constantly getting more and more fans, so it might be worth a
    try.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Node.js`不断吸引更多的粉丝，所以值得一试。'
- en: Setting up the development environment
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搭建开发环境
- en: The environment where your server will be created depends on the technology,
    frameworks, and programming languages that you are planning to use. There is an
    amazingly huge variety of **Integrated Development Environments** (**IDEs**) and
    utilities that make your life easier!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建服务器的环境取决于你计划使用的技术、框架和编程语言。有着惊人多样性的**集成开发环境**（**IDEs**）和实用工具可以让你的生活更轻松！
- en: 'Here is a list of some IDEs we propose, along with the web programming languages
    they support:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们提议的一些IDE，以及它们支持的Web编程语言：
- en: '| IDE | Operating System | Supported languages |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| IDE | 操作系统 | 支持的语言 |'
- en: '| --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Aptana | Windows, Mac, Linux | HTML5JavaScriptPHP |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| Aptana | Windows，Mac，Linux | HTML5JavaScriptPHP |'
- en: '| NetBeans | Windows, Mac, Linux | HTML5C/C++Java |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| NetBeans | Windows，Mac，Linux | HTML5C/C++Java |'
- en: '| Eclipse (with the Web Developer plugin) | Windows, Mac, Linux | HTML5JavaScriptC/C++Java
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Eclipse（带有Web开发插件）| Windows，Mac，Linux | HTML5JavaScriptC/C++Java |'
- en: '| Visual Studio | Windows | HTML5JavaScript.NET |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Visual Studio | Windows | HTML5JavaScript.NET |'
- en: '| WebMatrix | Windows | HTML5JavaScriptPHP.NET |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| WebMatrix | Windows | HTML5JavaScriptPHP.NET |'
- en: Throughout the book, we decided to use C#.NET and Fleck, though this should
    make no difference to you. Feel free to pick the language you prefer or the language
    your existing projects require.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们决定使用C#.NET和Fleck，但这对你来说没有任何影响。随意选择你喜欢的语言或你现有项目所需的语言。
- en: 'For didactic purposes, C# has the following advantages:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 出于教学目的，C#具有以下优势：
- en: It runs on Windows using the .NET framework and on Mac and Linux using Mono
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在Windows上使用.NET框架，在Mac和Linux上使用Mono
- en: It has an active community of developers, making it easier to find support
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个活跃的开发者社区，更容易找到支持
- en: It is easy-to-learn
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很容易学习
- en: You can quickly setup a WebSocket server with minimum configuration
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以快速设置一个最小配置的WebSocket服务器
- en: 'Fleck library was chosen because of three reasons:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Fleck库之所以被选择，是因为有三个原因：
- en: It is supported on both Windows and Unix-based operating systems
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持Windows和基于Unix的操作系统
- en: It is extremely easy-to-use and configure
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它非常易于使用和配置
- en: It is well-maintained and well-documented
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它得到了很好的维护和文档支持
- en: 'This is how you can quickly set up a Fleck WebSocket server using C#:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何快速使用C#设置Fleck WebSocket服务器的方法：
- en: Download Visual Studio Express (It is freely available at [http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop](http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop)).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Visual Studio Express（它可以免费获取，网址为[http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop](http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-for-windows-desktop)）。
- en: Download Fleck ([https://github.com/statianzo/Fleck](https://github.com/statianzo/Fleck)).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Fleck ([https://github.com/statianzo/Fleck](https://github.com/statianzo/Fleck))。
- en: Launch Visual Studio and click on **File** | **New** | **Project**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio，点击**文件** | **新建** | **项目**。
- en: Under Visual C#, select **Windows**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual C#下选择**Windows**。
- en: Choose **Console Application** (yes, a console-based server is the easiest way
    to set up a WebSocket server).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**控制台应用程序**（是的，基于控制台的服务器是设置WebSocket服务器的最简单方式）。
- en: Name your project whatever you like and click on **OK**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给你的项目取任何你喜欢的名字，然后点击**确定**。
- en: On the **Solution Explorer** tab, right-click on the **References** icon and
    select **Add new reference**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**选项卡上，右键单击**引用**图标，然后选择**添加新引用**。
- en: Click on **browse** and find the `Fleck.dll` file.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**浏览**，找到`Fleck.dll`文件。
- en: Click on **OK** and you are done!
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**，你就完成了！
- en: Connecting to the web server
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Web服务器
- en: The WebSocket server works in a similar way to the WebSocket clients. It responds
    to events and performs actions when necessary.Regardless of the programming language
    you use, every WebSocket server performs some specific actions. It is initialized
    to a WebSocket address, it handles `OnOpen`, `OnClose` and `OnMessage` events,
    and sends messages to the clients, too.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket服务器的工作方式与WebSocket客户端类似。它响应事件，并在必要时执行操作。无论您使用的编程语言是什么，每个WebSocket服务器都会执行一些特定的操作。它被初始化为WebSocket地址，处理`OnOpen`、`OnClose`和`OnMessage`事件，并向客户端发送消息。
- en: Creating the WebSocket server instance
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建WebSocket服务器实例
- en: 'Every WebSocket server needs a valid host and port. Here is how we create a
    WebSocketServer instance in Fleck:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个WebSocket服务器都需要一个有效的主机和端口。以下是我们在Fleck中创建WebSocketServer实例的方法：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can type any valid URL you'd like and specify a port that is not in use.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以输入任何有效的URL，并指定一个未被使用的端口。
- en: It is very useful to keep a record of the connected clients, as you may need
    to provide them with different data or send different messages to each one.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 保留连接的客户端记录非常有用，因为您可能需要为它们提供不同的数据或向每个客户端发送不同的消息。
- en: 'Fleck represents the incoming connections (clients) with the `IWebSocketConnection`
    interface. We can create an empty list and update it whenever someone connects
    or disconnects from our service:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Fleck使用`IWebSocketConnection`接口表示传入的连接（客户端）。我们可以创建一个空列表，并在有人连接或断开连接时更新它：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After that, we can call the `Start` method and wait for the clients to connect.
    When started, the server is able to accept incoming connections.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以调用`Start`方法，并等待客户端连接。一旦启动，服务器就能够接受传入的连接。
- en: 'In Fleck, the `Start` method needs a parameter which indicates the socket that
    raised the events:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fleck中，`Start`方法需要一个参数，指示引发事件的套接字：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Some syntax explanation: what follows the `Start` declaration is called a C#
    Action and you can totally ignore it if you''re using a different language. We''ll
    handle all of the events inside the `Start` block.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语法解释：`Start`声明后面的内容称为C# Action，如果您使用不同的语言，可以完全忽略它。我们将在`Start`块内处理所有事件。
- en: Open
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开
- en: The `OnOpen` event determines that a new client has requested access and performs
    the initial handshake. We should add the client to the list and probably store
    any information related to it, such as the IP address. Fleck provides us with
    such information, as well as a unique identifier for the connection.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnOpen`事件确定了一个新的客户端请求访问并执行初始握手。我们应该将客户端添加到列表中，并可能存储与之相关的任何信息，比如IP地址。Fleck为我们提供了这样的信息，以及连接的唯一标识符。'
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Close
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭
- en: 'The `OnClose` event is raised whenever a client is disconnected. We can remove
    that client from our list and inform the rest of the clients about the disconnection:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnClose`事件在客户端断开连接时触发。我们可以从列表中删除该客户端，并通知其他客户端有人断开连接：'
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Message
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息
- en: 'The `OnMessage` event is raised when a client sends data to the server. Inside
    this event handler, we can transmit the incoming message to all of the clients,
    or probably select only some of them. The process is straightforward. Note that
    this handler takes a string named `message` as a parameter:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnMessage`事件在客户端向服务器发送数据时触发。在此事件处理程序内，我们可以将传入的消息传输给所有客户端，或者可能只选择其中一些。这个过程很简单。请注意，此处理程序接受名为`message`的字符串作为参数：'
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Send
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送
- en: 'The `Send()` method simply transmits the desired message to the specified client.
    Using `Send()`, we can deliver text or binary data across the clients. Let''s
    loop through the registered clients and transfer the messages to them. We need
    to modify the `OnMessage` event as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Send()`方法简单地将所需的消息传输给指定的客户端。使用`Send()`，我们可以在客户端之间传递文本或二进制数据。让我们遍历注册的客户端并将消息传递给他们。我们需要修改`OnMessage`事件如下：'
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Obviously, you do not need to expose everyone's IP address or ID publicly! It's
    totally useless and makes no sense for your users (unless they are hackers). Of
    course, during a real chat conversation, users pick nicknames instead of string
    literals. We'll give them the nickname option in the next chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您不需要公开每个人的IP地址或ID！这对您的用户来说完全没有意义，除非他们是黑客。当然，在真正的聊天对话中，用户选择昵称而不是字符串文字。我们将在下一章中为他们提供昵称选项。
- en: Fleck accepts strings and byte arrays. Strings contain plain text, XML, or JSON
    messages. Byte arrays are handful when dealing with images or binary files.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Fleck接受字符串和字节数组。字符串包含纯文本、XML或JSON消息。字节数组在处理图像或二进制文件时非常有用。
- en: Other methods
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他方法
- en: Depending on which WebSocket server implementation you use, there might be additional
    events or methods. For example, Fleck supports the `OnBinary` event, which is
    a binary-supporting equivalent of the `OnMessage` event.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您使用的WebSocket服务器实现，可能会有额外的事件或方法。例如，Fleck支持`OnBinary`事件，这是`OnMessage`事件的二进制支持等价物。
- en: Keep in mind that the web server stores the connections in a list and we need
    to loop through all of them in order to send messages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Web服务器将连接存储在列表中，我们需要遍历所有连接以发送消息。
- en: The complete source code
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整的源代码
- en: Here is the complete server-side source code, with a couple of extra additions
    for better user experience. The screenshots display a Chrome and an Internet Explorer
    10 window chatting side-by-side!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的服务器端源代码，还有一些额外的添加以提供更好的用户体验。截图显示了Chrome和Internet Explorer 10窗口并排聊天！
- en: 'The following screenshot shows a user chatting using Chrome:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用Chrome进行聊天的用户：
- en: '![The complete source code](img/6962_03_02.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![完整的源代码](img/6962_03_02.jpg)'
- en: 'The following screenshot shows a second user chatting concurrently using Internet
    Explorer 10:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用Internet Explorer 10同时进行聊天的第二个用户：
- en: '![The complete source code](img/6962_03_03.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![完整的源代码](img/6962_03_03.jpg)'
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By now, you should be able to create a complete WebSocket application! [Chapter
    2](ch02.html "Chapter 2. The WebSocket API"), *The WebSocket API*, illustrated
    how to configure a client using JavaScript and this chapter showed you how you
    can configure a WebSocket server using the environment and programming language
    you are most familiar with. Moreover, we had a look at the WebSocket server events
    and actions. In the upcoming chapters, we are going to learn how we can effectively
    handle different data formats and secure our WebSocket-based apps.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够创建一个完整的WebSocket应用程序！《第2章》*WebSocket API*，介绍了如何使用JavaScript配置客户端，而本章则向您展示了如何使用您最熟悉的环境和编程语言配置WebSocket服务器。此外，我们还研究了WebSocket服务器事件和操作。在接下来的章节中，我们将学习如何有效处理不同的数据格式并保护我们基于WebSocket的应用程序。
