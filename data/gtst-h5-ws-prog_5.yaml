- en: Chapter 5. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 安全
- en: Security is a crucial issue for web applications that exchange data. Every site
    or app that lives and breathes in the web is subject to attack by human or robot
    invaders. It's a sad but true reality, and we all have to live with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全对于交换数据的Web应用程序来说是一个至关重要的问题。每个在网络中生存和发展的站点或应用程序都可能受到人类或机器入侵者的攻击。这是一个令人沮丧但却真实存在的现实，我们都必须接受。
- en: Of course, this does not mean that your web apps are totally unsafe. Fortunately,
    the native HTML5 security mechanisms protect you from the most common security
    attacks without any configuration. Moreover, the WebSocket protocol is designed
    to be a secure service, so a basic protection is guaranteed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不意味着您的Web应用是完全不安全的。幸运的是，原生HTML5安全机制可以在不进行任何配置的情况下保护您免受最常见的安全攻击。此外，WebSocket协议旨在成为一个安全服务，因此基本的保护是有保障的。
- en: In this chapter, we are going to present some known security risks a WebSocket
    app may have, and also provide you with the tools and knowledge to prevent, confront,
    and overcome them, in favor of your users.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍WebSocket应用可能存在的一些已知安全风险，并为您提供工具和知识，以防止、对抗和克服这些风险，以保护您的用户。
- en: WebSocket headers
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket标头
- en: You normally don't shake hands with an unknown person or with someone who does
    not want to reveal his/her identity. In the WebSocket world, you need to be sure
    about the origin of the request. The **origin** is a header sent from the client
    and is essential for cross-domain communication, as it allows the web server to
    reject specific connections. Origin is the first and the most important security
    aspect introduced and documented in WebSockets.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您不会与一个不认识的人或不愿透露身份的人握手。在WebSocket世界中，您需要确保请求的来源。**来源**是客户端发送的一个标头，对于跨域通信至关重要，因为它允许Web服务器拒绝特定的连接。来源是WebSocket中引入和记录的第一个也是最重要的安全方面。
- en: There are a couple more headers required to allow a client upgrade to the WebSocket
    protocol. Such headers begin with a `Sec-` prefix and guarantees that every WebSocket
    request will be initialized via the WebSocket constructor, rather than any HTTP
    APIs, which might want to access the exchanged information.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要一些额外的标头才能允许客户端升级到WebSocket协议。这些标头以`Sec-`前缀开头，并保证每个WebSocket请求都将通过WebSocket构造函数初始化，而不是任何可能要访问交换信息的HTTP
    API。
- en: 'The following is an example of WebSocket header sent from a client:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是客户端发送的WebSocket标头的示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `Sec-WebSocket-Version` parameter can help you identify the browser used.
    Take care if you need specific tweaks for specific browsers. The corresponding
    handshake from the server should look as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sec-WebSocket-Version`参数可以帮助您识别所使用的浏览器。如果您需要针对特定浏览器进行特定调整，请注意。服务器的相应握手应如下所示：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are interested in more theoretical details, feel free to read the complete
    specification of RFC 6455 at [http://tools.ietf.org/html/rfc6455](http://tools.ietf.org/html/rfc6455).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对更多理论细节感兴趣，请随时阅读RFC 6455的完整规范[http://tools.ietf.org/html/rfc6455](http://tools.ietf.org/html/rfc6455)。
- en: Common attacks
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见攻击
- en: Currently, what you need to know is that the protocol is designed to be as secure
    as possible. Be careful though! WebSocket is a brand-new protocol and not all
    web browsers implement it correctly. For example, some of them still allow the
    mix of HTTP and WS, although the specification implies the opposite. Everything
    is subject to change, and while waiting for the browsers to mature, you can easily
    adopt some protection techniques yourself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您需要知道的是，该协议旨在尽可能安全。不过要小心！WebSocket是一个全新的协议，而并非所有的Web浏览器都正确实现了它。例如，其中一些仍允许HTTP和WS的混合使用，尽管规范暗示相反。一切都可能发生变化，而在等待浏览器成熟的同时，您可以轻松地自行采用一些保护技术。
- en: So, the old-school problems are not solved. Remember those bad people who sniffed
    the HTTP and intercepted into the web traffic? Well, the WS can be sniffed the
    same way.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，老式的问题并没有得到解决。还记得那些窃听HTTP并拦截网络流量的坏人吗？嗯，WS也可以被同样的方式窃听。
- en: Here are some common security attacks you need to be aware of, and consequently,
    some ways you can protect your app and your users.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您需要注意的一些常见安全攻击，以及因此您可以保护您的应用程序和用户的一些方法。
- en: Denial of Service
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拒绝服务
- en: '**Denial of Service** (**DoS**) attacks attempt to make a machine or network
    resource unavailable to the users that request it. Imagine that someone makes
    an infinite number of requests to a web server with no or tiny time intervals.
    Obviously, the server won''t be able to handle every connection and will either
    stop responding or will keep responding too slowly. That''s the simplest form
    of a DoS attack.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）攻击试图使机器或网络资源对请求它的用户不可用。想象一下，有人以无限次数的请求以极短的时间间隔向Web服务器发出请求。显然，服务器无法处理每个连接，要么停止响应，要么响应过慢。这是DoS攻击的最简单形式。'
- en: There is no need to mention how frustrating this might be for the end-users,
    who could not even load a web page.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无需多言，这对最终用户来说可能是多么令人沮丧，他们甚至无法加载一个网页。
- en: DoS attack can even apply on peer-to-peer communications, forcing the clients
    of a P2P network to concurrently connect to the victim web server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: DoS攻击甚至可以应用于点对点通信，迫使P2P网络的客户端同时连接到受害的Web服务器。
- en: 'The following figure describes a DoS attack:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图描述了DoS攻击：
- en: '![Denial of Service](img/6962OS_05_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![拒绝服务](img/6962OS_05_01.jpg)'
- en: DoS attack
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DoS攻击
- en: Man-in-the-middle
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: Suppose you are chatting with your girlfriend via an IM client. Her ex-boyfriend
    wants to view the messages you exchange, so he makes independent connections with
    both of you and sniffs your messages. He also sends messages to you and your girlfriend,
    as an invisible intermediate to your communication. That is known as a man-in-the-middle
    attack. The man-in-the-middle kind of attack is easier for unencrypted connections,
    as the intruder can read the packages directly. When the connection is encrypted,
    the information has to be decrypted by the attacker, which might be way too difficult.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在通过即时通讯客户端与女友聊天。她的前男友想要查看您交换的消息，因此他与您两个独立建立连接，并窃听您的消息。他还向您和您的女友发送消息，作为您通信的隐形中间人。这就是所谓的中间人攻击。中间人攻击更容易发生在未加密的连接上，因为入侵者可以直接读取数据包。当连接加密时，信息必须由攻击者解密，这可能会非常困难。
- en: From a technical aspect, the attacker intercepts a public-key message exchange
    and sends the message while replacing the requested key with his own.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，攻击者拦截公钥消息交换并发送消息，同时用自己的密钥替换请求的密钥。
- en: Obviously, a solid strategy to make the attacker's job difficult is to use SSH
    with WebSockets. Mostly when exchanging critical data, prefer the WSS secure connection
    instead of the unencrypted WS.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，使攻击者的工作变得困难的一个坚实策略是使用带有WebSockets的SSH。在交换关键数据时，最好使用WSS安全连接，而不是未加密的WS。
- en: 'The following figure describes how the spy interferes and acquires data:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了间谍如何干扰和获取数据：
- en: '![Man-in-the-middle](img/6962OS_05_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![中间人攻击](img/6962OS_05_02.jpg)'
- en: Man-in-the-middle attack
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 中间人攻击
- en: XSS
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XSS
- en: '**Cross-site scripting** (**XSS**) is a vulnerability that enables attackers
    to inject client-side scripts into web pages or applications. An attacker can
    send HTML or JavaScript code using your application hubs and let this code be
    executed on the clients'' machines.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本**（**XSS**）是一种漏洞，使攻击者能够将客户端脚本注入到网页或应用程序中。攻击者可以使用您的应用程序中心发送HTML或JavaScript代码，并让该代码在客户端机器上执行。'
- en: 'You may encounter the simplest form of an XSS attack when filling a web form.
    Imagine that someone sends the following data using the chat application we developed:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当填写网页表单时，您可能会遇到最简单形式的XSS攻击。想象一下，有人使用我们开发的聊天应用程序发送了以下数据：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Try it out! Type the preceding lines in the message text field, click on **Send**
    and wait for the result.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 试一下！在消息文本字段中输入上述行，点击**发送**，并等待结果。
- en: 'The following image shows an XSS attack to our WebSocket chat application:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了对我们的WebSocket聊天应用程序的XSS攻击：
- en: '![XSS](img/6962OS_05_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![XSS](img/6962OS_05_03.jpg)'
- en: Although the image transmission is not at all bad during a chat application,
    the user sent the image by injecting HTML code. In a similar way, somebody could
    execute JavaScript code and harm the conversation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在聊天应用程序中图像传输并不坏，但用户通过注入HTML代码发送了图像。以类似的方式，某人可能会执行JavaScript代码并损害对话。
- en: What can we do? Taking into consideration the old rules about XSS attacks still
    works and is the best practice. Things you can do are checking your code for HTML
    entities or JavaScript syntax, and replacing them with the appropriate representation
    or simply rejecting them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做些什么？考虑到关于XSS攻击的旧规则仍然有效并且是最佳实践。您可以检查您的代码中的HTML实体或JavaScript语法，并用适当的表示形式替换它们，或者简单地拒绝它们。
- en: '[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)
    contains a lot more information if you want to learn every aspect of XSS attacks,
    and how to avoid them.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)
    包含了更多信息，如果您想了解XSS攻击的各个方面以及如何避免它们。'
- en: WebSocket native defence mechanisms
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket本地防御机制
- en: By default, the WebSocket protocol is designed to be secure. In the real world,
    you might encounter various issues that might occur due to poor browser implementation.
    No need to worry though. As time goes by, browser vendors fix any issues immediately,
    and if you still feel afraid, you can always use some old-school fallback techniques
    (described in the next chapter).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WebSocket协议设计为安全的。在现实世界中，您可能会遇到由于浏览器实现不佳而可能发生的各种问题。不过不用担心。随着时间的推移，浏览器供应商会立即修复任何问题，如果您仍然感到害怕，您总是可以使用一些老式的回退技术（在下一章中描述）。
- en: SSH/TLS
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSH/TLS
- en: As you have probably guessed, an extra layer of security is added when you use
    secure WebSocket connection over SSH (or TLS). Remember when you needed to decide
    between HTTP and HTTPS? You picked HTTPS only when it was absolutely necessary
    for your transactions (for example, bank account information, private data, and
    so on). Otherwise, HTTP was the way to go, as it is more lightweight and fast.
    HTTPS required more CPU resources and was quite slower than HTTP.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的那样，当您在SSH（或TLS）上使用安全的WebSocket连接时，会增加一层额外的安全性。还记得当您需要在HTTP和HTTPS之间做出决定吗？只有在绝对必要时才选择HTTPS进行交易（例如，银行账户信息，私人数据等）。否则，HTTP是更轻量级和更快速的选择。HTTPS需要更多的CPU资源，比HTTP慢得多。
- en: In the WebSocket world, you do not need to worry about the performance of a
    secure connection. Although there is still an extra TLS layer on top, the protocol
    itself contains optimizations for this kind of use, furthermore, WSS works more
    sleekly through proxies.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在WebSocket世界中，您不需要担心安全连接的性能。尽管顶部仍然有额外的TLS层，但协议本身包含了针对这种用途的优化，此外，WSS通过代理更加流畅。
- en: Client-to-Server masking
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端到服务器的掩码
- en: Every message transmitted between a WebSocket server and a WebSocket client
    contains a specific key, named **masking key**, which allows any WebSocket-compliant
    intermediaries to unmask and inspect the message. If the intermediary is not WebSocket-compliant,
    then the message cannot be affected. Masking is handled by the browser that implements
    the WebSocket protocol.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket服务器和WebSocket客户端之间传输的每条消息都包含一个名为**掩码密钥**的特定密钥，这允许任何符合WebSocket标准的中间人解除掩码并检查消息。如果中间人不符合WebSocket标准，则消息不会受到影响。掩码由实现WebSocket协议的浏览器处理。
- en: Security toolbox
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全工具箱
- en: Finally, we present some useful tools that help you investigate the flow of
    information between your WebSocket clients and server, analyze the exchanged data,
    and identify possible risks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍了一些有用的工具，帮助您调查WebSocket客户端和服务器之间信息流动，分析交换的数据，并识别可能的风险。
- en: Fiddler
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fiddler
- en: '**Fiddler** is a great tool for monitoring the network activity and inspecting
    the traffic of any incoming or outgoing data.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fiddler**是一个很棒的工具，用于监视网络活动并检查任何传入或传出数据的流量。'
- en: 'The following screenshot shows fiddler in action, displaying the WebSocket
    headers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了fiddler的操作，显示了WebSocket的标头：
- en: '![Fiddler](img/6962OS_05_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Fiddler](img/6962OS_05_04.jpg)'
- en: Fiddler can be downloaded from [http://www.fiddler2.com/fiddler2/](http://www.fiddler2.com/fiddler2/)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Fiddler可以从[http://www.fiddler2.com/fiddler2/](http://www.fiddler2.com/fiddler2/)下载
- en: Wireshark
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Wireshark
- en: '**Wireshark** is a network packet analyzer that captures the packages and displays
    their data as accurately as possible.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wireshark**是一个网络数据包分析器，捕获数据包并尽可能准确地显示其数据。'
- en: 'The following screenshot shows wireshark in action:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了wireshark的操作：
- en: '![Wireshark](img/6962OS_05_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Wireshark](img/6962OS_05_05.jpg)'
- en: Wireshark can be downloaded from [http://www.wireshark.org/](http://www.wireshark.org/)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark可以从[http://www.wireshark.org/](http://www.wireshark.org/)下载
- en: Browser developer tools
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器开发者工具
- en: Chrome, Firefox, and Opera are great browsers in terms of developer support.
    Their built-in tools help us determine almost any aspect of client-side interactions
    and resources.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome，Firefox和Opera在开发者支持方面是很棒的浏览器。它们内置的工具帮助我们确定几乎任何客户端交互和资源的方面。
- en: 'The following screenshot shows Chrome developer tools in action:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Chrome开发者工具的操作：
- en: '![Browser developer tools](img/6962OS_05_06.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器开发者工具](img/6962OS_05_06.jpg)'
- en: ZAP
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ZAP
- en: '**ZAP** is a penetration-testing tool for finding vulnerabilities throughout
    your web apps and sites, by performing an attack on them! Like all the preceding
    tools, ZAP comes with a handy GUI visualization.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**ZAP**是一个渗透测试工具，通过对Web应用程序和站点进行攻击，发现它们的漏洞！与所有先前的工具一样，ZAP带有方便的GUI可视化。'
- en: 'The following screenshot shows ZAP in action:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了ZAP的操作：
- en: '![ZAP](img/6962OS_05_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![ZAP](img/6962OS_05_07.jpg)'
- en: ZAP can be downloaded from [https://code.google.com/p/zaproxy/](https://code.google.com/p/zaproxy/)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ZAP可以从[https://code.google.com/p/zaproxy/](https://code.google.com/p/zaproxy/)下载
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you investigated various security threats your web apps must
    be aware of, saw the built-in WebSocket security mechanism, and presented some
    popular tools that help us manage the network transfers better. Next, we are going
    to describe some fallback techniques for browsers that lack full or partial WebSocket
    support.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您调查了您的Web应用程序必须意识到的各种安全威胁，看到了内置的WebSocket安全机制，并介绍了一些流行的工具，帮助我们更好地管理网络传输。接下来，我们将描述一些针对缺乏完整或部分WebSocket支持的浏览器的备用技术。
