- en: Chapter 7. Going Mobile (and Tablet, Too)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。进入移动（还有平板）
- en: WebSockets, as their name implies, is something that uses the web. The web is
    usually interwoven with browser pages because that's the primary means of displaying
    data online. However, non-browser programs too use online data transmission. The
    release of the iPhone (initially) and the iPad (later) introduced a brand new
    world of web interconnectivity without necessarily using a web browser. Instead,
    the new smartphone and tablet devices utilized the power of native apps to offer
    a unique user experience.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets，顾名思义，是使用网络的东西。网络通常与浏览器页面交织在一起，因为这是显示在线数据的主要手段。然而，非浏览器程序也使用在线数据传输。iPhone（最初）和iPad（后来）的发布引入了一个全新的网络互联世界，而不一定需要使用网络浏览器。相反，新的智能手机和平板设备利用原生应用程序的力量提供了独特的用户体验。
- en: Why mobile matters
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么移动设备很重要
- en: Currently, there are one billion active smartphones out there. That is, millions
    of potential customers for your applications. Those people use their mobile phone
    to accomplish daily tasks, surf the Internet, communicate, or shop.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，全球有十亿部活跃的智能手机。也就是说，有数百万潜在的应用程序客户。这些人使用他们的手机来完成日常任务、上网、交流或购物。
- en: Smartphones have become synonymous to apps, and nowadays, there is an app for
    any usage you can think of. Most of the apps connect to the Internet in order
    to retrieve data, make transactions, gather news, and so on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机已经成为应用程序的代名词，如今，几乎任何用途都有相应的应用程序。大多数应用程序连接到互联网以检索数据，进行交易，收集新闻等。
- en: Wouldn't it be great if you were able to use your existing WebSocket knowledge
    and develop a WebSocket client running natively on a smartphone or tablet device?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能够利用现有的WebSocket知识并开发在智能手机或平板设备上本地运行的WebSocket客户端，那将是多么美妙啊！
- en: Native mobile app versus mobile website
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原生移动应用与移动网站
- en: Well, this is a common conflict and as usual, the answer depends on your needs
    and your target audience. If you are familiar with the modern design trends, designing
    a website that is responsive and mobile friendly, is now a must. However, you
    should be sure that the content, which is what really matters, is equally accessible
    via a smartphone, as it is via a classic desktop browser.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是一个常见的冲突，通常情况下，答案取决于您的需求和目标受众。如果您熟悉现代设计趋势，设计一个响应式和移动友好的网站现在是必须的。然而，您应该确保内容，也就是真正重要的东西，通过智能手机和经典桌面浏览器同样可以访问。
- en: Definitely, a WebSocket web app will run on any HTML5-compliant browser, including
    mobile browsers such as Safari for iOS and Chrome for mobile. So, no need to worry
    about compatibility issues on modern smartphones.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，WebSocket网络应用程序将在任何符合HTML5标准的浏览器上运行，包括iOS的Safari和移动设备的Chrome。因此，在现代智能手机上不需要担心兼容性问题。
- en: What happens though if your app utilizes device-specific information such as
    offline storage, GPS, notifications, or accelerometers, along with WebSockets?
    You need a more native implementation in a language other than HTML and JavaScript.
    W3C is defining some specifications that will let the client access hardware such
    as camera, GPS, and accelerometer. However, only a minority of modern web browsers
    currently support such specifications. At the time of writing, a native approach
    is the way to go, though the client-side future seems way more interesting! iOS
    uses Objective-C, Android uses Java, and Windows Phone uses C#. If you think that
    your mobile use-case scenario does not utilize any of the smartphone goodies,
    feel free to go with the browser-based app. If native functionality is required,
    then a native solution is necessary. That's exactly what are we going to build
    in this chapter!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的应用程序利用设备特定信息，如离线存储、GPS、通知或加速计，以及WebSockets，您需要使用除HTML和JavaScript之外的更本地的实现语言。W3C正在定义一些规范，让客户端可以访问摄像头、GPS和加速计等硬件。然而，目前只有少数现代网络浏览器支持这些规范。在撰写本文时，本地方法是前进的道路，尽管客户端的未来似乎更加有趣！iOS使用Objective-C，Android使用Java，Windows
    Phone使用C#。如果您认为您的移动使用情景不需要利用智能手机的任何功能，可以选择基于浏览器的应用程序。如果需要原生功能，则需要原生解决方案。这正是我们将在本章中构建的内容！
- en: Prerequisites
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: In order to develop a smartphone app, you need to install the development tools
    and SDKs of your preferred target. The philosophy behind the examples we'll demonstrate
    is fundamentally the same in the three major mobile operating systems, that is,
    iOS, Android, and Windows.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发智能手机应用程序，您需要安装首选目标的开发工具和SDK。我们将演示的示例背后的哲学在三大主要移动操作系统中基本相同，即iOS、Android和Windows。
- en: 'If you do not already have a mobile SDK installed, here is where you can pick
    one (they are all free):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装移动SDK，请在以下位置选择一个（它们都是免费的）：
- en: '| Platform | Targets | SDK URL |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 平台 | 目标 | SDK网址 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| iOS | iPhone, iPad | [https://developer.apple.com/devcenter/ios/](https://developer.apple.com/devcenter/ios/)
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| iOS | iPhone, iPad | [https://developer.apple.com/devcenter/ios/](https://developer.apple.com/devcenter/ios/)
    |'
- en: '| Android | Android phones & tablets | [http://developer.android.com/sdk/](http://developer.android.com/sdk/)
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| Android | Android手机和平板 | [http://developer.android.com/sdk/](http://developer.android.com/sdk/)
    |'
- en: '| Windows | Windows Phone, Windows 8 | [http://developer.windowsphone.com/
    develop](http://developer.windowsphone.com/ develop)&[http://msdn.microsoft.com/
    windows/apps](http://msdn.microsoft.com/ windows/apps) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| Windows | Windows Phone, Windows 8 | [http://developer.windowsphone.com/
    develop](http://developer.windowsphone.com/ develop)&[http://msdn.microsoft.com/
    windows/apps](http://msdn.microsoft.com/ windows/apps) |'
- en: We suppose that you are familiar with at least one of the above SDKs and technologies.
    If not, you can navigate to the corresponding developer portal, and follow the
    online resources and tutorials, which provide a great starting point.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您至少熟悉上述SDK和技术之一。如果不熟悉，您可以转到相应的开发者门户网站，并按照在线资源和教程进行操作，这将为您提供一个很好的起点。
- en: Throughout this chapter, we have decided to provide code samples for iOS, but
    feel free to use the platform you are most familiar with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们决定为iOS提供代码示例，但请随意使用您最熟悉的平台。
- en: Installing the SDK
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装SDK
- en: 'After downloading the desired SDK, you follow an automated wizard that installs
    it in your system. Note that the iOS SDK can only run on a Mac operating system,
    the Windows SDK runs on a Windows operating system, and the Android SDK runs on
    Mac, Windows, or Linux. Along with the SDK, there are a couple of automatically
    installed goodies:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下载所需的SDK后，您将按照自动化向导的步骤在系统中安装它。请注意，iOS SDK只能在Mac操作系统上运行，Windows SDK在Windows操作系统上运行，Android
    SDK在Mac、Windows或Linux上运行。除了SDK，还有一些自动安装的好东西：
- en: Smartphone/tablet simulators
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能手机/平板电脑模拟器
- en: An integrated development environment where you write and debug your code
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个集成开发环境，您可以在其中编写和调试代码
- en: Although you should always test your code on real devices (phones and tablets),
    the simulator is a really solid solution for constant debugging.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您应该始终在真实设备（手机和平板电脑）上测试代码，但模拟器是一个非常可靠的持续调试解决方案。
- en: Considering iOS, here are the iPhone and iPad simulators, running iOS 6.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到iOS，这里有iPhone和iPad模拟器，运行iOS 6。
- en: 'The following figure shows an iPhone simulator:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个iPhone模拟器：
- en: '![Installing the SDK](img/6962OS_07_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![安装SDK](img/6962OS_07_01.jpg)'
- en: 'The following figure shows an iPad simulator:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一个iPad模拟器：
- en: '![Installing the SDK](img/6962OS_07_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![安装SDK](img/6962OS_07_02.jpg)'
- en: Testing our existing code in the mobile browser
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在移动浏览器中测试我们现有的代码
- en: Remember the HTML and JavaScript code we wrote back in [Chapter 2](ch02.html
    "Chapter 2. The WebSocket API"), *The WebSocket API*? Having the SDK and simulators
    installed, we can access the web using the mobile browser included in the simulator.
    We can also access our local HTML, CSS, and JavaScript files without uploading
    them to a web server. Here is the chat client running pretty well on an iPad.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在[第2章](ch02.html "第2章 WebSocket API")中编写的HTML和JavaScript代码吗，*WebSocket
    API*？安装了SDK和模拟器后，我们可以使用模拟器中包含的移动浏览器访问网络。我们还可以访问本地的HTML、CSS和JavaScript文件，而无需将它们上传到Web服务器。这是一个在iPad上运行良好的聊天客户端。
- en: 'The following image shows WebSocket web app on Safari for iOS (no modifications
    in code):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了Safari上的iOS WebSocket web应用（代码没有修改）：
- en: '![Testing our existing code in the mobile browser](img/6962OS_07_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![在移动浏览器中测试我们现有的代码](img/6962OS_07_03.jpg)'
- en: Going native
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原生方式
- en: So, what if your application supports device-specific or offline features, and
    you still want to use WebSockets when the web is available?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果您的应用程序支持特定设备或离线功能，并且仍希望在网络可用时使用WebSockets呢？
- en: You go native.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用原生方式。
- en: Fortunately, all of the major mobile platforms support WebSockets, so you need
    to make absolutely no changes in your server code! After all, HTML5 is a front-end
    client just like iPhone or iPad. Using the same techniques as the JavaScript samples,
    you are going to build the same application in Objective-C. The process is similar
    to any other mobile platform, so do not worry if you are not familiar with the
    Objective-C concept.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，所有主要的移动平台都支持WebSockets，因此您无需对服务器代码进行任何更改！毕竟，HTML5就像iPhone或iPad一样是一个前端客户端。使用与JavaScript示例相同的技术，您将使用Objective-C构建相同的应用程序。这个过程与任何其他移动平台类似，所以如果您对Objective-C概念不熟悉，也不用担心。
- en: Creating the project
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: To begin with, open **XCode**, the development environment provided by Apple
    for building iOS apps. Eclipse and Visual Studio are the Android and Windows equivalents.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开**XCode**，这是苹果提供的用于构建iOS应用的开发环境。Eclipse和Visual Studio是Android和Windows的等价物。
- en: Follow the given steps for creating the project
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的步骤创建项目
- en: Launch XCode and click on **Create a new XCode project**. The following screenshot
    shows XCode launch screen:![Creating the project](img/6962OS_07_04.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动XCode，然后点击**创建新的XCode项目**。以下截图显示了XCode的启动画面：![创建项目](img/6962OS_07_04.jpg)
- en: Create a single view application. Provide a name, along with company and organization
    identifiers if you want to. For example, name the app `WebSocketsMobile`. Then,
    select a local folder to place it into, as shown in the following screenshot:![Creating
    the project](img/6962OS_07_05.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单视图应用程序。提供一个名称，以及公司和组织标识符（如果需要）。例如，将应用程序命名为`WebSocketsMobile`。然后，选择一个本地文件夹放置它，如下图所示：![创建项目](img/6962OS_07_05.jpg)
- en: Creating the WebSocket iPhone app
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建WebSocket iPhone应用
- en: If you need to deploy your app for production, you need to additionally specify
    some icons for the target platforms. We'll skip such stuff for now, but feel free
    to add any resources your app might require. XCode automatically creates some
    files for us. The storyboard files (one for iPhone and one for iPad) will let
    us create the user interface of our app and the `ViewController` file will handle
    all the programming logic.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为生产部署应用程序，还需要为目标平台指定一些图标。我们现在将跳过这些内容，但请随意添加应用程序可能需要的任何资源。XCode会自动为我们创建一些文件。故事板文件（一个用于iPhone，一个用于iPad）将让我们创建应用程序的用户界面，`ViewController`文件将处理所有编程逻辑。
- en: 'The following screenshot shows the initial UI of our iPhone app:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们iPhone应用的初始UI：
- en: '![Creating the WebSocket iPhone app](img/6962OS_07_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![创建WebSocket iPhone应用](img/6962OS_07_06.jpg)'
- en: Add some controls to the user interface builder. For learning purposes, we'll
    try to keep it simple and only add `UITextField` for writing a message, a button
    for sending the message, and `UILabel` for displaying the chat messages. Remember
    to set the number of lines of the label to 0 (that is, infinite). Do not forget
    to connect the outlets with **View Controller,** using the assistant editor ([http://www.techotopia.com/index.php/Establishing_Outlets_and_Actions_using_the_Xcode_Assistant_Editor).](http://www.techotopia.com/index.php/Establishing_Outlets_and_Actions_using_the_Xcode_Assistant_Editor).)The
    following screenshot shows the iPhone app user interface:![Creating the WebSocket
    iPhone app](img/6962OS_07_07.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户界面构建器中添加一些控件。为了学习目的，我们将尽量保持简单，只添加一个用于编写消息的`UITextField`，一个用于发送消息的按钮，以及一个用于显示聊天消息的`UILabel`。记得将标签的行数设置为0（即无限）。不要忘记使用助理编辑器将输出连接到**视图控制器**，（[http://www.techotopia.com/index.php/Establishing_Outlets_and_Actions_using_the_Xcode_Assistant_Editor).](http://www.techotopia.com/index.php/Establishing_Outlets_and_Actions_using_the_Xcode_Assistant_Editor).)下面的截图显示了iPhone应用程序的用户界面：![创建WebSocket
    iPhone应用程序](img/6962OS_07_07.jpg)
- en: Download the `UnittWebSocketClient` library and include it in your project.
    This library handles most of the WebSocket functionality. You can pick another
    one or implement your own. Follow the directions specified at [https://code.google.com/p/unitt/wiki/UnittWebSocketClient](https://code.google.com/p/unitt/wiki/UnittWebSocketClient).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`UnittWebSocketClient`库并将其包含在项目中。该库处理大部分WebSocket功能。您可以选择另一个库或者实现自己的库。按照[https://code.google.com/p/unitt/wiki/UnittWebSocketClient](https://code.google.com/p/unitt/wiki/UnittWebSocketClient)中指定的方向进行操作。
- en: 'Include the header files of the library in your project and specify your View
    Controller as a `WebSocketDelegate`. Then subscribe for the corresponding events,
    which are identical to the JavaScript ones:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中包含库的头文件，并将您的视图控制器指定为`WebSocketDelegate`。然后订阅相应的事件，这些事件与JavaScript的事件相同：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is now time to populate the methods, as we did in the JavaScript samples.
    Here''s what you need to do in order to set the app up and running:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候填充方法了，就像我们在JavaScript示例中所做的那样。以下是设置应用程序并运行所需做的事情：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The following figure shows the native iOS WebSocket client up-and-running!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了本机iOS WebSocket客户端正在运行！
- en: '![Creating the WebSocket iPhone app](img/6962OS_07_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![创建WebSocket iPhone应用程序](img/6962OS_07_08.jpg)'
- en: What about the iPad?
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iPad怎么样呢？
- en: Although the app you created would run pretty fine on iPad devices, it is always
    better to provide a different interface for tablets. Simply navigate to the `MainStoryboard_iPad.storyboard`
    file, rearrange the UI elements, and provide tablet-specific functionality. Then,
    select the project targets and, while in the Summary tab, expand the `iPad Deployment
    Info` option and ensure that `MainStoryboard_iPad` is selected. You can select
    the iPhone storyboard if your app is not too complex or specify that the app target
    is iPhone only. This way, when someone runs your app on an iPad device, he/she
    will see a smaller screen centered in the iPad device.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您创建的应用程序在iPad设备上运行得很好，但最好为平板提供不同的界面。只需转到`MainStoryboard_iPad.storyboard`文件，重新排列UI元素，并提供特定于平板的功能。然后，选择项目目标，在摘要选项卡中展开`iPad部署信息`选项，并确保选择了`MainStoryboard_iPad`。如果您的应用程序不太复杂，可以选择iPhone
    storyboard，或者指定应用程序目标仅为iPhone。这样，当有人在iPad设备上运行您的应用程序时，他/她将在iPad设备上看到一个居中显示的较小屏幕。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we found out how WebSockets can act as a universal hub for
    transmitting messages between connected mobile and tablet clients. We implemented
    a native iOS application, which communicates with a WebSocket server just like
    the HTML5 JavaScript client.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了WebSockets如何可以作为在连接的移动和平板客户端之间传输消息的通用枢纽。我们实现了一个原生的iOS应用程序，它与一个WebSocket服务器进行通信，就像HTML5
    JavaScript客户端一样。
