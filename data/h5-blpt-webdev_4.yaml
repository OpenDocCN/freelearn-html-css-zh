- en: Chapter 4. Adding Interactivity and Completing Your Site
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。添加交互性并完成您的网站
- en: We have created the first cut of how the site will look. While the site looks
    pretty readable and navigable, making the interaction smoother would make it a
    significantly better experience.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了网站的第一个版本。虽然网站看起来非常可读和可导航，但使交互更加流畅将使其成为一个显著更好的体验。
- en: Using jQuery
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery
- en: As we saw in [Chapter 2](ch02.html "Chapter 2. Starting Your Project"), *Starting
    Your Project*, HTML5 Boilerplate provides a handy and safe way to load jQuery.
    With jQuery, it is vastly simple to work on writing scripts to access elements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.html "第2章。开始你的项目")中看到的，*开始你的项目*，HTML5 Boilerplate提供了一种方便且安全的方式来加载jQuery。使用jQuery，编写访问元素的脚本变得非常简单。
- en: If you are writing custom jQuery script either to kick off a plugin you are
    using or to do some small interaction, put it in the `main.js` file in the `js`
    folder.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在编写自定义的jQuery脚本，要么启动您正在使用的插件，要么执行一些小的交互，请将其放在`js`文件夹中的`main.js`文件中。
- en: Using other libraries
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用其他库
- en: If you are more comfortable using other libraries, you can also load and use
    them in a similar way to jQuery.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用其他库，您也可以以类似的方式加载和使用它们。
- en: 'The following is how we load jQuery:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们加载jQuery的方式：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let us say, you want to use another library (like MooTools), then look up the
    Google Libraries API to see if that library is available at `developers.google.com/speed/libraries/`.
    If it is available, just replace the reference with the appropriate reference
    from the site. For example, if we want to replace our jQuery link with a link
    to MooTools, we would simply replace the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想使用另一个库（如MooTools），然后查看Google Libraries API，看看该库是否可在`developers.google.com/speed/libraries/`上找到。如果可以找到，只需用该网站上的适当引用替换引用。例如，如果我们想用MooTools替换我们的jQuery链接，我们只需替换以下代码：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the following line of code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码行：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will also download Mootools'' minified file to the `js/vendor` folder locally
    and replace the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在本地的`js/vendor`文件夹中下载Mootools的压缩文件，并替换以下代码：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the following line of code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码行：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more information on why we use local copies of the code, please check [Chapter
    2](ch02.html "Chapter 2. Starting Your Project"), *Starting Your Project*. But
    we are pretty happy with our default choice of jQuery, so let us proceed with
    it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关为什么我们使用代码的本地副本的更多信息，请查看[第2章](ch02.html "第2章。开始你的项目")，*开始你的项目*。但是我们对我们默认选择的jQuery非常满意，所以让我们继续使用它。
- en: Adding smooth-scroll plugin and interaction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加平滑滚动插件和交互
- en: If you have not noticed it already, the website we are building is a single
    page site! All content that is required is found on the same page. The way our
    site is currently designed, it would mean clicking on one of the site navigation
    links would scroll roughly to the section that the navigation link refers to.
    We would like this interaction to be smooth. Let us use jQuery's smooth-scroll
    plugin to provide this.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有注意到，我们正在构建的网站是一个单页面网站！所需的所有内容都在同一页上找到。根据我们目前的网站设计，点击站点导航链接将大致滚动到导航链接所指的部分。我们希望这种交互是平滑的。让我们使用jQuery的平滑滚动插件来实现这一点。
- en: Let us download the plugin file from the Github repository, hosted on `github.com/kswedberg/jquery-smooth-scroll`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Github仓库下载插件文件，托管在`github.com/kswedberg/jquery-smooth-scroll`上。
- en: In it, we find a minimized version of the plugin (`jquery.smooth-scroll.min.js`)
    that we shall open in our text editor.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我们找到了插件的压缩版本（`jquery.smooth-scroll.min.js`），我们将在文本编辑器中打开它。
- en: Then copy all the code and paste it within the `plugins.js` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后复制所有代码并粘贴到`plugins.js`文件中。
- en: Let us add a class name `js-scrollitem` to let us distinguish that this element
    has a script that will be used on those elements. This way, there will be a lesser
    chance of accidentally deleting class names that are required for interactions
    prompted via JavaScript.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个类名`js-scrollitem`，以便我们可以区分这个元素是否有一个将在这些元素上使用的脚本。这样，意外删除通过JavaScript提示的交互所需的类名的机会将会更小。
- en: 'Now, we shall write the code to invoke this plugin in the `main.js` file. Open
    the `main.js` file in your text editor and type:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写代码在`main.js`文件中调用这个插件。在文本编辑器中打开`main.js`文件并输入：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will make all the clickable links that link to sections on the same page
    within the parent container with class `js-scrollitem` scroll smoothly with the
    help of the plugin. If we have used our HTML5 Boilerplate defaults correctly,
    adding this will be more than sufficient to get started with smooth scrolling.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使所有链接到同一页内具有`js-scrollitem`类的父容器的可点击链接通过插件平滑滚动。如果我们已经正确使用了HTML5 Boilerplate的默认设置，添加这个将足以开始平滑滚动。
- en: 'Next, we would like the navigation links in the line up section to open the
    right-hand side line up depending on which day was clicked on. Right now, in the
    following screenshot, it simply shows the line up for the first day, and does
    not do anything else:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们希望行程部分中的导航链接根据点击的日期打开右侧的行程。目前，在下面的截图中，它只显示了第一天的行程，没有做其他任何事情：
- en: '![Adding smooth-scroll plugin and interaction](img/8505_04_00.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![添加平滑滚动插件和交互](img/8505_04_00.jpg)'
- en: Let us continue editing the `main.js` file and add in the code that would enable
    this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续编辑`main.js`文件并添加启用此功能的代码。
- en: 'First, let''s add the class names that we will use to control the styling,
    and the hiding/showing behavior within our code. The code for this functionality
    is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们添加我们将用于控制样式和代码内部的隐藏/显示行为的类名。此功能的代码如下：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we shall write the code that will show the element we clicked on. This
    code is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写代码来显示我们点击的元素。这段代码如下：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By checking how we have done so far, we notice it keeps each day''s line up
    always visible and does not hide them once done! Let us add that too, as shown
    in the following code snippet:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查我们迄今为止所做的工作，我们注意到它始终保持每天的行程可见，并且完成后不会隐藏它们！让我们也添加这一点，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You would notice that the active tab navigation item still seems to suggest
    it is **Day 1**! Let us fix that by changing our code to do something similar
    with the tabbed navigation anchors, as shown in the following code snippet:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到活动标签导航项似乎仍然表明它是**第1天**！让我们通过更改我们的代码来修复这个问题，以便与选项卡导航锚点类似，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Bingo! We have our day-by-day line up ready. We now need to ensure our Google
    Maps `iframe` renders when users click on the **Locate on a map** link. We also
    want to use the same link to hide the map if the users want to do so.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经准备好按天排列了。现在我们需要确保当用户单击**在地图上查找**链接时，我们的Google Maps `iframe`会呈现。我们还希望使用相同的链接来隐藏地图，如果用户想要这样做的话。
- en: 'First, we add some identifiable features to the anchor element used to trigger
    the showing/hiding of map and the `iframe` for the maps, as shown in the following
    code snippet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为用于触发地图显示/隐藏和地图的`iframe`的锚元素添加一些可识别的特征，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we use the following JavaScript to trigger the link:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下JavaScript来触发链接：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, let us look at how we can make our audio player work on all browsers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使我们的音频播放器在所有浏览器上工作。
- en: Adding HTML5 features safely with Modernizr
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Modernizr安全添加HTML5功能
- en: We looked at Modernizr briefly in [Chapter 1](ch01.html "Chapter 1. Before We
    Begin"), *Before We Begin*, but we haven't used it for anything much yet. It is
    highly recommended that we create a custom build of Modernizr. HTML5 Boilerplate
    comes with a custom build of Modernizr that includes every option available in
    the custom builder (`modernizr.com/download/`) including extras such as HTML5Shiv,
    resource loader (`modernizr.load`), media queries test, and the addition of CSS
    class names to the `html` tag based on the test results from Modernizr.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html "第1章.开始之前")中简要介绍了Modernizr，*开始之前*，但我们还没有为它做过太多事情。强烈建议我们创建一个自定义的Modernizr构建。HTML5
    Boilerplate附带了一个Modernizr的自定义构建，其中包括自定义构建器（`modernizr.com/download/`）中的所有选项，包括额外的功能，如HTML5Shiv、资源加载器（`modernizr.load`）、媒体查询测试，并根据Modernizr的测试结果向`html`标签添加CSS类名。
- en: The custom build of Modernizr enables HTML5 elements in IE (read more about
    it at `paulirish.com/2011/the-history-of-the-html5-shiv/`). But, now, with our
    audio player, we have the opportunity to use the other Modernizr function that
    is available as an extra, that is, `modernizr.load`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Modernizr的自定义构建在IE中启用了HTML5元素（在`paulirish.com/2011/the-history-of-the-html5-shiv/`中了解更多信息）。但是，现在，通过我们的音频播放器，我们有机会使用另一个作为额外功能可用的Modernizr函数，即`modernizr.load`。
- en: Audio support in browsers is not as simple as we would expect it to be. Different
    browsers expect different formats because of licensing restrictions. Some browsers
    do not even support HTML5 audio. It would be perfect to use a framework that abstracts
    away all these for us. Looking at `html5please.com`, we see that the recommended
    suggestion is to use a framework called `mediaelement.js` to help us deal with
    these issues.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的音频支持并不像我们期望的那样简单。由于许可限制，不同的浏览器期望不同的格式。一些浏览器甚至不支持HTML5音频。使用一个可以为我们抽象出所有这些问题的框架将是完美的。在`html5please.com`上看到，推荐建议是使用一个名为`mediaelement.js`的框架来帮助我们处理这些问题。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`html5please.com` is a site that tells you which of these new features are
    available for use and how they should be used on browsers that do not support
    them.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`html5please.com`是一个网站，告诉您这些新功能中哪些是可用的，以及在不支持它们的浏览器上应该如何使用它们。'
- en: Let us use this framework for our audio player only when audio support is not
    detected.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仅在未检测到音频支持时使用这个框架作为我们的音频播放器。
- en: 'First, we download the framework from `mediaelementjs.com` and copy all the
    files from the build folder into `js/vendor/mediaelement/`. Then, we shall add
    the cross-browser friendly audio markup for our player in `index.html`, as shown
    in the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从`mediaelementjs.com`下载框架，并将构建文件夹中的所有文件复制到`js/vendor/mediaelement/`中。然后，我们应该在`index.html`中为我们的播放器添加跨浏览器友好的音频标记，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that we need to specify the stylesheet in the `head` element to make sure
    it works perfectly on all browsers (instead of loading it just in time), as shown
    in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要在`head`元素中指定样式表，以确保它在所有浏览器上都能完美工作（而不是及时加载），如下面的代码所示：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We then load the `mediaelement.js` only when audio support is missing by using
    Modernizr in our `main.js` file, as shown in the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`main.js`文件中使用Modernizr仅在缺少音频支持时加载`mediaelement.js`，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This code first tests if audio is supported with Modernizr. If it is not supported,
    then we load the necessary resources to make the audio work using our `mediaelement.js`
    framework. Once `mediaelement.js` is loaded, we call it, so that it runs and converts
    our audio files to a format that browsers which lack audio support will understand.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先使用Modernizr测试音频是否受支持。如果不支持，那么我们将加载必要的资源来使音频在我们的`mediaelement.js`框架中工作。一旦加载了`mediaelement.js`，我们就调用它，这样它就会运行并将我们的音频文件转换为那些缺少音频支持的浏览器能够理解的格式。
- en: '![Adding HTML5 features safely with Modernizr](img/8505_04_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用Modernizr安全添加HTML5功能](img/8505_04_01.jpg)'
- en: The previous screenshot shows our page rendering on a browser without support
    for HTML5 audio (falling back to Flash with `mediaelement.js`) and in a browser
    with support for HTML5 audio (using native controls provided by the browser).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了我们的页面在不支持HTML5音频的浏览器上的呈现（回退到使用`mediaelement.js`的Flash），以及在支持HTML5音频的浏览器上的呈现（使用浏览器提供的本机控件）。
- en: When to use Modernizr.load?
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用Modernizr.load？
- en: '`Modernizr.load` is a great utility when you have multiple files you want to
    load conditionally like in our audio player.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Modernizr.load`是一个很好的实用工具，当您有多个文件需要有条件地加载时，比如我们的音频播放器。'
- en: Sometimes, you want something to happen only when the user clicks on a link
    or an element. Instead of loading all the required assets beforehand and making
    the browser render the page slowly, you can load these assets just in time after
    the user has clicked on the element.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望只有在用户单击链接或元素时才发生某些事情。您可以在用户单击元素后及时加载这些资产，而不是预先加载所有所需的资产，并使浏览器渲染页面变慢。
- en: Using Modernizr to load CSS features
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Modernizr加载CSS功能
- en: 'Modernizr also outputs the results of its tests for various HTML5/CSS3 features
    on the `html` tag of your page, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Modernizr还会在页面的`html`标签上输出其对各种HTML5/CSS3功能的测试结果，如下截图所示：
- en: '![Using Modernizr to load CSS features](img/8505_04_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用Modernizr加载CSS功能](img/8505_04_02.jpg)'
- en: 'This is very useful if you would like to style experiences based on the kind
    of features available. For example, we notice the class name called `no-touch`
    in the `html` element. This means the browser this page was loaded in, did not
    support touch interfaces. If touch was supported, then we could make all links
    with slightly more padding to account for large fingers trying to click on them.
    Let us add styles to our `css/style.css` file to do this, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于基于可用功能的体验进行样式设计非常有用。例如，我们注意到`html`元素中有一个名为`no-touch`的类名。这意味着加载此页面的浏览器不支持触摸界面。如果支持触摸，那么我们可以为所有链接添加更多的填充，以适应尝试点击它们的大手指。让我们在`css/style.css`文件中添加样式来实现这一点，如下所示：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is how our site looks on a browser that supports touch events (on the
    left-hand side) and one that does not (on the right-hand side):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的网站在支持触摸事件的浏览器上的外观（左侧）和不支持触摸事件的浏览器上的外观（右侧）：
- en: '![Using Modernizr to load CSS features](img/8505_04_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用Modernizr加载CSS功能](img/8505_04_03.jpg)'
- en: Testing our site
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的网站
- en: Whew! That was a lot to get by! But wait, we are not done yet! We have written
    all the code, but how about some testing? There are so many variants of browsers
    out there and it is impossible to test on each and every one of them. Fortunately,
    it is pretty simple to test on most major versions of browsers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这真是太多了！但是等等，我们还没有完成！我们已经编写了所有的代码，但是怎么样进行一些测试呢？那里有很多种浏览器的变体，不可能对每一种都进行测试。幸运的是，在大多数主要版本的浏览器上进行测试是相当简单的。
- en: If you are on Windows, I recommend you install the latest versions of Opera,
    Opera Next, Safari, Chrome, Chrome Canary, Firefox, Firefox Nightly, IE8, and
    IE10.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Windows，我建议您安装Opera、Opera Next、Safari、Chrome、Chrome Canary、Firefox、Firefox
    Nightly、IE8和IE10的最新版本。
- en: If you are on Mac, get every browser listed above, except IE. If you are able
    to afford it, buy a Windows Operating System and install it as a virtual image
    on Virtual Box ([www.virtualbox.org/](http://www.virtualbox.org/)). Microsoft
    provides older IEs as virtual images for testing, which you could also install
    on Virtual Box using ievms (`github.com/xdissent/ievms`).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Mac，获取上面列出的所有浏览器，除了IE。如果您有能力的话，购买一个Windows操作系统，并将其安装为Virtual Box上的虚拟镜像（[www.virtualbox.org/](http://www.virtualbox.org/)）。微软提供了旧版IE的虚拟镜像供测试使用，您也可以使用ievms（`github.com/xdissent/ievms`）在Virtual
    Box上安装。
- en: For a far easier but less rigorous testing option—say when you have not yet
    finalized your website—try [www.browserstack.com](http://www.browserstack.com)
    or `browserling.com`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个更简单但不太严格的测试选项——比如当您还没有最终确定您的网站时——尝试[www.browserstack.com](http://www.browserstack.com)或`browserling.com`。
- en: All of these browsers have developer tools that make it very easy to detect
    when a page is not rendered as expected.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些浏览器都有开发者工具，可以很容易地检测页面是否按预期渲染。
- en: 'Let us test our Sun and Sand Festival website in Internet Explorer 7\. At first
    glance, everything appears to work as expected. But looking at the tabs, it seems
    like everything has gone haywire! The following screenshot displays our page on
    the Internet Explorer browser:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Internet Explorer 7中测试我们的Sun and Sand Festival网站。乍一看，一切似乎都按预期工作。但是看着标签，似乎一切都乱了！以下截图显示了我们在Internet
    Explorer浏览器上的页面：
- en: '![Testing our site](img/8505_04_04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_04.jpg)'
- en: To debug this, let us use Firebug Lite to check what styles are being applied
    on these elements. You can install Firebug Lite as a bookmarklet on IE7 ([http://getfirebug.com/firebuglite](http://getfirebug.com/firebuglite)).
    Clicking on that bookmarklet would enable us to use a constrained version of Firebug
    on IE7.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试这个问题，让我们使用Firebug Lite来检查这些元素上应用了哪些样式。您可以在IE7上安装Firebug Lite（[http://getfirebug.com/firebuglite](http://getfirebug.com/firebuglite)）的书签。点击该书签将使我们能够在IE7上使用受限版本的Firebug。
- en: 'Using Firebug, we see a debugging window, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebug，我们看到一个调试窗口，如下截图所示：
- en: '![Testing our site](img/8505_04_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_05.jpg)'
- en: 'Checking into our `main.css`, it seems like our media query-based styles are
    all being parsed and interpreted by IE7, irrespective of the conditionals within!
    For example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 检查我们的`main.css`，似乎我们基于媒体查询的样式都被IE7解析和解释，而不管其中的条件如何！例如：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The previous style was declared within the media query `@media only screen
    and (max-width: 750px)`, which is supposed to override the existing rule `(.t-unit-1-2
    { width: 50%; })` only if the query is satisfied. But IE7 simply ignores the features
    mentioned and blindly applies all the style rules it finds.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '先前的样式是在媒体查询`@media only screen and (max-width: 750px)`中声明的，这个查询应该只在满足条件时覆盖现有规则`(.t-unit-1-2
    { width: 50%; })`。但是IE7简单地忽略了提到的功能，并盲目地应用它找到的所有样式规则。'
- en: Thanks to conditional CSS class names, we can fix this trivially by adding an
    additional style rule to the original CSS declaration to prevent this override
    in IE6 to IE8\. The [Appendix](apa.html "Appendix A. You Are an Expert,Now What?"),
    *You Are an Expert, Now What?* covers conditional CSS class names in greater detail.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于条件CSS类名的存在，我们可以通过在原始CSS声明中添加额外的样式规则来轻松解决这个问题，以防止IE6到IE8覆盖原始样式。附录，*您是专家，现在怎么办？*详细介绍了条件CSS类名。
- en: 'HTML5 Boilerplate gives you three class names to use for such cases, described
    as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5 Boilerplate为您提供了三个类名，用于这种情况，描述如下：
- en: '`.lt-ie7`: Targets all IE versions that are lower than IE7 with this class
    name. This would apply styles to IE 6 and below.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.lt-ie7`：以这个类名来定位所有低于IE7的IE版本。这将应用样式到IE 6及以下版本。'
- en: '`.lt-ie8`: Targets all IE versions that are lower than IE8 with this class
    name. This would apply styles to IE6 and IE7.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.lt-ie8`：以这个类名来定位所有低于IE8的IE版本。这将应用样式到IE6和IE7。'
- en: '`.lt-ie9`: Targets all IE versions lower than IE9\. This would apply styles
    to all IE versions 8 and below.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.lt-ie9`：针对所有低于IE9的IE版本。这将应用样式到所有低于IE9的IE版本。'
- en: 'Thanks to this, we can now apply rules that target IE8 and below, which do
    not understand conditions in media queries by applying style rules as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了这个，我们现在可以应用针对IE8及以下版本的规则，这些版本不理解媒体查询中的条件，通过以下方式应用样式规则：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As IE8 and below also do not support the `box-sizing` property (Mozilla Developer
    Network describes the effects of this property at `developer.mozilla.org/En/CSS/Box-sizing`),
    this means the widths of these boxes will expand as we add padding. Let us remove
    the margins on the parent element to prevent the boxes from stacking up, as shown
    in the following code snippet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于IE8及以下版本也不支持`box-sizing`属性（Mozilla开发者网络在`developer.mozilla.org/En/CSS/Box-sizing`描述了此属性的效果），这意味着这些框的宽度将随着我们添加填充而扩展。让我们删除父元素的边距，以防止框堆叠，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'However, that doesn''t quite solve our problem. Then, looking further up, we
    notice that our grid cells, that is, the elements with the class `t-grid__cell`,
    have the `display` property set to inline-block. Knowing that IE7 does not apply
    this to any element other than those with natural inline property, we would have
    to add an additional declaration to make this work, as shown in the following
    code snippet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并没有完全解决我们的问题。然后，再往上看，我们注意到我们的网格单元，也就是具有类“t-grid__cell”的元素，其“display”属性设置为inline-block。知道IE7不会将此应用于除具有自然内联属性的元素之外的任何元素，我们需要添加额外的声明才能使其工作，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, now this works as we wanted it to!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，现在这样就可以了！
- en: '![Testing our site](img/8505_04_06.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_06.jpg)'
- en: 'Let us scroll to the bottom of the page. We notice the prices are all scrambled
    because of a lack of CSS3 transforms support in IE7, as shown in the following
    screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们滚动到页面底部。我们注意到价格都混乱了，因为IE7不支持CSS3变换，如下面的截图所示：
- en: '![Testing our site](img/8505_04_07.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_07.jpg)'
- en: 'With Modernizr, all we need to do is to add this rule to our stylesheet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有了Modernizr，我们只需要将这个规则添加到我们的样式表中：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This would make it more readable for any browser that does not support CSS
    transforms, as shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使任何不支持CSS变换的浏览器更易读，如下面的截图所示：
- en: '![Testing our site](img/8505_04_08.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_08.jpg)'
- en: 'Scrolling further down, we notice our SVG icons are missing as IE8 and below
    do not recognize SVG files, as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 继续向下滚动，我们注意到我们的SVG图标在IE8及以下版本中丢失，因为它们不识别SVG文件，如下面的截图所示：
- en: '![Testing our site](img/8505_04_09.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_09.jpg)'
- en: 'Again Modernizr comes to our rescue! In our `main.js` file, we will check the
    outcome of the SVG test in Modernizr and then replace all the SVG images with
    their equivalent PNG ones. Do note that this means you need a PNG equivalent for
    every SVG file you use in your HTML page. The code to replace SVG with PNG files
    is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 再次感谢Modernizr！在我们的`main.js`文件中，我们将检查Modernizr中SVG测试的结果，然后用它们的等效PNG图像替换所有SVG图像。请注意，这意味着您需要为HTML页面中使用的每个SVG文件都有一个PNG等效文件。替换SVG为PNG文件的代码如下：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Why use SVG?**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么使用SVG？**'
- en: We are using SVG icons as these can scale as per our needs of a responsive website,
    as SVG is a vector image format. Moreover, they are extremely lightweight compared
    to typical PNG files and can load significantly faster than PNG formats.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用SVG图标，因为这些图标可以根据我们对响应式网站的需求进行缩放，SVG是一种矢量图像格式。此外，与典型的PNG文件相比，它们非常轻量，并且可以比PNG格式加载得更快。
- en: 'The following screenshot shows how IE7 renders the icons in PNG format thanks
    to Modernizr:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了IE7如何以PNG格式呈现图标，这要感谢Modernizr：
- en: '![Testing our site](img/8505_04_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的网站](img/8505_04_10.jpg)'
- en: As you get into web development, you should spend more time using browser developer
    tools; Andi Smith wrote a good post outlining some of the features of each of
    them at `andismith.com/blog/2011/11/25-dev-tool-secrets/`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始进行Web开发时，您应该花更多时间使用浏览器开发工具；Andi Smith在`andismith.com/blog/2011/11/25-dev-tool-secrets/`写了一篇很好的文章，概述了每个工具的一些特性。
- en: Testing on non-desktop browsers
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在非桌面浏览器上测试
- en: 'Let us look at how the site looks on smaller-scale devices. The quickest and
    easiest way to do this would be to download **Opera Mobile Emulator** from [www.opera.com/developer/tools/mobile/](http://www.opera.com/developer/tools/mobile/)
    and use one of the several available options to load our page. This emulator is
    shown in the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在小规模设备上网站的外观。最快最简单的方法是从[www.opera.com/developer/tools/mobile/](http://www.opera.com/developer/tools/mobile/)下载**Opera
    Mobile Emulator**，然后使用其中的几个选项之一加载我们的页面。这个模拟器显示在下面的截图中：
- en: '![Testing on non-desktop browsers](img/8505_04_11.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![在非桌面浏览器上测试](img/8505_04_11.jpg)'
- en: Choose one of the options on the left-hand side of the emulator and click on
    the **Launch** button to open an Opera browser instance that emulates how it would
    appear on the device you have selected.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器左侧选择一个选项，然后单击**启动**按钮，打开一个模拟Opera浏览器实例，模拟您选择的设备上的显示效果。
- en: 'For example, the following screenshot shows how our page renders on an instance
    of **Opera Mobile Emulator** for **Amazon Kindle Fire**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的截图显示了我们的页面在**Opera Mobile Emulator**上的渲染实例，用于**Amazon Kindle Fire**：
- en: '![Testing on non-desktop browsers](img/8505_04_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![在非桌面浏览器上测试](img/8505_04_12.jpg)'
- en: The best part is that the **Opera Mobile** browser is one of the most modern
    mobile browsers available, which makes it a very good browser to test on when
    you are actively developing your website. It is also available on a wide variety
    of devices, which makes it easy to use **Opera Mobile Emulator** for testing various
    device widths if you are using media queries to style the page to adapt to different
    device dimensions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是**Opera Mobile**浏览器是最现代的移动浏览器之一，这使得它成为您积极开发网站时进行测试的非常好的浏览器。它还适用于各种设备，这使得使用**Opera
    Mobile Emulator**测试各种设备宽度变得很容易，如果您正在使用媒体查询来调整页面以适应不同的设备尺寸。
- en: If you also possess an iPhone running iOS 6, it is fairly easy to use **Remote
    Debugging with Safari 6** and inspect the code using Safari developer tools (Max
    Firtman has more information on how to enable this at [http://www.mobilexweb.com/blog/iphone-5-ios-6-html5-developers](http://www.mobilexweb.com/blog/iphone-5-ios-6-html5-developers)).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您也拥有运行iOS 6的iPhone，使用**Safari 6进行远程调试**并使用Safari开发者工具检查代码是相当容易的（Max Firtman在[http://www.mobilexweb.com/blog/iphone-5-ios-6-html5-developers](http://www.mobilexweb.com/blog/iphone-5-ios-6-html5-developers)上有更多信息）。
- en: 'If you have an Android device, you can enable debugging with Chrome for Android
    browser, but you need to install Android developer tools to do so. More help on
    how to do this is found in this guide to remote debugging on Chrome for Android
    at [https://developers.google.com/chrome/mobile/docs/debugging](https://developers.google.com/chrome/mobile     /docs/debugging).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您有Android设备，您可以在Chrome for Android浏览器上启用调试，但您需要安装Android开发者工具才能这样做。关于如何做到这一点的更多帮助，请参阅Chrome
    for Android远程调试指南[https://developers.google.com/chrome/mobile/docs/debugging](https://developers.google.com/chrome/mobile     /docs/debugging)。'
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have multiple mobile devices that run different browsers available at
    your fingertips, you can also use **Adobe Edge Inspect** from `html.adobe.com/edge/inspect/`
    to test how these pages look in tandem across all of these devices.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个运行不同浏览器的移动设备，您还可以使用`html.adobe.com/edge/inspect/`上的**Adobe Edge Inspect**来测试这些页面在所有这些设备上的外观。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at adding some interaction to the site using jQuery
    plugins. We also looked at how to use `Modernizr.load` to load scripts to make
    it easy to conditionally detect support for HTML5 audio and load resources for
    browsers that lack support and render the audio correctly. We also looked at some
    of the ways we can debug our site using browser developer tools and verify how
    the page appears on various browsers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何使用jQuery插件为网站添加一些交互。我们还学习了如何使用`Modernizr.load`来加载脚本，以便轻松地有条件地检测对HTML5音频的支持，并为不支持的浏览器加载资源并正确呈现音频。我们还研究了一些使用浏览器开发者工具调试网站和验证页面在各种浏览器上显示方式的方法。
- en: In the next chapter, we will look at how to optimize our site server-side on
    Apache and other web servers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Apache和其他Web服务器上优化我们的网站。
