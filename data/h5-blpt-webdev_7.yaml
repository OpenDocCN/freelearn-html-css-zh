- en: Chapter 7. Automate Deployment With the Build Script
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 使用构建脚本自动化部署
- en: We are ready to deploy our site! But before we do that, we should ensure we
    minimize all our scripts and optimize the images, so that these pages load as
    quickly as possible anywhere in the world. We can automate these tasks by executing
    a script on the command line. Let us look at the options we have.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备部署我们的网站了！但在我们这样做之前，我们应该确保我们最小化了所有脚本和优化了图像，这样这些页面就可以在全球任何地方尽可能快地加载。我们可以通过在命令行执行脚本来自动化这些任务。让我们看看我们有以下哪些选项。
- en: The build script
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建脚本
- en: Once you are done with your project, you would like to generate files that strip
    comments and are optimized for loading quickly. There are software build systems
    that are typically used in software projects with similar goals. HTML5 Boilerplate's
    build scripts provide tasks scoped to what a typical web development project would
    need.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的项目完成，你想要生成剥离注释并优化快速加载的文件。在软件项目中通常使用软件构建系统来实现类似的目标。HTML5 Boilerplate的构建脚本提供了针对典型网页开发项目所需的任务范围。
- en: The script should be used only after you have confirmed your project is ready
    for deployment and it has been well tested. The build script merely automates
    the process of removing comments, optimizing files, and making sure the files
    are production ready.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本只能在您确认您的项目已准备好部署并且已经经过充分测试后使用。构建脚本只是自动化了去除注释、优化文件和确保文件适合生产的过程。
- en: There are currently two kinds of build scripts that are actively maintained
    by HTML5 Boilerplate contributors; these are explored in the following section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 目前HTML5 Boilerplate贡献者积极维护有两种构建脚本；这些在下一节中探讨。
- en: Ant build script
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ant构建脚本
- en: 'The Ant build script is a set of files that work on top of the Apache Ant build
    system (`ant.apache.org/`) that has been available since the early days of HTML5
    Boilerplate. It offers a variety of options, described as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ant构建脚本是一组在Apache Ant构建系统（`ant.apache.org/`）之上工作的文件，这个系统自从HTML5 Boilerplate的早期版本以来就一直存在。它提供了各种选项，如下所述：
- en: Publishes files to test, development, and production environments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布文件到测试、开发和生产环境
- en: Checks syntax and code quality of your script files with **JSHint** or **JSLint**,
    or your stylesheets with **CSSLint**
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**JSHint**或**JSLint**检查你的脚本文件的语法和代码质量，或使用**CSSLint**检查你的样式表
- en: Concatenates and minifies all your JavaScript files into a single file and updates
    the HTML pages with reference to this new file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并并压缩所有JavaScript文件到一个文件中，并更新HTML页面，引用这个新文件
- en: Cleans up and tidies HTML markup by removing comments, whitespaces, and compressing
    inline styles and scripts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过删除注释、空白字符并压缩内联样式和脚本来清理和整理HTML标记
- en: Concatenates and minifies all your stylesheets and updates the HTML pages with
    reference to the new file instead of multiple CSS files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并并压缩所有样式表，并更新HTML页面，引用新文件，而不是多个CSS文件
- en: Compiles style preprocessor files such as Less or Sass into the resulting CSS
    stylesheets and updates references in HTML pages
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译样式预处理器文件，如Less或Sass，生成最终的CSS样式表，并更新HTML页面中的引用
- en: Optimizes PNG and JPEG images within the `img` folder using OptiPNG from `optipng.sourceforge.net/`
    and JPEGTran from `jpegclub.org/jpegtran/` respectively
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自`optipng.sourceforge.net/`的OptiPNG和来自`jpegclub.org/jpegtran/`的JPEGTran分别优化`img`文件夹内的PNG和JPEG图像
- en: Builds documentation from your scripts using JSDoc3 from `github.com/jsdoc3/jsdoc`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自`github.com/jsdoc3/jsdoc`的JSDoc3从你的脚本构建文档
- en: Node build script
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node构建脚本
- en: 'A new build script that builds on top of Node, found at `nodejs.org/`, is under
    active development. While it is not out for production use yet, it offers a lot
    of tasks that are similar to the Ant build script with some new features described
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的基于Node的构建脚本，位于`nodejs.org/`，正在积极开发中。虽然它还没有用于生产，但它提供了很多与Ant构建脚本相似的任务，还有一些以下描述的新特性：
- en: Concatenates and minifies all your JavaScript files into a single file and updates
    the HTML pages with reference to this new file
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并并压缩所有JavaScript文件到一个文件中，并更新HTML页面，引用这个新文件
- en: Concatenates and minifies all your stylesheets and update the HTML pages with
    reference to the new file instead of multiple CSS files
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并并压缩所有样式表，并更新HTML页面，引用新文件，而不是多个CSS文件
- en: Cleans up and tidy HTML markup by removing comments, whitespaces, and compressing
    inline styles and scripts
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过删除注释、空白字符并压缩内联样式和脚本来清理和整理HTML标记
- en: Optimizes PNG and JPEG images within the `img` folder using OptiPNG and JPEGTran
    respectively
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OptiPNG和JPEGTran分别优化`img`文件夹内的PNG和JPEG图像
- en: Watch the project files for changes, and automatically run the build script
    and reload open pages in browsers when they do.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 监视项目文件的变化，并在它们发生变化时自动运行构建脚本并在浏览器中重新加载打开的页面。
- en: Which build script to use?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用哪个构建脚本？
- en: Depending on what platforms you are comfortable with, you can choose one over
    the other. Both the build scripts are stable enough to use to deploy your production
    files, so your choice is down to what you are most comfortable using.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你熟悉的平台，你可以选择一个而不是另一个。这两个构建脚本都足够稳定，可以用来部署你的生产文件，所以你的选择取决于你最习惯使用哪个。
- en: If you already have Ant installed, the Ant build script might be an obvious
    choice. If you find yourself using Node frequently or using it in your projects,
    then the Node build script could be a good start. In this chapter, we will look
    at using both, so you can become comfortable with either of them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Ant，那么Ant构建脚本可能是一个明显的选择。如果你发现自己经常使用Node或者在你的项目中使用它，那么Node构建脚本可能是一个好的起点。在本章中，我们将查看如何使用这两个工具，这样你就可以熟练掌握它们中的任何一个。
- en: Using the Ant build script
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ant构建脚本
- en: 'First, confirm you have Ant installed on your system by entering the following
    in your command-line tool:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过在你的命令行工具中输入以下内容来确认你的系统上是否安装了Ant：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you do not have Ant, install it first before proceeding to the next step.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Ant，请在进行下一步之前先安装它。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ant is installed by default on Macs, while it is available as a package to install
    on most Linux platforms. For Windows, installing Ant is slightly more complicated.
    You need to install the Java SDK from [www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    and then download `WinAntcode.google.com/p/winant/` and point the installer to
    `Program Files/Java/jre6/bin/`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ant默认安装在Mac上，而在大多数Linux平台上作为软件包安装。对于Windows，安装Ant稍微复杂一些。你需要从[www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)安装Java
    SDK，然后下载`WinAntcode.google.com/p/winant/`并将其安装程序指向`Program Files/Java/jre6/bin/`。
- en: 'Next, you need to install **ant-contrib** , a utility that makes a lot of functionality
    available for Ant that HTML5 build script uses. **WinAnt** does this automatically,
    when you use it to install Ant on Windows. However, for Linux users, you can use
    **yum** to install it as a package. On Mac, you can install MacPorts ([www.macports.org/install.php](http://www.macports.org/install.php))
    and then enter the following in your command-line tool (typically Terminal):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要安装**ant-contrib** ，这是一个为Ant提供了许多功能的工具，HTML5构建脚本使用了这些功能。**WinAnt** 在你使用它在Windows上安装Ant时会自动安装这个工具。然而，对于Linux用户，你可以使用**yum**
    作为软件包来安装它。在Mac上，你可以安装MacPorts ([www.macports.org/install.php](http://www.macports.org/install.php))，然后在你通常的命令行工具（通常是终端）中输入以下内容：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, ensure that the image optimization tools are installed. For Mac users,
    you need to make sure you have **jpegt** **ran** ([www.ijg.org/](http://www.ijg.org/))
    and **optipng** (`optipng.sourceforge.net/`) installed and on your path. You can
    install these two files by entering the following in your command-line terminal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保图像优化工具已安装。对于Mac用户，你需要确保你有**jpegt** **ran** ([www.ijg.org/](http://www.ijg.org/))和**optipng**
    (`optipng.sourceforge.net/`)安装在你的路径上。你可以通过在你的命令行终端中输入以下内容来安装这两个文件：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `PATH` is an environmental variable that holds a list of folders that your
    command-line interface searches through when you enter a command. You can learn
    about how to add folders to the path from [www.cs.purdue.edu/homes/cs348/unix_path.html](http://www.cs.purdue.edu/homes/cs348/unix_path.html).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATH`是一个环境变量，它包含了一系列文件夹，当您输入一个命令时，命令行界面会在这些文件夹中搜索。你可以从[www.cs.purdue.edu/homes/cs348/unix_path.html](http://www.cs.purdue.edu/homes/cs348/unix_path.html)了解如何添加文件夹到路径。'
- en: If you are on Windows, the Ant build script project contains the required binaries
    for these image tools for you to install.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows上，Ant构建脚本项目中包含了这些图像工具所需的二进制文件供你安装。
- en: Installing the build script
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装构建脚本
- en: 'In Terminal (or your command-line tool), we will navigate to our project folder
    and install the build script using Git, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端（或你的命令行工具）中，我们将导航到我们的项目文件夹并使用Git安装构建脚本，如下面的屏幕截图所示：
- en: '![Installing the build script](img/8505_07_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![安装构建脚本](img/8505_07_01.jpg)'
- en: 'We now have to rename the build script folder from `ant-build-script` to `build`
    before we continue. This is done by using the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须将构建脚本的文件夹名称从`ant-build-script`更改为`build`，然后才能继续。这可以通过使用以下命令来完成：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once that is done, let us navigate to the build script folder by using the
    following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们使用以下命令导航到构建脚本文件夹：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we shall execute the build script! Go to your command-line tool and enter
    the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行构建脚本！打开你的命令行工具并输入以下内容：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you set up your build script folder correctly, then you should get the following
    screen:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确设置了你的构建脚本文件夹，那么你应该得到以下屏幕：
- en: '![Installing the build script](img/8505_07_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![安装构建脚本](img/8505_07_02.jpg)'
- en: 'Then, after the tasks are executed, you should get the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在任务执行后，你应该得到以下输出：
- en: '![Installing the build script](img/8505_07_03.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![安装构建脚本](img/8505_07_03.jpg)'
- en: Now, you have a brand new `publish` folder where the optimized files are stored.
    Let us look at what all have been optimized, by opening the `index.html` page
    from the `publish` folder, in Chrome browser and using the Chrome Developer Tools'
    **Network** tab to observe the files that are loaded and their associated sizes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个全新的**发布**文件夹，其中存储了优化后的文件。让我们打开**发布**文件夹中的`index.html`页面，在Chrome浏览器中使用Chrome开发者工具的**网络**标签，观察加载的文件及其相关大小，看看所有已经优化的内容。
- en: Please note that you must load the page with the **Network** tab open to log
    the files being requested.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你必须打开**网络**标签来记录正在请求的文件。
- en: Smaller image files
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩小后的图片文件
- en: The **Network** tab records all images that are fetched for use on `index.html`.
    We can see that the images that are fetched for the `index.html` page in the **publish**
    folder are noticeably smaller in size.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络**标签记录了所有用于`index.html`的图片。我们可以看到，在**发布**文件夹中用于`index.html`页面的图片明显比原来的大小要小。'
- en: 'In the following screenshot, the bottom section of the screenshot shows the
    list of images in the **publish** folder, which are noticeably smaller than the
    images used in our original project (listed in the top section of the screenshot):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，屏幕截图的底部部分显示了**发布**文件夹中的图片列表，这些图片明显比我们原始项目中使用的图片要小（列表在屏幕截图的顶部部分）：
- en: '![Smaller image files](img/8505_07_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![缩小后的图片文件](img/8505_07_04.jpg)'
- en: Smaller CSS file
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩小后的CSS文件
- en: 'We note that before we used the build script, our CSS file was called `main.css`
    and was approximately 21 KB, but after using the build script, the file has been
    renamed and is now almost half the original size, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，在我们使用构建脚本之前，我们的CSS文件叫做`main.css`，大约有21KB，但在使用构建脚本后，文件被重命名，现在几乎是原来大小的一半，如下屏幕截图所示：
- en: '![Smaller CSS file](img/8505_07_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![缩小后的CSS文件](img/8505_07_05.jpg)'
- en: Smaller and fewer JS files
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩小且更少的JS文件
- en: After executing the build script, you will notice that `main.js` and `plugin.js`
    have been combined into one. Not only have they been combined together, but they
    have also been minified, leading to a smaller file size of the final script file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行构建脚本后，你会注意到`main.js`和`plugin.js`已经合并成了一 个。他们不仅被合并在一起，而且被压缩了，导致最终脚本文件的大小更小。
- en: 'The `index.html` page from the `publish` folder generated via the build script
    invokes only four JavaScript files as shown in the bottom section of the following
    screenshot, compared to five JavaScript files originally placed in the folder
    (top section):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建脚本生成的`index.html`页面仅调用以下屏幕截图底部部分所示的四种JavaScript文件，与原来放在文件夹顶部的五种JavaScript文件相比：
- en: '![Smaller and fewer JS files](img/8505_07_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![缩小且更少的JS文件](img/8505_07_06.jpg)'
- en: No comments in files
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件中没有注释
- en: The HTML, CSS, and JS files in the `publish` folder have no comments that HTML5
    Boilerplate files contain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布**文件夹中的HTML、CSS和JS文件没有包含HTML5 Boilerplate文件中的注释。'
- en: Build options
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建选项
- en: The Ant build script has a few tasks that are not executed by default, but are
    available to you if you need them. The following sections explain what these tasks
    allow you to do.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Ant构建脚本有一些默认不执行的任务，但当你需要时可以为你提供。以下各节解释了这些任务允许你做什么。
- en: Minifying markup
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩标记
- en: 'By default, the Ant build script does not remove whitespaces from the `index.html`
    page when optimizing; if you want to also remove whitespaces in the HTML file
    and minify it, you can execute the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ant构建脚本在优化时不会从`index.html`页面中移除空白字符；如果你也想移除HTML文件中的空白字符并对其进行压缩，你可以执行以下操作：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Preventing image optimization
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止图片优化
- en: 'When executing the build script, you will notice that the script takes the
    longest time to optimize images. If you are executing the build script to merely
    test the final production-ready files, then you would not have to optimize images.
    In this case, you should execute the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行构建脚本时，你会注意到脚本花在优化图像上的时间最长。如果你仅仅是为了测试最终的生产准备文件而执行构建脚本，那么你就不需要优化图像。在这种情况下，你应该执行以下命令：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using CSSLint
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CSSLint
- en: 'CSS Lint (`csslint.net`) is an open source CSS code-quality tool that performs
    a static analysis of your code and flags style rules that are invalid or may be
    the cause of problems. To use CSS Lint on your project''s CSS files, just enter
    the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: CSS Lint（`csslint.net`）是一个开源的CSS代码质量工具，它对你的代码进行静态分析，并标记出无效或可能导致问题的样式规则。要在你项目的CSS文件上使用CSS
    Lint，只需输入以下内容：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Typically, you will observe a bunch of warnings. CSS Lint has a lot of options
    you can set. To do this, open the `project.properties` file within the `config`
    folder in build. Uncomment this line by removing the `#`, by using the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会看到一大堆警告。CSS Lint有很多你可以设置的选项。要做到这一点，打开`build`中的`config`文件夹内的`project.properties`文件。通过使用以下命令取消注释这一行：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Enter all the options you want to use with CSS Lint after the `=` sign and save.
    The various options that you can use are mentioned at `github.com/stubbornella/csslint/tree/master/src/rules`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`=`符号后输入你想与CSS Lint一起使用的所有选项并保存。你可以在`github.com/stubbornella/csslint/tree/master/src/rules`中找到可以使用的各种选项。
- en: Using JSHint
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 JSHint
- en: 'JSHint (`jshint.com`) is a community-driven tool to detect errors and potential
    problems with your JavaScript code and enforce your team''s coding conventions.
    To execute JSHint on your JavaScript files, go to your project and execute the
    following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JSHint（`jshint.com`）是一个由社区驱动的工具，用于检测你的JavaScript代码中的错误和潜在问题，并强制执行你的团队的编码约定。要对你的JavaScript文件执行JSHint，去到你的项目并执行以下操作：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once executed, we see a bunch of errors being listed for our `main.js`. The
    corrected file is included within the code for this chapter. Once corrected, you
    will also notice a whole slew of errors being thrown for the code in `plugin.js`.
    This is because we used the minified code of the smooth-scroll plugin. Let us
    replace it with the unminified code from the project repository at `github.com/kswedberg/jquery-smooth-scroll/blob/master/jquery.smooth-scroll.js`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，我们会看到一大堆错误被列出来，针对我们的`main.js`。 corrected file包含在本章的代码中。一旦纠正，你还会注意到有一大堆错误被抛出，针对`plugin.js`中的代码。这是因为我们使用了平滑滚动插件的压缩代码。让我们用项目仓库中的未压缩代码替换它，项目仓库的地址是`github.com/kswedberg/jquery-smooth-scroll/blob/master/jquery.smooth-scroll.js`。
- en: 'Now, we get a bunch of errors all telling us we need to use the stricter comparison
    operator. Let us turn this off for our current project. We can do this by opening
    the `project.properties` file within the `config` folder under our `build` folder
    and uncomment the following line that allows you to use your own options for JSHint:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们得到一大堆错误，所有的错误都在告诉我们需要使用更严格的比较运算符。让我们为当前项目关闭这个选项。我们可以通过打开`build`文件夹内的`config`文件夹中的`project.properties`文件并取消注释以下允许你使用自己的JSHint选项的行来实现：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change it to the following snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 改为以下代码片段：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More options are listed on the JSHint website at `jshint.com`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于选项的信息可以在JSHint网站上的`jshint.com`找到。
- en: Our errors have disappeared!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的错误消失不见了！
- en: Setting up the SHA filenames
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 SHA 文件名
- en: 'The concatenated and minified CSS and JS filenames are set to uniquely generated
    strings, which ensures a cached local copy of these files never get loaded when
    a new production build is deployed to the server. By default, the number of characters
    used in the filename is `7`. You can set it to a smaller or larger number by changing
    the following line in `project.properties` within the `config` folder inside the
    `build` folder:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 合并和压缩后的CSS和JS文件名被设置为唯一生成的字符串，这确保了当新的生产构建部署到服务器时，这些文件的高速缓存本地副本永远不会被加载。默认情况下，文件名中使用的字符数为`7`。你可以通过改变`build`文件夹中`config`文件夹内的`project.properties`中的以下行来将其设置为更小或更大的数字：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Uncomment the previous line and then alter the number `7` to the number of
    characters you prefer, using the following syntax:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 取消注释上一行，然后将`7`改为你喜欢的字符数，使用以下语法：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using with Drupal or WordPress
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Drupal 或 WordPress
- en: Minor changes need to be made to make sure that these Ant build scripts work
    as intended for Drupal. Do note that there is not much help in minifying the HTML
    pages as a significant portion of the markup will be generated by Drupal or WordPress.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这些 Ant 构建脚本能如预期般为 Drupal 工作，需要做出一些小修改。请注意，对 HTML 页面进行压缩的帮助不大，因为 Drupal 或
    WordPress 会生成大部分的标记。
- en: Updating build.xml
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 build.xml
- en: There is a minor change you need to make to `build.xml` to make it work with
    the file structure of Drupal or WordPress.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要对 `build.xml` 文件进行一次小修改，以使其能与 Drupal 或 WordPress 的文件结构协同工作。
- en: 'Look for `<echo message="Minifying any unconcatenatedcss files..."/>` within
    the file. Just after that line of code, change the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中寻找 `<echo message="Minifying any unconcatenatedcss files..."/>`。就在那行代码之后，更改以下内容：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容需要更新：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Setting up the project configuration properties
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置项目配置属性
- en: 'In the `project.properties` file within the `config` folder of the `build`
    folder, add the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `build` 文件夹中的 `config` 文件夹里的 `project.properties` 文件中，加入以下代码：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Setting the JS file delineator
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 JS 文件分隔符
- en: 'WordPress or Drupal themes require you to split your markup into separate files
    (for example, `footer.php` for WordPress or `footer.tpl.php` for Drupal). You
    need to know in which of these files the following code is located:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 或 Drupal 主题需要你将你的标记分割到不同的文件中（例如，对于 WordPress 就是 `footer.php`，对于 Drupal
    就是 `footer.tpl.php`）。你需要知道以下代码位于以下哪个文件中：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use that filename (for example, `footer.php`) to set the `file.root.page` property
    in the `project.properties` file by using the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件名（例如，`footer.php`）在 `project.properties` 文件中设置 `file.root.page` 属性，使用以下代码：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A sample Drupal and WordPress theme that contains the modified build script
    are provided in the code for this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码中提供了一个经过修改的构建脚本的示例 Drupal 和 WordPress 主题。
- en: Using the Node build script
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node 构建脚本
- en: 'The Node build script is different from the Ant build script in the following
    two ways:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Node 构建脚本与 Ant 构建脚本的不同之处在于：
- en: It installs universally and does not need to be copied from one project to the
    other.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有普遍的安装性，不需要从一个项目复制到另一个项目。
- en: All projects should be initialized with the Node build script. It is significantly
    more troublesome to add it on to a project that is already underway.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有项目都应该使用 Node 构建脚本进行初始化。在一个已经开始的项目中添加它要麻烦得多。
- en: 'The Node build script requires Node, so verify you have Node installed by entering
    the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Node 构建脚本需要 Node 环境，所以通过输入以下命令验证你是否已经安装了 Node：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you do not have Node already, you can install it from `nodejs.org/` (or by
    using **package manager** from [github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](http://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装 Node，可以从 `nodejs.org/` 安装（或者通过 [github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](http://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)
    使用包管理器安装）。
- en: Grunt
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Grunt
- en: '**Grunt** (`gruntjs.com/`) is a Node-based command-line build tool on which
    this Node build script is based. The Node build script provides HTML5 Boilerplate
    optimized tasks that plug into Grunt.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Grunt** (`gruntjs.com/`) 是一个基于 Node 的命令行构建工具，这个 Node 构建脚本就是基于它开发的。Node 构建脚本提供了可插入到
    Grunt 中的 HTML5 Boilerplate 优化的任务。'
- en: This requires using a `package.json` file along with a `grunt.js` file within
    your project folder, which can be set up when you initialize your project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要你在项目文件夹内使用一个 `package.json` 文件和一个 `grunt.js` 文件，这可以在你初始化项目时设置。
- en: Installing Node build script
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Node 构建脚本
- en: 'In your command-line tool, first install the Node build script package, by
    entering the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的命令行工具中，首先通过输入以下命令来安装 Node 构建脚本包：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The Node build script can also be used as a part of a bigger build setup. If
    you are inclined to using it differently, take a look at all the possible ways
    of doing so here at `github.com/h5bp/node-build-script/wiki/install`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Node 构建脚本也可以作为更大构建设置的一部分使用。如果你倾向于以不同的方式使用它，请在这里查看所有可能的使用方式：[github.com/h5bp/node-build-script/wiki/install](https://github.com/h5bp/node-build-script/wiki/install)。
- en: Once installed, you can create your HTML5 Boilerplate project folder by initializing
    it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你可以通过初始化来创建你的 HTML5 Boilerplate 项目文件夹。
- en: Initializing your project
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化你的项目
- en: You can choose from various options to set up a project folder for yourself.
    Let us use this to set up a temporary project, to learn how to use this script
    to start your HTML5 Boilerplate project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择不同的选项来为你自己设置项目文件夹。让我们用这个来设置一个临时的项目，学习如何使用这个脚本启动你的 HTML5 Boilerplate 项目。
- en: 'Create a folder where your HTML5 Boilerplate project should be. Navigate to
    it within your command-line tool and enter the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个文件夹，你的HTML5 Boilerplate项目应该放在这里。使用命令行工具导航到该文件夹，并输入以下命令：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will start setting up a whole set of command-line interactions for you
    to choose from. It is mostly used to set up information for package management
    that will be used by Grunt.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始为你设置一整套命令行交互，供你选择。它主要用于设置将由Grunt使用的包管理信息。
- en: 'Once you have done that, you have three options to choose from for setting
    up the files you want to start with; these options are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做，你有三个选项可以选择开始设置你想要的文件；这些选项如下：
- en: '`[D]efault`: Standard set of files for HTML5 Boilerplate.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[D]efault`：HTML5 Boilerplate的标准文件集合。'
- en: '`[C]ustom`: Get all the standard files with the option of choosing to rename
    `js/`, `css/`, or `img/` folders. You would typically want to do this if your
    files are going to be used as templates for other systems such as Drupal or WordPress.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[C]ustom`：获取所有标准文件，可以选择重命名`js/`、`css/`或`img/`文件夹。如果你的文件将被用作其他系统（如Drupal或WordPress）的模板，你可能希望这样做。'
- en: '`[S]illy`: Prompts to rename every folder/file in HTML5 Boilerplate. You are
    least likely to use this option, unless you are a semantic perfectionist.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[S]illy`：提示重命名HTML5 Boilerplate中的每个文件夹/文件。除非你是语义完美主义者，否则你不太可能使用这个选项。'
- en: After you choose the type of installation you want to do, there are also more
    questions that are asked. Note that if you press *Enter*, the default value as
    indicated within parenthesis will be set.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在你选择想要进行的安装类型之后，还会问更多问题。注意，如果你按*Enter*，括号内显示的默认值将被设置。
- en: This will then download the latest version of HTML5 Boilerplate from the Github
    repository for you to start as your base.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这将然后从Github仓库下载HTML5 Boilerplate的最新版本，作为你的起点。
- en: Using the Node build script with an existing project
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Node构建脚本与现有项目一起工作
- en: 'It is not impossible to use the script with an existing project, but it''s
    just a bit more tedious. There is work underway in the project to make this happen
    at `github.com/h5bp/node-build-script/issues/55`, but until then, the following
    is how we can use it with our Sun and Sand website:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能不可能使用脚本与现有项目一起工作，只是有点繁琐。项目正在进行中，以实现在`github.com/h5bp/node-build-script/issues/55`中使用此脚本，但在此之前，以下是我们如何与我们的Sun
    and Sand网站一起使用它的方法：
- en: First, create a temporary folder, and execute the Node build script to initialize
    an empty project from the command line as described in the earlier section.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个临时文件夹，然后从命令行执行Node构建脚本，按照早前的部分描述初始化一个空项目。
- en: Then, copy only `package.json` and `grunt.js` into your project folder.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，只将`package.json`和`grunt.js`复制到你的项目文件夹中。
- en: You can see the code in the `nimbu.in/h5bp-book/chapter-7-node-init/` folder
    to see this in action.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`nimbu.in/h5bp-book/chapter-7-node-init/`文件夹中查看实际的代码来看到这个操作。
- en: Using the Node build script to build your project
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node构建脚本构建你的项目
- en: 'Navigate to the Sun and Sand project folder (that you initialized it in the
    previous section) in your command-line tool and enter the following command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行工具中导航到你在上一节初始化的Sun and Sand项目文件夹，并输入以下命令：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will combine the files and the results are published in the `publish` folder
    just like the Ant build script. You can also use these other build options like
    the Ant build script.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这将合并文件，结果与Ant构建脚本一样，发布在`publish`文件夹中。你也可以像使用Ant构建脚本一样使用这些其他的构建选项。
- en: Text
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本
- en: 'If you would like to leave out compressing images when building your project,
    then use the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在构建项目时省略图像压缩，请使用以下命令：
- en: '[PRE24]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Minify
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小化
- en: 'If you would like to additionally minify HTML files, then use the following
    command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还想最小化HTML文件，请使用以下命令：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The results are similar to what you would find with Ant build script; the following
    screenshot shows the result of the minification process:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与Ant构建脚本找到的结果类似；下面的屏幕截图显示了压缩过程的结果：
- en: '![Minify](img/8505_07_07.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![最小化](img/8505_07_07.jpg)'
- en: There are some additional options available that you don't get with Ant build
    script.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些额外的选项是Ant构建脚本所没有的。
- en: Server
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器
- en: 'This will open a local server instance you can immediately preview your website
    on. This is useful when you want to test the pages where protocol-relative URLs
    are used to link to files. To do this, simply navigate to your project folder
    in the command-line tool and enter the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个本地服务器实例，你可以立即预览你的网站。当想测试使用协议相关URL链接到文件的页面时，这个功能很有用。要实现这一点，只需在你的命令行工具中进入你的项目文件夹，并输入以下命令：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You will see the server being started for both the `publish` folder and the
    `intermediate` folder, as shown in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到为`publish`文件夹和`intermediate`文件夹都启动了服务器，如下面的屏幕截图所示：
- en: '![Server](img/8505_07_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![服务器](img/8505_07_08.jpg)'
- en: Then, open `http://localhost:3001` to view the published site.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`http://localhost:3001`来查看发布的网站。
- en: Connect
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Using this command, you can see your page reload on browsers it is open in
    as soon as you have made changes to any asset within the project. This saves you
    from refreshing the page manually to see the change. To do this, just navigate
    to your project folder in the command-line tool and enter the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个命令，你可以看到在你做出项目中的任何资产更改后，它会在打开的浏览器中自动刷新页面。这节省了你手动刷新页面以查看更改的麻烦。要实现这一点，只需在你的命令行工具中进入你的项目文件夹，并输入以下命令：
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Using with Drupal or WordPress
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Drupal或WordPress一起使用
- en: It is fairly trivial to initialize an HTML5 Boilerplate project with Node build
    script and then convert it into a template you are building for Drupal or WordPress.
    First, make sure you choose the `Custom` option when executing `h5bp init`. Then,
    when setting the folders, set `inc` as the folder where your stylesheet will be,
    and `images` as the name of the folder that would contain your template images.
    When you are prompted again, enter in the same values and the project framework
    will be generated for you. Make sure you replace `index.html` with your template
    files.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Node构建脚本初始化一个HTML5 Boilerplate项目，然后将其转换为为Drupal或WordPress构建的模板是相当简单的。首先，确保在执行`h5bp
    init`时选择`Custom`选项。然后，在设置文件夹时，将`inc`设为样式表所在的文件夹，将`images`设为包含模板图片的文件夹的名称。当你再次被提示时，输入相同的值，项目框架将会为你生成。确保你用你的模板文件替换`index.html`。
- en: 'Once you have done this, open the `grunt.js` file in your project folder and
    confirm that the stylesheet''s folder is set to the parent folder by using the
    following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成上述步骤，打开你项目文件夹中的`grunt.js`文件，并确认通过以下代码，样式表的文件夹被设置为父文件夹：
- en: '[PRE28]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Make sure that only JavaScript files and stylesheets get prefixed with the
    SHA filenames, by editing or removing images from being renamed. This is done
    by using the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 确保只有JavaScript文件和样式表在文件名前加上SHA文件名，通过编辑或删除被重命名的图片来实现。这可以通过以下代码完成：
- en: '[PRE29]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The script also needs to know the new location of the `images` folder. We can
    do this by setting the source and destination folders for images, as shown in
    the following code snippet:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本还需要知道`images`文件夹的新位置。我们可以通过设置图像的源和目标文件夹来实现，如下面的代码片段所示：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Next steps
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: Once we are satisfied with our production files in the `publish` folder, then
    we can move it to our hosting provider to replace the files that make our website.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对`publish`文件夹中的生产文件感到满意，然后我们可以将其移动到我们的托管提供商那里，以替换使我们的网站运行的文件。
- en: Ideally, you would be using a Version Control System to do this, so you can
    quickly roll back an update in the unlikely event of this update making some page
    unavailable.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你会使用版本控制系统来做这件事，这样在极不可能的情况下更新使得某些页面无法访问时，你可以快速回滚更新。
- en: If you are only creating a template for Drupal or WordPress, then it may help
    to move this to within the WordPress folder on the server that is under a Version
    Control System.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是为Drupal或WordPress创建一个模板，那么将此移动到服务器上的WordPress文件夹中，该服务器位于版本控制系统之下可能会有所帮助。
- en: 'Alternatively, you can compress your project and then copy the files to the
    server where they can be decompressed and used. The Node build script provides
    an option to do this. Go to your project folder in your command-line tool and
    enter the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以压缩你的项目，然后将文件复制到服务器上，在那里它们可以被解压缩并使用。Node构建脚本提供了一个这样做选项。在你的命令行工具中进入你的项目文件夹，并输入以下命令：
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Use the name that best describes your project instead of `<project-name>`. Then,
    copy the `<project-name>.tgz` to your server and expand it into the folder you
    would want the files in.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用能最好地描述你项目的名称，而不是`<project-name>`。然后，将`<project-name>.tgz`文件复制到你的服务器上，并将其解压到你希望文件所在的文件夹。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use two kinds of build scripts that are available
    from the HTML5 Boilerplate team. We also looked at how we can use them both with
    Drupal or WordPress templates. We also looked at what we can do once the files
    have been built.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章，我们学习了如何使用HTML5 Boilerplate团队提供的两种构建脚本。我们还查看了如何将它们都与Drupal或WordPress模板一起使用。我们还探讨了文件构建完成后我们可以做什么。
- en: In the next chapter, we will look at some advanced tasks you can take on, now
    that you know how to create and deploy projects using HTML5 Boilerplate.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨一些高级任务，你现在知道如何使用HTML5 Boilerplate创建和部署项目后，可以尝试这些任务。
