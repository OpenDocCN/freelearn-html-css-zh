- en: Chapter 7. Creating Graphs and Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。创建图表和图形
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating a pie chart
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个饼图
- en: Creating a bar chart
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个条形图
- en: Graphing equations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制方程
- en: Plotting data points with a line chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用线图绘制数据点
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'By now you may have noticed that [Chapters 1](ch01.html "Chapter 1. Getting
    Started withPaths and Text") to [4](ch04.html "Chapter 4. Mastering Transformations")
    cover HTML5 canvas basics, [Chapters 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation") and [6](ch06.html "Chapter 6. Interacting with the Canvas:
    Attaching Event Listeners to Shapes and Regions") cover advanced topics, while
    [Chapters 7](ch07.html "Chapter 7. Creating Graphs and Charts") and [8](ch08.html
    "Chapter 8. Saving the World with Game Development") cover real life implementations.
    After all, what good is it to learn about the canvas if we aren''t able to produce
    something useful? This chapter focuses on doing just that by creating some real
    life canvas applications by creating a pie chart, a bar chart, graphs, and a line
    chart. In contrast to the previous chapters, this chapter contains only four recipes
    because each recipe provides a complete, easily configurable, and production-ready
    product. Let''s get started!'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到[第1章](ch01.html "第1章。路径和文本入门")到[第4章](ch04.html "第4章。掌握变换")涵盖了HTML5画布基础知识，[第5章](ch05.html
    "第5章。通过动画使画布生动起来")和[第6章](ch06.html "第6章。与画布交互：将事件侦听器附加到形状和区域")涵盖了高级主题，而[第7章](ch07.html
    "第7章。创建图表和图形")和[第8章](ch08.html "第8章。用游戏开发拯救世界")涵盖了真实的应用。毕竟，如果我们不能产生有用的东西，学习画布有什么好处呢？本章重点是通过创建一些真实的画布应用程序，如创建饼图、条形图、图表和线图。与前几章不同，本章只包含四个示例，因为每个示例都提供了一个完整、易于配置和可投入生产的产品。让我们开始吧！
- en: Creating a pie chart
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个饼图
- en: Pie charts are probably one of the most common data visualizations because they
    quickly give users a sense of the relative weights of data elements. In this recipe,
    we'll create a configurable Pie Chart class that takes in an array of data elements
    and produces a pie chart. Furthermore, we'll construct the Pie Chart drawing methods
    in such a way that the pie chart and label automatically fills up as much of the
    canvas as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图可能是最常见的数据可视化之一，因为它们可以快速让用户了解数据元素的相对权重。在这个示例中，我们将创建一个可配置的饼图类，它接受一个数据元素数组并生成一个饼图。此外，我们将以这样的方式构造饼图绘制方法，使得饼图和标签自动填满尽可能多的画布。
- en: '![Creating a pie chart](img/1369_07_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![创建饼图](img/1369_07_01.jpg)'
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create a Pie Chart class that can automatically position
    and size a pie chart and a legend from an array of data:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个可以自动定位和调整饼图和图例的饼图类：
- en: 'Define the constructor for the `PieChart` class which draws the pie chart:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为'PieChart'类定义构造函数，用于绘制饼图：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Define the `getLegendWidth()` method which returns the width of the legend
    by taking into account the text length of the longest label:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义'getLegendWidth()'方法，通过考虑最长标签的文本长度来返回图例的宽度：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Define the `drawPieBorder()` method which draws a border around the pie chart:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义'drawPieBorder()'方法，绘制饼图周围的边框：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Define the `drawSlices()` method which loops over the data and draws a slice
    of the pie for each data element:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义'drawSlices()'方法，循环遍历数据并为每个数据元素绘制一个饼图切片：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Define the `getTotalValue()` method which is used to get the sum of the data
    values:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义'getTotalValue()'方法，用于获取数据值的总和：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Define the `drawLegend()` method which draws a legend:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义'drawLegend()'方法，绘制图例：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the page loads, build the data and instantiate a `PieChart` object:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面加载时，构建数据并实例化一个'PieChart'对象：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Embed the canvas tag inside the body of the HTML document:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML文档的body中嵌入canvas标签：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: '*Drawing an arc* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章。路径和文本入门")中绘制一个弧线*'
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章。路径和文本入门")中使用文本*'
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第2章](ch02.html "第2章。形状绘制和组合")中绘制一个矩形*'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before diving into how the code works, let's first take a step back and think
    about what a `PieChart` object should do. As a developer, we would need to pass
    in the canvas ID so the object knows where to draw, and also an array of data
    elements so it knows what to draw.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解代码如何工作之前，让我们先退一步，思考一下'PieChart'对象应该做什么。作为开发人员，我们需要传入画布ID，以便对象知道在哪里绘制，还需要一个数据元素数组，以便知道要绘制什么。
- en: 'The `PieChart` element is rendered with the `drawSlices()` and `drawPieBorder()`
    methods. The `drawSlices()` method performs these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用'drawSlices()'和'drawPieBorder()'方法呈现'PieChart'元素。'drawSlices()'方法执行以下步骤：
- en: Loops through the data elements.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历数据元素。
- en: Calculates the angle of each data value by multiplying 2π by the value fraction
    of the total value.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将2π乘以总值的值分数来计算每个数据值的角度。
- en: Draws an arc using the `arc()` method for each slice.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用'arc()'方法为每个切片绘制弧线。
- en: Fills each slice with the data element color.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用数据元素颜色填充每个切片。
- en: 'Once the pie chart is rendered, we can draw the legend with the `drawLegend()`
    method. This method performs these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图呈现后，我们可以使用'drawLegend()'方法绘制图例。此方法执行以下步骤：
- en: Loops through the data elements.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历数据元素。
- en: Draws a box using `rect()` for each element.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个元素使用'rect()'绘制一个框。
- en: Strokes and fills each box with the data element color using `stroke()` and
    `fill()`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用'stroke()'和'fill()'为每个框描边和填充数据元素颜色。
- en: Writes the corresponding label using `fillText()` for each element.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用'fillText()'为每个元素写入相应的标签。
- en: Once the page loads, we can create an array of data elements that identify our
    daily activities with the corresponding number of hours for each activity and
    then instantiate a new PieChart object by passing in the data array.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载后，我们可以创建一个数据元素数组，用于标识我们的日常活动以及每个活动对应的小时数，然后通过传入数据数组实例化一个新的PieChart对象。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In this recipe, we've created artificial data by hard coding an array of data
    elements. In real life, however, it's more likely that our data will be provided
    via JSON or XML, for example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过硬编码数据元素数组来创建了人工数据。然而，在现实生活中，我们更可能通过JSON或XML等方式提供数据。
- en: Creating a bar chart
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条形图
- en: Right behind pie charts, bar charts are another popular tool for visualizing
    data. In this recipe, we'll create a configurable Bar Chart class that takes in
    an array of data elements and creates a simple bar chart. We'll reuse the data
    structure from the previous recipe to compare the results. Like the Pie Chart
    class, the bar chart drawing methods also automatically scale the chart to fill
    up the canvas.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在饼图之后，条形图是另一个用于可视化数据的流行工具。在这个示例中，我们将创建一个可配置的Bar Chart类，该类接受一个数据元素数组并创建一个简单的条形图。我们将重用上一个示例中的数据结构来进行比较。与饼图类不同，条形图绘制方法还会自动缩放图表以填充画布。
- en: '![Creating a bar chart](img/1369_07_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![创建条形图](img/1369_07_02.jpg)'
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create a Bar Chart class that can automatically position
    and size a bar chart from an array of data:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个Bar Chart类，该类可以自动定位和调整一个数据数组的条形图的大小：
- en: 'Define the `BarChart` constructor which draws the chart:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`BarChart`构造函数，绘制图表：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Define the `getLabelAreaHeight()` method which determines the label area height
    (the labels below the x axis):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`getLabelAreaHeight()`方法，确定标签区域的高度（x轴下方的标签）：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Define the `getLongestValueWidth()` method which returns the longest value
    text width:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`getLongestValueWidth()`方法，返回最长值文本宽度：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define the `drawXLabels()` method which draws the x axis labels:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawXLabels()`方法，绘制x轴标签：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Define the `drawYValues()` method which draws the y axis values:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawYValues()`方法，绘制y轴值：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Define the `drawBars()` method which loops through all of the data elements
    and draws a bar for each one:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawBars()`方法，该方法循环遍历所有数据元素，并为每个数据元素绘制一个条形图：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define the `drawGridlines()` method which draws horizontal gridlines on the
    bar chart:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawGridlines()`方法，该方法在条形图上绘制水平网格线：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Define the `drawXAxis()` method which draws the x axis:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawXAxis()`方法，绘制x轴：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define the `drawYAxis()` method which draws the y axis:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawYAxis()`方法，绘制y轴：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When the page loads, build the data and instantiate a new `BarChart` object:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面加载时，构建数据并实例化一个新的`BarChart`对象：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Embed the canvas inside the body of the HTML document:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将画布嵌入到HTML文档的body中：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In contrast to a pie chart, a bar chart will need a bit more configuration to
    make it truly generic. For our implementation of the `BarChart` class, we'll need
    to pass in the canvas id, an array of data elements, the bar colors, the bar widths,
    the grid line increment which is the number of units between grid lines, the max
    value and the min value. The `BarChart` constructor uses six methods to render
    the bar chart—`drawGridlines()`, `drawYAxis()`, `drawXAxis()`, `drawBars()`, `drawYValues()`,
    and `drawXLabels()`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与饼图相比，条形图需要更多的配置才能真正通用。对于我们的`BarChart`类的实现，我们需要传入画布id、数据元素数组、条形颜色、条形宽度、网格线增量（网格线之间的单位数）、最大值和最小值。`BarChart`构造函数使用六种方法来渲染条形图——`drawGridlines()`、`drawYAxis()`、`drawXAxis()`、`drawBars()`、`drawYValues()`和`drawXLabels()`。
- en: The key to the `BarChart` class is the `drawBars()` method that iterates over
    all of the data elements, and then draws a rectangle for each one. The easiest
    way to draw each bar is to first invert the context vertically (so that positive
    values of y go up and not down), position the cursor on the x axis, and then draw
    a rectangle downwards whose height is equal to the value of the data element.
    As the context is inverted vertically, the bar will actually rise upwards.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`BarChart`类的关键是`drawBars()`方法，该方法遍历所有数据元素，然后为每个数据元素绘制一个矩形。绘制每个条形图的最简单方法是首先垂直反转上下文（使得y的正值向上而不是向下），将光标定位在x轴上，然后向下绘制一个高度等于数据元素值的矩形。由于上下文在垂直方向上被反转，条形图实际上会向上升起。'
- en: See also...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章。路径和文本入门")中使用文本*'
- en: '*Drawing a rectangle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and
    Composites")'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第2章](ch02.html "第2章。形状绘制和组合")中绘制矩形*'
- en: '*Translating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章。掌握变换")中翻译画布上下文*'
- en: '*Rotating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章。掌握变换")中旋转画布上下文*'
- en: '*Creating a mirror transform* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章。掌握变换")中创建镜像变换*'
- en: Graphing equations
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制方程
- en: In this recipe, we'll create a configurable Graph class that draws the x and
    y axis with tick marks and values, and then we'll construct a method called `drawEquation()`
    that allows us to graph f(x) functions. We'll instantiate a Graph object and then
    draw a sine wave, a parabolic equation, and a linear equation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个可配置的Graph类，该类绘制带有刻度线和值的x和y轴，然后我们将构建一个名为`drawEquation()`的方法，该方法允许我们绘制f(x)函数。我们将实例化一个Graph对象，然后绘制正弦波、抛物线方程和线性方程。
- en: '![Graphing equations](img/1369_07_03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![绘制方程](img/1369_07_03.jpg)'
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create a Graph class that can draw an x and y axis with
    values, and also graph multiple f(x) equations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个可以绘制带有值的x和y轴，并且还可以绘制多个f(x)方程的Graph类：
- en: 'Define the constructor for the `Graph` class that draws the x and y axis:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`Graph`类的构造函数，绘制x和y轴：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define the `drawXAxis()` method which draws the x axis:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawXAxis()`方法，绘制x轴：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Define the `drawYAxis()` method which draws the y axis:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawYAxis()`方法，绘制y轴：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Define the `drawEquation()` method which takes in a function f(x) and then
    draws the equation by looping through incremental values of x from `minX` to `maxX`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawEquation()`方法，该方法接受一个函数f(x)，然后通过循环从`minX`到`maxX`的增量x值来绘制方程：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Define the `transformContext()` method which translates the context to the
    center of the graph, stretches the graph to fit the canvas, and then inverts the
    y axis:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`transformContext()`方法，将上下文平移到图形中心，拉伸图形以适应画布，然后反转y轴：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When the page loads, instantiate a new `Graph` object, and then draw three
    equations using the `drawEquation()` method:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当页面加载时，实例化一个新的`Graph`对象，然后使用`drawEquation()`方法绘制三个方程：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Embed the canvas inside the body of the HTML document:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将画布嵌入HTML文档的body中：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Our `Graph` class only requires six parameters, the `canvasId`, `minX`, `minY`,
    `maxX`, `maxY`, and `unitsPerTick`. When instantiated, it draws the x axis with
    the `drawXAxis()` method and the y axis with the `drawYAxis()` method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Graph`类只需要六个参数，`canvasId`、`minX`、`minY`、`maxX`、`maxY`和`unitsPerTick`。实例化后，它使用`drawXAxis()`方法绘制x轴，使用`drawYAxis()`方法绘制y轴。
- en: 'The real gem of the `Graph` object is the `drawEquation()` method that takes
    in an equation f(x), a line color, and a line thickness. Although the method is
    relatively short (about 20 lines of code), it''s actually quite powerful. Here''s
    how it works:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Graph`对象的真正亮点是`drawEquation()`方法，它接受一个方程f(x)、一个线颜色和一个线粗细。虽然该方法相对较短（大约20行代码），但实际上非常强大。它的工作原理如下：'
- en: First, call the `transformContext()` method which positions the canvas context,
    scales the context to fit the canvas, and inverts the y axis with the `scale()`
    method by multiplying the y component by -1\. This makes the drawing process much
    simpler because increasing y values will go upwards and not downwards (remember
    that by default, y increases as you move downwards).
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先调用`transformContext()`方法，将画布上下文定位，缩放上下文以适应画布，并使用`scale()`方法通过将y分量乘以-1来反转y轴。这样做是为了使绘图过程更简单，因为增加的y值将向上而不是向下（请记住，默认情况下，向下移动时y值增加）。
- en: Once the canvas context has been prepared, use the `equation` function to determine
    the y value when x equals `minX`, that is, f(minX).
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦画布上下文准备好，使用`equation`函数确定x等于`minX`时的y值，即f(minX)。
- en: Move the drawing cursor with `moveTo()`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`moveTo()`移动绘图光标。
- en: With a `for` loop, slightly increment the x value and determine the corresponding
    y value using the equation f(x) for each iteration.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`for`循环，轻微增加x值，并使用方程f(x)确定每次迭代的相应y值。
- en: Draw a line from the last point to the current point with `lineTo()`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`lineTo()`从最后一个点画线到当前点。
- en: Continue looping until x equals `maxX`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续循环，直到x等于`maxX`。
- en: As the lines drawn are extremely small with each iteration, they are invisible
    to the human eye, resulting in the illusion of smooth curves.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每次迭代绘制的线条非常小，人眼看不见，从而产生平滑曲线的错觉。
- en: When the page loads, we can instantiate a new `Graph` object, and then graph
    a green sine wave, a blue parabolic equation, and a red linear equation by calling
    the `drawEquation()` method.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时，我们可以实例化一个新的`Graph`对象，然后通过调用`drawEquation()`方法绘制绿色正弦波、蓝色抛物线方程和红色线性方程。
- en: See also...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: '*Drawing a line* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章。路径和文本入门")中绘制一条线*'
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章。路径和文本入门")中处理文本*'
- en: '*Translating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章。掌握变换")中转换画布上下文*'
- en: '*Scaling the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章。掌握变换")中缩放画布上下文*'
- en: '*Creating a mirror transform* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章。掌握变换")中创建镜像变换*'
- en: Plotting data points with a line chart
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用线图绘制数据点
- en: If you've ever taken a science class, you're probably familiar with generating
    line charts based on a set of data for your experiments. Line charts are probably
    one of the most useful data visualizations when communicating data trends. In
    this recipe, we'll create a configurable Line Chart class which takes in an array
    of data elements and plots each point while connecting the points with line segments.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经上过科学课，你可能熟悉根据实验数据生成线图。线图可能是在传达数据趋势时最有用的数据可视化之一。在这个示例中，我们将创建一个可配置的Line Chart类，它接受一个数据元素数组，并绘制每个点，同时用线段连接这些点。
- en: '![Plotting data points with a line chart](img/1369_07_04.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![用线图绘制数据点](img/1369_07_04.jpg)'
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create a Line Chart class that can automatically position
    and size a line chart from an array of data:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个Line Chart类，可以自动定位和调整线图的大小，从一个数据数组中：
- en: 'Define the constructor for the `LineChart` class that draws the x and y axis:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`LineChart`类的构造函数，绘制x轴和y轴：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define the `getLongestValueWidth()` method which returns the length in pixels
    of the longest value text:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`getLongestValueWidth()`方法，返回最长值文本的像素长度：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Define the `drawXAxis()` method which draws the x axis and the labels:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawXAxis()`方法，绘制x轴和标签：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Define the `drawYAxis()` method which draws the y axis and the values:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawYAxis()`方法，绘制y轴和值：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define the `drawLine()` method which loops through the data points and draws
    line segments connecting each data point:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`drawLine()`方法，循环遍历数据点并绘制连接每个数据点的线段：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Define the `transformContext()` method which translates the context and then
    inverts the context vertically:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`transformContext()`方法，平移上下文，然后垂直反转上下文：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When the page loads, instantiate a `LineChart` object, create a data set for
    the blue line, plot the line using `drawLine()`, define another data set for the
    red line, and then plot the red line:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面加载时，实例化一个`LineChart`对象，为蓝线创建一个数据集，使用`drawLine()`绘制线条，为红线定义另一个数据集，然后绘制红线：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Embed the canvas inside the body of the HTML document:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将画布嵌入到HTML文档的主体中：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To start off, we'll need to configure the `LineChart` object with seven properties,
    including the `canvasId`, `minX`, `minY`, `maxX`, `maxY`, `unitsPerTickX`, and
    `unitsPerTickY`. When the `LineChart` object is instantiated, we'll render the
    x axis and the y axis.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用七个属性配置`LineChart`对象，包括`canvasId`、`minX`、`minY`、`maxX`、`maxY`、`unitsPerTickX`和`unitsPerTickY`。当`LineChart`对象被实例化时，我们将渲染x轴和y轴。
- en: 'Most of the interesting stuff happens in the `drawLine()` method, which requires
    an array of data elements, a line color, and a line thickness. Here''s how it
    works:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分有趣的事情发生在`drawLine()`方法中，它需要一个数据元素数组、线条颜色和线条粗细。它的工作原理如下：
- en: Use `transformContext()` to translate, scale, and invert the context.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`transformContext()`来平移、缩放和反转上下文。
- en: Position the drawing cursor at the first data point from the data array with
    the `moveTo()` method.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`moveTo()`方法将绘图光标定位在数据数组中的第一个数据点处。
- en: Loop through all of the data elements, draw a line from the previous point to
    the current point, and then draw a small circle at the current position using
    the `arc()` method.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历所有数据元素，从上一个点到当前点画一条线，然后使用`arc()`方法在当前位置画一个小圆圈。
- en: Once the page loads, we can instantiate the `LineChart` object, create an array
    of data points for the blue line, draw the line using the `drawLine()` method,
    create another array of data points for the red line, and then draw the red line.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载后，我们可以实例化`LineChart`对象，为蓝线创建一个数据点数组，使用`drawLine()`方法画线，为红线创建另一个数据点数组，然后画红线。
- en: See also...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: '*Drawing a line* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章.路径和文本入门")中画一条线*'
- en: '*Working with text* in [Chapter 1](ch01.html "Chapter 1. Getting Started withPaths
    and Text")'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第1章](ch01.html "第1章.路径和文本入门")中处理文本*'
- en: '*Drawing a circle* in [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第2章](ch02.html "第2章.形状绘制和组合")中画一个圆*'
- en: '*Translating the canvas context* in [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第4章](ch04.html "第4章.掌握变换")中翻译画布上下文*'
