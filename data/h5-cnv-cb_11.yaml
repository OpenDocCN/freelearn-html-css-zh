- en: Appendix B. Canvas Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 画布安全
- en: In order to protect pixel data of images, videos, and canvases on your website,
    the HTML5 canvas specification has safeguards in place to prevent scripts from
    other domains from accessing these media, manipulating them, and then creating
    new images, videos, or canvases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护网站上图像、视频和画布的像素数据，HTML5画布规范中有防护措施，防止其他域的脚本访问这些媒体，操纵它们，然后创建新的图像、视频或画布。
- en: Before anything is drawn on the canvas, the canvas tag has an origin-clean flag
    that's set to true. This basically means that the canvas is "clean". If you draw
    an image onto the canvas that's hosted on the same domain as the code running
    it, the origin-clean flag remains true. If, however, you draw an image onto the
    canvas that's hosted on another domain, the origin-clean flag is set to false
    and the canvas is now "dirty".
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在画布上绘制任何内容之前，画布标签的origin-clean标志设置为true。这基本上意味着画布是“干净的”。如果您在托管代码运行的同一域上的画布上绘制图像，则origin-clean标志保持为true。但是，如果您在托管在另一个域上的画布上绘制图像，则origin-clean标志将设置为false，画布现在是“脏的”。
- en: 'According to the HTML5 canvas specification, the canvas is considered dirty
    the moment any of these actions occur:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 根据HTML5画布规范，一旦发生以下任何操作，画布就被视为脏：
- en: The element's 2D context's `drawImage()` method is called with an `HTMLImageElement`
    or an `HTMLVideoElement` whose origin is not the same as that of the Document
    object that owns the canvas element.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 调用元素的2D上下文的`drawImage()`方法时，使用的`HTMLImageElement`或`HTMLVideoElement`的原点与拥有画布元素的文档对象不同。'
- en: The element's 2D context's `drawImage()` method is called with an `HTMLCanvasElement`
    whose origin-clean flag is false.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 调用元素的2D上下文的`drawImage()`方法时，使用的`HTMLCanvasElement`的origin-clean标志为false。'
- en: The element's 2D context's `fillStyle` attribute is set to a `CanvasPattern`
    object that was created from an `HTMLImageElement` or an `HTMLVideoElement` whose
    origin was not the same as that of the Document object that owns the canvas element
    when the pattern was created.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 元素的2D上下文的`fillStyle`属性设置为从`HTMLImageElement`或`HTMLVideoElement`创建的`CanvasPattern`对象，当时该模式的原点与拥有画布元素的文档对象不同。'
- en: The element's 2D context's `fillStyle` attribute is set to a `CanvasPattern`
    object that was created from an `HTMLCanvasElement` whose origin-clean flag was
    false when the pattern was created.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 元素的2D上下文的`fillStyle`属性设置为从`HTMLCanvasElement`创建的`CanvasPattern`对象，当时该模式的origin-clean标志为false。'
- en: The element's 2D context's `strokeStyle` attribute is set to a `CanvasPattern`
    object that was created from an `HTMLImageElement` or an `HTMLVideoElement` whose
    origin was not the same as that of the Document object that owns the canvas element
    when the pattern was created.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的2D上下文的`strokeStyle`属性设置为从`HTMLImageElement`或`HTMLVideoElement`创建的`CanvasPattern`对象，当时该模式的原点与拥有画布元素的文档对象不同。
- en: The element's 2D context's `strokeStyle` attribute is set to a `CanvasPattern`
    object that was created from an `HTMLCanvasElement` whose origin-clean flag was
    false when the pattern was created.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 元素的2D上下文的`strokeStyle`属性设置为从`HTMLCanvasElement`创建的`CanvasPattern`对象，当时该模式的origin-clean标志为false。'
- en: The element's 2D context's `fillText()` or `strokeText()` methods are invoked
    and consider using a font that has an origin that is not the same as that of the
    Document object that owns the canvas element. (The font doesn't even have to be
    used; all that matters is whether the font was considered for any of the glyphs
    drawn.)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 调用元素的2D上下文的`fillText()`或`strokeText()`方法，并考虑使用原点与拥有画布元素的文档对象不同的字体。（甚至不必使用字体；重要的是字体是否被用于绘制任何字形。）'
- en: In addition, if you perform any of these actions on your local computer (not
    a web server), the origin-clean flag will automatically be set to false because
    the resources will be perceived to have come from a different origin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '- 此外，如果您在本地计算机上执行以下任何操作（而不是在Web服务器上），则origin-clean标志将自动设置为false，因为资源将被视为来自不同的来源。'
- en: 'Next, according to the specification, a `SECURITY_ERR` exception will be thrown
    if any of these actions occur with a dirty canvas:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，根据规范，如果在脏画布上发生以下任何操作，将抛出`SECURITY_ERR`异常：
- en: The `toDataURL()` method is called
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 调用`toDataURL()`方法'
- en: The `getImageData()` method is called
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 调用`getImageData()`方法'
- en: The `measureText()` method is used with a font whose origin is not the same
    as the Document object
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 使用`measureText()`方法时，使用的字体的原点与文档对象不同'
- en: Although the canvas security specification was created with good intentions,
    it may cause us more of a headache than it's worth. As an example, let's say that
    you wanted to create a drawing application that hooks into the Flickr API to pull
    in images from the public domain to add to your drawings. If you wanted your application
    to be able to save that drawing as an image using the `toDataURL()` method , or
    if you wanted your application to have fancy pixel manipulation algorithms using
    the `getImageData()` method , you're in some trouble. Performing these actions
    on a dirty canvas will throw a JavaScript error and prevent your application from
    working correctly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管画布安全规范是出于良好意图创建的，但它可能会给我们带来更多麻烦。举个例子，假设您想创建一个绘图应用程序，该应用程序可以连接到Flickr API，从公共域中获取图像以添加到您的绘图中。如果您希望您的应用程序能够使用`toDataURL()`方法将该绘图保存为图像，或者如果您希望您的应用程序使用`getImageData()`方法具有复杂的像素操作算法，那么您将遇到一些麻烦。在脏画布上执行这些操作将抛出JavaScript错误，并阻止您的应用程序正常工作。
- en: One way to circumvent this problem is by creating a proxy that obtains images
    from another domain and then passes it back to the client, making it look as if
    the image came from your domain. If you've ever worked with cross-domain AJAX
    applications, you'll feel right at home.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是创建一个代理，从另一个域获取图像，然后传递回客户端，使其看起来像图像来自您的域。如果您曾经使用过跨域AJAX应用程序，您会感到非常熟悉。
