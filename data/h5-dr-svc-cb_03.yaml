- en: Chapter 3. Animated Data Display
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。动画数据显示
- en: 'In this chapter we''re going to cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Making a motion chart
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作运动图表
- en: Displaying a force directed graph
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示力导向图
- en: Making a live range chart filter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作实时范围图表过滤器
- en: Making an image carousel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作图像轮播
- en: Zooming and panning a chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放和平移图表
- en: Using the web notifications API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Web通知API
- en: Creating interactive Geo charts from a dataset
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据集创建交互式地理图表
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We are all living in an information age, where data is created in huge amounts
    every day. This excess amount of data is in dire need to be presented in a format
    that is accessible by the users.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都生活在一个信息时代，每天都会产生大量数据。这种过量的数据急需以用户可访问的格式呈现。
- en: This chapter will cover some common ways of doing animated data visualizations
    with minor interactions. Most of the examples will be data-driven documents, bounded
    to the page with D3 as well as with some other methods of animated data display.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖一些常见的动画数据可视化方法，带有轻微的交互。大多数示例将是数据驱动文档，绑定到页面上的D3，以及一些其他动画数据显示方法。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout the book we use D3, so it is good to know some of the origins of
    it. Mike Bostock, the brilliant core author the library, has created it as an
    successor to a library that he created during his Ph.D. studies called Protovis,
    taking into account the web standards and making performance improvements. He
    also has an amazing visualizations list mostly done for the New York Times available
    at his site [http://bost.ocks.org/mike/](http://bost.ocks.org/mike/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们都使用D3，所以了解一些它的起源是很好的。Mike Bostock，这个杰出的核心作者，创建了这个库，作为他在博士研究期间创建的一个库Protovis的继任者，考虑到了Web标准并进行了性能改进。他还在他的网站[http://bost.ocks.org/mike/](http://bost.ocks.org/mike/)上提供了一个令人惊叹的可视化列表，大部分是为纽约时报做的。
- en: Making a motion chart
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作运动图表
- en: When working with a time-based data often you want to have a view, where the
    time changes will be visualized. One way of doing this is by using a motion chart
    that updates over time and that is what we will be creating with this recipe.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理基于时间的数据时，通常希望有一个视图，其中时间变化将被可视化。一种方法是使用随时间更新的运动图表，这就是我们将用这个食谱创建的内容。
- en: '![Making a motion chart](img/9282OT_03_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![制作运动图表](img/9282OT_03_01.jpg)'
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using a toolkit for creating an interactive graph named **Rickshaw**
    that can be retrieved from [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/),
    and is part of the example code as well. Besides that we also need `D3.js` to
    be included, because Rickshaw is built on top of it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个用于创建交互式图表的工具包**Rickshaw**，可以从[http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)获取，并且也是示例代码的一部分。除此之外，我们还需要包括`D3.js`，因为Rickshaw是建立在其之上的。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To create the recipe, we will add JavaScript code that will randomly generate
    data and create an interactive graph using Rickshaw.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个食谱，我们将添加JavaScript代码，随机生成数据，并使用Rickshaw创建一个交互式图表。
- en: First, we add the external JavaScript and CSS in the head section. By convention,
    we can put the vendor libraries in a separate folder `js/vendor/ and css/vendor/`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在头部添加外部JavaScript和CSS。按照惯例，我们可以将供应商库放在一个单独的文件夹`js/vendor/和css/vendor/`中。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We add the placeholders for the chart in the body section.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在body部分添加图表的占位符。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We continue with the main part, the `js/example.js` file, where we first create
    a color palette, and then the refresh rate.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们继续主要部分，即`js/example.js`文件，我们首先创建一个调色板，然后是刷新率。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The next step is to create `Rickshaw.Graph` with SVG of size `900px` by `600px`
    and of the `line` type. We use the refresh rate we previously selected and the
    specified color palette.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用大小为`900px` x `600px`的SVG创建`Rickshaw.Graph`，类型为`line`。我们使用之前选择的刷新率和指定的调色板。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Following this we can add a Y axis to the created graph.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以在创建的图表中添加Y轴。
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Because we created the required objects, they can get rendered to the screen
    by calling `.render` on them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们创建了所需的对象，它们可以通过调用`.render`在屏幕上呈现。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need data to display, so we will generate some random data, and add it to
    the graph. In order to add the data with a delay, use setInterval on a refreshRate
    period.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要数据来显示，所以我们将生成一些随机数据，并将其添加到图表中。为了延迟添加数据，可以使用setInterval在refreshRate周期上。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, we should be seeing something similar to the figure shown in
    the beginning of the recipe.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该看到类似于食谱开头所示的图形。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Rickshaw.Color.Palette` we picked is with the scheme `munin`. There are
    also other palettes from which we can choose, such as `spectrum14` or `cool`.
    The palette is used in order to simplify and automate the picking of the colors
    for the graph. For example, if we manually call the .`color()` method multiple
    times.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的`Rickshaw.Color.Palette`是`munin`方案。还有其他调色板可供选择，例如`spectrum14`或`cool`。调色板用于简化和自动选择图表的颜色。例如，如果我们手动多次调用`.color()`方法。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It will always return the next color. Palette is a set of predefined colors
    that can be picked between given set of rules. For example, the original Nintendo
    Game Boy had four shades of green that could be used to display all the games.
    If we take a look at the implementation of the palettes in Rickshaw, we can notice
    that they are just a list of colors. The following is a snippet from Rickshaw
    source code definition of the palette `cool`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它将始终返回下一个颜色。调色板是一组预定义的颜色，可以在给定的规则集之间选择。例如，原始的任天堂Game Boy有四种绿色的阴影，可以用来显示所有的游戏。如果我们看一下Rickshaw中调色板的实现，我们会注意到它们只是一系列颜色。以下是Rickshaw源代码中调色板`cool`的定义片段：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we take a look at the `Rickshaw.Graph` creation, besides the SVG size, we
    picked the element with the ID `chart`, where the graph will get rendered.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`Rickshaw.Graph`的创建，除了SVG大小，我们选择了ID为`chart`的元素，图表将在其中呈现。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Additionally, we set the `renderer` type to `line`, but it can also be set to
    `area`, `stack`, `bar`, or `scatterplot`, depending on the result.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将`renderer`类型设置为`line`，但也可以设置为`area`，`stack`，`bar`或`scatterplot`，具体取决于结果。
- en: 'For the `series` property we use the following code snippet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`series`属性，我们使用以下代码片段：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first argument is the array with data names, after that comes the palette,
    and last is the options object where we set the update `timeInterval`. Additionally,
    `maxDataPoints` was set to `50`, and that one designates how many samples of data
    are currently displayed, meaning that we would display the last 50 objects.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是带有数据名称的数组，然后是调色板，最后是选项对象，我们在其中设置了更新`timeInterval`。另外，`maxDataPoints`设置为`50`，这表示当前显示的数据样本数，也就是我们将显示最后50个对象。
- en: 'Later on, we called the `.render()` method on the `graph` and `yAxis` objects
    for the first time, and afterwards, in the `setInterval()` method we called for
    re-rendering of them on every data change. The data for rendering we constructed
    had the following format:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们第一次在`graph`和`yAxis`对象上调用了`.render()`方法，然后在`setInterval()`方法中，我们在每次数据变化时调用了它们的重新渲染。我们构建的渲染数据格式如下：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding format represents a value for the three lines at the specific
    point of time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的格式表示了特定时间点的三行值。
- en: This data object is passed into the series using the `addData()` method defined
    for `Rickshaw.Series.FixedDuration` that sets the latest update for the `series`
    property.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据对象被传递到系列中，使用了`Rickshaw.Series.FixedDuration`定义的`addData()`方法，设置了`series`属性的最新更新。
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we need to get the current data for all the displayed frames, we could call
    the `graph.series.dump()` method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要获取所有显示帧的当前数据，我们可以调用`graph.series.dump()`方法。
- en: 'That for example will return the following result:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这将返回以下结果：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are various ways to customize the `chart` ID: filter information, add
    controls, or feed the data from a remote server. If we want to attach a legend,
    we can simply create such an object before the graph is rendered, and attach it
    to our graph object.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方法可以自定义`chart` ID：过滤信息，添加控件，或者从远程服务器提供数据。如果我们想要附加一个图例，我们可以在图形渲染之前简单地创建这样一个对象，并将其附加到我们的图形对象上。
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Displaying a force directed graph
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示力导向图
- en: In this recipe, we will create a graph with some of the characters of the play
    *Hamlet* by *William Shakespeare*. The idea is to visualize the connections between
    the characters in a fun and interactive way. The type of graph that will be visualized
    is known as **force directed** graph.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个图表，其中包含*威廉·莎士比亚*的戏剧*哈姆雷特*中的一些角色。想法是以一种有趣和互动的方式可视化角色之间的联系。将被可视化的图表类型被称为**力导向**图。
- en: '![Displaying a force directed graph](img/9282OT_03_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![显示力导向图](img/9282OT_03_02.jpg)'
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In order to visualize the connections between the characters, they need to be
    stored somehow. There is a sample `data.json` file that is a part of the code
    examples that you can use. Although we do encourage you to create your own sample
    data or at least play around with the existing one, but for the purpose of simplicity,
    we will be using the one provided in the code examples.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化角色之间的联系，它们需要以某种方式存储。有一个名为`data.json`的示例文件，是代码示例的一部分，您可以使用它。尽管我们鼓励您创建自己的示例数据，或者至少玩弄现有的数据，但出于简单起见，我们将使用代码示例中提供的数据。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will be creating a JSON file to contain the relation and image information,
    the HTML, and the accompanying JavaScript.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个JSON文件，包含关系和图像信息，HTML和相关的JavaScript。
- en: First, we can start with the creation of the data for the recipe. We can define
    the `nodes` list, where the object would be placed with the properties `name`
    that will designate the name of the node, **icon** will be the URL of the image,
    and group will be
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们可以开始创建食谱的数据。我们可以定义`nodes`列表，其中对象将被放置，具有`name`属性，指定节点的名称，**icon**将是图像的URL，group将是
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After adding the nodes in the data, we also need information about how they
    are connected. To do that we will add a list of `links` to the model.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加数据中的节点之后，我们还需要关于它们如何连接的信息。为此，我们将向模型添加一个`links`列表。
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now we can proceed with the creation of the HTML file. For this implementation
    we will be using `D3.js`, so we need to include it and also setup two CSS classes,
    one for the link and the other for the node text.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以继续创建HTML文件。对于这个实现，我们将使用`D3.js`，所以我们需要包含它，并设置两个CSS类，一个用于链接，另一个用于节点文本。
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After this, we can start adding the parts in the main script. As in the previous
    examples, we will first add the SVG into the `body` element with some predefined
    size.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们可以开始在主脚本中添加部分。与之前的示例一样，我们首先将SVG添加到`body`元素中，并设置一些预定义的大小。
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now we can create the layout for the graph.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以为图形创建布局。
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The next step is to map the data from the JSON document with the force layout
    and create all of the `links` and `nodes`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将JSON文档中的数据映射到力布局，并创建所有的`links`和`nodes`。
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We then append `image` from the model, defined as `icon` and `text` with the
    name of the node.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们从模型中附加`image`，定义为`icon`和节点名称的`text`。
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Also on force changes and updates, we will set up a listener that will update
    the links and nodes positions.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，对于力的变化和更新，我们将设置一个监听器，用于更新链接和节点位置。
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we will take a look at the CSS, and more specifically at `pointer-events`
    that we have set to `all`. This setting makes the element to be the target of
    mouse-events, when the pointer is in the interior or over the perimeter, and can
    only be used on the SVG elements. In order to disable the selection of the text,
    we use the CSS property `user-select`, and set it to the value of `none`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一下CSS，更具体地说是我们设置为`all`的`pointer-events`。这个设置使元素成为鼠标事件的目标，当指针在内部或边缘上时，只能用在SVG元素上。为了禁用文本的选择，我们使用CSS属性`user-select`，并将其设置为`none`的值。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`user-select` is not consistent across browsers, and in order to use it, we
    can add browser specific CSS hack, such as the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`user-select`在各个浏览器中不一致，为了使用它，我们可以添加特定于浏览器的CSS hack，例如以下内容：'
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The layout used for this recipe is `d3.layout.force()` that does not create
    a fixed visual representation, but instead we define the parameters, such as `friction`,
    `distance`, and `gravity strength`. Depending on the data and mouse interactions,
    we get different views.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用的布局是`d3.layout.force()`，它不会创建固定的视觉表示，而是我们定义参数，如`friction`、`distance`和`gravity
    strength`。根据数据和鼠标交互，我们会得到不同的视图。
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When constructing the layout after setting the parameters and the data information
    about the `links` and `nodes`, we need to call the `start()` method.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置参数和关于`links`和`nodes`的数据信息后构建布局时，我们需要调用`start()`方法。
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We want to create the `g` element for all the `nodes` from our data, and set
    the appropriate CSS class `node`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要为数据中的所有节点创建`g`元素，并设置适当的CSS类`node`。
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Also, add a behavior to allow interactive dragging using `.call(force.drag)`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还要添加一个行为，以允许使用`.call(force.drag)`进行交互拖动。
- en: The `g` element represents a container that can be used to group other elements.
    Transformations that are applied to the `g` element are also performed on all
    of its child elements. This feature makes the element a good pick for organizing
    different section of view blocks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`g`元素表示一个容器，可用于对其他元素进行分组。应用于`g`元素的转换也会应用于其所有子元素。这个特性使得该元素成为组织不同视图块的好选择。'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More on the `g` element can be found in the SVG specification from [http://www.w3.org/TR/SVG/struct.html#Groups](http://www.w3.org/TR/SVG/struct.html#Groups).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`g`元素的更多信息可以在SVG规范中找到[http://www.w3.org/TR/SVG/struct.html#Groups](http://www.w3.org/TR/SVG/struct.html#Groups)。
- en: The `force.drag()` method is predefined in the `d3.layout.force()` method. Drag
    event is fixed to work on `mouseover` to allow catch of moving nodes. When the
    `mousedown` event is received, the nodes are dragged to the mouse position. Interesting
    is that this behavior supports the touch events from mobile devices, such as iOS
    or Android. In order to disable the click events for the nodes while dragging,
    `mouseup` is captured and stopped from propagating.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`force.drag()`方法在`d3.layout.force()`方法中预定义。拖动事件固定在`mouseover`上，以允许捕捉移动节点。当接收到`mousedown`事件时，节点被拖动到鼠标位置。有趣的是，这种行为支持来自移动设备（如iOS或Android）的触摸事件。为了在拖动时禁用节点的点击事件，我们捕获并阻止了`mouseup`事件的传播。'
- en: To create an image for the nodes, we add SVG `image` tag with `xlink:href` to
    the URL from the data stored in `d.icon`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要为节点创建图像，我们使用SVG `image`标签，并使用`xlink:href`将URL添加到存储在`d.icon`中的数据。
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In order to have the update from the layout, there are `tick` events that are
    dispatched on each tick of the visualization. In order to keep the elements updated,
    we added a listener for the event.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从布局中获得更新，每次可视化的每个刻度都会分派`tick`事件。为了保持元素更新，我们为该事件添加了一个监听器。
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The listener sets the correct positions for the movements to the `link` and
    `node`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器为`link`和`node`的移动设置了正确的位置。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One of the more obvious options here is to add more interactions to the visualization.
    Nodes can be made collapsible and links can be added to the nodes. Relationships
    between the nodes can be set to more fine-grained levels There are ways to make
    the data refresh over time and reload certain portions of the graph. If needed,
    there can be preset expected layout, so that the node will try to confirm a certain
    positioning.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里更明显的选项之一是为可视化添加更多交互。节点可以被制作成可折叠的，还可以为节点添加链接。节点之间的关系可以设置为更细粒度的级别。有多种方法可以使数据随时间刷新并重新加载图表的某些部分。如果需要，可以预设期望的布局，以便节点将尝试确认某个特定的位置。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Learn more on D3 force layout and the related functionality from [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout)了解更多关于D3力导向布局和相关功能的信息。
- en: Making a live range chart filter
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作实时范围图表过滤器
- en: When working with large amounts of data, we usually want to add some way of
    filtering or picking up what data to show. This recipe will cover a simple range
    filter for the graph and a chart that displays time-varying series of data.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大量数据时，通常希望添加一些过滤或选择要显示的数据的方法。本教程将涵盖图形的简单范围过滤器和显示时间变化数据系列的图表。
- en: '![Making a live range chart filter](img/9282OT_03_03.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![制作实时范围图表过滤器](img/9282OT_03_03.jpg)'
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the same toolkit from the *Making a motion chart* recipe for
    creating interactive graphs. The necessary library Rickshaw can be retrieved from
    [http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/),
    and is part of the example code as well. Besides that we also need D3, because
    Rickshaw works on top of it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与*制作动态图表*教程相同的工具包来创建交互式图表。必要的库Rickshaw可以从[http://code.shutterstock.com/rickshaw/](http://code.shutterstock.com/rickshaw/)获取，并且也是示例代码的一部分。除此之外，我们还需要D3，因为Rickshaw是基于D3的。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: We will create an HTML page containing a JavaScript file while generating a
    random data for the graph, and also add additional filtering elements.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含JavaScript文件的HTML页面，同时为图形生成随机数据，并添加额外的过滤元素。
- en: First, we will make an HTML page and include the required CSS by the libraries.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将制作一个HTML页面，并包含所需的库的CSS。
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice that we add an additional file `legend.css` that contains the layout
    information about the graph legend. We can then add our custom CSS file.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们添加了一个额外的文件`legend.css`，其中包含有关图例的布局信息。然后我们可以添加我们自定义的CSS文件。
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The HTML placeholders for the graph, legend, and slide will be the regular `div`
    elements.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于图形、图例和幻灯片的HTML占位符将是常规的`div`元素。
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We add the dependencies for the libraries. Besides Rickshaw and its dependency
    D3, we are going to add jQuery and jQuery UI, because we will be using controls
    from there. And now, we can proceed to the main JavaScript, and start with defining
    the color palette and the refresh rate.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了库的依赖项。除了Rickshaw及其依赖项D3之外，我们还将添加jQuery和jQuery UI，因为我们将使用其中的控件。现在，我们可以继续进行主要的JavaScript，并开始定义颜色调色板和刷新率。
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The next step is to create the graph in the chart element with `900px` by `500px`
    size.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在大小为`900px` x `500px`的图表元素中创建图表。
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As for the `slider` property, Rickshaw provides us with a ready control that
    we can connect to the graph we created.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于`slider`属性，Rickshaw为我们提供了一个现成的控件，我们可以将其连接到我们创建的图表上。
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To have a Y axis drawn, we can create it, and can connect it to our graph.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要绘制Y轴，我们可以创建它，并将其连接到我们的图表上。
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For creation of a legend on the colors and names of the data samples displayed,
    there is a control that we can use and connect with our graph as well, while we
    also specify the element where it will get rendered.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在显示的数据样本上创建颜色和名称的图例，我们可以使用一个控件，并将其连接到我们的图表上，同时还要指定它将被渲染的元素。
- en: '[PRE36]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Because this example has a time-series component, we will generate random data.
    After the generation of the data, we call `graph.series.addData(data)` and re-render
    the `graph` and `yAxis` property. This generation, data update, and rendering
    happens on every `refreshRate` milliseconds.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这个示例有一个时间序列组件，我们将生成随机数据。在生成数据之后，我们调用`graph.series.addData(data)`并重新渲染`graph`和`yAxis`属性。这个生成、数据更新和渲染发生在每个`refreshRate`毫秒。
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: Let's take a look at the graph's series input parameters.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看图表的系列输入参数。
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Besides the graph data we also have a `name` and a `color` property. Now, the
    first thing you might ask yourself is, why have a `color` property and input a
    palette as well? Well, we do this in order to enable the other plugins to be able
    to read this information.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图表数据，我们还有`name`和`color`属性。现在，你可能会问自己，为什么有一个`color`属性并输入一个调色板呢？嗯，我们这样做是为了使其他插件能够读取这些信息。
- en: One of these plugins is `Rickshaw.Graph.Legend` that constructs a legend-box
    displaying info for each of the data streams.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个插件是`Rickshaw.Graph.Legend`，它构建一个显示每个数据流信息的图例框。
- en: We also add a range-filtering on the X axis with `Rickshaw.Graph.RangeSlider`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在X轴上添加了一个范围过滤器`Rickshaw.Graph.RangeSlider`。
- en: '[PRE39]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the background, the `slider` property uses jQuery UI control that is set
    to `range:true`. The minimum and maximum values are used from the current graph
    data. The `slider` property has a `slide` event that is used to limit the sample
    size displayed on the graph.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，`slider`属性使用了jQuery UI控件，设置为`range:true`。最小值和最大值来自当前图表数据。`slider`属性有一个`slide`事件，用于限制图表上显示的样本大小。
- en: Because there is data being added constantly to the graph, the `slider` properties
    min and max values are set accordingly by an event from the graph. These are some
    of the considerations that you need to keep in mind while you are developing a
    custom control.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因为数据不断添加到图表中，`slider`属性的最小值和最大值根据图表的事件相应地设置。这些都是在开发自定义控件时需要牢记的一些考虑因素。
- en: '![How it works...](img/9282OT_03_04.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/9282OT_03_04.jpg)'
- en: Slider set to only show a given portion of time. Because the time changes the
    slider is moved alongside with the data.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将滑块设置为仅显示给定时间的一部分。因为时间改变了，滑块会随着数据一起移动。
- en: Making an image carousel
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作图像轮播
- en: Image carousels are among the most popular marketing and showcase tools used
    on websites. They can also be used to show image galleries or presentations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图像轮播是网站上使用的最受欢迎的营销和展示工具之一。它们也可以用于显示图像库或演示文稿。
- en: In this recipe we're going to build an image carousel. It will support automatic
    timed transitions that stop if the user moves over the carousel area. It will
    have a navigation area consisting of control rectangles denoting the currently
    active images and the number of remaining images.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将构建一个图像轮播。它将支持自动定时转换，如果用户移动到轮播区域，转换将停止。它将有一个导航区域，包括表示当前活动图像和剩余图像数量的控制矩形。
- en: This will be a 3D carousel utilizing HTLM5 features, such as CSS3 3D transforms.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个利用HTLM5功能的3D轮播，如CSS3 3D转换。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need three images in the directory along with our code. They should
    be named `1.jpg`, `2.jpg`, and `3.jpg` respectively.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在目录中与我们的代码一起放置三张图片。它们应分别命名为`1.jpg`，`2.jpg`和`3.jpg`。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: We will be creating the image carousel by using jQuery, HTML5, and CSS transformations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用jQuery、HTML5和CSS转换来创建图像轮播。
- en: First, we will create an HTML page with a carousel and the gray image controls.
    We're going to position the controls in the middle-bottom section of the carousel.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个带有轮播和灰色图像控件的HTML页面。我们将把控件放在轮播的中下部分。
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To get a 3D view that has depth, the main container must have a `perspective`
    property. It denotes the distance of the viewer from the screen. It will make
    nearby things look larger, and distant things look smaller.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了获得具有深度的3D视图，主容器必须具有`perspective`属性。它表示观察者与屏幕的距离。它会使附近的东西看起来更大，而远处的东西看起来更小。
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We're going to place all our images inside the rotator, then rotate the rotator
    itself. To do this, rotations on the rotator must preserve the 3D transforms of
    the child elements.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把所有的图像放在旋转器内，然后旋转旋转器本身。为了做到这一点，旋转器上的旋转必须保持子元素的3D转换。
- en: Additionally, both the rotator and the images will have a transition animation.
    We specify this by adding the `transition` property. In our example, transitions
    will work on transforms and will be one second long.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，旋转器和图像都将具有过渡动画。我们通过添加`transition`属性来指定这一点。在我们的示例中，过渡将在变换上起作用，并且持续一秒钟。
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The code that animates the carousel and makes the controls clickable will be
    in `example.js`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轮播动画和可点击控件的代码将在`example.js`中。
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We will place all the images in their appropriate position in the 3D space,
    each one rotated by a multiple of an angle and moved by a calculated amount. For
    more information see the *How it works...* section of this recipe.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把所有图像放在它们在3D空间中的适当位置，每个图像都旋转了一个角度的倍数，并且移动了一个计算出的量。有关更多信息，请参阅本食谱的*它是如何工作...*部分。
- en: '[PRE44]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: For each image we add a control marker, which can activate that image.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个图像，我们添加一个控制标记，可以激活该图像。
- en: '[PRE45]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Finally, let's write the functions that change the position of the carousel.
    The `change` function changes the position by `dir` elements, and `changeTo` changes
    the position directly to the specified element. Then we can start our carousel
    timer.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们编写改变旋转木马位置的函数。`change`函数通过`dir`元素改变位置，`changeTo`直接将位置更改为指定的元素。然后我们可以启动我们的旋转木马计时器。
- en: '[PRE46]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '![How it works...](img/9282OT_03_05.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作...](img/9282OT_03_05.jpg)'
- en: 'Building our carousel depends on the number of images we''re going to use.
    To get a better sense of what exactly happens when we apply our transforms, lets
    look at the top view of a carousel. The preceding figure shows a carousel with
    five sides. Each side is translated away from the center point by a distance `z`,
    then rotated by an angle `a` multiple times. The angle can be calculated as follows:
    `a = 360 / number Of sides`.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旋转木马的构建取决于我们将要使用的图像数量。为了更好地了解我们应用变换时到底发生了什么，让我们看一下旋转木马的俯视图。前面的图显示了一个有五个面的旋转木马。每个面都被一个距离`z`从中心点移开，然后以角度`a`旋转多次。角度可以计算如下：`a
    = 360 / 边数`。
- en: The translation `z` however is slightly harder to calculate. To do that, we
    need to look at the triangle that consists of `z` and half of the sides width.
    By applying a trigonometric equation `tan(a/2) = (w/2) / z` we can calculate `z
    = w/2 / tan(a/2)`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，翻译`z`稍微难以计算。为了做到这一点，我们需要看一下由`z`和一半边宽组成的三角形。通过应用三角函数方程`tan(a/2) = (w/2) /
    z`，我们可以计算`z = w/2 / tan(a/2)`。
- en: To rotate the carousel, we rotate the `rotator` parent by an angle `a` every
    5 seconds. The user is allowed to click on the controls to change the rotation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了旋转旋转木马，我们每5秒将`rotator`父元素旋转一个角度`a`。用户可以点击控件来改变旋转。
- en: We also move `rotator` in the opposite direction by `z` to make the distance
    of the front element in the carousel the same, as if it hasn't been translated.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还通过`z`将`rotator`向相反方向移动，以使旋转木马中前端元素的距离保持不变，就好像它没有被翻译过一样。
- en: We hope that this recipe added some fun and freshness into the slightly dull
    topic of carousel making, by using some new HTML5 features, which will surely
    wow the users.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这个食谱通过使用一些新的HTML5功能为制作旋转木马这个略显沉闷的主题增添一些乐趣和新鲜感，这肯定会让用户们大吃一惊。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some of the CSS3 features are not widely available as of this writing. Internet
    Explorer 9, which otherwise does support a lot of HTML5 doesn't have them, though
    they're available in Internet Explorer 10\. Before using these techniques, review
    the target browser requirements.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，一些CSS3功能并不是普遍可用的。尽管Internet Explorer 9在其他方面支持大量HTML5，但它并没有这些功能，尽管它们在Internet
    Explorer 10中是可用的。在使用这些技术之前，请查看目标浏览器的要求。
- en: Zooming and panning a chart
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放和平移图表
- en: The charts we discussed in the preceding chapter of this book were static. As
    such, they're great for visualizing limited quantities of data. However, when
    the dataset grows too large, users might be needed to interactively choose the
    range of data shown in the chart.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书前一章讨论的图表是静态的。因此，它们非常适合可视化有限数量的数据。但是，当数据集变得太大时，用户可能需要交互地选择图表中显示的数据范围。
- en: To enable this, we're going to make a chart that is capable of interactive controls,
    such as zooming and panning. The Flot chart library easily supports this with
    its navigation plugin.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将制作一个能够进行交互控制的图表，例如缩放和平移。Flot图表库通过其导航插件轻松支持此功能。
- en: In this recipe, we're going to show a one week temperature history at 30 minute
    increments. We're going to allow the user to zoom and pan the history.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将以30分钟的间隔显示一周的温度历史。我们将允许用户缩放和平移历史。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll need to download Flot from the official website [http://www.flotcharts.org/](http://www.flotcharts.org/)
    and extract the contents to a separate folder `flot`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从官方网站[http://www.flotcharts.org/](http://www.flotcharts.org/)下载Flot，并将内容提取到一个名为`flot`的单独文件夹中。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To create this recipe, we will add Flot, jQuery, and create an HTML file.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个食谱，我们将添加Flot、jQuery，并创建一个HTML文件。
- en: First, we create a basic HTML page with a placeholder for our chart. We're also
    going to include jQuery (needed by Flot), Flot itself, and the Flot navigate plugin.
    Flot needs to draw the chart canvas a placeholder `div`, so we're going to provide
    one. The placeholder needs to have `width` and `height` specified via CSS; otherwise
    Flot may fail to draw the chart correctly.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个基本的HTML页面，其中包含一个图表的占位符。我们还将包括jQuery（Flot所需的），Flot本身和Flot导航插件。Flot需要在一个占位符`div`中绘制图表画布，因此我们将提供一个。占位符需要通过CSS指定`width`和`height`；否则Flot可能无法正确绘制图表。
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We're going to add our code in `example.js`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`example.js`中添加我们的代码。
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To draw the chart, first we wrote the function `getData` to generate some convincing
    looking random data of temperature that rises during the day and falls during
    the night. Because it is callback based, we can replace this function with one
    that fetches the data from a server.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制图表，首先我们编写了函数`getData`来生成一些看起来令人信服的随机温度数据，白天上升，夜晚下降。由于它是基于回调的，我们可以用一个从服务器获取数据的函数来替换这个函数。
- en: The plot drawing function `$.plot` takes three arguments. The first is the plot
    placeholder, the second is an array of series we need to draw, and the third are
    drawing options. We're going to pass only one series.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图函数`$.plot`需要三个参数。第一个是绘图占位符，第二个是我们需要绘制的系列数组，第三个是绘图选项。我们将只传递一个系列。
- en: The new additions to our chart are to the plot options and the zoom-out button.
    We specify the zoom and pan range in the axes options. Our Y axis doesn't support
    zooming and panning, so it has been disabled.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们图表的新添加是绘图选项和缩小按钮。我们在轴选项中指定了缩放和平移范围。我们的Y轴不支持缩放和平移，因此已被禁用。
- en: The `zoomRange` option specifies the minimum and maximum range of the full plot
    when zooming. For example, our options specify that the plot will zoom to show
    at least half a day and at most a week in its full range.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`zoomRange`选项指定了在缩放时完整绘图的最小和最大范围。例如，我们的选项指定绘图将缩放至少显示半天，最多显示一周的完整范围。'
- en: The `panRange` option specifies the minimal minimum and maximal maximum on the
    X axis. In our example, we specify that the user cannot pan the chart to make
    its minimum value go below `weekAgo`, and cannot pan it to make its maximum value
    go above `now`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`panRange`选项指定了X轴上的最小最小值和最大最大值。在我们的示例中，我们指定用户不能将图表平移以使其最小值低于`weekAgo`，也不能将其最大值高于`now`。'
- en: Finally, we specify that zooming and panning will be interactive. This means
    that the user can zoom-in using double-click, and can pan it by dragging with
    the mouse.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们指定了缩放和平移将是交互式的。这意味着用户可以双击放大，也可以通过鼠标拖动进行平移。
- en: To allow the user to reset the zoom, we add a `zoomOut` button, which calls
    the `zoomOut` function. We need to update this function whenever we redraw the
    plot, because the object returned from the `$.plot` call changes. This way multiple
    `getData` calls are allowed.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户重置缩放，我们添加了一个`zoomOut`按钮，它调用`zoomOut`函数。每当我们重新绘制绘图时，我们需要更新此函数，因为从`$.plot`调用返回的对象会发生变化。这样就允许多次调用`getData`。
- en: With this, we've added interactivity to our charts, allowing the user to customize
    the range of data they would like to view. Flot navigation works with all kinds
    of charts; be sure to check out the preceding chapter to see an overview of some
    of the chart types that are supported.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们为我们的图表添加了交互性，允许用户自定义他们想要查看的数据范围。Flot导航适用于各种图表；务必查看前一章，以了解支持的一些图表类型的概述。
- en: Using the web notifications API
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Web通知API
- en: Web notifications are one of the newer features added into modern browsers.
    They are intended as alerts for the user outside of the web page context. The
    idea is for them to be browsers intended, for example, when using a mobile browser
    notification could go into the home screen of the device. On the desktop usually
    they show up on the right-corner of the screen, at least on most desktop environments.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Web通知是现代浏览器中添加的较新功能之一。它们旨在作为用户在网页上下文之外的警报。想法是它们是为浏览器而设计的，例如，在使用移动浏览器时，通知可以进入设备的主屏幕。在桌面上，它们通常显示在屏幕的右上角，至少在大多数桌面环境中是这样。
- en: '![Using the web notifications API](img/9282OT_03_06.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![使用Web通知API](img/9282OT_03_06.jpg)'
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For the purpose of this example, we will be using data derived from Project
    Gutenberg [http://www.gutenberg.org/](http://www.gutenberg.org/). The data are
    the tips from the chapter *Use of spies* from *Sun Tzu's -Art of war* and can
    be found in this recipe code example under `data.json`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本例的目的，我们将使用从古腾堡计划[http://www.gutenberg.org/](http://www.gutenberg.org/)获取的数据。数据是来自《孙子兵法》中*间谍的使用*章节的提示，可以在此处的`data.json`代码示例下找到。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To create this recipe we will create an HTML file, and use jQuery for simplicity.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个示例，我们将创建一个HTML文件，并使用jQuery来简化。
- en: First, we can start with the HTML part, where we just create a simple `button`
    and a `div` element with the ID `fallback` that we are going to use, if the browser
    does not support notifications.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们可以从HTML部分开始，我们只需创建一个简单的`button`和一个带有ID`fallback`的`div`元素，如果浏览器不支持通知，我们将使用它。
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Let's first create the `notification.js` file that we will use as utility to
    create `simpleNotifations.show(data)`. The first check we have to do is verify
    support for `webkitNotifications`, the only full implementation at the time of
    writing.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建`notification.js`文件，我们将用它作为创建`simpleNotifations.show(data)`的实用程序。我们首先要做的检查是验证对`webkitNotifications`的支持，在撰写本文时，这是唯一完整的实现。
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Next is the check for the real-standard-based web notification object, where
    in future, as browsers implement it more and more, it should be the first one.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是对基于真实标准的Web通知对象的检查，在未来，随着浏览器对其实现的不断增加，它应该是第一个。
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Finally the case; if there is no support for any type of notification by the
    system we just use a callback to handle this case, where we also close the utility.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一种情况；如果系统不支持任何类型的通知，我们只需使用回调来处理这种情况，同时关闭实用程序。
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Next, we can continue with creating the `display.js` file that will get a random
    quote from the data, and call the previously defined `simpleNotification.show()`
    method. First we will do the fetching.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以继续创建`display.js`文件，该文件将从数据中获取一个随机引用，并调用先前定义的`simpleNotification.show()`方法。首先我们将进行获取。
- en: '[PRE53]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Because we want some default behavior for all the notifications, such as icon,
    default message, or fallback function, we do the callout with a default `data`
    object.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们希望所有通知都有一些默认行为，例如图标、默认消息或回退函数，所以我们使用默认的`data`对象进行调用。
- en: '[PRE54]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We will take a deeper look at the `notification.js` file, where most of the
    notification logic is. The check tests we did on the notifications `if (window.webkitNotifications)`
    and `if (window.Notification)` try to see if there is such object in the browser.
    If no such object is there, this means there is no support for that type of notification.
    While on the other hand, if the `if` condition was met, this means we have support,
    and can ask for permission.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更深入地研究`notification.js`文件，其中大部分通知逻辑都在其中。我们对通知的检查测试`if (window.webkitNotifications)`和`if
    (window.Notification)`尝试查看浏览器中是否有这样的对象。如果没有这样的对象，这意味着不支持该类型的通知。另一方面，如果满足了`if`条件，这意味着我们有支持，并且可以请求权限。
- en: '[PRE55]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After that, we are free to create the notification and show it with the given
    parameters for `icon`, `title`, and `body`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以自由创建通知，并使用给定的`icon`、`title`和`body`参数显示它。
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If we want the notification to hide after a given timeout, we add the following
    function:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望通知在给定的超时后隐藏，我们添加以下函数：
- en: '[PRE57]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: On the other hand, if we do not have the permission to display a notification,
    we need to request it from the user, where we can do the call to our function
    once again.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们没有权限显示通知，我们需要从用户那里请求，然后再次调用我们的函数。
- en: '[PRE58]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tip
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The request for the permission must come from a user-triggered event on some
    HTML element. In our case this is the `onClick` function on the button. More specifically
    the jQuery click `$("#show").click(function (){ ...}`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对权限的请求必须来自用户触发的HTML元素上的事件。在我们的情况下，这是按钮上的`onClick`函数。更具体地说是jQuery点击`$("#show").click(function
    (){ ...}`。
- en: We don't need to get into too much details for the fetching of the data, but
    in our default object we have the `icon` parameter with the value `images/war.png`
    that we will get used for the notification, as well as the `fallback` function
    and the `timeout` configuration.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要过多关注数据的获取，但在我们的默认对象中，我们有`icon`参数的值为`images/war.png`，我们将用于通知，以及`fallback`函数和`timeout`配置。
- en: '[PRE59]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, Chrome is the only browser with full support for the
    notifications for quite some time, but Safari 6.0 and Firefox 22 Aurora also have
    initial implementations.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Chrome是唯一长期支持通知的浏览器，但Safari 6.0和Firefox 22 Aurora也有初始实现。
- en: The full specifications for web notifications can be found from [http://www.w3.org/TR/notifications/](http://www.w3.org/TR/notifications/).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Web通知的完整规范可以在[http://www.w3.org/TR/notifications/](http://www.w3.org/TR/notifications/)中找到。
- en: Creating interactive Geo charts from a dataset
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据集创建交互式地理图表
- en: In this recipe, we will see how to create cool-looking interactive Geo charts,
    and how to use them for the display of data. These are becoming very common for
    the display of statistics on larger geographical area, usually from election results
    or global warming effects. In order to have a map covering multiple different
    countries, we will visualize the member and member applicant stats of the Commonwealth
    of Nations.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何创建看起来很酷的交互式地理图表，以及如何用它们来显示数据。这在显示更大地理区域的统计数据方面变得非常普遍，通常是选举结果或全球变暖影响。为了拥有覆盖多个不同国家的地图，我们将可视化英联邦成员和成员申请者的统计数据。
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Commonwealth of Nations is a voluntary association of 54 independent sovereign
    states (one of whose membership is currently suspended). Most are former British
    colonies, or dependencies of these colonies. No one government in the Commonwealth
    exercises power over the others, as in a political union. Rather, the relationship
    is one of an international organization through which countries with diverse social,
    political, and economic backgrounds are regarded as equal in status, and cooperate
    within a framework of common values and goals, as outlined in the Singapore Declaration,
    which can be read from
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 英联邦是由54个独立主权国家自愿组成的联合体（其中一个成员目前被暂停）。大多数是前英国殖民地或这些殖民地的附属地。英联邦中没有一个政府对其他国家行使权力，就像政治联盟一样。相反，这种关系是一个国际组织，通过这个组织，具有不同社会、政治和经济背景的国家被视为地位平等，并在共同价值观和目标的框架内合作，这些价值观和目标在新加坡宣言中有所阐述，可以从中阅读
- en: '[http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations](http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations](http://en.wikipedia.org/wiki/Member_states_of_the_Commonwealth_of_Nations)。'
- en: '![Creating interactive Geo charts from a dataset](img/9282OT_03_07.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![从数据集创建交互式地理图表](img/9282OT_03_07.jpg)'
- en: Getting ready
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are JSON object with definition of boundaries for valorous areas and scale
    levels mostly derived from the public domain dataset available at [http://www.naturalearthdata.com/downloads/](http://www.naturalearthdata.com/downloads/).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 有JSON对象定义了各个地区的边界和比例尺级别，大部分是从公共领域数据集中获取的，可在[http://www.naturalearthdata.com/downloads/](http://www.naturalearthdata.com/downloads/)上找到。
- en: In our case, we use a `world-data.json` file that can be found as part of the
    code examples.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们使用了一个`world-data.json`文件，可以在代码示例中找到。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: After getting the `world-data.json` file. we can start by creating the HTML
    and JavaScript files.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`world-data.json`文件后，我们可以开始创建HTML和JavaScript文件。
- en: Let's first take a look at this country boundaries data in the `world-data.json`
    file for example, at the Bahamas.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先看一下`world-data.json`文件中的这些国家边界数据，例如巴哈马。
- en: '[PRE60]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In their properties we have the name of the country, and the geometry of the
    country represented as a polygon with multiple points.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在它们的属性中，我们有国家的名称，以及以多个点表示的国家的几何形状。
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many different ways to create and represent the boundaries data. In
    order to create your own boundaries or get already available data, Open Street
    Map( [http://www.openstreetmap.org/](http://www.openstreetmap.org/) ) is a great
    project that offers this options. For example, one of the tools called Osmosis
    can be used to get the vector data about certain objects at many different zoom
    levels from [http://wiki.openstreetmap.org/wiki/Osmosis](http://wiki.openstreetmap.org/wiki/Osmosis).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的方法来创建和表示边界数据。为了创建自己的边界或获取已有数据，Open Street Map([http://www.openstreetmap.org/](http://www.openstreetmap.org/))是一个提供这些选项的伟大项目。例如，名为Osmosis的工具可以用于从[http://wiki.openstreetmap.org/wiki/Osmosis](http://wiki.openstreetmap.org/wiki/Osmosis)获取许多不同缩放级别的有关某些对象的矢量数据。
- en: We can proceed with adding the CSS and dependencies to `D3.js` in the head.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以继续在头部添加CSS和`D3.js`的依赖项。
- en: '[PRE61]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In the body part we directly start with the `example.js` file and define helpers
    with the data about the country names part of the euro-zone and utilities for
    generation of random numbers and colors.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在body部分，我们直接从`example.js`文件开始，并定义有关欧元区国家名称部分和生成随机数字和颜色的实用程序。
- en: '[PRE62]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: There we add a utility function for getting a random color, if the country is
    part of the zone and `#bbb`, if not.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那里，我们添加了一个用于获取随机颜色的实用函数，如果国家是该区域的一部分，则为`#bbb`。
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Then to get the cool frame-like effect, we set the margins around it.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了获得类似框架的效果，我们设置了周围的边距。
- en: '[PRE64]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Next we define the types of projection, zoom behavior, and path, where the zoom
    behavior add a callback on the `zoom` event to the `move()` method.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义投影、缩放行为和路径的类型，其中缩放行为在`zoom`事件上添加了对`move()`方法的回调。
- en: '[PRE65]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We create the SVG image with the previously set values for width and height,
    and call the zoom behaviors to get into the selected zoom level.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用先前设置的宽度和高度创建SVG图像，并调用缩放行为以进入所选的缩放级别。
- en: '[PRE66]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: First, we create the `g` element for the selected features of the map.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为地图的选定特征创建了`g`元素。
- en: '[PRE67]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: We then add the frame around the map by creating the SVG rectangle.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过创建SVG矩形为地图添加了一个框架。
- en: '[PRE68]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Now we need to get the data from the `world-data.json` file, create the paths
    for the countries, and fill them with the appropriate color depending on whether
    `d.properties.name` is part of the needed group.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要从`world-data.json`文件中获取数据，为各个国家创建路径，并根据`d.properties.name`是否属于所需组来填充它们的适当颜色。
- en: '[PRE69]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Finally, the move() function is called on zoom.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在缩放时调用`move()`函数。
- en: '[PRE70]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, `d3.geo.mercator()` constructs a **Mercator projection** from a spherical
    data representation.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`d3.geo.mercator()`从球形数据表示构造了一个**墨卡托投影**。
- en: Note
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Mercator projection is a cylindrical map projection created by Gerardus
    Mercator in 1569\. It is very commonly used to represent maps, but it has the
    problem that the size and shape of the objects gets distorted as we move from
    the Equator towards the poles. More on Mercator projection can be found from [https://en.wikipedia.org/wiki/Mercator_projection](https://en.wikipedia.org/wiki/Mercator_projection)
    and [https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg](https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 墨卡托投影是由杰拉尔德斯·墨卡托在1569年创建的柱状地图投影。它被广泛用于表示地图，但它的问题是随着我们从赤道向极地移动，对象的大小和形状会发生扭曲。有关墨卡托投影的更多信息，请参见[https://en.wikipedia.org/wiki/Mercator_projection](https://en.wikipedia.org/wiki/Mercator_projection)和[https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg](https://en.wikipedia.org/wiki/File:Cylindrical_Projection_basics2.svg)。
- en: '![How it works...](img/9282OT_03_08.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/9282OT_03_08.jpg)'
- en: The `d3.geo.path()` method creates a new geographic generation with some predefined
    settings. We set this path generator to use our `projection` type.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.geo.path()`方法使用一些预定义的设置创建一个新的地理生成。我们将此路径生成器设置为使用我们的`projection`类型。'
- en: '[PRE71]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The `d3.behavior.zoom()` method enables us to add automatic zoom functionality
    to our `projection` type with the given scale and range of zoom in `scaleExtent`.
    Additionally, this creates a listener on the `zoom` event doing a call to the
    `move()` function.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.behavior.zoom()`方法使我们能够为我们的`projection`类型添加自动缩放功能，并在`scaleExtent`中给定缩放的比例和范围。此外，这会在`zoom`事件上创建一个监听器，调用`move()`函数。'
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Main features that creates the counties is that we get the feature data from
    `world-data` and create the SVG path that actually represent individual countries,
    and we can then style and fill it with color.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 创建县的主要特点是，我们从`world-data`获取要素数据，并创建实际表示各个国家的SVG路径，然后可以对其进行样式和填充颜色。
- en: '[PRE73]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: This type of map is also known as the choropleth map meaning a thematic map,
    where some statistical variable is displayed.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的地图也被称为分级地图，意思是显示某些统计变量的专题地图。
- en: The file `js/world-data.json` contains the borders of each country with some
    metadata. The metadata is matched against our commonwealth list of countries.
    If they are a match, the country is colored. Note that there are few more countries
    that are not available in our map data.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`js/world-data.json`包含每个国家的边界和一些元数据。元数据与我们的英联邦国家列表进行匹配。如果它们匹配，国家就会被着色。请注意，我们的地图数据中还有一些国家是不可用的。
- en: '![How it works...](img/9282OT_03_09.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/9282OT_03_09.jpg)'
- en: There's more...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When working with JavaScript and maps there are two formats that often pop up.
    One is GeoJSON ([http://www.geojson.org/](http://www.geojson.org/)), a format
    for a variety of geographic data structures. The other is named TopoJSON ([https://github.com/mbostock/topojson](https://github.com/mbostock/topojson)),
    and it is an extension of GeoJSON that encodes topology. TopoJSON uses line segments
    called arcs to get better characteristics than GeoJSON.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理JavaScript和地图时，经常出现两种格式。一种是GeoJSON（[http://www.geojson.org/](http://www.geojson.org/)），一种用于各种地理数据结构的格式。另一种是名为TopoJSON（[https://github.com/mbostock/topojson](https://github.com/mbostock/topojson)）的格式，它是GeoJSON的扩展，用于编码拓扑。TopoJSON使用称为弧的线段来获得比GeoJSON更好的特性。
- en: There is a company named CartoDB, [http://cartodb.com/](http://cartodb.com/)
    that specializes in the creation of maps, and while extensively using D3 in the
    background. They offer a free plan with a lot of options worth checking out, even
    though it is a commercial product.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 有一家名为CartoDB的公司，[http://cartodb.com/](http://cartodb.com/)，专门从事地图制作，并在后台广泛使用D3。他们提供一个免费计划，有很多值得一试的选项，尽管它是商业产品。
