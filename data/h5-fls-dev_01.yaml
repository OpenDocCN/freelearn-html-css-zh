- en: Chapter 1. Why HTML5?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 为什么选择HTML5？
- en: Before getting started, it is important that you understand what **HTML5** is,
    how it works, and how it relates to what you already know as a Flash developer.
    This book uses **Adobe Flash** (CS6) as a reference when comparing functionalities
    of HTML5 with what Flash developers are commonly used to while creating applications
    in Flash. Therefore, a solid understanding of both the Adobe Flash IDE as well
    as ActionScript 3 will be required to properly follow the examples within this
    book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，重要的是您了解HTML5是什么，它是如何工作的，以及它与您作为Flash开发人员已经了解的内容有何关联。本书在比较HTML5的功能与Flash开发人员通常在Flash中创建应用程序时习惯使用的功能时，使用Adobe
    Flash（CS6）作为参考。因此，要正确地跟随本书中的示例，需要对Adobe Flash IDE和ActionScript 3有扎实的了解。
- en: 'In this chapter you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学到：
- en: What HTML5 actually is and what technologies are included within it
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5实际上是什么，其中包括哪些技术
- en: Reasons for adding HTML5 development to your skillset
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将HTML5开发添加到您的技能集中的原因
- en: Avoiding the initial issues involved in transitioning from Flash development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免从Flash开发转换中涉及的初始问题
- en: Modern browser compatibility with HTML5 functionality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代浏览器与HTML5功能的兼容性
- en: Understanding HTML5
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解HTML5
- en: As a Flash developer, you have probably worked with **HTML** on a frequent,
    if not daily, basis as a platform for publishing your compiled Adobe Flash **SWF**
    files on the Web. Although web browsers with **Flash Player** installed can view
    standalone SWF files, it is normal practice to embed Flash content within an HTML
    document. Thanks to the simplistic syntax and availability of HTML, many people
    who are not even developers have learned traditional HTML development techniques.
    Unfortunately, early HTML specifications fell short in many areas of displaying
    content online. Common tasks such as creating rich interactive experiences, sharing
    multimedia assets, or creating web-based user interfaces to act in a more typical
    software-like manner became a massive chore, if not impossible. In the recent
    past, Flash has been the obvious choice when developing and integrating assets
    such as video and audio playbacks, web-based games, 3D interactive graphics, and
    inline advertisements. Lately, many of these features on the Web have been remade
    using HTML5 allowing users to access the content in the same manner, but without
    the use of technology such as Adobe Flash Player.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Flash开发人员，您可能经常甚至每天都使用HTML作为在Web上发布编译后的Adobe Flash SWF文件的平台。虽然安装了Flash Player的Web浏览器可以查看独立的SWF文件，但将Flash内容嵌入HTML文档是正常的做法。由于HTML的简单语法和可用性，许多甚至不是开发人员的人已经学会了传统的HTML开发技术。不幸的是，早期的HTML规范在许多在线显示内容的领域存在不足。创建丰富的交互体验、共享多媒体资产或创建基于Web的用户界面以更典型的软件方式运行等常见任务变得非常繁琐，甚至不可能。最近，许多Web上的这些功能已经使用HTML5重新制作，使用户可以以相同的方式访问内容，但不需要使用Adobe
    Flash Player等技术。
- en: The ability to build quality web-based content that can be globally accessible
    from any device is the key to a successful product or service. Facebook, Google,
    and Twitter are all using HTML5 to better the user experience of their applications
    and deliver content to users without the need for third-party plugins. More businesses
    are saving time, resources, and money during their application development process
    by utilizing the HTML5 development stack to target not only web browsers on desktop
    and mobile, but also installable applications on both platforms as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建可以全球访问的高质量基于Web的内容是成功产品或服务的关键。Facebook、Google和Twitter都在使用HTML5来改善其应用程序的用户体验，并向用户提供内容，而无需第三方插件。越来越多的企业通过利用HTML5开发堆栈在桌面和移动Web浏览器以及两个平台上的可安装应用程序上进行应用开发，从而节省时间、资源和金钱。
- en: Transitioning your Flash development skills to HTML5 is a fun process that will
    not only open you to more opportunity professionally, but enable you to better
    analyze what tool is right for the job at hand. Adobe Flash isn't going anywhere
    anytime soon, but the same can easily be said for HTML5.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的Flash开发技能转换为HTML5是一个有趣的过程，不仅会为您在职业上开启更多机会，还能让您更好地分析什么工具适合当前的工作。Adobe Flash在短期内不会消失，但同样可以轻松地说HTML5也是如此。
- en: Since many developers flock to Flash development from previous web and application
    development technologies that may have had nothing to do with HTML, let's start
    by covering the essentials of the HTML5 stack.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多开发人员从以前与HTML无关的Web和应用程序开发技术转向Flash开发，让我们从HTML5堆栈的基本知识开始。
- en: What is HTML5?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是HTML5？
- en: HTML5 is the fifth and latest version of the HTML standard developed by the
    World Wide Web Consortium ([http://www.w3.org/](http://www.w3.org/)). Being a
    new version, it brought some new features to the existing HTML specification as
    well as removed some of the old outdated features. Many of these new and existing
    features are starting to closely resemble the feature set within Adobe Flash,
    thus opening many new facets of web development, which are not reliant on paid
    applications or browser plugins such as the Adobe Flash Player.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5是由万维网联盟（[http://www.w3.org/](http://www.w3.org/)）开发的HTML标准的第五个也是最新的版本。作为一个新版本，它为现有的HTML规范带来了一些新功能，并删除了一些旧的过时功能。许多这些新功能和现有功能开始与Adobe
    Flash中的功能集紧密相似，从而开启了许多不依赖于付费应用程序或浏览器插件（如Adobe Flash Player）的新的Web开发方面。
- en: The development of the HTML5 specification is still a work in progress and is
    scheduled to be finalized and released sometime in 2014, but most of the modern
    web browsers today support many features of the specification already.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5规范的开发仍在进行中，并计划在2014年某个时候完成并发布，但今天大多数现代Web浏览器已经支持规范的许多功能。
- en: Generally, references to HTML5 refer to a suite of features and technologies
    surrounding the usage of not just HTML but **Cascading Style Sheets** (**CSS**)
    as well as **JavaScript** . Without the use of CSS and JavaScript, plain HTML
    documents, even HTML5 documents, will remain extremely simplistic in their functionality
    and look and feel. Therefore, learning HTML5 is effectively learning three technologies
    simultaneously. As tedious as that sounds, Adobe Flash is setup in a very similar
    way. The Flash IDE allows easy creation, editing, and referencing of assets to
    be used within your application. To integrate these assets into a dynamic interactive
    application requires the use of **ActionScript**. HTML5 is very similar to this
    such that HTML and CSS will be your Flash IDE and JavaScript will be the replacement
    for ActionScript. With all this in mind, let's continue by reviewing the standards
    on which HTML is built.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，对HTML5的引用通常涉及到一套功能和技术，不仅涉及到HTML，还涉及到**层叠样式表**（**CSS**）以及**JavaScript**。如果没有使用CSS和JavaScript，即使是HTML5文档，其功能和外观仍然会非常简单。因此，学习HTML5实际上是在同时学习三种技术。尽管听起来很繁琐，但Adobe
    Flash的设置方式非常相似。Flash IDE允许轻松创建、编辑和引用要在应用程序中使用的资产。要将这些资产集成到动态交互式应用程序中，需要使用**ActionScript**。HTML5与此非常相似，其中HTML和CSS将是您的Flash
    IDE，而JavaScript将是ActionScript的替代品。考虑到所有这些，让我们继续审查构建HTML的标准。
- en: HTML standards
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML标准
- en: The **World Wide Web Consortium** ([http://www.w3.org/](http://www.w3.org/))
    or **W3C**, is responsible for creating the standards on which HTML is developed
    today. These web development standards have been created as an attempt to unify
    the syntax and functionality developers create web pages with, as well as the
    feature set integrated in web browsers to enable these features in HTML. By writing
    web applications in a compliant markup that follows the HTML specification standards,
    developers can better ensure that their content will be displayed properly no
    matter how a user chooses to view it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**万维网联盟**（[http://www.w3.org/](http://www.w3.org/)）或**W3C**负责创建今天HTML开发的标准。这些Web开发标准是为了统一开发人员创建网页的语法和功能，以及在Web浏览器中集成的功能集，以便在HTML中启用这些功能。通过以符合HTML规范标准的标记编写Web应用程序，开发人员可以更好地确保他们的内容将被正确显示，无论用户选择如何查看它。'
- en: HTML syntax
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML语法
- en: Though it may look trivial, HTML syntax is the core of all web pages. Regardless
    of whether it is hardcoded within an HTML file, compiled from another programming
    language source, or injected into a document during application runtime, HTML
    syntax is the blueprint for the assets used within an HTML page. The better a
    developer understands HTML syntax and its limitations, the easier it will be for
    them to build their applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管看起来微不足道，HTML语法是所有网页的核心。无论是在HTML文件中硬编码，从另一个编程语言源编译，还是在应用程序运行时注入到文档中，HTML语法都是HTML页面中使用的资产的蓝图。开发人员对HTML语法及其限制的理解越深入，构建应用程序就会越容易。
- en: 'HTML syntax is written with the use of tag elements which are wrapped in angle
    brackets. HTML tags come in two different varieties: paired or empty elements.
    Paired HTML tags are the most common and the first tag style that one usually
    uses when creating an HTML document. The `html` tag is used to declare what is
    within an HTML document and usually sits on the first and last lines of an HTML
    file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTML语法是使用包裹在尖括号中的标签元素编写的。HTML标签有两种不同的类型：成对的或空元素。成对的HTML标签是最常见的，也是创建HTML文档时通常使用的第一种标签样式。`html`标签用于声明HTML文档中的内容，并通常位于HTML文件的第一行和最后一行：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the previous example, paired tags open and close a container
    for more HTML elements to sit inside. Tags are always formatted the same, the
    only difference between each tag in the pair is that a forward slash is used to
    declare that a tag is closing an element. Therefore, `<html>` will not pair with
    any tag that does not contain the same internal value. HTML tags are case insensitive,
    and in the early days it was common for developers to always use capitals when
    writing tags. That tradition has now disappeared and you will almost always see
    tags written in lower case.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，成对标签打开和关闭一个容器，以便更多的HTML元素放置在其中。标签的格式始终相同，成对标签之间唯一的区别是使用斜杠来声明标签正在关闭一个元素。因此，`<html>`将不会与不包含相同内部值的任何标签配对。HTML标签不区分大小写，在早期，开发人员在编写标签时通常总是使用大写。这种传统现在已经消失，你几乎总是会看到标签以小写形式书写。
- en: Empty HTML tags are written without the use of a closure tag. For example, when
    placing an image reference within an HTML document, there is no further HTML element
    content that can be placed within that image. Therefore, image references in HTML
    are formatted such as `<imgsrc="img/my_image.jpg">`. The image is referenced within
    the `img` tag by appending the `src` parameter with its value set to the image
    location.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 空的HTML标签是不使用闭合标签写的。例如，在HTML文档中放置图像引用时，没有更多的HTML元素内容可以放置在该图像中。因此，在HTML中，图像引用的格式如`<imgsrc="img/my_image.jpg">`。通过将`src`参数附加到`img`标签中，并将其值设置为图像位置来引用图像。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you have managed to use **Adobe Flex** to build any of your Flash content
    and utilized the **MXML** user interface markup language, you may have got the
    hang of closing empty tag elements with syntax such as `<imgsrc="img/my_image.jpg"
    />`. In HTML5, this trailing forward slash is not required but will still render
    your content properly if you happen to append it. For best use case, try to get
    in the habit of not using it in your HTML5 projects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经成功使用**Adobe Flex**构建任何Flash内容并利用**MXML**用户界面标记语言，您可能已经掌握了使用诸如`<imgsrc="img/my_image.jpg"
    />`这样的语法来关闭空标签元素。在HTML5中，这个尾部的斜杠是不需要的，但如果您添加它，仍然会正确呈现您的内容。为了最佳使用情况，请尽量养成在HTML5项目中不使用它的习惯。
- en: HTML is a tricky beast when it comes to debugging; a document with HTML errors
    in the syntax will not display errors on loading like a traditional Flash application.
    Writing clean and concise HTML is the key to maintaining an error-free, standard,
    compliant web page. There are many applications and tools available to aid in
    developing clean HTML code, some of which will be covered later in the book. The
    W3C has created a robust HTML syntax validation service, which will check a publicly
    available website for HTML errors ([http://validator.w3.org/](http://validator.w3.org/)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试HTML时，HTML是一个棘手的问题；语法错误的文档不会像传统的Flash应用程序一样在加载时显示错误。编写干净简洁的HTML是保持无错误、标准、符合规范的网页的关键。有许多应用程序和工具可用于帮助开发干净的HTML代码，其中一些将在本书的后面部分介绍。W3C创建了一个强大的HTML语法验证服务，可以检查公开可用的网站的HTML错误([http://validator.w3.org/](http://validator.w3.org/))。
- en: HTML elements
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML元素
- en: Every version of the HTML specification has a specific list of tags available
    to developers while creating HTML documents. The current list of elements within
    the HTML5 specification as defined by the W3C can be found within their language
    reference documentation ([http://www.w3.org/TR/html-markup/elements.html](http://www.w3.org/TR/html-markup/elements.html)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个HTML规范版本都有一组特定的标签可供开发人员在创建HTML文档时使用。W3C定义的HTML5规范中当前的元素列表可以在其语言参考文档中找到([http://www.w3.org/TR/html-markup/elements.html](http://www.w3.org/TR/html-markup/elements.html))。
- en: Within the HTML5 specification are some very interesting new elements available
    to developers with regards to media integration into web pages. For example, Flash
    requirements for media playback can now be avoided when embedding audio or video
    into a web page with the addition of the `audio` and `video` tags. These exciting
    new media tags are covered in more depth in [Chapter 3](ch03.html "Chapter 3. Scalability,
    Limitations, and Effects"), *Scalability, Limitations, and Effects*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5规范中，对于媒体集成到网页中，开发人员可以使用一些非常有趣的新元素。例如，通过添加`audio`和`video`标签，现在可以避免嵌入音频或视频时对Flash的要求。这些令人兴奋的新媒体标签将在[第3章](ch03.html
    "Chapter 3. Scalability, Limitations, and Effects")中更深入地介绍，*可伸缩性、限制和效果*。
- en: Bringing in the style
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入样式
- en: 'Cascading Style Sheets or CSS is the primary method used for styling HTML elements.
    Like HTML, there is a set list of styles in CSS that you can apply to elements
    in an HTML documents. To get an idea of what CSS attributes are available to you,
    head over to [http://www.w3schools.com/cssref/](http://www.w3schools.com/cssref/)
    for the entire list. CSS can be applied to HTML elements in a number of different
    ways. Traditionally, CSS syntax is stored within an external `.css` file and referenced
    from within the `head` element in an HTML document. However, CSS can be appended
    to elements within the HTML document directly by adding a `style` parameter to
    almost any element within the `body` tag:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 层叠样式表或CSS是用于为HTML元素设置样式的主要方法。与HTML一样，在CSS中有一组样式列表，您可以将其应用于HTML文档中的元素。要了解可用于您的CSS属性的想法，请转到[http://www.w3schools.com/cssref/](http://www.w3schools.com/cssref/)查看完整列表。CSS可以以多种不同的方式应用于HTML元素。传统上，CSS语法存储在外部的`.css`文件中，并从HTML文档的`head`元素中引用。但是，CSS也可以直接附加到HTML文档中的元素中，方法是在`body`标记内的几乎任何元素中添加`style`参数：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous example uses the `style` parameter within an image element to apply
    a 5-pixel thick black border around the image referenced in the `src` parameter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，使用`style`参数在图像元素上应用了一个5像素宽的黑色边框，该图像在`src`参数中引用。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件接收文件。
- en: 'What if you had five images or even 100 images in your page that needed the
    same styles applied to each element? Applying the exact same `style` parameter
    to each image tag is not only time consuming but will result in code that is oversized
    and possibly extremely hard to maintain or update. CSS can target a single element
    or a group of elements by using a `class` or `id` HTML parameter:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的页面中有五个图像，甚至100个图像需要应用相同的样式到每个元素，那该怎么办？将完全相同的`style`参数应用于每个图像标记不仅耗时，而且会导致代码过大，可能极难维护或更新。CSS可以通过使用`class`或`id`
    HTML参数来针对单个元素或一组元素：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous example, we attempted to display a group of different images
    within an HTML document. Each image, referenced with an `img` element tag, also
    has a `class` parameter appended to it with the `photo` value. The `class` HTML
    parameter can be used and re-used on almost any element available and allow you
    to reference a group of elements rather than modifying each element directly.
    All of the images are also encased in a `div` element. `div` elements are used
    as containers to display content in. In this case, the `div` element has an `id`
    parameter set to `photo-gallery`. The `id` HTML parameter is very similar to `class`
    with the exemption of being able to re-use the same value of `id` within the same
    HTML document.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们尝试在HTML文档中显示一组不同的图像。每个图像，使用`img`元素标记引用，并附加了一个值为`photo`的`class`参数。`class`
    HTML参数可以在几乎任何可用的元素上使用和重复使用，并允许您引用一组元素，而不是直接修改每个元素。所有图像也都包含在一个`div`元素中。`div`元素用作显示内容的容器。在这种情况下，`div`元素的`id`参数设置为`photo-gallery`。`id`
    HTML参数与`class`非常相似，但可以在同一HTML文档中重复使用相同的`id`值。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Editing HTML, CSS, and JavaScript can be simplified by using a code editing
    application setup to aid with HTML5 syntax. Applications like **Aptana** ([http://aptana.com/](http://aptana.com/)),
    **Dreamweaver** ([http://adobe.com/products/dreamweaver.html](http://adobe.com/products/dreamweaver.html)),
    and **Sublime Text** ([http://sublimetext.com/](http://sublimetext.com/)) are
    all recommended. However, if simplicity is your thing, feel free to use something
    else.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用设置为辅助HTML5语法的代码编辑应用程序，可以简化编辑HTML、CSS和JavaScript。推荐使用**Aptana**（[http://aptana.com/](http://aptana.com/)）、**Dreamweaver**（[http://adobe.com/products/dreamweaver.html](http://adobe.com/products/dreamweaver.html)）和**Sublime
    Text**（[http://sublimetext.com/](http://sublimetext.com/)）等应用程序。然而，如果你喜欢简单，可以随意使用其他工具。
- en: 'With all this in mind, writing CSS to style this photo gallery could be done
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，编写CSS来为这个相册添加样式可以按以下方式完成：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Instead of applying `style` parameter to each and every element in the document,
    we can now use the `style` tag within the `head` element to place our raw CSS
    code. In the previous example, HTML elements are selected in three different ways.
    To start, the body of the document had the background color set to black by using
    its hexadecimal value. We select the `body` tag element by simply using the tag
    reference. This method of selecting raw elements can be used on a wide variety
    of elements within your document but will affect all elements with that reference.
    The next method of selection is by looking for elements with a specific ID. To
    designate the use of an ID, `#` is placed in front of the ID value. Therefore,
    `#photo-gallery` will be selecting the `div` element with the `id` parameter set
    to `photo-gallery`. We set the `width` parameter of the gallery container to `100%`,
    which is calculated from the browser width when viewing the HTML document. Finally,
    to style each one of the images in the gallery, we style the class which was applied
    to each one of the image tags in the body of the HTML document. Since the `class`
    HTML parameter can be applied to an unlimited number of elements in an HTML document,
    we can specifically target the classes within another element by chaining the
    CSS element selection together. Classes are selected in CSS by appending `.` to
    the start of the class name. Therefore, `#photo-gallery .photo` will select only
    the elements with the `photo` class name inside the element with `id` of `photo-gallery`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`head`元素内使用`style`标签来放置原始的CSS代码，而不是将`style`参数应用到文档中的每个元素。在前面的例子中，HTML元素以三种不同的方式被选中。首先，通过使用其十六进制值，将文档的背景颜色设置为黑色。我们通过简单地使用标签引用来选择`body`标签元素。这种选择原始元素的方法可以用于文档中的各种元素，但会影响具有该引用的所有元素。第二种选择方法是查找具有特定ID的元素。为了指定使用ID，需要在ID值前面加上`#`。因此，`#photo-gallery`将选择具有`id`参数设置为`photo-gallery`的`div`元素。我们将相册容器的`width`参数设置为`100%`，这是根据查看HTML文档时的浏览器宽度计算的。最后，为了为相册中的每个图像添加样式，我们为应用到HTML文档的每个图像标签的类添加样式。由于`class`
    HTML参数可以应用于HTML文档中无限数量的元素，我们可以通过将CSS元素选择链接在一起来具体地定位另一个元素中的类。在CSS中，通过在类名前面添加`.`来选择类。因此，`#photo-gallery
    .photo`将仅选择具有`photo`类名的元素，这些元素位于具有`id`为`photo-gallery`的元素内：
- en: '![Bringing in the style](img/3325OT_01_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![引入风格](img/3325OT_01_01.jpg)'
- en: Passing it over to JavaScript
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交给JavaScript
- en: Styling HTML elements with CSS only gets you so far. HTML and CSS are effectively
    the Flash IDE from the perspective of a Flash developer. What is missing is the
    code that drives the interaction and functionality within your application. While
    using Flash, ActionScript is the weapon of choice when creating robust applications.
    While developing HTML5 content, JavaScript will be doing the grinding, allowing
    you to bring life to your HTML elements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用CSS来为HTML元素添加样式只能让你走得更远。从Flash开发者的角度来看，HTML和CSS在效果上等同于Flash IDE。缺少的是驱动应用程序内交互和功能的代码。在使用Flash时，创建强大应用程序时，ActionScript是首选的武器。在开发HTML5内容时，JavaScript将会发挥作用，使你的HTML元素焕发生机。
- en: What is JavaScript?
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是JavaScript？
- en: JavaScript has been around since the mid 1990s and has grown up to be one of
    the most popular scripting languages available. JavaScript brings life to HTML
    documents by adding features such as content modifications, animations, 3D graphics,
    form submission, and data retrieval all without having to reload the active HTML
    document. Features such as these allow web content to act more like traditional
    software applications rather than static web pages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript自上世纪90年代中期就存在，并已成长为最流行的脚本语言之一。JavaScript通过添加内容修改、动画、3D图形、表单提交和数据检索等功能，为HTML文档增添了生机，而无需重新加载活动的HTML文档。这些功能使得Web内容更像传统软件应用程序，而不是静态网页。
- en: Unlike ActionScript 3, JavaScript is a true scripting language as it requires
    no preprocessing or compiling to be run. Just like HTML and CSS, a JavaScript
    document's source is sent to user upon request and executed on client side. Therefore,
    unlike technologies such as ActionScript, JavaScript source code is open for public
    viewing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与ActionScript 3不同，JavaScript是一种真正的脚本语言，因为它不需要预处理或编译就可以运行。就像HTML和CSS一样，JavaScript文档的源代码在用户请求时发送到用户端并在客户端执行。因此，与ActionScript等技术不同，JavaScript源代码是公开可见的。
- en: JavaScript in action
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript的作用
- en: 'Looking back at our `My Photo Gallery` example, an important missing feature
    is the ability to view a selected photo in larger format. JavaScript is a perfect
    platform to add this functionality as its main usage is to bring interaction to
    HTML documents. Using the existing code example, we can extend its functionality
    by adding a new `div` element at the bottom of the page body to contain the larger
    image view. This element can be empty as we do not want a photo to be displayed
    by default on page load. Finally, we set an identifier on the `div` tag of `id="photo-display"`,
    which will allow us to target the content in that element from CSS and JavaScript:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们的`我的照片库`示例，一个重要的缺失功能是查看所选照片的大尺寸。JavaScript是一个完美的平台，可以通过它的主要用途将交互性带入HTML文档。使用现有的代码示例，我们可以通过在页面主体底部添加一个新的`div`元素来扩展其功能，以包含更大的图像视图。这个元素可以是空的，因为我们不希望在页面加载时默认显示照片。最后，我们在`div`标签上设置一个标识符`id="photo-display"`，这将允许我们从CSS和JavaScript中定位该元素中的内容：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before integrating the JavaScript functionality, we need to append some CSS
    styles to `div` using `#photo-display` to allow selected photos to fill the browser
    window at a higher resolution, typical of most photo gallery displays. Within
    the CSS styles, we have already set for this example, we will append some more
    style properties to the `#photo-display` element:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在集成JavaScript功能之前，我们需要使用`#photo-display`附加一些CSS样式到`div`，以允许所选照片以更高分辨率填充浏览器窗口，这是大多数照片库显示的典型特征。在CSS样式中，我们已经为此示例设置了一些样式属性，我们将在`#photo-display`元素中附加一些更多的样式属性：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This CSS will target only one specific `div` as we have used the `#photo-display`
    syntax to target it. To start the styles off, we begin with the most important
    parameter, `display:none` , which hides the element on page load. This is perfect
    in our case as we do not want the full-screen display visible on page load. By
    adding `position:absolute` and `top:0` to the style definition for our `#photo-display`
    element, we will display the element on top of the previous elements declared
    within the HTML body. The rest of the styles set on `#photo-display` are pretty
    self-explanatory. The next lines of CSS specifically target the `img` elements
    within `div` with the `photo-display` class. We can do this in CSS by chaining
    identifiers together. In this case, we specify these styles for image tag elements
    within a custom named element ID.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS将只针对一个特定的`div`，因为我们使用了`#photo-display`语法来定位它。为了开始样式，我们从最重要的参数`display:none`开始，这会在页面加载时隐藏元素。这在我们的情况下是完美的，因为我们不希望在页面加载时看到全屏显示。通过为`#photo-display`元素的样式定义添加`position:absolute`和`top:0`，我们将在HTML主体中声明的先前元素的顶部显示该元素。在`#photo-display`上设置的其余样式都很容易理解。CSS的下一行专门针对具有`photo-display`类的`div`中的`img`元素。我们可以在CSS中通过链接标识符来做到这一点。在这种情况下，我们为自定义命名的元素ID内的图像标签元素指定这些样式。
- en: 'With the HTML and CSS to display the larger version of a selected photo in
    place, the next step is adding the JavaScript code for displaying the selected
    photo within the `#photo-display` container upon user interaction. To consolidate
    this example into a single file, we will add the JavaScript within an HTML `script`
    element:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML和CSS中显示所选照片的大尺寸版本后，下一步是添加JavaScript代码，以便在用户交互时在`#photo-display`容器中显示所选照片。为了将这个示例整合到一个文件中，我们将在HTML的`script`元素中添加JavaScript：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As a Flash developer, the previous function syntax should look pretty familiar.
    A major change within the function scope is the variable syntax. Unlike AS3, the
    HTML as well as the source variables are not strictly typed. This goes for all
    variables within JavaScript syntax and is probably one of the biggest issues Flash
    developers have with JavaScript.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Flash开发人员，以前的函数语法应该看起来很熟悉。在函数范围内的一个重大变化是变量语法。与AS3不同，HTML以及源变量都不是严格类型的。这适用于JavaScript语法中的所有变量，这可能是Flash开发人员对JavaScript最大的问题之一。
- en: Aside from some string manipulations to generate `img` HTML elements from the
    source variable, the method also references the document object. Every HTML document
    that is loaded into a browser then becomes the document object accessible from
    within JavaScript. The document object within JavaScript has a number of built-in
    properties and methods that are available to access information and elements within
    the view HTML document. In our example, we make use of the easily defined document
    object method `getElementById()`. As the method name implies, when an HTML element's
    ID is supplied, the reference to the element within the HTML document is returned
    for use within the script. Since JavaScript supports the chaining of properties,
    we can apply the `innerHTML` property to manipulate the inner content of an HTML
    element as well as the `style` property to change an element's CSS properties.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对源变量进行一些字符串操作以生成`img` HTML元素之外，该方法还引用了文档对象。加载到浏览器中的每个HTML文档都成为JavaScript中可访问的文档对象。JavaScript中的文档对象具有许多内置属性和方法，可用于访问视图HTML文档中的信息和元素。在我们的示例中，我们利用了易于定义的文档对象方法`getElementById()`。正如方法名称所暗示的那样，当提供HTML元素的ID时，将返回对HTML文档中元素的引用，以便在脚本中使用。由于JavaScript支持属性的链接，我们可以应用`innerHTML`属性来操作HTML元素的内部内容，以及`style`属性来更改元素的CSS属性。
- en: 'To enable an image to close once a user has finished viewing it, we will add
    a second JavaScript function to our example to revert all the changes made when
    displaying the photo. Since the `photo-display` image will be updated when the
    user clicks on a new image, all our `closePhotoDisplay` method needs to do is
    hide the visible element to show the full photo gallery again:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用户在查看完照片后能够关闭图像，我们将在示例中添加第二个JavaScript函数，以恢复显示照片时所做的所有更改。由于当用户点击新图像时，`photo-display`图像将被更新，我们的`closePhotoDisplay`方法所需做的就是隐藏可见元素，以再次显示完整的照片库：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting the `#photo-display` element's `style.display` back to `none` hides
    the entire element and reverts the user interface back to its initial state.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将`#photo-display`元素的`style.display`设置回`none`会隐藏整个元素，并将用户界面恢复到初始状态。
- en: 'Adding events to each of the photos can easily be accomplished by appending
    an `onclick` parameter to the targeted element. The addition would look as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将事件添加到每张照片中可以通过向目标元素附加`onclick`参数来轻松实现。添加如下：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, when the image is clicked on, the `onclick` event gets fired and runs
    the JavaScript code declared within the parameter. In this case, we use this opportunity
    to call our `displayPhoto` method within our previously written JavaScript block.
    Within the call, we supply the required source variable, which will be the image
    file name as a `String` datatype. This will allow the proper image reference to
    be used within the `#photo-display` element. All put together, our updated `div`
    tag with `id="#photo-gallery"` will now look like the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当单击图像时，`onclick`事件将被触发并运行参数中声明的JavaScript代码。在这种情况下，我们利用这个机会来调用我们之前编写的JavaScript块中的`displayPhoto`方法。在调用中，我们提供所需的源变量，这将是图像文件名作为`String`数据类型。这将允许在`#photo-display`元素中使用正确的图像引用。将所有内容放在一起，我们更新的带有`id="#photo-gallery"`的`div`标签现在看起来像下面这样：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, to enable the user to close an open image within the `#photo-display`
    element, we will apply an `onclick` event to call our `closePhotoDisplay` method.
    Rather than applying the `onclick` event to the image within the `#photo-display`
    element, we will target the display itself, allowing users to click anywhere in
    the browser to close the display:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了使用户能够关闭`#photo-display`元素中的打开图像，我们将应用一个`onclick`事件来调用我们的`closePhotoDisplay`方法。我们将事件应用于`#photo-display`元素中的图像，而是将其定位到显示本身，允许用户在浏览器中的任何位置单击以关闭显示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Putting all of these code snippets together, the gallery source now looks like
    the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些代码片段放在一起，画廊源现在看起来像下面这样：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Saving the text into an `.html` file and launching it in a web browser will
    now reveal all of our hard work. Just as before, the gallery should start by displaying
    the list of images by default. Once an image is clicked on, the selection will
    be passed to the `#display-window` element and displayed at 100 percent of the
    browser width:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本保存到`.html`文件中，并在Web浏览器中启动它，现在将显示出我们所有的辛勤工作。就像以前一样，画廊应该从默认显示图像列表开始。一旦单击图像，选择将传递到`#display-window`元素，并以浏览器宽度的100％显示：
- en: '![JavaScript in action](img/3325OT_01_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript in action](img/3325OT_01_02.jpg)'
- en: Finally, clicking anywhere within the document will close the large image and
    return you back to the initial gallery display.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在文档中的任何位置单击将关闭大图像，并将您返回到初始画廊显示。
- en: Although this example contains none of the new features of HTML5, it is a simple
    way of showing some of the key technologies that make up HTML and some of the
    methods used to reference assets in HTML.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此示例不包含HTML5的新功能，但这是展示HTML的一些关键技术和引用HTML中资产的一些方法的简单方式。
- en: Why bother learning HTML5?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要学习HTML5？
- en: As a Flash developer, getting yourself into the realm of HTML5 development is
    an extremely logical step for many reasons. Building applications with HTML5 allows
    you to easily reach users on desktop or mobile with rich integrated and interactive
    content without the need for plugins. One of the most beneficial aspects of HTML5
    development is the accessibility to the development environment. Since HTML5 requires
    no special compiler or software for writing code, developers are free to choose
    their favorite setup for writing and testing their projects. Applications can
    be easily run and tested within any compliant web browser and tested locally without
    the need of a web server. This makes HTML5 one of the most accessible and easy
    to use technologies on the Web.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Flash开发人员，进入HTML5开发领域是一个非常合乎逻辑的步骤，原因有很多。使用HTML5构建应用程序可以让您轻松地在桌面或移动设备上接触到用户，而无需插件即可获得丰富的集成和交互式内容。HTML5开发最有益的一个方面是开发环境的可访问性。由于HTML5不需要特殊的编译器或软件来编写代码，开发人员可以自由选择他们喜欢的设置来编写和测试他们的项目。应用程序可以在任何兼容的Web浏览器中轻松运行和测试，并且可以在本地进行测试，而无需Web服务器。这使得HTML5成为Web上最易访问和易用的技术之一。
- en: Write once, deploy everywhere
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次编写，到处部署
- en: Unlike Flash applications, any device with a modern web browser can interact
    with HTML5 web content. So, with the help of CSS for dynamic resizing of viewable
    content, your HTML5 applications can be used without the need of application installation
    or dependencies on desktop or mobile platforms. Developers can also use technologies
    such as **Phone Gap** ([http://phonegap.com/](http://phonegap.com/)) or **Appcelerator**
    ([http://www.appcelerator.com/](http://www.appcelerator.com/)) to easily convert
    their existing HTML5 web content to packaged mobile applications for market in
    all modern mobile operating systems. Packaged applications can be integrated and
    sold using common mobile application services such as Apple's **App Store** ([http://store.apple.com](http://store.apple.com))
    and **Google Play** ([https://play.google.com](https://play.google.com)). On top
    of that, **Microsoft Windows 8** desktop application development now supports
    a whole suite of different programming languages, one of them being HTML5 ([http://msdn.microsoft.com/en-us/library/windows/apps/br211386.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/br211386.aspx)).
    With the ability to package HTML5 content into installable applications, developers
    can now begin to easily monetize their work by sale on the various application
    distribution outlets.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与Flash应用程序不同，任何具有现代Web浏览器的设备都可以与HTML5 Web内容进行交互。因此，借助CSS对可视内容进行动态调整，您的HTML5应用程序可以在不需要在桌面或移动平台上安装应用程序或依赖的情况下使用。开发人员还可以使用诸如**Phone
    Gap**（[http://phonegap.com/](http://phonegap.com/)）或**Appcelerator**（[http://www.appcelerator.com/](http://www.appcelerator.com/)）等技术，将其现有的HTML5
    Web内容轻松转换为打包的移动应用程序，以在所有现代移动操作系统中上市。打包的应用程序可以通过诸如苹果的**App Store**（[http://store.apple.com](http://store.apple.com)）和**Google
    Play**（[https://play.google.com](https://play.google.com)）等常见移动应用程序服务进行集成和销售。此外，**Microsoft
    Windows 8**桌面应用程序开发现在支持一整套不同的编程语言，其中之一就是HTML5（[http://msdn.microsoft.com/en-us/library/windows/apps/br211386.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/br211386.aspx)）。通过将HTML5内容打包成可安装的应用程序，开发人员现在可以通过各种应用程序分发渠道轻松地将其作品进行销售。
- en: Exciting new features
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 令人兴奋的新功能
- en: As just mentioned, HTML5 hosts a suite of new and exciting features, many of
    which will be covered in the following chapters of this book. However, to allow
    you to better understand why HTML5 is so exciting and important for Flash developers
    and the web development community, here is a more detailed list of some of those
    features.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如刚才提到的，HTML5拥有一系列新的令人兴奋的功能，其中许多将在本书的后续章节中介绍。然而，为了让您更好地理解为什么HTML5对Flash开发人员和Web开发社区如此令人兴奋和重要，这里是一份更详细的一些功能列表。
- en: canvas – 2D drawing API
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: canvas - 2D绘图API
- en: Flash developers can really flex their programming abilities within the new
    `canvas` element and 2D drawing API. Just like the drawing API within ActionScript
    3, the `canvas` HTML5 element allows developers to create dynamic graphics during
    runtime, all from within JavaScript. Flash game developers moving to HTML5 usually
    find their home within the utilization of the `canvas` element as it is the closest
    representation of traditional Flash development when using HTML5.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Flash开发人员可以在新的`canvas`元素和2D绘图API中充分发挥他们的编程能力。就像ActionScript 3中的绘图API一样，`canvas`
    HTML5元素允许开发人员在运行时创建动态图形，所有这些都可以通过JavaScript完成。转向HTML5的Flash游戏开发人员通常会在使用HTML5时找到他们的家园，因为`canvas`元素是传统Flash开发的最接近的表示。
- en: Media playback
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 媒体播放
- en: Web developers no longer require to develop their media playback elements with
    platforms such as Flash or Quicktime. Audio and video can now be easily integrated
    into the HTML document using `audio` and `video` tags. Not only does this allow
    for easier and cheaper integration of playback elements into web pages but also
    mobile devices have no issues reading and displaying these elements from within
    their integrated browsers.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Web开发人员不再需要使用Flash或Quicktime等平台来开发他们的媒体播放元素。音频和视频现在可以通过`audio`和`video`标签轻松集成到HTML文档中。这不仅使播放元素更容易、更便宜地集成到网页中，而且移动设备在其集成浏览器中读取和显示这些元素时也没有问题。
- en: Offline storage
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离线存储
- en: Traditionally, when web developers needed to save data locally on the user's
    machine, they used **cookies**. HTML5 adds a new offline storage method called
    **Web Storage** ([http://dev.w3.org/html5/webstorage](http://dev.w3.org/html5/webstorage))
    that can drastically increase your applications' abilities when you have the requirement
    to save data for re-use. Large amounts of data like your clients user-specific
    application configuration can now be stored in a more secure and quicker manner.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，当Web开发人员需要在用户的计算机上本地保存数据时，他们使用**cookies**。HTML5添加了一种新的离线存储方法，称为**Web Storage**（[http://dev.w3.org/html5/webstorage](http://dev.w3.org/html5/webstorage)），可以大大增加应用程序的能力，当您需要保存数据以供重复使用时。像客户端用户特定的应用程序配置这样的大量数据现在可以以更安全、更快的方式存储。
- en: You can now also setup your HTML5 content to be available to your users even
    when they go offline by utilizing the HTML5 **cache manifest**. The cache manifest
    is just a simple text file, which is placed on your web server. If a web browser
    supports the use of HTML5 cache manifests (all modern browsers currently do),
    the references to files and assets, which you have placed within the manifest,
    are all cached on the client side. Depending on whether your manifest is set to
    cache all the content required to run your application, the user can then go offline
    and continue using the application. Combined with the use of HTML Web Storage
    for archiving data to be resent to a web server upon Internet reconnection, you
    can develop applications that will allow your users to seamlessly use them despite
    their connection being broken. A perfect example of this feature of HTML5 in action
    is **Gmail** by Google ([https://mail.google.com](https://mail.google.com)). By
    archiving message data on a user's device when accessed initially, important information
    such as e-mails can still be reviewed when a user goes to open a message while,
    say, he is underground in a subway.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在还可以设置HTML5内容在用户离线时可用，方法是利用HTML5的**缓存清单**。缓存清单只是一个简单的文本文件，放在您的Web服务器上。如果Web浏览器支持使用HTML5缓存清单（所有现代浏览器目前都支持），则在清单中放置的文件和资产的引用都会被缓存在客户端。根据您的清单是否设置为缓存运行应用程序所需的所有内容，用户可以在离线状态下继续使用应用程序。结合使用HTML
    Web存储将数据存档以在重新连接到互联网时重新发送到Web服务器，您可以开发应用程序，使用户可以在连接中断的情况下无缝地使用它们。HTML5功能的一个完美示例是Google的**Gmail**（[https://mail.google.com](https://mail.google.com)）。通过在用户访问时在设备上存档消息数据，例如电子邮件，在用户在地铁地下时打开消息时，仍然可以查看重要信息。
- en: Document editing
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档编辑
- en: Many HTML5 elements now allow a parameter, `contenteditable="true"`, which allows
    users to edit all the content within the element. This feature brings a sort of
    WYSIWYG environment directly to HTML content. Inline document editing can be extremely
    handy as a developer when manipulating content within your HTML5 projects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 许多HTML5元素现在允许使用参数`contenteditable="true"`，这允许用户编辑元素内的所有内容。这个功能直接将所见即所得的环境带到了HTML内容中。在HTML5项目中操作内容时，内联文档编辑对开发人员来说非常方便。
- en: Drag-and-drop
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拖放
- en: HTML5 elements now have the ability to be draggable. Simple but important user
    experience additions such as this bring more application-like interactivity which
    traditionally would be built with JavaScript. Just like inline document editing,
    setting elements to be draggable during development can aid in finding the proper
    position properties.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5元素现在具有可拖动的能力。诸如此类简单但重要的用户体验增强功能，可以带来更多类似应用程序的交互性，传统上需要使用JavaScript来构建。就像内联文档编辑一样，在开发过程中将元素设置为可拖动可以帮助找到正确的位置属性。
- en: Geolocation
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地理定位
- en: The Geolocation API enables users to allow their current position to be sent
    to an HTML5 document for use within JavaScript. Apart from the obvious usage of
    a user's location in mapping applications, Geolocation values can add many new
    features into web documents that allow for a more interactive user experience.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 地理定位API使用户可以允许将其当前位置发送到HTML5文档中供JavaScript使用。除了在地图应用程序中使用用户位置的明显用途外，地理定位值还可以为允许更交互式用户体验的Web文档添加许多新功能。
- en: File API
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件API
- en: The File API within HTML5 allows a more interactive experience when dealing
    with files on a user's local machine. Local files can now be dragged into the
    browser and previewed within the HTML document without uploading the data to the
    web server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5中的文件API允许在处理用户本地计算机上的文件时获得更交互式的体验。现在可以将本地文件拖入浏览器，并在HTML文档中预览，而无需将数据上传到Web服务器。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For a more in-depth look at the complete feature set within HTML5, visit the
    online W3C API documentation ([http://www.w3.org/TR/html5/](http://www.w3.org/TR/html5/)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要更深入地了解HTML5中的完整功能集，请访问在线W3C API文档（[http://www.w3.org/TR/html5/](http://www.w3.org/TR/html5/)）。
- en: Mobile accessibility
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动设备可访问性
- en: As more devices become integrated with Internet accessibility, the need for
    streamlined, multiplatform applications that allow for low overhead and integrated
    device access is at an all-time high. Almost all modern mobile browsers already
    support many features of HTML5, which web developers can harness to build mobile
    applications that rival many natively built applications for specific mobile platforms.
    Features such as Geolocation, local file access and offline storage allow applications
    to easily integrate themselves into the device hardware that is running them.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的设备集成了互联网功能，需要流畅、多平台的应用程序，可以实现低开销和集成设备访问的需求达到了历史最高点。几乎所有现代移动浏览器已经支持HTML5的许多功能，Web开发人员可以利用这些功能来构建与特定移动平台上许多原生应用程序相媲美的移动应用程序。地理定位、本地文件访问和离线存储等功能使应用程序能够轻松地整合到运行它们的设备硬件中。
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Any of the examples in this book can be run on any modern mobile device running
    an HTML5-compliant web browser. If you have an iPhone, Android, or Windows phone
    handy, test out the examples on your device to view how well mobile platforms
    run HTML5 content.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的任何示例都可以在运行HTML5兼容的现代移动设备上运行。如果您有iPhone、Android或Windows手机，可以在设备上测试示例，查看移动平台如何运行HTML5内容。
- en: One of the biggest driving forces behind the advent of HTML5 was mobile. Mobile
    application development requires a slightly different approach than typical application
    development as the platform running the application not only has fewer resources
    as compared to a typical desktop configuration but also things like battery life,
    screen resolutions, and touch interfaces need to be taken into account. Dealing
    with all of these requirements while developing applications with Flash can get
    a little bit tricky. Flash applications traditionally tend to be a bit heavy on
    resource usage, though optimizations can be made to compensate for some of these
    issues while running applications on mobile platforms.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5出现的最大推动力之一是移动设备。移动应用程序开发需要与典型应用程序开发略有不同的方法，因为运行应用程序的平台不仅资源较少，而且还需要考虑诸如电池寿命、屏幕分辨率和触摸界面等因素。在开发Flash应用程序时处理所有这些要求可能会有些棘手。Flash应用程序传统上在资源使用上有些沉重，尽管可以进行优化来弥补在移动平台上运行应用程序时的一些问题。
- en: Flash Player on Mobile
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动设备上的Flash Player
- en: Since the advent of iPhone, Flash developers had to deal with the fact that
    their web-based Flash content would never be viewable from the integrated iOS
    web browser. Apple made their stance on the usage of the Adobe Flash Player clear
    in a publicly address letter from Steve Jobs in April 2010, which stated that
    the Flash Player did not deliver the device or application performance that Apple
    required on their device.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 自iPhone问世以来，Flash开发人员不得不面对这样一个事实，即他们基于Web的Flash内容永远无法在集成的iOS Web浏览器中查看。苹果在2010年4月史蒂夫·乔布斯公开信中明确表明了对Adobe
    Flash Player使用的立场，指出Flash Player无法在他们的设备上提供所需的性能。
- en: In June 2012, Adobe released a public statement regarding the future of the
    Adobe Flash Player for mobile. As of August 15, 2012, Flash Player for Android
    will only be available to devices certified to run the Flash Player as Adobe has
    suspended the development of the mobile version of Flash Player. Users running
    Android Version 4.1+ will be unable to run Flash content within their browser
    and all web content will rely on the use of the technologies within HTML5.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年6月，Adobe发布了一份关于Adobe Flash Player在移动设备上的未来的公开声明。截至2012年8月15日，Android版Flash
    Player只能在经过认证可以运行Flash Player的设备上使用，因为Adobe已经暂停了移动版Flash Player的开发。运行Android 4.1+版本的用户将无法在其浏览器中运行Flash内容，所有Web内容将依赖于HTML5中的技术。
- en: With the Flash Player removed from the mobile market, a Flash developer's only
    resource, at this point in time, for creating mobile applications is developing
    them with **Adobe AIR** and packaging their work as standalone applications rather
    than on the Web.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Flash Player从移动市场上被移除，目前Flash开发人员创建移动应用程序的唯一资源是使用**Adobe AIR**开发并将他们的工作打包为独立应用程序，而不是在Web上运行。
- en: Build on your existing skillset
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立在现有的技能基础上
- en: Flash developers transitioning to HTML5 development have a leg up when it comes
    to learning tricks to create amazing applications with purely HTML, CSS, and JavaScript.
    Not only will all the lessons learned about handling and optimizing media elements
    transition over, but also their ActionScript 3 skills will allow them to understand
    and use JavaScript to its full potential.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Flash开发人员转向HTML5开发时，学习使用纯HTML、CSS和JavaScript创建令人惊叹的应用程序的技巧会更容易一些。不仅所有关于处理和优化媒体元素的经验都会转移过来，而且他们的ActionScript
    3技能也将使他们能够充分理解和使用JavaScript。
- en: ECMAScript
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript
- en: The time developers invest to learn a programming language such as ActionScript
    3 is far from a short endeavor. Fortunately, both JavaScript and ActionScript
    3 are built on the **ECMAScript** scripting language standard ([http://www.ecmascript.org](http://www.ecmascript.org)).
    In a nutshell, this means that many of the method, variable, and property syntax
    setups are extremely similar in look, feel, and usage. As we dig deeper and see
    more examples of HTML5 in action, if you have experience with ActionScript 3,
    you will instantly notice many similarities when utilizing JavaScript.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员投入学习诸如ActionScript 3之类的编程语言的时间远非短暂。幸运的是，JavaScript和ActionScript 3都是基于**ECMAScript**脚本语言标准构建的（[http://www.ecmascript.org](http://www.ecmascript.org)）。简而言之，这意味着许多方法、变量和属性的语法设置在外观、感觉和使用上都非常相似。当我们深入挖掘并看到HTML5的更多实例时，如果你有ActionScript
    3的经验，你将立即注意到在使用JavaScript时有许多相似之处。
- en: Avoiding the initial road blocks
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免最初的障碍
- en: All Flash developers generally have the same issues when transitioning to HTML5
    development. Most of these problems arise from differences between platform syntax,
    as well as dealing with the interaction between each element within the HTML5
    stack.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Flash开发人员在转向HTML5开发时通常都会遇到相同的问题。大多数问题都源于平台语法之间的差异，以及处理HTML5堆栈内每个元素之间的交互。
- en: Stage versus DOM
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 舞台与DOM
- en: The first and most obvious change when moving to HTML5 development is the lack
    of the ever important Flash Stage. Dealing with element layout, asset animations,
    and interactivity with HTML5 is all taken care of purely with code. Although there
    are many web development IDEs with drag-and-drop type interfaces, to better understand
    how to build cleaner web pages, this book will cover all examples with hand written
    code examples.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 转向HTML5开发时最明显的变化之一是缺少了重要的Flash舞台。在HTML5中处理元素布局、资产动画和交互性都纯粹通过代码来实现。尽管有许多带有拖放式界面的Web开发IDE，为了更好地理解如何构建更干净的网页，本书将涵盖所有手写代码示例。
- en: Positioning assets in the DOM
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DOM中定位资产
- en: One of the biggest initial issues many Flash developers have when moving into
    web development is the concept of positioning content and assets within the DOM.
    Unless specified, HTML elements are not simply placed in DOM with X and Y position
    values. Since elements within an HTML document are displayed inline by default,
    global X and Y position values are irrelevant. When positing an element within
    DOM with CSS, properties such as margin, padding, top, left, right, and bottom
    are used instead. As mentioned, if elements are specially styled with a position
    of absolute or utilized within a `canvas` element then X and Y values can be used.
    On top of the issues regarding simply controlling where elements are placed within
    your project, there is the ordeal of making sure that all of the web browsers
    that may view your content display it as per your specification.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Flash开发人员在转向Web开发时最初遇到的一个最大问题是在DOM中定位内容和资产的概念。除非指定，HTML元素不会简单地使用X和Y位置值放置在DOM中。由于HTML文档中的元素默认以内联方式显示，全局X和Y位置值是无关紧要的。在DOM中使用CSS定位元素时，而是使用诸如margin、padding、top、left、right和bottom等属性。如前所述，如果元素被特别设计为绝对位置或在`canvas`元素中使用，则可以使用X和Y值。除了简单地控制项目中元素放置的问题之外，还有确保可能查看内容的所有Web浏览器都按照您的规格显示内容的问题。
- en: Dealing with media elements
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理媒体元素
- en: Media optimization is the key to delivering content over the Web. When working
    with Flash, many of the assets used are vector-based and therefore lightweight
    on the compiled SWF file size. Bitmap data used within the Flash SWF is compressed
    during compilation, therefore automatically aiding you by minimizing file size.
    Since what the majority of HTML documents do is reference raw files publicly accessible
    on the Web, each asset used should be optimized for minimal file size while keeping
    the intended quality as close to original as possible. As we cover different aspects
    of HTML5 development throughout the chapters of this book, many optimization methods
    will be covered for the different types of media used in web pages.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体优化是提供Web内容的关键。在使用Flash时，许多使用的资产是基于矢量的，因此在编译后的SWF文件大小上轻量级。Flash SWF中使用的位图数据在编译期间被压缩，因此自动帮助您最小化文件大小。由于大多数HTML文档所做的是引用公开可访问的原始文件，因此每个使用的资产都应该针对最小文件大小进行优化，同时尽可能保持预期的质量接近原始质量。随着本书各章节中涵盖HTML5开发的不同方面，将涵盖用于网页中使用的不同类型媒体的许多优化方法。
- en: Securing your code
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护您的代码
- en: Publishing content in Adobe Flash outputs a compiled binary SWF file, which
    is ready to be played in a compatible Flash Player. The code and assets used in
    the application are protected from prying eyes since the application was compiled
    into a single binary file. But when dealing with code and assets on the Web, the
    entire game changes. Pretty much everything you create and deliver in an HTML5
    project, as with any website, is open for public viewing.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Adobe Flash中发布内容会输出一个编译后的二进制SWF文件，该文件已准备好在兼容的Flash Player中播放。应用程序中使用的代码和资产免受窥视，因为应用程序已编译为单个二进制文件。但是在处理Web上的代码和资产时，整个游戏都会发生变化。几乎您在HTML5项目中创建和交付的所有内容，与任何网站一样，都可以公开查看。
- en: Code obfuscation is a practice some developers use while delivering production
    level client-side code. Many websites and applications are available to obfuscate
    your JavaScript code by rewriting the code in a hard to read, compressed format.
    Although this is not a foolproof way of securing code, it adds a level of deterrence
    when it comes to users poking around a document's source code.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 代码混淆是一些开发人员在交付生产级别客户端代码时使用的一种做法。许多网站和应用程序可用于通过以难以阅读的压缩格式重写代码来混淆JavaScript代码。尽管这并不是保护代码的绝对方法，但在用户查看文档源代码时，它增加了一定程度的威慑力。
- en: Understanding client-side code usage and limitations is the key to writing secure
    JavaScript applications. Sensitive information should never be hardcoded into
    a document which can be viewed on client side. [Chapter 2](ch02.html "Chapter 2. Preparing
    for the Battle"), *Preparing for the Battle*, covers the usage of client-side
    script in a more in-depth manner in comparison to ActionScript 3.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 理解客户端代码的使用和限制是编写安全JavaScript应用程序的关键。敏感信息不应该硬编码到可以在客户端查看的文档中。[第2章](ch02.html
    "第2章。准备战斗")，“准备战斗”，比ActionScript 3更深入地涵盖了客户端脚本的使用。
- en: Browser and platform compatibility
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器和平台兼容性
- en: One of the major changes in development paradigm when moving from Flash to HTML5
    development is the need to target multiple platforms with the same code base.
    While developing an application using Adobe Flash, you initially set a target
    version of the Flash Player for your application to run within. By compiling your
    application into a packaged SWF, the Flash runtime will have no issues rendering
    your application in any compatible Flash Player. Since every browser and platform
    tends to display web content a little bit differently, when developing HTML5 content
    and applications, one must take note of the platforms and browsers that may be
    used to view the content to better optimize the viewing experience.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从Flash转向HTML5开发时的主要变化之一是需要使用相同的代码库针对多个平台进行开发。在使用Adobe Flash开发应用程序时，您最初为应用程序设置Flash
    Player的目标版本。通过将应用程序编译为打包的SWF，Flash运行时将无法在任何兼容的Flash Player中渲染您的应用程序。由于每个浏览器和平台都倾向于以稍微不同的方式显示Web内容，因此在开发HTML5内容和应用程序时，必须注意可能用于查看内容的平台和浏览器，以更好地优化查看体验。
- en: Browser functionality checks can be written into JavaScript conditions to enable
    users with browsers that lack the support for specific HTML5 features to still
    view your HTML5 content. For instance, if a user visits a page with an HTML5 video
    playback element within it, without the support for it within his browser, JavaScript
    could alternatively embed a Flash video playback application instead.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将浏览器功能检查写入JavaScript条件中，以便使那些不支持特定HTML5功能的浏览器的用户仍然可以查看你的HTML5内容。例如，如果用户访问一个包含HTML5视频播放元素的页面，而他的浏览器不支持它，JavaScript可以选择替代地嵌入Flash视频播放应用程序。
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Finding a modern web browser that doesn't support HTML5 is getting harder day
    by day. When it comes to choosing a browser to test code in while reading this
    book, Firefox ([http://www.getfirefox.net/](http://www.getfirefox.net/)), Chrome
    ([http://www.google.com/chrome](http://www.google.com/chrome)), Safari ([http://www.apple.com/safari/](http://www.apple.com/safari/)),
    and Opera ([http://www.opera.com/](http://www.opera.com/)) are all great choices
    and available online for free.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个不支持HTML5的现代Web浏览器变得越来越困难。在阅读本书时，选择一个用于测试代码的浏览器时，Firefox（[http://www.getfirefox.net/](http://www.getfirefox.net/)）、Chrome（[http://www.google.com/chrome](http://www.google.com/chrome)）、Safari（[http://www.apple.com/safari/](http://www.apple.com/safari/)）和Opera（[http://www.opera.com/](http://www.opera.com/)）都是很好的选择，并且可以在线免费使用。
- en: Within the chapters of this book, many of these popular web browsers will be
    utilized to show how content may sometimes differ in look and usage. Due to the
    speed at which browser updates and changes are released, testing your site as
    much as possible in every browser on every platform is a very important aspect
    of web development. Many of these web browsers now have built-in development and
    debugging tools, which allow for easier optimizations of your HTML5 projects.
    Other applications and services are also available to ease the pain of browser
    testing, some of which will be used and covered in this book.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的章节中，将使用许多这些流行的Web浏览器来展示内容在外观和使用上有时可能会有所不同。由于浏览器更新和变化的速度很快，尽可能在每个平台的每个浏览器中测试你的网站是Web开发的一个非常重要的方面。许多这些Web浏览器现在都有内置的开发和调试工具，可以更轻松地优化你的HTML5项目。还有其他应用程序和服务可用于简化浏览器测试的痛苦，其中一些将在本书中使用和介绍。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered the key aspects of the HTML5 stack and how
    to use each of them in a simplistic manner. By creating a simple photo gallery
    web page, we not only used HTML, CSS, and JavaScript, but also the methods to
    reference elements in between them. Some of the new and exciting features available
    within HTML5 were also explained and compared with functionality traditionally
    created within Flash assets. The typical issues during the learning curve for
    Flash developers moving to web development were reviewed to allow you to be aware
    of these issues before finding out the hard way. Hopefully, this chapter has furthered
    your interest in learning more about what HTML5 can do.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经涵盖了HTML5技术栈的关键方面，以及如何以简单的方式使用它们。通过创建一个简单的相册网页，我们不仅使用了HTML、CSS和JavaScript，还使用了它们之间引用元素的方法。一些HTML5中的新功能也被解释并与传统上在Flash资产中创建的功能进行了比较。回顾了Flash开发人员转向Web开发时的典型问题，让你在发现问题之前就意识到这些问题。希望这一章能进一步激发你对学习HTML5更多可能性的兴趣。
- en: The development of the HTML5 standard maintained by the W3C is an interesting
    but extremely in-depth topic, which will not fit within the constraints of this
    book. If you are interested in learning more about how HTML5 standards are created
    and maintained, I strongly recommend checking out and keeping up with the information
    on specification and syntax development W3C publishes on their site ([http://www.w3.org](http://www.w3.org)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: W3C维护的HTML5标准的制定是一个有趣但非常深入的话题，这超出了本书的范围。如果你对了解HTML5标准的制定和维护更感兴趣，我强烈建议查看并关注W3C在其网站上发布的规范和语法开发信息（[http://www.w3.org](http://www.w3.org)）。
- en: With the platform overview out of the way, we will continue by digging further
    into the most important aspect of the HTML5 stack, JavaScript, and how it relates
    to what you already know from developing with ActionScript.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成平台概述后，我们将继续深入研究HTML5技术栈中最重要的方面JavaScript，以及它与你已经了解的使用ActionScript开发的知识的关系。
