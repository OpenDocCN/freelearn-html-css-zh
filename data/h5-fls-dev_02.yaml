- en: Chapter 2. Preparing for the Battle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。为战斗做准备
- en: Now that you understand what technologies make up HTML5, we can start getting
    our hands dirty. But before we jump right into coding HTML, CSS, and JavaScript,
    we need to cover the fundamentals of the first step of developing a project, asset
    preparation. Without a design, assets, and content, your web pages won't be very
    appealing or, for that matter, functional. During the preparation we will also
    dig into the syntax specification for JavaScript and how it's related to ActionScript
    3, to prepare us for full-fledged development in [Chapter 3](ch03.html "Chapter 3. Scalability,
    Limitations, and Effects"), *Scalability, Limitations, and Effects*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了HTML5的构成技术，我们可以开始动手了。但在我们开始编写HTML、CSS和JavaScript之前，我们需要覆盖项目开发的第一步基础知识，即资产准备。没有设计、资产和内容，您的网页将不会很吸引人，或者说，功能不完善。在准备过程中，我们还将深入研究JavaScript的语法规范，以及它与ActionScript
    3的关系，为我们在[第3章](ch03.html "第3章。可扩展性、限制和效果") *可扩展性、限制和效果*中进行全面开发做准备。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: The preparation of common assets such as images, audio, and video for use within
    an HTML5 document
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备常见资产，如图像、音频和视频，以在HTML5文档中使用
- en: In-browser code outputs and debugging
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中代码输出和调试
- en: The basics of JavaScript and the syntax variance from ActionScript 3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript的基础知识和与ActionScript 3的语法变化
- en: Examples of JavaScript in action and the proper methods for code execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript在实际操作中的示例以及代码执行的正确方法
- en: Preparing the asset
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备资产
- en: While developing applications in Flash, integrating assets such as images, audio,
    and video into a typical project can be accomplished in a couple of different
    ways. You may choose to integrate assets in the typical way by importing them
    directly in a Flash project library. The addition of an asset into a Flash project
    results in the asset inclusion into the compiled SWF file. Since all assets are
    compiled within a single file, there is no need to acquire assets from external
    resources such as the Internet. Assets within a compiled Flash project are inherently
    protected from acquisition or being referenced by public.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flash中开发应用程序时，可以通过几种不同的方式将资产（如图像、音频和视频）集成到典型项目中。您可以选择通过直接在Flash项目库中导入它们的典型方式来集成资产。将资产添加到Flash项目中会导致资产包含到编译的SWF文件中。由于所有资产都编译在一个文件中，因此无需从互联网等外部资源获取资产。编译在编译的Flash项目中的资产本质上受到保护，不会被获取或被公开引用。
- en: Unfortunately, assets internally referenced within the project library cannot
    be updated or changed once the project has been exported. Developing applications
    such as a video playback UI or photo gallery requires assets to be integrated
    dynamically, resulting in a single application instance that can be used infinitely.
    External assets may be integrated via requests for external files which are publicly
    accessible on the Internet. External integration allows for smaller application
    sizes as well as the ability to modify the external assets without the need for
    application updates. Unfortunately, if the file is unavailable or the user isn't
    connected to the Internet, the asset cannot be integrated and may result in a
    failure within the application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，项目库内部引用的资产一旦项目被导出就无法更新或更改。开发应用程序，如视频播放UI或照片库，需要动态集成资产，从而产生一个可以无限使用的单个应用程序实例。可以通过请求外部文件来集成外部资产，这些文件在互联网上是公开可访问的。外部集成可以减小应用程序的大小，并且可以修改外部资产而无需进行应用程序更新。不幸的是，如果文件不可用或用户未连接到互联网，则无法集成资产，可能会导致应用程序失败。
- en: External asset integration is the standard way of including content into web-based
    documents. Files that will be referenced by HTML documents are typically placed
    on the same web server as the HTML documents embedding them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 外部资产集成是将内容包含到基于Web的文档中的标准方式。将被HTML文档引用的文件通常放在与嵌入它们的HTML文档相同的Web服务器上。
- en: Assets can also be referenced from other web servers on the Internet, however
    the content is at the mercy of the developers or administrators with access to
    that content. Developer's laziness or attempts to lower bandwidth costs can result
    in images or other assets being embedded from external sources, moving bandwidth
    charges to a web server other than your own. This process is known as **hotlinking**
    and is frowned upon within the web development community, as you force other website
    owners to deal with the cost of asset distribution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 资产也可以从互联网上的其他Web服务器引用，但内容取决于具有访问权限的开发人员或管理员。开发人员的懒惰或试图降低带宽成本可能导致图像或其他资产被嵌入到外部来源，将带宽费用转移到您自己以外的Web服务器。这个过程被称为**热链接**，在Web开发社区中被视为不良行为，因为您迫使其他网站所有者承担资产分发的成本。
- en: Due to lack of automatic optimization of web content as in the compiler in Flash,
    web developers must take it upon themselves to prepare their content and assets
    for web usage. Since web content is delivered on demand to users over variable
    Internet connection speeds, assets should be as small in file size as possible
    to allow playback and viewing with as little latency as possible for the end user.
    Let's review each of the common asset types and the proper methods for preparing
    each of them for embedding into our HTML documents.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Web内容没有像Flash中的编译器那样自动优化，Web开发人员必须自行准备其内容和资产以供Web使用。由于Web内容根据用户的可变互联网连接速度按需传送，资产的文件大小应尽可能小，以便最终用户能够以尽可能少的延迟进行播放和查看。让我们回顾一下常见资产类型以及为将它们嵌入到我们的HTML文档中准备的正确方法。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: All the assets used for optimizations and conversions can be found in the downloadable
    examples files for book within the `Chapter 02_examples` directory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用于优化和转换的资产都可以在书籍的可下载示例文件中的`Chapter 02_examples`目录中找到。
- en: Images
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像
- en: 'Adding images into your project is usually one of the first asset integration
    techniques used in every web-based project. All images on the Web generally come
    in one of three different formats: JPEG, PNG, or GIF. Each of these formats serves
    specific purposes and should be used according to what a design and function requires.
    As common as these image formats are within everyday use, it is important to understand
    what each format can and can''t do to allow for optimized image integration into
    HTML documents.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像添加到项目中通常是每个基于Web的项目中使用的第一种资产集成技术。Web上的所有图像通常以JPEG、PNG或GIF三种不同格式之一出现。每种格式都有特定的用途，应根据设计和功能的要求来使用。尽管这些图像格式在日常使用中很常见，但重要的是要了解每种格式的优缺点，以便将图像优化地集成到HTML文档中。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Follow this book along with the example files available for download on the
    Packt Publishing website ([www.packtpub.com](http://www.packtpub.com)). If you
    don't have a copy of Photoshop CS6, a demo for the same can be downloaded and
    installed for free from [http://www.adobe.com/cfusion/tdrc/index.cfm?product=photoshop&loc=en_us&promoid=IICUB](http://www.adobe.com/cfusion/tdrc/index.cfm?product=photoshop&loc=en_us&promoid=IICUB).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在Packt Publishing网站（[www.packtpub.com](http://www.packtpub.com)）上下载示例文件，跟着本书学习。如果你没有Photoshop
    CS6的副本，可以从[http://www.adobe.com/cfusion/tdrc/index.cfm?product=photoshop&loc=en_us&promoid=IICUB](http://www.adobe.com/cfusion/tdrc/index.cfm?product=photoshop&loc=en_us&promoid=IICUB)免费下载和安装演示版。
- en: Consider this high-quality, uncompressed image in **CR2** format taken directly
    from a Cannon digital SLR camera. The size of this raw image is 27 megabytes and
    hence it isn't compatible for viewing or embedding within any modern web browser.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下这张高质量的未压缩CR2格式图像，直接从佳能数码单反相机拍摄而来。这张原始图像的大小为27兆字节，因此不适合在任何现代Web浏览器中查看或嵌入。
- en: '![Images](img/3325OT_02_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Images](img/3325OT_02_01.jpg)'
- en: Even if a web browser could handle placing this image within an HTML document,
    the time it would take to download the image would be enormous. Despite today's
    common high-speed Internet connections, not many users are willing to wait more
    than a couple of minutes to view a single image while loading a web page. Therefore,
    before using this image for the Web, it must be optimized for the Web. When this
    CR2 image is opened in Photoshop, the Photoshop Camera RAW window will display
    not only the photo data and file size but also the image dimensions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 即使Web浏览器可以处理将图像放入HTML文档中，下载图像所需的时间也将是巨大的。尽管如今普通的高速互联网连接很常见，但不多的用户愿意等待几分钟以上来查看加载网页时的单个图像。因此，在将图像用于Web之前，必须对其进行优化。当在Photoshop中打开这个CR2图像时，Photoshop
    Camera RAW窗口将显示照片数据和文件大小，还有图像尺寸。
- en: '![Images](img/3325OT_02_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Images](img/3325OT_02_02.jpg)'
- en: It looks like the digital camera used to take this photo saved this image at
    17.9 megapixels, which makes this image 5184 pixels wide and 3456 pixels high.
    This image would never be used at this resolution on the Web as it wouldn't fit
    on a computer monitor and would need to be scaled down in order to be viewed.
    Scaling down an image for using it on the Web may make it smaller in size and
    easier to view on the Web, but the file needed to display it is still the enormous
    master version that will be slow to load. Let's continue by opening this file
    in Photoshop by selecting **Done** within the Camera RAW import window.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来用于拍摄这张照片的数码相机以17.9百万像素的分辨率保存了这张图像，使得这张图像宽5184像素，高3456像素。这张图像在Web上永远不会以这个分辨率使用，因为它不适合在计算机显示器上，需要缩小才能查看。为了在Web上使用图像，需要将其缩小，使其在Web上更小更容易查看，但用于显示它的文件仍然是巨大的主版本，加载速度慢。让我们继续通过在Camera
    RAW导入窗口中选择“完成”来在Photoshop中打开这个文件。
- en: It is good practice to export a web-ready version of your images with the resolution
    your web page design requires them to be displayed at. Changing the image resolution
    to an appropriate size for the Web can be easily accomplished within Photoshop
    by selecting **Image Size** under the **Image** tab.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将网页设计所需的分辨率导出为网页版本的图像是一个很好的做法。在Photoshop中，可以通过在“图像”选项卡下选择“图像大小”来轻松地将图像分辨率更改为适合Web的合适尺寸。
- en: '![Images](img/3325OT_02_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Images](img/3325OT_02_03.jpg)'
- en: In the **Image Size** window, we can enter some more realistic values into the
    **Width** and **Height** parameters to see what kind of optimizations we can achieve.
    By using values such as 1920 x 1280, which is still a very high-resolution image
    for the Web, you can view what the expected output image source file size will
    be in the text above the **Width** and **Height** parameters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在“图像大小”窗口中，我们可以输入一些更现实的值到“宽度”和“高度”参数中，以查看我们可以实现什么样的优化。通过使用1920 x 1280这样的值，这仍然是一个非常高分辨率的图像，可以查看预期输出图像源文件大小将显示在“宽度”和“高度”参数上方的文本中。
- en: '![Images](img/3325OT_02_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Images](img/3325OT_02_04.jpg)'
- en: After updating the **Width** and **Height** parameters within the **Image Size**
    window, the resulting file size can be viewed immediately above them. Keep in
    mind that the file size change displayed will not be the final output size as
    we can still optimize this image source with techniques such as JPEG compression.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在“图像大小”窗口中更新“宽度”和“高度”参数后，生成的文件大小将立即显示在它们的上方。请记住，显示的文件大小变化不会是最终输出大小，因为我们仍然可以使用JPEG压缩等技术来优化这个图像源。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: While optimizing image sizes for usage within a specific web design, there is
    generally no need to export images larger in size than what is set within a design.
    If a thumbnail is needed within a design, exporting two images, a large and a
    small, is better than using a single image for both instances.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在为特定网页设计优化图像大小时，通常不需要导出比设计中设置的尺寸更大的图像。如果设计中需要缩略图，最好导出两张图像，一张大一张小，而不是在两种情况下使用同一张图像。
- en: Photoshop's **Save for Web** feature located under the **File** tab can be said
    to be web developers' best friend. This tool allows you to easily export images
    from Photoshop with the specific intent of optimization for the Web in mind. Whether
    spicing up designs or converting assets to single instances, whenever you are
    going to export something from Photoshop for usage on the Web, this tool is the
    best way to accomplish it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 位于**文件**选项卡下的Photoshop的**保存为Web**功能可以说是网页开发人员的好帮手。这个工具允许您轻松地从Photoshop中导出图像，特别是为了优化Web而设计。无论是为设计增添活力还是将资产转换为单个实例，每当您要从Photoshop导出东西供Web使用时，这个工具都是实现的最佳方式。
- en: '![Images](img/3325OT_02_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3325OT_02_05.jpg)'
- en: Clicking on the **Save for Web** option will open a dedicated window that will
    aid you in selecting the best format and compression method while exporting your
    data. So let's export a couple of versions of this photo to see what can be the
    minimum possible file size while trying to retain as much image quality as possible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**保存为Web**选项将打开一个专用窗口，帮助您选择最佳格式和压缩方法来导出数据。因此，让我们导出这张照片的几个版本，看看在尽量保留图像质量的同时可能的最小文件大小是多少。
- en: With the format type set to **JPG** to allow for better compression, select
    the **4-Up** tab at the top of the window to bring up side-by-side comparisons
    of different levels of compression on your image data. Play around with these
    values and see how low you can take the quality levels before you see dramatic
    changes to your image. While doing this, keep an eye on the expected file size
    to see how the level of compression is affecting the size.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将格式类型设置为**JPG**以进行更好的压缩，然后在窗口顶部选择**4-Up**选项卡，以便在图像数据的不同压缩级别之间进行并排比较。尝试调整这些值，看看在看到图像发生显著变化之前，您可以将质量水平降低到多低。在这样做的同时，密切关注预期文件大小，以了解压缩水平如何影响文件大小。
- en: '![Images](img/3325OT_02_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3325OT_02_06.jpg)'
- en: The background of this dog photo specifically takes a hit in quality as the
    compression level rises. This is due to the long grass creates a very dynamic
    and busy area where pixilation can be seen. Areas within the dog's solid color
    body maintain more of the original quality as the pixels in the same area are
    very similar in color. Another interesting feature within the **Save for Web**
    window is the expected time to download output each version of image has with
    it. You can easily change the expected bandwidth levels to see how much time it
    may take to deliver this image to a user over the Internet.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着压缩级别的提高，这张狗照片的背景质量特别受到影响。这是因为长草创造了一个非常动态和繁忙的区域，可以看到像素化。狗身体内的固体颜色区域保持了更多原始质量，因为同一区域的像素颜色非常相似。**保存为Web**窗口中的另一个有趣特性是每个图像版本的预期下载时间。您可以轻松更改预期带宽级别，以查看将此图像传递到互联网用户可能需要多少时间。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Since every image is different, there is no single perfect optimization setting.
    Taking the time to make sure that each image looks its best at the smallest file
    size will reward you with a better looking website that loads quickly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个图像都不同，没有单一的完美优化设置。花时间确保每个图像在最小文件大小下看起来最好，将为您带来一个外观更好、加载速度更快的网站。
- en: For example purposes, I have exported this image in a couple of different resolutions
    and compression levels using the JPEG format.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，我使用JPEG格式以不同的分辨率和压缩级别导出了这张照片。
- en: '![Images](img/3325OT_02_07.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3325OT_02_07.jpg)'
- en: As you can see from preceding the file listing, we initially started out with
    a 27-MB photo taken directly from a digital SLR camera. Using different exporting
    methods in Photoshop, we can easily get a decent version of the same image with
    a smaller resolution in a file that is well under 500 kilobytes. Considering that
    in a fully developed web page this image could be one of many, the general rule
    of thumb is to keep every image files size as small as possible. This will allow
    your content to load quickly and display properly for the design you have created.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从文件列表中看到的，我们最初从数码单反相机直接拍摄了一张27MB的照片。在Photoshop中使用不同的导出方法，我们可以轻松获得相同图像的较小分辨率版本，文件大小远远低于500千字节。考虑到在完全开发的网页中，这张图片可能是众多图片之一，一般的经验法则是尽可能保持每个图像文件的大小。这将使您的内容快速加载，并为您创建的设计正确显示。
- en: Of course, as previously mentioned, JPG is not the only image format available
    for use within web pages. Let's quickly cover each of the formats and what each
    of them brings to the table.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，正如之前提到的，JPG并不是网页中唯一可用的图像格式。让我们快速介绍每种格式以及它们各自的特点。
- en: JPEG
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JPEG
- en: Outputting an image as `.jpeg` or more commonly `.jpg` allows for lossy image
    compression, which aims to decrease file size by discarding some of the data within
    the image. The amount of compression used when saving in JPEG format is typically
    user defined, allowing designers and developers to create a smaller file than
    the original such that is as close to its source as possible. One of the major
    downsides to the JPEG format is the lack of transparency support as the format
    contains no alpha channels.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像输出为`.jpeg`或更常见的`.jpg`允许进行有损图像压缩，旨在通过丢弃图像内的一些数据来减小文件大小。在JPEG格式中保存时使用的压缩量通常由用户定义，允许设计师和开发人员创建比原始文件更小的文件，使其尽可能接近其源。JPEG格式的主要缺点之一是缺乏透明度支持，因为该格式不包含alpha通道。
- en: PNG
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PNG
- en: '**Portable Network Graphics** (**PNG**) is a bitmap image format that doesn''t
    use compression when saving image data. PNG images are great for design and asset
    images as they retain the quality and color palette used in design and also support
    transparency. However, they are not typically utilized for images such as photographs,
    as the resulting file size will be too large due to the amount of details in the
    image.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**便携式网络图形**（**PNG**）是一种位图图像格式，在保存图像数据时不使用压缩。PNG图像非常适合设计和资产图像，因为它们保留了设计中使用的质量和调色板，并且支持透明度。然而，它们通常不用于照片等图像，因为由于图像中的细节数量，生成的文件大小将会太大。'
- en: GIF
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GIF
- en: The beloved GIF file, or more commonly seen nowadays as the **animated GIF**
    has been available for usage since CompuServe released the format in 1987\. GIF
    images support 256 colors, transparency, as well as animations via multiple image
    frames. Though it is still in use all around the Web till date, due to the lack
    of timeline control of animated images, techniques such as sprite sheets (of which
    we will cover more in the following chapters) are becoming more popular for animated
    image integration.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 心爱的GIF文件，或者如今更常见的**动画GIF**自1987年CompuServe发布该格式以来一直可供使用。GIF图像支持256种颜色、透明度，以及通过多个图像帧进行动画。尽管直到今天它仍然在Web上使用，但由于对动画图像的时间轴控制的缺乏，诸如精灵表（我们将在接下来的章节中更多地介绍）的技术正在变得更受欢迎，用于动画图像的集成。
- en: Audio
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频
- en: Preparing audio for the Web is relatively straight forward as majority of web
    browsers support **MP3** audio formats within HTML5's new audio element. Aside
    from MP3, some browsers support the use of **OGG** audio files. Therefore, exporting
    audio in either of the formats will allow you to target all modern HTML5 compatible
    browsers and ensure that your end user hears the audio regardless of what browser
    they choose to view your content with.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为Web准备音频相对来说非常简单，因为大多数Web浏览器支持HTML5新音频元素中的**MP3**音频格式。除了MP3，一些浏览器还支持使用**OGG**音频文件。因此，以任一格式导出音频将允许您针对所有现代HTML5兼容的浏览器，并确保您的最终用户无论选择何种浏览器查看您的内容，都能听到音频。
- en: The audio element
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频元素
- en: 'Creating the `audio` element, as with HTML syntax for most of the elements,
    is pretty straight forward. One major difference from traditional source references
    within HTML elements is the use of the `source` element which is encased within
    the `audio` element. By utilizing this new `source` element, we can reference
    multiple assets within the same element and load only the first file which is
    compatible:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`audio`元素，与大多数元素的HTML语法一样，都非常简单。与HTML元素中传统的源引用的一个主要区别是使用了`source`元素，该元素被包含在`audio`元素中。通过利用这个新的`source`元素，我们可以在同一个元素中引用多个资产，并且只加载与之兼容的第一个文件：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If a user attempts to open this element within a browser with no HTML5 audio
    support, the remaining internal content within the `audio` element will be displayed.
    In this case, we display only text, but you could easily append a reference to
    a Flash audio playback application or a warning styled with CSS. However, if all
    is well with the browser as per the given requisites, the page will display an
    audio playback UI that look something like the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户尝试在不支持HTML5音频的浏览器中打开此元素，则将显示`audio`元素内的其余内部内容。在这种情况下，我们只显示文本，但您也可以轻松地附加对Flash音频播放应用程序的引用或使用CSS进行样式化的警告。但是，如果浏览器按照给定的要求一切正常，页面将显示类似以下内容的音频播放UI：
- en: '![The audio element](img/3325OT_02_08.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![音频元素](img/3325OT_02_08.jpg)'
- en: The audio playback control user interface is specific to the browser displaying
    the data. The preceding image is what Google Chrome currently renders as its internal
    audio playback control user interface. Default audio controls can be removed by
    excluding the `controls` parameter within the `audio` tag element. Without the
    default control UI, you can build your own controls with images, HTML, and CSS
    and control them with JavaScript.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 音频播放控件用户界面是特定于显示数据的浏览器的。上述图像是Google Chrome当前呈现的内部音频播放控件用户界面。可以通过在`audio`标签元素中排除`controls`参数来移除默认音频控件。没有默认控件UI，您可以使用图像、HTML和CSS构建自己的控件，并使用JavaScript进行控制。
- en: Video
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视频
- en: As mentioned in [Chapter 1](ch01.html "Chapter 1. Why HTML5?"), *Why HTML5?*,
    video integration into HTML5 documents is now easier than ever. As simple as integrating
    video into HTML5 documents is, it all begins with preparing the video for use
    on the Web. This process should not only minimize the size of the video file but
    also encode it with a specific codec and save it within a specific video container.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](ch01.html "第1章。为什么选择HTML5？") *为什么选择HTML5？*中所述，将视频集成到HTML5文档中现在比以往任何时候都更容易。虽然将视频集成到HTML5文档中很简单，但一切都始于为Web准备视频。这个过程不仅应该最小化视频文件的大小，还应该使用特定的编解码器对其进行编码，并将其保存在特定的视频容器中。
- en: The HTML5 `video` tag supports the inclusion of multiple video container formats.
    While attempting to support the full range of HTML5 compliant browsers, developers
    must include references to the same video saved in multiple formats as not every
    browser supports all of the allowed video file types. Therefore, a solid understanding
    of video containers and codecs is necessary for web developers to properly integrate
    video into their documents.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5的`video`标签支持包含多种视频容器格式。在尝试支持完整范围的HTML5兼容浏览器时，开发人员必须包含对同一视频的多种格式的引用，因为并非每个浏览器都支持所有允许的视频文件类型。因此，对视频容器和编解码器的扎实理解对于网页开发人员来说是必要的，以便将视频正确集成到其文档中。
- en: '![Video](img/3325OT_02_09.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![视频](img/3325OT_02_09.jpg)'
- en: Video codecs
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频编解码器
- en: Codecs are used for compression and decompression of videos, to decrease file
    size and allow large video files to be shared using less bandwidth. Without the
    use of compression on video files, users would have to wait an inordinate amount
    of time to transfer a video over a typical Internet connection. To put this into
    perspective, a raw high-definition video, around 5 minutes in length, can be well
    over 25 GB of data. Video codecs are made up of advanced algorithms that remove
    similar data that blends from frame to frame. Rather than storing each individual
    frame as a separate image, an encoded video stores a specialized data set that
    is usually many times smaller than the raw source material. For viewing, the encoded
    data needs to be decoded from the streamlined data source back to viewable frame-based
    video. Codecs are the all-in-one piece of technology to get this task completed.
    Each of the supported video containers in HTML5 supports only one video codec,
    so choosing one is pretty straight forward. However, since video is usually accompanied
    by audio, the audio must also be run via a specific audio codec as well.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 编解码器用于压缩和解压视频，以减小文件大小并允许使用更少的带宽共享大型视频文件。如果不对视频文件进行压缩，用户将不得不等待很长时间才能通过典型的互联网连接传输视频。以高清晰度为例，大约5分钟的原始视频可能超过25GB的数据。视频编解码器由先进的算法组成，可以删除从一帧到另一帧混合的相似数据。编码视频不是将每个单独的帧存储为单独的图像，而是存储一个通常比原始源材料小得多的专门数据集。为了观看，编码数据需要从精简的数据源解码回可视的基于帧的视频。编解码器是完成这项任务的一体化技术。HTML5中支持的每个视频容器只支持一个视频编解码器，因此选择一个相当简单。然而，由于视频通常伴随着音频，音频也必须通过特定的音频编解码器运行。
- en: Video containers
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频容器
- en: One of the major issues while attempting to embed video into an HTML5 document
    is supporting all modern browsers with the same content. Unfortunately, not all
    the HTML5 compatible browsers available support the same video formats. Therefore,
    in order to support the widest range of browsers, developers must embed multiple
    versions of the same video file encoded in multiple formats. Since this issue
    is not likely to change anytime in the near future, understanding the available
    video containers and their corresponding codecs is an important step in preparing
    video for your HTML5 documents.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试将视频嵌入HTML5文档时的一个主要问题是支持所有现代浏览器以相同的内容。不幸的是，并非所有兼容HTML5的浏览器都支持相同的视频格式。因此，为了支持最广泛的浏览器范围，开发人员必须嵌入多个版本的相同视频文件，以多种格式进行编码。由于这个问题在不久的将来不太可能改变，了解可用的视频容器及其相应的编解码器是准备HTML5文档中的视频的重要步骤。
- en: MP4
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MP4
- en: From the perspective of a Flash developer, the **MP4** container should be the
    most familiar as they are very similar to **FLV** or **F4V** files. **MPEG-4**
    or MP4 containers are currently supported for embedding within the video element
    by Internet Explorer 9+, Google Chrome, and Safari. MP4 videos must be encoded
    using the **H.264** codec, which was also used by FLV and F4V videos in Flash.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从Flash开发者的角度来看，**MP4** 容器应该是最熟悉的，因为它们与 **FLV** 或 **F4V** 文件非常相似。目前，**MPEG-4**
    或 MP4 容器受到Internet Explorer 9+、Google Chrome 和 Safari的支持，可以嵌入视频元素。MP4视频必须使用 **H.264**
    编解码器进行编码，这也是Flash中FLV和F4V视频所使用的。
- en: WebM
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: WebM
- en: The WebM audio and video format is a project sponsored by Google to bring a
    completely open multimedia container and codec to the Web. WebM files are supported
    by Firefox, Google Chrome, and Opera. When encoding videos for use within a WebM
    container, the VP8 video codec, which is also owned by Google, is used.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: WebM音频和视频格式是由Google赞助的项目，旨在为Web带来完全开放的多媒体容器和编解码器。WebM文件受到Firefox、Google Chrome和Opera的支持。在为WebM容器内的视频进行编码时，使用了同样由Google拥有的VP8视频编解码器。
- en: GG
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: GG
- en: '**OGG** containers are supported by Firefox, Google Chrome, and Opera. When
    encoding videos for use within a OGG container, the **Theora** codec is used.
    Since the full spectrum of browsers is covered by using just MP4 and WebM videos,
    encoding in OGG format is not entirely necessary. There is no harm in adding it
    as a failsafe anyways; only the first video file format the browser finds within
    the source list is utilized during display, all of the other files are ignored
    and not downloaded.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**OGG** 容器受到 Firefox、Google Chrome 和 Opera 的支持。在为 OGG 容器内的视频进行编码时，使用 **Theora**
    编解码器。由于只需使用 MP4 和 WebM 视频即可覆盖所有浏览器，因此在OGG格式中进行编码并不是完全必要的。无论如何，将其添加为备用并不会有害；浏览器在源列表中找到的第一个视频文件格式在显示时被利用，所有其他文件都会被忽略并且不会被下载。'
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Sample encoded video files as well as the high-quality master video file can
    be found within the `Chapter 02_examples` directory.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`Chapter 02_examples`目录中找到示例编码视频文件以及高质量的主视频文件。
- en: Video encoding software
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频编码软件
- en: There are many great applications available online that can encode your video
    content into formats compatible with HTML5\. As long as the container and codec
    specification is met, any application or method can be used to get the job done.
    To aid in getting you up and running, for this chapter and the remainder of this
    book, here are some of the most popular encoding tools and applications web developers
    use to get videos on the Web in a snap.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线可用的优秀应用程序可以将您的视频内容编码为与HTML5兼容的格式。只要满足容器和编解码器的规范，任何应用程序或方法都可以用于完成任务。为了帮助您快速上手，在本章和本书的其余部分，以下是一些最受欢迎的编码工具和应用程序，供Web开发人员使用以快速将视频发布到网络上。
- en: Miro Video Converter
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Miro视频转换器
- en: If you are looking for a simple way to get videos ready for the Web, look no
    further than Miro Video Converter, which can be found on Miro's website [http://www.mirovideoconverter.com](http://www.mirovideoconverter.com).
    This software is not only free and open source but also supports exporting videos
    and audios in all HTML5 compatible formats. Miro Video Converter is available
    for Windows and OS X and is probably the easiest way to prepare audios and videos
    for your HTML5 projects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找一个简单的方法来准备Web视频，那么不妨试试Miro Video Converter，它可以在Miro的网站[http://www.mirovideoconverter.com](http://www.mirovideoconverter.com)上找到。这个软件不仅免费和开源，而且还支持以所有HTML5兼容格式导出视频和音频。Miro
    Video Converter适用于Windows和OS X，可能是为HTML5项目准备音频和视频的最简单的方法。
- en: '![Miro Video Converter](img/3325OT_02_10.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Miro Video Converter](img/3325OT_02_10.jpg)'
- en: With the application installed and opened, the next step is to simply drag-and-drop
    your source video file into the application for queuing. If you have multiple
    videos, you can also add them to the queue and all of them will be encoded one
    after another.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并打开应用程序后，下一步就是简单地将源视频文件拖放到应用程序中进行排队。如果您有多个视频，也可以将它们添加到队列中，所有视频将依次进行编码。
- en: '![Miro Video Converter](img/3325OT_02_11.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Miro Video Converter](img/3325OT_02_11.jpg)'
- en: Once all the videos you require to be encoded have been added to the queue,
    select the **Format** option at the bottom of the window and select one of the
    three available formats within the convertor. Keep in mind that to enable video
    element playback support in every browser, you will need to encode your videos
    once in each format. If you require more in depth configuration in the encoding
    job, Miro Video Converter allows us to control basic parameters such as aspect
    ratio and video dimensions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您需要编码的所有视频都添加到队列中，选择窗口底部的**格式**选项，并在转换器中选择三种可用格式之一。请记住，为了在每个浏览器中启用视频元素播放支持，您需要在每种格式中编码您的视频一次。如果您需要更深入地配置编码作业，Miro
    Video Converter允许我们控制基本参数，如宽高比和视频尺寸。
- en: Adobe Media Encoder
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Adobe Media Encoder
- en: Flash developers who have included videos within their projects have probably
    made use of the Adobe Media Encoder. This handy software comes bundled with Flash
    and can easily encode videos for use within Flash and HTML5 projects. Unfortunately,
    this application will only output videos natively in Flash video formats of HTML5-ready
    MP4.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在其项目中包含视频的Flash开发人员可能已经使用了Adobe Media Encoder。这个方便的软件与Flash捆绑在一起，可以轻松地对Flash和HTML5项目中使用的视频进行编码。不幸的是，该应用程序只能原生输出Flash视频格式的HTML5-ready
    MP4视频。
- en: '![Adobe Media Encoder](img/3325OT_02_12.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Adobe Media Encoder](img/3325OT_02_12.jpg)'
- en: Handbrake
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Handbrake
- en: If you don't have access to Adobe Media Encoder, then the next easiest way to
    encode MP4 videos for free is by heading over to [http://handbrake.fr](http://handbrake.fr)
    and downloading Handbrake. Not only is Handbrake open source but also it is built
    for Windows, OS X, and Linux so it's hard to be left out in the cold.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法访问Adobe Media Encoder，那么免费编码MP4视频的下一个最简单的方法就是前往[http://handbrake.fr](http://handbrake.fr)并下载Handbrake。Handbrake不仅是开源的，而且还适用于Windows、OS
    X和Linux，因此很难被忽视。
- en: '![Handbrake](img/3325OT_02_13.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Handbrake](img/3325OT_02_13.jpg)'
- en: FFMPEG
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FFMPEG
- en: Finally, my personal favorite, FFMPEG. If you are a lover of the command line
    as I am, this amazing piece of software is for you. When it comes to media, it's
    hard to say what FFMPEG can't be used to accomplish. If you're in need of high-level
    video transcoding, be sure to visit [http://ffmpeg.org](http://ffmpeg.org) to
    learn more.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我个人最喜欢的是FFMPEG。如果您像我一样喜欢命令行，那么这个令人惊叹的软件一定适合您。在媒体方面，很难说FFMPEG不能用来完成什么。如果您需要高级视频转码，请务必访问[http://ffmpeg.org](http://ffmpeg.org)了解更多信息。
- en: The video element
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频元素
- en: 'Once our video content has been encoded in the necessary formats, all that
    is left is to do is to reference the video from within the body of the HTML document.
    Just like the `audio` element, instead of the typical `src` parameter used within
    an tag to create a reference to the file, the `video` element supports the `source`
    tags within the `video` element to allow referencing multiple assets. It should
    be noted that if you are only embedding a single video reference, the `src` parameter
    within the `video` tag can be used rather than adding the `source` tags:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的视频内容已经以必要的格式进行了编码，剩下的就是在HTML文档的正文中引用视频。与`audio`元素一样，`video`元素支持在`video`元素内部使用`source`标签来引用多个资产，而不是在标签中使用典型的`src`参数来创建对文件的引用。值得注意的是，如果您只嵌入了单个视频引用，则可以在`video`标签中使用`src`参数，而不是添加`source`标签：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, just like the `audio` element, the `video` element allows for playback
    control integration by appending the `controls` parameter in the `video` tag.
    Videos can be played automatically on page load by appending `autoplay="true"`
    in the `video` tag.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与`audio`元素一样，`video`元素允许通过在`video`标签中添加`controls`参数来进行播放控制集成。视频可以通过在`video`标签中添加`autoplay="true"`来在页面加载时自动播放。
- en: Now that we have all of our assets prepped and ready for action, it's about
    time to start moving into the development environment. Since the web browser is
    our target platform, let's take some time to cover what the modern web browsers
    of today give us in terms of web developer tools to aid us in our development
    cycle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好所有资产并准备好行动，是时候开始进入开发环境了。由于Web浏览器是我们的目标平台，让我们花点时间来了解今天的现代Web浏览器在Web开发工具方面为我们提供了什么，以帮助我们在开发周期中进行开发。
- en: Debugging and output methods
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和输出方法
- en: 'With the popularity of HTML5 and other heavily client-side driven web content,
    comes the need for a robust developer toolset to allow for easy debugging and
    testing of web pages. Fortunately, each of the modern browsers have adapted or
    integrated some very similar setups for doing just this. One of the most important
    features within this toolset is the JavaScript console. The JavaScript console
    is to web developers what the Flash Output window is to Flash developers. This
    is a critically important area to print data from initialized applications or
    websites and print statements or values specified within the code. In ActionScript,
    printing data to the output window is accomplished by using the `trace()` function.
    In JavaScript, we utilize the `console` object''s built-in methods for doing the
    same. Consider the following example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 随着HTML5和其他大量客户端驱动的网页内容的流行，需要一个强大的开发者工具集来方便地调试和测试网页。幸运的是，每个现代浏览器都已经适应或集成了一些非常相似的设置来做到这一点。在这个工具集中最重要的功能之一就是JavaScript控制台。JavaScript控制台对于网页开发者来说就像Flash开发者的Flash输出窗口一样重要。这是一个非常重要的区域，用于打印初始化应用程序或网站中的数据以及代码中指定的打印语句或值。在ActionScript中，通过使用`trace()`函数来将数据打印到输出窗口。在JavaScript中，我们利用`console`对象的内置方法来做同样的事情。考虑以下示例：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This example can be found within the `Console-Example` directory within the
    `Chapter 02_examples` directory.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以在`Chapter 02_examples`目录中的`Console-Example`目录中找到。
- en: This code example creates a function in JavaScript to calculate the sum of numbers
    and calls the method with example parameters to display the output in the browser
    console. Similar to traces in ActionScript, console integration in JavaScript
    works behind the scenes, segregated from the actual web page. The primary function
    of the console is to aid a developer with debugging JavaScript, CSS, or HTML properties
    during runtime. Not only can the developer console be used for printing data from
    the application but it can also be used to trigger specific functions in your
    code without the need for a specific event or interaction to take place.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例创建了一个JavaScript函数来计算数字的总和，并使用示例参数调用该方法，以在浏览器控制台中显示输出。与ActionScript中的跟踪类似，JavaScript中的控制台集成在幕后，与实际网页分开。控制台的主要功能是在运行时帮助开发者调试JavaScript、CSS或HTML属性。开发者控制台不仅可以用于从应用程序中打印数据，还可以用于触发代码中特定函数的执行，而无需特定事件或交互的发生。
- en: As important as the console is, the entire user interface and interaction changes
    depending on what browser is being used to view the document. Therefore, understanding
    where to find and how to use the console in all popular browsers is an important
    step in helping you build robust code. Let's quickly run our simple calculate
    sum example in a couple of the common browsers to see how they handle the output.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台同样重要，整个用户界面和交互取决于使用何种浏览器来查看文档。因此，了解在所有流行浏览器中找到和如何使用控制台是帮助您构建健壮代码的重要一步。让我们快速在一些常见的浏览器中运行我们简单的计算总和示例，看看它们如何处理输出。
- en: Google Chrome
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌浏览器
- en: 'All versions of Google Chrome come packaged with a built-in developer toolset
    and it can be easily opened by right-clicking on a web page and selecting the
    **Inspect Element** option in the dialog box. This will reveal the developer tools
    window attached to the bottom of the browser window. Selecting the **Console**
    tab will display the JavaScript console to view the output from the web page.
    Opening our JavaScript `calculateSum` function example in Chrome with the console
    open should display something like the following image:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所有版本的谷歌浏览器都内置了开发者工具集，可以通过右键单击网页并在对话框中选择**检查元素**选项来轻松打开。这将显示附加到浏览器窗口底部的开发者工具窗口。选择**控制台**选项卡将显示JavaScript控制台，以查看网页的输出。在Chrome中打开我们的JavaScript
    `calculateSum`函数示例，并打开控制台，应该显示类似下面的图像：
- en: '![Google Chrome](img/3325OT_02_14.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![谷歌浏览器](img/3325OT_02_14.jpg)'
- en: As you can see, the output from the `console.log()` call has been displayed
    along with what file and line number the call was dispatched from. Even from a
    simple perspective, I am sure you are starting to see how handy this tool could
    be if you have 100 or even 1000 lines of code in multiple files to deal with.
    As similar to the output window for traces in ActionScript this tool is, the cherry
    on top of the pie is its ability to invoke further JavaScript execution directly
    from the console window. Within the console, we can continue and find the sum
    of new numbers by calling the `calculateSum` function with the necessary values
    directly from the console.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`console.log()`调用的输出已经显示出来，还有调用是从哪个文件和行号发出的。即使从简单的角度来看，我相信你已经开始看到这个工具有多么方便，如果你有100甚至1000行代码在多个文件中处理。与ActionScript中的跟踪输出窗口类似，这个工具的另一个亮点是它能够直接从控制台窗口调用进一步的JavaScript执行。在控制台中，我们可以继续调用`calculateSum`函数，并直接从控制台传入必要的值来找到新数字的总和。
- en: '![Google Chrome](img/3325OT_02_15.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![谷歌浏览器](img/3325OT_02_15.jpg)'
- en: Some browsers, such as Chrome, even have auto completion feature that expands
    the text as you type in method or property names, a feature I am sure most Flash
    developers wished they had within the Flash IDE.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器，比如Chrome，甚至具有自动完成功能，当你输入方法或属性名称时会展开文本，这是我相信大多数Flash开发者希望在Flash IDE中拥有的功能。
- en: Firebug for Firefox
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 火狐浏览器的Firebug
- en: Since Firefox does not come pre-packed with a robust developer toolset, a common
    option for web developers is to install the **Firebug** extension to enable this
    feature. The extension can easily be added to your Firefox installation in a couple
    of seconds by visiting [http://getfirebug.com](http://getfirebug.com). Once installed
    and activated, right-click anywhere on a page and select **Inspect Element with
    Firebug**.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Firefox没有预装强大的开发者工具集，网页开发者的常见选择是安装**Firebug**扩展来启用此功能。可以通过访问[http://getfirebug.com](http://getfirebug.com)在几秒钟内将扩展轻松添加到Firefox安装中。安装并激活后，右键单击页面的任何位置，然后选择**使用Firebug检查元素**。
- en: '![Firebug for Firefox](img/3325OT_02_16.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![火狐浏览器的Firebug](img/3325OT_02_16.jpg)'
- en: This should all feel pretty familiar to what we did within Chrome. Firebug is
    a great little project that almost all developers I know utilize. There are a
    ton of great features in all of these toolsets, many of which we will touch on
    in this book. Since we have a very simple HTML page open with barely anything
    in it, now might be a good time to see the UI and output from a more vanilla web
    page, so feel free to click around and check things out.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该感觉非常熟悉，就像我们在Chrome中所做的一样。Firebug是一个几乎所有我认识的开发人员都使用的很棒的项目。所有这些工具集中都有很多很棒的功能，我们将在本书中介绍其中许多功能。由于我们打开了一个非常简单的HTML页面，几乎没有什么内容，现在可能是一个很好的时机来查看更原始的网页的UI和输出，所以随时随地点击并查看一下。
- en: '![Firebug for Firefox](img/3325OT_02_17.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Firefox的Firebug](img/3325OT_02_17.jpg)'
- en: Safari
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Safari
- en: To enable the developer tools in Safari, open the **Preferences** window and
    select the **Advanced** tab. Select the check box at the bottom of the window
    labeled **Show Develop menu in menu bar** and then you can close the window.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Safari中的开发者工具，请打开**首选项**窗口，然后选择**高级**选项卡。选择窗口底部标有**在菜单栏中显示开发菜单**的复选框，然后可以关闭窗口。
- en: '![Safari](img/3325OT_02_18.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Safari](img/3325OT_02_18.jpg)'
- en: From this point on, you can right-click, as usual, on any web page and select
    **Inspect Element** to display the tools window.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，您可以像往常一样在任何网页上右键单击，然后选择**检查元素**以显示工具窗口。
- en: '![Safari](img/3325OT_02_19.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Safari](img/3325OT_02_19.jpg)'
- en: If you were paying attention, you may notice that this console is almost identical
    to the console within Google Chrome. Of course, it has a command-line integration
    as we have seen in the other browsers.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您留意的话，您可能会注意到这个控制台几乎与Google Chrome中的控制台相同。当然，它具有命令行集成，就像我们在其他浏览器中看到的那样。
- en: '![Safari](img/3325OT_02_20.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Safari](img/3325OT_02_20.jpg)'
- en: Opera
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Opera
- en: Similar to Google Chrome, the developer tools in Opera can be easily accessed
    by right-clicking on a web page and selecting **Inspect Element**. Once the developer
    tools window opens at the bottom of the browser, select the **Console** tab to
    open the developer console. Initially, the console will be blank and clear of
    any interaction from the web page you are currently viewing.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与Google Chrome类似，Opera中的开发者工具可以通过右键单击网页并选择**检查元素**来轻松访问。一旦开发者工具窗口在浏览器底部打开，选择**控制台**选项卡以打开开发者控制台。最初，控制台将是空白的，没有任何来自当前正在查看的网页的交互。
- en: '![Opera](img/3325OT_02_21.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Opera](img/3325OT_02_21.jpg)'
- en: 'Rather than having the console always active, Opera has decided to read console
    commands only when the console is actually open. Therefore, refreshing the page
    will reveal the console interaction:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与始终处于活动状态的控制台不同，Opera决定仅在控制台实际打开时才读取控制台命令。因此，刷新页面将显示控制台交互：
- en: '![Opera](img/3325OT_02_22.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Opera](img/3325OT_02_22.jpg)'
- en: Internet Explorer
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Internet Explorer
- en: As of Internet Explorer 9, Microsoft has begun including a developer's toolset
    directly within the browser. The **Developers Tools** window can be opened at
    anytime by pressing *F12* while viewing a page. Just like Opera, Internet Explorer
    requires a page to be refreshed to enable the usage of the console on the active
    page, as it stays inactive when it is closed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从Internet Explorer 9开始，微软已经开始在浏览器中直接包含开发人员工具集。可以通过在查看页面时按下*F12*随时打开**开发人员工具**窗口。与Opera一样，Internet
    Explorer需要刷新页面才能在活动页面上启用控制台的使用，因为当关闭时它保持不活动状态。
- en: '![Internet Explorer](img/3325OT_02_23.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![Internet Explorer](img/3325OT_02_23.jpg)'
- en: Of course, just like every other console, we can call our JavaScript methods
    and variables from the command line.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，就像其他控制台一样，我们可以从命令行调用我们的JavaScript方法和变量。
- en: '![Internet Explorer](img/3325OT_02_24.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![Internet Explorer](img/3325OT_02_24.jpg)'
- en: Syntax differences
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法差异
- en: Now that we have some media to work with and the browser tools at our disposal,
    let's start some more toying with JavaScript and compare its syntax to what you
    already know in ActionScript 3.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有一些媒体可以使用，并且浏览器工具也可以使用，让我们开始玩弄JavaScript并将其语法与您已经了解的ActionScript 3进行比较。
- en: Variables
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Unlike variables declared within ActionScript 3, JavaScript variables are not
    strictly typed. This takes the familiar ActionScript 3 variable declaration from:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '与在ActionScript 3中声明的变量不同，JavaScript变量没有严格类型。这将从熟悉的ActionScript 3变量声明转换为： '
- en: '[PRE3]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'to a simpler syntax within JavaScript which looks as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为JavaScript中的更简单的语法，如下所示：
- en: '[PRE4]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This lack of strict typing is referred to as dynamic typing. Variables in JavaScript
    can be used as any type at any time. Consider this example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这种缺乏严格类型称为动态类型。JavaScript中的变量可以随时用作任何类型。考虑以下示例：
- en: '[PRE5]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Dynamic typing allows code to be writing faster by requiring less input from
    the developer, but this development ease comes at the cost of debugging large
    applications. ActionScript 3's strict typing allows the compiler to catch issues
    even before exporting a new version of your application. JavaScript will not do
    this natively, and it is probably one of the biggest complaints most developers
    with prior ActionScript 3 experience have when using the language.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 动态类型允许代码更快地编写，因为它需要开发人员的输入更少，但这种开发便利性是以调试大型应用程序为代价的。ActionScript 3的严格类型允许编译器在导出新版本应用程序之前就捕获问题。JavaScript不会在本地执行此操作，这可能是先前具有ActionScript
    3经验的大多数开发人员使用该语言时最大的抱怨之一。
- en: Variable type conversion
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量类型转换
- en: 'Although variables in JavaScript are not strictly typed, there are methods
    to ensure that variable data is in correct form for the desired action. Type conversion
    can be used on variables to ensure they are formatted properly:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript中的变量没有严格类型，但有方法可以确保变量数据以正确的形式进行所需的操作。可以对变量进行类型转换以确保其格式正确：
- en: '[PRE6]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Conditions and loops
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件和循环
- en: 'We will cover these two aspects together as the syntax for conditions and loops
    in JavaScript are almost the same to what you are used to in ActionScript 3\.
    `If`, `if... else`, and `if... else if` conditions are no different than that
    in ActionScript:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一起涵盖这两个方面，因为JavaScript中的条件和循环语法几乎与ActionScript 3中您习惯的一样。`If`，`if... else`和`if...
    else if`条件与ActionScript中的条件没有什么不同：
- en: '[PRE7]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also, the `switch` statements can be used and just like `if` statements; the
    syntax is exactly the same as that in ActionScript:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，`switch`语句也可以使用，就像`if`语句一样；语法与ActionScript中的完全相同：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Loops are no different to their counterparts in ActionScript. Consider these
    `for` and `while` loops:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 循环与ActionScript中的循环没有什么不同。考虑这些`for`和`while`循环：
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Functions
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: As in ActionScript 3, functions in JavaScript are blocks of code encased within
    curly braces (`{ }`). Every function is associated with a keyword that is used
    to call the function and run the encased code within it. As usual, functions may
    return values back to the point where the call was originally made. This is accomplished
    using the `return` statement.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 与ActionScript 3一样，JavaScript中的函数是用大括号（`{}`）括起来的代码块。每个函数都与一个关键字相关联，用于调用函数并运行其中的代码。通常情况下，函数可以将值返回到最初调用的地方。这是通过使用`return`语句来实现的。
- en: 'The syntax of JavaScript function is very similar to ActionScript functions
    but is without the need for strict typing of expected parameters and the function
    return types. As a Flash developer, your ActionScript 3 functions probably looked
    something like the follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript函数的语法与ActionScript函数非常相似，但不需要严格类型化预期参数和函数返回类型。作为Flash开发人员，您的ActionScript
    3函数可能看起来像下面这样：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This syntax can be easily converted to JavaScript just by removing the variable
    and return type declarations so that the same function in JavaScript can be written
    as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法可以很容易地转换为JavaScript，只需删除变量和返回类型声明，以便JavaScript中的相同函数可以写成如下形式：
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Objects
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: 'Technically, everything declared in JavaScript is an object, however, time
    will come when you will need to create your own custom objects. This can be done
    in one of the following two manners. The first one, which should be very familiar
    to ActionScript developers is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，JavaScript中声明的所有内容都是对象，但是，总有一天你会需要创建自己的自定义对象。可以通过以下两种方式之一来实现。第一种方式，应该非常熟悉ActionScript开发人员，如下所示：
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can also create objects by defining them as a functions as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将它们定义为函数来创建对象，如下所示：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: DOM events
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM事件
- en: Integrating DOM events allows you to use JavaScript to deal with events that
    occur within HTML documents.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 集成DOM事件允许您使用JavaScript处理在HTML文档中发生的事件。
- en: Mouse events
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼠标事件
- en: 'The DOM exposes mouse events for basic user interactions with the mouse pointer.
    By using the `onclick` event parameter within an HTML tag, we can execute JavaScript
    when a user clicks on a specific element:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: DOM公开了鼠标事件，用于鼠标指针的基本用户交互。通过在HTML标记中使用`onclick`事件参数，我们可以在用户单击特定元素时执行JavaScript：
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'However, we can also target the element completely from JavaScript and deal
    with the event handler outside our HTML source code, to keep our project clean
    and easy to understand:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也可以完全从JavaScript中定位元素，并在HTML源代码之外处理事件处理程序，以保持项目清晰易懂：
- en: '[PRE15]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Of course, you are not limited to just clicks for mouse events. Events can also
    be handled for mouse over, mouse out, mouse down, and mouse up. In the examples
    within this book, we will utilize all of these events as well as methods to extend
    them even further.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您不仅仅局限于鼠标点击事件。事件也可以处理鼠标悬停、鼠标移出、鼠标按下和鼠标释放。在本书的示例中，我们将利用所有这些事件以及扩展它们的方法。
- en: Example JavaScript in action
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript示例
- en: 'With all of the JavaScript syntax specifications covered, let''s use some of
    them into a working example and see what happens. Have a look at the following
    simple HTML document containing JavaScript to sort a randomized array of numbers:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在涵盖了所有JavaScript语法规范之后，让我们将其中一些用于一个工作示例，并看看会发生什么。看一下以下简单的HTML文档，其中包含JavaScript来对随机数组进行排序：
- en: '[PRE16]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This example covers many of the features and syntax specifications of JavaScript
    that we have just covered. Within our JavaScript block declared in the HTML document
    `head` tag, we have created two functions. The first function is our initiation
    method to prepare and run the application once it called. The second function
    contains the popular insertion sort algorithm, which will sort our randomized
    array of numbers. To enable both functions to use the same variable, we create
    `elementCount` and `sortlist` as global variables outside of each function's scope.
    Within the HTML `body` tag is a `button` element, which renders a typical form
    button element on the page and when a user clicks this button, the `onclick` handler
    calls the `init` function.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例涵盖了我们刚刚涵盖的JavaScript的许多特性和语法规范。在HTML文档的`head`标记中声明的JavaScript块中，我们创建了两个函数。第一个函数是我们的初始化方法，用于准备和运行应用程序。第二个函数包含了流行的插入排序算法，它将对我们的随机数组进行排序。为了使两个函数能够使用相同的变量，我们在每个函数的作用域之外创建了`elementCount`和`sortlist`作为全局变量。在HTML的`body`标记中是一个`button`元素，它在页面上呈现一个典型的表单按钮元素，当用户单击此按钮时，`onclick`处理程序调用`init`函数。
- en: This example isn't flashy by any means but, as I mentioned above, it covers
    many of the different aspects of the JavaScript syntax specifications.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例并不华丽，但正如我上面提到的，它涵盖了JavaScript语法规范的许多不同方面。
- en: Timing JavaScript execution
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时JavaScript执行
- en: 'One important point to note while dealing with JavaScript execution timing
    is to be sure that the entire page has finished loading prior to allowing the
    JavaScript to begin executing its code. The reason for waiting for page to load
    is to allow all of the assets and external references to load on the page before
    attempting to manipulate them. If your JavaScript attempts to perform an action
    on an element that doesn''t exist, your application flow could fail. To avoid
    this issue, we can add an event listener to the DOM allowing it to run only once
    the page has been completely loaded and comes to display. Utilizing the DOM event
    for JavaScript offers an easy way to do just this as shown in the following code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 处理JavaScript执行时间的一个重要注意点是确保整个页面在允许JavaScript开始执行其代码之前已经完成加载。等待页面加载的原因是为了在尝试操作它们之前允许页面上的所有资产和外部引用加载。如果您的JavaScript尝试对不存在的元素执行操作，您的应用程序流程可能会失败。为了避免这个问题，我们可以向DOM添加一个事件侦听器，使其仅在页面完全加载并显示后运行。利用DOM事件为JavaScript提供了一个简单的方法来做到这一点，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, when the window has completed its load process the `init` function is called
    and the remainder of the application code can begin execution. JavaScript actually
    has a number of ways to accomplish execution of the code, specifically once the
    page has finished loading. The following chapters of this book will use and explain
    many of them using examples.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当窗口完成加载过程后，将调用`init`函数，应用程序代码的其余部分可以开始执行。实际上，JavaScript有许多方法可以在页面加载完成后执行代码。本书的后续章节将使用示例来使用和解释其中许多方法。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we spent some time to better familiarize ourselves with the
    process involved in preparing media assets for our HTML5 projects. Also, preparation
    and integration techniques for each of the typical multimedia formats as well
    as some popular pieces of software available to aid in getting this done were
    covered in this chapter. We took a quick jump right into ActionScript 3 versus
    JavaScript syntax in order to become more familiar with the small but important
    difference while writing JavaScript compared to ActionScript 3\. This sets us
    up perfectly for [Chapter 3](ch03.html "Chapter 3. Scalability, Limitations, and
    Effects"), *Scalability, Limitations, and Effects*, where we will begin putting
    HTML5 to the limits in order to see what are its limitations and short comings
    as well as all of the surprising things it can do.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们花了一些时间来更好地熟悉为我们的HTML5项目准备媒体资产所涉及的过程。此外，本章还涵盖了每种典型多媒体格式的准备和集成技术，以及一些流行的软件，可帮助完成这些工作。我们迅速地比较了ActionScript
    3和JavaScript语法，以便更熟悉在编写JavaScript时与ActionScript 3相比的细微但重要的差异。这使我们完美地准备好进入[第3章](ch03.html
    "第3章. 可扩展性、限制和效果")，“可扩展性、限制和效果”，在那里我们将开始将HTML5推到极限，以查看它的限制和缺点，以及它可以做的所有令人惊讶的事情。
