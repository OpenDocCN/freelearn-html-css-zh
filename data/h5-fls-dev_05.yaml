- en: Chapter 5. Code Once, Release Everywhere
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。一次编码，到处发布
- en: As I am sure you may have noticed by now that although all the modern browsers
    support many aspects of the specified HTML5 feature set, in many cases, developers
    have to write their code in specific ways to enable proper cross-browser support
    for their projects. Not only is this a time consuming task that requires a lot
    of redundancy and conditioning, but it requires developers to stay caught up on
    the cutting edge of the current browser support of the HTML5 specification; not
    only for every browser targeted, but every update for each browser as well. With
    the popularity of HTML5 development growing at an extremely fast rate, many developers
    have created libraries and frameworks to aid in targeting all platforms with a
    single instance of code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您现在可能已经注意到，尽管所有现代浏览器都支持指定的HTML5功能集的许多方面，但在许多情况下，开发人员必须以特定方式编写其代码，以实现对其项目的适当跨浏览器支持。这不仅是一项耗时的任务，需要大量的冗余和调整，而且要求开发人员保持与HTML5规范的当前浏览器支持的最前沿；不仅针对每个目标浏览器，还要针对每个浏览器的每个更新。随着HTML5开发的流行度以极快的速度增长，许多开发人员已经创建了库和框架，以帮助使用单个代码实例针对所有平台。
- en: 'In this chapter, we will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: An overview of the CreateJS Toolkit, a Flash developer's best friend for HTML5
    development as well as its internal libraries, EaselJS, SoundJS, PreloadJS, and
    TweenJS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CreateJS工具包的概述，这是Flash开发人员在HTML5开发中的最佳伙伴，以及其内部库EaselJS、SoundJS、PreloadJS和TweenJS
- en: Using Modernizr to detect clients' browser features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Modernizr检测客户端浏览器功能
- en: Looking deeper into CSS3 media queries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解CSS3媒体查询
- en: Covering all your bases
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖所有基础
- en: One of the biggest differences in the development paradigm between Flash and
    HTML5 is the expectation a developer has from the user who will be viewing the
    end product. Typically, a Flash developer will preset the publish settings for
    the project, when starting a project to the Flash Player that will best support
    the feature set to be built into the application. Of course, this means that the
    user's Flash Player installed on their computer must be up-to-date in order to
    fill the prerequisite version. When developing any HTML-based web project, this
    issue is exponentially greater because the developer loses control over how a
    user is exactly able to view their content. Although some browsers are more common
    than others, there is a massive range of Internet Browser software available today,
    not only for desktops and mobiles, but for devices such as televisions as well.
    Unfortunately, each of these browsers is not built to the exact same specification
    and if you ignore testing your project in each and every one of them, you cannot
    guarantee that your content will be displayed and will act as you had created
    it to.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Flash和HTML5开发范式之间最大的区别之一是开发人员对最终用户的期望。通常，Flash开发人员会在启动项目时预设项目的发布设置，以便将项目发布到最能支持应用程序内置功能集的Flash
    Player。当然，这意味着用户计算机上安装的Flash Player必须是最新的，以满足先决条件版本。在开发任何基于HTML的Web项目时，这个问题会更加严重，因为开发人员失去了对用户如何查看其内容的控制。尽管有些浏览器比其他浏览器更常见，但如今有大量的互联网浏览器软件可用，不仅适用于台式机和移动设备，还适用于电视等设备。不幸的是，每个浏览器的规格并不完全相同，如果您忽略在每个浏览器中测试您的项目，就无法保证您的内容将被显示并且将按照您创建的方式运行。
- en: With the release of Microsoft's Internet Explorer Version 10, long gone are
    the days of web developers complaining about developing web pages for Internet
    Explorer Version 6\. However, a new set of issues have been born with the advent
    of HTML5\. Web pages and web-based applications are now gaining accessibility
    to many of the features you have become accustomed to with native desktop applications.
    New system integration, such as file accessibility, peripheral support, as well
    as hardware acceleration have required that modern web browsers implement support
    for these features to enable proper support for users viewing this new HTML5 content.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着微软发布的Internet Explorer 10版本的发布，开发人员不再抱怨为Internet Explorer 6版本开发网页的日子已经一去不复返。然而，随着HTML5的出现，一系列新问题也随之而来。网页和基于Web的应用程序现在可以访问许多您已经习惯于在本机桌面应用程序中使用的功能。新的系统集成，如文件访问权限，外围支持以及硬件加速，要求现代Web浏览器实现对这些功能的支持，以便为查看这些新HTML5内容的用户提供适当的支持。
- en: So which browser is the best? Well, from the developer's perspective, as nice
    as it is to have a favorite, this really doesn't matter if you want everyone to
    view your content. Understanding the differences and how they have changed, and
    will change, will keep your HTML5 skill set up-to-date and ahead of the curve.
    As mentioned before, if you are using any of the popular and modern web browsers
    available today, most of your bases will be covered. At the time of writing this
    book, upcoming features such as **WebRTC**, which we will cover later in this
    book, are only supported in browsers such as Google Chrome.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么哪个浏览器是最好的呢？从开发人员的角度来看，尽管有一个最喜欢的浏览器是很好的，但如果您希望每个人都能查看您的内容，这并不重要。了解差异以及它们如何已经改变，以及将来会如何改变，将使您的HTML5技能保持最新并领先于潮流。如前所述，如果您使用今天可用的流行和现代Web浏览器，大多数基础将得到覆盖。在撰写本书时，即将推出的功能，如我们将在本书后面介绍的WebRTC，只在Google
    Chrome等浏览器中得到支持。
- en: CreateJS
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CreateJS
- en: Since this book is written specifically for Flash developers extending their
    skill set with HTML5, the first library we cover to aid in JavaScript development
    has to be CreateJS. CreateJS is a collection of open source, modular JavaScript
    libraries that can work separately to enable a more seamless transition from ActionScript
    3 to JavaScript. CreateJS has been specifically created to easily allow web developers
    to create, embed, and manipulate media assets into their HTML5 projects with relative
    ease. This point is especially true if you come from a Flash development background.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书是专门为Flash开发人员编写的，他们正在用HTML5扩展他们的技能，我们首先要介绍的是CreateJS。CreateJS是一组开源的、模块化的JavaScript库，可以单独工作，以实现从ActionScript
    3到JavaScript的更无缝的过渡。CreateJS专门为了让Web开发人员能够轻松地在他们的HTML5项目中创建、嵌入和操纵媒体资产。如果你来自Flash开发背景，这一点尤其正确。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The latest versions of all of the elements within CreateJS as well as the full
    documentation can be found at [http://www.createjs.com](http://www.createjs.com).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CreateJS中所有元素的最新版本以及完整的文档可以在[http://www.createjs.com](http://www.createjs.com)找到。
- en: CreateJS focuses on the asset integration and manipulation end of things to
    enable you, the developer, to spend more time making sure your project is pixel
    perfect. There have been some great examples of some amazing projects in the recent
    past that have made use of this library, producing some stunning HTML5 experiences,
    such as [http://www.findyourwaytooz.com](http://www.findyourwaytooz.com), [http://www.atari.com/arcade](http://www.atari.com/arcade),
    and [http://shinobicorp.com/retro-soccer](http://shinobicorp.com/retro-soccer).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CreateJS专注于资产集成和操纵，以便让您，开发人员，花更多的时间来确保您的项目像素完美。最近有一些很棒的例子，展示了一些令人惊叹的项目，这些项目利用了这个库，产生了一些令人惊叹的HTML5体验，比如[http://www.findyourwaytooz.com](http://www.findyourwaytooz.com)、[http://www.atari.com/arcade](http://www.atari.com/arcade)和[http://shinobicorp.com/retro-soccer](http://shinobicorp.com/retro-soccer)。
- en: Although we could go into great detail about each of the exciting features within
    the CreateJS package, we would probably end up filling half this book. Therefore,
    to make sure you can at least get your feet wet and understand what CreateJS has
    to offer, let's review each of the elements within the package and how they can
    be utilized in your HTML5 projects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以详细介绍CreateJS包中每个令人兴奋的功能，但我们可能会填满一半的书。因此，为了确保您至少可以初步了解CreateJS提供了什么，让我们回顾一下包中的每个元素以及它们如何在您的HTML5项目中使用。
- en: EaselJS
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EaselJS
- en: EaselJS is a JavaScript library which aims at mimicking the Flash Display List
    syntax within ActionScript 3 into JavaScript. It does this by using the HTML5
    Canvas element like a stage within Flash. As a newcomer to HTML5 and JavaScript
    syntax, EaselJS may be a library that will not only allow you to continue creating
    applications in a similar manner as what you have been developing up to this point
    but also allow you to easily port your preexisting Flash applications to HTML5
    with relative ease.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS是一个旨在模仿Flash中ActionScript 3的显示列表语法的JavaScript库。它通过使用HTML5 Canvas元素来实现这一点，就像Flash中的舞台一样。作为HTML5和JavaScript语法的新手，EaselJS可能是一个不仅可以让你继续以与你到目前为止一直在开发的方式相似的方式创建应用程序，而且还可以让你相对轻松地将你现有的Flash应用程序移植到HTML5的库。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The most up-to-date EaselJS documentation can easily be found at [http://www.createjs.com/Docs/EaselJS](http://www.createjs.com/Docs/EaselJS).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的EaselJS文档可以在[http://www.createjs.com/Docs/EaselJS](http://www.createjs.com/Docs/EaselJS)上轻松找到。
- en: EaselJS can be used to handle all your graphical elements such as bitmaps, vectors,
    and sprite sheets for your HTML5 project. One of the best use cases of EaselJS
    is porting an existing ActionScript 3 class into JavaScript. Since EaselJS is
    set up to emulate the display list in Flash, once our ActionScript 3 class has
    been converted, we can begin to use it in our JavaScript project almost the same
    way we did in our Flash project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: EaselJS可以用来处理HTML5项目中的所有图形元素，如位图、矢量和精灵表。EaselJS的最佳用例之一是将现有的ActionScript 3类移植到JavaScript中。由于EaselJS被设置为模拟Flash中的显示列表，一旦我们的ActionScript
    3类被转换，我们就可以开始在我们的JavaScript项目中使用它，方式几乎与在Flash项目中使用它的方式相同。
- en: 'Every project using EaselJS, or any other CreateJS library, needs to import
    the library source into their HTML5 project. Once you have acquired the necessary
    JavaScript source files from the CreateJS website, set up your HTML document as
    demonstrated in the following example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个使用EaselJS或任何其他CreateJS库的项目都需要将库源导入到他们的HTML5项目中。一旦你从CreateJS网站获取了必要的JavaScript源文件，就可以按照下面的例子设置你的HTML文档：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from the preceding example, the EaselJS library is imported into
    our document within the `<script>` tag. We have also added an empty Canvas element
    to the body of our document. Since EaselJS uses the HTML5 Canvas element in replacement
    of the Stage in Flash, this will be a requirement in this example and all projects
    using this library.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上面的例子中所看到的，EaselJS库是在`<script>`标签中导入到我们的文档中的。我们还在文档的主体中添加了一个空的Canvas元素。由于EaselJS使用HTML5
    Canvas元素来替代Flash中的舞台，这在这个例子和所有使用这个库的项目中都是必需的。
- en: 'To kick things off in our example, we will start by reviewing a basic ActionScript
    3 class, which could be used in any Flash project. This class is a simple demonstration
    to apply a bitmap graphic to the position of the mouse over the stage and update
    the graphic''s position as the mouse moves. This example encompasses not only
    the use of external graphic references but mouse- and time-based events as well:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将首先回顾一个基本的ActionScript 3类，这个类可以在任何Flash项目中使用。这个类是一个简单的演示，将一个位图图形应用到舞台上鼠标的位置，并在鼠标移动时更新图形的位置。这个例子不仅涵盖了对外部图形引用的使用，还涵盖了基于鼠标和时间的事件：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All of this should look very familiar provided you have spent any time working
    with ActionScript 3 classes, so let's jump right into the conversion process.
    As we have seen in the examples throughout the book so far, when creating classes
    in JavaScript, there are some immediate differences in syntax, layout, and usage
    from ActionScript 3\. First and foremost are the package declaration as well as
    the import statements. Packages do not exist in JavaScript; therefore, that code
    can be removed. The code directory and the file structure you have grown accustomed
    to can still be utilized; however, there will be no reference needed in code to
    distinguish what code is in what package. Import statements can also be completely
    removed as they are not used in JavaScript as well. Instead, any further external
    code required within the project should be imported within a `<script>` tag element
    inside the HTML document.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花了一些时间使用ActionScript 3类，所有这些都应该看起来非常熟悉，所以让我们直接进入转换过程。正如我们在整本书中所看到的例子一样，在JavaScript中创建类时，语法、布局和用法都有一些明显的不同。首先是包声明以及导入语句。JavaScript中不存在包；因此，该代码可以被移除。代码目录和文件结构仍然可以被使用；然而，在代码中不需要引用来区分哪个代码在哪个包中。导入语句也可以完全移除，因为它们在JavaScript中也不被使用。相反，项目中需要的任何外部代码应该在HTML文档内的`<script>`标签元素中导入。
- en: 'Since we intend to keep all of our classes as separate files within the project
    source structure, we can replace the typical package syntax in ActionScript 3
    classes with the following self-executing anonymous function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们打算将所有课程作为项目源结构中的单独文件保留，因此我们可以用以下自执行匿名函数替换ActionScript 3类中的典型包语法：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When our class source code is placed within this function, it will automatically
    be executed when it has been loaded, allowing us to utilize this class from the
    rest of our project''s code. After the strict typing on functions and variables
    has been removed, as well as the public and private variables converted into JavaScript
    syntax, our class will look something as the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的类源代码放置在这个函数内时，它将在加载后自动执行，允许我们从项目的其余代码中利用这个类。在删除函数和变量的严格类型以及将公共和私有变量转换为JavaScript语法之后，我们的类将看起来像下面这样：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice the final line appended within the self-executing anonymous function,
    `window.MouseLine = MouseLine;`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在自执行匿名函数中附加的最后一行，`window.MouseLine = MouseLine;`
- en: 'This final addition to the class allows us to instantiate a new `MouseLine`
    object from our application base and utilize the functionality within the class.
    But before we can start using this class, we need to import it into our project
    as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类的最后添加允许我们从应用程序基础实例化一个新的`MouseLine`对象，并在类中使用功能。但在我们开始使用这个类之前，我们需要将其导入到我们的项目中，如下所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With our class saved as `MouseLine.js`, we can now import it into our HTML
    document as usual by using the `<script>` tag in the head of our HTML5 document.
    For this example, we will also open another `<script>` tag within the document
    *head*, where we will place our custom JavaScript code that utilizes our new class:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的类保存为`MouseLine.js`后，我们现在可以像往常一样将其导入到我们的HTML文档中，通过在HTML5文档的头部使用`<script>`标签。在这个例子中，我们还将在文档的*head*中打开另一个`<script>`标签，在那里我们将放置利用我们的新类的自定义JavaScript代码：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, we start constructing the `stage` for our EaselJS
    project. We begin by creating two global variables, one for our `stage` element
    and the other for our mouse graphic element. Following the global variables is
    our `init()` function, which will be called on page load. The next step within
    our `init` function is to set up the Canvas element we applied to the body of
    this HTML document. We use the `new.createjs.Stage('canvas-element')` syntax to
    tell EaselJS that our Canvas with the ID of `exampleCanvas` is our intended stage.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们开始构建EaselJS项目的`stage`。我们首先创建两个全局变量，一个用于我们的`stage`元素，另一个用于我们的鼠标图形元素。在全局变量之后是我们的`init()`函数，该函数将在页面加载时调用。在我们的`init`函数内的下一步是设置Canvas元素，我们将其应用到这个HTML文档的body上。我们使用`new.createjs.Stage('canvas-element')`语法告诉EaselJS，我们的ID为`exampleCanvas`的Canvas是我们预期的stage。
- en: With EaselJS applied into our project and referencing our Canvas element, the
    next step is to apply a ticker to allow us to emulate the `onEnterFrame` event
    in ActionScript 3\. Since we intend for the graphic in our `MouseGraphic` class
    to follow our mouse when on the Canvas, we will need to constantly check the position
    of the mouse to translate those values into the x and y position values of the
    graphic. As mentioned, in ActionScript 3, one would traditionally use an `onEnterFrame`
    event; however, without the concept of MovieClips and frames in JavaScript, the
    setup uses a `Ticker` object from EaselJS instead.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将EaselJS应用到我们的项目中并引用我们的Canvas元素后，下一步是应用一个ticker，以允许我们模拟ActionScript 3中的`onEnterFrame`事件。由于我们打算让`MouseGraphic`类中的图形在Canvas上跟随鼠标移动，我们需要不断检查鼠标的位置，将这些值转换为图形的x和y位置值。如前所述，在ActionScript
    3中，传统上会使用`onEnterFrame`事件；然而，在JavaScript中没有MovieClips和frames的概念，因此设置使用了EaselJS的`Ticker`对象。
- en: 'Still within our `init()` function we have just created, we can now apply the
    following code to set up our `Ticker` object:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的`init()`函数中，我们现在可以应用以下代码来设置我们的`Ticker`对象：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Not only have we created a new event listener for our `Ticker` object with
    the preceding lines of code, but we are also setting the intended frames per second
    of our Canvas rendering by utilizing one of the many internal CreateJS object
    methods. However, with our event listener created, we need a function to be called
    every time a new frame has been rendered. When using the `Ticker` object in CreateJS,
    we can simply append a `tick()` function in the same scope as the `Ticker` object,
    which will be called upon every interval:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅为我们的`Ticker`对象创建了一个新的事件监听器，并且还通过使用CreateJS内部对象方法之一来设置了Canvas渲染的预期每秒帧数。然而，通过创建我们的事件监听器，我们需要一个在每次渲染新帧时调用的函数。在使用CreateJS中的`Ticker`对象时，我们可以简单地在与`Ticker`对象相同的范围内附加一个`tick()`函数，这将在每个间隔调用：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Within this tick function, we also add the call to our global variable reference
    to our Stage object created in our `init()` function. This, as you may assume,
    is the call that actually tells the `stage` object to update itself by rendering
    the next interval in the stage progression. Therefore, any of the code one would
    typically append inside of an `onEnterFrame` event in ActionScript 3 would be
    placed before calling the `stage.update()` method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个tick函数中，我们还添加了对我们在`init()`函数中创建的Stage对象的全局变量引用的调用。正如您可能猜到的那样，这个调用实际上告诉`stage`对象通过渲染舞台进度中的下一个间隔来更新自己。因此，任何在ActionScript
    3中通常附加在`onEnterFrame`事件中的代码都将在调用`stage.update()`方法之前放置。
- en: 'With our basic EaselJS structure in place, our example should now look something
    as the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们基本的EaselJS结构，我们的示例现在应该看起来像下面这样：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, we need to import our custom class and read the mouse position property
    at each interval of the `Ticker` object in order to reposition the image:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要导入我们的自定义类，并在`Ticker`对象的每个间隔中读取鼠标位置属性，以便重新定位图像：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This simple example is only the tip of the iceberg when it comes to using EaselJS,
    but it shows off the core of how the flow of using the Canvas element as a stage
    can be done. EaselJS is really the core of the CreateJS bundle, as when it is
    utilized with any or all of the other libraries within the bundle, everything
    comes to life. Let's continue with the list of libraries within CreateJS by looking
    into the next library, TweenJS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的示例只是使用EaselJS时的冰山一角，但它展示了如何使用Canvas元素作为舞台的核心流程。EaselJS实际上是CreateJS捆绑包的核心，因为当它与捆绑包中的任何或所有其他库一起使用时，一切都会变得生动起来。让我们继续查看CreateJS中的库列表，看看下一个库TweenJS。
- en: TweenJS
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TweenJS
- en: 'For a Flash developer, the concept of tweening an object should be nothing
    new. However, dealing with object animations in ActionScript 3 is far easier than
    using CSS3 animations or writing your own tweening engine. This is where TweenJS
    comes into play. TweenJS ([http://www.createjs.com/#!/TweenJS](http://www.createjs.com/#!/TweenJS))
    uses the common tweening syntax used in ActionScript and libraries such as TweenMax
    ([http://www.greensock.com/tweenmax](http://www.greensock.com/tweenmax)) to allow
    you to easily create HTML5-ready animations by allowing TweenJS to do all the
    object property manipulation over a specific period of time. Although TweenJS
    is a very simple library, the time it may be able to save you while developing
    a new project or converting your preexisting Flash project can be priceless. As
    with all the CreateJS package elements, TweenJS works extremely well with the
    EaseJS library, as we can demonstrate in the following code example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Flash开发人员来说，对对象进行缓动应该并不陌生。然而，在ActionScript 3中处理对象动画要比使用CSS3动画或编写自己的缓动引擎要容易得多。这就是TweenJS发挥作用的地方。TweenJS（[http://www.createjs.com/#!/TweenJS](http://www.createjs.com/#!/TweenJS)）使用了ActionScript和TweenMax（[http://www.greensock.com/tweenmax](http://www.greensock.com/tweenmax)）等库中常用的缓动语法，可以让您轻松创建适用于HTML5的动画，通过允许TweenJS在特定时间段内执行所有对象属性操作。虽然TweenJS是一个非常简单的库，但它在开发新项目或转换现有Flash项目时所能节省的时间可能是无价的。与CreateJS包中的所有元素一样，TweenJS与EaseJS库非常配合，我们可以在下面的代码示例中演示：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see in the preceding example code, tweening elements within the stage
    created by EaselJS is extremely straightforward and familiar to any Flash developer.
    As with all the elements within CreateJS, TweenJS can be used with or without
    the remainder of the CreateJS suite. Therefore, if you are in need of a simple
    but powerful tweening engine to save massive amounts of time and overhead while
    animating elements in your HTML5 projects, TweenJS is definitely worth a look.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的示例代码中所看到的，在EaselJS创建的舞台中对元素进行缓动非常简单和熟悉，对于任何Flash开发人员来说都是如此。与CreateJS中的所有元素一样，TweenJS可以与CreateJS套件的其余部分一起使用，也可以单独使用。因此，如果您需要一个简单但功能强大的缓动引擎来节省大量时间和开销，同时在HTML5项目中对元素进行动画处理，那么TweenJS绝对值得一试。
- en: PreloadJS
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PreloadJS
- en: Just as in Flash applications, preloading your assets within your HTML5 projects
    can be a critical step to ensure your content is being delivered in the proper
    manner to your end users. PreloadJS ([http://www.createjs.com/#!/PreloadJS](http://www.createjs.com/#!/PreloadJS))
    allows for easy set up of multiple assets preloading with real-time progress feedback
    and queue support. As we saw with the EaselJS example, CreateJS has set up its
    own asset management system which easily integrates into the PreloadJS API ([http://www.createjs.com/Docs/PreloadJS/modules/PreloadJS.html](http://www.createjs.com/Docs/PreloadJS/modules/PreloadJS.html)).
    Consider the following simplified example, which loads external audio and image
    assets from the Web.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Flash应用程序中一样，在HTML5项目中预加载资产可以是一个关键步骤，以确保您的内容以适当的方式传递给最终用户。PreloadJS（[http://www.createjs.com/#!/PreloadJS](http://www.createjs.com/#!/PreloadJS)）允许轻松设置多个资产的预加载，实时进度反馈和队列支持。正如我们在EaselJS示例中看到的，CreateJS已经设置了自己的资产管理系统，可以轻松集成到PreloadJS
    API（[http://www.createjs.com/Docs/PreloadJS/modules/PreloadJS.html](http://www.createjs.com/Docs/PreloadJS/modules/PreloadJS.html)）中。考虑以下简化的示例，它从Web加载外部音频和图像资产。
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As we have seen in the previous examples in this book, waiting for all of the
    document and its assets to load prior to interacting with them is a critical step
    almost every JavaScript application will utilize. However, when your assets are
    being downloaded during a page load, there is no easy way to monitor the download
    or completion process. Although our typical `onload` calls will still wait until
    our assets are ready to be used, in many applications, the use of a progress bar
    can greatly enhance the end user experience during longer application load times.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书的前面示例中所看到的，等待所有文档及其资产在与其交互之前加载是几乎每个JavaScript应用程序都会使用的关键步骤。然而，在页面加载期间下载资产时，没有简单的方法来监视下载或完成过程。尽管我们典型的`onload`调用仍将等待我们的资产准备就绪，但在许多应用程序中，进度条的使用可以极大地增强用户体验，尤其是在较长的应用程序加载时间内。
- en: 'Reviewing the preceding example again, you can see that we have added event
    listeners for each file when it is loaded as well as when all assets have completed
    loading. Combining the numerical value of how many assets are to be loaded with
    the number of assets that have been loaded, we can easily find the current preload
    completion percentage. To avoid a long code example, I have supplemented the use
    of some preload user interfaces by just using the developer console:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次审查前面的示例，您会发现我们在每个文件加载时都添加了事件侦听器，以及在所有资产加载完成时。将要加载的资产数量的数值与已加载的资产数量相结合，我们可以轻松地找到当前的预加载完成百分比。为了避免冗长的代码示例，我只是使用开发者控制台来补充了一些预加载用户界面：
- en: '![PreloadJS](img/3325OT_05_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![PreloadJS](img/3325OT_05_04.jpg)'
- en: SoundJS
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SoundJS
- en: 'At the time of writing this book, dealing with audio and audio interaction
    support on all the modern HTML5 compatible browsers is unfortunately still pretty
    difficult. The current level of HTML5 audio support can be extremely varying from
    browser to browser and even more so on most mobile platforms. Properly conditioning
    your audio interactions and manipulations to work on every device and browser
    can almost seem like an impossible task. Thankfully, SoundJS is here to help and
    solve many of the common issues that arise with HTML5 audio development. SoundJS
    allows you to easily query the client''s browser capabilities to ensure you are
    delivering audio with the proper features and plugins that the user''s device
    supports:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，处理所有现代HTML5兼容浏览器上的音频和音频交互支持仍然非常困难。当前的HTML5音频支持水平在不同浏览器之间甚至在大多数移动平台上都可能存在极大的差异。正确地调整音频交互和操作，以在每台设备和浏览器上运行几乎似乎是一项不可能的任务。幸运的是，SoundJS可以帮助解决许多与HTML5音频开发相关的常见问题。SoundJS允许您轻松地查询客户端浏览器的功能，以确保您使用的音频具有用户设备支持的正确功能和插件：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: CreateJS Toolkit
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CreateJS Toolkit
- en: One of the greatest aspects of CreateJS is the CreateJS Toolkit created by *Grant
    Skinner* ([http://www.gskinner.com](http://www.gskinner.com)) and Adobe. This
    Toolkit is an Adobe Flash Professional plugin that enables you to easily create
    CreateJS-ready animations and elements from within the Flash Professional environment,
    something every Flash developer is already used to.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: CreateJS最伟大的方面之一是由*Grant Skinner*（[http://www.gskinner.com](http://www.gskinner.com)）和Adobe创建的CreateJS
    Toolkit。这个工具包是Adobe Flash Professional的插件，可以让您轻松地在Flash Professional环境中创建CreateJS-ready的动画和元素，这是每个Flash开发人员已经习惯的。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can get the latest news and documentation for the CreateJS Toolkit at [http://www.adobe.com/devnet/createjs.html](http://www.adobe.com/devnet/createjs.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.adobe.com/devnet/createjs.html](http://www.adobe.com/devnet/createjs.html)获取CreateJS
    Toolkit的最新消息和文档。
- en: Setting up the Toolkit
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置工具包
- en: 'To begin, you will need to head over to the Adobe CreateJS Toolkit page on
    the Adobe website ([http://www.adobe.com/devnet/createjs.html](http://www.adobe.com/devnet/createjs.html))
    to download the latest version of the plugin to install on your machine. One of
    the easiest ways to find this page is by clicking on the link that may already
    be displayed when opening Flash CS6:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要前往Adobe网站上的Adobe CreateJS Toolkit页面（[http://www.adobe.com/devnet/createjs.html](http://www.adobe.com/devnet/createjs.html)）下载插件的最新版本以安装到您的计算机上。找到此页面的最简单方法之一是单击打开Flash
    CS6时可能已显示的链接：
- en: '![Setting up the Toolkit](img/3325OT_05_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![设置工具包](img/3325OT_05_01.jpg)'
- en: Once you have downloaded the extension, be sure to have quit any running instances
    of Flash CS6 and open the downloaded file within the Adobe Extension Manager CS6
    application to install it into your machine's Creative Suite setup. Read over
    and accept the terms and conditions to finish the installation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您下载了扩展程序，请确保退出所有正在运行的Flash CS6实例，并在Adobe Extension Manager CS6应用程序中打开下载的文件，将其安装到您的计算机的创意套件设置中。阅读并接受条款和条件以完成安装。
- en: 'Once the installation is finished, you should be able to see the CreateJS Toolkit
    extension listed under the Flash extensions, and that''s it, we are ready to start
    using the Toolkit back again inside Flash:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该能够在Flash扩展下看到CreateJS Toolkit扩展程序的列表，就是这样，我们已经准备好再次在Flash中开始使用Toolkit了：
- en: '![Setting up the Toolkit](img/3325OT_05_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![设置工具包](img/3325OT_05_03.jpg)'
- en: 'With the extension installed and Flash reopened, start a new ActionScript 3
    project and open the CreateJS Toolkit window by selecting it from the **Window**
    dropdown. The resulting Toolkit window will look similar to the following image.
    From this window, you will be able to configure and publish your current project
    within Flash Professional with the CreateJS Toolkit rather than the traditional
    export to the SWF setup:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了扩展程序并重新打开Flash后，启动一个新的ActionScript 3项目，并通过从**窗口**下拉菜单中选择CreateJS Toolkit来打开CreateJS
    Toolkit窗口。生成的Toolkit窗口将类似于以下图像。从这个窗口，您将能够在Flash Professional中使用CreateJS Toolkit配置和发布当前项目，而不是传统的导出到SWF设置：
- en: '![Setting up the Toolkit](img/3325OT_05_05.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![设置工具包](img/3325OT_05_05.jpg)'
- en: 'Before we dig into publishing content, it is worth looking into the configuration
    settings within the Toolkit window. Click on the **Edit Settings** button within
    the Toolkit window to open the **Publish Settings** window of the CreateJS Toolkit:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入发布内容之前，值得查看一下工具包窗口中的配置设置。点击工具包窗口中的“编辑设置”按钮，打开CreateJS Toolkit的“发布设置”窗口：
- en: '![Setting up the Toolkit](img/3325OT_05_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![设置工具包](img/3325OT_05_06.jpg)'
- en: 'The configuration settings for publishing your content from within your Flash
    project is relatively straightforward. The default **Output** value will be in
    the same directory where the FLA file your project is saved within and asset paths
    are set up. The final values within the **Options** section are again pretty straight
    forward apart from the following values:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从Flash项目中发布内容的配置设置相对简单。默认的“输出”值将在与FLA文件相同的目录中，您的项目保存在其中，并设置了资产路径。**选项**部分中的最终值再次非常简单，除了以下值：
- en: '**Compact Shapes**: This value compacts the code into a minimal version for
    drawing API class'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**紧凑形状**：此值将代码压缩为绘图API类的最小版本'
- en: '**Multiframe bounds**: This value calculates `boundsRect` for assets'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多帧边界**：此值计算资产的`boundsRect`'
- en: Publishing your assets
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布您的资产
- en: 'Once your assets are all ready within your library and timelines, you can click
    on the **Publish** button within the Toolkit window. The result will be the typical
    application output but rather than being compiled into a SWF, the result is set
    up completely within HTML5:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的资产都准备好了，可以在工具包窗口中点击“发布”按钮。结果将是典型的应用程序输出，而不是编译成SWF，结果完全设置在HTML5中：
- en: '![Publishing your assets](img/3325OT_05_07.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![发布您的资产](img/3325OT_05_07.jpg)'
- en: The best part of this CreateJS Toolkit compiler is the ability to easily grab
    a piece of the exported source code and use it in a specific part of your application.
    This process dramatically improves the ability for designers and developers to
    easily work on HTML5 content and assets and update preexisting media with ease.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CreateJS Toolkit编译器最好的部分是能够轻松地获取导出源代码的一部分，并在应用程序的特定部分中使用它。这个过程极大地提高了设计师和开发人员轻松地处理HTML5内容和资产，并轻松更新现有媒体的能力。
- en: Reviewing the CreateJS Toolkit output
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查CreateJS Toolkit的输出
- en: 'Before we finish up with the toolkit, it''s worth reviewing some of the code
    that has been exported from its compiler. Let''s check out what it has created
    for our space game example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成工具包之前，值得审查一下从其编译器中导出的一些代码。让我们看看它为我们的太空游戏示例创建了什么：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, by all the examples and libraries above, CreateJS is a big collection
    of JavaScript functionality packaged into a couple of very well-maintained open
    source JavaScript libraries. As mentioned before, there is far more to get into
    than we have time to cover in this book, so be sure to head over to the CreateJS
    website ([http://www.createjs.com](http://www.createjs.com)) and read the documentation
    of the latest build.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，通过上面的所有示例和库，CreateJS是一组JavaScript功能的大集合，打包成了几个非常良好维护的开源JavaScript库。如前所述，在这本书中我们没有时间涵盖的内容远远超过这些，所以一定要前往CreateJS网站（[http://www.createjs.com](http://www.createjs.com)）并阅读最新版本的文档。
- en: Modernizr
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Modernizr
- en: An important feature we saw within the CreateJS bundle was the ability to easily
    check whether the client's web browser supports the intended HTML5 functionality
    to be used on your web page. However, only CreateJS has the ability to check for
    functionality compatibility for the features it uses within the libraries. If
    you are in need of digging deeper into checking whether your users have the appropriate
    functionality in their web browsers, the Modernizr project is definitely worth
    a look. Modernizr allows you to easily check for every feature within the HTML5
    feature set with only a couple of lines of code and an external JavaScript file
    that is only a couple of kilobytes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在CreateJS捆绑包中看到的一个重要功能是轻松地检查客户端的Web浏览器是否支持在您的网页上使用的HTML5功能。然而，只有CreateJS具有检查库中使用的功能的兼容性的能力。如果您需要更深入地检查用户的Web浏览器是否具有适当的功能，Modernizr项目绝对值得一看。Modernizr允许您仅使用几行代码和一个仅有几千字节的外部JavaScript文件轻松地检查HTML5功能集中的每个功能。
- en: Using Modernizr
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Modernizr
- en: 'To start, you will need to head over to [http://modernizr.com](http://modernizr.com)
    and download the latest version of the library. As with many JavaScript libraries,
    you will have the option of downloading the production or the development version
    of the code in order to conserve file size and bandwidth:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要前往[http://modernizr.com](http://modernizr.com)并下载库的最新版本。与许多JavaScript库一样，您可以选择下载生产版本或开发版本的代码，以便节省文件大小和带宽：
- en: '![Using Modernizr](img/3325OT_05_08.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![使用Modernizr](img/3325OT_05_08.jpg)'
- en: For ease of example and the sake of learning, we will download the development
    version of the code, which will include the entire Modernizer library. Once the
    JavaScript file has been downloaded, it can be included into your HTML document
    as you would include any JavaScript reference.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便示例和学习的缘故，我们将下载开发版本的代码，其中包括整个Modernizer库。一旦JavaScript文件下载完成，它可以像包含任何JavaScript引用一样包含到您的HTML文档中。
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are still having issues finding Modernizr setup, head over to the official
    installation documentation present at [http://modernizr.com/docs/#installing](http://
    http://modernizr.com/docs/#installing).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然在寻找Modernizr设置方面遇到问题，请前往官方安装文档，网址为[http://modernizr.com/docs/#installing](http://
    http://modernizr.com/docs/#installing)。
- en: Understanding Polyfills
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解Polyfills
- en: The concept of a Polyfill in web development is pretty straightforward once
    you deal with it in an actual project. Fortunately, even if you are coming from
    a 100 percent Flash development background, you may have had an experience with
    this concept before. When embedding Flash content within an HTML page, even with
    the automated publish setting within Flash Professional, the resulting code will
    have created an HTML object element with references to the compiled SWF file.
    However if you look closely, or disable Flash in your web browser, you will notice
    there will still be a warning displayed alerting you to the fact that you need
    to download the Flash player as well as a link to the Flash player download page.
    This content is only displayed while the Flash content cannot be displayed and
    is an example of a Polyfill in its simplest form.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页开发中，Polyfill的概念一旦在实际项目中处理起来就非常简单。幸运的是，即使您来自100％的Flash开发背景，您以前可能也有过这个概念的经验。在HTML页面中嵌入Flash内容时，即使在Flash
    Professional中使用了自动发布设置，生成的代码也会创建一个带有对编译的SWF文件的引用的HTML对象元素。但是，如果您仔细观察，或者在Web浏览器中禁用Flash，您会注意到仍会显示警告，提示您需要下载Flash播放器以及指向Flash播放器下载页面的链接。这个内容只在Flash内容无法显示时显示，并且是Polyfill的一个最简单形式的示例。
- en: Using Polyfills in HTML5 may be a necessity in order to reach the intended audience
    on specific browsers and platforms. However, using Polyfills should not always
    be necessary. If you are trying to deliver the best experience possible, it may
    not be worth attempting to target browsers like IE7 with your cutting-edge HTML5
    functionality.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5中使用Polyfills可能是为了在特定浏览器和平台上达到预期受众而必不可少的。但是，并不总是需要使用Polyfills。如果您试图提供尽可能最佳的体验，可能不值得尝试使用您的尖端HTML5功能来针对像IE7这样的浏览器。
- en: Modernizr.load()
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Modernizr.load()
- en: 'The `load` method within Moderizr may be one of the most powerful, yet easy-to-use
    utilities within the library. In a nutshell, the `load` method allows you to selectively
    choose which scripts and data should be loaded based on a simple condition that
    the user has the ability to utilize a specific piece of the HTML5 feature set.
    Consider the following example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Moderizr中的`load`方法可能是库中最强大但又易于使用的实用工具之一。简而言之，`load`方法允许您有选择地选择应加载哪些脚本和数据，这取决于用户是否能够利用HTML5功能集的特定部分。考虑以下示例：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This simple example shows how we can easily select which JavaScript file to
    load depending on whether the user has the ability to use the geolocation functionality
    within their browser. If the client has the ability to use geolocation API within
    their browser, the `geo.js` file will be loaded and the script will continue on.
    If the user is unable to use geolocation, the `nope` value is used and the `geo-polyfill.js`
    file will be loaded instead.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子展示了我们如何根据用户是否能够在其浏览器中使用地理位置功能来轻松选择要加载的JavaScript文件。如果客户端能够在其浏览器中使用地理位置API，则将加载`geo.js`文件并继续执行。如果用户无法使用地理位置，则使用`nope`值，并加载`geo-polyfill.js`文件。
- en: 'As you can see by this demo, Modernizr is a simple library with one main goal:
    to ease the mess of dealing with multiple browsers and platforms attempting to
    view your HTML5 content, and it does it very well.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在此演示中所看到的，Modernizr是一个简单的库，其主要目标是简化处理多个浏览器和平台尝试查看您的HTML5内容的混乱，并且它做得非常好。
- en: What Modernizr can detect
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Modernizr可以检测到的内容
- en: 'Thanks to the contribution by many JavaScript developers around the world,
    Modernizr boasts the fact that it is able to detect and create a Polyfill for
    every HTML5 feature currently specified. With so many features to be listed, I
    will leave the researching on the Modernizr API documentation to you and give
    you this following code example to demonstrate some further use of this great
    library:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢世界各地许多JavaScript开发人员的贡献，Modernizr自豪地宣称它能够检测并为当前指定的每个HTML5功能创建Polyfill。由于有太多功能要列出，我将把Modernizr
    API文档的研究留给你，并给你以下代码示例，以演示这个伟大库的进一步用途：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see in the example above, the implementation of Modernizr is extremely
    straightforward. Conditions are easy to recognize as their naming conventions
    almost directly match the feature set which can be tested. To get a better understanding
    of the ever-growing API that Modernizr offers, head over to the official project
    documentation at [http://modernizr.com/docs](http://modernizr.com/docs).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如上例所示，Modernizr的实现非常简单。条件易于识别，因为它们的命名约定几乎直接匹配可以测试的功能集。要更好地了解Modernizr提供的不断增长的API，请访问官方项目文档[http://modernizr.com/docs](http://modernizr.com/docs)。
- en: CSS media queries
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS媒体查询
- en: 'Although we have already touched on CSS3 media queries in the previous chapters,
    it is worth stopping to make note of them in this chapter as well. If the active
    viewport was to change size while dealing with setting up your content to be viewable
    on all devices and to have a responsive layout and display set up, CSS3 media
    queries can easily allow you to avoid manipulating any of your site content and
    only manipulate the styles appended to them. This concept is great not only for
    implementing it on all your desktop and mobile projects but can be utilized for
    much more. Consider the following list of some of the properties that can be queried
    directly from within your CSS source:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经在前几章中涉及了CSS3媒体查询，但在本章中也值得停下来注意一下。如果活动视口在设置内容以便在所有设备上可见并具有响应式布局和显示设置时发生大小变化，CSS3媒体查询可以轻松地允许您避免操纵任何站点内容，只操纵附加到它们的样式。这个概念不仅非常适合在所有桌面和移动项目上实施，而且还可以用于更多其他用途。考虑以下一些可以直接从CSS源中查询的属性列表：
- en: '**All**: This property allows *all* the devices to listen to this property'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部**：此属性允许*所有*设备监听此属性'
- en: '**Braille**: This property is used for braille-tactile feedback devices'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盲文**：此属性用于盲文触觉反馈设备'
- en: '**Embossed**: This property is used for paged braille printers'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮雕**：此属性用于分页盲文打印机'
- en: '**Handheld**: This property is used for handheld devices (smartphones and tablets
    do *not* listen to this!)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Handheld**：此属性用于手持设备（智能手机和平板电脑*不*适用于此！）'
- en: '**Print**: This property is used for paged material and for documents viewed
    on screen in print preview mode'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Print**：此属性用于分页材料和在屏幕上打印预览模式中查看的文档'
- en: '**Projection**: This property is used for projected presentations, for example,
    projectors'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Projection**：此属性用于投影演示，例如投影仪'
- en: '**Screen**: This property is used primarily for color computer screens and
    smartphones'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Screen**：此属性主要用于彩色计算机屏幕和智能手机'
- en: '**Speech**: This property is used for speech synthesizers'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Speech**：此属性用于语音合成器'
- en: '**tty**: This property is used for media using a fixed-pitch character grid
    such as teletypes, terminals, or portable devices with limited display capabilities'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tty**：此属性用于使用固定间距字符网格的媒体，例如电传打字机、终端或具有有限显示功能的便携设备'
- en: '**Tv**: This property is used for television-type devices such as low resolution,
    color, limited-scroll-ability screens with available audio'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tv**：此属性用于电视类型设备，例如低分辨率、彩色、有限滚动功能的屏幕，带有可用音频'
- en: 'Properly utilized media queries can easily allow you to target a broad range
    of devices by allowing your content to respond to the specific size, platform
    and setup of the browser viewing it:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询的正确使用可以轻松地让您针对各种设备进行定位，使您的内容能够根据浏览器的特定大小、平台和设置做出响应：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered some of the options available to you when converting
    or porting your existing Flash applications to HTML5 as well as methods to enable
    users to properly view their content on any device. We dug into each of the great
    libraries that make up CreateJS, from emulating the Flash Display List in JavaScript,
    to animating elements with the traditional ActionScript 3 tweening syntax. We
    checked out how useful the CreateJS Toolkit is to anyone with any prior knowledge
    of the Adobe Flash Professional IDE, and how assets can be compiled directly from
    the stage and library ready for use in web documents. We also learned about unifying
    your development experience by using libraries such as Modernizr. By querying
    browser feature support, you can easily decide whether an alternate display method
    or shim is necessary to enable the user to have a proper experience.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了将现有的Flash应用程序转换或移植到HTML5时可用的一些选项，以及使用户能够在任何设备上正确查看其内容的方法。我们深入研究了构成CreateJS的各个优秀库，从在JavaScript中模拟Flash显示列表，到使用传统的ActionScript
    3 tweening语法对元素进行动画处理。我们了解了CreateJS工具包对于任何具有Adobe Flash专业版IDE的先前知识的人来说是多么有用，以及如何直接从舞台和库编译资产以供在Web文档中使用。我们还学习了如何通过使用Modernizr等库来统一开发体验。通过查询浏览器功能支持，您可以轻松决定是否需要使用替代显示方法或shim来使用户获得良好的体验。
