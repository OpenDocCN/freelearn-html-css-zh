- en: Chapter 6. Adding Sound Effects to your Games
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。为你的游戏添加声音效果
- en: We have discussed several techniques of drawing game objects visually. In this
    chapter, we will focus on using the `audio` tag that is introduced in the HTML5
    specification. We can add sound effects, background music, and control the audio
    through the JavaScript API. In addition, we will build a music game in this chapter.
    It is a game that requires players to hit the correct string at the right time
    to produce the music.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们已经讨论了几种以视觉方式绘制游戏对象的技术。在本章中，我们将专注于使用HTML5规范中引入的`audio`标签。我们可以通过JavaScript API添加声音效果、背景音乐，并控制音频。此外，我们将在本章中构建一个音乐游戏。这是一个需要玩家在正确的时间击中正确的琴弦以产生音乐的游戏。
- en: 'In this chapter, we will learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Adding a sound effect to the play button
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为播放按钮添加声音效果
- en: Building a mini piano musical game
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个迷你钢琴音乐游戏
- en: Linking the music game and the play button
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接音乐游戏和播放按钮
- en: Adding keyboard-driven to the game
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为游戏添加键盘驱动
- en: Creating a keyboard-driven music game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个键盘驱动的音乐游戏
- en: Completing the musical game with level data recording and the game over event
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成具有级别数据记录和游戏结束事件的音乐游戏
- en: 'The following screenshot shows the final result we will create through this
    chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们将通过本章创建的最终结果：
- en: '![Adding Sound Effects to your Games](img/1260_06_18.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![为你的游戏添加声音效果](img/1260_06_18.jpg)'
- en: So, let's get on with it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧。
- en: Adding a sound effect to the play button
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为播放按钮添加声音效果
- en: We had several mouse interactions in the Untangle game examples in previous
    chapters. Now imagine that we want to have sound effects with the mouse interaction.
    This requires us to instruct the game about the audio file to be used. We will
    use the `audio` tag to create a sound effect on a button.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们在Untangle游戏示例中有几种鼠标交互。现在想象一下，我们希望在鼠标交互时有声音效果。这要求我们指示游戏使用哪个音频文件。我们将使用`audio`标签在按钮上创建声音效果。
- en: Time for action Adding sound effects to the play button
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行添加声音效果到播放按钮的操作
- en: 'We will start with the code example available in the code bundle. We will have
    the folder structure similar to the one shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从代码包中提供的代码示例开始。我们将有类似以下截图所示的文件夹结构：
- en: '![Time for action Adding sound effects to the play button](img/1260_06_19.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![执行添加声音效果到播放按钮的操作](img/1260_06_19.jpg)'
- en: 'The `index.htm` file contains the basic structure of the HTML. Now let''s add
    the following code to the body section of the `index.htm` file:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.htm`文件包含了HTML的基本结构。现在让我们在`index.htm`文件的body部分添加以下代码：'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The HTML file accomplishes with a stylesheet. The file can be found in the code
    bundle named `audiogame.css`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML文件使用样式表完成。该文件可以在名为`audiogame.css`的代码包中找到。
- en: 'Next, we will add a sound effect to the button in the JavaScript file. Add
    the following JavaScript in the `html5games.audio.js` file:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在JavaScript文件中为按钮添加声音效果。在`html5games.audio.js`文件中添加以下JavaScript：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the `index.htm` file in a browser. There, you should see a **PLAY** button
    on a yellow background, as shown in the following screenshot. Try to move the
    mouse on the button and click on it. You should be able to hear a sound when you
    hover over the button and another sound when you click on it:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`index.htm`文件。在那里，你应该看到一个黄色背景上的**PLAY**按钮，如下截图所示。尝试将鼠标移动到按钮上并点击它。当你悬停在按钮上时，你应该能听到声音，当你点击它时，你应该能听到另一个声音：
- en: '![Time for action Adding sound effects to the play button](img/1260_06_20.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![执行添加声音效果到播放按钮的操作](img/1260_06_20.jpg)'
- en: What just happened?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created a basic HTML5 game layout with a play button placed in the middle
    of the page. The JavaScript file handles the mouse hover and clicks of the button
    and plays corresponding sound effects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个基本的HTML5游戏布局，其中播放按钮放置在页面中间。JavaScript文件处理按钮的鼠标悬停和点击，并播放相应的声音效果。
- en: Defining an audio element
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个音频元素
- en: 'The easiest way to use the `audio` tag is by providing a source file. The following
    code snippet shows how we can define an audio element:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`audio`标签的最简单方法是提供一个源文件。以下代码片段显示了如何定义音频元素：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Showing the fallback content in the audio tag**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**在音频标签中显示回退内容**'
- en: 'The `audio` tag is newly introduced in the HTML5 specification. We can put
    the fallback content inside the `audio` tag, such as Flash movie to play the audio.
    The following link from HTML5 Rocks shows a quick guide on using the `audio` tag
    with Flash fallback:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`audio`标签是HTML5规范中新引入的。我们可以在`audio`标签内放置回退内容，例如Flash电影来播放音频。以下来自HTML5 Rocks的链接显示了如何使用具有Flash回退的`audio`标签的快速指南：'
- en: '[http://www.html5rocks.com/tutorials/audio/quick/](http://www.html5rocks.com/tutorials/audio/quick/)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.html5rocks.com/tutorials/audio/quick/](http://www.html5rocks.com/tutorials/audio/quick/)'
- en: 'Besides setting the source file of the `audio` tag, we can have additional
    controls by using several attributes. The following table shows the attributes
    we can set to the audio element:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置`audio`标签的源文件外，我们还可以使用几个属性来进行额外的控制。以下表格显示了我们可以为音频元素设置的属性：
- en: '| Arguments | Definition | Explanation |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 定义 | 解释 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `src` | Defines the source file of the audio element | When we use the `src`
    attribute in the `audio` tag, it specifies one source file of the audio file.
    For example, we load a sound effect `Ogg` file in the following code:<audio src=''sound.ogg''>If
    we want to specify multiple files with different formats, then we use the `source`
    tag inside the audio element. The following code specifies the `audio` tag with
    different formats to support different web browsers:<audio><source src=''sound.ogg''><source
    src=''sound.mp3''><source src=''sound.wav''></audio> |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `src` | 定义音频元素的源文件 | 当我们在`audio`标签中使用`src`属性时，它指定了音频文件的一个源文件。例如，我们在以下代码中加载一个声音效果`Ogg`文件：<audio
    src=''sound.ogg''>如果我们想要指定多个具有不同格式的文件，那么我们可以在音频元素内使用`source`标签。以下代码指定了具有不同格式的`audio`标签，以支持不同的网络浏览器：<audio><source
    src=''sound.ogg''><source src=''sound.mp3''><source src=''sound.wav''></audio>
    |'
- en: '| Arguments | Definition | Explanation |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 定义 | 解释 |'
- en: '| `autoplay` | Specifies that the audio plays automatically once it is loaded
    | Autoplay is used as a standalone attribute. This means that there is no difference
    in the following two lines of code:<audio src=''file.ogg'' autoplay><audio src=''file.ogg
    autoplay="autoplay"> |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `autoplay` | 指定音频一旦加载就自动播放 | Autoplay用作独立属性。这意味着以下两行代码没有区别：<audio src=''file.ogg''
    autoplay><audio src=''file.ogg autoplay="autoplay"> |'
- en: '| `loop` | Specifies that the audio plays from beginning again after playback
    finishes | This is also used as a standalone attribute. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `loop` | 指定音频在播放完成后从头开始再次播放 | 这也用作独立属性。|'
- en: '| `preload` | Specifies that the audio source is loaded once the page is loaded
    | The `preload` attribute takes either of the following values:`preload="auto"``preload="metadata"``preload="none"`When
    the preload is used as a standalone attribute, it acts as setting it to `auto`
    and the browser will preload the audio.When it is set as `metadata`, the browser
    will not preload the content of the audio. However, it will load the meta data
    of the audio such as the duration and size.When it is set to `none`, the browser
    will not preload the audio at all. The content and metadata is loaded once it
    is played. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `preload` | 指定音频源在页面加载后加载 | `preload`属性可以取以下任一值：`preload="auto"``preload="metadata"``preload="none"`当`preload`用作独立属性时，它的作用类似于设置为`auto`，浏览器将预加载音频。当设置为`metadata`时，浏览器不会预加载音频的内容。但是，它会加载音频的元数据，如持续时间和大小。当设置为`none`时，浏览器根本不会预加载音频。内容和元数据在播放时加载。|'
- en: '| `controls` | Shows the playback control of the audio | The `controls` attribute
    is a standalone attribute. It instructs the browser to show a playback control
    in the audio position. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `controls` | 显示音频的播放控件 | `controls`属性是一个独立的属性。它指示浏览器在音频位置显示播放控件。|'
- en: 'The following screenshot shows the Chrome displaying controls:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示Chrome显示控件：
- en: '![Defining an audio element](img/1260_06_21.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![定义音频元素](img/1260_06_21.jpg)'
- en: Playing a sound
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放声音
- en: 'We can get the reference of the audio element by calling the `getElementById`
    function. Then, we play it by calling the `play` function. The following code
    plays the `buttonactive` audio:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`getElementById`函数来获取音频元素的引用。然后，我们通过调用`play`函数来播放它。以下代码播放`buttonactive`音频：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `play` function plays the audio from the elapsed time, which is stored
    in the `currentTime` property. The default value of `currentTime` is zero. The
    following code plays the audio from 3.5 seconds:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`play`函数从存储在`currentTime`属性中的经过的时间播放音频。`currentTime`的默认值为零。以下代码从3.5秒开始播放音频：'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pausing a sound
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂停声音
- en: 'Similar to the play button, we can also pause the playback of an audio element
    by using the `pause` function. The following code pauses the `buttonactive` audio
    element:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与播放按钮类似，我们也可以通过使用`pause`函数暂停音频元素的播放。以下代码暂停`buttonactive`音频元素：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is no `stop` function to stop the audio element. Instead, we can pause
    the audio and reset the `currentTime` property of the element to zero. The following
    code shows how we can stop an audio element:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`stop`函数来停止音频元素。相反，我们可以暂停音频并将元素的`currentTime`属性重置为零。以下代码显示了如何停止音频元素：
- en: '`<script>`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`<script>`'
- en: '`document.getElementById("buttonactive").pause()`;'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`document.getElementById("buttonactive").pause()`;'
- en: '`document.getElementById("buttonactive").currentTime = 0`;'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`document.getElementById("buttonactive").currentTime = 0`;'
- en: '`</script>`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`</script>`'
- en: Adjusting the sound volume
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整音量
- en: 'We can also set the volume of the audio element. The volume must range between
    0 and 1\. We can set the volume to 0 to mute it, and set it to 1 for the maximum
    volume. The following code snippet sets the volume of the `buttonactive` audio
    to 30%:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以设置音频元素的音量。音量必须在0和1之间。我们可以将音量设置为0来静音，将其设置为1来达到最大音量。以下代码片段将`buttonactive`音频的音量设置为30%：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using the jQuery hover event
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery hover事件
- en: 'jQuery provides a `hover` function to define the behavior when we mouse over
    and mouse out a DOM element. Here is how we use the `hover` function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery提供了一个`hover`函数来定义当我们鼠标悬停和移出DOM元素时的行为。以下是我们如何使用`hover`函数：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| Arguments | Discussion |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 讨论 |'
- en: '| --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `function1` | The function is executed when the mouse moves in. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `function1` | 当鼠标移入时执行该函数。|'
- en: '| `function2` | This is optional. The function is executed when the mouse moves
    out. When this function is not provided, the move out behavior is the same as
    function1. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `function2` | 这是可选的。当鼠标移出时执行该函数。当未提供此函数时，移出行为与function1相同。|'
- en: 'In the following code, we play the mouse over sound effect when moving the
    mouse in and pause the sound during mouse out:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，当鼠标移动时，我们播放鼠标悬停音效，并在鼠标移出时暂停音效：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating the Ogg format audio to support Mozilla Firefox
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Ogg格式音频以支持Mozilla Firefox
- en: We use an MP3 format and the **Ogg** format file when we define the source of
    the audio element. The Ogg is a free and open source media container format which
    is supported in Mozilla Firefox. We will use a free audio convertor to convert
    our MP3 files into an Ogg file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义音频元素的来源时，我们使用MP3格式和**Ogg**格式文件。Ogg是一种免费开源的媒体容器格式，受到Mozilla Firefox的支持。我们将使用免费音频转换器将我们的MP3文件转换为Ogg文件。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Wikipedia contains a detailed explanation on the Ogg format at the following
    URL:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科在以下网址包含了有关Ogg格式的详细解释：
- en: '[http://en.wikipedia.org/wiki/Ogg](http://en.wikipedia.org/wiki/Ogg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Ogg](http://en.wikipedia.org/wiki/Ogg)'
- en: Time for action Converting an MP3 sound to Ogg format with Audacity
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作 将MP3声音转换为Ogg格式使用Audacity
- en: 'Ogg is an open source standard that is free to use. There are many music players
    and convertors supporting it. We will use free software named **Audacity** to
    convert our MP3 files to the Ogg format:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ogg是一个开源标准，可以免费使用。有许多支持它的音乐播放器和转换器。我们将使用名为**Audacity**的免费软件将我们的MP3文件转换为Ogg格式：
- en: 'Go to the following URL to download Audacity:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到以下网址下载Audacity：
- en: '[http://audacity.sourceforge.net/download/](http://audacity.sourceforge.net/download/)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://audacity.sourceforge.net/download/](http://audacity.sourceforge.net/download/)'
- en: Install Audacity by following the instructions of the installer.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照安装程序的说明安装Audacity。
- en: Open `button_over.mp3` in Audacity. The following screenshot shows Audacity
    with the MP3 file opened, waiting for us to start the conversion:![Time for action
    Converting an MP3 sound to Ogg format with Audacity](img/1260_06_04.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Audacity中打开`button_over.mp3`。以下截图显示了打开了MP3文件的Audacity，等待我们开始转换：![将MP3音频转换为Ogg格式](img/1260_06_04.jpg)
- en: Click on **File** | **Export As Ogg Vorbis** to open the export dialog.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**文件** | **导出为Ogg Vorbis**以打开导出对话框。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, Audacity 1.3 beta was released and the export
    layout changed. Click on **File** | **Export …** and choose the Ogg format in
    the export dialog.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Audacity 1.3 beta版本已发布，导出布局发生了变化。单击**文件** | **导出…**，并在导出对话框中选择Ogg格式。
- en: Save the Ogg format file in the working directory.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作目录中保存Ogg格式文件。
- en: What just happened?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just converted an MP3 format sound effect into the Ogg format in order to
    make the audio work in browsers that do not support an MP3 format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚将一个MP3格式的音效转换为Ogg格式，以使音频在不支持MP3格式的浏览器中工作。
- en: Supporting different web browsers with different audio formats
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持不同的网络浏览器和不同的音频格式
- en: 'The following table shows the audio formats supported by the latest popular
    web browsers at the time of writing this book:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了撰写本书时最受欢迎的网络浏览器支持的音频格式：
- en: '| Browser | Ogg | MP3 | WAV |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器 | Ogg | MP3 | WAV |'
- en: '| --- | --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Firefox 3.6+ | Yes | - | Yes |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| Firefox 3.6+ | 是 | - | 是 |'
- en: '| Safari 5+ | - | Yes | Yes |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| Safari 5+ | - | 是 | 是 |'
- en: '| Chrome | Yes | Yes | - |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| Chrome | 是 | 是 | - |'
- en: '| Opera 10.5+ | Yes | - | Yes |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| Opera 10.5+ | 是 | - | 是 |'
- en: '| Internet Explorer 9 | - | Yes | Yes |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| Internet Explorer 9 | - | 是 | 是 |'
- en: Pop quiz Using the audio tag
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验 使用音频标签
- en: How can we stop an audio element playing?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何停止正在播放的音频元素？
- en: a. Use the `stop` function
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: a. 使用`stop`函数
- en: b. Use the `pause` function and reset the `currentTime` to 0
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: b. 使用`pause`函数并将`currentTime`重置为0
- en: c. Reset the `currentTime` to 0
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: c. 将`currentTime`重置为0
- en: How can we put fallback content to display in browsers that do not support `audio`
    tags?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在不支持`audio`标签的浏览器中放置回退内容以显示？
- en: Building a mini piano musical game
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个迷你钢琴音乐游戏
- en: Imagine now we are not only playing a sound effect, but also playing a full
    song with the `audio` tag. Along with the song playing, there are some music dots
    moving downwards as a visualization of the music.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，我们不仅播放音效，还使用`audio`标签播放整首歌曲。随着歌曲的播放，有一些音乐点向下移动，作为音乐的可视化。
- en: Time for action Creating a basic background to the music game
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建音乐游戏的基本背景
- en: First, we will draw a few paths in canvas as the background of the music playback.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在画布上绘制一些路径作为音乐播放的背景。
- en: 'We will continue working with our example and draw the background. Open the
    `index.htm` file in a text editor and add the following highlighted code that
    defines the game scene with two canvases set up:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将继续处理示例并绘制背景。在文本编辑器中打开`index.htm`文件，并添加以下突出显示的代码，定义了具有两个设置的画布的游戏场景：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We added a game scene in the HTML file. We want to make it on top of the menu
    scene, so we style the game scene to have `absolute` position by adding the following
    to `audiogame.css:`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在HTML文件中添加了一个游戏场景。我们希望将其放在菜单场景的上方，因此我们通过在`audiogame.css`中添加以下内容来将游戏场景设置为`absolute`位置：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is time for the background drawing code. Open the `html5games.audio.js` JavaScript
    file.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候编写背景绘制代码了。打开`html5games.audio.js` JavaScript文件。
- en: 'In the jQuery `ready` function, we call a `drawBackground` function to draw
    the background as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在jQuery的`ready`函数中，我们调用`drawBackground`函数来绘制背景，如下所示：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following `drawBackground` function to the end of the JavaScript file.
    The code draws three black lines and one grey line in the `game-background-canvas`
    canvas:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JavaScript文件的末尾添加以下`drawBackground`函数。该代码在`game-background-canvas`画布中绘制了三条黑线和一条灰线：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When we open the `index.htm` file in a browser, we will see four lines with
    a background, as shown in the following screenshot. Do not worry that the play
    button is hidden for now, we will show it again later:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在浏览器中打开`index.htm`文件时，将会看到四条带有背景的线，如下截图所示。现在不用担心播放按钮被隐藏，稍后我们会再次显示它：
- en: '![Time for action Creating a basic background to the music game](img/1260_06_22acopy.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![创建音乐游戏的基本背景](img/1260_06_22acopy.jpg)'
- en: What just happened?
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have created a canvas where we draw the music game background. In this music
    game example, we introduced the basic scene management in HTML5 games.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个画布，在这个音乐游戏示例中，我们介绍了HTML5游戏中的基本场景管理。
- en: Creating scenes in HTML5 games
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在HTML5游戏中创建场景
- en: 'Creating **scenes** in HTML5 is similar to creating **layers** like we did
    in the last chapter. It is a DOM element that contains several children. All the
    children elements are positioned in absolute. We have two scenes in our example
    now. The following code snippet shows a possible scene structure in an entire
    game with a game over scene, credit scene, and leaderboard scene included:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5中创建**场景**类似于在上一章中创建**图层**。它是一个包含多个子元素的DOM元素。所有子元素都是绝对定位的。我们的示例中现在有两个场景。以下代码片段显示了整个游戏中可能的场景结构，包括游戏结束场景、信用场景和排行榜场景：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows that the scenes are placed at the same place
    in a web page. It is very similar to the layers structure. The difference is that
    we will control the scene by showing and hiding each scene:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了场景在网页中放置在同一位置。这与图层结构非常相似。不同之处在于我们将通过显示和隐藏每个场景来控制场景：
- en: '![Creating scenes in HTML5 games](img/1260_06_06.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![在HTML5游戏中创建场景](img/1260_06_06.jpg)'
- en: Visualizing the music play back
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化音乐播放
- en: 'If you have ever played the Dance Dance Revolution, Guitar Hero, or the Tap
    Tap Revenge game, then you may be familiar with the music dots moving downwards
    or upwards and the player hitting the music dots when it moves to the right place.
    The following screenshot demonstrates the Tap Tap Revenge game:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经玩过舞动革命、吉他英雄或触觉复仇游戏，那么您可能熟悉音乐点向下或向上移动，玩家在音乐点移动到正确位置时击中音乐点。以下截图展示了触觉复仇游戏：
- en: '![Visualizing the music play back](img/1260_06_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![可视化音乐播放](img/1260_06_07.jpg)'
- en: We will play a song in the `audio` tag with similar music visualization in the
    canvas.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在画布中以类似的音乐可视化方式播放`audio`标签中的歌曲。
- en: Time for action Creating the playback visualization in the music game
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行操作在音乐游戏中创建播放可视化
- en: 'Carry out the following steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: We need a song with both a melody part and a base part. Copy the `minuet_in_g.ogg,
    minuet_in_g.mp3, minuet_in_g_melody.ogg`, and `minuet_in_g_melody.mp3` files from
    the downloaded files or from the code bundle in the `media` folder.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一首旋律部分和一个基础部分的歌曲。从下载的文件或`media`文件夹中的代码捆绑包中复制`minuet_in_g.ogg, minuet_in_g.mp3,
    minuet_in_g_melody.ogg`和`minuet_in_g_melody.mp3`文件。
- en: 'Then, add the `audio` tag with the song as a source file. Open the `index.htm`
    file and add the following code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加带有歌曲作为源文件的`audio`标签。打开`index.htm`文件并添加以下代码：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The music visualization is mainly done in JavaScript. Open the `html5games.audio.js`
    JavaScript file in a text editor.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 音乐可视化主要是用JavaScript完成的。在文本编辑器中打开`html5games.audio.js` JavaScript文件。
- en: 'Add a `MusicNote` object type to represent the music data and a `Dot` object
    type to represent the visual dot of the music note in the canvas as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`MusicNote`对象类型来表示音乐数据，添加`Dot`对象类型来表示画布中音乐音符的可视点，如下所示：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we need several game variables to store the `MusicNote` instances, the
    `Dot` instance, and other information. The level data is a sequence of time and
    the appearing line that is separated by a semi-colon. The level data represents
    the time and line at which the music note should appear:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要几个游戏变量来存储`MusicNote`实例、`Dot`实例和其他信息。级别数据是一个以分号分隔的时间和出现线的序列。级别数据表示音乐音符应该出现的时间和线：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The level data is stored in a string format. We have the following function
    to extract the string in the `MusicNote` object instances and store in an array:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 级别数据以字符串格式存储。我们有以下函数来提取`MusicNote`对象实例中的字符串并存储在数组中：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code in the starting of the jQuery `ready` function. It references
    the `melody` and `base` audio tags and loads the dot image for later use:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在jQuery`ready`函数的开头添加以下代码。它引用`melody`和`base`音频标签，并加载点图像以供以后使用：
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, add the following code in the end of the jQuery `ready` function:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在jQuery`ready`函数的末尾添加以下代码：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following two functions in the JavaScript file. The `startGame` function
    sets the starting time and executes the `playMusic` function with a delay. The
    latter function plays both the melody and base audios:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JavaScript文件中添加以下两个函数。`startGame`函数设置开始时间，并延迟执行`playMusic`函数。后者播放旋律和基础音频：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following `gameloop` function to JavaScript. The `gameloop` function
    creates new dots at the top of the game and moves the existing notes down:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`gameloop`函数添加到JavaScript中。`gameloop`函数在游戏顶部创建新的点，并将现有的音符向下移动：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Save all files and open the `index.htm` file in web a browser. The following
    screenshot shows the music playing with the music dots appearing on the top and
    moving downwards:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件，并在Web浏览器中打开`index.htm`文件。以下截图显示了音乐播放时顶部出现的音乐点并向下移动：
- en: '![Time for action Creating the playback visualization in the music game](img/1260_06_23.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![进行操作在音乐游戏中创建播放可视化](img/1260_06_23.jpg)'
- en: What just happened?
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just built a fully functional music game and this is the basic playback function.
    It plays the song with both the melody and the base part with some music dots
    moving downwards.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚构建了一个完全功能的音乐游戏，这是基本的播放功能。它播放旋律和基础部分的歌曲，并有一些音乐点向下移动。
- en: Choosing the right song for the music game
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择音乐游戏的合适歌曲
- en: We have to be careful of the copyright issue when choosing a song for the music
    game. It usually requires paying a usage fee or making an agreement with the song
    copyright owner to use a song with copyright. It is fine if you are building a
    commercial music game that is going to be a hit in the game industry and the earnings
    can overcome the copyright usage expense. However, as a book example here, we
    are going to use a copyright-free song. That is why we use the classical song
    Minute in G which is free public domain.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择音乐游戏的歌曲时，我们必须小心版权问题。通常需要支付使用费或与歌曲版权所有者达成协议以使用有版权的歌曲。如果您正在制作一个商业音乐游戏，并且收入可以弥补版权使用费，那就没问题。但是，作为一个书本示例，我们将使用无版权的歌曲。这就是为什么我们使用古典曲目《G大调小步舞曲》，它是免费的公共领域。
- en: Storing and extracting the song level data
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储和提取歌曲级别数据
- en: 'The level data shown in the *Time for action* section is just a portion of
    the entire level data. It is a very long string storing music note information,
    including the time and the line. It is stored in the following format:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*进行操作*部分显示的级别数据只是整个级别数据的一部分。它是一个非常长的字符串，存储音乐音符信息，包括时间和线。它以以下格式存储：'
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Each music dot data contains the time to show up and which line it shows. This
    data is separated by a comma. Every piece of music dot data is separated by a
    semi-colon. The following code extracts the level string into a `MusicNote` object
    by splitting the semi-colon and the comma:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 每个音乐点数据包含显示时间和显示的线。这些数据由逗号分隔。每个音乐点数据由分号分隔。以下代码将级别字符串提取为`MusicNote`对象，通过分号和逗号进行分割：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The level data string is recorded by the keyboard and we are going to discuss
    the recording later in this chapter.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 级别数据字符串由键盘记录，我们将在本章后面讨论录制。
- en: Tip
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The level data contains only several music notes here. In the code bundle, there
    is the whole level data of the complete song.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，级别数据只包含几个音符。在代码包中，有完整歌曲的整个级别数据。
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is an optional second parameter for the JavaScript `parseInt` function.
    It defines the radix of the number to parse. By default, it uses decimal but `parseInt`
    will parse the string as octal when the string begins with zero. For example,
    `parseInt("010")` return result 8 instead of 10\. If we want the decimal number,
    then we can use `parseInt("010",10)` to specify the radix.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript `parseInt`函数有一个可选的第二个参数。它定义要解析的数字的基数。默认情况下，它使用十进制，但当字符串以零开头时，`parseInt`将解析字符串为八进制。例如，`parseInt("010")`返回结果8而不是10。如果我们想要十进制数，那么我们可以使用`parseInt("010",10)`来指定基数。
- en: Getting the elapsed time of the game
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取游戏经过的时间
- en: Although we know the elapsed time of an audio element by accessing the `currentTime`
    property, we want to get the time from the starting of the game.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以通过访问`currentTime`属性来获取音频元素的经过时间，但我们想要从游戏开始时获取时间。
- en: We can get the elapsed time by storing the current computer time when starting
    the game and subtracting the current time value to get the elapsed time.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过存储开始游戏时的当前计算机时间，并减去当前时间值来获得经过的时间。
- en: 'We get the current computer time by using the `Date` object. The following
    code snippet shows how we use `startingTime` to get the elapsed time:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用`Date`对象来获取当前计算机时间。以下代码片段显示了我们如何使用`startingTime`来获取经过的时间：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following screenshot shows the preceding code snippet running in console:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面的代码片段在控制台中运行：
- en: '![Getting the elapsed time of the game](img/1260_06_24.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![获取游戏经过的时间](img/1260_06_24.jpg)'
- en: Creating music dots
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建音乐点
- en: 'In the `gameloop` function, we check all the `MusicNote` instances and see
    whether it is time to create the visual dot of that music note. The following
    code shows the logic we used to create the visual music dot. Basically, we get
    the elapsed time of the game and compare it with the current time of each music
    note. If the time difference between the note''s current time and elapsed time
    is within 30 ms, then we create the visual dot instance and let the `gameloop`
    function draw it:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在`gameloop`函数中，我们检查所有`MusicNote`实例，并查看是否是创建该音乐音符的可视点的时间。以下代码显示了我们用来创建可视音乐点的逻辑。基本上，我们获取游戏的经过时间，并将其与每个音乐音符的当前时间进行比较。如果音符的当前时间和经过时间之间的时间差在30毫秒内，那么我们就创建可视点实例，并让`gameloop`函数绘制它：
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Moving the music dots
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动音乐点
- en: There is a time difference between the game start and music start. The game
    starts several seconds before the song starts playing. It is because we need to
    show the music dots and move it down before the music starts.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开始和音乐开始之间存在时间差。游戏在音乐开始播放前几秒钟开始。这是因为我们需要在音乐开始之前显示音乐点并将其向下移动。
- en: The music dots should match the song when the dots are in the grey line. The
    music dots appear from the top of the game and move down towards the grey line.
    We delay the music play to wait as the dots move from top to bottom. It is around
    3.55 seconds in this example, so we delay the music playing by 3.55 seconds.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当点在灰线上时，音乐点应该与歌曲相匹配。音乐点从游戏顶部出现并向下移动到灰线。我们延迟音乐播放以等待点从上到下移动。在这个例子中大约是3.55秒，所以我们延迟音乐播放3.55秒。
- en: 'When the dot is created, it is placed at a given distance. We decrease all
    dots'' distance by 2.5 every time the `gameloop` function executes. The distance
    is stored in each `dot` object representing how far away it is from the grey line:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当点被创建时，它被放置在给定的距离处。每次`gameloop`函数执行时，我们将所有点的距离减少2.5。距离存储在每个代表它距离灰线有多远的`dot`对象中：
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The y position of the dot is calculated by the grey line subtracting the distance
    as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 点的y位置由灰线减去距离计算如下：
- en: '[PRE27]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following screenshot shows the distance between the grey line and each
    dot. When the distance is zero, it is exactly on the grey line:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了灰线和每个点之间的距离。当距离为零时，它恰好在灰线上：
- en: '![Moving the music dots](img/1260_06_09.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![移动音乐点](img/1260_06_09.jpg)'
- en: Linking the play button to the music game scene
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将播放按钮链接到音乐游戏场景
- en: We have a game scene now playing our song. However, it covers the menu scene
    we made with a play button inside. Imagine now we open the game with the play
    button being displayed, then we click on the button and the game scene slides
    in and starts playing the music.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个游戏场景正在播放我们的歌曲。但是，它覆盖了我们用播放按钮制作的菜单场景。现在想象一下，我们打开游戏时，播放按钮被显示，然后我们点击按钮，游戏场景滑入并开始播放音乐。
- en: Time for action Animating the scene transition
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 动画场景过渡
- en: 'We will hide the game scene by default and show it after the play button is
    clicked:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将默认隐藏游戏场景，并在点击播放按钮后显示它：
- en: First, we have to modify the stylesheet. Open the `audiogame.css` file.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须修改样式表。打开`audiogame.css`文件。
- en: 'Add the following highlighted overflow property to `#game`. It helps to clip
    the game into a 768x440px mask:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下突出显示的overflow属性添加到`#game`。它有助于将游戏剪切成768x440px的蒙版：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we add the following highlighted code to style the game scene:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加以下突出显示的代码来样式化游戏场景：
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Then, we will move on to the JavaScript part. Open the `html5games.audio.js`
    JavaScript file.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将转到JavaScript部分。打开`html5games.audio.js` JavaScript文件。
- en: Delete the `startGame` function calling in the jQuery ready function. We will
    call it when the play button is clicked.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在jQuery的ready函数中删除`startGame`函数的调用。我们将在点击播放按钮时调用它。
- en: 'In the play button click handler, we add the following highlighted code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在播放按钮点击处理程序中，我们添加以下突出显示的代码：
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Save all files and open the `index.htm` in a browser. There should be a slide-in
    animation to show the music playback scene when we click on the play button. The
    following screenshot sequence shows the slide-in animation:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并在浏览器中打开`index.htm`。当我们点击播放按钮时，应该有一个滑入动画来显示音乐播放场景。以下截图序列显示了滑入动画：
- en: '![Time for action Animating the scene transition](img/1260_06_25.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 动画场景过渡](img/1260_06_25.jpg)'
- en: What just happened?
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created a transition between the menu scene and the game scene.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在菜单场景和游戏场景之间创建了一个过渡。
- en: Creating a slide-in effect in CSS3
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在CSS3中创建滑入效果
- en: The game scene slides in from the top when the play button is clicked. This
    scene transition effect is done by moving the game scene by CSS3 transition. The
    game scene position is initially placed with a negative top value. We then change
    the top position from negative value to zero with a transition, so it animates
    from the top to the correct position.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮时，游戏场景从顶部滑入。这种场景过渡效果是通过CSS3过渡来实现的。游戏场景的位置最初是放置在负的顶部数值上。然后我们通过过渡将顶部位置从负值改变为零，这样它就从顶部动画到正确的位置。
- en: Another important thing to make the sliding effect work is to set the overflow
    of the parent DIV of the scenes to hidden. Without the hidden overflow, the game
    scene is visible even with a negative top position. Therefore, it is important
    to set the parent DIV of the scenes to the hidden overflow.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使滑动效果生效的另一重要事项是将场景的父DIV的溢出设置为隐藏。如果没有隐藏的溢出，即使顶部位置为负值，游戏场景也是可见的。因此，将场景的父DIV设置为隐藏的溢出是很重要的。
- en: 'The following screenshot illustrates the slide-in transition of the game scene.
    The `#game` DIV is the parent of both menu scene and game scene. The game scene
    moves from the top when we add the `.show-scene` class which sets the top value
    to 0 with transition:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了游戏场景的滑入过渡。`#game` DIV是菜单场景和游戏场景的父级。当我们添加`.show-scene`类时，游戏场景从顶部移动，将顶部值设置为0并进行过渡：
- en: '![Creating a slide-in effect in CSS3](img/1260_06_11.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![在CSS3中创建滑入效果](img/1260_06_11.jpg)'
- en: Have a go hero Creating different scene transition effects
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下 创建不同的场景过渡效果
- en: We made a slide-in effect to the scene transition when showing the game. By
    using JavaScript and CSS3, we can make many different scene transition effects
    creatively. Try making your own transition effect to the game, such as fading
    in, pushing in from the right, or even flipping with a 3D rotation.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示游戏时，我们为场景过渡创建了一个滑入效果。通过使用JavaScript和CSS3，我们可以创造许多不同的场景过渡效果。尝试制作自己的过渡效果，比如淡入、从右侧推入，甚至是带有3D旋转的翻转效果。
- en: Creating a keyboard-driven mini piano musical game
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个以键盘驱动的迷你钢琴音乐游戏
- en: Now we can click on the **play** button. The music game slides in and plays
    the song with music notes dropping down. Our next step is adding interaction to
    the music notes. Therefore, we will add keyboard events to control the three lines
    to hit the music notes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以点击**播放**按钮。音乐游戏滑入并播放带有音符下落的歌曲。接下来，我们将为音乐音符添加交互。因此，我们将添加键盘事件来控制三条线击中音乐音符。
- en: Time for action Creating a mini piano musical game
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 创建一个迷你钢琴音乐游戏
- en: 'Carry out the following steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'We want to show an indication when pressing the keyboard. Open the `index.htm`
    file and add the following highlighted HTML:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望在按键时显示指示。打开`index.htm`文件，并添加以下突出显示的HTML：
- en: '[PRE31]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we may want to inform visitors that they can play the game by pressing
    the **J, K**, and **L** keys. Modify the footer content as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可能希望通知访问者他们可以通过按**J，K**和**L**键来玩游戏。将页脚内容修改如下：
- en: '[PRE32]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now, we will move on to the stylesheet. The stylesheet is included in the code
    bundle with a folder named `audio_game_scene_transition`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将转移到样式表。样式表包含在名为`audio_game_scene_transition`的文件夹中。
- en: 'Next, we will add the keyboard event in the JavaScript part. Open the `html5games.audio.js`
    JavaScript file and add the following code inside the jQuery ready function:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在JavaScript部分添加键盘事件。打开`html5games.audio.js` JavaScript文件，并在jQuery准备好的函数内添加以下代码：
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now save all files and open the game in a browser. Try pressing the **J, K**,
    and **L** keys. The three hit line indicator should appear and fade out when the
    key is pressed. If the music dot passes by the grey line when hitting the right
    key, then it disappears:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存所有文件并在浏览器中打开游戏。尝试按下**J，K**和**L**键。三条击中线指示应该在按下键时出现并消失。如果音乐点在击中正确键时经过灰线，则会消失。
- en: '![Time for action Creating a mini piano musical game](img/1260_06_26.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 创建一个迷你钢琴音乐游戏](img/1260_06_26.jpg)'
- en: What just happened?
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added keyboard interaction to our music game. There is a glow animation
    when hitting the keys. The music dot will disappear when the right key is pressed
    at the right moment.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的音乐游戏添加了键盘交互。击打键时会有发光动画。当在正确时刻按下正确的键时，音乐点会消失。
- en: Hitting the three music lines by key down
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按键时击中三条音乐线
- en: We use the **J, K**, and **L** keys to hit the three music lines in the game.
    The **J** key controls the left line, the **K** key controls the middle line,
    and the **L** key controls the right one.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**J，K**和**L**键来击打游戏中的三条音乐线。**J**键控制左线，**K**键控制中线，**L**键控制右线。
- en: 'There is also an indication showing that we just hit the music line. This is
    done by placing the following image at the intersection of the grey line and music
    lines:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个指示，显示我们刚刚击中了音乐线。这是通过在灰线和音乐线的交叉点放置以下图像来实现的：
- en: '![Hitting the three music lines by key down](img/1260_06_13.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![按键时击中三条音乐线](img/1260_06_13.jpg)'
- en: 'Then, we can control the showing and hiding of the hit indication graphics
    with the following jQuery code:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下jQuery代码来控制击中指示图形的显示和隐藏：
- en: '[PRE34]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**J, K**, and **L** keys control the music line 1 to 3\. As J, K, and L have
    the key code 74, 75, and 76 respectively, we know which line number it is by subtracting
    the key code by 73.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**J，K**和**L**键控制音乐线1到3。由于J，K和L的键码分别为74、75和76，我们可以通过将键码减去73来知道它是哪条线。'
- en: Determining music dot hits on key down
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定按键时的音乐点击中
- en: 'The distance is close to zero if the dot is almost on the grey horizontal line.
    This helps us in determining if the dots hit the grey line. By checking both the
    key down event and the dot distance, we can determine if we successfully hit a
    music dot. The following code snippet shows that we consider the dot is hit when
    the distance is within 20 pixels:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果音符几乎在灰色水平线上，距离接近零。这有助于我们确定音符是否击中了灰线。通过检查按键按下事件和音符距离，我们可以确定是否成功击中了音符。以下代码片段显示了当距离在20像素内时，我们认为音符被击中：
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: With determination, we remove the music dots when we hit them. The missed dots
    will still pass through the grey line and move towards the bottom. This creates
    a basic game play where the player has to eliminate all the music dots by hitting
    them correctly at the right moment when the song is playing.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 坚定决心，我们在击中时移除音乐点。错过的点仍然会穿过灰线并向底部移动。这创造了一个基本的游戏玩法，玩家必须在歌曲播放时在正确的时刻正确击中所有音乐点。
- en: Removing an element in an array with the given index
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用给定索引从数组中删除一个元素
- en: 'We remove the music dot data from an array when it is hit (and thus it will
    not be drawn anymore). To remove an element in an array, we use the `splice` function.
    The following line of code removes one element from an array at the given index:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在音乐点被击中时（因此不再绘制）从数组中删除音乐点数据。要从数组中删除一个元素，我们使用`splice`函数。以下代码行从给定索引处的数组中删除一个元素：
- en: '[PRE36]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `splice` function is a little tricky to use. This is because it allows us
    to add or remove elements in an array. Then, it returns removed elements as another
    array. It sounds complicated. Therefore, we will perform some experiments.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`splice`函数有点棘手。这是因为它允许我们在数组中添加或删除元素。然后，它会将删除的元素作为另一个数组返回。听起来很复杂。因此，我们将进行一些实验。'
- en: Time for action Removing music dots with the splice function
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用splice函数删除音乐点的时间
- en: 'We will open the JavaScript console in a web browser to perform a few tests
    on the `splice` function:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Web浏览器中打开JavaScript控制台，对`splice`函数进行一些测试：
- en: Open the JavaScript console.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开JavaScript控制台。
- en: Input the following commands to the console line by line. That is, pressing
    **Enter** on each command line. These commands create an array and manipulate
    it with the `splice` function.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐行输入以下命令到控制台。也就是说，在每个命令行上按**Enter**。这些命令创建一个数组，并使用`splice`函数对其进行操作。
- en: 'We should get a result similar to the one shown in the following screenshot:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该得到类似以下截图中显示的结果：
- en: '![Time for action Removing music dots with the splice function](img/image031.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![使用splice函数删除音乐点的时间](img/image031.jpg)'
- en: What just happened?
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created an array and tried adding and removing elements by using the
    `splice` function. Please note that the splice array returns another array with
    the removed elements.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个数组，并尝试使用`splice`函数添加和删除元素。请注意，splice数组会返回另一个包含已删除元素的数组。
- en: 'Here is how we use the `splice` function:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何使用`splice`函数：
- en: '[PRE37]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following table shows how we use the arguments:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了我们如何使用这些参数：
- en: '| Argument | Definition | Discussion |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 定义 | 讨论 |'
- en: '| --- | --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `index` | Specifies the index of an element to be added or removed in the
    array | The index starts from 0\. 0 means the first element, 1 means the second
    one, and so on. We can also use negative indexes, such as -1 which means the last
    element, -2 which means the second last element, and so on. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `index` | 指定要添加或删除的元素在数组中的索引 | 索引从0开始。0表示第一个元素，1表示第二个元素，依此类推。我们还可以使用负索引，比如-1表示最后一个元素，-2表示倒数第二个元素，依此类推。
    |'
- en: '| `length` | Specifies how many elements we want to remove | Putting 0 means
    we do not remove any element. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `length` | 指定要删除的元素数量 | 放入0意味着我们不删除任何元素。 |'
- en: '| `element1, element2` … `elementN` | The new elements to be added into the
    array; this is optional | This is optional. Putting a list of elements here means
    we add the elements at the given index. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `element1, element2` … `elementN` | 要添加到数组中的新元素；这是可选的 | 这是可选的。在这里放入一系列元素意味着我们在给定的索引处添加元素。
    |'
- en: Note
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following Mozilla Developer Network link discusses different usages of
    the `splice` function:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Mozilla开发者网络链接，讨论了`splice`函数的不同用法：
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice)'
- en: Have a go hero
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下
- en: In similar commercial music games, there are some words showing when the player
    hits or misses a music dot. How can we add this feature to our game?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在类似的商业音乐游戏中，当玩家击中或错过音乐点时会显示一些字。我们如何将这个功能添加到我们的游戏中？
- en: Adding additional features to the mini piano game
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为迷你钢琴游戏添加额外功能
- en: We have created basic interaction to the game. We can go further to make the
    game better, by adding melody volume feedback to make the performance playing
    realistic, and counting the success rate of the performance.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为游戏创建了基本的交互。我们可以进一步改进游戏，通过添加旋律音量反馈来使表演更加逼真，并计算表演的成功率。
- en: Adjusting the music volume according to the player
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据玩家调整音乐音量
- en: Imagine now we are in a performance playing the music. We hit the music dots
    to play the melody. If we miss any of them, then we fail to perform it well and
    the melody disappears.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象我们正在表演音乐。我们击中音乐点演奏旋律。如果我们错过了其中任何一个，那么我们就无法演奏好，旋律就会消失。
- en: Time for action Removing missed melody notes
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用splice函数删除错过的旋律音符的时间
- en: 'We will store some gameplay statistics and use it to adjust the melody volume.
    We will continue with our JavaScript file:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将存储一些游戏统计数据，并用它来调整旋律音量。我们将继续进行JavaScript文件：
- en: 'First, add the following variables in the variable declaration region:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在变量声明区域中添加以下变量：
- en: '[PRE38]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `setupLevelData` function, we get the total amount of dots with the
    highlighted code:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setupLevelData`函数中，我们使用以下突出显示的代码获取了点的总数：
- en: '[PRE39]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We want to not only remove a dot but also keep track of the result when we
    hit it by using a keyboard. Add the following code inside the keyboard handler
    in the jQuery ready function:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不仅想要移除一个点，还想在击中它时跟踪结果。在jQuery的ready函数中的键盘处理程序中添加以下代码：
- en: '[PRE40]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `gameloop` function, we calculate all missed dots and store the result.
    Then, we can use these statistics to get the successful rate of the game. Add
    the following code to the `gameloop` function:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`gameloop`函数中，我们计算所有未击中的点并存储结果。然后，我们可以使用这些统计数据来获得游戏的成功率。在`gameloop`函数中添加以下代码：
- en: '[PRE41]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'At last, we adjust the melody volume by using the successful rate. Put the
    following code after the code we just added in the `gameloop` function:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过成功率来调整旋律音量。在`gameloop`函数中刚刚添加的代码之后添加以下代码：
- en: '[PRE42]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Save all files and test our game in a browser. When the player continues to
    play the game well, the melody keeps playing. When the player misses several music
    dots, the melody disappears and only the base plays.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件并在浏览器中测试我们的游戏。当玩家继续游戏时，旋律会继续播放。当玩家错过几个音乐点时，旋律消失，只剩下低音播放。
- en: What just happened?
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used the player performance as a feedback on the melody volume. It gives
    a feeling that we are really performing the music. When we perform poorly, the
    melody volume is low and the song sounds poor too.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用了玩家表现作为旋律音量的反馈。这给人一种我们真的在演奏音乐的感觉。当我们表现不佳时，旋律音量很低，歌曲听起来也很差。
- en: Removing dots from the game
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从游戏中移除点
- en: We want to remove the dots either after it drops under the bottom bound or when
    they are being hit by the player. The game loop displays all the dots in the dot
    list on the game canvas. We can remove the dot graphic by removing its data from
    the array of dots.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要移除点，要么是在它掉落到底部边界下方时，要么是在玩家击中它时。游戏循环在游戏画布上显示点列表中的所有点。我们可以通过从点数组中移除其数据来移除点图形。
- en: 'We use the following `splice` function to remove an entry in the array at the
    target index:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下的`splice`函数来移除数组中目标索引处的条目：
- en: '[PRE43]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Storing the success count in the last five results
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储最近五次结果中的成功次数
- en: In our game, we need to store the success count in the last five results to
    calculate the success rate. We can do this by using a counter representing this.
    When a dot is successfully hit, the counter increases by one, but when the player
    fails on hitting a dot, the counter decreases by 1.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中，我们需要存储最近五次结果中的成功次数以计算成功率。我们可以通过使用一个代表这个的计数器来实现。当成功击中一个点时，计数器增加1，但当玩家未能击中一个点时，计数器减少1。
- en: The counter is then representing the successful counts within the last several
    results if we limit the counter to have a range, such as 0 to 5 in our example.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将计数器限制在一个范围内，比如在我们的例子中是0到5，那么计数器就代表了最近几次结果中的成功次数。
- en: Have a go hero
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看
- en: We discussed how to display the game progress in the Untangle game in the last
    chapter. Can we apply a similar technique in the music game? We have the player's
    success percentage during game play. How about displaying it as a percentage bar
    on the top of the game?
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何在Untangle游戏中显示游戏进度。我们能否在音乐游戏中应用类似的技术？我们有玩家在游戏过程中的成功百分比。在游戏顶部显示为百分比条形图如何？
- en: Recording music notes as level data
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录音符作为级别数据
- en: The game relies on the level data to play. The playback visualization will not
    work if there is no level data. We also cannot play it if the playback visualization
    is not working. So how can we record that level data?
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏依赖级别数据进行播放。如果没有级别数据，回放可视化将无法工作。如果回放可视化不起作用，我们也无法进行播放。那么我们如何记录级别数据呢？
- en: Imagine now the music is playing without any music dots appearing in the game.
    We listen to the music carefully and press the **J, K, L** keys when the music
    plays. After the music ends, we print out all the keys and time we pressed. This
    data will then be used back in the playback visualization of the music.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，音乐正在播放，游戏中没有任何音乐点出现。我们仔细听音乐，当音乐播放时按下**J，K，L**键。音乐结束后，我们打印出所有按下的键和时间。这些数据将在音乐的回放可视化中使用。
- en: Time for action Adding functionality to record the music level data
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加功能记录音乐级别数据的时间
- en: 'Carry out the following steps:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'First, we create a variable to toggle between the recording mode and normal
    playing mode. Open the `html5games.audio.js` file and add the code as follows:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个变量来在录制模式和正常播放模式之间切换。打开`html5games.audio.js`文件并添加以下代码：
- en: '[PRE44]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, we add the following highlighted code in the `keydown` event handler.
    This code stores all our pressed keys in an array and prints them out to the console
    when the semi-colon key is pressed:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`keydown`事件处理程序中添加以下突出显示的代码。这段代码将我们按下的所有键存储在一个数组中，并在按下分号键时将它们打印到控制台上：
- en: '[PRE45]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, we want to make sure that the `setupLevelData` and the `gameloop`
    functions are not executed during the recording mode. These functions are for
    playing mode only:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们要确保`setupLevelData`和`gameloop`函数在录制模式下不被执行。这些函数仅用于播放模式：
- en: '[PRE46]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now open the `index.htm` in a browser. After clicking on the **play** button,
    the game starts and the music plays without the music notes. Try pressing the
    **J, K**, and **L** keys following the music beat. After finishing the music,
    press the semi-colon to print the level data in the console. The following screenshot
    shows the console displaying the level data string:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在浏览器中打开`index.htm`。点击**play**按钮后，游戏开始，音乐播放，但没有音乐音符。尝试按照音乐节奏按下**J，K**和**L**键。音乐结束后，按分号键在控制台中打印出级别数据。以下截图显示了控制台显示级别数据字符串：
- en: '![Time for action Adding functionality to record the music level data](img/1260_06_16.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![添加功能记录音乐级别数据的时间](img/1260_06_16.jpg)'
- en: What just happened?
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added a recording feature to our game. We can now record our music notes.
    We can toggle the record mode and playing mode by setting the `audiogame.isRecordMode`
    variable to true and false.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为游戏添加了录音功能。现在我们可以录制我们的音符。我们可以通过将`audiogame.isRecordMode`变量设置为true和false来切换录制模式和播放模式。
- en: 'On every key press, we get the elapsed time of the melody and create a `MusicNote`
    instance with the time and line number. The following code shows how we record
    the pressed keys. The `currentTime` is cut to two decimal digits before saving:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次按键时，我们获取旋律的经过时间，并创建一个带有时间和行号的`MusicNote`实例。以下代码显示了我们如何记录按下的键。在保存之前，`currentTime`被截断为两位小数：
- en: '[PRE47]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We also capture the semi-colon key to print out all the recorded `MusicNote`
    data into a string. The string follows the `time,line;time,line`; format, so we
    can directly copy the printed string and paste it as level data to play.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还捕获了分号键，以便将所有记录的`MusicNote`数据打印成字符串。字符串遵循`time,line;time,line`的格式，因此我们可以直接复制打印的字符串，并将其粘贴为级别数据以进行播放。
- en: Note
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `toFixed` function formats the number with the given number of trailing
    decimals. In our example, we used it to get the current time with `3` trailing
    decimals.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`toFixed`函数用给定的小数位数格式化数字。在我们的例子中，我们用它来获得带有`3`位小数的当前时间。'
- en: Handling the audio event on playback completes
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理音频事件播放完成
- en: We can play the game now, but there is no indication on game over. Imagine now,
    we want to know how well we played when the game completes. We will capture the
    melody-ending signal and display the successful rate of the game.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以玩游戏了，但是游戏结束时没有指示。现在想象一下，当游戏完成时，我们想知道我们玩得有多好。我们将捕获旋律结束信号，并显示游戏的成功率。
- en: Time for action Indicating a game over event in the console
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行指示在控制台中指示游戏结束事件
- en: 'Carry out the following steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Open the `html5games.audio.js` JavaScript file.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`html5games.audio.js` JavaScript文件。
- en: 'Add the following code in the jQuery ready function:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在jQuery ready函数中添加以下代码：
- en: '[PRE48]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the following event handler function to the end of the file:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下事件处理程序函数：
- en: '[PRE49]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'It is time to save all files and play the game in a web browser. When the game
    is over, we should see that the successful rate is printed in the console as shown
    in the following screenshot:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候保存所有文件并在Web浏览器中玩游戏了。游戏结束时，我们应该看到成功率打印在控制台中，如下截图所示：
- en: '![Time for action Indicating a game over event in the console](img/1260_06_17.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![执行指示在控制台中指示游戏结束事件](img/1260_06_17.jpg)'
- en: What just happened?
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just listened to the `ended` event of the audio element and handled it with
    a handler function.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚监听了音频元素的`ended`事件，并用处理程序函数处理了它。
- en: Handling audio events
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理音频事件
- en: 'There are many other events in the audio element. The following table lists
    a few commonly used audio events:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 音频元素中还有许多其他事件。以下表格列出了一些常用的音频事件：
- en: '| Event | Discussion |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 讨论 |'
- en: '| --- | --- |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ended` | Sent when the audio element finishes a playback |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `ended` | 当音频元素完成播放时发送 |'
- en: '| `play` | Sent when the audio element plays or resumes |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `play` | 当音频元素播放或恢复时发送 |'
- en: '| `pause` | Sent when the audio element pauses |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `pause` | 当音频元素暂停时发送 |'
- en: '| `progress` | Sent periodically when the audio element is downloading |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: 定期发送`progress`事件，当音频元素正在下载时
- en: '| `timeupdate` | Sent when the `currentTime` property changes |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `timeupdate` | 当`currentTime`属性改变时发送 |'
- en: 'Here we just listed a few commonly used events; you can reference the complete
    audio event list in the Mozilla Developer Center at the following URL:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们列出了一些常用事件；您可以在Mozilla开发者中心的以下网址上查看完整的音频事件列表：
- en: '[https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Media_events](http://https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Media_events)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Media_events](http://https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Media_events)'
- en: Have a go hero
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试吧
- en: In our music game, we print out the successful rate in the console when the
    game is over. How about adding a game over scene to our game and showing it at
    the end of the game? It would be good to use animation transition when showing
    a game over scene too.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的音乐游戏中，当游戏结束时，我们在控制台中打印出成功率。当游戏结束时，添加一个游戏结束场景，并在游戏结束时显示它会怎样？在显示游戏结束场景时，使用动画过渡也是不错的。
- en: Summary
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We learned a lot in this chapter about using the HTML5 audio element and built
    a music game.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学到了如何使用HTML5音频元素，并制作了一个音乐游戏。
- en: 'Specifically, we covered the following topics:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们涵盖了以下主题：
- en: Adding the audio tag to the HTML. There are different attributes we can set
    to define how the audio tag behaves and loads different format sources.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将音频标签添加到HTML中。我们可以设置不同的属性来定义音频标签的行为和加载不同格式的源。
- en: Controlling the audio playback and volume by using the JavaScript API.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript API控制音频播放和音量。
- en: Adding sound effects on mouse hover and active with the help of jQuery.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery在鼠标悬停和激活时添加声音效果。
- en: Creating a music game in canvas with keyboard inputs.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用键盘输入在画布中创建音乐游戏。
- en: Handling audio events; the audio element sends several events when its state
    changes.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理音频事件；音频元素在其状态改变时发送多个事件。
- en: We also discussed managing scenes and animating the transition.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了管理场景和动画过渡。
- en: We have learned about adding music and sound effects in our HTML5 games. Now
    we are ready to build a more complete game by adding a leaderboard to store game
    scores in the next chapter.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何在HTML5游戏中添加音乐和音效。现在我们准备在下一章中通过添加排行榜来存储游戏得分，构建一个更完整的游戏。
