- en: Chapter 1. Getting to Know the Studio with Your First Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。通过您的第一个游戏了解Studio
- en: 'Welcome to *HTML5 Game Development with GameMaker*! You are about to enter
    the exciting world of game development for the web. If you have never used **GameMaker:
    Studio** before, this book will show you everything you need to know about using
    the software, making games, and getting them up on the Internet. If you have previous
    experience with GameMaker: Studio, but this is your first foray into HTML5, this
    book will give you a better understanding of the differences between developing
    stand-alone games and browser-based games. Feel free to skim through this chapter
    and move onto the projects.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*使用GameMaker进行HTML5游戏开发*！您即将进入令人兴奋的网络游戏开发世界。如果您以前从未使用过**GameMaker：Studio**，本书将向您展示有关使用该软件、制作游戏以及将其上载到互联网的一切。如果您以前有GameMaker：Studio的经验，但这是您首次尝试HTML5，本书将帮助您更好地了解开发独立游戏和基于浏览器的游戏之间的区别。随意浏览本章并转到项目。
- en: 'Now if you are still reading this, we can assume that you want to know more
    about this software. You might be asking yourself, "Why should I use GameMaker:
    Studio? What features does the HTML5 module give me? For that matter, what is
    HTML5 and why should I care?" All of these are good questions, so let''s try to
    answer them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您仍在阅读本文，我们可以假设您想了解更多关于这个软件的信息。您可能会问自己，“为什么我应该使用GameMaker：Studio？HTML5模块给我什么功能？说到底，HTML5是什么，我为什么要关心？”所有这些都是很好的问题，让我们试着回答它们。
- en: Making HTML game development easy
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使HTML游戏开发变得简单
- en: 'GameMaker: Studio is an incredibly powerful and easy to use development tool
    for making games. The software was originally designed to be used in a classroom
    setting as a way for students to learn basic programming concepts, understand
    game architecture, and create fully featured games. As a result, the development
    environment is very intuitive for first time users due to the drag-and-drop system
    of coding. Unlike many other competing development tools with similar functionality,
    GameMaker: Studio has a very robust scripting language that allows users to create
    almost anything they can imagine. Add to this the fact that you can easily import
    and manage graphics and audio resources, the integration of the fantastic Box2D
    physics library, and built-in source control, why wouldn''t you use it? Up until
    now, making games generally meant that you were creating a stand-alone product.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: GameMaker：Studio是一个非常强大且易于使用的开发工具，用于制作游戏。该软件最初是设计用于课堂环境，作为学生学习基本编程概念、了解游戏架构和创建功能齐全的游戏的方式。因此，由于拖放式编码系统，开发环境对于初次使用者来说非常直观。与许多其他具有类似功能的竞争开发工具不同，GameMaker：Studio具有非常强大的脚本语言，允许用户创建几乎可以想象的任何东西。再加上您可以轻松导入和管理图形和音频资源，集成了出色的Box2D物理库以及内置的源代码控制，为什么不使用它呢？直到现在，制作游戏通常意味着您正在创建一个独立的产品。
- en: The Internet was not really a consideration as it was fairly static and required
    a slew of proprietary plugins to display dynamic content, such as games, movies,
    and audio. Then HTML5 came along and changed everything. HTML5 is an open-standards
    collection of code languages that allows anyone and everyone to develop interactive
    experiences that will be able to be run natively on any device with a modern browser
    and an Internet connection. Developers are now able to use cutting edge features,
    such as WebGL (a graphics library that allows for 3D rendering), audio APIs, and
    asset management, to push the boundaries of what you can do in a browser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网并不是真正的考虑，因为它相当静态，并且需要一堆专有插件来显示动态内容，例如游戏、电影和音频。然后，HTML5出现并改变了一切。HTML5是一组开放标准的代码语言，允许任何人开发交互式体验，并能够在具有现代浏览器和互联网连接的任何设备上本地运行。开发人员现在能够使用尖端功能，例如WebGL（一种允许进行3D渲染的图形库）、音频API和资产管理，来推动在浏览器中所能做的事情的边界。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not all browsers are equal! While the HTML5 standards are set by the W3C, each
    vendor implements them differently. Also, not all the standards have been set
    at this time, which means that some things may not work in certain browsers. For
    example, there are multiple audio APIs competing to become the standard. As the
    standards become locked down and as the browsers become more compliant, these
    issues should go away. To see how well your preferred browser supports HTML5,
    go to [http://html5test.com](http://html5test.com).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有浏览器都是相同的！虽然HTML5标准由W3C制定，但每个供应商的实现方式都不同。此外，目前还没有制定所有标准，这意味着某些功能可能在某些浏览器中无法正常工作。例如，有多个音频API竞相成为标准。随着标准的确定和浏览器的更加兼容，这些问题应该会消失。要查看您喜欢的浏览器对HTML5的支持程度，可以访问[http://html5test.com](http://html5test.com)。
- en: 'Normally, developing a game for HTML5 would require a working knowledge of
    three different coding languages: **HTML5** (**Hypertext Markup Language**), the
    code language that creates the structure of a web page, **CSS3** (**Cascading
    Style Sheets 3**), that determines the presentation of the site, and **JavaScript**
    that actually makes the magic happen. The GameMaker: Studio HTML5 export module
    makes all of this simple by allowing developers to work in an integrated environment
    and export to these languages with the press of a button. Beyond just being a
    game engine, the HTML export module includes specific functions for dealing with
    URLs and browser information. It also comes with its own local server software
    that will allow you to test your games as if it were up on the Internet live.
    Finally, you can extend GameMaker: Studio even further, because it allows you
    to import external JavaScript libraries for any functionality you may need or
    want. Sounds great, doesn''t it? Now let''s get the Studio up and running.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，为HTML5开发游戏需要对三种不同的编码语言有所了解：**HTML5**（超文本标记语言），用于创建网页结构的代码语言，**CSS3**（层叠样式表3），用于确定网站的呈现方式，以及实际实现魔术的**JavaScript**。GameMaker:
    Studio HTML5导出模块通过允许开发人员在集成环境中工作并通过按下按钮导出到这些语言，使所有这些变得简单。除了作为游戏引擎之外，HTML导出模块还包括用于处理URL和浏览器信息的特定功能。它还配备了自己的本地服务器软件，可以让您测试游戏，就好像它实时上网一样。最后，您可以进一步扩展GameMaker:
    Studio，因为它允许您导入外部JavaScript库，以获取您可能需要或想要的任何功能。听起来很棒，不是吗？现在让我们启动Studio。'
- en: Setting up the software
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置软件
- en: 'In order to use this book, we need to have a few pieces of software. Firstly,
    we need an HTML5 compliant browser, such as Mozilla Firefox, Microsoft Internet
    Explorer 9.0, or for the best results, Google Chrome. Secondly, we need to purchase
    and install GameMaker: Studio Professional with the HTML5 export module. Once
    we have all of that we can start making games!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使用本书，我们需要一些软件。首先，我们需要一个HTML5兼容的浏览器，如Mozilla Firefox，Microsoft Internet Explorer
    9.0，或者为了获得最佳效果，Google Chrome。其次，我们需要购买并安装GameMaker: Studio专业版和HTML5导出模块。一旦我们拥有了所有这些，我们就可以开始制作游戏了！'
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Please be aware that GameMaker: Studio Professional and the HTML5 export module
    are two separate items, and you will need to own both in order to create games
    for the web.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，GameMaker: Studio专业版和HTML5导出模块是两个单独的项目，您需要拥有两者才能为网络创建游戏。'
- en: 'Purchase and download GameMaker: Studio Professional and the HTML5 export module
    from [https://www.yoyogames.com/buy/studio/professional](https://www.yoyogames.com/buy/studio/professional).'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从[https://www.yoyogames.com/buy/studio/professional](https://www.yoyogames.com/buy/studio/professional)购买并下载GameMaker:
    Studio专业版和HTML5导出模块。'
- en: Once they have been downloaded, run the program `GMStudio-Installer.exe`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行程序`GMStudio-Installer.exe`。
- en: Follow the onscreen instructions and then launch the program.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照屏幕上的说明操作，然后启动程序。
- en: Enter your license key. This will unlock the software and the modules that have
    been purchased.![Setting up the software](img/4100OT_01_01.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的许可密钥。这将解锁已购买的软件和模块。![设置软件](img/4100OT_01_01.jpg)
- en: 'GameMaker: Studio is ready to go, so let''s start a project!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'GameMaker: Studio已经准备就绪，让我们开始一个项目吧！'
- en: In the **New Project** window, select the **New** tab. It should look like the
    preceding screenshot.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新项目**窗口中，选择**新**选项卡。它应该看起来像前面的屏幕截图。
- en: 'GameMaker: Studio manages projects by creating folders for each resource along
    with a project file. For this you will want to specify a directory where the game
    files are to be stored. Set the **Project Name** field to `Chapter_01` and click
    on **Create**.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'GameMaker: Studio通过为每个资源创建文件夹以及项目文件来管理项目。为此，您需要指定游戏文件存储的目录。将**项目名称**字段设置为`Chapter_01`，然后单击**创建**。'
- en: Our first look at the Studio
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们第一次看到Studio
- en: 'Now that we have the software up and running, let''s take a look at the interface
    . The basic layout of GameMaker: Studio can be broken down into four components:
    the Menu, the Toolbar, the Resource tree, and the Workspace. We will be exploring
    these components throughout this book, so don''t expect a breakdown of each and
    every item. Not only would that be incredibly boring to read, it would delay us
    from making games. Instead, let''s just focus on the stuff we need to know right
    now.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们已经安装并运行了软件，让我们来看看界面。GameMaker: Studio的基本布局可以分为四个组件：菜单、工具栏、资源树和工作区。我们将在本书中探索这些组件，所以不要期望对每个项目进行详细分解。这不仅会让阅读变得枯燥无味，还会延迟我们制作游戏。相反，让我们专注于我们现在需要知道的东西。'
- en: '![Our first look at the Studio](img/4100OT_01_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![我们第一次看到Studio](img/4100OT_01_02.jpg)'
- en: Firstly, as with most complex software, each of these components has its own
    way of allowing users to do the most common tasks. For example, if you want to
    create a Sprite you can navigate to **Menu** | **Resources** | **Create Sprite**,
    or you can click on the C**reate a Sprite** button in the Toolbar, or you can
    right mouse click the **Sprites** group in the Resource Tree, or you can use *Shift*
    + *Ctrl* + *S* to open the **Sprite Editor** window in the Workspace. There are
    actually even more ways to do this, but you get the point.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，与大多数复杂软件一样，每个组件都有自己的方式让用户执行最常见的任务。例如，如果要创建一个精灵，可以导航到**菜单** | **资源** | **创建精灵**，或者单击工具栏中的**创建精灵**按钮，或者在资源树中右键单击**精灵**组，或者使用*Shift*
    + *Ctrl* + *S*在工作区中打开**精灵编辑器**窗口。实际上，还有更多的方法可以做到这一点，但您明白了。
- en: While there is a lot of overlapping functionality, there are also many things
    that can only be done in each specific component. Here is what we need to know.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有很多重叠的功能，但也有许多事情只能在每个特定的组件中完成。以下是我们需要知道的内容。
- en: The Menu
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单
- en: The **Menu** is where you will find every editor and tool you will need. There
    are a few very useful tools, such as the ability to **Search in Scripts** and
    **Define Constants** that are only found here. Why not just spend a moment and
    take a look at each menu option so that you have an idea of all the things you
    have available to you. We'll wait.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**菜单**是您将找到每个编辑器和工具所需的地方。有一些非常有用的工具，比如**在脚本中搜索**和**定义常量**，这些只能在这里找到。为什么不花点时间看看每个菜单选项，以便了解您可以使用的所有内容呢。我们会等一下。'
- en: The Toolbar
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏
- en: 'The **Toolbar** uses simple graphic icons for the most common editors and tools
    we will be using. These buttons are the easiest and quickest way to create new
    assets and run the game, so expect to be using these often. There is one very
    important, unique element on the Toolbar: the **Target** drop-down menu. The **Target**
    determines what format we will be compiling and exporting to. Set this to **HTML5**.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具栏**使用简单的图形图标来表示我们将要使用的最常见的编辑器和工具。这些按钮是创建新资产和运行游戏的最简单、最快速的方式，所以预计会经常使用这些按钮。工具栏上有一个非常重要的独特元素：**目标**下拉菜单。**目标**确定我们将编译和导出到哪种格式。将其设置为**HTML5**。'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default setting for the **Target** menu is **Windows**, so make sure you
    change it to **HTML5**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**菜单的默认设置是**Windows**，所以确保将其更改为**HTML5**。'
- en: The Resource tree
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源树
- en: The **Resource tree** shows and organizes all the assets that have been created
    for the game. Keeping a project organized won't affect the performance of the
    software, but it will save us time and reduce frustration in the long run.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 资源树显示和组织了为游戏创建的所有资产。保持项目有条不紊不会影响软件的性能，但会节省我们的时间，并在长期内减少挫折感。
- en: The Workspace
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作区
- en: The **Workspace** is where all the various editors will open up. When the game
    is run, the **Compiler Information** box will appear at the bottom, and will show
    everything being compiled when the game is run. There is also a tab for **Source
    Control**, which can be used if you have an SVN Client and repository for working
    in groups.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作区**是各种编辑器将打开的地方。运行游戏时，**编译器信息**框将出现在底部，并在运行游戏时显示正在编译的所有内容。还有一个**源控制**选项卡，如果您有一个SVN客户端和用于团队合作的存储库，可以使用它。'
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to know more about Source Control, check out the following GameMaker:
    Studio wiki page: [http://wiki.yoyogames.com/index.php/Source_Control_and_GameMaker:Studio](http://wiki.yoyogames.com/index.php/Source_Control_and_GameMaker:Studio)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您想了解更多关于源控制的信息，请查看以下GameMaker: Studio维基页面：[http://wiki.yoyogames.com/index.php/Source_Control_and_GameMaker:Studio](http://wiki.yoyogames.com/index.php/Source_Control_and_GameMaker:Studio)'
- en: Exploring the resource editors
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索资源编辑器
- en: 'In order to create a game in GameMaker: Studio, you need a minimum of three
    types of resource assets: a **Sprite** (what you see), an **Object** (what it
    does), and a **Room** (where it happens). On top of these, you can also have **Scripts,
    Backgrounds**, **Sounds**, **Fonts**, **Paths**, and **Time Lines**.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '为了在GameMaker: Studio中创建游戏，您需要至少三种类型的资源资产：**精灵**（您所看到的）、**对象**（它的功能）和**房间**（发生的地方）。除此之外，您还可以拥有**脚本、背景、声音、字体、路径**和**时间轴**。'
- en: 'Each resource that you can bring into GameMaker: Studio has its own properties
    editor. In order to get acquainted with each of them, we are going to build a
    very simple game of cat and mouse. We will create a player character (a mouse)
    that can move around the room, collect items (cheese), and avoid an enemy (a cat).
    Let''s dive right in by creating some sprites.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以将每个可以引入GameMaker: Studio的资源都有自己的属性编辑器。为了熟悉它们中的每一个，我们将构建一个非常简单的猫鼠游戏。我们将创建一个玩家角色（一只老鼠），可以在房间中移动，收集物品（奶酪），并避开敌人（一只猫）。让我们立即开始创建一些精灵。'
- en: Loading your art assets with the Sprite Properties editor
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用精灵属性编辑器加载您的艺术资产
- en: Sprites are bitmap images that are intended to be used for the graphical representation
    of an object. These can be a single image or an animated sequence of images. GameMaker
    has its own image editor to create these, but also allows JPG, GIF, PNG, and BMP
    files to be imported.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵是用于对象的图形表示的位图图像。这些可以是单个图像或一系列动画图像。GameMaker有自己的图像编辑器来创建这些，但也允许导入JPG、GIF、PNG和BMP文件。
- en: '![Loading your art assets with the Sprite Properties editor](img/4100OT_01_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用精灵属性编辑器加载您的艺术资产](img/4100OT_01_03.jpg)'
- en: For our example, we are going to start by creating two sprites; one for a wall
    and one for a player character. If you have downloaded the support files, we have
    supplied image files for this in the `Chapter_01` folder.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将首先创建两个精灵；一个用于墙，一个用于玩家角色。如果您已经下载了支持文件，我们在`Chapter_01`文件夹中提供了这些图像文件。
- en: The wall sprite
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 墙精灵
- en: We will start with a simple Sprite that will represent the walls of our game.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的精灵开始，它将代表我们游戏的墙。
- en: Create a new Sprite by navigating to **Resources** | **Create Sprite**. This
    creates a Sprite in the Resource tree, and opens up the **Sprite Properties**
    editor.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建精灵**来创建一个新精灵。这将在资源树中创建一个精灵，并打开**精灵属性**编辑器。
- en: Name the sprite `spr_Wall`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将精灵命名为`spr_Wall`。
- en: Click on **Load Sprite** to open a Sprite image. On the side of this window
    there is an **Image Information** section, where we can see a preview of the selected
    image and choose to activate several options. **Make Opaque** will remove all
    transparency from the selected sprite. **Remove Background** will remove all pixels
    with the color found in the pixel in the lower-left corner of the image. **Smooth
    Edges** will smooth the transparent edges of an image and is very useful when
    importing animated GIF files to get rid of the hard edges.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**加载精灵**以打开精灵图像。在窗口的一侧有一个**图像信息**部分，我们可以在那里预览所选图像并选择激活几个选项。**使不透明**将从所选精灵中删除所有透明度。**删除背景**将删除图像左下角像素中找到的颜色的所有像素。**平滑边缘**将平滑图像的透明边缘，在导入动画GIF文件时非常有用，可以去除硬边缘。
- en: With none of the options checked, open `Chapter 1/Sprites/Wall.png` and click
    on **OK**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有选中任何选项的情况下，打开`Chapter 1/Sprites/Wall.png`，然后单击**确定**。
- en: As you can see in the following screenshot, it has a width and height of 32
    pixels and has one subimage. Nothing else needs to be changed, so click on **OK**:![The
    wall sprite](img/4100OT_01_04.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，它的宽度和高度为32像素，有一个子图像。没有其他需要改变的地方，所以点击**确定**：![墙壁精灵](img/4100OT_01_04.jpg)
- en: The player sprite
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 玩家精灵
- en: The player in this game is going to be a mouse and the Sprite consists of two
    frames of animation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏中的玩家将是一个鼠标，精灵由两帧动画组成。
- en: Create a new Sprite.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的精灵。
- en: Name the sprite `spr_Player`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将精灵命名为`spr_Player`。
- en: Click on **Load Sprite** and select `Chapter 1/Sprites/Player.gif`. Check the
    box for **Remove Background and Smooth Edges**. Click on **OK**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**加载精灵**，选择`Chapter 1/Sprites/Player.gif`。勾选**去除背景和平滑边缘**。点击**确定**。
- en: Once again, it has a width and height of 32 pixels, but this has two subimages
    as shown in the next screenshot. This means it has animation! Let's see what each
    frame looks like by clicking on the arrow beside **Show**. It is useful to do
    this when loading animated images to ensure that all the frames are in the appropriate
    order and are aligned properly.![The player sprite](img/4100OT_01_05.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，它的宽度和高度为32像素，但是有两个子图像，如下一截图所示。这意味着它有动画！让我们点击**显示**旁边的箭头来看看每一帧的样子。加载动画图像时这样做是有用的，以确保所有帧都按适当的顺序排列并且对齐正确。![玩家精灵](img/4100OT_01_05.jpg)
- en: Set **X** in **Origin** to `16` and **Y** to `16`, or you can just click on
    the **Center** button.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**原点**中将**X**设置为`16`，**Y**设置为`16`，或者你可以直接点击**中心**按钮。
- en: Click on the **OK** button.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮。
- en: Congratulations! You have created your first sprites. We will be going deeper
    into the creation of art assets in the following chapter, so let's move onto Objects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经创建了你的第一个精灵。在下一章中，我们将更深入地探讨艺术资源的创建，所以让我们继续到对象。
- en: Creating game objects with the Object Properties editor
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用对象属性编辑器创建游戏对象
- en: 'This is where the real power of GameMaker: Studio truly shows itself. **Objects**
    can be thought of as containers that hold the properties, events, and functions
    that we want each item in the game to do. When we place an object into the game
    world, it is called an **instance** and it will operate independently from all
    other instances of that object.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '这就是GameMaker: Studio真正展示其实力的地方。**对象**可以被看作是容器，其中包含了我们希望游戏中的每个项目执行的属性、事件和功能。当我们将一个对象放入游戏世界时，它被称为**实例**，它将独立于该对象的所有其他实例运行。'
- en: '![Creating game objects with the Object Properties editor](img/4100OT_01_54.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用对象属性编辑器创建游戏对象](img/4100OT_01_54.jpg)'
- en: Before we move on, it is important to understand the difference between an **object**
    and an **instance** of that object. An object is a set of rules that describe
    something, while an instance is a unique representation of that something. A real-world
    example would be *you* are an instance of a *human* object. A *human* is something
    that has arms, legs, speaks, sleeps, and so on. A *you* is the unique interpretation
    of these elements. An example of this concept can be seen in the preceding diagram.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，理解**对象**和**对象的实例**之间的区别是很重要的。对象是描述某物的一组规则，而实例是该某物的独特表示。一个现实世界的例子是*你*是*人*对象的一个实例。*人*是有手臂、腿、说话、睡觉等特征的东西。*你*是这些元素的独特解释。这个概念的一个例子可以在前面的图表中看到。
- en: The reason this is important is because depending on the functions being used,
    the effect will be applied either to all of the items of that type or to the individual
    item. Generally you wouldn't want to shoot an enemy and then have all the enemies
    in the world die, would you?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要的原因是，根据所使用的功能，效果将被应用于该类型的所有项目或个别项目。一般来说，你不会希望射击一个敌人然后世界上所有的敌人都死掉，对吧？
- en: '![Creating game objects with the Object Properties editor](img/4100OT_01_06.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用对象属性编辑器创建游戏对象](img/4100OT_01_06.jpg)'
- en: Continuing with our example, we are going to create a Wall object and a Player
    object. The Wall is going to be a stationary obstacle, while the Player is going
    to have controls allowing it to move around the world and collide with the Wall.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的例子，我们将创建一个墙对象和一个玩家对象。墙将是一个固定的障碍物，而玩家将有控制，使其能够在世界中移动并与墙碰撞。
- en: The Wall object
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 墙对象
- en: We will start with the solid Wall object that we can use to create a maze for
    the player.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从实体墙对象开始，我们可以用它来创建迷宫供玩家使用。
- en: Create a new Object by navigating to **Resources** | **Create Object**. This
    will create a new Object in the Resource tree and open up the **Object Properties**
    editor.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建对象**来创建一个新对象。这将在资源树中创建一个新对象，并打开**对象属性**编辑器。
- en: Name this object `obj_Wall`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此对象命名为`obj_Wall`。
- en: Click on the input box in **Sprite** and select `spr_Wall`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**精灵**中的输入框，选择`spr_Wall`。
- en: GameMaker treats collision with solid objects differently than non-solid objects.
    If a solid object and a non-solid object collide, GameMaker will try and prevent
    them from overlapping by moving the non-solid object back to its previous position.
    Of course, in order to do this properly, the solid object has to be stationary.
    Therefore, we should add the solid property to the Wall.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: GameMaker处理与实体对象的碰撞与非实体对象的碰撞方式不同。如果实体对象和非实体对象发生碰撞，GameMaker会尝试通过将非实体对象移回其先前的位置来防止它们重叠。当然，为了正确地做到这一点，实体对象必须是静止的。因此，我们应该将实体属性添加到墙上。
- en: Click on the **Solid** checkbox and then click on **OK**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**实体**复选框，然后点击**确定**。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Solid** property should only ever be used with objects that do not move.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**实体**属性应该只用于不移动的对象。'
- en: The Player object
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 玩家对象
- en: The Player object will introduce us to using **Events** and **Actions** for
    things, such as movement and collision.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家对象将向我们介绍使用**事件**和**动作**来进行移动和碰撞等操作。
- en: Create a new Object and name it `obj_Player`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象并命名为`obj_Player`。
- en: Select `spr_Player` as the Sprite.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`spr_Player`作为精灵。
- en: GameMaker's power comes from its event-driven system. Events are moments and
    actions that occur during the running of a game. When you add an Event to an Object,
    you are asking the item to respond to that action when it occurs, and then apply
    the assigned instructions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: GameMaker的强大之处在于其事件驱动系统。事件是游戏运行过程中发生的时刻和动作。当您向对象添加事件时，您要求该项在发生该动作时做出响应，然后应用指定的指令。
- en: '![The Player object](img/4100OT_01_07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![玩家对象](img/4100OT_01_07.jpg)'
- en: Sounds fairly straightforward, doesn't it? Well it can be a bit confusing when
    it comes to the order of events. GameMaker breaks down the game into steps (finite
    moments of time), which run the events many times every second. Some events happen
    in a preset order, such as Begin Step, which always starts at the very beginning
    of the step. Other events happen whenever they are called, such as Create, which
    is run immediately when an instance of an object is created, to check whether
    that code occurs at the start or end of the step.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来相当简单，不是吗？但是当涉及到事件顺序时可能会有点混乱。GameMaker将游戏分解为步骤（有限的时间段），每秒运行多次事件。一些事件按照预设顺序发生，比如开始步骤，它总是从步骤的最开始开始。其他事件在被调用时发生，比如创建，它会立即在对象的实例创建时运行，以检查该代码是在步骤的开始还是结束时发生。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Go to [http://wiki.yoyogames.com/index.php/Order_of_events](http://wiki.yoyogames.com/index.php/Order_of_events)
    to learn more about GameMaker: Studio''s order of events.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '访问[http://wiki.yoyogames.com/index.php/Order_of_events](http://wiki.yoyogames.com/index.php/Order_of_events)了解更多关于GameMaker:
    Studio事件顺序的信息。'
- en: In the **Events:** area, click on **Add Event** and navigate to **Keyboard**
    | **Left**. This event will run code each step that the left arrow key is held
    down.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**事件：**区域，单击**添加事件**，然后导航到**键盘** | **左**。这个事件将在按住左箭头键的每一步中运行代码。
- en: '**Events** need **Actions** to be applied for them to do anything. GameMaker:
    Studio uses a **drag-and-drop** (**DnD**) system where icons representing common
    behaviors can be easily implemented. These have been separated into seven different
    tabs based on functionality. For the vast majority of this book we are going to
    use only the Execute Script icon found in the **Common** tab, as we will be writing
    code placed into **Scripts**. In this chapter, however, we will use the DnD Actions,
    so that you get an understanding of what they do.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件**需要**动作**来应用它们才能发挥作用。GameMaker: Studio使用**拖放**（**DnD**）系统，其中代表常见行为的图标可以很容易地实现。这些行为根据功能分为七个不同的选项卡。在本书的绝大部分内容中，我们将只使用在**常见**选项卡中找到的**执行脚本**图标，因为我们将编写放置在**脚本**中的代码。然而，在本章中，我们将使用DnD动作，以便您了解它们的作用。'
- en: From the **Move** tab, select and drag the Move Fixed icon into the **Actions**
    area of the Left Key event.![The Player object](img/4100OT_01_34.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**移动**选项卡中，选择并将移动固定图标拖放到左键事件的**动作**区域。![玩家对象](img/4100OT_01_34.jpg)
- en: The Move Fixed icon
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 移动固定图标
- en: In the **Move Fixed** options box, there is an option for what object this action
    is to be applied to. We want this to be set to **Self**, so that it is applied
    to the instance of the player.![The Player object](img/4100OT_01_08.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**移动固定**选项框中，有一个选项，用于指定要应用此动作的对象。我们希望将其设置为**自身**，以便将其应用于玩家的实例。![玩家对象](img/4100OT_01_08.jpg)
- en: Click on the left arrow to indicate the direction we want the movement to go.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击左箭头以指示我们希望移动的方向。
- en: Set the **Speed** field to a value of `8`. This will apply a velocity of eight
    pixels per step.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**速度**字段设置为`8`。这将每步应用8像素的速度。
- en: Ensure that **Relative** is *not* checked. Relative will add the value to whatever
    the current value is.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**相对**未被选中。相对会将该值添加到当前值。
- en: Click on **OK**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**。
- en: Repeat steps 4 to 9 for the other keyboard arrows (right, up, and down) with
    the same **Speed** and the appropriate direction.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于其他键盘箭头（右，上，下），重复步骤4到9，使用相同的**速度**和适当的方向。
- en: Now we have an object that will move around the world when the arrow keys are
    pressed. However, if we were to run this, once we started moving, we would be
    unable to stop. This is because we are applying a velocity to the object. In order
    for us to stop the object, we need to give it a velocity of zero.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个对象，当按下箭头键时会在世界中移动。但是，如果我们运行这个程序，一旦开始移动，我们将无法停止。这是因为我们正在给对象应用速度。为了停止对象，我们需要给它一个速度为零。
- en: In the **Events:** area, click on **Add Event** and navigate to **Keyboard**
    | **No Key**. This is a special keyboard event that will only happen when no keys
    are being pressed.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**事件：**区域，单击**添加事件**，然后导航到**键盘** | **无键**。这是一个特殊的键盘事件，只有在没有按键时才会发生。
- en: Select and drag the Move Fixed icon into the Actions area.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并将移动固定图标拖放到**动作**区域。
- en: Set the direction to be in the center and set the **Speed** field to `0`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将方向设置为中心，将**速度**字段设置为`0`。
- en: 'The last thing we need to do is to add our collision detection. Collision in
    GameMaker: Studio is a single event comprising two instances. Each instance is
    capable of executing an event call on this single collision, though it is generally
    more efficient to put the code on only one of them. In our case, it makes sense
    to put a Collision Event on the Player for when it collides with a Wall, as the
    Player will be the instance that does something. The Wall will remain where it
    is, doing nothing.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要做的最后一件事是添加碰撞检测。在GameMaker: Studio中，碰撞是由两个实例组成的单个事件。每个实例都能在这个单一碰撞上执行一个事件调用，尽管通常将代码放在其中一个上更有效。在我们的情况下，将碰撞事件放在玩家身上，当它与墙碰撞时，这是有意义的，因为玩家将是执行动作的实例。墙将保持原样，什么也不做。'
- en: Click on **Add Event** and navigate to **Collision** | **obj_Wall**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加事件**，然后导航到**碰撞** | **obj_Wall**。
- en: Drag the Move Fixed icon into the **Actions:** area.![The Player object](img/4100OT_01_09.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将移动固定图标拖放到**动作：**区域。![玩家对象](img/4100OT_01_09.jpg)
- en: Set the direction to be in the center and the **Speed** field to `0`. Click
    on **OK**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将方向设置为中心，**速度**字段设置为`0`。单击**确定**。
- en: The actors are ready; we have some objects that can be seen and do something.
    Now all we need to do is put these into a room.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 演员已经准备好了；我们有一些可以看到并且可以做一些事情的对象。现在我们需要做的就是把它们放到一个房间里。
- en: Creating worlds with the Room Properties editor
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用房间属性编辑器创建世界
- en: 'Rooms represent the world in which the instances of our objects live. Most
    rooms you create will likely be used as various levels, but rooms can also used
    for:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 房间代表我们对象实例所在的世界。您创建的大多数房间可能会被用作各种级别，但房间也可以用于：
- en: Frontend menu screens
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端菜单屏幕
- en: Non-interactive scenes
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非交互式场景
- en: Any self-contained environment you need![Creating worlds with the Room Properties
    editor](img/4100OT_01_10.jpg)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要的任何自包含环境！[使用房间属性编辑器创建世界](img/4100OT_01_10.jpg)
- en: We want to lay out a world that will contain the player as well as presenting
    some obstacles. To do this, we are going to place down wall objects around the
    outer edges of the room and place a few lines in the center.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要布置一个包含玩家并呈现一些障碍物的世界。为此，我们将在房间的外缘放置墙对象，并在中心放置几条线。
- en: Create a new room by navigating to **Resources** | **Create Room**. This will
    create a new room in the Resource tree and open up the **Room Properties** editor.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建房间**来创建一个新房间。这将在资源树中创建一个新房间，并打开**房间属性**编辑器。
- en: To make placement a bit easier, set the **Snap X** and **Snap Y** fields to
    `32`. This will create a placement grid with snapping points every 32 pixels.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使放置变得更容易，将**Snap X**和**Snap Y**字段设置为`32`。这将创建一个每32像素一个捕捉点的放置网格。
- en: Select the **settings** tab. Here we can change the basic room properties, the
    size, steps per second, and the name of the room.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**设置**选项卡。在这里，我们可以更改基本的房间属性，大小，每秒步数和房间的名称。
- en: Name the room as `rm_GameArea`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将房间命名为`rm_GameArea`。
- en: We will leave the room **Width**, **Height**, and **Speed** fields at their
    defaults as seen in the following screenshot:![Creating worlds with the Room Properties
    editor](img/4100OT_01_11.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将保留房间**宽度**，**高度**和**速度**字段的默认值，如下面的截图所示：![使用房间属性编辑器创建世界](img/4100OT_01_11.jpg)
- en: Select the **objects** tab, and under **Object to add with left mouse**, select
    `obj_Wall`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**对象**选项卡，在**用鼠标左键添加的对象**下，选择`obj_Wall`。
- en: In the upper-left corner of the room, click with the left mouse button to place
    an instance of the wall.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在房间的左上角，用鼠标左键单击放置一个墙的实例。
- en: Now you might be thinking that this is going to take a painfully long time to
    build the room, click by click. Don't worry, there is an easier way. If you hold
    down *Shift* + *Ctrl*, you will be able to paint the world with the instances.
    If you make a mistake and want to remove an instance, just right mouse click to
    delete one instance, or hold the *Shift* key to de-paint the instances. If you
    just want to move the instance a tiny bit, as in not a whole grid unit, hold the
    *Alt* key down.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会认为这将需要非常长的时间来逐个点击构建房间。别担心，有一个更简单的方法。如果你按住*Shift* + *Ctrl*，你就可以用实例来绘制世界。如果你犯了一个错误并想要删除一个实例，只需右键单击以删除一个实例，或者按住*Shift*键来取消绘制实例。如果你只想移动实例一点点，而不是整个网格单元，按住*Alt*键。
- en: Holding down the *Shift* + *Ctrl* keys and the left mouse button, draw the perimeter
    walls. Also lay down two extruded sections as shown in the following example screenshot:![Creating
    worlds with the Room Properties editor](img/4100OT_01_12.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*Shift* + *Ctrl*键和鼠标左键，绘制周边墙壁。还要放下两个凸出的部分，如下面的示例截图所示：![使用房间属性编辑器创建世界](img/4100OT_01_12.jpg)
- en: Don't forget to add the Player in!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记添加玩家！
- en: In the **objects** tab, select `obj_Player`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象**选项卡中，选择`obj_Player`。
- en: Place a single instance of `obj_Player` into the room in the lower-right corner
    of the room.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在房间的右下角放置一个`obj_Player`的单个实例。
- en: Close the room by clicking on the check mark in the upper-left corner of the
    **Room Properties** editor.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击**房间属性**编辑器左上角的复选标记来关闭房间。
- en: 'At this point, we have all the required elements necessary to run a game in
    GameMaker: Studio. Before we test the game out, we should save our work by navigating
    to **File** | **Save**.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在这一点上，我们已经拥有了在GameMaker: Studio中运行游戏所需的所有必要元素。在我们测试游戏之前，我们应该通过导航到**文件** | **保存**来保存我们的工作。'
- en: Running the game
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行游戏
- en: While creating a game, there are three different types of compilations that
    can be done. If the game is 100 percent complete, you can select **Create Application**
    for the target platform. If the game is still in development, there is **Run Normally**,
    which will compile and run the game as if it were an application, and **Run in
    Debug Mode**, which runs the debugging tools.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建游戏时，有三种不同类型的编译可以进行。如果游戏已经完成了100%，您可以选择**创建应用程序**以用于目标平台。如果游戏仍在开发中，有**正常运行**，它将编译并运行游戏，就像它是一个应用程序一样，还有**调试模式运行**，它运行调试工具。
- en: Let's not wait any longer. Run the game by navigating to **Run** | **Run the
    Game**, or by pressing *F5*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不再等待。通过导航到**运行** | **运行游戏**，或者按下*F5*来运行游戏。
- en: If everything is working correctly, the player object should be able to move
    around the world using the arrow keys, but not be able to pass through any of
    the wall objects. However, there is something not quite right. The player object
    appears to be flickering due to it being animated. Let's fix this while taking
    a look at the Script Properties editor.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，玩家对象应该能够使用箭头键在世界中移动，但不能通过任何墙对象。然而，有一些地方不太对。玩家对象似乎在闪烁，因为它是动画的。让我们在查看脚本属性编辑器时修复这个问题。
- en: Introducing code with the Script Properties editor
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本属性编辑器引入代码
- en: 'GameMaker: Studio utilizes its own proprietary scripting language called **GameMaker
    Language** , otherwise known as **GML**. This language was developed to be very
    forgiving to the novice user, and utilizes some functionality you likely won''t
    find in other scripting languages. For example, GML will accept the standard expression
    `&&` to combine two comparisons, or alternatively the word `and`. GameMaker: Studio
    does a lot of hard work when it comes to creating games by giving the user a great
    set of functions, variables, and constants.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'GameMaker: Studio利用自己的专有脚本语言称为**GameMaker Language**，又称为**GML**。这种语言被开发成非常适合初学者使用，并利用了一些在其他脚本语言中可能找不到的功能。例如，GML将接受标准表达式`&&`来组合两个比较，或者替代地使用单词`and`。GameMaker:
    Studio通过提供一组出色的函数、变量和常量，在创建游戏时做了大量的工作。'
- en: '![Introducing code with the Script Properties editor](img/4100OT_01_13.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![使用脚本属性编辑器介绍代码](img/4100OT_01_13.jpg)'
- en: As previously stated, we want to stop the player object from animating. This
    is very easy to do using scripts.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们希望停止玩家对象的动画。使用脚本非常容易实现这一点。
- en: Create a new Script by navigating to **Resources** | **Create Script**. This
    will create a new Script in the Resource tree and open up the **Script Properties**
    editor.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建脚本**来创建一个新脚本。这将在资源树中创建一个新脚本，并打开**脚本属性**编辑器。
- en: Name this as `scr_Player_Create`. Throughout this book we will be naming most
    of our scripts with the name of the event at the end of the name. In this case
    we will be placing this code into a `Create` event.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`scr_Player_Create`。在本书中，我们将大部分脚本命名为事件名称的结尾。在这种情况下，我们将把这段代码放入一个`创建`事件中。
- en: 'To stop a Sprite from animating, all we need to do is set the playback speed
    of the Sprite to zero. On line **1**, type the following:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要停止精灵动画，我们只需要将精灵的播放速度设置为零。在第**1**行，输入以下内容：
- en: '[PRE0]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Close the Script by clicking on the check mark in the upper-left corner of the
    editor.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击编辑器左上角的复选标记来关闭脚本。
- en: In order for the script to run we need to attach it to an object.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使脚本运行，我们需要将其附加到一个对象上。
- en: Reopen the **Object Properties** editor for `obj_Player`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`obj_Player`的**对象属性**编辑器。
- en: Add a **Create** Event.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**创建**事件。
- en: Navigate to **Actions** | **Control**, and select and drag the Execute Script
    icon into the **Actions:** area.![Introducing code with the Script Properties
    editor](img/4100OT_01_38.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**操作** | **控制**，并选择并拖动执行脚本图标到**操作：**区域。![使用脚本属性编辑器介绍代码](img/4100OT_01_38.jpg)
- en: The Execute Script icon
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 执行脚本图标
- en: Select `scr_Player_Create` as the script to execute, and then click on **OK**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`scr_Player_Create`作为要执行的脚本，然后点击**确定**。
- en: We can now run the game, and we see that the player object is no longer animating.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行游戏，我们会发现玩家对象不再动画。
- en: Filling the scene with the Background Properties editor
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用背景属性编辑器填充场景
- en: 'Backgrounds are a special kind of art asset that come in two different types:
    background images and tilesets. Unlike Sprites, backgrounds never have any animation
    as a part of the art asset. **Background images** are mainly used as large backdrops
    of a room and are useful if you want the background to move. **Tilesets** are
    small slices of art that can be used to paint the background, are useful for creating
    large, unique worlds, and to keep the graphics cost computationally low.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 背景是一种特殊的艺术资源，有两种不同的类型：背景图片和瓷砖集。与精灵不同，背景从不作为艺术资源的一部分进行任何动画。**背景图片**主要用作房间的大背景，并且在需要背景移动时非常有用。**瓷砖集**是可以用来绘制背景的小艺术片段，非常适合创建大型、独特的世界，并且可以保持图形成本的计算低。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Use Background images if you want:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用背景图片：
- en: One large image in the background
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景中的一个大图像
- en: The background to move
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景移动
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Use Tilesets if you want:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用瓷砖集：
- en: Only a few art assets to create large worlds
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只需少量的艺术资源就可以创建大型世界
- en: To add unique details to the background
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为背景添加独特的细节
- en: '![Filling the scene with the Background Properties editor](img/4100OT_01_14.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![使用背景属性编辑器填充场景](img/4100OT_01_14.jpg)'
- en: 'For this simple example we will just create a static background. We will look
    more into tilesets in the next chapter:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的例子，我们将只创建一个静态背景。我们将在下一章更深入地了解瓷砖集：
- en: Create a new Background by navigating to **Resources** | **Create Background**.
    This will create a new background in the Resource tree and open up the **Background
    Properties** editor.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建背景**来创建一个新背景。这将在资源树中创建一个新背景，并打开**背景属性**编辑器。
- en: Name this as `bg_Ground`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`bg_Ground`。
- en: Click on **Load Background** and open `Chapter 1/Backgrounds/Ground.png`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**加载背景**，打开`Chapter 1/Backgrounds/Ground.png`。
- en: Then click on **OK**.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**确定**。
- en: We now have the art asset ready to go, we just need to place it into the room.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好艺术资源，只需要将其放置到房间中。
- en: Reopen `rm_GameArea`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`rm_GameArea`。
- en: Click on the `backgrounds` tab.![Filling the scene with the Background Properties
    editor](img/4100OT_01_15.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`背景`选项卡。![使用背景属性编辑器填充场景](img/4100OT_01_15.jpg)
- en: Each room allows up to eight backgrounds to be displayed simultaneously. These
    backgrounds can also be used as foreground elements. If no background is active,
    it will display a solid color.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 每个房间最多可以同时显示八个背景。这些背景也可以用作前景元素。如果没有激活背景，它将显示为纯色。
- en: Select **Background 0**, and then check the box for **Visible when room starts**.
    This has to be active in order to see the background during gameplay.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**背景 0**，然后勾选**游戏开始时可见**的复选框。这必须激活才能在游戏过程中看到背景。
- en: Select `bg_Ground` as the background to be displayed.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`bg_Ground`作为要显示的背景。
- en: Everything else can remain at their defaults. **Tile Hor.** and **Tile Vert.**
    should be checked and all other values should be set to `0`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他所有内容都可以保持默认。**水平平铺**和**垂直平铺**应该被选中，所有其他值应该设置为`0`。
- en: Close the room by clicking the check mark in the upper-left corner of the editor.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击编辑器左上角的复选标记来关闭房间。
- en: Let's run the game again and we can now see that we have a background. Things
    are definitely looking better, but something is missing. Let's get some sound
    into the game.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行游戏，现在我们可以看到我们有了一个背景。事情看起来确实更好了，但是缺少了一些东西。让我们给游戏加点声音。
- en: Bringing noise with the Sound Properties editor
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用声音属性编辑器带来噪音
- en: 'The Sound Properties editor is where you can bring in sounds to be used in
    your games. GameMaker allows you to bring in MP3 and WAV files only. There are
    two types of sounds that you can use:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 声音属性编辑器是您可以引入用于游戏的声音的地方。GameMaker只允许引入MP3和WAV文件。您可以使用两种类型的声音：
- en: Normal sounds
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常声音
- en: Background music
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景音乐
- en: Normal sounds are all the small sound effects that you hear, such as gunfire
    and footsteps. These should generally be WAV files. Background music is for the
    longer sounds such as the game music, but also things such as spoken dialog. This
    should be in MP3 format.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正常声音都是你听到的小声音效，比如枪声和脚步声。这些通常应该是WAV文件。背景音乐是指较长的声音，比如游戏音乐，还有一些像口语对话之类的东西。这些应该是MP3格式。
- en: 'When GameMaker: Studio exports the game audio for HTML5, all sounds will be
    converted to both MP3 and OGG format. This is due to the fact that different browsers
    use different audio file formats in their implementation of the HTML5 audio tag.
    Luckily for us, GameMaker: Studio automatically adds browser identification code
    into the game, so the game knows what files are being used.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '当GameMaker: Studio为HTML5导出游戏音频时，所有声音都将转换为MP3和OGG格式。这是因为不同的浏览器在实现HTML5音频标签时使用不同的音频文件格式。幸运的是，GameMaker:
    Studio会自动将浏览器识别代码添加到游戏中，所以游戏知道正在使用哪些文件。'
- en: '![Bringing noise with the Sound Properties editor](img/4100OT_01_16.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![用声音属性编辑器带来噪音](img/4100OT_01_16.jpg)'
- en: We are going to create two sounds for the game, some background music and a
    sound effect for a collectible object.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为游戏创建两种声音，一些背景音乐和一个可收集物品的音效。
- en: A little background music
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一点背景音乐
- en: Let's bring in some music to our game to help build some atmosphere.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的游戏引入一些音乐，以帮助营造一些氛围。
- en: Create a new Sound by navigating to **Resources** | **Create Sound**. This will
    create a new Sound in the Resource tree and open up the **Sound Properties** editor.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建声音**来创建一个新声音。这将在资源树中创建一个新声音，并打开**声音属性**编辑器。
- en: Name this as `snd_bgMusic`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`snd_bgMusic`。
- en: Load the `Chapter 1/Sounds/bgMusic.mp3` file. If you want to hear the music,
    just hit the play button. When you are done listening, hit the stop button.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Chapter 1/Sounds/bgMusic.mp3`文件。如果你想听音乐，只需点击播放按钮。听完后，点击停止按钮。
- en: Under **Kind** select **Background Music** as the type, and then click on **OK**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**种类**下选择**背景音乐**作为类型，然后点击**确定**。
- en: We will want to have the music start right at the start of the game. To do this
    we are going to create a **data object** that we will call the **Overlord** .
    Data objects are generally not meant to be seen in the game, so we do not need
    to assign it a Sprite.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望音乐在游戏开始时立即开始。为此，我们将创建一个名为**霸主**的**数据对象**。数据对象通常不会在游戏中显示，所以我们不需要为它分配一个精灵。
- en: Controlling the game with the Overlord
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用霸主控制游戏
- en: We will be using an Overlord object to watch over the game and control things,
    such as the music and win/lose condition.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个霸主对象来监视游戏并控制一些东西，比如音乐和胜利/失败条件。
- en: Create a new object and name it `obj_Overlord`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象，命名为`obj_Overlord`。
- en: Add an Event, and then navigate to **Other** | **Game Start**. This is a special
    function that will only be run when the game first starts.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件，然后导航到**其他** | **游戏开始**。这是一个特殊的函数，只有在游戏开始时才会运行。
- en: Navigate to **Actions** | **Main1**, and select and drag the Play Sound icon
    into the **Actions:** area.![Controlling the game with the Overlord](img/4100OT_01_41.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**操作** | **主1**，并选择并拖动播放声音图标到**操作：**区域。![用霸主控制游戏](img/4100OT_01_41.jpg)
- en: The Play Sound icon
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 播放声音图标
- en: Set the **sound:** field to `snd_bgMusic`, set **loop:** to `true`, and then
    click on **OK**.![Controlling the game with the Overlord](img/4100OT_01_17.jpg)
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**声音：**字段设置为`snd_bgMusic`，将**循环：**设置为`true`，然后点击**确定**。![用霸主控制游戏](img/4100OT_01_17.jpg)
- en: 'Before we test this out, we need to make sure the Overlord is in the world.
    When you place it into a room, it will be represented by a little blue circle
    icon, as shown in the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们测试之前，我们需要确保霸主在世界中。当你把它放在一个房间里时，它将被一个小蓝色圆圈图标代表，如下面的截图所示：
- en: '![Controlling the game with the Overlord](img/4100OT_01_42.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![用霸主控制游戏](img/4100OT_01_42.jpg)'
- en: Reopen `rm_GameArea`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`rm_GameArea`。
- en: Select `obj_Overlord` from the **objects** tab and place a single instance in
    the room.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象**选项卡中选择`obj_Overlord`，并将一个实例放在房间里。
- en: Let's run the game and listen. Music should start playing right away and loop
    infinitely. Let's move on to creating a collectible.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行游戏并听一下。音乐应该立即开始播放并无限循环。让我们继续创建一个可收集的物品。
- en: The collectible
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可收集的物品
- en: We are going to create an object that the player can collect during the game.
    When the player collides with it, the sound will be played once.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个玩家在游戏中可以收集的物品。当玩家与其碰撞时，声音将被播放一次。
- en: Create a new Sound and name it `snd_Collect`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新声音，命名为`snd_Collect`。
- en: Load the `Chapter 1/Sounds/Collect.wav` file and set it to **Normal Sound**,
    and then click on **OK**.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Chapter 1/Sounds/Collect.wav`文件，并将其设置为**正常声音**，然后点击**确定**。
- en: We haven't created an Object for this, nor have we brought in a Sprite. Now
    is a chance for you to test your memory. We will only quickly go over what we
    need.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有为此创建一个对象，也没有引入一个精灵。现在是你测试记忆的机会。我们只会快速地复习一下我们需要的东西。
- en: Create a new Sprite and name it `spr_Collect`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新精灵，命名为`spr_Collect`。
- en: With **Remove Background** and **Smooth Edges** selected, load the file `Chapter
    1/Sprites/Collect.png` and center its origin.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**删除背景**和**平滑边缘**，加载文件`Chapter 1/Sprites/Collect.png`并将其中心设置为原点。
- en: Create a new Object and name it `obj_Collect`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象，命名为`obj_Collect`。
- en: Assign `spr_Collect` as its **Sprite**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`spr_Collect`分配为其**精灵**。
- en: Add a **Collision Event** with `obj_Player`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个与`obj_Player`的**碰撞事件**。
- en: Navigate to **Actions** | **Main1**, and drag the Play Sound icon into the **Actions:**
    area.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**操作** | **Main1**，并将播放声音图标拖放到**操作：**区域。
- en: Set the `sound:` field to `snd_Collect` and set **loop:** to `false`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`声音：`字段设置为`snd_Collect`，并将**循环：**设置为`false`。
- en: Now when the player collides with the object it will play the sound once. That's
    a good start, but why don't we give the player a bit more of a reward?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当玩家与对象发生碰撞时，它将播放一次声音。这是一个良好的开始，但为什么我们不给玩家更多的奖励呢？
- en: Navigate to **Actions** | **Score**, and drag the Set Score icon into the **Actions:**
    area.![The collectible](img/4100OT_01_43.jpg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**操作** | **分数**，并将设置分数图标拖放到**操作：**区域。![可收集物](img/4100OT_01_43.jpg)
- en: The Set Score icon
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 设置分数图标
- en: As can be seen in the next screenshot, set the new **score:** field to `50`,
    check the box for **Relative**, and then click on **OK**. This will add 50 points
    to our score each time the object is collected. **Relative** makes the score add
    to the previous score.![The collectible](img/4100OT_01_18.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，将新的**分数：**字段设置为`50`，勾选**相对**框，然后点击**确定**。这将在每次收集对象时为我们的分数增加50分。**相对**使得分数增加到先前的分数。![可收集物](img/4100OT_01_18.jpg)
- en: Now we have something worth collecting. Only one issue remains and that is we
    get the points and sound just for touching the object. We can't let that go on
    forever!
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有值得收集的东西。只剩下一个问题，那就是我们只是碰到对象就得到了分数和声音。我们不能让这种情况永远持续下去！
- en: Navigate to **Actions** | **Main1**, and drag the Destroy Instance icon into
    the **Actions:** area. This action will remove the instance from the world. Leave
    the values as they are, and click on **OK**.![The collectible](img/4100OT_01_44.jpg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**操作** | **Main1**，并将销毁实例图标拖放到**操作：**区域。此操作将从世界中移除实例。保持值不变，然后点击**确定**。![可收集物](img/4100OT_01_44.jpg)
- en: The Destroy Instance icon
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 销毁实例图标
- en: We are done with this object, and if built correctly, it should look like the
    following screenshot. Click on **OK**.![The collectible](img/4100OT_01_19.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了这个对象，如果构建正确，它应该看起来像下面的截图。点击**确定**。![可收集物](img/4100OT_01_19.jpg)
- en: Let's place a couple of these collectibles into the room and run the game. We
    should be able to move the player around the world and collide with the collectibles.
    We should hear a sound play and the object disappears. But where is our score?
    Well, in order to display it, we need to bring in some text.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在房间里放置一些这些可收集物，并运行游戏。我们应该能够在世界中移动玩家并与可收集物发生碰撞。我们应该听到声音播放并且对象消失。但是，我们的分数在哪里呢？嗯，在显示它之前，我们需要引入一些文本。
- en: Writing text and the Font Properties editor
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写文本和字体属性编辑器
- en: You can import fonts to use them as text in your games. These fonts need to
    be installed on your machine in order to use them during development. Each font
    resource is set to a specific font type, size, and whether it is bold/italicized
    or not. If you want a slight variation, such as a font that is two points larger,
    than a separate font resource must be created. This is due to the fact that on
    export, GameMaker will convert the font into an image that will allow it to be
    used without the font being pre-installed on the user's machine.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以导入字体以在游戏中使用它们作为文本。这些字体需要安装在您的机器上，以便在开发过程中使用。每个字体资源都设置为特定的字体类型、大小，以及是否为粗体/斜体。如果您想要稍微变化，比如一个字体大两个点，那么必须创建一个单独的字体资源。这是因为在导出时，GameMaker将把字体转换为图像，这样就可以在用户的机器上使用而不需要预先安装字体。
- en: '![Writing text and the Font Properties editor](img/4100OT_01_20.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![编写文本和字体属性编辑器](img/4100OT_01_20.jpg)'
- en: We are going to create a font that will be used to display the score of the
    game.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个用于显示游戏分数的字体。
- en: Create a new Font by navigating to **Resources** | **Create Font**. This will
    create a new Font in the Resource tree and open up the **Font Properties** editor.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建字体**，创建一个新的字体。这将在资源树中创建一个新的字体，并打开**字体属性**编辑器。
- en: Name this `fnt_Impact`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`fnt_Impact`。
- en: From the **Font** drop-down menu, select **Impact**. This is a default Windows
    font.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**字体**下拉菜单中选择**Impact**。这是一个默认的Windows字体。
- en: Set the **Size** to `16`. Then click on **OK**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**大小**设置为`16`。然后点击**确定**。
- en: We now have a font that we can use in our game. For this, we are going to have
    the Overlord object draw the game score at the top of the screen. We will also
    make the text white and align it to the center.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可以在游戏中使用的字体。为此，我们将让Overlord对象在屏幕顶部绘制游戏分数。我们还将使文本为白色，并将其居中对齐。
- en: Reopen `obj_Overlord`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`obj_Overlord`。
- en: Add a Draw GUI event by navigating to **Draw** | **Draw GUI**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**绘制** | **绘制GUI**，添加一个绘制GUI事件。
- en: Note
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Draw events occur at the very end of each step after everything has been calculated
    and need to be displayed on screen. The Draw GUI event is meant for the heads-up
    display and will always render on top of all other game graphics.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制事件发生在每个步骤的最后，在所有计算完成并需要在屏幕上显示之后。绘制GUI事件用于显示游戏中的悬浮显示，并始终呈现在所有其他游戏图形的顶部。
- en: Navigate to **Actions** | **Draw**, and drag the Set Color icon into the **Actions:**
    area. This will open a dialog box where you can set a color.![Writing text and
    the Font Properties editor](img/4100OT_01_46.jpg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**操作** | **绘制**，并将设置颜色图标拖放到**操作：**区域。这将打开一个对话框，您可以在其中设置颜色。![编写文本和字体属性编辑器](img/4100OT_01_46.jpg)
- en: The Set Color icon
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 设置颜色图标
- en: We want to set the **color** to teal. In the color palette that pops up, select
    the teal color found on the bottom row, fifth column from the left. Click on **OK**.![Writing
    text and the Font Properties editor](img/4100OT_01_21.jpg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要将**颜色**设置为青色。在弹出的颜色调色板中，选择左起第五列底部的青色。点击**确定**。![编写文本和字体属性编辑器](img/4100OT_01_21.jpg)
- en: 'Navigate to **Actions** | **Draw**, and drag the Set Font icon into the **Actions:**
    area. This will open up a dialog box with two parameters: the font to use and
    how it should be aligned.![Writing text and the Font Properties editor](img/4100OT_01_47.jpg)'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**动作** | **绘制**，并将设置字体图标拖放到**动作：**区域。这将打开一个带有两个参数的对话框：要使用的字体以及它应该如何对齐。![编写文本和字体属性编辑器](img/4100OT_01_47.jpg)
- en: The Set Font icon
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 设置字体图标
- en: Set the **Font:** field to `fnt_Impact` and align it to `center`. Click on **OK**.![Writing
    text and the Font Properties editor](img/4100OT_01_22.jpg)
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**字体：**字段设置为`fnt_Impact`并将其对齐到`中心`。点击**确定**。![编写文本和字体属性编辑器](img/4100OT_01_22.jpg)
- en: 'Finally, navigate to **Actions** | **Score**, and drag the Draw Score icon
    into the **Actions:** area. This will open up a dialog box with three parameters:
    the x and y coordinates, and an optional caption that can be placed in front of
    the actual score.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导航到**动作** | **得分**，并将绘制得分图标拖放到**动作：**区域。这将打开一个带有三个参数的对话框：x和y坐标，以及一个可选的标题，可以放在实际得分前面。
- en: Set the **x:** field to `320`, the **y:** field can remain at `0`, and remove
    `Score:` from the **caption:** field, leaving it blank as can be seen in the following
    screenshot. Click on **OK**.![Writing text and the Font Properties editor](img/4100OT_01_23.jpg)
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**x：**字段设置为`320`，**y：**字段可以保持为`0`，并从**标题：**字段中删除`得分：`，使其为空，如下面的屏幕截图所示。点击**确定**。![编写文本和字体属性编辑器](img/4100OT_01_23.jpg)
- en: We can now run the game and the score will now be displayed at the top of the
    screen in the center. When you collide with the collectibles now, you should see
    the score increase.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行游戏，得分现在将显示在屏幕顶部的中心位置。现在，当您与可收集物品碰撞时，您应该看到得分增加。
- en: Creating complex movements with the Path Properties editor
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用路径属性编辑器创建复杂移动
- en: Paths are the best way to create complex movement patterns for objects. A path
    is made up of a series of points in which an object can move along. The transition
    between points can be straight, meaning the object will hit each point precisely,
    or curved, an interpolation between three points. The path can either be an open
    line or a closed loop. The following screenshot will be used as the reference
    image throughout this section.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 路径是为对象创建复杂移动模式的最佳方式。路径由一系列点组成，对象可以沿着这些点移动。点之间的过渡可以是直线的，这意味着对象将精确地到达每个点，也可以是曲线的，是三个点之间的插值。路径可以是开放线或闭合循环。以下屏幕截图将在本节中用作参考图像。
- en: '![Creating complex movements with the Path Properties editor](img/4100OT_01_24.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![使用路径属性编辑器创建复杂移动](img/4100OT_01_24.jpg)'
- en: We are going to create a simple enemy that will follow a path around the room.
    If the player collides with the enemy, the player will be destroyed. Let's start
    by creating the path.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的敌人，它将沿着房间周围的路径移动。如果玩家与敌人碰撞，玩家将被销毁。让我们从创建路径开始。
- en: Create a new Path by navigating to **Resources** | **Create Path**. This will
    create a new Path in the Resource tree and open up the **Path Properties** editor.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建路径**来创建一个新路径。这将在资源树中创建一个新路径，并打开**路径属性**编辑器。
- en: Name this as `pth_Enemy`.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`pth_Enemy`。
- en: At the end of the editor toolbar we can set what room is displayed. This is
    very useful for creating accurate paths on a per room basis. Set this to `rm_GameArea`.![Creating
    complex movements with the Path Properties editor](img/4100OT_01_25.jpg)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器工具栏的末尾，我们可以设置显示哪个房间。这对于按房间基础创建准确路径非常有用。将其设置为`rm_GameArea`。![使用路径属性编辑器创建复杂移动](img/4100OT_01_25.jpg)
- en: To add a point for the path you can just left-click anywhere on the map. The
    very first point will be represented by a green square and all the points following
    will be circles.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要为路径添加一个点，您可以在地图的任何位置单击左键。第一个点将由绿色方块表示，其后的所有点将是圆圈。
- en: Place the first point at `64`, `64` of the map. If you make a mistake you can
    always drag the point to the proper position, or you can manually set the X and
    Y values.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个点放在地图的`64`，`64`处。如果出现错误，您可以随时将点拖动到正确的位置，或者您可以手动设置X和Y值。
- en: To this path we are going to add five more points as seen in the reference image.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这条路径上，我们将添加另外五个点，如参考图像所示。
- en: We will leave all the other settings at their defaults, so click on **OK**.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将保留所有其他设置为默认值，所以点击**确定**。
- en: The path is ready for use, now we just need to create an enemy to attach the
    path to. This enemy is going to simply move along the path and if it collides
    with the player, it will restart the game.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 路径已准备就绪，现在我们只需要创建一个敌人并将路径附加到它。这个敌人将简单地沿着路径移动，如果它与玩家碰撞，它将重新开始游戏。
- en: Create a new Sprite and name it `spr_Enemy`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新精灵并命名为`spr_Enemy`。
- en: With **Remove Background** and **Smooth Edges** selected, load `Chapter 1/Sprites/Enemy.png`
    and center the origin.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**删除背景**和**平滑边缘**，加载`Chapter 1/Sprites/Enemy.png`并将原点居中。
- en: Create a new Object and name it `obj_Enemy`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象并命名为`obj_Enemy`。
- en: Add a **Create** Event, navigate to **Actions** | **Move**, and drag the Set
    Path icon into the **Actions:** area. This will open the Set Path options dialog
    box.![Creating complex movements with the Path Properties editor](img/4100OT_01_49.jpg)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**创建**事件，导航到**动作** | **移动**，并将设置路径图标拖放到**动作：**区域。这将打开设置路径选项对话框。![使用路径属性编辑器创建复杂移动](img/4100OT_01_49.jpg)
- en: The Set Path icon
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 设置路径图标
- en: '![Creating complex movements with the Path Properties editor](img/4100OT_01_26.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![使用路径属性编辑器创建复杂移动](img/4100OT_01_26.jpg)'
- en: Set **path:** to `pth_Enemy`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**路径：**设置为`pth_Enemy`。
- en: Set the **speed:** field to `4`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**速度：**字段设置为`4`。
- en: The next option determines what should happen when the instance reaches the
    end of the path. There are options to **stop**, **continue on from the start**
    (for open paths), **continue from here** (for closed paths), and **reverse** directions.
    Set **at end:** to **continue from here**.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个选项确定实例到达路径末端时应该发生什么。有选项可以**停止**，**从头继续**（对于开放路径），**从这里继续**（对于闭合路径），和**反向**方向。将**在末端：**设置为**从这里继续**。
- en: The **relative:** option here determines whether the path starts where the instance
    is (relative), or whether the instance starts at the path's first point (absolute).
    As we built it to fit the room, set **relative:** to **absolute**. Then click
    on **OK**.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里的**相对:**选项确定路径是从实例开始（相对）还是实例从路径的第一个点开始（绝对）。由于我们建立它来适应房间，所以将**相对:**设置为**绝对**。然后点击**确定**。
- en: We now have an enemy ready to follow a path, but it isn't really a threat to
    the player. Let's put a collision event on the enemy and make it restart the game
    on contact.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个准备好跟随路径的敌人，但它对玩家并不构成威胁。让我们在敌人上添加一个碰撞事件，并使其在接触时重新开始游戏。
- en: Add a **Collision** Event with `obj_Player`, navigate to **Actions** | **Main2**,
    and drag the Restart Game icon into the **Actions:** area.![Creating complex movements
    with the Path Properties editor](img/4100OT_01_50.jpg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个与`obj_Player`的**碰撞**事件，导航到**动作** | **主要2**，并将重新开始游戏图标拖放到**动作:**区域。![使用路径属性编辑器创建复杂的移动](img/4100OT_01_50.jpg)
- en: The Restart Game icon
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 重新开始游戏图标
- en: The enemy is now complete, so click on **OK** to close it.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 敌人现在已经完成，所以点击**确定**关闭它。
- en: Place a single instance of the enemy anywhere in the room. It doesn't matter
    exactly where, as it will relocate itself to the proper location when the game
    runs.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在房间中的任何位置放置一个敌人的单个实例。确切的位置并不重要，因为游戏运行时它会重新定位到正确的位置。
- en: Save the game and run it. We should see the enemy moving along the path around
    the room. If the player object collides with it, the game will restart.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏并运行。我们应该看到敌人沿着房间周围的路径移动。如果玩家对象与其发生碰撞，游戏将重新开始。
- en: We've now got some risk in the game, but not enough reward. Let's fix that,
    shall we?
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在游戏中有一些风险，但奖励还不够。让我们来解决这个问题，好吗？
- en: Using the Time Line Properties editor to spawn collectibles
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用时间轴属性编辑器生成可收集物品
- en: Time Line is an advanced time tracking system that allows finite control of
    things that happen during gameplay. A Time Line is comprised of a list of moments.
    Each moment represents a number of steps from when the Time Line started.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴是一个高级的时间跟踪系统，允许对游戏过程中发生的事情进行有限控制。时间轴由一系列时刻组成。每个时刻代表时间轴开始后的步数。
- en: '![Using the Time Line Properties editor to spawn collectibles](img/4100OT_01_27.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![使用时间轴属性编辑器生成可收集物品](img/4100OT_01_27.jpg)'
- en: While a Time Line can be used for almost anything, one of the most common uses
    for one is to spawn instances. In this game, we are going to use it to spawn our
    Collectible objects, so that the player has something to chase after.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴几乎可以用于任何事情，其中最常见的用途之一是生成实例。在这个游戏中，我们将使用它来生成我们的可收集物品，以便玩家有东西可以追逐。
- en: Create a new Time Line by navigating to **Resources** | **Create Time Line**.
    This will create a new Time Line in the Resource tree and open up the **Time Line
    Properties** editor.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资源** | **创建时间轴**来创建一个新的时间轴。这将在资源树中创建一个新的时间轴，并打开**时间轴属性**编辑器。
- en: Name this as `tm_Spawn_Collectibles`.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`tm_Spawn_Collectibles`。
- en: Click on the **Add** button and set **Steps** to `60`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮，并将**步数**设置为`60`。
- en: We are going to make these collectibles move by applying a velocity to them.
    Navigate to **Actions** | **Main1**, and drag the Create Moving icon into the
    **Actions:** area.![Using the Time Line Properties editor to spawn collectibles](img/4100OT_01_52.jpg)
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过给它们施加速度来使这些可收集物品移动。导航到**动作** | **主要1**，并将创建移动图标拖放到**动作:**区域。![使用时间轴属性编辑器生成可收集物品](img/4100OT_01_52.jpg)
- en: The Create Moving icon
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 创建移动图标
- en: Set the object to `obj_Collect`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对象设置为`obj_Collect`。
- en: We want the spawning to occur offscreen, so that the player doesn't see it blink
    into existence. We will make this Collectible move horizontally, so we will start
    from the left of the game area. Set the **x:** field to `-64`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望生成发生在屏幕外，这样玩家就看不到它突然出现。我们将使这个可收集物品水平移动，所以我们将从游戏区域的左侧开始。将**x:**字段设置为`-64`。
- en: We don't want the collectibles always spawning in the exact same location, so
    we are going to add a random element to it. We will create the instance at a random
    vertical position between 48 pixels from the top and 48 pixels from the bottom
    of the screen. Set the **y:** field to `random(394) + 48`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不希望可收集物品总是在完全相同的位置生成，所以我们要为其添加一个随机元素。我们将在屏幕顶部和底部之间的随机垂直位置创建实例。将**y:**字段设置为`random(394)
    + 48`。
- en: Give it a **speed** of `4`, and set the **direction:** field to `0`. It should
    look like the following screenshot. Click on **OK**.![Using the Time Line Properties
    editor to spawn collectibles](img/4100OT_01_28.jpg)
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它一个**速度**为`4`，并将**方向:**字段设置为`0`。它应该看起来像下面的截图。点击**确定**。![使用时间轴属性编辑器生成可收集物品](img/4100OT_01_28.jpg)
- en: Add another **Moment** at `120` and repeat the previous steps except this time
    make it vertical. To do this, the **x:** field should be set to `random(546) +
    48`, the **y:** field should be `-64`, the **speed:** field should be `4`, and
    the **direction:** field should be `270`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`120`处添加另一个**时刻**，并重复上述步骤，不过这次是垂直的。为此，**x:**字段应设置为`random(546) + 48`，**y:**字段应为`-64`，**速度:**字段应为`4`，**方向:**字段应为`270`。
- en: We now have a Time Line that will spawn a new moving Collectible every two seconds.
    However, we need to attach this to an object so let's apply this to the `obj_Overlord`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个时间轴，每两秒钟就会生成一个新的可移动的可收集物品。但是，我们需要将其附加到一个对象上，所以让我们将其应用到`obj_Overlord`上。
- en: Reopen `obj_Overlord`.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`obj_Overlord`。
- en: In the **Game Start** Event that already exists, drag the Set Time Line icon
    into the **Actions:** area by navigating to **Actions** | **Main2**.![Using the
    Time Line Properties editor to spawn collectibles](img/4100OT_01_53.jpg)
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在已经存在的**游戏开始**事件中，通过导航到**动作** | **主要2**，将设置时间轴图标拖放到**动作:**区域。![使用时间轴属性编辑器生成可收集物品](img/4100OT_01_53.jpg)
- en: The Set Time Line icon
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 设置时间轴图标
- en: Set the **time line:** field to `tm_Spawn_Collectibles`.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**时间轴:**字段设置为`tm_Spawn_Collectibles`。
- en: Leave **position:** at `0`; this will start it from the beginning.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**位置:**保留为`0`；这将从开始位置开始。
- en: Set **start:** to **Start Immediately**.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**开始:**设置为**立即开始**。
- en: We want it to repeat itself infinitely, so set **loop:** to `Loop`.![Using the
    Time Line Properties editor to spawn collectibles](img/4100OT_01_29.jpg)
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望它无限重复，所以将**循环：**设置为`Loop`。![使用时间轴属性编辑器生成可收集物品](img/4100OT_01_29.jpg)
- en: There you have it! Run the game and you should see the collectibles start to
    spawn after two seconds and continue to be created forever. As you can see from
    the following screenshot, our game is complete, but there is still one component
    we need to take a look at.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！运行游戏，您应该看到可收集物品在两秒后开始生成，并将继续无限地生成。正如您从下一张截图中看到的，我们的游戏已经完成，但还有一个组件我们需要看一看。
- en: '![Using the Time Line Properties editor to spawn collectibles](img/4100OT_01_55.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![使用时间轴属性编辑器生成可收集物品](img/4100OT_01_55.jpg)'
- en: Tools for debugging your games
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试游戏的工具
- en: 'No matter how experienced you are at scripting and making games, mistakes will
    always be made. Sometimes it may be a typo or a missing variable, and in this
    case GameMaker: Studio will catch this and display a code error dialog. Other
    times, the game may not do what you are expecting it to do, such as passing through
    a wall when you should not. In this case, there is nothing technically wrong with
    the code, it is just constructed improperly. Tracking down these bugs can be very
    tedious and possibly impossible if it were not for debugging tools. In order to
    use these tools, the game must be run in the debug mode, which you can access
    by clicking on the **Run Debug Mode** button in the toolbar, or by going into
    the Menu and navigating to **Run** | **Run Debug Mode**.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '无论您在脚本编写和制作游戏方面有多么经验，错误总是会发生。有时可能是拼写错误或缺少变量，在这种情况下，GameMaker: Studio会捕捉到并显示代码错误对话框。其他时候，游戏可能不会按照您的期望进行，比如在不应该通过墙壁时却通过了。在这种情况下，代码在技术上没有问题，只是构造不当。追踪这些错误可能非常乏味，如果没有调试工具，可能会是不可能的。为了使用这些工具，游戏必须在调试模式下运行，您可以通过单击工具栏中的**运行调试模式**按钮或转到菜单并导航到**运行**
    | **运行调试模式**来访问。'
- en: During the debug Mode, we can utilize **Debug Messages** to help us understand
    what is occurring in the game. These messages can only be implemented through
    the `show_debug_message()` function when scripting (there is no drag-and-drop
    option) and will appear in a Console window whenever the function is executed.
    You can use this to pass a string or display a variable, so you can compare the
    result with what you expect the result should be. This is your first line of defense
    when trying to solve a problem.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下，我们可以利用**调试消息**来帮助我们理解游戏中发生的情况。这些消息只能通过脚本编写时使用`show_debug_message()`函数实现（没有拖放选项），并且每当执行该函数时，它们将出现在控制台窗口中。您可以使用这个来传递一个字符串或显示一个变量，以便您可以将结果与您期望的结果进行比较。这是您在尝试解决问题时的第一道防线。
- en: Using the HTML5 DEBUG console
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTML5调试控制台
- en: 'The first console we should use is GameMaker: Studio''s DEBUG console for HTML5\.
    When the game is targeting HTML5 and run in the debug mode, a pop-up window will
    be created along with the game and contains the debug output where all the debug
    messages will appear, along with a list of the instance and their basic data information.
    Let''s test this console out!'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '我们应该使用的第一个控制台是GameMaker: Studio的HTML5调试控制台。当游戏以HTML5为目标并在调试模式下运行时，将会创建一个弹出窗口，其中包含调试输出，所有调试消息都将显示在其中，以及实例列表和它们的基本数据信息。让我们测试一下这个控制台！'
- en: 'We will start by adding the traditional `Hello World` debug message on the
    creation of the player. Reopen `scr_Player_Create` and add the following code
    at the end of the script:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从在玩家创建时添加传统的“Hello World”调试消息开始。重新打开`scr_Player_Create`并在脚本的末尾添加以下代码：
- en: '[PRE1]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件接收文件。
- en: We start by creating a variable to hold the string. While we can directly pass
    a string through the `show_debug_message` function without the variable, we will
    be using this variable in a later debug test.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个变量来保存字符串。虽然我们可以直接通过`show_debug_message`函数传递字符串而不使用变量，但我们将在以后的调试测试中使用这个变量。
- en: As this script is already attached to our Player's Create event, we can just
    go ahead and run the game. Click on the Run Debug Mode icon.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于此脚本已经附加到我们的玩家创建事件，我们可以直接运行游戏。单击运行调试模式图标。
- en: When the game starts in the browser, a second window will pop up with the **DEBUG
    console** as seen in the next screenshot. If you do not see this window, check
    to ensure the browser allows pop ups. Scroll down to the bottom of the **Debug
    Output** column. Here you should see the debug message `Hello World`. This indicates
    that our code was successfully executed. If we didn't see it as expected, then
    we would have an idea of where the game is having issues.![Using the HTML5 DEBUG
    console](img/4100OT_01_30.jpg)
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当游戏在浏览器中启动时，将会弹出一个带有**调试控制台**的第二个窗口，如下一张截图所示。如果您没有看到此窗口，请检查浏览器是否允许弹出窗口。滚动到**调试输出**列的底部。在这里，您应该看到调试消息`Hello
    World`。这表明我们的代码已成功执行。如果我们没有如预期看到它，那么我们就会知道游戏出了问题的地方。![使用HTML5调试控制台](img/4100OT_01_30.jpg)
- en: We can also see all the properties of each individual instance, represented
    by their instance number, in the game including the current position in the room,
    the sprite it is displaying and more. Click on any one of the numbers seen in
    the **Instances** column, and take a look at its properties in the **InstanceData**
    column.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以看到游戏中每个实例的所有属性，包括它们的实例编号，当前在房间中的位置，它正在显示的精灵等。单击**实例**列中的任何一个数字，然后查看**实例数据**列中的属性。
- en: Click on the **Pause/Resume** button. This allows us to pause the game, which
    is useful if you have lots of debug messages flooding the console, and you want
    to take time to see what is happening.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**暂停/恢复**按钮。这样我们就可以暂停游戏，如果你有很多调试消息涌入控制台，并且想要花时间看看发生了什么，这是很有用的。
- en: Finally, we can click on the **Clear Console** button to remove everything from
    the **Debug Output** column.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以点击**清除控制台**按钮，从**调试输出**列中删除所有内容。
- en: Congratulations! You can now start debugging your scripts. While you will be
    using `show_debug_message` a fair amount of time during a game's development,
    it is important to keep the amount of active messages to a minimum. It doesn't
    make sense to have so many debug messages occurring that you can't see what is
    happening!
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在你可以开始调试你的脚本了。虽然在游戏开发过程中你会经常使用`show_debug_message`，但是保持活跃消息的数量最少是很重要的。有太多调试消息发生，以至于你看不到发生了什么是没有意义的！
- en: Using the Windows version debugger
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Windows版本调试器
- en: 'While you can solve a large portion of your issues with debug messages, there
    are times when you will need more finite detail into what is happening in the
    game. GameMaker: Studio has a more advanced debugger that only runs if the game
    is being targeted for a Windows build. We would be remiss if we didn''t at least
    have a cursory glance at this wonderful tool.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然你可以通过调试消息解决大部分问题，但有时你需要更详细的了解游戏中发生了什么。GameMaker: Studio有一个更高级的调试器，只有在游戏被定位为Windows版本时才会运行。如果我们不至少粗略地看一下这个精彩的工具，那就不够意思了。'
- en: Change the **Target** to `Windows` and run the game in the debug mode. When
    the game opens up, the **GameMaker Debugger** will be displayed in a separate
    window, as shown in the following screenshot:![Using the Windows version debugger](img/4100OT_01_31.jpg)
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**目标**更改为`Windows`，并以调试模式运行游戏。游戏打开时，**GameMaker调试器**将显示在一个单独的窗口中，如下图所示：![使用Windows版本调试器](img/4100OT_01_31.jpg)
- en: Some basic information is displayed immediately, such as how it is performing,
    by looking at **Room Speed:** (steps per second) and frames per second (**FPS:**).
    If you move your mouse cursor over the instances in your game, you will notice
    that the **mouse id:** will change. This ID is the unique identifier for that
    specific instance and will come in very handy.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 一些基本信息会立即显示出来，比如它的表现如何，通过查看**房间速度：**（每秒步数）和每秒帧数（**FPS：**）。如果你把鼠标光标移到游戏中的实例上，你会注意到**鼠标id：**会改变。这个ID是该特定实例的唯一标识符，非常方便。
- en: The **GameMaker Debugger** window has many more options available for debugging
    the game. The **Run** menu not only allows us to pause the game, but we can also
    step forward one step at a time. The **Watch** menu allows you to track specific
    expressions, such as function calls or properties. The **Tools** menu gives access
    to debug messaging as we would expect, but can also display all the global variables,
    the per-instance variables, and a list of all the instances currently in existence.
    Let's take a look at what information the instance has in this Console.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**GameMaker调试器**窗口有更多选项可用于调试游戏。**运行**菜单不仅允许我们暂停游戏，还可以一步一步地向前走。**监视**菜单允许您跟踪特定表达式，比如函数调用或属性。**工具**菜单不仅可以访问调试消息，还可以显示所有全局变量、每个实例的变量，以及当前存在的所有实例的列表。让我们看看这个控制台中实例有什么信息。'
- en: Navigate to **Tools** | **Show Instances**. This will open a window that displays
    all the instances in the game.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **显示实例**。这将打开一个窗口，显示游戏中的所有实例。
- en: Scroll down the list until you find `obj_Player`. Double-click on it so we can
    see all of its properties. Much like the HTML5 DEBUG console, we can see where
    it is in the world and what Sprite it has (by Sprite index number). However, if
    you scroll down the list there are many more properties. In fact, if we look at
    the bottom of the list we can see the `myText` variable. That's awesome!
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动列表，直到找到`obj_Player`。双击它，这样我们就可以看到它的所有属性。就像HTML5调试控制台一样，我们可以看到它在世界上的位置以及它有哪个精灵（通过精灵索引号）。然而，如果你滚动列表，还有许多其他属性。事实上，如果我们看列表底部，我们可以看到`myText`变量。太棒了！
- en: Taking a look at the JavaScript code
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看JavaScript代码
- en: 'The last thing we will take a look at is the compiled JavaScript code. All
    modern browsers, such as Mozilla Firefox, Microsoft Internet Explorer 9.0, and
    Google Chrome come with built-in debug consoles that allow anyone to look at the
    source code of any website, and even affect what is being displayed on your local
    screen. That''s right. Everyone can see the code for the game. While that might
    scare you, fear not! When GameMaker: Studio exports a game or it is run normally,
    it obfuscates the code making it very difficult to decipher. When run in the debug
    mode on the other hand, it does not do any obfuscation other than the engine itself.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '我们要看的最后一件事是编译后的JavaScript代码。所有现代浏览器，比如Mozilla Firefox、Microsoft Internet Explorer
    9.0和Google Chrome都带有内置的调试控制台，允许任何人查看任何网站的源代码，甚至影响本地屏幕上显示的内容。没错。每个人都可以看到游戏的代码。虽然这可能吓到你，但不用担心！当GameMaker:
    Studio导出游戏或正常运行时，它会对代码进行混淆，使其非常难以解读。另一方面，在调试模式下运行时，除了引擎本身，它不会进行任何混淆。'
- en: Let's take a quick look at what this code looks like. We will start with the
    debug version so we can see what it would look like without obfuscation. For this
    example, we will use Chrome as it has the most robust debug console.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下这段代码是什么样子的。我们将从调试版本开始，这样我们就可以看到没有混淆时它是什么样子的。在这个例子中，我们将使用Chrome，因为它有最强大的调试控制台。
- en: With the **Target** platform set to `HTML5`, run the game in the debug mode.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**目标**平台设置为`HTML5`，以调试模式运行游戏。
- en: In the browser window in the area below the game, right-click and select **Inspect
    Element**. This will open **Developer Tools** for Chrome.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏下方的浏览器窗口中，右键单击并选择**检查元素**。这将为Chrome打开**开发者工具**。
- en: Select the **Sources** tab, and in the upper-left corner click on the little
    icon called **Show Navigator**.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**源代码**选项卡，在左上角点击名为**显示导航器**的小图标。
- en: In the Navigator there is a directory tree. Open the folders until you find
    the `html5` folder. Inside this folder is the game. Click on the game and we should
    see all the code as can be seen in the next screenshot. If we scroll through the
    code we can clearly see the scripts we have created, properties of objects, and
    so on.![Taking a look at the JavaScript code](img/4100OT_01_56.jpg)
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器中有一个目录树。打开文件夹，直到找到`html5`文件夹。在这个文件夹里是游戏。点击游戏，我们应该看到所有的代码，就像下一个屏幕截图中所看到的那样。如果我们浏览代码，我们可以清楚地看到我们创建的脚本，对象的属性等。![查看JavaScript代码](img/4100OT_01_56.jpg)
- en: Let's now take a look at the obfuscated version. Close down the browser tab
    and then run the game in normal mode. Repeat the same process and take a look
    at the code. It should look like the next screenshot. We can still read some bits
    and pieces, but none of it makes any sense. You can feel fairly secure that few
    people will want to mess with this.![Taking a look at the JavaScript code](img/4100OT_01_57.jpg)
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们看看混淆版本。关闭浏览器标签，然后以正常模式运行游戏。重复相同的过程并查看代码。它应该看起来像下一个屏幕截图。我们仍然可以读取一些片段，但其中没有任何意义。您可以相当确信，很少有人会想要干预这个。![查看JavaScript代码](img/4100OT_01_57.jpg)
- en: Summary
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Well, there you have it. In the very first chapter of this book you have already
    made your very first HTML5 game. In doing so, you had the opportunity to explore
    the GameMaker: Studio interface and get comfortable with it. You also created
    and implemented every type of resource available while utilizing all the various
    resource editors. Hopefully, you have realized how incredibly easily the software
    allows you to make games for the web. With the knowledge you have already gained,
    you could start making more advanced games. For example, why not add shooting
    as you know how to use key press events, make objects move, and do stuff on collision?'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '嗯，就是这样。在本书的第一章中，您已经制作了自己的第一个HTML5游戏。这样做，您有机会探索GameMaker: Studio界面并熟悉它。您还创建并实现了所有类型的资源，同时利用了各种资源编辑器。希望您已经意识到，这款软件让您轻松地为网络制作游戏。凭借您已经获得的知识，您可以开始制作更高级的游戏。例如，为什么不添加射击，因为您知道如何使用按键事件，使对象移动，并在碰撞时执行操作？'
- en: In the next chapter, we are going to delve into asset creation. A game is only
    as good as it looks and sounds. We will learn how to create an animated character,
    build a tileset to decorate a room, and use audio to add atmosphere. Let's move
    on as things are about to get a lot more exciting!
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究资产创建。游戏的好坏取决于它的外观和声音。我们将学习如何创建动画角色，构建一个瓷砖集来装饰一个房间，并使用音频来增加氛围。让我们继续前进，因为事情即将变得更加令人兴奋！
