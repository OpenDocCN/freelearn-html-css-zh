- en: 'Chapter 2. Triple ''A'' Games: Art and Audio'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 AAA游戏：艺术和音频
- en: Now that we are comfortable navigating around the interface and have built a
    simple game, we can start to create more complex projects. In this chapter we
    are going to focus on creating art, adding animation, and implementing an audio
    soundscape. All three of these elements are incredibly important for the creation
    of a game as each of them helps the player to understand what is happening and
    makes the experience more immersive. How we go about building a game can be drastically
    affected by the types of assets we use and how they are implemented. We will start
    by looking at importing external images and move onto some practical examples
    of how to create a tileset and make an animated character. We will then move onto
    audio files and how to add ambience to a game. We will wrap up the chapter with
    a brief talk on how to make a game look more professional. Let's get started!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了界面导航，并建立了一个简单的游戏，我们可以开始创建更复杂的项目。在本章中，我们将专注于创建艺术作品，添加动画，并实现音频音景。这三个元素对于游戏的创建非常重要，因为它们每个都有助于玩家理解发生了什么，并使体验更加沉浸。我们构建游戏的方式可能会受到我们使用的资产类型以及它们的实施方式的极大影响。我们将首先看看如何导入外部图像，然后进行一些实际示例，如如何创建一个瓷砖集并制作一个动画角色。然后我们将转向音频文件，以及如何为游戏添加环境氛围。最后，我们将简要讨论如何使游戏看起来更专业。让我们开始吧！
- en: Manufacturing art assets
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制造艺术资源
- en: 'More often than not, when creating a game, the majority of the art assets will
    be created in an external program and it will need to be imported. It is true
    that GameMaker: Studio does have an in-built image editor that we will investigate
    later, but its capabilities are fairly limited. It''s perfect for creating simple
    art, but there are many other tools that provide us with much more advanced techniques
    for creating complex art.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '在创建游戏时，大多数艺术资源都将在外部程序中创建，并且需要导入。GameMaker: Studio确实有一个内置的图像编辑器，我们稍后会进行调查，但其功能相当有限。它非常适合创建简单的艺术作品，但还有许多其他工具可以为我们提供更高级的复杂艺术创作技术。'
- en: There are many popular software options you might want to consider. The most
    full featured option and the most expensive is **Adobe Photoshop** , which is
    the preferred option for most professional artists and can be purchased at [http://www.photoshop.com/](http://www.photoshop.com/).
    A free alternative with many similar capabilities is **GIMP**, downloadable at
    [http://www.gimp.org/](http://www.gimp.org/). Both these packages offer a full
    suite of advanced tools for creating images. There are also many other simpler
    tools available, such as **Pickle** [http://www.pickleeditor.com/](http://www.pickleeditor.com/),
    **Spriter** [http://www.brashmonkey.com/](http://www.brashmonkey.com/), and **PyxelEdit**
    [http://pyxeledit.com/](http://pyxeledit.com/), all of which are free and worth
    checking out.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多受欢迎的软件选项供您考虑。最全面的选择和最昂贵的选择是Adobe Photoshop，这是大多数专业艺术家的首选，可以在[http://www.photoshop.com/](http://www.photoshop.com/)购买。一个具有许多类似功能的免费替代品是GIMP，可在[http://www.gimp.org/](http://www.gimp.org/)下载。这两个软件包都提供了一套高级工具，用于创建图像。还有许多其他更简单的工具可供选择，例如Pickle
    [http://www.pickleeditor.com/](http://www.pickleeditor.com/)，Spriter [http://www.brashmonkey.com/](http://www.brashmonkey.com/)和PyxelEdit
    [http://pyxeledit.com/](http://pyxeledit.com/)，所有这些工具都是免费的，值得一试。
- en: If you just want to skip the art creation and prefer some premade pieces, there
    are plenty of places to download sprites. One of the most popular sites for sprites
    is the **Spriters Resource** [http://spriters-resource.com/](http://spriters-resource.com/).
    They have assets for every type of game you can imagine. You can also check out
    the GameMaker forums [http://gmc.yoyogames.com/](http://gmc.yoyogames.com/). Here
    you will find many active people who are willing to make or share their art assets.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想跳过艺术创作，而更喜欢一些预制的作品，有很多地方可以下载精灵。最受欢迎的精灵网站之一是Spriters Resource [http://spriters-resource.com/](http://spriters-resource.com/)。他们拥有您能想象到的各种类型游戏的资源。您还可以查看GameMaker论坛[http://gmc.yoyogames.com/](http://gmc.yoyogames.com/)。在这里，您会找到许多愿意制作或分享他们的艺术资源的活跃人士。
- en: Understanding the image file formats
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解图像文件格式
- en: 'GameMaker: Studio is capable of importing four image types: BMP, GIF, JPG,
    and PNG. Each format has its own unique capability and drawback that will dictate
    how they should be used. The **BMP** format is the least used format these days
    because the data is not compressed. Uncompressed images are generally considered
    inefficient due to their large file size. **GIF** is the only format that can
    be animated, but is limited to 256 colors and a single level of transparency.
    This is perfect for classic 8-bit styled art where everything has a hard edge.
    **JPG** images have the smallest file size due to the lack of any transparency
    and their lossy compression format. This is a good choice for backgrounds and
    opaque sprites only. **PNG** image formats are the most useful because they are
    more efficient than BMPs, have 16 million colors and full transparency, and it
    is the format that GameMaker: Studio outputs as a texture page when the game is
    compiled.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'GameMaker: Studio能够导入四种图像类型：BMP、GIF、JPG和PNG。每种格式都有其独特的功能和缺点，这将决定它们应该如何使用。BMP格式是如今最不常用的格式，因为数据未经压缩。未经压缩的图像通常被认为效率低下，因为它们的文件大小很大。GIF是唯一可以制作动画的格式，但限于256种颜色和单一透明级别。这非常适合经典的8位风格艺术，其中所有内容都有硬边缘。JPG图像由于没有任何透明度和其有损压缩格式，具有最小的文件大小。这是背景和不透明精灵的不错选择。PNG图像格式最有用，因为它们比BMP更有效，具有1600万种颜色和完全透明度，并且这是GameMaker:
    Studio在编译游戏时输出为纹理页的格式。'
- en: Throughout this book we will be utilizing only two of the image formats, GIF
    and PNG. We will be using GIF images for everything that is animated as it is
    the simplest way to import animation. As in the previous chapter, if we load an
    animated GIF image, each frame of animation will be separated in the **Sprite
    Properties Editor**. Unfortunately this means that we are limited to an 8-bit
    art style with our characters having hard edges due to the single level of transparency.
    If we want to have a smoother, cleaner look we will want to have our edges anti-aliased
    and that requires the use of a PNG image. Attempting to have smooth edges in a
    GIF image is one of the most common mistakes an artist can make. As we will see
    in the following screenshot, on the left-hand side we have a GIF image in the
    8-bit art style with crisp hard edges and on the right-hand side a PNG image with
    smooth, anti-aliased edges.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将只使用两种图像格式，GIF和PNG。我们将使用GIF图像来制作所有动画，因为这是导入动画的最简单方式。与上一章一样，如果我们加载一个动画GIF图像，每一帧动画都将在**精灵属性编辑器**中分开。不幸的是，这意味着我们在角色的艺术风格上受到了限制，由于单一的透明度水平，我们的角色边缘会有硬边。如果我们想要更平滑、更清晰的外观，我们需要使用PNG图像来进行反锯齿处理。试图在GIF图像中获得平滑的边缘是艺术家可能犯的最常见的错误之一。正如我们将在下面的截图中看到的，左侧是一个具有清晰硬边的8位艺术风格的GIF图像，右侧是一个具有平滑、反锯齿边缘的PNG图像。
- en: In the center we have the same smooth sprite used in the PNG but saved as a
    GIF. Notice the edge pixels that were once slightly transparent are now a solid
    white outline.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在中间，我们有相同的平滑精灵，使用PNG保存，但保存为GIF。注意曾经略微透明的边缘像素现在是一个实心的白色轮廓。
- en: '![Understanding the image file formats](img/4100OT_02_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![理解图像文件格式](img/4100OT_02_01.jpg)'
- en: Importing sprite sheets
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入精灵表
- en: While all the animations in this book will be using GIF images for the sake
    of expediency, it would be remiss if we did not cover how to import a **sprite
    sheet**. A sprite sheet is generally a PNG file with all the frames of animation
    of an object, such as a character, placed evenly in a grid. We can then quickly
    cut out each frame of animation in GameMaker to build the individual sprites we
    need. Let's try this out!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书中的所有动画都将使用GIF图像出于便利性的考虑，但如果我们不介绍如何导入**精灵表**，那就有失职了。精灵表通常是一个PNG文件，其中包含一个对象（如角色）的所有动画帧，均匀地放置在一个网格中。然后我们可以快速地在GameMaker中剪切出每一帧动画，以构建我们需要的单个精灵。让我们试一试！
- en: Let's start by opening a **New Project** called `Chapter_02`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从打开一个名为`Chapter_02`的**新项目**开始。
- en: Create a new Sprite and name it `spr_PlayerSpriteSheet`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的精灵，并命名为`spr_PlayerSpriteSheet`。
- en: Click on the **Edit Sprite** button to open the **Sprite Editor**.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑精灵**按钮打开**精灵编辑器**。
- en: Under **File**, select **Create from Strip**, and then open `Chapter 2/Sprites/PlayerSpriteSheet.png`
    with nothing selected in the **Image Information** section. This will open the
    **Loading a strip image** editor.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文件**下，选择**从条带创建**，然后在**图像信息**部分中不选择任何内容，打开`Chapter 2/Sprites/PlayerSpriteSheet.png`。这将打开**加载条带图像**编辑器。
- en: The sprite sheet we just loaded consists of a six frame run cycle. Since we
    want all the frames, we need to set **number of images** to `6`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚加载的精灵表包含了一个六帧的奔跑循环。由于我们需要所有的帧，所以我们需要将**图像数量**设置为`6`。
- en: The layout of the sprite sheet has two rows of three images. Set **images per
    row** to `3`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 精灵表的布局有两行三个图像。将**每行图像数**设置为`3`。
- en: Since each image is 64 x 64 pixels in size we need to set **image width** and
    **image height** to `64`. The other options for offsets and separation are not
    necessary for such a small sprite sheet, but they would come in handy if we had
    a complete set of animations for this character. The setting should look like
    the following image:![Importing sprite sheets](img/4100OT_02_02.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于每个图像的大小为64 x 64像素，我们需要将**图像宽度**和**图像高度**设置为`64`。对于如此小的精灵表来说，偏移和分离的其他选项并不是必要的，但如果我们有这个角色的完整动画集，它们将会很有用。设置应该如下图所示：![导入精灵表](img/4100OT_02_02.jpg)
- en: Click on **OK**. We now have an animated sprite with smooth edges!
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。我们现在有一个带有平滑边缘的动画精灵！
- en: We are finished with this sprite. Now click the check mark of the **Sprite Editor**
    and the **Sprite Properties** editor and click on the **OK** button to close it
    down.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了这个精灵。现在点击**精灵编辑器**和**精灵属性**编辑器的复选标记，然后点击**确定**按钮关闭它。
- en: Introducing the image editor
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍图像编辑器
- en: 'One of the big benefits of developing with GameMaker: Studio is that it has
    an in-built **Image Editor** for creating sprites and backgrounds. This editor
    may appear to be very basic but there are a lot of excellent tools available to
    use. There are a variety of different drawing tools including the standard tools
    such as pencil, eraser, and fill. One very useful and unique feature in the editor
    is the ability to paint with both mouse buttons. The **Colors** | **Left** and
    **Colors** | **Right** color options, as seen in the following image, indicate
    the color that will be used depending on whether the left or right mouse button
    is being used. We can also adjust a wide range of things through the **Transform**
    and **Image** menus. The **Transform** menu contains the ability to affect the
    size and placement of the pixels in the image. The **Image** menu contains the
    image alteration tools such as the ability to change the color, blur the image,
    and add glows.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '使用GameMaker: Studio开发的一个重要好处是它内置了一个用于创建精灵和背景的**图像编辑器**。这个编辑器可能看起来非常基础，但有很多优秀的可用工具。有各种不同的绘图工具，包括标准工具，如铅笔、橡皮擦和填充。编辑器中一个非常有用且独特的功能是能够用鼠标的两个按钮进行绘画。**颜色**
    | **左**和**颜色** | **右**颜色选项，如下图所示，表示根据使用左键或右键，将使用的颜色。我们还可以通过**变换**和**图像**菜单调整各种东西。**变换**菜单包含影响图像中像素大小和位置的能力。**图像**菜单包含图像修改工具，如改变颜色、模糊图像和添加发光效果。'
- en: Rather than talking about the image editor, let's build some art assets in it.
    We will start by creating a tileset and then move onto an animated character,
    both of which can be used later in [Chapter 4](ch04.html "Chapter 4. The Adventure
    Begins"), *The Adventure Begins*. If you would rather work in an external editor,
    feel free to still follow along as the general theory of creating these assets
    is somewhat universal.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与其谈论图像编辑器，不如在其中构建一些艺术资源。我们将首先创建一个图块集，然后转移到一个动画角色，这两者都可以在[第4章](ch04.html "第4章.
    冒险开始")中稍后使用，*冒险开始*。如果您更愿意在外部编辑器中工作，也可以跟着做，因为创建这些资源的一般理论是普遍适用的。
- en: '![Introducing the image editor](img/4100OT_02_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![介绍图像编辑器](img/4100OT_02_03.jpg)'
- en: Creating backgrounds with tilesets
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图块集创建背景
- en: A **tileset** is a special type of background asset that allows games to have
    an immense amount of variation in the environment without using a lot of computer
    memory. It is important to keep the file size and memory usage small, especially
    for HTML5 games. The browser needs to download all these assets because we have
    no idea how powerful a computer the user has.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**图块集**是一种特殊类型的背景资源，允许游戏在不使用大量计算机内存的情况下在环境中拥有巨大的变化。保持文件大小和内存使用量小是非常重要的，特别是对于HTML5游戏。浏览器需要下载所有这些资源，因为我们不知道用户有多强大的计算机。'
- en: Creating natural looking tilesets is all about tricking the eye. Our eyes are
    very good at spotting patterns; they recognize differences in shape, contrast,
    and color, when there is repetition. Knowing that our brains are hardwired this
    way allows us to use this to our advantage. We can break up patterns by using
    odd shapes, minimizing contrast, and using similar colors in our artwork.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自然外观的图块集主要是为了欺骗眼睛。我们的眼睛非常擅长发现模式；当有重复时，它们会识别形状、对比和颜色的差异。知道我们的大脑是这样硬编码的，让我们能够利用这一点。我们可以通过使用奇怪的形状、最小化对比和在艺术作品中使用类似的颜色来打破模式。
- en: 'We are going to create a tileset for one of the most common surfaces seen in
    games: a stone floor. Now this may seem easy, but it is amazing how often this
    is done incorrectly.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为游戏中最常见的表面之一创建一个图块集：石头地板。现在这可能看起来很容易，但惊人的是这经常被错误地完成。
- en: '![Creating backgrounds with tilesets](img/4100OT_02_04.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![使用图块集创建背景](img/4100OT_02_04.jpg)'
- en: Create a new background resource and name it `bg_StoneFloor`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的背景资源，并命名为`bg_StoneFloor`。
- en: Since we want this to be a tileset, make sure you check the box for **Use as
    tile set**. This will display the **Tile Properties** which allows you to set
    the tile width and height, offsets, and separation.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们希望这是一个图块集，请确保勾选**用作图块集**的复选框。这将显示**图块属性**，允许您设置图块的宽度和高度、偏移和间隔。
- en: Set the **tile width** and **tile height** to `32` as seen in the preceding
    image. We are now ready to start building tiles.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**图块宽度**和**图块高度**设置为`32`，如前面的图像所示。我们现在准备开始构建图块。
- en: Click the **Edit Background** button. This will open up the **Image Editor**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑背景**按钮。这将打开**图像编辑器**。
- en: We are going to start by creating the master tile from which all other tiles
    will be based. In the **Image Editor**, Select **File** | **New** and set the
    **Width** and **Height** to `32`.![Creating backgrounds with tilesets](img/4100OT_02_05.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从创建所有其他图块将基于的主图块开始。在**图像编辑器**中，选择**文件** | **新建**，并将**宽度**和**高度**设置为`32`。![使用图块集创建背景](img/4100OT_02_05.jpg)
- en: Select the **Fill an Area** tool and apply a light gray color to the entire
    sprite. This is the base and we will change the colors later.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**填充区域**工具，并将浅灰色应用到整个精灵上。这是基础，我们稍后会更改颜色。
- en: Before starting to paint in a bunch of stones, we need to first think about
    the potential issues and the best solution for solving them. The most common problem
    people have creating a tileset is that they start by trying to create the final
    product instead of building up to it. This includes choosing the colors and adding
    details before ensuring that it can, in fact, tile properly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始绘制一堆石头之前，我们需要首先考虑潜在的问题和解决方案。人们在创建平铺图块时最常见的问题是他们试图直接创建最终产品，而不是逐步构建。这包括在确保可以正确平铺之前选择颜色和添加细节。
- en: When looking at tiling textures, we need to ensure that we try our best to break
    the grid. The entire world is going to be based on small, 32 x 32 pixel tiles,
    but we don't want the viewer to notice this. Our goal then, is to use irregular
    shapes and attempt to avoid horizontal and vertical alignment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看平铺纹理时，我们需要确保尽量打破网格。整个世界将基于小的32 x 32像素图块，但我们不希望观察者注意到这一点。因此，我们的目标是使用不规则的形状，并尽量避免水平和垂直对齐。
- en: '![Creating backgrounds with tilesets](img/4100OT_02_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用图块集创建背景](img/4100OT_02_06.jpg)'
- en: Select the **Draw on the Image** tool and a dark gray color.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**在图像上绘制**工具和深灰色。
- en: To make life a bit easier we can zoom in on the image. This can be done with
    the magnifying glass or with the middle mouse scroll button.![Creating backgrounds
    with tilesets](img/4100OT_02_07.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让生活变得更容易，我们可以放大图像。这可以通过放大镜或中间鼠标滚动按钮来完成。![使用图块集创建背景](img/4100OT_02_07.jpg)
- en: Draw the outlines of small rocks, but do remember to keep a bit of variety in
    the size and shape. Also, don't forget to keep the diagonal lines to a width of
    just one pixel! Once you have done this, it should look similar to the preceding
    example screenshot.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制小石头的轮廓，但记得保持一定的大小和形状的变化。另外，不要忘记将对角线线条保持在一个像素的宽度上！一旦你做到了这一点，它应该看起来类似于前面的示例截图。
- en: From the **Image Editor** menu, select **Transform** | **Shift**. This will
    open the **Shift the Image** dialog box that allows you to move pixels horizontally
    or vertically.![Creating backgrounds with tilesets](img/4100OT_02_08.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**图像编辑器**菜单中，选择**转换** | **移动**。这将打开**移动图像**对话框，允许您水平或垂直移动像素。![使用图块集创建背景](img/4100OT_02_08.jpg)
- en: Set the **Horizontal** and **Vertical** values to `16` and check the **Wrap
    Horizontally** and **Wrap Vertically** boxes. This will move the image 16 pixels
    down and to the right (half the tile size), and wrap the remaining pixels as can
    be seen in the preceding screenshot.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**水平**和**垂直**值设置为`16`，并勾选**水平包裹**和**垂直包裹**框。这将使图像向下和向右移动16像素（瓷砖大小的一半），并将剩余的像素包裹起来，如前面的屏幕截图所示。
- en: Click on **OK**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: By shifting the pixels we can now see how the edges would have tiled. You probably
    notice that it doesn't work perfectly. In the following example screenshot, you
    can see that there are several lines that just end without creating whole stones.
    You may also not like the size of certain stones or see lines that are too thick.
    The goal here is to fix this up and repeat the process until everything lines
    up as you like.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过移动像素，我们现在可以看到边缘是如何铺砌的。你可能会注意到它并不完美。在下面的示例截图中，你可以看到有几条线只是结束了，没有形成完整的石头。你可能也不喜欢某些石头的大小，或者看到一些线条太粗。目标是修复这些问题，并重复这个过程，直到一切都符合你的要求。
- en: '![Creating backgrounds with tilesets](img/4100OT_02_09.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![使用瓷砖集创建背景](img/4100OT_02_09.jpg)'
- en: Draw the lines and cover over the old ones where necessary to fix any stones
    that appeared to be incorrect.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在必要的地方画线并覆盖旧线，以修复任何看起来不正确的石头。
- en: Re-apply the **Transform** | **Shift** tool with the same settings. If you see
    errors, fix them and repeat until you are happy.![Creating backgrounds with tilesets](img/4100OT_02_10.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的设置重新应用**变换** | **移动**工具。如果看到错误，修复它们并重复，直到你满意。![使用瓷砖集创建背景](img/4100OT_02_10.jpg)
- en: Once we are satisfied with the tile pattern and that it repeats correctly along
    the edges, we are ready to add color. In general, it is best not to use a fully
    desaturated gray color scheme to represent stone, as most stones have some color.
    When selecting colors, the goal is to avoid using just a single color with light/dark
    variations, but rather choose a range of similar colors. To do this, start by
    selecting a neutral base color like beige. From there, each additional color should
    have a slight change in **hue**, **saturation,** and **luminance**. For example,
    the second color could be slightly redder, a bit less vibrant, and darker than
    the first beige.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对瓷砖图案和沿边缘正确重复感到满意，我们就可以开始添加颜色了。一般来说，最好不要使用完全脱饱和的灰色调来代表石头，因为大多数石头都有一些颜色。在选择颜色时，目标是避免只使用单一颜色和明暗变化，而是选择一系列相似的颜色。为此，首先选择一个中性的基础颜色，比如米色。然后，每种额外的颜色都应该在**色调**、**饱和度**和**亮度**上略有变化。例如，第二种颜色可以比第一个米色略微偏红，略微不那么鲜艳，比第一个米色暗一些。
- en: Select a light brown color and use the **Fill an Area** tool to fill in a few
    of the stones.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择浅褐色，并使用**填充区域**工具填充一些石头。
- en: Repeat this process with the other brown variants until there are no gray colored
    stones remaining.![Creating backgrounds with tilesets](img/4100OT_02_11.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其他褐色变种重复这个过程，直到没有灰色的石头剩下。![使用瓷砖集创建背景](img/4100OT_02_11.jpg)
- en: Once all the stones have been filled, we need to make sure it still tiles. Use
    **Transform** | **Shift** to see if the colors line up correctly. If there are
    any issues (as seen in the preceding screenshot) just adjust the colors until
    you are happy again.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填满所有的石头后，我们需要确保它仍然可以铺砌。使用**变换** | **移动** 来查看颜色是否正确对齐。如果有任何问题（如前面的截图所示），只需调整颜色，直到你再次满意。
- en: The final step for our base tile is to change the dark gray lines into a dark
    brown. Now you are probably thinking that this is going to be incredibly tedious,
    but luckily, the image editor has a tool to make this easy.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基础瓷砖的最后一步是将深灰色线条改为深褐色。现在你可能会认为这将是非常乏味的，但幸运的是，图像编辑器有一个工具可以让这变得容易。
- en: Select a dark brown color with the left mouse button. This color should appear
    under **Color** | **Left**.![Creating backgrounds with tilesets](img/4100OT_02_12.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用鼠标左键选择深褐色。这种颜色应该出现在**颜色** | **左**下方。![使用瓷砖集创建背景](img/4100OT_02_12.jpg)
- en: Select the **Change all Pixels with the Same Color** tool, as seen previously,
    and left click on one of the dark gray pixels. The stone outline should all be
    the dark brown color now, as we will see in the following screenshot:![Creating
    backgrounds with tilesets](img/4100OT_02_13.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**更改所有相同颜色的像素**工具，如前所示，然后在一个深灰色像素上单击左键。现在石头的轮廓应该都是深褐色，就像我们将在下面的截图中看到的那样：![使用瓷砖集创建背景](img/4100OT_02_13.jpg)
- en: 'Excellent work! We now have a base tile to build all our other tiles from.
    The next step is to add border tiles so that there is an edge for separating different
    materials. If we are going to have a square room, we will need a total of nine
    tiles: the base tile and the eight tiles representing border edges and corners.
    Let''s add some more space to our canvas and fill it up with our tiles.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们有了一个基础瓷砖，可以用来制作其他所有瓷砖。下一步是添加边框瓷砖，以便有一个用于分隔不同材料的边缘。如果我们要有一个正方形房间，我们将需要总共九块瓷砖：基础瓷砖和代表边缘和角落的八块瓷砖。让我们给我们的画布增加一些空间，并用我们的瓷砖填满它。
- en: Select **Transform** | **Resize Canvas**.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**变换** | **调整画布**。
- en: Increase the **New Size** | **Width** and **New Size** | **Height** by `300`
    percent or `96` pixels. Then under **Position** click on the center square so
    that the canvas expands all around the tile we created. The settings can be seen
    in the following screenshot.![Creating backgrounds with tilesets](img/4100OT_02_14.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**新尺寸** | **宽度**和**新尺寸** | **高度**增加`300`％或`96`像素。然后在**位置**下点击中心方块，使画布在我们创建的瓷砖周围扩展。设置如下屏幕截图所示。![使用瓷砖集创建背景](img/4100OT_02_14.jpg)
- en: You will want to make sure that you line everything up correctly, so turn on
    the grid. Select **View** | **Toggle Grid** or click on the **Toggle Grid** icon.![Creating
    backgrounds with tilesets](img/4100OT_02_15.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要确保一切都正确对齐，所以打开网格。选择**视图** | **切换网格** 或点击**切换网格**图标。
- en: At this point you probably can't see any grid. This is because the default grid
    is set to 1 x 1 pixel. Select **View** | **Grid Options** to open the **Grid Settings**.
    Change the **Horizontal size** and **Vertical size** to `32` and check **Snap
    to the grid**. Feel free to change the **Color**, as we did in the previous screenshot,
    if you want. Then click on **OK**.![Creating backgrounds with tilesets](img/4100OT_02_16.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时您可能看不到任何网格。这是因为默认网格设置为1 x 1像素。选择**视图** | **网格选项**打开**网格设置**。将**水平大小**和**垂直大小**更改为`32`，并选中**对齐到网格**。如果需要，可以随意更改**颜色**，就像我们在之前的屏幕截图中所做的那样。然后点击**确定**。![使用瓷砖集创建背景](img/4100OT_02_16.jpg)
- en: Using the **Selecting a Region** tool, drag to select the entire base tile.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**选择区域**工具，拖动以选择整个基础瓷砖。
- en: '**Copy** (*Ctrl* + *C*) and **Paste** (*Ctrl* + *V*) the tile and then drag
    it into one of the available spaces. Repeat this step until all nine spots have
    a base tile in them as seen in the following screenshot:![Creating backgrounds
    with tilesets](img/4100OT_02_17.jpg)'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**复制**（*Ctrl* + *C*）和**粘贴**（*Ctrl* + *V*）瓷砖，然后将其拖放到一个可用的空间中。重复此步骤，直到所有九个位置都有一个基础瓷砖，就像以下的屏幕截图中所示：![使用瓷砖集创建背景](img/4100OT_02_17.jpg)'
- en: Go back to the **View** | **Grid Options** and turn off **Snap to the grid**.
    Otherwise you will get very frustrated trying to draw the borders!![Creating backgrounds
    with tilesets](img/4100OT_02_18.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**视图** | **网格选项**，关闭**对齐到网格**。否则，您将在尝试绘制边框时感到非常沮丧！[使用瓷砖集创建背景](img/4100OT_02_18.jpg)
- en: We want a border of eight pixels in thickness. Using the same colors as the
    stones, use the **Draw a Line** tool to create a border around the outer perimeter
    of the tileset as seen previously.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望边框厚度为八个像素。使用与石头相同的颜色，使用**绘制线条**工具在瓷砖集的外围创建一个边框，就像之前看到的那样。
- en: Fantastic work! We now have a basic tileset, so let's test it out.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在有了一个基本的瓷砖集，让我们来测试一下。
- en: If you don't already have one, create a new room.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有一个，创建一个新房间。
- en: In the **Room Properties** editor, select the **tiles** tab.![Creating backgrounds
    with tilesets](img/4100OT_02_19.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**房间属性**编辑器中，选择**瓷砖**选项卡。![使用瓷砖集创建背景](img/4100OT_02_19.jpg)
- en: If it isn't already selected, set the background image to `bg_StoneFloor`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未选择，请将背景图像设置为`bg_StoneFloor`。
- en: To select a tile, just left click on the one you want to use in the preview
    area as seen in the preceding screenshot.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要选择一个瓷砖，只需在预览区域左键单击要使用的瓷砖，如前面的屏幕截图所示。
- en: It is possible to have multiple layers of tiles which can be very useful when
    you want to place odd shaped tiles (a tree, a signpost) without having to create
    new ones for each surface type (stone floor, grass). It is also useful for compiling
    several tiles to create a more natural surface, such as the stone floor with a
    dirt tiles set on top.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 可以有多个层的瓷砖，这在您想要放置奇形怪状的瓷砖（树木、路标）时非常有用，而无需为每种表面类型（石地板、草地）创建新的瓷砖。它还可用于编译多个瓷砖以创建更自然的表面，例如在石地板上放置一个泥土瓷砖组。
- en: We are going to keep this simple so let's leave the **Current Tile Layer** at
    `1000000`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将保持简单，所以让我们将**当前瓷砖图层**保留在`1000000`。
- en: In the room, use left click to place an individual tile or hold *Shift* to paint
    tiles in the room. Try to layout the tiles as if there were multiple rooms with
    hallways, much like the following screenshot.![Creating backgrounds with tilesets](img/4100OT_02_20.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在房间中，使用左键单击放置单个瓷砖，或按住*Shift*在房间中绘制瓷砖。尝试布置瓷砖，就好像有多个带走廊的房间，就像以下屏幕截图一样。![使用瓷砖集创建背景](img/4100OT_02_20.jpg)
- en: It looks fairly decent, but there are some noticeable issues, specifically that
    the inner corners do not have the borders on them. You may also feel that the
    tiles repeat a little too much with an area this large. Since we are going to
    create more tiles for the first problem, we might as well add a few for the second!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当不错，但有一些明显的问题，特别是内角没有边框。您可能还会觉得在这么大的区域里，瓷砖重复得有点太多了。由于我们将为第一个问题创建更多的瓷砖，我们也可以为第二个问题添加一些！
- en: Reopen the `bg_StoneFloor` if it isn't still open and select **Transform** |
    **Resize Canvas**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未打开，请重新打开`bg_StoneFloor`并选择**变换** | **调整画布大小**。
- en: Increase the size by `133` percent or to `128` pixels. Under **Position** click
    on the upper left arrow, then click on **OK**. It should now look like the following
    screenshot.![Creating backgrounds with tilesets](img/4100OT_02_21.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将大小增加`133`%，或者到`128`像素。在**位置**下点击左上角箭头，然后点击**确定**。现在它应该看起来像以下的屏幕截图。![使用瓷砖集创建背景](img/4100OT_02_21.jpg)
- en: Select **View** | **Toggle Grid** so that we can see the grid. We need to copy
    the original base tile, which we can find in row two and column two.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**视图** | **切换网格**，这样我们就可以看到网格。我们需要复制原始的基础瓷砖，可以在第二行和第二列找到。
- en: Using the **Selecting a Region** tool, select the pixels from the original base
    tile.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**选择区域**工具，选择原始基础瓷砖的像素。
- en: Copy and paste this tile into each empty cell on the outer edge of the image.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此瓷砖复制并粘贴到图像外边缘的每个空单元格中。
- en: We need to create four corner pieces to fix our room layout. For this we will
    use the four tiles along the right-hand side edge that we just placed. Use the
    **Draw on the Image** tool to draw the corner trim and repeat this for all four
    corner tiles.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建四个角瓷砖来修复我们的房间布局。为此，我们将使用刚刚放置的右侧边缘的四个瓷砖。使用**在图像上绘制**工具绘制角落的修饰，并对所有四个角瓷砖重复此操作。
- en: We have three remaining tiles along the bottom which we will use as alternates
    to the base tile. As long as we don't affect a one pixel border around the outer
    edge, we can change the inside as much as we want and it will still tile properly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有三个沿底部的瓷砖，我们将用作基础瓷砖的替代品。只要不影响外边缘周围的一个像素边框，我们可以随意更改内部，它仍然可以正确平铺。
- en: Change the shape and alternate the colors of a few of the stones in the inner
    area of each of the three remaining tiles. The tileset, as seen in the following
    screenshot, is now complete!![Creating backgrounds with tilesets](img/4100OT_02_22.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改内部每个剩余瓷砖的一些石头的形状并交替颜色。如下截图所示，平铺集现在完成了！[使用平铺集创建背景](img/4100OT_02_22.jpg)
- en: Finally, go back to the room and place down the corner tiles where necessary
    and lay down a random variation of the alternate tiles.![Creating backgrounds
    with tilesets](img/4100OT_02_23.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，回到房间，根据需要放置角落瓷砖，并铺设备选瓷砖的随机变化。![使用平铺集创建背景](img/4100OT_02_23.jpg)
- en: As you can see, with a small 128 x 128 texture we can easily fill a large area
    while providing the illusion of randomness. To add more variation, we could easily
    create palette swap versions, where we can adjust the hue and saturation. So we
    could have, for example, a blue-gray tileset. With more practice we can start
    adding details such as shadows to add more perspective to the world. For all your
    future tilesets, just remember to use non-uniform shapes, minimize the contrast,
    and vary the colors only slightly. More importantly, always ensure that the base
    tile repeats correctly before building the edges and alternates!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，使用一个小小的128 x 128纹理，我们可以轻松填满一个大区域，同时提供随机性的错觉。为了增加更多变化，我们可以轻松地创建调色板交换版本，从而可以调整色调和饱和度。因此，我们可以有一个蓝灰色的平铺集。通过更多的练习，我们可以开始添加诸如阴影之类的细节，以增加世界的透视。对于您未来的平铺集，只需记住使用非均匀形状，最小化对比度，并仅轻微变化颜色。更重要的是，始终确保基本平铺正确重复，然后再构建边缘和备选！
- en: Animating and creating sprites
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画和创建精灵
- en: Animated sprites are a sequence of static images which, when played, appear
    to have a movement. It lets the player know that they are running, when they are
    attacking with a sword, and that a button is clickable. Good games have animation
    on everything interactive and often on many of the background elements, so much
    so that you may not even notice it. It is the tiny details such as animation that
    really breathe life into a game.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 动画精灵是一系列静态图像，播放时看起来有动作。它让玩家知道他们正在奔跑，当他们用剑攻击时，以及按钮是可点击的。好的游戏在所有互动元素上都有动画，通常还有许多背景元素上也有动画，以至于您可能甚至都没有注意到。正是诸如动画之类的微小细节真正为游戏注入了生命。
- en: The illusion of action
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动的错觉
- en: Creating animation takes time and a sharp eye, but basic animation, even of
    characters, can be done by everyone. There are a few important rules to follow
    to make animating easier. First, it is about the appearance of an action, rather
    than the accuracy of an action. As can be seen in the following screenshot, the
    first sword set swinging animation is technically accurate; the sword would be
    in each of these positions. However, the second set will appear more natural as
    it includes a blur effect that one would expect to see in a sword swing.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建动画需要时间和敏锐的眼光，但基本的动画，甚至是角色的动画，每个人都可以做到。有一些重要的规则可以让动画变得更容易。首先，它关乎动作的外观，而不是动作的准确性。如下截图所示，第一个挥剑动画在技术上是准确的；剑会在每个位置。然而，第二个集会看起来更自然，因为它包括了人们在挥剑时所期望看到的模糊效果。
- en: '![The illusion of action](img/4100OT_02_24.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![行动的错觉](img/4100OT_02_24.jpg)'
- en: Maximize the sprite space
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大化精灵空间
- en: The second rule is maximizing the sprite space. Most games use box-based collision
    rather than pixel perfect collision. Therefore you want to use as much of the
    sprite as available for the animation you need. Often developers waste a lot of
    space because they are thinking in terms of the real world instead of a game world.
    For example, one common issue can be seen in a jump animation. In the following
    screenshot, the first jump animation has the character starting from the ground,
    jumping up into the air, falling down, and landing. The second jump animation
    is the same, but all the empty space has been removed. Not only is this more efficient,
    but it can also help to prevent collision bugs since we always know where the
    collision box is.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条规则是最大化精灵空间。大多数游戏使用基于框的碰撞而不是像素完美的碰撞。因此，您希望尽可能多地利用精灵可用于所需动画的空间。通常开发人员会浪费很多空间，因为他们在考虑现实世界而不是游戏世界。例如，一个常见的问题可以在跳跃动画中看到。在下面的截图中，第一个跳跃动画中的角色从地面起跳，跳到空中，落下并着陆。第二个跳跃动画是一样的，但所有空白空间都被移除了。这不仅更有效，而且还可以帮助防止碰撞错误，因为我们始终知道碰撞框的位置。
- en: '![Maximize the sprite space](img/4100OT_02_25.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![最大化精灵空间](img/4100OT_02_25.jpg)'
- en: Looping an animation
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环动画
- en: The last major rule and probably the most important is repeatability. Most of
    the game animation is at some point going to loop, and having a noticeable repeating
    sequence is going to be very jarring to the player. One common cause of these
    repeatability issues is having too much animation. The more frames of animation
    you have, the more likely that something will pop out. The key here is simplicity
    and removing the frames you do not need. In the following screenshot you can see
    two running animations, the first with five frames and the second with only three.
    The top one will appear a bit smoother but also a bit less repeatable due to the
    slight differences in the stride. The second one in the end will look better as
    it has fewer frames and less difference in the stride as a result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要规则，可能也是最重要的规则是可重复性。大多数游戏动画在某个时候都会循环，而有一个明显重复的序列对玩家来说会非常刺眼。这种可重复性问题的一个常见原因是动画太多。动画帧数越多，出现问题的可能性就越大。关键在于简单化并删除不需要的帧。在下面的截图中，您可以看到两个奔跑动画，第一个有五帧，第二个只有三帧。顶部的看起来会更流畅一些，但由于步幅的轻微差异，重复性会稍微差一些。第二个最终看起来会更好，因为它的帧数更少，步幅的差异也更小。
- en: '![Looping an animation](img/4100OT_02_26.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![循环动画](img/4100OT_02_26.jpg)'
- en: 'With those three rules in mind, let''s build a simple character run cycle:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这三条规则，让我们来制作一个简单的角色奔跑循环：
- en: Create a new sprite and name it `spr_WalkCycle`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的精灵，并命名为`spr_WalkCycle`。
- en: Click on **Edit Sprite**; this will open the **Sprite Editor**. This editor
    is for dealing with the all the individual images that make up an animated sprite.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑精灵**；这将打开**精灵编辑器**。这个编辑器用于处理组成动画精灵的所有单个图像。
- en: In the **Sprite Editor**, select **File** | **New** which will open a dialog
    box for the new image dimensions. Keep it at `32` x `32` and click on **OK**.![Looping
    an animation](img/4100OT_02_27.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**精灵编辑器**中，选择**文件** | **新建**，这将打开一个新图像尺寸的对话框。保持为`32` x `32`，然后点击**确定**。![循环动画](img/4100OT_02_27.jpg)
- en: You should now see, as in the previous screenshot, an empty image titled **image
    0** in the **Sprite Editor**. Double click on the image to open the **Image Editor**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该看到，就像之前的截图一样，在**精灵编辑器**中有一个名为**图像0**的空图像。双击图像打开**图像编辑器**。
- en: Now we need a character design. When designing your character you need to think
    about what the character is going to do, the world they exist in, and the collision
    area. In our case, the character will only walk, the world will be an outdoor
    adventure game, and will have a large square collision box.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个角色设计。在设计角色时，你需要考虑角色要做什么，他们存在的世界以及碰撞区域。在我们的情况下，角色只会行走，世界将是一个户外冒险游戏，并且会有一个大的方形碰撞框。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't want to come up with your own character we have supplied a sprite,
    `Chapter_02/Sprites/WalkCycle.gif`, with the first frame of animation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想自己设计角色，我们提供了一个精灵，`Chapter_02/Sprites/WalkCycle.gif`，其中包含了动画的第一帧。
- en: The first frame of animation that we will create should be the character at
    their full extension of their walk cycle, the legs far apart, and touching the
    bottom of the sprite. The character will be at the lowest point of the stride
    on this frame, so make sure that the head is at least one pixel, preferably two,
    away from the top of the sprite.![Looping an animation](img/4100OT_02_28.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建的第一帧动画应该是角色在行走循环的最大伸展，腿之间距离很远，触及精灵的底部。角色在这一帧上将处于迈步的最低点，所以确保头部距离精灵顶部至少一个像素，最好是两个像素。![循环动画](img/4100OT_02_28.jpg)
- en: The character designed here in the preceding screenshot is an ape type creature
    wearing a jacket. The reason for the jacket is to make the arms more readable
    when they swing. We can see that this character is quite thick which makes the
    large collision area more believable. Finally, the back leg is a little darker
    as if there were a shadow. Once again, this is to help with readability.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中设计的角色是一种穿着夹克的猿类生物。穿夹克的原因是在摆动时使手臂更易读。我们可以看到这个角色相当厚，这使得大碰撞区域更加真实。最后，后腿稍微更暗，好像有一个阴影。再次强调，这是为了帮助可读性。
- en: Once we are happy with the first frame, we need to move onto the next keyframe.
    A **keyframe** is the point in an animation where the biggest amount of change
    happens. In this case it will be when the character is at their highest point
    and the arms and legs are crossing each other.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对第一帧满意，我们需要继续下一个关键帧。**关键帧**是动画中发生最大变化的点。在这种情况下，当角色处于最高点时，手臂和腿交叉时就是关键帧。
- en: '![Looping an animation](img/4100OT_02_29.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![循环动画](img/4100OT_02_29.jpg)'
- en: In the **Sprite Editor**, select **Animation** | **Set Length** and set the
    **Number of frames** to `3`, as seen in the previous screenshot. This will duplicate
    the first frame twice, giving us two more frames of animation.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**精灵编辑器**中，选择**动画** | **设置长度**，将**帧数**设置为`3`，如前面的截图所示。这将复制第一帧两次，给我们增加两帧动画。
- en: Open **image 1** and use the **Selecting a Region** tool to raise the upper
    half of the body to the top of the sprite as seen in the following screenshot.
    This frame will represent the highest point of the stride, where the character
    is on one foot with the other foot crossing over. We can also select and shift
    the hands and feet to quickly get them into position.![Looping an animation](img/4100OT_02_30.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**图像1**并使用**选择区域**工具将身体的上半部分提高到精灵的顶部，如下截图所示。这一帧将代表迈步的最高点，角色站在一只脚上，另一只脚越过。我们还可以选择并移动手和脚，快速将它们放到正确的位置。![循环动画](img/4100OT_02_30.jpg)
- en: Using the pencil and eraser tools, paint the arms and legs into the appropriate
    position with the leg on the ground in the front of the leg being lifted and only
    one arm showing. Once you are happy with what it looks like, close the image.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用铅笔和橡皮擦工具，将手臂和腿画到适当的位置，前腿着地，后腿抬起，只有一只手臂显示。一旦你对外观满意，关闭图像。
- en: Open **image 2**. This is the opposite motion of the first frame which makes
    things quite easy to change. The hands and feet are already in position, so we
    just need to repaint the arms and legs accordingly, as seen in the following screenshot
    on the left-hand side. Once this is done, close the image.![Looping an animation](img/4100OT_02_31.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**图像2**。这是第一帧的相反运动，这样改变起来相当容易。手和脚已经在正确的位置，所以我们只需要相应地重新绘制手臂和腿，如左侧截图所示。完成后关闭图像。![循环动画](img/4100OT_02_31.jpg)
- en: Now we need to duplicate **image 1** and place it at the end so that the walk
    cycle can loop. Select **image 1** and copy and paste the frame. This will duplicate
    the frame and is labeled **image 2**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要复制**图像1**并将其放在末尾，以便行走循环。选择**图像1**并复制并粘贴帧。这将复制帧，并标记为**图像2**。
- en: Select **image 2** and click on the right facing arrow in the **Sprite Editor**
    toolbar. This will move the frame to the end of the animation. Select and open
    **image 3** so we can repaint the legs so that the back leg is on the ground and
    the front leg is in the air, crossing over. Once this is done, close the editor.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**图像2**并点击**精灵编辑器**工具栏中的右箭头。这将把帧移到动画的末尾。选择并打开**图像3**，这样我们就可以重新绘制腿，使后腿着地，前腿在空中越过。完成后关闭编辑器。
- en: To see how the animation plays, check the **Show Preview** checkbox in the **Sprite
    Editor** and set the **Speed** to `5`. See the following screenshot.![Looping
    an animation](img/4100OT_02_32.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看动画的播放情况，请在**Sprite Editor**中选中**Show Preview**复选框，并将**Speed**设置为`5`。请参阅以下截图。![循环动画](img/4100OT_02_32.jpg)
- en: 'There we have it! A decent walk cycle that loops properly, if a little choppy.
    If we want to smoothen this animation a bit, just add a frame of animation in
    between the keyframes and follow the same procedure we just went through. It should
    end up looking something similar to the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！一个不错的循环行走动画，虽然有点生硬。如果我们想要稍微平滑这个动画，只需在关键帧之间添加一帧动画，然后按照刚才进行的相同步骤进行。最终应该看起来类似于以下截图：
- en: '![Looping an animation](img/4100OT_02_33.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![循环动画](img/4100OT_02_33.jpg)'
- en: Manufacturing audio
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作音频
- en: Audio is incredibly important for creating a professional quality game. Unfortunately,
    it is often the most neglected element and the last to be implemented. One reason
    for this is the fact that we can play a game without the audio and still enjoy
    the experience. However, a good soundscape in a game will make it much more immersive
    and help improve user feedback.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 音频对于创建专业质量的游戏非常重要。不幸的是，它通常是最被忽视的元素，也是最后实施的。其中一个原因是我们可以在没有音频的情况下玩游戏，仍然享受体验。然而，游戏中良好的声音景观将使其更具沉浸感，并有助于改善用户反馈。
- en: 'In order to create audio we will need to use external software, as GameMaker:
    Studio does not come with any built-in audio creation tools. There are a range
    of software choices to choose from. For creating sound effects and music there
    are popular programs such as the very full featured **Reason**, [http://www.propellerheads.se/](http://www.propellerheads.se/),
    which emulates a rack of synthesizers, mixers, and other components. On the free
    side, there is **BFXR** , [http://www.bfxr.net/](http://www.bfxr.net/), that allows
    you to create game sounds online and then there is also **Sonant** , [http://sonantlive.bitsnbites.eu/](http://sonantlive.bitsnbites.eu/),
    for making music. All these packages are fun and easy to use. One thing to keep
    in mind is that audio is very challenging to create. Sometimes it is better to
    just download some free music or sounds and there are plenty of sites out there
    with both free and purchasable audio. **Freesound** , `http://www.freesound.org`,
    have thousands of audio clips that you can download and use. For a more classic
    chiptune style of music and sounds there is the **8-bit Collective** , `http://8bc.org/`,
    a site dedicated to game audio.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '为了创建音频，我们需要使用外部软件，因为GameMaker: Studio没有内置的音频创建工具。有各种软件选择可供选择。用于创建音效和音乐的流行程序包括非常全面的**Reason**，[http://www.propellerheads.se/](http://www.propellerheads.se/)，它模拟了一台合成器、混音台和其他组件的机架。在免费方面，还有**BFXR**，[http://www.bfxr.net/](http://www.bfxr.net/)，可以让您在线创建游戏音效，还有**Sonant**，[http://sonantlive.bitsnbites.eu/](http://sonantlive.bitsnbites.eu/)，用于制作音乐。所有这些软件包都很有趣且易于使用。需要记住的一点是，音频的创建非常具有挑战性。有时最好只是下载一些免费音乐或音效，有很多网站提供免费和可购买的音频。**Freesound**，`http://www.freesound.org`，有成千上万的音频剪辑可供下载和使用。对于更经典的8位风格音乐和音效，还有**8-bit
    Collective**，`http://8bc.org/`，这是一个专门用于游戏音频的网站。'
- en: Understanding the audio file formats
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解音频文件格式
- en: 'If adding audio wasn''t challenging enough already, HTML5 makes it just a little
    bit harder. The first difficulty we will encounter is the fact that the HTML5
    audio tag has not been standardized as of yet. There are two file formats competing
    to be the official HTML5 standard: MP3 and OGG. The **MP3** file format is one
    of the most commonly used formats, but has the drawback of being licensed and
    patented, which could result in large fees being paid out. The **OGG** file format
    is both open source and patent free making it a viable alternative. On top of
    this issue is the fact that the various browsers have their own preference for
    file types. For example, Internet Explorer accepts MP3s but not OGG, while Opera
    accepts OGG but not MP3\. Google Chrome and Mozilla Firefox are hedging their
    bets and support both. GameMaker: Studio deals with this issue by converting all
    audio to both MP3 and OGG file formats when the game is exported.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '如果添加音频还不够具有挑战性，HTML5会使它变得更加困难。我们将遇到的第一个困难是HTML5音频标签尚未标准化。有两种文件格式竞相成为官方HTML5标准：MP3和OGG。**MP3**文件格式是最常用的格式之一，但缺点是需要许可和专利，这可能导致支付大额费用。**OGG**文件格式既是开源又不受专利保护，因此是一个可行的替代方案。除此之外，各种浏览器对文件类型有自己的偏好。例如，Internet
    Explorer接受MP3但不接受OGG，而Opera接受OGG但不接受MP3。Google Chrome和Mozilla Firefox则支持两种格式。GameMaker:
    Studio通过在游戏导出时将所有音频转换为MP3和OGG文件格式来解决这个问题。'
- en: Using the GM:S Audio engine
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GM:S音频引擎
- en: 'GameMaker: Studio comes with two different sound engines for controlling the
    various audio in games: **GM:S Audio** and **Legacy Sound**. These systems are
    completely independent from each other and you can have one system or the other
    active in a game.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'GameMaker: Studio配备了两种不同的声音引擎来控制游戏中的各种音频：**GM:S音频**和**传统声音**。这些系统彼此完全独立，您可以在游戏中使用其中一个系统。'
- en: 'The GM:S Audio engine is the new, more robust sound system that was designed
    to allow a full 3D soundscape through the use of emitters and listeners. **Emitters**
    allow for the positioning in game space where sounds are going to occur. There
    are functions for adding falloff of the sounds, velocity to emulate movement,
    and more. **Listeners** give even more control by dictating how the sound is played
    based on where the player is in the game, including their orientation and velocity.
    If you do not declare a listener, then the sounds become universal. This will
    eventually become the primary audio engine in GameMaker: Studio, but because of
    the HTML5 audio issues, it doesn''t work properly in all browsers.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'GM:S音频引擎是新的、更强大的声音系统，旨在通过发射器和听者实现完整的3D声音景观。**发射器**允许在游戏空间中定位声音发生的位置。有添加声音衰减、模拟移动的速度等功能。**听者**通过根据玩家在游戏中的位置、包括他们的方向和速度来播放声音，提供更多的控制。如果您不声明一个听者，那么声音将变得普遍。这将最终成为GameMaker:
    Studio中的主要音频引擎，但由于HTML5音频问题，它在所有浏览器中都无法正常工作。'
- en: The Legacy Sound engine is the original sound system that GameMaker used and
    as the name indicates, this engine is no longer being actively developed and many
    of the functions have already been made obsolete. It is a much simpler system
    with no 3D capabilities, though for most games this will be more than enough.
    The one big benefit this engine has is that the audio should work in all browsers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Legacy Sound引擎是GameMaker使用的原始声音系统，正如其名称所示，这个引擎已不再得到积极开发，并且许多功能已经过时。这是一个更简单的系统，没有3D功能，尽管对于大多数游戏来说这将是足够的。这个引擎的一个很大的好处是音频应该在所有浏览器中都能工作。
- en: We will be using the Legacy Sound engine throughout this book to ensure maximum
    capability, but we need to know how to use the GM:S Audio engine for the future.
    Let's test these features by creating a very simple demonstration of positional
    sound. We are going to create an object in our room and make it play a sound that
    can only be heard as the mouse approaches the location.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将一直使用Legacy Sound引擎以确保最大的功能，但我们需要知道如何使用GM:S音频引擎以备将来使用。让我们通过创建一个非常简单的定位声音演示来测试这些功能。我们将在房间中创建一个对象，并使其播放一个只有当鼠标接近位置时才能听到的声音。
- en: '![Using the GM:S Audio engine](img/4100OT_02_34.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![使用GM:S音频引擎](img/4100OT_02_34.jpg)'
- en: In order to select which system you are using, click on **Resources** | **Change
    Global Game Settings**. In the **General Tab**, there is a **Use New Audio Engine**
    checkbox; make sure you check this. If it is checked, it is using the GM:S Audio
    engine; if it is not, then it is using Legacy Sound.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要选择使用哪个系统，请单击**资源** | **更改全局游戏设置**。在**常规选项卡**中，有一个**使用新音频引擎**复选框；确保您选中它。如果选中，它将使用GM:S音频引擎；如果没有，则使用Legacy
    Sound。
- en: Create a new Sound and name it `snd_Effect`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新声音并命名为`snd_Effect`。
- en: Load `Chapter 2/Sounds/Effect.wav`. Make sure the **Kind** is set to **Normal
    Sound**.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Chapter 2/Sounds/Effect.wav`。确保**类型**设置为**普通声音**。
- en: Create a new Object and name it `obj_Sound`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象并命名为`obj_Sound`。
- en: 'Create a new Script and name it `scr_Sound_Create`. First, we need to create
    an emitter and capture it in a variable:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新脚本并命名为`scr_Sound_Create`。首先，我们需要创建一个发射器并将其捕获在一个变量中：
- en: '[PRE0]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next we will position the emitter to where our object is. The parameters for
    this function are: the emitter to apply this to and the X/Y/Z coordinates. We
    will use the object''s X and Y, but since this is a 2D example, we will set the
    Z to 0:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将发射器定位到我们对象的位置。此函数的参数是：要应用此函数的发射器和X/Y/Z坐标。我们将使用对象的X和Y，但由于这是一个2D示例，我们将Z设置为0：
- en: '[PRE1]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also want to have a **falloff** on the emitter so that the sound becomes
    louder as the listener approaches. The parameters we have are: the emitter, the
    distance for how far the sound should be at half volume, the total falloff distance,
    and the falloff factor:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望在发射器上有一个**衰减**，使得随着听者的接近声音变得更大。我们拥有的参数是：发射器、声音在一半音量时的距离、总的衰减距离和衰减因子：
- en: '[PRE2]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The emitter is all set up; now let''s play the sound on the emitter. The parameters
    for this function are: the emitter, the sound to play, whether it should loop,
    and its priority. We will want this to **loop** so that we can hear the sound:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发射器已经设置好了；现在让我们在发射器上播放声音。此函数的参数是：发射器、要播放的声音、是否应该循环以及其优先级。我们希望这个**循环**，这样我们就可以听到声音：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code is finished and should look like the following when all put together:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当所有内容放在一起时，此代码已完成并应如下所示：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add a **Create** event and drag a **Control** | **Execute Script** icon into
    the Actions with this script attached.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**创建**事件，并将一个**控制** | **执行脚本**图标拖放到附有此脚本的操作中。
- en: The sound will play now, but it will not have a direction until we have a **listener**.
    We will move the listener position based on the location of the mouse on every
    step. Create a new Script and name it `scr_Sound_Step`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在声音将播放，但在我们有**听者**之前，它将没有方向。我们将根据鼠标的位置在每一步上移动听者的位置。创建一个新脚本并命名为`scr_Sound_Step`。
- en: We only need one line of code for positioning the listener's X/Y/Z coordinates.
    The X and Y will be set to the mouse X and Y and once again Z is set to `0`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要一行代码来定位听者的X/Y/Z坐标。X和Y将设置为鼠标的X和Y，再次Z设置为`0`。
- en: '[PRE5]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On the `obj_Sound` object, add a **Step** | **Step** event and drag an **Execute
    Script** icon into the Actions with the step script attached.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`obj_Sound`对象上，添加一个**Step** | **Step**事件，并将一个**Execute Script**图标拖放到附有步骤脚本的操作中。
- en: Open up the room and place the instance of `obj_Sound` object into the center
    of the room.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开房间，并将`obj_Sound`对象的实例放在房间的中心。
- en: Run the game.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行游戏。
- en: You should be able to hear the sound quietly and as you move the mouse around
    closer to the center of the screen the louder it should become. If you have surround
    sound or headphones, you will also notice that the sound moves from the left to
    the right channels. This is just a sample of what can be done with the GM:S Audio
    engine and it will be exciting to use once it works in all browsers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够听到声音很轻，并且当你把鼠标移到屏幕中心附近时，声音应该变得更大声。如果你有环绕声或耳机，你还会注意到声音从左到右的声道移动。这只是GM:S音频引擎可以做的一些示例，一旦它在所有浏览器中都能正常工作，就会变得令人兴奋。
- en: Raising the quality bar
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高质量标准
- en: 'When looking at the hundreds of thousands of games out there, it is quite easy
    to recognize the top-tier games from the bottom-tier. However, when we look across
    the spectrum at all the best games, there is a stark difference between them.
    Some games are very minimalist, some are photo-realistic, while others are fantastical.
    These games might be made by a few people, or a large team of specialists. What
    is it that makes games that are fundamentally so different still able to achieve
    the same definition of quality? The answer is quite simple and can be summed up
    by three general principles: Consistency, Readability, and Polish. While creating
    high caliber art and audio, it does require plenty of acquired skills learned
    through years of study and practice. Following these few rules will help make
    any game appear more professional.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看着成千上万的游戏时，很容易辨认出顶尖游戏和底层游戏。然而，当我们在整个光谱上看所有最好的游戏时，它们之间存在着明显的差异。有些游戏非常简约，有些是逼真的，而有些是奇幻的。这些游戏可能是由少数人制作的，也可能是由一大队专家团队制作的。是什么让根本上如此不同的游戏仍然能够达到相同的质量定义呢？答案非常简单，可以用三个一般原则来概括：一致性、可读性和抛光。虽然创作高水准的艺术和音频确实需要通过多年的学习和实践获得的技能，但遵循这些几条规则将有助于使任何游戏看起来更加专业。
- en: Consistency
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一致性
- en: Consistency sounds obvious but it is actually a lot more challenging than one
    might expect. Each sprite, background, or other art asset needs to be built with
    the same rule set. In the following screenshot you can see three variations of
    a plane flying with a city background. The first image is completely inconsistent
    as it has a flat shade with a pixel block styled plane and a photo-realistic background.
    The next image is more consistent than the first image as the city is flat shaded,
    but it lacks the crispness of the pixel block style. This is where most people
    might stop as it is close enough but there is still room for improvement. The
    final image is the most consistent as everything has the flat shading and the
    pixel block styling.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性听起来很明显，但实际上比人们预期的要具有挑战性得多。每个精灵、背景或其他艺术资源都需要按照相同的规则集构建。在下面的截图中，你可以看到飞机在城市背景下飞行的三种变化。第一张图片完全不一致，因为它有一个平面阴影和像素块风格的飞机，以及一个逼真的背景。下一张图片比第一张图片更一致，因为城市是平面阴影的，但缺乏像素块风格的清晰度。这是大多数人可能会停下来的地方，因为它已经足够接近了，但仍然有改进的空间。最后一张图片是最一致的，因为所有东西都有平面阴影和像素块风格。
- en: This process works just as easily in the opposite direction by having the plane
    become more photo-realistic. All that is needed is to choose one set of options
    and apply it equally across everything.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程同样可以轻松地朝相反方向进行，让飞机变得更加逼真。所需的只是选择一组选项，并将其均匀应用到所有内容上。
- en: '![Consistency](img/4100OT_02_35.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![一致性](img/4100OT_02_35.jpg)'
- en: Readability
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可读性
- en: Readability is all about ensuring that the correct information is being conveyed
    to the user. This can mean a wide range of things such as making sure the background
    is separated from the foreground, or making sure that collectible items don't
    look like hazards. In the following image, there are two sets of potions; one
    is poison and the other gives health. Just having a different color is not as
    readable to the player as indicating poison with a skull and the health with a
    heart. It is important to allow the player to easily understand what is going
    on so that they can react to it rather than contemplate it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性就是确保向用户传达正确的信息。这可能意味着很多事情，比如确保背景与前景分离，或者确保可收集的物品不像危险物品。在下面的图片中，有两组药水；一种是毒药，另一种是治疗药水。仅仅改变颜色对玩家来说并不那么可读，而用骷髅头表示毒药，用心脏表示治疗药水则更容易让玩家理解。重要的是让玩家能够轻松理解发生了什么，以便他们能够做出反应而不是思考。
- en: '![Readability](img/4100OT_02_36.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![可读性](img/4100OT_02_36.jpg)'
- en: Polish
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抛光
- en: Finally, the biggest factor, though often the least visible, is polish. Polish
    is all about the small details. It is a wide ranging element that covers everything
    from having particle effects when you collect an item to ensuring that the scoreboard
    is properly centered. In the following image, we have two avatar icons with statistic
    bars. The one on the left is functionally correct and looks decent. The one on
    the right, however, appears to be much more polished. The statistic bars are moved
    to the left so that there is no gap between them and the avatar icon, which was
    also centered properly. Hopefully you can see how a few slight adjustments can
    add a lot to the quality of polish.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽管通常不太显眼，但最重要的因素是抛光。抛光关乎细节。它涵盖了很多方面，从收集物品时产生粒子效果到确保记分牌正确居中。在下面的图片中，我们有两个带有统计条的头像图标。左边的那个在功能上是正确的，看起来还不错。然而，右边的那个似乎更加抛光。统计条被移到左边，这样它们和头像图标之间就没有间隙了，头像图标也被正确地居中了。希望你能看到一些微小的调整如何能够大大提高抛光的质量。
- en: '![Polish](img/4100OT_02_37.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![波兰语](img/4100OT_02_37.jpg)'
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Creating art and audio for games is an enormous task, both in terms of the
    time it takes and the assets to be produced. As a game developer, it is your responsibility
    to ensure that everything is cohesive and aesthetically pleasing, whether you
    are creating the assets or working with artists and sound designers. In this chapter
    you have started to understand how art and audio works in GameMaker: Studio and
    what the difference is between good and good enough. You learned about the acceptable
    image formats and how to import a sprite sheet. You created a tileset that will
    make better use of computer memory and allow for large unique worlds. You animated
    a sprite and made it loop properly. You also learned how to control sounds and
    the direction they are heard from. You are now ready to start making real games!'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '为游戏创建艺术和音频是一项巨大的任务，无论是在所需的时间还是要制作的资源方面。作为游戏开发者，您有责任确保一切都是连贯的和美观的，无论是创建资源还是与艺术家和音效设计师合作。在本章中，您已经开始了解在GameMaker:
    Studio中艺术和音频是如何工作的，以及好和足够好之间的区别。您了解了可接受的图像格式以及如何导入精灵表。您创建了一个将更好地利用计算机内存并允许创建大型独特世界的平铺集。您对精灵进行了动画处理，并使其正确循环。您还学会了如何控制声音以及它们的听觉方向。现在，您已经准备好开始制作真正的游戏了！'
- en: In the next chapter we are going to build our second game, a side scrolling
    shooter. We will create a player that moves around the screen, build several enemies
    that shoot weapons, create moving backgrounds, and implement a win/lose condition.
    Most exciting of all is that we will do all of this while learning the **GameMaker
    Language** (**GML**).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建我们的第二个游戏，一个横向卷轴射击游戏。我们将创建一个在屏幕上移动的玩家，建立几个射击武器的敌人，创建移动背景，并实现胜利/失败的条件。最令人兴奋的是，我们将在学习**GameMaker语言**（**GML**）的同时完成所有这些工作。
