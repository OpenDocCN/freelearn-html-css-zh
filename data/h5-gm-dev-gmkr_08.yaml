- en: Chapter 8. Playing with Particles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。玩转粒子
- en: Over the last two chapters we have built a robust physics-based game utilizing
    Joints, Fixtures, and Forces. We then added a full Front End that had a shop where
    the player could purchase equipment and unlockable levels. We also updated the
    HUD and implemented the Introductory and Score screens to round out each level.
    It feels almost like a complete game, but something is missing. The TNT blinks
    out of existence and the breaking of the Pillars just pops into view. In this
    chapter, we are going to solve this by adding a few particle effects to the game
    to help mask these changes. After this little bit of polish, our game will be
    ready for release!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的两章中，我们构建了一个利用关节、夹具和力的强大的基于物理的游戏。然后我们添加了一个完整的前端，其中有一个商店，玩家可以购买装备和解锁级别。我们还更新了HUD并实现了介绍和得分屏幕来完善每个级别。感觉几乎像是一个完整的游戏，但缺少了一些东西。TNT突然消失了，柱子的破裂也突然出现了。在本章中，我们将通过向游戏添加一些粒子效果来解决这个问题，以帮助掩盖这些变化。经过这一点点的润色，我们的游戏就可以发布了！
- en: Introducing particle effects
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍粒子效果
- en: 'Particle effects are the decorative flourishes used in games to represent dynamic
    and complex phenomena, such as fire, smoke, and rain. To create a particle effect,
    it requires three elements: a **System**, **Emitters**, and the **Particles**
    themselves.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子效果是游戏中用来表示动态和复杂现象的装饰性修饰，比如火、烟和雨。要创建一个粒子效果，需要三个元素：一个**系统**，**发射器**和**粒子**本身。
- en: Understanding particle systems
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解粒子系统
- en: Particle systems are the universe in which the particles and emitters live.
    Much like the universe, we cannot define the size but we can define a point of
    origin which all emitters and particles will be placed relative to. We can also
    have multiple particle systems in existence at any given time, which can be set
    to draw the particles at different depths. While we can have as many particle
    systems as we want, it is best to have as few as possible in order to prevent
    possible memory leaks. The reason for this is that once a particle system is created,
    it will remain in existence forever unless it is manually destroyed. Destroying
    the instance that spawned it or changing rooms will not remove the system, so
    make sure it is removed when it is no longer needed. By destroying a particle
    system, it will remove all the emitters and particles in that system along with
    it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统是粒子和发射器存在的宇宙。就像宇宙一样，我们无法定义大小，但可以定义一个原点，所有发射器和粒子都将相对于该原点放置。我们也可以同时存在多个粒子系统，并可以设置不同深度来绘制粒子。虽然我们可以拥有尽可能多的粒子系统，但最好尽可能少，以防止可能的内存泄漏。原因是一旦创建了粒子系统，它将永远存在，除非手动销毁。销毁生成它的实例或更改房间不会移除系统，因此确保在不再需要时将其移除。通过销毁粒子系统，将同时移除系统中的所有发射器和粒子。
- en: Utilizing particle emitters
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用粒子发射器
- en: 'Particle emitters are defined areas within a system from which particles will
    spawn. There are two types of emitters to choose from: **Burst** emitters that
    spawn particles a single time, and **Stream** emitters that spew particles continuously
    over time. We can define the size and shape of the region in space for each emitter,
    as well as how the particles should be distributed within the region.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子发射器是系统内定义的区域，粒子将从这些区域产生。有两种类型的发射器可供选择：**爆发**发射器一次性产生粒子，**流**发射器随时间不断喷射粒子。我们可以定义每个发射器在空间中的大小和形状区域，以及粒子在区域内的分布方式。
- en: '![Utilizing particle emitters](img/4100OT_08_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![利用粒子发射器](img/4100OT_08_01.jpg)'
- en: 'When defining the region in space, there are four **Shape** options : DIAMOND,
    ELLIPSE, LINE, and RECTANGLE. An example of each can be seen in the preceding
    diagram, all using exactly the same dimensions, amount of particles, and distribution.
    While there is no functional difference between using any one of these shapes,
    the effect itself can benefit from a properly chosen shape. For example, only
    a LINE can make an effect appear to be angled 30 degrees.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义空间区域时，有四种**形状**选项：菱形、椭圆、线和矩形。可以在前图中看到每种形状的示例，它们都使用完全相同的尺寸、粒子数量和分布。虽然使用这些形状之一之间没有功能上的区别，但效果本身可以受益于正确选择的形状。例如，只有线才能使效果看起来呈30度角。
- en: '![Utilizing particle emitters](img/4100OT_08_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![利用粒子发射器](img/4100OT_08_02.jpg)'
- en: The **distribution** of the particles can also affect how the particles are
    expelled from the emitter. As can be seen in the preceding diagram, there are
    three different distributions. **LINEAR** will spawn particles with an equal random
    distribution throughout the emitter region. **GAUSSIAN** will spawn particles
    more towards the center of the region. **INVGAUSSIAN** is the inverse of GAUSSIAN,
    wherein the particles will spawn closer to the edges of the emitter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子的**分布**也会影响粒子从发射器中喷射出来的方式。如前图所示，有三种不同的分布。**线性**将在发射器区域内均匀随机分布粒子。**高斯**将更多地在区域中心产生粒子。**反高斯**是高斯的反向，粒子将更靠近发射器的边缘产生。
- en: Applying particles
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用粒子
- en: 'Particles are the graphic resources that are spawned from the emitters. There
    are two types of particles that can be created: **Shapes** and **Sprites**. Shapes
    are the collection of 64 x 64 pixel sprites that comes built-in with GameMaker:
    Studio for use as particles. The shapes, as seen in the next diagram, are suitable
    for the majority of the most common effects, such as fireworks and flames. When
    wanting to create something more specialized for a game, we can use any Sprite
    in the Resource tree.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '粒子是从发射器产生的图形资源。可以创建两种类型的粒子：**形状**和**精灵**。形状是内置在GameMaker: Studio中用作粒子的64 x
    64像素精灵的集合。如下图所示，这些形状适用于大多数常见的效果，比如烟花和火焰。当想要为游戏创建更专业的效果时，可以使用资源树中的任何精灵。'
- en: '![Applying particles](img/4100OT_08_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![应用粒子](img/4100OT_08_03.jpg)'
- en: There are a lot of things we can do with particles by adjusting the many attributes
    available. We can define ranges for how long it lives, the color it should be,
    and how it moves. We can even spawn more particles at the point of death for each
    particle. There are, however, some things that we cannot do. In order to keep
    the graphics processing costs low, there is no ability to manipulate individual
    particles within an effect. Also, particles cannot interact with objects in any
    way, so there is no way to know if a particle has collided with an instance in
    the world. If we need this kind of control, we need to build objects instead.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整许多可用属性，我们可以通过粒子做很多事情。我们可以定义它的寿命范围，它应该是什么颜色，以及它如何移动。我们甚至可以在每个粒子的死亡点产生更多的粒子。然而，也有一些我们无法做到的事情。为了降低图形处理成本，没有能力在效果中操纵单个粒子。此外，粒子无法与任何对象进行交互，因此无法知道粒子是否与世界中的实例发生了碰撞。如果我们需要这种控制，我们需要构建对象。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Designing the look of a particle event is generally a trial and error process
    that can take a very long time. To speed things up, try using one of the many
    particle effect generators available on the Internet, such as Particle Designer
    2.5 by Alert Games found here: [http://alertgames.net/index.php?page=s/pd2](http://alertgames.net/index.php?page=s/pd2).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 设计粒子事件的外观通常是一个漫长的试错过程。为了加快速度，可以尝试使用互联网上提供的许多粒子效果生成器之一，比如Alert Games的Particle
    Designer 2.5，网址为：[http://alertgames.net/index.php?page=s/pd2](http://alertgames.net/index.php?page=s/pd2)。
- en: HTML5 limitations
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5的限制
- en: Using particle effects can really improve the visual quality of a game, but
    when developing a game intended to be played in a browser we need to be careful.
    Before implementing a particle effect, it is important to understand potential
    problems we may encounter. The biggest issue surrounding particles is that in
    order for them to be rendered smoothly without any lag, they need to be rendered
    with the graphics processor instead of the main CPU. Most browsers allow this
    to happen through a JavaScript API called **WebGL** . It is not, however, an HTML5
    standard and Microsoft has stated that they have no plans for Internet Explorer
    to support it for the foreseeable future. This means a potentially significant
    portion of the game's potential audience could suffer poor gameplay if particles
    are used. Additionally, even with WebGL enabled, the functionality for particles
    to have additive blending and advanced color blending cannot be used, as none
    of the browsers currently support this feature. Now that we know this we are ready
    to make some effects!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用粒子效果可以真正提高游戏的视觉质量，但在开发旨在在浏览器中玩的游戏时，我们需要小心。在实施粒子效果之前，了解可能遇到的问题非常重要。围绕粒子的最大问题是，为了使它们能够平稳地渲染而没有任何延迟，它们需要使用图形处理器而不是主CPU进行渲染。大多数浏览器通过一个名为**WebGL**的JavaScript
    API允许这种情况发生。然而，这不是HTML5的标准，微软已经表示他们没有计划在可预见的未来支持Internet Explorer。这意味着游戏潜在受众的一个重要部分可能会因为使用粒子而遭受游戏体验不佳。此外，即使启用了WebGL，粒子具有附加混合和高级颜色混合的功能也无法使用，因为目前没有浏览器支持这个功能。现在我们知道了这一点，我们准备制作一些效果！
- en: Adding particle effects to the game
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将粒子效果添加到游戏中
- en: We are going to build a few different particle effects to demonstrate the various
    ways effects can be implemented in a game, and to look into some of the issues
    that might arise. To keep things straightforward, all of the effects we create
    will be a part of a single, global particle system. We will use both types of
    emitters, and utilize both shape and sprite-based particles. We will start with
    a Dust Cloud that will be seen anytime a Pillar is broken or destroyed. We will
    then add a system to create a unique shrapnel effect for each Pillar type. Finally,
    we will create some fire and smoke effects for the TNT explosion to demonstrate
    moving emitters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一些不同的粒子效果，以演示游戏中实现效果的各种方式，并研究可能出现的一些问题。为了保持简单，我们创建的所有效果都将是单个全局粒子系统的一部分。我们将使用两种发射器类型，并利用基于形状和精灵的粒子。我们将从一个尘埃云开始，每当柱子被打破或摧毁时都会看到。然后，我们将添加一个系统，为每种柱子类型创建一个独特的弹片效果。最后，我们将创建一些火焰和烟雾效果，用于TNT爆炸，以演示移动发射器。
- en: Creating a Dust Cloud
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个尘埃云
- en: The first effect we are going to create is a simple Dust Cloud. It will burst
    outwards upon the destruction of each Pillar and dissolve away over time. As this
    effect will be used in every level of the game, we will make all of its elements
    global, so they only need to be declared once.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的第一个效果是一个简单的尘埃云。它将在每个柱子被摧毁时向外迸发，并随着时间的推移消失。由于这个效果将在游戏的每个级别中使用，我们将使其所有元素全局化，因此只需要声明一次。
- en: Open the Tower Toppling project we were previously working on if it is not already
    open.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们之前正在工作的倒塔项目，如果还没有打开的话。
- en: We need to make sure that WebGL is enabled when we build the game. Navigate
    to **Resources** | **Change Global Game Settings** and click on the **HTML5**
    tab.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建游戏时，我们需要确保启用了WebGL。导航到**资源** | **更改全局游戏设置**，然后点击**HTML5**选项卡。
- en: On the left-hand side, click on the tab for **Graphics**. As seen in the following
    screenshot, there are three options under **WebGL** in **Options**. If WebGL is
    **Disabled**, the game will not be able to use the GPU and all browsers will suffer
    from any potential lag. If WebGL is **Required**, any browser that does not have
    this capability will be prevented from running the game. The final option is **Auto-Detect**
    which will use WebGL if the browser supports it, but will allow all browsers to
    play the game no matter what. Select **Auto-Detect** and then click on **OK**.![Creating
    a Dust Cloud](img/4100OT_08_04.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧，点击**图形**选项卡。如下截图所示，在**选项**下有三个**WebGL**选项。如果**禁用**了WebGL，游戏将无法使用GPU，所有浏览器都会受到潜在的延迟影响。如果**需要**WebGL，任何不支持此功能的浏览器都将无法运行游戏。最后一个选项是**自动检测**，如果浏览器支持它，将使用WebGL，但无论如何都允许所有浏览器玩游戏。选择**自动检测**，然后点击**确定**。![创建一个尘埃云](img/4100OT_08_04.jpg)
- en: Now that we have WebGL activated we can build our effects. We will start by
    defining our particle system as a global variable by creating a new script called
    `scr_Global_Particles`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经激活了WebGL，我们可以构建我们的效果。我们将首先通过创建一个名为`scr_Global_Particles`的新脚本，将我们的粒子系统定义为全局变量。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first effect we are going to make is the Dust Cloud which will be attached
    to the Pillars. For this we only need a single emitter which we will move to the
    appropriate position when it is needed. Create a global variable for the emitter
    and add it to the particle system with the following code at the end of the script:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要制作的第一个效果是尘埃云，它将附着在柱子上。为此，我们只需要一个发射器，当需要时我们将其移动到适当的位置。创建一个发射器的全局变量，并在脚本的末尾添加以下代码将其添加到粒子系统中：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For this particle, we are going to use one of the built-in shapes, `pt_shape_explosion`,
    which looks like a little thick cloud of dust. Add the following code to the end
    of the script:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个粒子，我们将使用内置形状之一`pt_shape_explosion`，看起来像一团浓密的尘埃云。在脚本的末尾添加以下代码：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once again we have made this a global variable, so that we have to create this
    Dust Cloud particle only once. We have declared only the shape attribute of this
    particle at this time. We will add more to this later once we can see what the
    effect looks like in the game.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次将其设置为全局变量，这样我们只需要创建一次这个尘埃云粒子。目前我们只声明了这个粒子的形状属性。一旦我们在游戏中看到效果是什么样子，我们将再添加更多内容。
- en: We need to initialize the particle system with the other global variables. Reopen
    `scr_Global_GameStart` and call the particles script.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要用其他全局变量初始化粒子系统。重新打开`scr_Global_GameStart`并调用粒子脚本。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With everything initialized, we can now create a new script, `scr_Particles_DustCloud`,
    which we can use to set the region of the emitter and have it activate a burst
    of particles.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切初始化完成后，我们现在可以创建一个新的脚本`scr_Particles_DustCloud`，用于设置发射器的区域并激活一次粒子爆发。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We start by defining a small area for the emitter based on the position of instance
    that calls this script. The region itself will be circular with a Gaussian distribution
    so that the particles shoot out from the center. We then activate a single burst
    of 10 dust particles from the emitter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先根据调用此脚本的实例的位置定义一个发射器的小区域。区域本身将是圆形的，具有高斯分布，使得粒子从中心喷射出来。然后我们激活发射器中的10个尘埃粒子的单次爆发。
- en: 'All we need to do now is execute this script from the destruction of a Pillar.
    Reopen `scr_Pillar_Destroy` and insert the following line of code on the line
    before the instance is destroyed:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需要从柱子的破坏中执行这个脚本。重新打开`scr_Pillar_Destroy`并在实例被销毁之前的一行插入以下代码：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need to add this effect to the breaking of the Pillars as well. Reopen `scr_Pillar_BreakApart`
    and insert the same code in the same spot.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将这个效果添加到柱子的破碎中。重新打开`scr_Pillar_BreakApart`并在同一位置插入相同的代码。
- en: Save the game and then play it. When the glass Pillars are destroyed, we should
    see thick white clouds appearing as shown in the following screenshot:![Creating
    a Dust Cloud](img/4100OT_08_05.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏，然后进行游戏。当玻璃柱被摧毁时，我们应该看到厚厚的白色云朵出现，如下图所示：![创建尘埃云](img/4100OT_08_05.jpg)
- en: 'The particles are boring and static at this point, because we have not told
    the particles to do anything other than to look like the shape of a cloud. Let''s
    fix this by adding some attributes to the particle. Reopen `scr_Global_Particles`
    and add the following code at the end of the script:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这时粒子很无聊且静止，因为我们除了让粒子看起来像云的形状之外，还没有告诉粒子做任何事情。让我们通过向粒子添加一些属性来解决这个问题。重新打开`scr_Global_Particles`并在脚本的末尾添加以下代码：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first attribute we add is how long we want the particle to live for, which
    is a range between `15` and `30` steps, or at the speed of our rooms, a half to
    a whole second. Next, we want the particles to explode outwards, so we set the
    angle and add some velocity. Both functions that we are using have similar parameters.
    The first value is the particle type for which this is to be applied. The next
    two parameters are the minimum and maximum values from which a number will be
    randomly chosen. The fourth parameter sets an incremental value every step. Finally,
    the last parameter is a wiggle value that will randomly be applied throughout
    the particle's lifetime. For the Dust Cloud, we are setting the direction to be
    in any angle and the speed is fairly slow, ranging only a few pixels per step.
    We also want to change the size of the particles and their transparency, so that
    the dust appears to dissipate.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的第一个属性是粒子的寿命，这是在`15`和`30`步之间的范围，或者以我们房间的速度来说，是半秒到一秒。接下来，我们希望粒子向外爆炸，所以我们设置角度并添加一些速度。我们使用的两个函数都有类似的参数。第一个值是要应用于的粒子类型。接下来的两个参数是将从中随机选择一个数字的最小和最大值。第四个参数设置每步的增量值。最后，最后一个参数是一个摆动值，将在粒子的寿命中随机应用。对于尘埃云，我们设置方向为任意角度，速度相当慢，每步只有几个像素。我们还希望改变粒子的大小和透明度，使得尘埃看起来消散。
- en: Save the game and run it again. This time the effect appears much more natural,
    with the clouds exploding outwards, growing slightly larger, and fading out. It
    should look something like the next screenshot. The Dust Cloud is now complete.![Creating
    a Dust Cloud](img/4100OT_08_06.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏并再次运行。这次效果看起来更自然，云朵向外爆炸，稍微变大，然后消失。它应该看起来像下一个截图。尘埃云现在已经完成。![创建尘埃云](img/4100OT_08_06.jpg)
- en: Adding in Shrapnel
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加弹片
- en: The Dust Cloud effect helps the Pillar destruction appear more believable, but
    it lacks the bigger chunks of material one would expect to see. We want some Shrapnel
    of various shapes and sizes to explode outwards for each of the different types
    of Pillars. We will start with the Glass particles.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尘埃云效果有助于使柱子的破坏看起来更真实，但缺少人们期望看到的更大的材料碎片。我们希望各种形状和大小的弹片朝外爆炸，以适应不同类型的柱子。我们将从玻璃粒子开始。
- en: Create a new Sprite, `spr_Particle_Glass`, and with **Remove Background** checked,
    load `Chapter 8/Sprites/Particle_Glass.gif`. This sprite is not meant to be animated,
    though it does have several frames within it. Each frame represents a different
    shape of particle that will be randomly chosen when the particle is spawned.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Sprite，`spr_Particle_Glass`，并勾选**删除背景**，加载`Chapter 8/Sprites/Particle_Glass.gif`。这个Sprite不是用来做动画的，尽管它内部有几个帧。每一帧代表一个将在生成粒子时随机选择的不同形状的粒子。
- en: We will want the particles to rotate as they move outwards, so we need to center
    the origin. Click on **OK**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望粒子在向外移动时旋转，因此我们需要将原点居中。点击**确定**。
- en: Reopen `scr_Global_Particles` and initialize the Glass particle at the end of
    the script.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`scr_Global_Particles`，并在脚本的末尾初始化玻璃粒子。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once we have created the global variable and the particle, we set the particle
    type to be a Sprite. When assigning Sprites there are a few extra parameters beyond
    which resources should be used. The third and fourth parameters are for whether
    it should be animated, and if so, should the animation stretch for the duration
    of the particle's life. In our case we are not using animation, so it has been
    set to `false`. The last parameter is for whether we want it to choose a random
    subimage of the Sprite, which is what we do want it to do.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了全局变量和粒子，我们就将粒子类型设置为Sprite。在分配Sprites时，除了应该使用哪些资源之外，还有一些额外的参数。第三和第四个参数是关于它是否应该是动画的，如果是，动画是否应该延伸到粒子的寿命。在我们的情况下，我们不使用动画，所以它被设置为“false”。最后一个参数是关于我们是否希望它选择Sprite的随机子图像，这正是我们希望它做的。
- en: 'We also need to add some attributes to this particle for life and movement.
    Add the following code at the end of the script:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要为这种粒子添加一些生命和运动属性。在脚本的末尾添加以下代码：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When compared with the Dust Cloud, this particle will have a shorter lifespan
    but will move at a much higher velocity. This will make this effect more intense
    while keeping the general area small. We have also added some rotational movement
    through `part_type_orientation`. The particles can be set to any angle and will
    rotate 20 degrees per frame with a variance of up to four degrees. This will give
    us a nice variety in the spin of each particle. There is one additional parameter
    for orientation, which is whether the angle should be relative to its movement.
    We have set it to `false` as we just want the particles to spin freely.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与尘埃云相比，这种粒子的寿命会更短，但速度会更高。这将使效果更加强烈，同时保持一般区域较小。我们还通过`part_type_orientation`添加了一些旋转运动。粒子可以设置为任何角度，并且每帧旋转20度，最多可变化四度。这将给我们每个粒子的旋转带来很好的变化。旋转还有一个额外的参数，即角度是否应该相对于其运动。我们将其设置为“false”，因为我们只希望粒子自由旋转。
- en: To test this effect out, open up `scr_Particles_DustCloud` and insert a burst
    emitter before the Dust Cloud is emitted, so that the Glass particles appear behind
    the other effect.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试这种效果，打开`scr_Particles_DustCloud`，并在发射尘埃云之前插入一个爆发发射器，这样玻璃粒子就会出现在其他效果的后面。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the game and then play it. When the Pillars break apart, there should be
    shards of Glass exploding out along with the Dust Cloud. The effect should look
    something like the following screenshot:![Adding in Shrapnel](img/4100OT_08_07.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏，然后玩游戏。当柱子破碎时，应该会有玻璃碎片和尘埃云一起爆炸出来。效果应该看起来类似于以下截图：![添加弹片](img/4100OT_08_07.jpg)
- en: Next we need to create Shrapnel for the Wood and Steel particles. Create new
    Sprites for `spr_Particle_Wood` and `spr_Particle_Steel` with the supplied images
    in `Chapter 8/Sprites/` in the same manner as we did for Glass.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为木材和钢铁粒子创建弹片。以与我们为玻璃做的方式相同，在`Chapter 8/Sprites/`中创建新的Sprites`spr_Particle_Wood`和`spr_Particle_Steel`。
- en: As these particles are global, we cannot just swap the Sprite out dynamically.
    We need to create new particles for each type. In `scr_Global_Particles`, add
    particles for both Wood and Steel with the same attributes as Glass.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这些粒子是全局的，我们不能动态地交换Sprite。我们需要为每种类型创建新的粒子。在`scr_Global_Particles`中，添加木材和钢铁的粒子，属性与玻璃相同。
- en: 'Currently the effect is set to **Always create Glass particles**, something
    we do not want to do. To fix this we are going to add a variable, `myParticle`,
    to each of the different Pillars to allow us to spawn the appropriate particle.
    Open `scr_Pillar_Glass_Create` and add the following code at the end of the script:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，效果被设置为**始终创建玻璃粒子**，这是我们不想做的。为了解决这个问题，我们将在每个不同的柱子中添加一个变量`myParticle`，以允许我们生成适当的粒子。打开`scr_Pillar_Glass_Create`，并在脚本的末尾添加以下代码：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Repeat the last step for Wood and Steel with the appropriate particle assigned.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适当的粒子重复最后一步，为木材和钢铁分配适当的粒子。
- en: 'In order to have the proper particle spawn, all we need to do is reopen `scr_Particles_DustCloud`
    and change the variable `particle_Glass` to `myParticle` as in the following code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确生成粒子，我们只需要重新打开`scr_Particles_DustCloud`，并将变量`particle_Glass`更改为`myParticle`，如下所示：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save the game and play the game until you can destroy all the three types of
    Pillars to see the effect. It should look something similar to the following screenshot,
    where each Pillar spawns its own Shrapnel:![Adding in Shrapnel](img/4100OT_08_08.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏并玩游戏，直到你可以摧毁所有三种类型的柱子以查看效果。它应该看起来类似于以下截图，其中每个柱子都会生成自己的弹片：![添加弹片](img/4100OT_08_08.jpg)
- en: Making the TNT explosion
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作TNT爆炸
- en: When the TNT explodes, it shoots out some TNT Fragments which are currently
    bland looking Sprites. We want the Fragments to be on fire as they streak across
    the scene. We also want a cloud of smoke to rise up from the explosion to indicate
    that the explosion we see is actually on fire. This is going to cause some complications.
    In order to make something appear to be on fire, it will need to change color,
    say from white to yellow to orange. As we have already mentioned, due to the fact
    that WebGL is not supported by all browsers, we cannot utilize any of the functions
    that allow us to blend colors together. This means that we need to work around
    this issue. The solution is to use several particles instead of one.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当TNT爆炸时，它会发射一些目前外观普通的TNT碎片。我们希望这些碎片在穿过场景时着火。我们还希望爆炸产生一团烟雾，以表明我们看到的爆炸实际上是着火的。这将引起一些复杂情况。为了使某物看起来着火，它需要改变颜色，比如从白色到黄色再到橙色。由于WebGL并非所有浏览器都支持，我们无法利用任何允许我们混合颜色的函数。这意味着我们需要解决这个问题。解决方案是使用多个粒子而不是一个。
- en: 'We will start by creating some custom colors so that we can achieve the look
    of fire and smoke that we want. Open `scr_Global_Colors` and add the following
    colors:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建一些自定义颜色，以便实现我们想要的火焰和烟雾效果。打开`scr_Global_Colors`并添加以下颜色：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We already have a nice yellow color, so we add an orange, a slightly yellow
    tinted white, and a partially orange black color.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个漂亮的黄色，所以我们添加了一个橙色、一个略带黄色色调的白色，以及一个部分橙色的黑色。
- en: 'In order to achieve the fake blending effect we will need to spawn one particle
    type, and upon its death, have it spawn the next particle type. For this to work
    properly, we need to construct the creation of the particles in the opposite order
    that they will be seen. In this case, we need to start by building the smoke particle.
    In `scr_Global_Particles` add a new particle for the smoke with the following
    attributes:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了实现虚假混合效果，我们需要产生一种粒子类型，并在其死亡时产生下一种粒子类型。为了使其正常工作，我们需要按照它们将被看到的相反顺序构建粒子的创建。在这种情况下，我们需要从烟雾粒子开始构建。在`scr_Global_Particles`中添加一个新的烟雾粒子，具有以下属性：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We start by adding the particle and using the built-in smoke shape. We want
    the smoke to linger for a while, so we set its life to range between a minimum
    of a second to almost two full seconds. We then set the direction and speed to
    be more or less upwards so that the smoke rises. Next, we set the size and have
    it grow over time. With the alpha values, we don't want the smoke to be completely
    opaque, so we set it to start at half transparent and fade away over time. Next,
    we are using `part_type_color1` which allows us to tint the particle without affecting
    the performance very much. Finally, we apply some gravity to the particles so
    that any angled particles float slowly upwards.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先添加粒子并使用内置的烟雾形状。我们希望烟雾停留一段时间，所以我们将其寿命设置为一秒到接近两秒。然后，我们设置方向和速度大致向上，这样烟雾就会上升。接下来，我们设置大小并随着时间增长。对于alpha值，我们不希望烟雾完全不透明，所以我们将其设置为半透明并随着时间消失。接下来，我们使用`part_type_color1`，这样可以给粒子着色而不会对性能产生太大影响。最后，我们对粒子施加一些重力，这样任何倾斜的粒子都会慢慢向上飘浮。
- en: The smoke is the final step of our effect and it will be spawned from an orange
    flame that precedes it.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 烟雾是我们效果的最后一步，它将从先前的橙色火焰中产生。
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once again we set up the particle using the built-in smoke shape, this time
    with a much shorter lifespan. The general direction is still mainly upwards, though
    there is more spread than the smoke. These particles are slightly smaller, tinted
    orange and will be partially transparent for its entire life. We have added a
    little bit of upward gravity, as this particle is in between fire and smoke. Finally,
    we are using a function that will spawn a single particle of smoke upon the death
    of each orange particle.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用内置的烟雾形状来设置粒子，这次寿命要短得多。总体方向仍然主要向上，尽管比烟雾更散。这些粒子稍小，呈橙色，整个寿命都将是部分透明的。我们增加了一点向上的重力，因为这个粒子介于火和烟雾之间。最后，我们使用一个函数，当每个橙色粒子死亡时会产生一个烟雾粒子。
- en: The next particle in the chain for this effect is a yellow particle. This time
    we are going to use the FLARE shape, which will give a better appearance of fire.
    It will also be a bit smaller, live slightly longer than the orange particle,
    and move faster, spreading in all directions. We will not add any transparency
    to this particle so that it appears to burn bright.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种效果链中的下一个粒子是黄色粒子。这次我们将使用FLARE形状，这将给火焰一个更好的外观。它也会稍小一些，比橙色粒子活得稍长一些，速度更快，向各个方向扩散。我们不会给这个粒子添加任何透明度，这样它看起来会燃烧得更明亮。
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have only one more particle to create this effect for, which is the hottest
    and brightest white particle. Its construction is the same as the yellow particle,
    except it is smaller and faster.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只需要为最后一个粒子创建这种效果，这是最热和最明亮的白色粒子。它的构造与黄色粒子相同，只是它更小更快。
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We now have all the particles we need for this particle effect; we just need
    to add an emitter to spawn them. This time we are going to use a stream emitter,
    so that the fire continuously flows out of each Fragment. Since the Fragments
    are moving, we will need to have a unique emitter for each Fragment we create.
    This means it cannot be a global emitter, but rather a local one. Open `scr_TNT_Fragment_Create`
    and add the following code at the end of the script:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经拥有了这种粒子效果所需的所有粒子，我们只需要添加一个发射器来产生它们。这次我们将使用一个流发射器，这样火焰就会不断地从每个碎片中流出。由于碎片在移动，我们需要为每个创建的碎片都有一个独特的发射器。这意味着它不能是全局发射器，而是一个局部发射器。打开`scr_TNT_Fragment_Create`并在脚本的末尾添加以下代码：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We create an emitter with a fairly small area for spawning with balanced distribution.
    At every step, the emitter will create five new Fire particles as long as the
    emitter exists.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个具有相对较小区域的发射器，用于生成平衡分布的火焰粒子。在每一步中，只要发射器存在，它就会创建五个新的火焰粒子。
- en: 'The emitter is now created at the same time as the Fragment, but we need the
    emitter to move along with it. Open `scr_TNT_Fragment_Step` and add the following
    code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发射器现在与碎片同时创建，但我们需要发射器随之移动。打开`scr_TNT_Fragment_Step`，并添加以下代码：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As already mentioned we need to destroy the emitter, otherwise it will never
    stop streaming particles. For this we will need to open `obj_TNT_Fragment` and
    add a `destroy` event with a new Script, `scr_TNT_Fragment_Destroy`, which removes
    the emitter attached.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，我们需要摧毁发射器，否则它将永远不会停止流出粒子。为此，我们需要打开`obj_TNT_Fragment`，并添加一个`destroy`事件，附加一个新的脚本`scr_TNT_Fragment_Destroy`，用于移除附加的发射器。
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This function will remove the emitter from the system without removing any of
    the particles that had been spawned.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将从系统中移除发射器，而不会移除已生成的任何粒子。
- en: One last thing we need to do is to uncheck the **Visible** checkbox, as we don't
    want to see the Fragment sprite, but just the particles.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是取消**可见**复选框的选中，因为我们不想看到碎片精灵，只想看到粒子。
- en: Save the game and detonate the TNT. Instead of just seeing a few Fragments,
    there are now streaks of fire jetting out of the explosion that turn into dark
    clouds of smoke that float up. It should look something like the following screenshot:![Making
    the TNT explosion](img/4100OT_08_09.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏并引爆TNT。现在不仅可以看到一些碎片，还有火焰喷射出爆炸，变成漂浮上升的黑色烟雾。它应该看起来像以下截图：![制作TNT爆炸](img/4100OT_08_09.jpg)
- en: Cleaning up the particles
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理粒子
- en: 'At this point, we have built a good variety of effects using various particles
    and emitters. The effects have added a lot of polish to the game, but there is
    a flaw with the particles. If the player decides to restart the room or go to
    the **SHOP** immediately after the explosion has occurred, the emitters will not
    be destroyed. This means that they will continue to spawn particles forever, and
    we will lose all references to those emitters. The game will end up looking like
    the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用各种粒子和发射器构建了各种效果。这些效果为游戏增添了许多亮点，但粒子存在一个缺陷。如果玩家决定在爆炸发生后立即重新开始房间或前往**商店**，那么发射器将不会被摧毁。这意味着它们将继续永远产生粒子，我们将失去对这些发射器的所有引用。游戏最终会看起来像以下截图：
- en: '![Cleaning up the particles](img/4100OT_08_10.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![清理粒子](img/4100OT_08_10.jpg)'
- en: The first thing we need to do is to destroy the emitters when we leave the room.
    Luckily, we have already written a script that does exactly this. Open `obj_TNT_Fragment`
    and add a **Room End** event and attach `scr_TNT_Fragment_Destroy` to it.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是在离开房间时摧毁发射器。幸运的是，我们已经编写了一个可以做到这一点的脚本。打开`obj_TNT_Fragment`，添加一个**房间结束**事件，并将`scr_TNT_Fragment_Destroy`附加到其中。
- en: 'Even if we destroy the emitters before changing rooms, any particles remaining
    in the game will still appear in the next room, if only briefly. What we need
    to do is clear all the particles from the system. While this might sound like
    it could be a lot of work, it is actually quite simple. As Overlord is in every
    level, but not in any other room, we can use it to clean up the scene. Open `obj_Overlord`,
    add a **Room End** event and attach a new Script, `scr_Overlord_RoomEnd`, with
    the following line of code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使我们在改变房间之前摧毁了发射器，游戏中任何剩余的粒子仍然会在下一个房间中出现，即使只是短暂地。我们需要做的是清除系统中的所有粒子。虽然这听起来可能是很多工作，但实际上非常简单。由于Overlord存在于每个级别中，但不在任何其他房间中，我们可以使用它来清理场景。打开`obj_Overlord`，添加一个**房间结束**事件，并附加一个新的脚本`scr_Overlord_RoomEnd`，其中包含以下代码：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This function will remove any particle that exists within the system, but will
    not remove the particle type from memory. It is important that we do not destroy
    the particle type, as we would not be able to use a particle again if its type
    no longer exists.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将移除系统中存在的任何粒子，但不会从内存中移除粒子类型。重要的是我们不要销毁粒子类型，因为如果其类型不再存在，我们将无法再次使用粒子。
- en: Save the game, explode some TNT, and restart the room immediately. You should
    no longer see any particles in the scene.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏，引爆一些TNT，并立即重新开始房间。您现在不应该在场景中看到任何粒子。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started the chapter with a complete game, and now we have added some spit
    and polish to really make it shine. We delved into the world of particles and
    created a variety of effects that add impact to the TNT and Pillar destruction.
    The game is now complete and ready to be released.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个完整的游戏开始这一章，现在我们已经添加了一些修饰，使其真正闪耀。我们深入了解了粒子的世界，并创建了各种效果，为TNT和柱子的破坏增添了影响力。游戏现在已经完成，准备发布。
- en: In the next chapter we are going to consider putting this game out on the Internet.
    We will cover uploading it to your own website, hosting it on Facebook, and submitting
    it to game portals. We will also take a look at using the various built-in developer
    services, such as analytics and advertising. Let's get the game out there!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将考虑将这个游戏发布到互联网上。我们将介绍将其上传到您自己的网站，将其托管在Facebook上，并将其提交到游戏门户。我们还将研究使用各种内置的开发者服务，如分析和广告。让我们把游戏发布出去！
