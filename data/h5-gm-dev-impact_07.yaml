- en: Chapter 7. Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 图形
- en: 'You can have the perfectly working script, but there is no game when there
    is nothing to see. Graphics are important and here we will look into how to get
    them and implement them in ImpactJS. In this chapter you will learn:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以有完美运行的脚本，但如果没有东西可看，就没有游戏。图形很重要，我们将在这里探讨如何获得它们并在ImpactJS中实现它们。在本章中，你将学到：
- en: The types of graphics present
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的图形
- en: What you should consider while deciding whether to make or buy them
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在决定是制作还是购买图形时你应该考虑什么
- en: How to make vector graphics using the free tool, Inkscape
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用免费工具Inkscape制作矢量图形
- en: How to turn reality into a game with the use of Adobe Photoshop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何利用Adobe Photoshop将现实变成游戏
- en: 'Game graphics have been evolving since the start of digital gaming. Take a
    quick peek at Spacewar! and its arcade version, Computer Space, Pong, Gun fight,
    and many other games from ancient times. The first thing you will notice is not
    the difference in gameplay but the lack of graphical splendor. The development
    of faster computers and dedicated graphical processors has made games increasingly
    pretty to look at. There was certainly a general trend towards more realism: how
    much can we make a game look like a real-life one without burning our processors
    to a crisp? It''s a bit like what happened with paintings in general. Painters
    tended to strive towards more detail, a better approximation of what you would
    see in real life. It was a challenge to do, until they started using optical lenses
    to reflect an image directly to the canvas. All they then had to do was trace
    and color it. Artists started looking at new ways to express themselves on a canvas
    since perfection was not a guarantee for success any longer. Centuries after graphical
    perfection was reached, the world saw paintings like Pablo Picasso''s Guernica
    and the Scream of Edvard Munch. Neither of these is even close to reaching perfect
    realism; they both have something to intrigue people though.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自数字游戏开始以来，游戏图形一直在不断发展。快速浏览一下《太空战争！》及其街机版本《计算机空间》，《乒乓球》，《枪战》，以及许多其他古老的游戏。你会注意到的第一件事不是游戏玩法的不同，而是缺乏图形的华丽。更快的计算机和专用图形处理器的发展使得游戏变得越来越漂亮。当然，有一个普遍的趋势朝着更多的现实主义发展：我们能让游戏看起来多像现实生活而不会把我们的处理器烧毁？这有点像绘画的发展。画家们倾向于追求更多的细节，更好地逼近现实生活中所见的东西。这是一个挑战，直到他们开始使用光学透镜将图像直接反射到画布上。然后他们只需要描绘和上色。艺术家们开始寻找在画布上表达自己的新方法，因为完美不再是成功的保证。几个世纪后，当图形完美达到时，世界看到了像毕加索的《格尔尼卡》和爱德华·蒙克的《尖叫》这样的绘画。这两者都远非接近完美的现实主义；但它们都有一些东西能吸引人们。
- en: Something similar seems to be happening in the gaming world. Recent games have
    proven we can come terrifyingly close to realism, and some game developers have
    begun looking for more original looks. For example, Nintendo has never strived
    to come close to delivering realistic graphics, yet their skill in producing great
    games is revered all over the world. This is because they understand that stirring
    up a certain feeling in the player is more important than showing the same thing
    a player would see by looking away from their screen.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏世界中似乎正在发生类似的事情。最近的游戏已经证明我们可以非常接近现实，一些游戏开发者已经开始寻找更原创的外观。例如，任天堂从未努力接近提供逼真的图形，但他们在制作优秀游戏方面的技能在全世界都受到尊敬。这是因为他们明白，在玩家心中激起某种感觉比展示玩家从屏幕上看到的东西更重要。
- en: Take a look at Yoshi's Island, a game released for Super Nintendo in 1995\.
    The depicted scenery here is far from realistic. Yet, just playing it for 10 minutes
    fills you with a feeling of joy. Everything looks so happy and sparkling, with
    bright and happy colors. When they don't intend to kill you, animals and even
    clouds smile at you with a sincere cheerfulness.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 看看1995年发行的超级任天堂游戏《耀西岛》。这里描绘的场景远非现实。然而，只要玩上10分钟，你就会充满快乐的感觉。一切看起来都是如此快乐和闪闪发光，色彩明亮而快乐。当它们不打算杀死你时，动物甚至云朵都会用真诚的快乐微笑着看着你。
- en: 'Zelda: The Wind Waker, released in 2003, was one of the first big games using
    cell-shaded graphics. Cell-shaded or toon-shaded graphics appear as if they are
    hand drawn. Cell shading has been used by quite a number of other very successful
    games like Borderlands and Okami.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 《塞尔达传说：风之杖》于2003年发布，是最早使用卡通渲染图形的大型游戏之一。卡通渲染或卡通风格的图形看起来就像是手绘的。卡通渲染已经被许多其他非常成功的游戏使用，如《无主之地》和《大神》。
- en: The previous examples were 3D games, but the very fact you are now reading this
    is proof that making a game is not about graphics alone. Many years ago, games
    made the transition from 2D to 3D with great success. Even our beloved flat-lander
    Mario was able to make its transition splendidly. 3D games are generally regarded
    as being more pleasant to look at than 2D games. Yet, here you are, preparing
    yourself to make a 2D game. It is proof that nice graphics are important to convey
    a certain feeling, but conveying this is possible in any form you wish, like art
    itself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子是3D游戏，但你现在正在阅读这篇文章就证明了制作游戏并不仅仅是关于图形。许多年前，游戏成功地从2D过渡到3D。即使我们心爱的马里奥也能够出色地完成这个过渡。3D游戏通常被认为比2D游戏更令人愉悦。然而，你现在正在准备制作一个2D游戏。这证明了漂亮的图形对传达某种感觉很重要，但你可以以任何你希望的形式来传达这种感觉，就像艺术本身一样。
- en: Making/buying the graphics
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作/购买图形
- en: 'Do we need to buy or make our own graphics while making a game? We are lucky
    to at least have a choice in this. For 3D games the option for making graphics
    yourself is often restricted by the size of your development team. With 2D games,
    the option of doing it all on your own remains a realistic one. If you have no
    budget for buying sprites and tilesets, you have three major options for creating
    your graphics:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作游戏时，我们需要购买或制作自己的图形吗？我们至少有幸在这方面有选择。对于3D游戏，自己制作图形的选择通常受到开发团队规模的限制。对于2D游戏，自己完成所有工作的选择仍然是一个现实的选择。如果你没有预算购买精灵和瓷砖集，你有三个主要选项来创建你的图形：
- en: Pixel art
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像素艺术
- en: Vector art
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量艺术
- en: Creating reality using Photoshop
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Photoshop创造现实
- en: 'Of these three options, drawing your characters and scenery yourself pixel
    by pixel is the most ambitious one. Great artists can get really nice results
    with this, but even the most experienced pixel artist will spend several hours
    on just a few characters and tilesets. There are several tools out there to help
    you transfer your own drawing skill to the PC, such as the digital drawing pen
    and software: Adobe Photoshop or it''s free counterpart GIMP. If you have no experience
    in drawing in general and don''t feel a strong urge to commit yourself to this
    in any way, then simply don''t.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个选项中，逐像素绘制你的角色和场景是最雄心勃勃的选择。优秀的艺术家可以用这种方法得到非常好的结果，但即使是最有经验的像素艺术家也会花费数小时来绘制几个角色和瓷砖集。有一些工具可以帮助你将自己的绘画技能转移到电脑上，比如数字绘画笔和软件：Adobe
    Photoshop或其免费的对应物GIMP。如果你对绘画没有任何经验，也没有强烈的冲动去投入精力学习，那就干脆不要尝试。
- en: The second option is vector graphic design. Vector graphics differ from pixel
    art in that drawings are built up with lines and basic forms, not individual dots.
    These lines and forms are freely scalable to both higher and lower resolutions,
    whereas for pixel art, this can be very difficult. Building up drawings from basic
    forms such as the rectangle, circle, and lines require a different kind of insight
    than regular drawing does. The prerequisite to making graphics is basically transferred
    from needing a steady hand to having an analytical view on objects and life forms.
    Take the birds from Angry Birds as an example. Their basic form is a circle with
    circular eyes placed in the center. Their beaks are somewhat rounded triangles
    and their eyebrows and tails are nothing more than a collection of rectangles.
    If you look at these angry birds from this more analytical point of view, it becomes
    easier to draw one yourself. If you feel you have that somewhat analytical insight,
    even if your drawing skills are only average, you can make your own tilesets if
    you put in enough effort. In this chapter there will be a short introduction on
    how to do this.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择是矢量图形设计。矢量图形与像素艺术不同，因为图形是由线条和基本形状构建而成，而不是单独的点。这些线条和形状可以自由缩放到更高或更低的分辨率，而对于像素艺术来说，这可能非常困难。从基本形状如矩形、圆形和线条构建图形需要一种不同于常规绘画的洞察力。制作图形的先决条件基本上是从需要稳定的手转变为对物体和生物的分析视角。以《愤怒的小鸟》中的鸟为例。它们的基本形状是一个圆，眼睛放在中心的圆形上。它们的喙略呈圆形三角形，它们的眉毛和尾巴只是一堆矩形。如果你从这种更分析的角度看这些愤怒的小鸟，那么自己画一个就会变得更容易。如果你觉得自己有一些分析洞察力，即使你的绘画技能只是普通水平，只要你付出足够的努力，你就可以制作自己的瓷砖集。本章将简要介绍如何做到这一点。
- en: The last option is more of a quick fix. By taking pictures of objects and turning
    those into tilesets, you can quickly have some graphics at your disposal. While
    getting close to a realistic scene is very difficult for 3D games, it's actually
    the easiest way to go in 2D games. The main problem here of course is the fact
    that you cannot distinguish yourself easily from competitors if you use adjusted
    pictures, which is a real drawback while marketing your game. Nevertheless, the
    graphics look nice and it's a quick and cheap way to get them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选择更像是一个快速解决方案。通过拍摄物体的照片并将其转换为瓷砖集，你可以迅速获得一些图形。虽然对于3D游戏来说，接近真实场景是非常困难的，但对于2D游戏来说，这实际上是最简单的方法。当然，这里的主要问题是，如果使用调整后的图片，你很难在竞争对手中脱颖而出，这在推广游戏时是一个真正的缺点。尽管如此，这些图形看起来很好，这是一种快速而廉价的获取图形的方式。
- en: Where to buy graphics
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购买图形的地方
- en: Even though 2D games are quite common, there are not many companies out there
    that are specialized in supplying tilesets to hobby game developers. Most game
    artists either work for the game company itself or work on a custom basis, which
    often becomes too expensive for someone developing games in his or her free time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管2D游戏相当普遍，但并没有很多公司专门为业余游戏开发者提供瓷砖集。大多数游戏艺术家要么为游戏公司工作，要么按照客户的要求工作，这往往对于业余时间开发游戏的人来说太昂贵了。
- en: However, there are a few affordable 2D game graphic producers out there, for
    example, [www.sprites4games.com](http://www.sprites4games.com). They have some
    free sprites available but they are especially praised for their beautiful yet
    affordable custom work
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些价格实惠的2D游戏图形制作商，例如[www.sprites4games.com](http://www.sprites4games.com)。他们有一些免费的精灵可用，但他们尤其因其美丽而实惠的定制作品而备受赞誉。
- en: 'While downloading free tilesets from random web pages, there are two main issues:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从随机网页下载免费瓷砖集时，存在两个主要问题：
- en: The tilesets are very incomplete, so they don't actually allow you to create
    an entire game out of them.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓷砖集非常不完整，因此实际上无法用它们来创建整个游戏。
- en: The other problem with free tilesets is that they are not actually free. They
    are often ripped from an existing game and reusing them is illegal.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费瓷砖集的另一个问题是它们实际上并不是免费的。它们经常是从现有游戏中剥离出来的，重新使用它们是违法的。
- en: For example, on [www.spritedatabase.net](http://www.spritedatabase.net), you
    can download the tilesets of entire games. But using them for actually publishing
    your own game will probably result in getting sued for copyright violation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[www.spritedatabase.net](http://www.spritedatabase.net)，你可以下载整个游戏的瓷砖集。但实际上使用它们来发布你自己的游戏可能会导致因侵犯版权而被起诉。
- en: 'Sometimes you can also find tilesets on the bigger art and photo websites,
    such as [www.shutterstock.com](http://www.shutterstock.com). The problem here
    is clutter; it''s difficult to find actual game graphics between all those other
    pictures. If you finally found some, you face the same problem as with the free
    ones: incompleteness. You can, at that point, contact the artist and request some
    more graphics but then it becomes custom work again, which can often become rather
    expensive.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你也可以在更大的艺术和照片网站上找到瓷砖集，比如[www.shutterstock.com](http://www.shutterstock.com)。问题在于混乱；在所有这些其他图片中找到实际的游戏图形是很困难的。如果你最终找到了一些，你将面临与免费瓷砖集相同的问题：不完整。在那时，你可以联系艺术家并请求更多的图形，但那又变成了定制工作，这往往会变得相当昂贵。
- en: Introduction to vector graphics
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矢量图形介绍
- en: 'Now that we have taken a look at our different options, let''s dive a little
    deeper into one of them: creating our own vector graphics. There are several interesting
    tools out there to help you with this. Adobe Illustrator is one of the best on
    the market. However, here we will use a somewhat less advanced but free tool:
    Inkscape. You can download Inkscape on their website: [www.inkscape.org/download/](http://
    www.inkscape.org/download/).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了不同的选项，让我们深入了解其中一个：创建我们自己的矢量图形。有几种有趣的工具可以帮助你。Adobe Illustrator是市场上最好的之一。然而，在这里我们将使用一个稍微不那么先进但免费的工具：Inkscape。你可以在他们的网站上下载Inkscape：[www.inkscape.org/download/](http://
    www.inkscape.org/download/)。
- en: Once we have installed Inkscape on our computer, we can go ahead and make ourselves
    a robot character.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在计算机上安装了Inkscape，我们就可以开始制作一个机器人角色。
- en: 'There are several ways to draw yourself a character or an object. The true
    artists do so using the pen tool as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以绘制自己的角色或物体。真正的艺术家使用钢笔工具来完成，如下面的截图所示：
- en: '![Introduction to vector graphics](img/4568_7_3.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形简介](img/4568_7_3.jpg)'
- en: 'This is a very versatile drawing tool, which enables you to draw both straight
    lines and the most perfect symmetrical curves. However, in this short beginner
    tutorial, we will limit ourselves to using basic forms such as rectangles and
    circles to construct our small robot, as shown in the following diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常多才多艺的绘图工具，它使您能够绘制直线和最完美对称的曲线。然而，在这个简短的初学者教程中，我们将限制自己使用基本形状，如矩形和圆来构建我们的小机器人，如下图所示：
- en: '![Introduction to vector graphics](img/4568_7_4.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形简介](img/4568_7_4.jpg)'
- en: 'It is effectively going to be a small robot since we will want it to be of
    the same size as the characters we have been using: 48 x 32 pixels. Even though
    vector graphics are scalable, it is still best to work on the scale you are going
    to use them in. While working with these small resolutions, it also makes sense
    to actually see which pixels you are going to fill. You can do this by turning
    on the **Grid** option under the **View** tab. Also, you will need to switch between
    a zoomed-in picture and its actual size; this way you will keep a sight on how
    much detail you are actually going to put in the game. Zooming in and out can
    be done using the *Ctrl* key and the scroll wheel of the mouse; also, the shortcut
    to see everything on a 1:1 scale is simply achieved by pressing the *1* key on
    your keyboard.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上将是一个小机器人，因为我们希望它的大小与我们一直在使用的角色相同：48 x 32像素。尽管矢量图形是可伸缩的，但最好还是按照要使用的比例来工作。在处理这些小分辨率时，实际上看到你要填充的像素是有意义的。您可以通过在“视图”选项卡下打开“网格”选项来实现这一点。此外，您需要在放大的图片和实际大小之间切换；这样你就可以看到你实际上要在游戏中放入多少细节。放大和缩小可以使用鼠标的Ctrl键和滚轮来完成；此外，通过按键盘上的“1”键，可以简单地以1:1的比例查看所有内容。
- en: '![Introduction to vector graphics](img/4568_7_5.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形简介](img/4568_7_5.jpg)'
- en: 'When we take a look at the robot we want to build, something important can
    be noticed: the head is blown out of proportion. Normally, a human head would
    be between one-eighth or one-seventh the size of the human body. When drawing
    for a low resolution, it is a good idea for the head to be about one-third to
    one half the size of the body. It''s very unrealistic but at least you will be
    able to see some facial features, such as the eyes and mouth. This big-headed
    style is called Chibi, which means a *short person* in Japanese; it''s ideal for
    small animations.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看我们想要构建的机器人时，可以注意到一些重要的东西：头部被放大了。通常，人类的头部大小应该是人体的八分之一或七分之一。在低分辨率下绘制时，头部大约应该是身体大小的三分之一到一半。这是非常不现实的，但至少你能看到一些面部特征，比如眼睛和嘴巴。这种大头风格被称为千变，意思是日语中的“矮个子”；它非常适合小动画。
- en: 'Let''s first have a look at the basic forms that we will need. This seems to
    be not much more than a few rectangles (both rounded and regular ones) and two
    ellipses for the eyes, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下我们需要的基本形状。这似乎不过是一些矩形（圆角和普通的）和两个椭圆形的眼睛，如下面的截图所示：
- en: '![Introduction to vector graphics](img/4568_7_6.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形简介](img/4568_7_6.jpg)'
- en: 'A rectangle''s corners can be easily rounded by selecting the normal rectangle
    and changing the radius of its corners with the help of the panel shown in the
    following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形的角可以通过选择普通矩形并在下面的面板中更改其角的半径来轻松圆角，如下面的截图所示：
- en: '![Introduction to vector graphics](img/4568_7_7.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形简介](img/4568_7_7.jpg)'
- en: 'An ellipse is nothing more than a stretched out circle. You can stretch any
    form in any direction and rotate or skew it if necessary, as shown in the following
    screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆形只不过是一个拉长的圆。您可以在任何方向拉伸任何形状，并在必要时旋转或倾斜它，如下面的截图所示：
- en: '![Introduction to vector graphics](img/4568_7_8.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形简介](img/4568_7_8.jpg)'
- en: While working with vector graphics, it is best to have different layers in order
    to cope with different animations. For example, if we want our robot to walk,
    we will need its one arm and leg to stick out, and then its other arm and leg.
    Putting the body and the arms and legs in separate layers makes sense from an
    animation point of view. The body's formation does not change when moving, while
    the limb's formation does.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理矢量图形时，最好有不同的图层来处理不同的动画。例如，如果我们想让我们的机器人行走，我们需要它的一只胳膊和腿伸出，然后是另一只胳膊和腿。从动画的角度来看，将身体和手臂和腿放在单独的图层中是有意义的。身体的形状在移动时不会改变，而肢体的形状会改变。
- en: 'Now that we have our basic forms, let''s focus on colors. While working on
    low resolution, it''s best to get a big contrast going. You can do this by either
    having a color close to white and one close to black, thereby playing with brightness.
    Alternatively, you can choose to work with two complimentary colors. Two colors
    are compliments when they are each other''s opposite, resulting in the biggest
    contrast when put next to each other. So when picking colors, it''s useful to
    bring in the color wheel. Colors on opposite sides of each other in this wheel
    are considered complimentary colors. For example, the compliment of yellow is
    purple, as shown in the following diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基本的形式，让我们专注于颜色。在低分辨率下工作时，最好是有很大的对比度。你可以通过选择一个接近白色和一个接近黑色的颜色来实现这一点，从而调整亮度。或者，你可以选择使用两种互补颜色。当两种颜色互补时，它们是彼此的对立面，当它们相邻时产生最大的对比度。因此，在选择颜色时，引入色轮是有用的。在这个色轮上，彼此相对的颜色被认为是互补颜色。例如，黄色的补色是紫色，如下图所示：
- en: '![Introduction to vector graphics](img/4568_7_9.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形介绍](img/4568_7_9.jpg)'
- en: Our robot is going to be gray and black. In order to color it we just need to
    right-click our mouse button on each of the elements, select **Fill and stroke**,
    and fill it with the color we like.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的机器人将是灰色和黑色。为了给它上色，我们只需要右键单击鼠标按钮，选择**填充和描边**，并用我们喜欢的颜色填充它。
- en: '![Introduction to vector graphics](img/4568_7_10.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形介绍](img/4568_7_10.jpg)'
- en: 'In addition, we can give our robot a small extra detail in his eyes by switching
    our circles to an incomplete arc, using the panel shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过在我们的圆圈中切换到不完整的弧线来给我们的机器人的眼睛增加一些额外的细节，使用下图中显示的面板。
- en: '![Introduction to vector graphics](img/4568_7_11.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形介绍](img/4568_7_11.jpg)'
- en: Our robot now has a recognizable form and even has this small eye detail. The
    problem with these details is that they will not always be visible when actually
    playing your game, as shown in the minimized form of our robot character in the
    following diagram; finding the right amount of detail can be tricky.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的机器人现在有了一个可识别的形式，甚至有了这个小眼睛细节。这些细节的问题在于，当实际玩游戏时，它们并不总是可见，如下图所示，我们的机器人角色的最小化形式；找到合适的细节量可能会有些棘手。
- en: '![Introduction to vector graphics](img/4568_7_12.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形介绍](img/4568_7_12.jpg)'
- en: We can add the antenna on his head as shown in the following diagram, and although
    it's small, it will still be recognizable; ultimately this is what you need to
    take into account for every detail you add. Let's introduce a little bit of shadow
    to the drawing shown in the following diagram of the character. We can do this
    by changing the fill to a gradient pattern instead of an even fill.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像下图所示在他的头上加上天线，虽然很小，但仍然是可识别的；最终，这是你需要考虑的每一个细节。让我们在角色的下图所示的绘画中加入一点阴影。我们可以通过将填充改为渐变图案而不是均匀填充来实现这一点。
- en: '![Introduction to vector graphics](img/4568_7_13.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形介绍](img/4568_7_13.jpg)'
- en: In addition, by adding some extra forms with these gradient shadow patterns,
    we can make the design look even more realistic. As an exercise, you could add
    your own animation for when the character is idling. For instance, a person would
    inhale and exhale, making his or her chest go up and down. To portray this, you
    can add one extra image, making the game feel even more alive. Eventually, we
    end up with our final robot. Teaching it how to walk is then a matter of putting
    the best foot forward, followed by the other one of course. If you work in a single
    layer, it can be done by bringing a leg and arm to the front by selecting them
    and pressing the *Home* key. Pressing the *End* key will position the selected
    arm behind the other forms. Alternatively, you can use the **Object** menu to
    achieve the same thing. Ideally though, you would want to work with different
    layers, since this makes life a lot easier. However, we won't go into that level
    of detail here.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过使用这些渐变阴影图案添加一些额外的形式，我们可以使设计看起来更加逼真。作为练习，你可以为角色空闲时添加自己的动画。例如，一个人会吸气和呼气，使他的胸部上下起伏。为了描绘这一点，你可以添加一张额外的图像，使游戏感觉更加生动。最终，我们得到了我们的最终机器人。教它如何行走只是把最好的一面展现出来，然后当然是另一面。如果你在一个图层中工作，可以通过选择它们并按下*Home*键将一条腿和一只胳膊移到前面来完成。按下*End*键将选定的手臂放在其他形式的后面。或者，你可以使用**对象**菜单来实现同样的事情。不过，理想情况下，你会希望使用不同的图层，因为这样会让生活变得更加容易。然而，在这里我们不会深入到那个层面的细节。
- en: '![Introduction to vector graphics](img/4568_7_14.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![矢量图形介绍](img/4568_7_14.jpg)'
- en: The robot looks as if he is going to leave his little picture and come right
    towards you, as shown in the previous diagram. To get a full character you will
    need to do the same for at least one profile view and its back. This can be done
    quickly once you are experienced in doing so. However, there is a quicker way
    to get graphics. Though, you will probably only want to use them as placeholders
    until a drawing is ready, it's still a nice option. This option is using Adobe
    Photoshop for real life pictures.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人看起来好像要离开他的小画面，直接走向你，就像前面的图表所示的那样。要得到一个完整的角色，你至少需要为一个侧面视图和背面视图做同样的事情。一旦你有经验，这可以很快完成。然而，有一个更快的方法来获得图形。不过，你可能只想在图纸准备好之前使用它们作为占位符，这仍然是一个不错的选择。这个选择是使用Adobe
    Photoshop进行真实生活图片。
- en: Creating your own avatar using Adobe Photoshop
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Adobe Photoshop创建你自己的头像
- en: Ever dreamt of having yourself walk about in your own game? Well, now you can!
    All you need is a camera and a tool similar to Adobe Photoshop. While we will
    use Adobe Photoshop, there are plenty of free replacements out there that will
    do the trick just fine. Even the browser solutions are quite decent. Pixlr is
    a good example of this. It can be found at [www.pixlr.com](http://www.pixlr.com).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经梦想过在自己的游戏中四处走动吗？现在你可以了！你只需要一个相机和类似Adobe Photoshop的工具。虽然我们将使用Adobe Photoshop，但市面上有很多免费的替代品可以胜任。甚至浏览器的解决方案也相当不错。Pixlr就是一个很好的例子。它可以在[www.pixlr.com](http://www.pixlr.com)找到。
- en: 'We will have to start off with a bunch of pictures taken from all relevant
    directions. It will be best to take them in front of an evenly colored screen;
    a simple white blanket or wall will be fine too. If your background is easy to
    distinguish from the person you would like to capture, subtracting him or her
    from the picture will be easier. We can do this with the quick selection tool
    as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从各个相关方向拍摄一堆照片开始。最好在均匀着色的屏幕前拍摄；简单的白色毯子或墙壁也可以。如果您的背景与您想捕捉的人容易区分，那么将他或她从图片中减去将更容易。我们可以使用快速选择工具来做到这一点，如下面的截图所示：
- en: '![Creating your own avatar using Adobe Photoshop](img/4568_7_15.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用Adobe Photoshop创建您自己的头像](img/4568_7_15.jpg)'
- en: 'After separating the person from the background, we can simply put the picture
    in a new file with a transparent background and even add some effects to it in
    order to give it a more surreal touch, as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在将人与背景分离后，我们可以简单地将图片放入一个带有透明背景的新文件中，甚至可以添加一些效果，以赋予它更加超现实的触感，如下面的截图所示：
- en: '![Creating your own avatar using Adobe Photoshop](img/4568_7_16.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用Adobe Photoshop创建您自己的头像](img/4568_7_16.jpg)'
- en: Don't restrict yourself to what Adobe Photoshop has to offer. There are good
    websites out there that can transform your picture in ways you can barely fathom.
    One such websites is [www.befunky.com](http:// www.befunky.com).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不要局限于Adobe Photoshop所提供的功能。有一些很好的网站可以以你难以想象的方式转换你的图片。其中一个网站是[www.befunky.com](http://
    www.befunky.com)。
- en: 'Here we have the option to unleash the cartoonizer effect on our picture, rendering
    the person virtually unrecognizable while it produces this nice cell-shaded style,
    as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以选择在我们的图片上释放卡通效果，使人几乎无法辨认，同时产生出这种漂亮的单色风格，如下面的截图所示：
- en: '![Creating your own avatar using Adobe Photoshop](img/4568_7_17.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用Adobe Photoshop创建您自己的头像](img/4568_7_17.jpg)'
- en: You will have to repeat this process for all your pictures, which can be quite
    time consuming. However, it will be done much more quickly than actually drawing
    them yourself. Also remember, passive objects only need one picture. The game
    characters, needing actual animation sheets, represent most of the workload.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不得不为所有的图片重复这个过程，这可能会耗费相当多的时间。然而，这比自己绘制它们要快得多。还要记住，被动对象只需要一张图片。需要实际动画表的游戏角色代表了大部分的工作量。
- en: Now that we have our individual sprites, let's take a look at the animation
    sheet itself. If you don't have the necessary suitable pictures of yourself, now
    is the time to go and let someone take a few pictures of you posing in front of
    a white wall. There is something peculiarly odd about seeing yourself inside a
    video game, so try it out.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了个人精灵，让我们来看看动画表本身。如果您没有适合的照片，现在是时候去让别人在白墙前拍几张照片了。在视频游戏中看到自己有点奇怪，所以试试看吧。
- en: Adding your creation to the RPG
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的作品添加到RPG
- en: In order to get from your individual sprites to a fully fledged animation sheet,
    all that needs to be done is to order them nicely in a single file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从个人精灵到完全成熟的动画表中，所需做的就是将它们整齐地放在一个文件中。
- en: '![Adding your creation to the RPG](img/4568_7_18.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![将您的作品添加到RPG](img/4568_7_18.jpg)'
- en: Before getting into this, you will need to think about how big you need your
    images to be. In this example they are 32 x 96 pixels in size. In the earlier
    chapters, we had characters that were 32 x 48 pixels in size. Having drawings
    that are less stretched than our current example is preferable, since they will
    allow easier gameplay. It is much easier to maneuver a character with the dimensions
    of a circle or square than one that is long and thin. However, in this case our
    test person is long and skinny and we would like to keep him that way.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要考虑您的图片需要多大。在这个例子中，它们的尺寸为32 x 96像素。在早期章节中，我们的角色尺寸为32 x 48像素。拥有比我们当前示例拉伸得更少的图纸是更可取的，因为它们将使游戏玩起来更容易。操纵一个尺寸为圆形或正方形的角色要比操纵一个又长又细的角色容易得多。然而，在这种情况下，我们的测试人员又长又瘦，我们希望保持他的样子。
- en: Actually arranging the pictures on a single animation sheet is a work of precision,
    so it is recommended to work with the picture's coordinates. Adobe Fireworks allows
    very intuitive handling when it comes to arranging drawings by setting their coordinates.
    Any picture program should do the trick though; you could even do this in MS Paint.
    There are other options out there of course. A spritesheet generator would make
    arranging sprites and saving them as a tileset considerably easier. You also have
    the option of using some JavaScript arranging code in Fireworks to automate the
    positioning process. However, there will be no elaboration on these topics here.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在单个动画表上安排图片是一项精密的工作，因此建议使用图片的坐标。Adobe Fireworks在设置坐标时非常直观。任何图片程序都可以胜任；甚至可以在MS
    Paint中完成。当然还有其他选择。精灵表生成器将使排列精灵并将它们保存为瓷砖集合变得更加容易。您还可以选择在Fireworks中使用一些JavaScript排列代码来自动化定位过程。但是，这里不会对这些主题进行详细阐述。
- en: When you are finally done setting up your own sheet, it is time to introduce
    it into your game. Save the file as `player.png` and replace the code and sheet
    in one of the previous chapters of your choice.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您最终设置好自己的表格时，就该将其引入游戏中了。将文件保存为`player.png`，并在之前章节中的代码和表格中进行替换。
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our animation sequence is pretty short. For each of the perspectives, we switch
    between standing still and moving either the right or left leg forward. The sheet
    could have been even smaller if we had a perfectly symmetrical character. We would
    then only need the animation for either walking to the left or the right and get
    the other animation by flipping the image as seen in an earlier chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的动画序列非常短。对于每个视角，我们在静止和移动右腿或左腿之间切换。如果我们的角色是完全对称的，那么图表可能会更小。那样的话，我们只需要左右行走的动画，然后通过翻转图像来获得另一个动画，就像在前面的章节中所看到的那样。
- en: Hints for graphics in HTML5
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML5中使用图形的提示
- en: 'To end this chapter, let''s go over a few pointers for using graphics in HTML5:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束本章，让我们回顾一下在HTML5中使用图形的一些要点：
- en: Try to keep your animation sheets as small as possible. There is no need to
    duplicate certain sprites; the animation sequence allows the same sprite to be
    addressed multiple times if necessary. It's also good to know there are image
    size limits that differ for every browser, though you would have to be rather
    sloppy to reach this limit.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量保持动画图表尽可能小。没有必要复制某些精灵；如果必要，动画序列允许多次引用同一个精灵。还要知道，每个浏览器都有不同的图像大小限制，尽管你必须相当粗心才能达到这个限制。
- en: Use a file format that supports transparent backgrounds. A PNG file will do
    the trick. JPG is not capable of saving a background as transparent and will instead
    interpret it as being solid white.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用支持透明背景的文件格式。PNG文件就可以胜任。JPG无法保存透明背景，而会将其解释为纯白色。
- en: Try to work with symmetrical figures where possible. This way you can flip the
    image to make a character walk from left to right and vice versa with the same
    images. It also reduces the number of sprites you need and thus the effort to
    make them.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量使用对称图形。这样你可以翻转图像，使角色从左到右行走，反之亦然，使用相同的图像。这也减少了你需要的精灵数量，从而减少了制作它们的工作量。
- en: When using background maps in ImpactJS, it can be useful to prerender them.
    A background map differs from a regular level layer in the way it is drawn by
    a code array you supply in your scripts instead of the standard JSON-coded level
    files. This way it is possible to set up recurring backgrounds.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ImpactJS中使用背景地图时，预渲染它们可能会很有用。背景地图与常规级别图层不同，它是通过您在脚本中提供的代码数组绘制的，而不是标准的JSON编码级别文件。这样就可以设置重复的背景。
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Prerendering the background will make the system create chunks, which are a
    collection of tiles. Choosing to prerender will require more RAM since larger
    pieces need to be kept in memory but will speed up the drawing process; this way
    there is less taxation on the device''s processor. Knowing that you have this
    option and depending on whether you think RAM or processing power will be the
    bottleneck, you can choose to either prerender your background or not by use of
    the ImpactJS `.prerender` property. In addition you can set the chunk size to
    fine-tune the balance between the two resources:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预渲染背景将使系统创建块，这是一组瓷砖。选择预渲染将需要更多的RAM，因为需要将更大的块保留在内存中，但会加快绘图过程；这样设备的处理器上的负担就会减少。知道你有这个选项，并根据你认为RAM还是处理能力将成为瓶颈，你可以选择通过使用ImpactJS的`.prerender`属性来预渲染背景或不预渲染。此外，你可以设置块的大小来微调两种资源之间的平衡：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Graphics are an important element of any game as they are the visualization
    of everything your game represents. Though there has certainly been a trend towards
    more realistic graphics in games, it is not absolutely required for a good game
    experience. We talked about whether you should make or buy your graphics and where
    you can buy custom graphics at an affordable price. We distinguished three important
    options if you decide to create your own graphics: pixel graphics, vector graphics,
    and using Adobe Photoshop reality. Skipping the first option, we took a quick
    look at how to develop vector graphics with Inkscape and add yourself to your
    game using Adobe Photoshop. The chapter ended with some hints on working with
    graphics in the game. In the next chapter, it''s finally time to show our game
    to the world as we get to deploy it to several distribution channels ranging from
    a regular website to Google Play.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图形是任何游戏的重要元素，因为它们是游戏所代表的一切的可视化。尽管游戏中的图形确实趋向于更加逼真，但这并不是获得良好游戏体验的绝对要求。我们讨论了是否应该制作或购买图形，以及在哪里可以以实惠的价格购买定制图形。如果决定创建自己的图形，我们区分了三个重要选项：像素图形、矢量图形，以及使用Adobe
    Photoshop。跳过第一个选项，我们快速了解了如何使用Inkscape开发矢量图形，并使用Adobe Photoshop将自己添加到游戏中。本章以一些关于在游戏中使用图形的提示结束。在下一章中，我们终于可以向世界展示我们的游戏，因为我们将把它部署到从常规网站到Google
    Play等多个分发渠道。
