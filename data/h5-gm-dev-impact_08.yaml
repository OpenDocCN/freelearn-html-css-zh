- en: Chapter 8. Adapting Your HTML5 Game to the Distribution Channels
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。调整您的HTML5游戏以适应分发渠道
- en: When your game is finally ready for the entire world to see, it is time to consider
    the possible distribution channels. Do you want people to play your game in their
    browser on a website or as a web app? Maybe you want them to play it with a tablet
    or smartphone, either in a browser or as an app. In this chapter, we will look
    into several of those different options and what needs to be done for a successful
    implementation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的游戏终于准备好供全世界观看时，是时候考虑可能的分发渠道了。您想让人们在网站上的浏览器中玩游戏，还是作为Web应用程序？也许您希望他们在平板电脑或智能手机上玩游戏，无论是在浏览器中还是作为应用程序。在本章中，我们将探讨其中几种不同的选择以及成功实施所需的工作。
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学到：
- en: Preparing your game for the web browser
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网络浏览器准备您的游戏
- en: Making adaptations for mobile web browsers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为移动网络浏览器做适应
- en: Releasing your game as a Google Chrome web app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的游戏发布为Google Chrome网络应用程序
- en: Turning the game into an Android app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏转换为Android应用程序
- en: Making your game playable on Facebook
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使您的游戏在Facebook上可玩
- en: Implementing AppMobi's direct canvas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施AppMobi的直接画布
- en: Preparing your game for the web browser
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为网络浏览器准备您的游戏
- en: You have been testing your game in a web browser during development. So what
    is the difference between your local server and a public or production server?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，您一直在Web浏览器中测试您的游戏。那么您的本地服务器和公共或生产服务器之间有什么区别呢？
- en: 'Just before releasing your game to the public, you will need to bake it. **Baking**
    the game is not more than compressing the code. This has two advantages:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在向公众发布您的游戏之前，您需要对其进行烘烤。**烘烤**游戏不过是压缩代码。这有两个优点：
- en: Compressed code will load faster into the browser than uncompressed code. A
    shorter loading time is always a big advantage, especially for people who play
    your game for the first time. These people don't know yet that your game is extremely
    awesome and don't want to waste time looking at a loading bar.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压缩代码将比未压缩代码更快地加载到浏览器中。更短的加载时间总是一个很大的优势，特别是对于第一次玩您的游戏的人。这些人还不知道您的游戏有多棒，不想浪费时间看加载条。
- en: The baked code is also harder to read. All your different modules, neatly ordered
    in separate files, are now in a single file together with the ImpactJS engine.
    This makes it harder for the average Joe to just copy and paste your precious
    source code from the browser and use it in his or her own games. However, it doesn't
    protect against people who really know what they are doing; the code does not
    become encrypted, just compressed.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 烘烤后的代码也更难阅读。所有不同的模块，整齐地排列在单独的文件中，现在都在一个文件中与ImpactJS引擎一起。这使得普通用户很难从浏览器中复制和粘贴你宝贵的源代码，然后在自己的游戏中使用。然而，这并不能防止那些真正知道自己在做什么的人；代码并没有加密，只是压缩了。
- en: 'The tool for baking your game comes with the ImpactJS engine you have downloaded.
    In the `tools` folder in your game''s `root` directory, you should have four files:
    `bake.bat`, `bake.php`, `bake.sh`, and `jsmin.php`. Follow the following steps
    to bake your game:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用您下载的ImpactJS引擎一起的烘烤游戏的工具。在游戏的`root`目录中的`tools`文件夹中，您应该有四个文件：`bake.bat`、`bake.php`、`bake.sh`和`jsmin.php`。按照以下步骤来烘烤您的游戏：
- en: 'Open the `bake.bat` file with a text editor and you will find the following
    line:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用文本编辑器打开`bake.bat`文件，您会找到以下行：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Change `php` to the directory of your `php.exe` file in your XAMPP or WAMP
    server. For a default XAMPP installation, this line will now look as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`php`更改为XAMPP或WAMP服务器中`php.exe`文件的目录。对于默认的XAMPP安装，这一行现在将如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save and close the `bake.bat` file and double-click on it to run it. On Windows,
    a command window will open and a `game.min.js` script will be created in your
    game's `root` directory, as shown in the following screenshot:![Preparing your
    game for the web browser](img/4568_8_1.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭`bake.bat`文件，然后双击运行它。在Windows上，一个命令窗口将打开，并且`game.min.js`脚本将被创建在游戏的`root`目录中，如下面的屏幕截图所示：![为网络浏览器准备您的游戏](img/4568_8_1.jpg)
- en: The `game.min.js` script now contains all our code. All we need to do now is
    change the `index.html` file in our game's `root` directory so it looks for `game.min.js`
    instead of the `impact.js` and `main.js` scripts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`game.min.js`脚本现在包含了我们所有的代码。现在我们需要做的就是更改游戏`root`目录中的`index.html`文件，使其寻找`game.min.js`而不是`impact.js`和`main.js`脚本。'
- en: 'Open the `index.html` file and find the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.html`文件，找到以下代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Replace the previous code by our new compact version of the code, as shown
    in the following code snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用我们新的紧凑版本的代码替换以前的代码，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can now strip your game's folder of all code files except for `index.html`
    and `game.min.js` and upload it to your server. If you bought your own web space,
    you can use free FTP programs such as **FileZilla** to do this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以剥离游戏文件夹中除`index.html`和`game.min.js`之外的所有代码文件，并将其上传到您的服务器。如果您购买了自己的网络空间，您可以使用免费的FTP程序，如**FileZilla**来完成此操作。
- en: Our game is now ready for distribution and by loading it to the web server,
    you would already have it available for anyone out there. However, we did not
    yet take into account browsers on mobile devices. Before we look into that, let
    us quickly recap.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏现在已经准备好分发了，通过将其加载到Web服务器，您已经可以让任何人使用。但是，我们还没有考虑移动设备上的浏览器。在我们研究这个问题之前，让我们快速回顾一下。
- en: 'Summing up the preceding content, the conclusions are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总结前面的内容，结论如下：
- en: 'Before releasing our game to the public, we should bake it. Baking a game is
    basically compressing the source code. Baking has two big advantages:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在向公众发布我们的游戏之前，我们应该对其进行烘烤。烘烤游戏基本上就是压缩源代码。烘烤有两个重要优点：
- en: The game is loaded into the browser more quickly.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏加载到浏览器中的速度更快。
- en: The code becomes harder to read, thus making it less vulnerable to theft. However,
    the code is not encrypted making it still pretty easy for a dedicated person to
    undo the baking.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码变得更难阅读，因此更不容易被盗。然而，代码并没有加密，因此对于一个专注的人来说，解除烘烤仍然相当容易。
- en: In order to bake the game, we change the `bake.bat` file before we run it. This
    process creates a `game.min.js` script.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了烘烤游戏，我们在运行之前更改`bake.bat`文件。这个过程创建了一个`game.min.js`脚本。
- en: We include `game.min.js` in our `index.html` file instead of `main.js` and `impact.js`
    before uploading our game to a server.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将游戏上传到服务器之前，我们在`index.html`文件中包含`game.min.js`而不是`main.js`和`impact.js`。
- en: Preparing our game for mobile web browsers
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为移动Web浏览器准备我们的游戏
- en: 'If you have taken into account the possibility of people using their smartphones
    to play your game, you''ve implemented touch screen controls. An example of this
    can be found in [Chapter 5](ch05.html "Chapter 5. Adding Some Advanced Features
    to Your Game"), *Adding Some Advanced Features to Your Game*. However, sometimes
    this is not enough. You want the player to be able to do the same with his/her
    smartphone as he would with his/her computer. To make this happen, we can introduce
    **virtual buttons** . These virtual buttons are areas on the screen which will
    act as if they are regular keyboard keys. We can create these using **CSS** (**Cascading
    Style Sheets**) code in the `index.html` file. We can have buttons for every action
    our player does. In our RPG, he needs to be able to walk in all directions and
    shoot. In the side scroller game, he can move left or right, fly, and shoot. Let''s
    assume we separate flying from moving upwards. The following screenshot shows
    our button tilesheet:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您考虑到人们可能使用智能手机玩游戏，您已经实现了触摸屏控制。这方面的例子可以在[第5章](ch05.html "第5章。为您的游戏添加一些高级功能")中找到，*为您的游戏添加一些高级功能*。然而，有时这还不够。您希望玩家能够像在电脑上一样在智能手机上进行操作。为了实现这一点，我们可以引入**虚拟按钮**。这些虚拟按钮是屏幕上的区域，它们将表现得就像它们是常规键盘键一样。我们可以在`index.html`文件中使用**CSS**（层叠样式表）代码创建这些按钮。我们可以为玩家的每个动作创建按钮。在我们的角色扮演游戏中，他需要能够向各个方向行走和射击。在侧面卷轴游戏中，他可以向左或向右移动，飞行和射击。让我们假设我们将飞行与向上移动分开。以下屏幕截图显示了我们的按钮图块：
- en: '![Preparing our game for mobile web browsers](img/4568_8_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![为移动Web浏览器准备我们的游戏](img/4568_8_2.jpg)'
- en: 'Following are the steps to create our virtual buttons:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建虚拟按钮的步骤：
- en: 'Open the `index.html` file and add the following code below the CSS code for
    the canvas. If you use the `index.html` file provided with examples of the ImpactJS
    engine, this file should already include the following style code for the canvas.
    Also the `index.html` files from both the games in [Chapter 3](ch03.html "Chapter 3. Let''s
    Build a Role Playing Game"), *Let''s Build a Role Playing Game* and [Chapter 4](ch04.html
    "Chapter 4. Let''s Build a Side Scroller Game"), *Let''s Build a Side Scroller
    Game* contain the following CSS code for canvas:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`文件，并在canvas的CSS代码下面添加以下代码。如果您使用的是ImpactJS引擎示例提供的`index.html`文件，则该文件应该已经包含canvas的以下样式代码。另外，[第3章](ch03.html
    "第3章。让我们建立一个角色扮演游戏")中的*让我们建立一个角色扮演游戏*和[第4章](ch04.html "第4章。让我们建立一个侧面卷轴游戏")中的*让我们建立一个侧面卷轴游戏*的`index.html`文件都包含canvas的以下CSS代码：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First we define our full button pallet. It has a height of 32 pixels and a width
    of 192 pixels (six buttons, each 32 pixels wide).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义了完整的按钮面板。它的高度为32像素，宽度为192像素（六个按钮，每个32像素宽）。
- en: Within this button, we can define the six different parts separately. Here you
    can see the CSS code for the left button. The other five buttons use the exact
    same code except for their background position since this is their location on
    the `iphone-buttons.png` image. So, for instance, for the left button the location
    is `-32`, for the right button this would be `0`, and for the up button it is
    `-64` as it is third in row. The `webkit` commands are there to keep the layout
    neat, as intended. If these commands are not supplied, the user could unintentionally
    change the zoom or colors by tapping the screen.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个按钮中，我们可以分别定义六个不同的部分。在这里，你可以看到左按钮的CSS代码。其他五个按钮使用完全相同的代码，除了它们的背景位置，因为这是它们在`iphone-buttons.png`图像上的位置。因此，例如，对于左按钮，位置是`-32`，对于右按钮，位置是`0`，对于上按钮，位置是`-64`，因为它是第三行。`webkit`命令是为了保持布局整洁，如预期的那样。如果没有提供这些命令，用户可能会意外地通过点击屏幕改变缩放或颜色。
- en: 'However, we only want our buttons to show on mobile devices. So let''s control
    that with a short piece of JavaScript code in our `index.html` file, as shown
    in the following code snippet:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，我们只希望我们的按钮显示在移动设备上。因此，让我们在`index.html`文件中用一小段JavaScript代码来控制，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the first part of this script, we define the local variable `isMobile`. It
    is set to `true` if a mobile device is detected, if not it is set to `false`.
    In the second part, we set the visibility of our CSS objects to `visible` if `isMobile`
    is `true`. Remember that their visibility was set to `hidden` when we created
    them in the CSS part of `index.html`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个脚本的第一部分中，我们定义了本地变量`isMobile`。如果检测到移动设备，则设置为`true`，否则设置为`false`。在第二部分中，如果`isMobile`为`true`，则将CSS对象的可见性设置为`visible`。请记住，在`index.html`的CSS部分中创建它们时，它们的可见性被设置为`hidden`。
- en: 'All that remains to do within our `index.html` file is adding these buttons
    as the `<div>` elements next to our `canvas` element, as shown in the following
    code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`index.html`文件中，唯一剩下的事情就是将这些按钮作为`<div>`元素添加到我们的`canvas`元素旁边，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `index.html` file now has buttons which will only show when a mobile device
    is detected, but it doesn't make our game ready for this just yet. For this, we
    need to adapt our `main.js` script.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`文件现在有按钮，只有在检测到移动设备时才会显示，但这还不足以使我们的游戏准备就绪。为此，我们需要调整我们的`main.js`脚本。'
- en: 'Open `main.js` and add the following code to your `init()` method of your `game`
    instance:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`main.js`，并将以下代码添加到`game`实例的`init()`方法中：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If a mobile device is detected, the virtual buttons are bound to a game input
    state. So, for instance, the `<div>` element `buttonLeft` will be bound to the
    input state `Left`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果检测到移动设备，则虚拟按钮将绑定到游戏输入状态。因此，例如，`buttonLeft`元素将绑定到输入状态`Left`。
- en: The code within the `else` statement turns on the background music if you would
    have that. As addressed in [Chapter 6](ch06.html "Chapter 6. Music and Sound Effects"),
    *Music and Sound Effects*, some mobile devices don't allow sounds to overlap.
    So, for mobiles, it is wise to turn off the background music so it would not overlap
    with other sound effects. This will probably not remain an issue forever, but
    for now it is wise to take into account these sound issues.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`else`语句中的代码会打开背景音乐（如果有的话）。正如在[第6章](ch06.html "第6章。音乐和音效")中所述，*音乐和音效*，一些移动设备不允许声音重叠。因此，对于移动设备，关闭背景音乐是明智的，这样它就不会与其他音效重叠。这可能不会永远是一个问题，但现在考虑这些声音问题是明智的。'
- en: 'We will also need to adapt our canvas size so that it fits on the screen of
    the smartphone or iPad. Replace the default canvas call:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要调整我们的画布大小，以便它适合智能手机或iPad的屏幕。替换默认的画布调用：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following code to replace the default canvas call:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码替换默认的画布调用：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All this does is initialize the game with different canvas sizes so that it
    fits on smaller screens like those of iPads (or other tablets) and smartphones.
    In addition, the intro screen is skipped here; this is a choice and you could
    leave it in a mobile. Also you could adapt the canvas size for more devices. Here
    it is shown only for iPad and all other mobile devices, but of course more differentiation
    is possible.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些只是使用不同的画布尺寸初始化游戏，以便它适合iPad（或其他平板电脑）和智能手机等较小屏幕。此外，这里跳过了介绍屏幕；这是一个选择，你可以在移动设备上留下它。您还可以为更多设备调整画布大小。这里只显示了iPad和所有其他移动设备，但当然还可以进行更多的区分。
- en: Hurray! Your game is now ready for mobile! Don't forget to bake it before putting
    it online; mobile Internet is not as fast as regular Wi-Fi so making your file
    smaller definitely counts here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！您的游戏现在已经准备好移动设备使用了！在将其上线之前不要忘记进行烘烤；移动互联网不像常规Wi-Fi那样快，因此使您的文件更小在这里绝对很重要。
- en: Next, we are going to take a look at making a mobile web app for the **Chrome
    Web Store** but first let's quickly recap how to prepare our game for mobile browsers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何为**Chrome网络商店**制作移动网络应用，但首先让我们快速回顾一下如何为移动浏览器准备我们的游戏。
- en: 'Summing up the preceding content, the conclusions are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 总结前面的内容，结论如下：
- en: If we want our players to have a good game experience on mobile devices, we
    need to adapt our game interface to accommodate this. We do so by adding virtual
    buttons.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们希望玩家在移动设备上有良好的游戏体验，我们需要调整游戏界面以适应这一点。我们通过添加虚拟按钮来实现这一点。
- en: The visual aspect of the virtual buttons is created using CSS and an image file
    in the `index.html`. We can make the buttons visible or hidden, depending on whether
    the game is played on a mobile device or not.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟按钮的视觉方面是使用CSS和`index.html`中的图像文件创建的。我们可以根据游戏是在移动设备上玩还是在其他设备上玩来使按钮可见或隐藏。
- en: In our game's `main` script, we need to bind these buttons to game action states
    in order to get the same functionalities going as with a keyboard.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们游戏的`main`脚本中，我们需要将这些按钮绑定到游戏动作状态，以便获得与键盘相同的功能。
- en: Additionally, we can change the game screen resolution and size so it fits better
    on the device the player uses.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们可以更改游戏屏幕分辨率和大小，使其更适合玩家使用的设备。
- en: Turning the game into a web app for the Google Chrome Web Store
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将游戏转化为谷歌Chrome网络商店的网络应用
- en: 'A web app is an app which runs in the browser itself, not on the operating
    system of a mobile device. To release a web app on the Google Chrome Web Store,
    you need a Google Chrome developer account, which comes at a $5 one-time fee.
    You will need a Google webmaster account to confirm the ownership of a link Google
    provides you with. Also, not to make things harder than they need to be, it is
    wise to get a free AppMobi account. You can do this on their website: [http://www.appmobi.com](http://www.appmobi.com).
    AppMobi is a very interesting beginners'' tool for three main reasons:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用是在浏览器中运行的应用程序，而不是在移动设备的操作系统上运行。要在谷歌Chrome网络商店发布网络应用，您需要一个谷歌Chrome开发者帐户，这需要支付一次性费用5美元。您需要一个谷歌站长帐户来确认谷歌提供给您的链接的所有权。此外，为了不使事情变得更加困难，最好获得一个免费的AppMobi帐户。您可以在他们的网站上做到这一点：[http://www.appmobi.com](http://www.appmobi.com)。AppMobi是一个非常有趣的初学者工具，有三个主要原因：
- en: They simplify the process to push games to several different distribution channels.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们简化了将游戏推送到多个不同的分发渠道的过程。
- en: They charge nothing for the first 10,000 users of your app or game, allowing
    you to first make money before they ask you to cut them a slice of the cake; a
    very attractive pricing scheme indeed.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们对您的应用程序或游戏的前10,000个用户不收费，这样您可以先赚钱，然后再要求您分一杯羹；这的确是一个非常有吸引力的定价方案。
- en: The ImpactJS XDK (cross-environmental development kit) helps adapting the game
    to different mobile devices by creating artificial viewports. It contains many
    other useful functionalities such as the simulation location detection.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ImpactJS XDK（跨环境开发工具包）通过创建人工视口来帮助将游戏适应不同的移动设备。它包含许多其他有用的功能，如模拟位置检测。
- en: 'AppMobi facilitates building a version of your game for the following platforms:
    iOS, Android, AppUp, Amazon, Nook, Facebook, Chrome, Mozilla, and hostMobi (their
    own cloud host service).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: AppMobi便于为以下平台构建游戏版本：iOS、Android、AppUp、亚马逊、Nook、Facebook、Chrome、Mozilla和hostMobi（他们自己的云主机服务）。
- en: 'Once subscribed, you can install their ImpactJS XDK for development. On installing
    the XDK, it becomes easily accessible in your Chrome browser with a plugin icon
    next to your address bar, as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅后，您可以安装他们的ImpactJS XDK进行开发。安装XDK后，它将在Chrome浏览器中变得非常易于访问，并在您的地址栏旁边显示一个插件图标，如下面的屏幕截图所示：
- en: '![Turning the game into a web app for the Google Chrome Web Store](img/4568_8_3.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![将游戏转化为谷歌Chrome网络商店的网络应用](img/4568_8_3.jpg)'
- en: 'You can log in on the appHub: the AppMobi control panel to access all their
    services. What will be of particular interest to us now is building a Google Chrome
    game. Following are the steps to build a Chrome game:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以登录到appHub：AppMobi控制面板，以访问其所有服务。我们现在特别感兴趣的是构建一个谷歌Chrome游戏。以下是构建Chrome游戏的步骤：
- en: On first login, you will need to add a new game to your control center by clicking
    on the button shown in the following screenshot:![Turning the game into a web
    app for the Google Chrome Web Store](img/4568_8_4.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首次登录时，您需要通过单击以下截图中显示的按钮向您的控制中心添加一个新游戏：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_4.jpg)
- en: Give your game a name and upload it in a zipped format to the server, as shown
    in the following screenshot:![Turning the game into a web app for the Google Chrome
    Web Store](img/4568_8_5.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为游戏命名并以压缩格式上传到服务器，如下截图所示：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_5.jpg)
- en: You will see the different distribution channels for which AppMobi allows you
    to prepare a file, as shown in the following screenshot:![Turning the game into
    a web app for the Google Chrome Web Store](img/4568_8_6.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到AppMobi允许您为不同的分发渠道准备文件，如下截图所示：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_6.jpg)
- en: Before we can build ourselves a Chrome `ready` file, we will need to promote
    our file to production by pressing the **PROMOTE** button, as shown in the following
    screenshot:![Turning the game into a web app for the Google Chrome Web Store](img/4568_8_7.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们能够构建一个Chrome `ready`文件之前，我们需要通过按下**PROMOTE**按钮将我们的文件推广到生产，如下截图所示：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_7.jpg)
- en: We want to build a game for Chrome, so check out the issues you still have.
    Chances are you will only need to add an icon for the game. But you do this just
    before building the game, as shown in the following screenshot:![Turning the game
    into a web app for the Google Chrome Web Store](img/4568_8_8.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要为Chrome构建一个游戏，所以检查您仍然存在的问题。很可能您只需要为游戏添加一个图标。但是您需要在构建游戏之前执行此操作，如下截图所示：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_8.jpg)
- en: If all goes well, you should be able to download a `production` file which you
    then need to upload to the Chrome Web Store using the button shown in the following
    screenshot:![Turning the game into a web app for the Google Chrome Web Store](img/4568_8_9.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该能够下载一个`production`文件，然后需要使用以下截图中显示的按钮将其上传到Chrome网络商店：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_9.jpg)
- en: It is almost time to upload the file to the Chrome Web Store. However, before
    doing so, open the zipped folder you just downloaded from the AppMobi website
    and make sure the name of the Chrome icon is exactly the same as is stated in
    the `manifest.json` file added by AppMobi. This has been a known issue and Chrome
    will not accept inconsistent naming.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候将文件上传到Chrome网络商店了。但是在这样做之前，打开您刚从AppMobi网站下载的压缩文件夹，并确保Chrome图标的名称与AppMobi添加的`manifest.json`文件中所述的名称完全相同。这是一个已知的问题，Chrome不会接受不一致的命名。
- en: If you upload for the first time, you will receive a message saying you need
    to verify ownership of a domain Google provides you with. To do this, you must
    insert the tagged HTML file Google allows you to download into the bundle you
    first uploaded to AppMobi and reupload your game to AppMobi, this time with the
    verification file inside the zipped bundle. In AppMobi, use the **UPDATE QA**
    button to upload a new file. Also don't forget to promote to production afterwards.![Turning
    the game into a web app for the Google Chrome Web Store](img/4568_8_10.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是第一次上传，您将收到一条消息，说您需要验证谷歌提供给您的域名所有权。为了做到这一点，您必须将谷歌允许您下载的带有标记的HTML文件插入到您首次上传到AppMobi的捆绑包中，并重新上传您的游戏到AppMobi，这次在压缩的捆绑包中包含验证文件。在AppMobi中，使用**UPDATE
    QA**按钮上传新文件。之后不要忘记推广到生产。![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_10.jpg)
- en: In the Google webmaster tool, you add the link provided by Google and verify
    it, as shown in the following screenshot:![Turning the game into a web app for
    the Google Chrome Web Store](img/4568_8_11.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在谷歌站长工具中，您需要添加谷歌提供的链接并进行验证，如下截图所示：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_11.jpg)
- en: You can now reupload to the Chrome Web Store and fill out all the necessary
    elements. You will need to add a detailed description of your game, the pricing
    scheme, and screenshots using the button shown in the following screenshot:![Turning
    the game into a web app for the Google Chrome Web Store](img/4568_8_12.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以重新上传到Chrome网络商店，并填写所有必要的元素。您需要添加游戏的详细描述、定价方案和截图，使用以下截图中显示的按钮：![将游戏转变为谷歌浏览器网络商店的网络应用](img/4568_8_12.jpg)
- en: If all goes well, you will be able to beta test your game as a web app as it
    becomes available for you to add to your Google Chrome. If things go wrong, AppMobi
    has an abundance of documentation on their services and information on how to
    use them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将能够将您的游戏作为网络应用进行测试，并将其添加到您的谷歌Chrome中。如果出现问题，AppMobi有大量关于其服务的文档和如何使用它们的信息。
- en: We now have a web app, but we can go through roughly the same process in order
    to get a real app. In this book, we will take the example of Android. Before doing
    so, let's quickly recap.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个网络应用，但是我们可以通过大致相同的过程来获得一个真正的应用程序。在本书中，我们将以Android为例。在这之前，让我们快速回顾一下。
- en: 'Summing up the preceding content, the conclusions are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总结前面的内容，结论如下：
- en: A web app is an app which is run in the browser instead of directly on the operating
    system of a device. Google Chrome has such web apps available in its Google Chrome
    Web Store. Publishing in the store requires a $5 one-time subscription fee.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用是在浏览器中运行的应用程序，而不是直接在设备的操作系统上运行。谷歌浏览器在其谷歌浏览器网络商店中提供此类网络应用。在商店发布需要支付一次性5美元的订阅费。
- en: AppMobi provides an easy way to build web apps and apps in general. Registration
    is free, but needs to be paid for once a game reaches a certain amount of success.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AppMobi提供了一种构建Web应用和应用的简单方法。注册是免费的，但一旦游戏取得一定的成功，就需要付费。
- en: The baked game needs to be zipped and uploaded to the AppMobi server. Here it
    will be adapted by AppMobi and you can download it again to upload it to the Chrome
    developer account.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 烘烤好的游戏需要被压缩并上传到AppMobi服务器。在这里，AppMobi会对其进行适配，然后你可以重新下载并上传到Chrome开发者账户。
- en: Google provides you with a link you need to reupload to AppMobi and verify with
    a Google webmaster account.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌会提供一个链接，你需要重新上传到AppMobi并通过谷歌站长账户进行验证。
- en: Once the link is verified, you can reupload your game to the Web Store and fill
    out details such as the game description.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接验证通过后，你可以重新上传游戏到Web商店，并填写游戏描述等详细信息。
- en: You can test your game in the browser before submitting it for review and releasing
    it to the public.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交应用程序进行审核和发布到公众之前，你可以在浏览器中测试你的游戏。
- en: Pushing your game to Android's Google play store
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将游戏推送到Android的谷歌应用商店
- en: 'Now that we know how to build a web app, let''s build an actual mobile app
    for the **Google play** store. Once again, we will make use of our AppMobi account
    to get the job done. However, in addition, you will need a Google developer account,
    priced at $25 per year, for publishing your game in the Google play store. Following
    are the steps to push your game to the Google play store:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何构建Web应用，让我们在**谷歌应用商店**上构建一个真正的移动应用。我们将再次利用我们的AppMobi账户来完成这项工作。但是，此外，你还需要一个谷歌开发者账户，每年需支付25美元，用于在谷歌应用商店发布你的游戏。以下是将游戏推送到谷歌应用商店的步骤：
- en: Use the `Upload game` package uploaded to the **AppMobi appHub** or upload a
    new one.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上传到**AppMobi appHub**的`上传游戏`包或上传一个新的包。
- en: 'Choose **Build** under the **Android** tab and fix any issues you still have.
    If you succeeded in building the Chrome store web app, there should be only one
    issue left: setting up Google cloud messaging. For this, you need a **Google Project
    ID** and an **API key**; you need to get both from your developer account.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Android**选项卡下选择**构建**，并解决你仍然存在的任何问题。如果你成功构建了Chrome商店的Web应用程序，那么只剩下一个问题：设置谷歌云消息传递。为此，你需要一个**谷歌项目ID**和一个**API密钥**；你需要从你的开发者账户中获取这两者。
- en: Sign up for a developer account at [https://play.google.com/apps/publish/signup](https://play.google.com/apps/publish/signup)
    or log in if you already have one.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://play.google.com/apps/publish/signup](https://play.google.com/apps/publish/signup)注册开发者账户，或者如果你已经有账户就登录。
- en: Go to your **Google apis** console and create a new project. You will be able
    to choose your project ID from [https://code.google.com/apis/console/](https://code.google.com/apis/console/).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到你的**Google APIs**控制台并创建一个新项目。你可以从[https://code.google.com/apis/console/](https://code.google.com/apis/console/)选择你的项目ID。
- en: Enable **Google Cloud Messaging for Android** in the **Services** section, as
    shown in the following screenshot:![Pushing your game to Android's Google play
    store](img/4568_8_13.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务**部分启用**Android的谷歌云消息传递**，如下截图所示：![将游戏推送到Android的谷歌应用商店](img/4568_8_13.jpg)
- en: Choose **create a new server key** in the **API Access** section of the control
    center. After creating a new server, you also receive the API key.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制中心的**API访问**部分选择**创建新的服务器密钥**。创建新服务器后，你也会收到API密钥。
- en: Return to the AppMobi appHub where you fill out both the project ID and the
    API key. You have now set up push messaging. The following screenshot shows the
    screen after completion of push messaging setup:![Pushing your game to Android's
    Google play store](img/4568_8_14.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到AppMobi appHub，在那里填写项目ID和API密钥。你现在已经设置好了推送消息。下面的截图显示了推送消息设置完成后的屏幕：![将游戏推送到Android的谷歌应用商店](img/4568_8_14.jpg)
- en: Your app should now be ready to build. Do so and download the `apk` file by
    clicking on the **BUILD NOW** button, as shown in the following screenshot:![Pushing
    your game to Android's Google play store](img/4568_8_15.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的应用现在应该准备好构建了。点击**立即构建**按钮，下载`apk`文件，如下截图所示：![将游戏推送到Android的谷歌应用商店](img/4568_8_15.jpg)
- en: All you need to do now is upload this file to your developer console. Google
    will require you to fill out a name, description, and add some screenshots. When
    this is done, you are all set to go.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你需要做的就是将这个文件上传到你的开发者控制台。谷歌将要求你填写名称、描述，并添加一些截图。完成这些步骤后，你就可以开始了。
- en: 'A word of advice before sending your app for play store review: test on several
    mobile devices whether the `build` file you downloaded from AppMobi works fluently.
    This can be done by uploading your file to your own website and downloading it
    with your smartphone. Alternatively, you can use free cloud storage services such
    as **Dropbox** to transfer the file from the cloud to any device on which you
    want to test.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在将你的应用提交到应用商店进行审核之前，建议在多部移动设备上测试从AppMobi下载的`构建`文件是否流畅运行。你可以通过将文件上传到你自己的网站并用智能手机下载来完成测试。或者，你可以使用免费的云存储服务，如**Dropbox**，将文件从云端传输到你想要测试的任何设备上。
- en: Now we have built both an app and a web app, we will dive into a way to publish
    your game on **Facebook**. Before doing so, let us quickly recap.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了应用和Web应用，我们将深入研究在**Facebook**上发布你的游戏的方法。在这之前，让我们快速回顾一下。
- en: 'Summing up the preceding content, the conclusions are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总结前面的内容，结论如下：
- en: Building an app with AppMobi is almost the same process as building a web app.
    However, in order to publish your game as an app, you will need a Google developer
    account, priced at $25 per year.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AppMobi构建应用与构建Web应用的过程几乎相同。但是，为了将你的游戏发布为应用，你需要一个谷歌开发者账户，每年需支付25美元。
- en: Upload your compressed `game` file to AppMobi appHub if you haven't already.
    Make sure to receive a project ID and API key from Google apis.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你还没有将压缩的`游戏`文件上传到AppMobi appHub，请先这样做。确保从Google APIs获得项目ID和API密钥。
- en: Build your `android` file and upload it to your developer account where you
    can send it in for review. However, before doing so, be sure to test your game
    on a few Android mobile devices.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建您的`android`文件并将其上传到您的开发人员帐户，然后可以将其发送进行审查。但在这样做之前，请务必在几部Android移动设备上测试您的游戏。
- en: Making your game available on Facebook
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Facebook上提供您的游戏
- en: 'AppMobi could be used to build a Facebook app but Facebook also allows another
    option of showing your game. You will need a Facebook developers account to go
    with your Facebook account. There is currently no subscription fee. You can go
    to the following link to get your Facebook developers account:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: AppMobi可以用于构建Facebook应用程序，但Facebook还允许另一种选项来展示您的游戏。您需要一个Facebook开发人员帐户与您的Facebook帐户配套使用。目前没有订阅费。您可以转到以下链接获取您的Facebook开发人员帐户：
- en: '[http://developers.facebook.com](http://developers.facebook.com)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developers.facebook.com](http://developers.facebook.com)'
- en: If you already have your game up and running on your own website, Facebook allows
    you to set a viewport to the game on your website.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在自己的网站上运行游戏，Facebook允许您在您的网站上设置游戏的视口。
- en: 'Following are the steps to make your game available on Facebook:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使您的游戏在Facebook上可用的步骤：
- en: In the app section of your account, create a new app by clicking on the following
    button:![Making your game available on Facebook](img/4568_8_16.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的帐户的应用程序部分，通过单击以下按钮创建一个新应用程序：![在Facebook上提供您的游戏](img/4568_8_16.jpg)
- en: Fill out the **App on Facebook** section, as shown in the following screenshot.
    If your game can also be viewed by mobile devices, you can also fill out the **Mobile
    Web** section. Make sure **sandbox mode** is on until you have tested everything
    thoroughly.![Making your game available on Facebook](img/4568_8_17.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写**Facebook应用**部分，如下面的屏幕截图所示。如果您的游戏也可以在移动设备上查看，还可以填写**移动网络**部分。确保**沙盒模式**打开，直到您彻底测试了所有内容。![在Facebook上提供您的游戏](img/4568_8_17.jpg)
- en: 'Go to the **App Details** page where you need to fill out some basic information
    about your game: category, description, and some screenshots. Once you are ready,
    you can preview your game by clicking on one of the following buttons:![Making
    your game available on Facebook](img/4568_8_18.jpg)'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**应用详细信息**页面，在那里您需要填写有关您的游戏的一些基本信息：类别、描述和一些屏幕截图。一旦准备好，您可以通过单击以下按钮之一来预览您的游戏：![在Facebook上提供您的游戏](img/4568_8_18.jpg)
- en: Try going back to your own profile page and you will find your game in your
    applications list, as shown in the following screenshot. Click on it to play and
    beta test your own Facebook game.![Making your game available on Facebook](img/4568_8_19.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试返回您自己的个人资料页面，您将在应用程序列表中找到您的游戏，如下面的屏幕截图所示。单击它以玩游戏并对您自己的Facebook游戏进行测试。![在Facebook上提供您的游戏](img/4568_8_19.jpg)
- en: 'This is not the only way to send your game to Facebook. You can make an actual
    Facebook app using AppMobi. However, once your game is finished and somewhere
    on a web server, this is a very quick way to get it on Facebook. There is also
    a big advantage to this method: the game remains on a server controlled by you,
    Facebook merely provides a viewport. This means that if Facebook changes things,
    this has little or no effect on compatibility with your game and you will not
    be pressed to change code anywhere.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是将游戏发送到Facebook的唯一方法。您可以使用AppMobi制作一个真正的Facebook应用程序。但是，一旦您的游戏完成并存储在Web服务器的某个位置，这是一个非常快速的方法将其放在Facebook上。这种方法还有一个很大的优势：游戏仍然存储在您控制的服务器上，Facebook仅提供一个视口。这意味着如果Facebook更改了某些内容，这对您的游戏的兼容性几乎没有影响，您不必在任何地方更改代码。
- en: As a last topic of this chapter, we will have a quick look at the direct canvas
    implementation of AppMobi. This is an interesting concept since it allows for
    games to run much faster than they would otherwise. However, first let's recap.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的最后一个主题，我们将快速查看AppMobi的直接画布实现。这是一个有趣的概念，因为它允许游戏运行速度比以往快得多。但是，首先让我们回顾一下。
- en: 'Summing up the preceding content, the conclusions are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 总结前面的内容，结论如下：
- en: There are several ways to bring your game to Facebook. Since we have already
    used AppMobi to build apps, we investigate the viewport solution.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有几种方法可以将您的游戏带到Facebook。由于我们已经使用AppMobi构建应用程序，我们将研究视口解决方案。
- en: You need your game to be up and running on a server and a free Facebook developers
    account.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要将游戏放在服务器上并拥有免费的Facebook开发人员帐户。
- en: Go to the **App** section and create a new app with normal canvas and/or mobile
    URL. Also fill out all the app details.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到**应用**部分，并创建一个具有普通画布和/或移动URL的新应用程序。还填写所有应用程序详细信息。
- en: Beta test your game thoroughly before releasing it. You can find your game between
    the applications in your own personal Facebook page.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发布之前彻底测试您的游戏。您可以在您自己的个人Facebook页面的应用程序之间找到您的游戏。
- en: Direct canvas game acceleration with AppMobi
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AppMobi进行直接画布游戏加速
- en: HTML5 games are great because the HTML and JavaScript can be interpreted by
    any browser and conversion to an app is rather straightforward. The easy "deployability"
    is a great advantage, but it comes with a rather big disadvantage. The resources
    taken by the canvas element in order to actually render your game can be outrageous,
    easily resulting in system lag once you want to use many entities at once. There
    are few things worse to the game experience than such a large drop in frame rate,
    it becomes like watching a slide show. However, there are tricks to improving
    this such as prerendering the graphics as suggested in [Chapter 7](ch07.html "Chapter 7. Graphics"),
    *Graphics*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5游戏很棒，因为HTML和JavaScript可以被任何浏览器解释，并且转换为应用程序相当简单。易于“部署”是一个很大的优势，但它也带来了一个相当大的劣势。画布元素为了实际渲染游戏所需的资源可能是惊人的，一旦您想要同时使用许多实体，系统延迟很容易就会出现。在游戏体验中，很少有比这更糟糕的事情，这就像看幻灯片一样。但是，有一些技巧可以改善这一点，比如在[第7章](ch07.html
    "第7章。图形") *图形*中建议的预渲染图形。
- en: 'If you want to make use of the performance boost that direct canvas provides,
    the implementation is rather straightforward. However, first you will need to
    prepare your code for the AppMobi ImpactJS XDK. Following are the steps to implement
    direct canvas acceleration:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想利用直接画布提供的性能提升，实现起来相当简单。但是，首先你需要为AppMobi ImpactJS XDK准备好你的代码。以下是实现直接画布加速的步骤：
- en: Go to the Chrome Web Store and install the Impact XDK extension.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Chrome Web Store并安装Impact XDK扩展。
- en: In the XDK, log in to your AppMobi account and add a new project. Choose your
    game's `root` folder in your XAMPP (or WAMP) library. The following screenshot
    shows the button to start a new project:![Direct canvas game acceleration with
    AppMobi](img/4568_8_20.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XDK中，登录你的AppMobi账户并添加一个新项目。在XAMPP（或WAMP）库中选择你游戏的`root`文件夹。以下截图显示了开始新项目的按钮：![使用AppMobi实现直接画布游戏加速](img/4568_8_20.jpg)
- en: The XDK will warn you that you have not yet included the AppMobi library in
    your game and you will not be able to make use of the AppMobi commands. Copy the
    code shown in the following screenshot to your clipboard, as suggested by the
    pop-up:![Direct canvas game acceleration with AppMobi](img/4568_8_21.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XDK会警告你尚未在游戏中包含AppMobi库，因此你将无法使用AppMobi命令。按照弹出窗口建议的方式，将以下代码复制到剪贴板中：![使用AppMobi实现直接画布游戏加速](img/4568_8_21.jpg)
- en: 'Open your `index.html` file and paste the script in the `head` section of the
    document. Your game is now ready to be viewed in the Impact XDK and you can add
    AppMobi commands to it when necessary, as shown in the following code snippet:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`index.html`文件，并将脚本粘贴到文档的`head`部分。现在你的游戏已经准备好在Impact XDK中查看，当需要时你可以添加AppMobi命令，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We now have our game running in the XDK. However, we do not yet have direct
    canvas acceleration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的游戏在XDK中运行。然而，我们还没有直接画布加速。
- en: 'Create a new script called `index.js` in your game''s `root` folder and add
    the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你游戏的`root`文件夹中创建一个名为`index.js`的新脚本，并添加以下代码：
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Open `index.html` and add the `AppMobi` command to the `onDeviceReady()` event
    listener. The following code will load the `index.js` script:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`并将`AppMobi`命令添加到`onDeviceReady()`事件监听器中。以下代码将加载`index.js`脚本：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Remove the following `script` tags that include your game and impact engine
    scripts:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除包括你的游戏和impact引擎脚本的以下`script`标签：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Remove the following `canvas` element:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除以下的`canvas`元素：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open `main.js` script and add the following to the list of required scripts:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`main.js`脚本，并将以下内容添加到所需脚本的列表中：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you have any reference to canvas styling, remove it from your code. For
    example: `ig.system.canvas.style.width = ''320px''`.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的代码中有画布样式的引用，请从中删除。例如：`ig.system.canvas.style.width = '320px'`。
- en: 'Finally, remove the touch event bindings you might have implemented when preparing
    the touch events for mobile and replace them with the AppMobi versions. The `<div>`
    elements can stay in the `index.html` file, but you need to attach other events.
    For instance, for the `shoot` button`<div>` element:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，删除你可能已经实现的触摸事件绑定，并用AppMobi版本替换它们。`<div>`元素可以留在`index.html`文件中，但你需要附加其他事件。例如，对于`shoot`按钮`<div>`元素：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Congratulations! You have now successfully implemented direct canvas acceleration!
    You might notice that the canvas element outline is now gone when playing your
    game in the Impact XDK, as shown in the following screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经成功实现了直接画布加速！当在Impact XDK中玩游戏时，你可能会注意到画布元素的轮廓已经消失，如下面的截图所示：
- en: '![Direct canvas game acceleration with AppMobi](img/4568_8_22.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![使用AppMobi实现直接画布游戏加速](img/4568_8_22.jpg)'
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The goal of this chapter was to provide insight into the technical preparations
    necessary when publishing your game in several ways. First we took a look at the
    process of baking your game code, which allows for shorter loading times and makes
    the source code less readable. Baking should be done right before distributing
    any game. Then we went deeper into adapting your game for mobile browsers by implementing
    touch controls. Turning the game into a web app or an Android app was done with
    the help of AppMobi. When publishing to Facebook, you have several options and
    we took a deeper look at one of them. In this solution, your own website acts
    as the actual platform while Facebook merely provides a viewport. On mobile devices,
    processing power and memory usage can be real issues when running a game. Therefore,
    we took a look at the direct canvas implementation of AppMobi. By getting rid
    of the normal HTML canvas element, a lot of overhead processing can be eliminated,
    greatly reducing the necessary resources.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是提供在多种方式发布游戏时所需的技术准备。首先，我们看了一下烘焙游戏代码的过程，这可以缩短加载时间并使源代码不那么易读。烘焙应该在分发游戏之前进行。然后我们深入研究了通过实现触摸控制来适应移动浏览器的游戏。将游戏转换为Web应用程序或Android应用程序是通过AppMobi完成的。在发布到Facebook时，你有几个选项，我们深入研究了其中一个。在这个解决方案中，你自己的网站充当实际平台，而Facebook仅提供一个视口。在移动设备上，运行游戏时处理能力和内存使用可能是真正的问题。因此，我们看了AppMobi的直接画布实现。通过摆脱普通的HTML画布元素，可以消除大量的开销处理，大大减少必要的资源。
- en: In the next and final chapter, we will have a look at the options you have as
    an HTML5 game developer to make money and hopefully turn a hobby into your job.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看作为HTML5游戏开发者的赚钱选择，希望能把爱好变成工作。
