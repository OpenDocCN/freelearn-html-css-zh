- en: Chapter 5. Understanding HTML5 Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。了解HTML5表单
- en: In this chapter we take a look at forms using the latest HTML5 technology, including
    new input types and form attributes. We'll briefly review some of the new input
    types that we'll be using in our sample forms. From there we'll discuss some of
    the new attributes in the specification, while also looking at the `autocapitalize`
    attribute specifically for mobile devices. Before we dive into our sample forms,
    we consider the layout of forms on iOS devices and the limitations that come up
    when interacting with these forms. Finally, we create some sample forms, develop
    some simple validations, and then style our form specifically for iOS - and WebKit-supported
    browsers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用最新的HTML5技术来查看表单，包括新的输入类型和表单属性。我们将简要回顾一些我们将在示例表单中使用的新输入类型。然后，我们将讨论规范中的一些新属性，同时专门针对移动设备查看`autocapitalize`属性。在深入研究我们的示例表单之前，我们考虑iOS设备上的表单布局以及与这些表单交互时出现的限制。最后，我们创建一些示例表单，开发一些简单的验证，然后专门为iOS和支持WebKit的浏览器样式化我们的表单。
- en: Once we've reviewed all of these features and have gone through our sample forms,
    we should have a solid grasp on HTML5 forms and how they relate to developing
    a web application for iOS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们审查了所有这些功能，并且已经浏览了我们的示例表单，我们应该对HTML5表单以及它们与为iOS开发Web应用程序有何关联有了扎实的理解。
- en: 'Here are the topics that we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的主题：
- en: New HTML5 input types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的HTML5输入类型
- en: New HTML5 form-specific attributes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的HTML5表单特定属性
- en: Form layout for iPhone
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPhone的表单布局
- en: Form validation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单验证
- en: Form styling for iOS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS的表单样式
- en: So, let's start by going over the new standard HTML5 input types.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先来看一下新的标准HTML5输入类型。
- en: HTML5 input types
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5输入类型
- en: 'HTML5 introduces several new input types that speed up the development of our
    applications. In total there are 13 new input types introduced with the HTML5
    specification, including `datetime`, `datetime-local`, `date`, `month`, `time`,
    `week`, `number`, `range`, `email`, `url`, `search`, `tel`, and `color`. Unfortunately,
    only 10 of these new inputs are supported on iOS, but there''s no need to worry
    since the type defaults to text automatically. This doesn''t help us too much,
    but it does allow us to create polyfills for the types we need but aren''t supported.
    However, either way, following is a breakdown of all the input types supported
    on iOS and a description of what each does:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5引入了几种新的输入类型，加快了应用程序的开发。总共有13种新的输入类型在HTML5规范中引入，包括日期时间、本地日期时间、日期、月份、时间、周、数字、范围、电子邮件、网址、搜索、电话和颜色。不幸的是，这些新输入中只有10种在iOS上受支持，但不用担心，因为类型会自动默认为文本。这对我们帮助不大，但它确实允许我们为我们需要但不受支持的类型创建polyfill。无论如何，以下是iOS上支持的所有输入类型的详细说明：
- en: '| Input type | Description |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: 输入类型 描述
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '--- ---'
- en: '| `button` | Represents a button with no additional semantics. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: 按钮 代表没有额外语义的按钮。
- en: '| `checkbox` | Represents a state or option that can be toggled. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: 复选框 代表可以切换的状态或选项。
- en: '| `date` | Represents a control for setting the element''s value to a string
    representing a date. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: 日期 代表将元素的值设置为表示日期的字符串的控件。
- en: '| `datetime` | Represents a control for setting the element''s value to a string
    representing a global date and time (with time zone information). |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: 日期时间 代表将元素的值设置为表示全局日期和时间（带有时区信息）的字符串的控件。
- en: '| `datetime-local` | Represents a control for setting the element''s value
    to a string representing a local date and time (with no time zone information).
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: 本地日期时间 代表将元素的值设置为表示本地日期和时间（不带时区信息）的字符串的控件。
- en: '| `email` | Represents a control for editing a list of e-mail addresses. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: 电子邮件 代表编辑电子邮件地址列表的控件。
- en: '| `file` | Represents a list of file items, each consisting of a filename,
    a file type, and a file body (the contents of the file). |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: 文件 代表文件项目列表，每个项目包括文件名、文件类型和文件主体（文件的内容）。
- en: '| `hidden` | Represents a value that is not intended to be examined or manipulated
    by the user. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: 隐藏 代表用户不打算检查或操作的值。
- en: '| `image` | Represents either an image from which the UA enables a user to
    interactively select a pair of coordinates and submit the form, or alternatively
    a button from which the user can submit the form. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: 图像 代表UA从中启用用户交互地选择一对坐标并提交表单的图像，或者用户可以从中提交表单的按钮。
- en: '| `month` | Represents a control for setting the element''s value to a string
    representing a month. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: 月份 代表一个控件，用于将元素的值设置为表示月份的字符串。
- en: '| `number` | Represents a precise control for setting the element''s value
    to a string representing a number. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: 数字 代表一个精确的控件，用于将元素的值设置为表示数字的字符串。
- en: '| `password` | Represents a one-line plain-text edit control for entering a
    password. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: 密码 代表用于输入密码的单行纯文本编辑控件。
- en: '| `radio` | Represents a selection of one item from a list of items (a radio
    button). |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: 单选按钮 代表从项目列表中选择一个项目的选择（单选按钮）。
- en: '| `range` | Represents an imprecise control for setting the element''s value
    to a string representing a number. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: 范围 代表一个不精确的控件，用于将元素的值设置为表示数字的字符串。
- en: '| `reset` | Represents a button for resetting a form. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: 重置 代表重置表单的按钮。
- en: '| `search` | Represents a one-line plain-text edit control for entering one
    or more search terms. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: 搜索 代表用于输入一个或多个搜索词的单行纯文本编辑控件。
- en: '| `submit` | Represents a button for submitting a form. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: 提交 代表提交表单的按钮。
- en: '| `tel` | Represents a one-line plain-text edit control for entering a telephone
    number. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: 电话 代表用于输入电话号码的单行纯文本编辑控件。
- en: '| `text` | Represents a one-line plain text edit control for the input element''s
    value. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: 文本 代表输入元素值的单行纯文本编辑控件。
- en: '| `time` | Represents a control for setting the element''s value to a string
    representing a time (with no time zone information). |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: 时间 代表将元素的值设置为表示时间（不带时区信息）的字符串的控件。
- en: '| `url` | Represents a control for editing an absolute URL given in the element''s
    value. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `url` | 代表一个控件，用于编辑元素值中给出的绝对URL。 |'
- en: '| `week` | Represents a control for setting the element''s value to a string
    representing a week. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `week` | 代表一个控件，用于将元素值设置为表示一周的字符串。 |'
- en: 'These details are available at:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些详细信息可在以下网址找到：
- en: '[http://www.w3.org/TR/html-markup/input.html](http://www.w3.org/TR/html-markup/input.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/TR/html-markup/input.html](http://www.w3.org/TR/html-markup/input.html)'
- en: '[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/InputTypes.html#//apple_ref/doc/uid/TP40008055-SW1](http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/InputTypes.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/InputTypes.html#//apple_ref/doc/uid/TP40008055-SW1](http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/InputTypes.html)'
- en: Even though there are plenty of inputs we can experiment with here, we will
    only be focusing on the new `email`, `number`, `datetime`, and `range` types.
    The sample forms in this book will also contain the regular types, including `text`,
    `password`, and `submit`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以在这里尝试许多输入，但我们只会专注于新的`email`、`number`、`datetime`和`range`类型。本书中的示例表单还将包含常规类型，包括`text`、`password`和`submit`。
- en: Now that we have a good grasp of what is supported and have a reference of information
    for what types might fit our needs, let's go ahead and review the attributes we
    can also take advantage of.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对支持的内容有了很好的了解，并且有了适合我们需求的类型的信息参考，让我们继续审查我们也可以利用的属性。
- en: HTML5 attributes for forms
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5表单属性
- en: 'There are many attributes we can use in HTML5, but to keep this part simple
    we''ll focus on the new attributes we can use on inputs and forms alike. The following
    attributes are defined in the latest HTML5 specification, except for `autocapitalize`,
    and are also supported on iOS:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5中有许多属性可供我们使用，但为了简化这部分，我们将专注于我们可以在输入和表单上使用的新属性。以下属性在最新的HTML5规范中定义，除了`autocapitalize`外，在iOS上也得到支持：
- en: '| Input attributes | Description |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 输入属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `autocapitalize` | Specifies the auto-capitalization behavior of text elements.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `autocapitalize` | 指定文本元素的自动大写行为。 |'
- en: '| `autocomplete` | Specifies whether the element represents an input control
    for which a UA is meant to store the value entered by the user (so that the UA
    can prefill the form later). |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `autocomplete` | 指定元素是否表示用户输入的输入控件（以便用户代理可以稍后预填充表单）。 |'
- en: '| `min` | The expected lower bound for the element''s value. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `min` | 元素值的预期下限。 |'
- en: '| `max` | The expected upper bound for the element''s value. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `max` | 元素值的预期上限。 |'
- en: '| `multiple` | Specifies that the element allows multiple values. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `multiple` | 指定元素允许多个值。 |'
- en: '| `placeholder` | A short hint (one word or a short phrase) intended to aid
    the user when entering data into the control represented by its element. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `placeholder` | 一个短提示（一个词或短语），旨在帮助用户输入控件的数据。 |'
- en: '| `required` | Specifies that the element is a required part of form submission.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `required` | 指定元素是表单提交的必需部分。 |'
- en: 'You can find details on these attributes at:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到这些属性的详细信息：
- en: '[http://www.w3.org/TR/html-markup/global-attributes.html#global-attributes](http://www.w3.org/TR/html-markup/global-attributes.html#global-attributes)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/TR/html-markup/global-attributes.html#global-attributes](http://www.w3.org/TR/html-markup/global-attributes.html#global-attributes)'
- en: '[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-SW2](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-SW2](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html)'
- en: '[http://www.w3.org/TR/html-markup/form.html#form.attrs.autocomplete](http://www.w3.org/TR/html-markup/form.html#form.attrs.autocomplete)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/TR/html-markup/form.html#form.attrs.autocomplete](http://www.w3.org/TR/html-markup/form.html#form.attrs.autocomplete)'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Not all form attributes are listed in the preceding table; only the latest supported
    attributes that are defined in the HTML5 specification are listed. This is to
    give us a good idea of the latest and greatest. If, however, you would like to
    gain a broader sense of what's supported, I encourage you to review the preceding
    sources that detail out this information and provide a thorough explanation of
    each attribute in the specification.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有表单属性都列在上表中；只列出了HTML5规范中定义的最新支持的属性。这是为了让我们对最新和最好有一个很好的了解。然而，如果您想获得更广泛的支持，我鼓励您查看上述详细信息的来源，并对规范中每个属性进行彻底的解释。
- en: We now have a basic understanding of the latest attributes supported on iOS.
    We can now briefly review some design considerations and then jump straight into
    some sample HTML5 forms to see how the latest input types and attributes work
    together to simplify our development process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对iOS支持的最新属性有了基本的了解。我们现在可以简要地回顾一些设计考虑，然后直接进入一些示例HTML5表单，看看最新的输入类型和属性如何一起工作，以简化我们的开发过程。
- en: Form layout for iPhone
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iPhone的表单布局
- en: 'In this section, we briefly cover some design considerations when we are creating
    a form for iOS. You may or may not have full control of the design of your form;
    however, to make it simpler to understand the limitations that may come up, the
    following table helps demonstrate the limited amount of screen real estate we
    have when working with forms. Hopefully, this will help you explain these limitations
    so that adjustments could be made. Let''s take a look at the following table:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们简要介绍了在为iOS创建表单时的一些设计考虑。您可能对表单的设计有或没有完全控制；然而，为了更容易理解可能出现的限制，以下表格有助于展示我们在处理表单时所拥有的有限屏幕空间。希望这将帮助您解释这些限制，以便进行调整。让我们来看看以下表格：
- en: '| UI control | Pixel dimensions |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| UI控件 | 像素尺寸 |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Status bar | 20 in Height |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 状态栏 | 高度20英寸 |'
- en: '| URL text field | 60 in Height |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| URL文本字段 | 高度60英寸 |'
- en: '| Form assistant | 44 in Height |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 表单助手 | 高度44英寸 |'
- en: '| Keyboard | 216 in Portrait Height162 in Landscape Height |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 键盘 | 竖屏高度216英寸，横屏高度162英寸 |'
- en: '| Button bar | 44 in Portrait Height32 in Landscape Height |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 按钮栏 | 竖屏高度44英寸，横屏高度32英寸 |'
- en: The details regarding these controls can be found at [https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/DesigningForms/DesigningForms.html](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/DesigningForms/DesigningForms.html).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些控件的详细信息可以在[https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/DesigningForms/DesigningForms.html](https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/DesigningForms/DesigningForms.html)找到。
- en: Based on these values, we need to adjust our forms for certain dimensions when
    these controls appear. For example, if all of these controls appear, except for
    the button bar, and we have an available height of 480 pixels, then our screen
    real estate ends up being a whopping height of 140 pixels.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些值，当这些控件出现时，我们需要调整我们的表单以适应特定的尺寸。例如，如果所有这些控件都出现，除了按钮栏，而我们有480像素的可用高度，那么我们的屏幕房地产最终将达到惊人的高度140像素。
- en: As you can see it's a challenge to create usable forms for iOS, but not impossible.
    There are some interesting techniques that we can use to accommodate forms within
    our applications. But the best technique is simplicity. Make sure that you don't
    require your user to provide lots of information at once; so instead of requiring
    a name, e-mail, password, and password confirmation with a date of birth, you
    just require a username, password, and email address. Keeping it simple goes a
    long way in our applications and helps improve the user experience.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，为iOS创建可用的表单是一个挑战，但并非不可能。有一些有趣的技术可以用来适应我们应用程序中的表单。但最好的技术是简单。确保你不要一次要求用户提供大量信息；所以不要要求姓名、电子邮件、密码和密码确认以及出生日期，而只要求用户名、密码和电子邮件地址。保持简单在我们的应用程序中有很大帮助，并有助于改善用户体验。
- en: We now have a fair understanding of the limitations that come up when designing
    forms for iOS, but now let's jump into functionality and see how we can create
    some simple forms.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对为iOS设计表单时出现的限制有了相当的了解，但现在让我们跳入功能性，看看我们如何创建一些简单的表单。
- en: Sample HTML5 forms
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例HTML5表单
- en: Now we're going to take a close look at some code, including the markup, scripts,
    and styles. Some of this you may already know and for the most part the only emphasis
    here will be on the new HTML5 inputs and attributes. We'll look at how they get
    implemented into a form, what their effect is on the UI controls, and how to leverage
    this new technology into our scripts. But first, let's do some setup work so that
    everything is consistent across our pages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将仔细研究一些代码，包括标记、脚本和样式。其中一些你可能已经知道，大部分重点将放在新的HTML5输入和属性上。我们将看看它们如何被实现到表单中，它们对UI控件的影响，以及如何将这项新技术应用到我们的脚本中。但首先，让我们做一些设置工作，以确保我们的页面保持一致。
- en: Setup work
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置工作
- en: 'The first thing we need to do is open up the `index.html` file for our forms
    page. Once we have this open, you''ll see that we have the old template that we
    initially created at the beginning of this book. As our applications have evolved,
    we must update this template to reflect those changes, so let''s do the following
    tasks:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是打开我们的表单页面的`index.html`文件。一旦打开了这个文件，你会看到我们最初在本书开始时创建的旧模板。随着我们的应用程序的发展，我们必须更新这个模板以反映这些变化，所以让我们做以下任务：
- en: Include the forms styling (`forms.css`) after our main styles
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的主要样式之后包含表单样式（`forms.css`）
- en: Update the navigation to reflect our new menu
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新导航以反映我们的新菜单
- en: Include our navigation script (`App.Nav.js`) and our forms script (`App.Forms.js`)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括我们的导航脚本（`App.Nav.js`）和我们的表单脚本（`App.Forms.js`）
- en: Including our forms styling
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括我们的表单样式
- en: 'Currently, we do not have any styling for this page, but we should include
    our page-specific stylesheet. When we do this, our head should look like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的页面没有任何样式，但我们应该包括我们的页面特定样式表。当我们这样做时，我们的头部应该是这样的：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Updating the navigation
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新导航
- en: 'Again, as with the previous chapter, we need to update our navigation to reflect
    the new select menu. This helps us save screen real estate for our application.
    When we update our navigation, our markup will be updated to the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章一样，我们需要更新我们的导航以反映新的选择菜单。这有助于为我们的应用程序节省屏幕房地产。当我们更新我们的导航时，我们的标记将更新为以下代码：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Including our navigation and forms scripts
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括我们的导航和表单脚本
- en: 'Now that we have our navigation in place, let''s include the navigation script
    and while we''re at it, let''s include the page-specific script for our forms:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的导航已经就位，让我们包含导航脚本，同时让我们包含我们的表单的页面特定脚本：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see we are only including the necessary scripts for this page to
    function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们只包含了这个页面所需的必要脚本。
- en: The forms
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单
- en: We will be developing three different forms on the page, including a login,
    register, and profile form. They're pretty basic and will mostly demonstrate the
    implementation of forms. After each bit of code, we'll review the new inputs and
    give some background information on how they affect our markup and user interface.
    For this part, don't concern yourself with the overall structure; meaning don't
    worry about the containing `div` of the form or the section with the header. The
    structure won't be discussed and is mostly there as a guideline for you. So, let's
    start with our login form.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在页面上开发三种不同的表单，包括登录、注册和个人资料表单。它们非常基本，大部分将演示表单的实现。在每段代码之后，我们将审查新的输入并提供一些关于它们如何影响我们的标记和用户界面的背景信息。在这部分，不要担心整体结构；也就是说，不要担心表单的包含`div`或带有标题的部分。结构不会被讨论，大部分是作为指导线给你的。所以，让我们从我们的登录表单开始。
- en: The login form
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录表单
- en: 'The following is the structure for our **Login** form. Review this carefully,
    mostly focus on the `form` element and how it utilizes the `autocapitalize` attribute,
    and then look at how the required attribute is implemented across our username
    and password fields:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们**登录**表单的结构。仔细审查这一点，主要关注“表单”元素以及它如何利用“自动大写”属性，然后看看我们如何在用户名和密码字段上实现了必填属性：
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we look at the final product, which is not at this point since we haven''t
    styled our form, it should look somewhat like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看最终产品时，由于我们还没有为我们的表单设置样式，它应该看起来有点像这样：
- en: '![The login form](img/1024OT_05_01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![登录表格](img/1024OT_05_01.jpg)'
- en: Our login form
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的登录表格
- en: As you can see, we have `autocapitalize` set to off on the `form` element. This
    basically tells mobile Safari to not capitalize any of the inputs within it. We
    could easily set this to `off` on each individual input, but for the simplicity
    of this demonstration we've kept it on the `form` element.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在“表单”元素上将“自动大写”设置为关闭。这基本上告诉移动Safari不要对其中的任何输入进行大写。我们可以很容易地在每个单独的输入上设置这个属性为“关闭”，但为了简化这个演示，我们将其保留在“表单”元素上。
- en: Another cool thing that's going on here is that we've set `required` on both
    username and password. This is great because it won't submit the form unless these
    fields are filled out. In the old days, we would need to set a class of `required`
    and then check it with JavaScript; now we don't with the advent of HTML5.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一件很酷的事情是，我们在用户名和密码上都设置了“必填”。这很棒，因为除非填写了这些字段，否则不会提交表单。在过去，我们需要设置一个“必填”的类，然后用JavaScript进行检查；现在有了HTML5，我们就不需要了。
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I know some of you may be shocked, but you won't receive any notice that a field
    is required in iOS. According to the developer documentation it's not supported.
    So why mention it here? Well because if we truly wanted to support multiple mobile
    devices, it's still a good idea to include this attribute so that our application
    is device-friendly, and if Apple chooses to support it in the future, we are future-proofing
    our application. Again, this has to be weighed by you and possibly by your team,
    but having this attribute conforms to the HTML 5 specification—it's just not supported
    on iOS, yet.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你们中的一些人可能会感到震惊，但在iOS中，你不会收到任何关于字段是否必填的通知。根据开发者文档，它不受支持。那么为什么在这里提到它呢？因为如果我们真的想要支持多个移动设备，包含这个属性仍然是一个好主意，这样我们的应用程序就会对设备友好，如果苹果选择在未来支持它，我们的应用程序就是未来的。再次强调，这需要你和可能是你的团队来权衡，但拥有这个属性符合HTML
    5规范——只是在iOS上不受支持而已。
- en: 'We can also see that the `placeholder` attribute is being used to apply some
    default text to our text inputs. Keep in mind that `placeholder` is exactly that:
    a placeholder. It is not setting the value of our input, so the value is still
    empty.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到“占位符”属性被用来为我们的文本输入应用一些默认文本。请记住，“占位符”就是一个占位符。它并不设置我们输入的值，所以值仍然是空的。
- en: The registration form
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册表格
- en: Now we move on to our registration form. In this form we'll collect the user's
    name, username, e-mail, password, and confirmation password. Again, don't focus
    on structure. Concentrate on how the `autocorrect` attribute is implemented on
    the `form` element and then the use of the `email` input type.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们转向我们的注册表格。在这个表格中，我们将收集用户的姓名、用户名、电子邮件、密码和确认密码。再次强调，不要关注结构。集中精力关注“自动更正”属性在“表单”元素上的实现，然后关注“电子邮件”输入类型的使用。
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we have completed this section and some of the preliminary styles, our
    form will look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成了这一部分和一些初步的样式后，我们的表单会看起来像这样：
- en: '![The registration form](img/1024OT_05_02.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![注册表格](img/1024OT_05_02.jpg)'
- en: Our registration form
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的注册表格
- en: In this form, we've turned off `autocorrect` from all form fields. Again, we
    can do this individually with every element, but to make things simpler we've
    chosen to add it to the `form` element.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表格中，我们已经关闭了所有表单字段的“自动更正”。再次强调，我们可以逐个元素地进行设置，但为了简化操作，我们选择将其添加到“表单”元素中。
- en: 'The last point to take into account is the use of the input type, `email`.
    When we start using some of the customized input types, our user interface accommodates.
    For example, when we click on the `email` input type, we''ll see that the controls
    change to include the `@` symbol:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要考虑的一点是使用输入类型“电子邮件”。当我们开始使用一些定制的输入类型时，我们的用户界面会相应调整。例如，当我们点击“电子邮件”输入类型时，我们会看到控件会改变以包括“@”符号：
- en: '![The registration form](img/1024OT_05_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![注册表格](img/1024OT_05_03.jpg)'
- en: The email input type
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件输入类型
- en: Now, let's take a closer look at some other input types to see how this affects
    our user interface.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看看其他输入类型是如何影响我们的用户界面的。
- en: The profile form
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 个人资料表格
- en: The following form is a sort of combination of both the login and registration
    forms with some extra fields. However, there are a couple of differences, so let's
    focus on just what's changed. In this example, we'll see that we've changed `autocapitalize`
    to `sentences` and have set `autocorrect` to `off` on only the fields we want
    it to apply to. On top of that, we start using the `datetime`, `number`, and `range`
    input types. The last change we've made is to apply the `required` fields using
    a class instead of an attribute—this will be explained further in the implementation
    of our scripts. For now, review the markup and then read on to view the explanations.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表单是登录和注册表单的一种组合，带有一些额外的字段。然而，有一些区别，所以让我们专注于改变的部分。在这个例子中，我们会看到我们已经将“自动大写”更改为“句子”，并且只在我们想要应用的字段上将“自动更正”设置为“关闭”。除此之外，我们开始使用“日期时间”、“数字”和“范围”输入类型。我们做出的最后一个改变是使用类而不是属性来应用“必填”字段——这将在我们脚本的实现中进一步解释。现在，先审查标记，然后继续阅读解释。
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our final product will look like this after our styling:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终产品在样式化后会是这样的：
- en: '![The profile form](img/1024OT_05_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![个人资料表格](img/1024OT_05_04.jpg)'
- en: Our profile form
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的个人资料表格
- en: In this example, we've set `autocapitalize` to `sentences` on the `form` element.
    This helps us out because now we've defined exactly what we want to be capitalized,
    and that is sentences only. This is described in Apple's documentation and can
    be further explored there. As for `autocorrect`, we've set it on the individual
    items because we may want it to correct on `textarea`. Again, we could have chosen
    to set `autocorrect` to `off` on the `form` element and then set it to `on` within
    the `textarea`, but this is a matter of choice and is completely up to you as
    the developer. Now let's review the several input types.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在`form`元素上将`autocapitalize`设置为`sentences`。这有助于我们，因为现在我们已经明确定义了我们希望大写的内容，即只有句子。这在苹果的文档中有描述，可以在那里进一步探索。至于`autocorrect`，我们在各个项目上设置它，因为我们可能希望在`textarea`上进行校正。同样，我们可以选择在`form`元素上将`autocorrect`设置为`off`，然后在`textarea`中将其设置为`on`，但这是一个选择的问题，完全取决于您作为开发人员。现在让我们来回顾一下几种输入类型。
- en: The datetime type
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 日期时间类型
- en: 'In this example we use `datetime` for the **Date of Birth** field. This is
    great because our UI accommodates exactly how we expect it to in order to provide
    exact information:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`datetime`来处理**出生日期**字段。这很棒，因为我们的UI完全符合我们的期望，以提供准确的信息：
- en: '![The datetime type](img/1024OT_05_05.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![日期时间类型](img/1024OT_05_05.jpg)'
- en: The datetime input type
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间输入类型
- en: The number type
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数字类型
- en: 'The `number` input type also manipulates our UI, so that we have a selection
    of numbers as defaults in our controls:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`number`输入类型也可以操作我们的UI，以便我们在控件中有一组默认的数字选择：'
- en: '![The number type](img/1024OT_05_06.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![数字类型](img/1024OT_05_06.jpg)'
- en: Our number input type
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数字输入类型
- en: The range type
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 范围类型
- en: 'The `range` input type is an extremely useful control within our forms. Again,
    this type provides a custom UI that allows us to use system defaults, instead
    of JavaScript, to provide the type of value we''re looking for:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`range`输入类型是我们表单中非常有用的控件。同样，这种类型提供了一个自定义的UI，允许我们使用系统默认值，而不是JavaScript，来提供我们所需的数值类型：'
- en: '![The range type](img/1024OT_05_07.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![范围类型](img/1024OT_05_07.jpg)'
- en: The range input type
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 范围输入类型
- en: Now we've finished reviewing some of the new input fields and attributes in
    HTML5 and how they affect our iOS web application's UI. Next is using JavaScript
    to validate our form. Again, this will be very basic and will introduce us to
    how we can set up a reusable component for forms and won't directly tie into these
    new inputs and attributes. This is because these custom inputs and attributes
    were part of the specification to help speed up development, thus your need to
    use scripts for validation should be limited. Either way, let's move forward and
    take a quick look into our scripts.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对HTML5中一些新的输入字段和属性以及它们如何影响我们的iOS Web应用程序UI的审查。接下来是使用JavaScript来验证我们的表单。同样，这将是非常基础的，并且将介绍我们如何设置一个可重用的表单组件，不会直接与这些新的输入和属性联系起来。这是因为这些自定义输入和属性是规范的一部分，旨在加快开发速度，因此您对使用脚本进行验证的需求应该是有限的。无论如何，让我们继续前进，快速看一下我们的脚本。
- en: Form validation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单验证
- en: In this section, we review the JavaScript written for this page. There's nothing
    that's really new or that pushes the boundary; it is explicitly meant to demonstrate
    how to use the framework we've developed in this book to create self-contained
    code that validates multiple forms and makes it easier for you to extend. So let's
    get started by reviewing the basic template.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们回顾了为这个页面编写的JavaScript。没有什么真正新颖或突破性的东西；它明确旨在演示如何使用我们在本书中开发的框架来创建自包含的代码，以验证多个表单并使您更容易扩展。所以让我们开始通过回顾基本模板。
- en: The basic template
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本模板
- en: The following is the basic template we've been using. A standard namespacing
    technique that extends the `App` namespace with a `Form` class will contain all
    of our functionality.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们一直在使用的基本模板。使用标准的命名空间技术，扩展`App`命名空间的`Form`类将包含我们所有的功能。
- en: '[PRE6]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Just keep in mind that the code is self-contained in an immediately invoked
    function expression or IIFE/closure. When we initialize `App.Form` the `Form`
    constructor will be called and our public method, `init`, will initialize any
    code that we write within it. So let's get started there, by attaching the appropriate
    events.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，代码是包含在立即调用的函数表达式或IIFE/闭包中的自包含的。当我们初始化`App.Form`时，`Form`构造函数将被调用，我们的公共方法`init`将初始化我们在其中编写的任何代码。所以让我们从那里开始，附加适当的事件。
- en: Initializing our forms
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化我们的表单
- en: We need to initialize our forms, but we don't really need to create a new object
    for each one. What we can do is have it event-driven and then handle our validation
    using the attributes we've written for each input. But let's look at our event
    setup.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要初始化我们的表单，但我们不需要为每个表单创建一个新对象。我们可以通过事件驱动来处理验证，然后使用我们为每个输入写的属性来处理验证。但让我们来看看我们的事件设置。
- en: Attaching events
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加事件
- en: 'First, let''s perform attaching events:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们执行事件附加：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code we've got a couple of things going on. First, we look
    for the submission of any form on the page. Then, we're going to call the `handleFormSubmission`
    method, which we'll write in a moment, when we submit the form. The following
    event listeners are basically a show/hide for the login and register buttons.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们有一些事情要做。首先，我们要查找页面上任何表单的提交。然后，当我们提交表单时，我们将调用`handleFormSubmission`方法，我们将在一会儿编写。以下的事件监听器基本上是登录和注册按钮的显示/隐藏。
- en: Nothing new or groundbreaking here, we're basically doing some setup work and
    can always come back to this if we need to. The key here is that we have not created
    a new instance of an object for each form, instead we've generalized our code
    to just listen for the `submit` event on each form. Now let's create, or set up,
    our handlers and then write the functionality for them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新的或突破性的东西，基本上我们只是做一些设置工作，如果需要的话随时可以回来。关键在于，我们没有为每个表单创建一个新的对象实例，而是将我们的代码概括为只监听每个表单上的`submit`事件。现在让我们创建或设置我们的处理程序，然后编写它们的功能。
- en: Event handlers
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件处理程序
- en: Now, let's take a look at the event handlers.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下事件处理程序。
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We haven't done anything new here, the only steps we've taken are to stub out
    our code so that we know where each piece of functionality will exist. From here,
    we look at the validation code for the submission of each form. We will not be
    looking at the show/hide functionality of each form, but you do have the source
    code that accompanies this book in case you are curious about how that works.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们并没有做任何新的事情，我们所做的唯一步骤是为我们的代码设置桩，以便我们知道每个功能的位置。从这里开始，我们看一下每个表单提交的验证代码。我们不会看每个表单的显示/隐藏功能，但是你可以查看本书附带的源代码，以了解它是如何工作的。
- en: Validating our input
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证我们的输入
- en: We're going to take a look at the `handleFormSubmission` method and go step-by-step
    in order to understand how we are validating our fields. If you feel confused
    at any step of the process, don't worry about it. We've all been here, and I myself
    struggle sometimes with form validation and how it should be handled on a project-by-project
    basis.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下`handleFormSubmission`方法，并逐步了解我们如何验证我们的字段。如果你在任何步骤感到困惑，不要担心。我们都曾经历过这种情况，我自己有时也会在表单验证和如何在项目中处理它方面遇到困难。
- en: 'First, let''s start by caching the variables we''ll be using:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们开始缓存我们将要使用的变量：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These variables describe themselves, a standard practice since we want to understand
    what is going on and thus, attaching meaningful names to our variables is a must.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量描述了它们自己，这是一个标准的做法，因为我们想要理解发生了什么，因此给我们的变量附上有意义的名称是必不可少的。
- en: 'Now, we need to prevent default behavior of our form; meaning we don''t want
    the form to submit just yet. To do this, let''s do the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要阻止表单的默认行为；这意味着我们暂时不想提交表单。为了做到这一点，让我们做以下操作：
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We have added `e.preventDefault`, which tells the event to prevent the event''s
    default behavior in the browser. Next, we want to define the target, empty out
    any previous error messaging, create an empty errors object, and then find all
    required elements. This can be done with the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了`e.preventDefault`，它告诉事件阻止浏览器中的默认行为。接下来，我们想要定义目标，清空任何先前的错误消息，创建一个空的错误对象，然后找到所有必填元素。可以使用以下代码完成：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that our `errors` object contains two arrays: a `required` array and an
    `invalid` array. This `errors` array will keep track of what''s gone wrong; for
    example, if a field is `required` and the value is `empty`, then we''ll populate
    the `required` array within the `error` object, but if an input is filled out
    but is not valid, then we''ll to populate the `invalid` object within the `errors`
    object.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的`errors`对象包含两个数组：一个`required`数组和一个`invalid`数组。这个`errors`数组将跟踪出了什么问题；例如，如果一个字段是`required`并且值是`empty`，那么我们将在`error`对象内填充`required`数组，但如果一个输入已经填写但不合法，那么我们将在`errors`对象内填充`invalid`对象。
- en: 'Now, remember when we added the `required` class but not the `required` attribute
    to our profile form? Well the preceding code wouldn''t catch that, so we''ll run
    into issues. In order to prevent that, we can do the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，记得当我们添加了`required`类但没有添加`required`属性到我们的个人资料表单时吗？前面的代码就无法捕捉到这一点，所以我们会遇到问题。为了防止这种情况发生，我们可以这样做：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code helps solve our issue with the `required` class, but does have a
    logical flaw. Can you find that flaw? I''ll leave that up to you as possibly a
    teaser for you to solve. The next step in this process is to find all our `form`
    elements, and then find the `required` fields and check that they''ve been filled
    out:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有助于解决我们在`required`类上的问题，但确实存在一个逻辑缺陷。你能找到这个缺陷吗？我会留给你作为一个谜题来解决。这个过程的下一步是找到所有的`form`元素，然后找到`required`字段并检查它们是否已经填写：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: At this point, we are basically populating our `invalid` array inside the `error`
    object if the field is empty. If the field is empty, we collect the value of the
    label associated with that field and attach a customized message that will be
    presented to the user.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们基本上在`error`对象内填充我们的`invalid`数组。如果字段为空，我们收集与该字段关联的标签的值，并附加一个定制的消息，将呈现给用户。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unfortunately, specific validation won't be covered, such as e-mail, numerical,
    and other constraints. However, there is room here for you to explore and add
    to this bit of code, but hopefully this is enough for you to understand validation,
    requirements, and how to handle these use cases in your code.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，特定的验证不会被覆盖，比如电子邮件、数字和其他限制。然而，这里有足够的空间让你探索并添加到这段代码中，希望这足以让你理解验证、要求以及如何在代码中处理这些用例。
- en: 'The last step is to check for errors, and if they do exist present these errors
    to the user so that they can correct them accordingly:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是检查错误，如果存在错误，将这些错误呈现给用户，以便他们相应地进行更正：
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Our check is pretty simple, we essentially check if the `invalid` and `required`
    arrays are empty within the `error` object. If they are, we want to continue with
    the submission—which in this case would be an AJAX call. Otherwise, we want to
    create an unordered list containing the errors and then append them to the form,
    so that the user understands what went wrong without a page refresh.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的检查非常简单，我们基本上检查`error`对象内的`invalid`和`required`数组是否为空。如果是，我们希望继续提交——在这种情况下将是一个AJAX调用。否则，我们希望创建一个包含错误的无序列表，然后将它们附加到表单上，以便用户在没有页面刷新的情况下了解出了什么问题。
- en: Hopefully, this section has helped you understand the approach in validating
    a form. With the latest support of the HTML5 specification, much of the work is
    taken care of by the browser. This speeds up development by lessening the development
    of customized components and helps us focus on delivery. Now as a bonus feature,
    we move on to styling our form.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这一部分帮助你理解验证表单的方法。有了HTML5规范的最新支持，浏览器已经处理了大部分工作。这加快了开发速度，减少了定制组件的开发，并帮助我们专注于交付。现在作为一个额外的功能，我们继续进行表单的样式设计。
- en: Form styling for iOS
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS的表单样式
- en: In this section we look at styling our form. If we currently test out our form
    on an iOS device or even a desktop browser, it won't be pretty. In fact you might
    be a little upset at how ugly it really is. So, let's style it and make everyone
    happy. We'll start with basic styling that helps achieve a good look. Then we'll
    consider how we can customize our components using CSS3 features.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究如何为我们的表单进行样式设置。如果我们目前在iOS设备上甚至桌面浏览器上测试我们的表单，它看起来并不漂亮。事实上，你可能会对它的丑陋感到有点不满。因此，让我们对其进行样式设置，让每个人都满意。我们将从帮助实现良好外观的基本样式开始。然后，我们将考虑如何使用CSS3功能自定义我们的组件。
- en: Basic styling
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本样式
- en: Styling forms is pretty easy. We can simply use the elements themselves, but
    there is a single "gotcha". You might notice the fact that we've specified `[type="datetime"]`
    in one of our selectors. This is because the `datetime` input type shows a select
    menu type of UI in iOS and thus, the typical input selector won't apply. Otherwise,
    there's not much to the basic styling that really pops out here, and it basically
    gives us the styles we've seen in the previous images when we discussed the input
    types used in our forms.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 样式化表单非常容易。我们可以简单地使用元素本身，但有一个“陷阱”。您可能注意到我们在一个选择器中指定了`[type="datetime"]`。这是因为`datetime`输入类型在iOS上显示为选择菜单类型的UI，因此典型的输入选择器不适用。否则，在基本样式中并没有太多真正突出的地方，它基本上给了我们在之前讨论过的表单中使用的输入类型中看到的样式。
- en: '[PRE15]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Custom styling
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义样式
- en: This is where a lot of the magic happens. In this section, we use custom CSS3
    styles to customize our components. The following styles will customize our inputs,
    selects, and give us a more stylized form that matches our current styling. Some
    things you may want to keep in mind when reviewing the styling are the use of
    the CSS3 `gradient` properties as `background` and the use of `border-radius`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是许多魔术发生的地方。在本节中，我们使用自定义的CSS3样式来自定义我们的组件。以下样式将自定义我们的输入、选择，并给我们一个更加风格化的表单，与我们当前的样式相匹配。在审查样式时，您可能需要记住的一些事情是使用CSS3的`gradient`属性作为`background`和`border-radius`的使用。
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When we apply the preceding styles, we get the following UI:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用前面的样式时，我们得到以下UI：
- en: '![Custom styling](img/1024OT_05_08.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![自定义样式](img/1024OT_05_08.jpg)'
- en: The range input type
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 范围输入类型
- en: As you can see, we've given our form a completely new look and feel and have
    easily styled the select component, something that is not easily done on desktop
    browsers. Going on from these styles, I would recommend checking out the `–webkit-appearance`
    property that essentially allows you to further customize your form and gives
    you much more control in terms of how components can get styled. However, at this
    point you should have a solid foundation to build HTML5 forms for iOS.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们给我们的表单赋予了全新的外观和感觉，并且很容易地对选择组件进行了样式设置，这在桌面浏览器上并不容易做到。在这些样式之上，我建议您查看`-webkit-appearance`属性，它基本上允许您进一步自定义您的表单，并在组件的样式方面提供更多的控制。然而，此时您应该已经有了一个坚实的基础，可以为iOS构建HTML5表单。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have reviewed the latest HTML5 input types and attributes
    specifically for our sample application. We then discussed the layout of forms
    on iOS and its limitations. Finally, we developed a couple of forms and attached
    a very basic validation script that used these latest input and attributes to
    our advantage. As a bonus, we went into styling our forms specifically for WebKit
    browsers, including mobile Safari on iOS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了最新的HTML5输入类型和属性，特别是针对我们的示例应用程序。然后，我们讨论了iOS上表单的布局及其限制。最后，我们开发了一些表单，并附加了一个非常基本的验证脚本，利用了这些最新的输入和属性。作为一个额外的奖励，我们还讨论了如何为WebKit浏览器（包括iOS上的移动Safari）定制我们的表单样式。
- en: We should now have a solid grasp of forms on iPhone and iPad, and how they can
    be used with the latest HTML5 technology for our advantage. This chapter helped
    to demonstrate the use of forms and the considerations we need to take in order
    to create a user-friendly form. On top of that, we now move into location awareness
    in our next chapter and will use some of the concepts learned here to extend the
    experience.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该对iPhone和iPad上的表单有了坚实的掌握，以及如何利用最新的HTML5技术为我们带来好处。本章帮助演示了表单的使用以及我们需要考虑的因素，以便创建用户友好的表单。除此之外，我们现在将进入下一章的位置感知，并将使用在这里学到的一些概念来扩展体验。
