- en: Chapter 10. Creating a Native iPhone Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。创建本机iPhone Web应用程序
- en: In this chapter, we look at transferring our native applications for iOS Safari
    to a native environment using the PhoneGap framework. We'll dive into setting
    up our development environment, including the setup of the Xcode IDE and use of
    the iOS Simulator. We'll build a `HelloWorld` example to demonstrate how easy
    it is to get going quickly, and then transfer our single-page application, built
    in [Chapter 7](ch07.html "Chapter 7. One-page Applications"), *One-page Applications*.
    Once we have a solid foundation on native application development, we'll enhance
    the single-page application by tying into native functionality using PhoneGap's
    Contacts API to bring in our contacts and display some of their information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何使用PhoneGap框架将我们的iOS Safari本机应用程序转移到本机环境。我们将深入设置我们的开发环境，包括设置Xcode
    IDE和使用iOS模拟器。我们将构建一个“HelloWorld”示例，以演示快速入门的简单性，然后转移我们在[第7章](ch07.html "第7章。单页应用程序")构建的单页应用程序，*单页应用程序*。一旦我们在本机应用程序开发上有了坚实的基础，我们将通过使用PhoneGap的联系人API来绑定本机功能，从而增强单页应用程序，以引入我们的联系人并显示其中一些信息。
- en: We aim to help you achieve a consistent look and feel for your native application
    using a single codebase. The goals here are to get you started on native application
    development using the programming languages you have grown to love and understand
    for the Web. With that in mind, let's start by setting up our development environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是帮助您使用单一代码库实现本机应用程序的一致外观和感觉。这里的目标是让您开始使用您已经喜爱和理解的Web编程语言进行本机应用程序开发。考虑到这一点，让我们从设置我们的开发环境开始。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Xcode installation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode安装
- en: Using the iOS Simulator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iOS模拟器
- en: Implementing PhoneGap
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施PhoneGap
- en: Creating a `HelloWorld` example
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建“HelloWorld”示例
- en: Transferring a current application, including CSS, JavaScript, HTML, and assets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移当前应用程序，包括CSS、JavaScript、HTML和资产
- en: Tying into native functionality using the Contacts API in PhoneGap
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PhoneGap在iOS中绑定本机功能的联系人API
- en: Setting up the development environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: As with any workflow to creating software, our development environment is critical.
    So, let's take some time setting up the environment preferred by many engineers
    to create native applications. In this section, we'll go over the installation
    of Xcode, and an overview of the Integrated Development Environment (IDE). We'll
    continue by setting up the PhoneGap framework and lastly look at how the iOS Simulator
    plays a critical roll in testing our app. As a bonus, we'll look at configuring
    our application to fit our needs in this chapter. So let's get started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建软件的任何工作流程一样，我们的开发环境至关重要。因此，让我们花些时间设置许多工程师喜欢的环境，以创建本机应用程序。在本节中，我们将介绍Xcode的安装和集成开发环境（IDE）的概述。我们将继续设置PhoneGap框架，最后看看iOS模拟器如何在测试我们的应用程序中发挥关键作用。作为一个额外的奖励，我们将在本章中看看如何配置我们的应用程序以满足我们的需求。所以让我们开始吧。
- en: Getting started with Xcode
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Xcode
- en: Xcode is the preferred IDE for native application development on the iOS operating
    system, as it is actively supported by Apple and specifically tailored to the
    OS X and iOS operating systems. The IDE is provided by Apple and can be used to
    create Mac OS X, iPhone, and iPad applications. While it can also be used for
    other various types of development, these three platforms are most commonly associated
    with Xcode. By default, your Mac does not come with Xcode, so we'll need to install
    it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode是iOS操作系统上本机应用程序开发的首选IDE，因为它得到了苹果的积极支持，并专门针对OS X和iOS操作系统进行了定制。这个IDE由苹果提供，可以用来创建Mac
    OS X、iPhone和iPad应用程序。虽然它也可以用于其他各种类型的开发，但这三个平台最常与Xcode相关。默认情况下，您的Mac没有预装Xcode，所以我们需要安装它。
- en: Installing Xcode
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Xcode
- en: Luckily for us, Xcode is extremely easy to install. We can install the IDE through
    the Mac App Store ([https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12](https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12)).
    When the installation is complete, we will have various pieces of software installed
    on our computer, including the Instruments analysis tool, iOS Simulator, and the
    latest **Mac OS X and iOS software development kit** (**SDK**).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Xcode非常容易安装。我们可以通过Mac App Store（[https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12](https://itunes.apple.com/us/app/xcode/id497799835?ls=1&mt=12)）安装这个IDE。安装完成后，我们的计算机上将安装各种软件，包括Instruments分析工具、iOS模拟器和最新的**Mac
    OS X和iOS软件开发工具包**（**SDK**）。
- en: Xcode IDE overview – the basics
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Xcode IDE概述-基础知识
- en: By default, the Xcode IDE gets installed in the applications directory; launch
    it by double-clicking on the icon displayed. The icon is a hammer that is diagonally
    located over a blue technical drawing that has a pencil, brush, and ruler forming
    the letter A. When the application launches, we will see the welcome screen.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Xcode IDE安装在应用程序目录中；双击显示的图标启动它。图标是一个对角放置在蓝色技术图纸上的锤子，上面有一个形成字母A的铅笔、刷子和尺子。应用程序启动时，我们将看到欢迎屏幕。
- en: '![Xcode IDE overview – the basics](img/1024OT_10_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode IDE概述-基础知识](img/1024OT_10_01.jpg)'
- en: The welcome screen
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎屏幕
- en: This is the welcoming screen for Xcode, and it lists out recent projects and
    the ability to create a new project, connect to a repository, learn about Xcode,
    or check out the Apple developer portal. On your screen you will most likely not
    have the `HelloWorld` project listed in the preceding screenshot, which is what
    we will be building, and if it's your first time this should be empty.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Xcode的欢迎屏幕，列出了最近的项目和创建新项目、连接到存储库、了解Xcode或查看苹果开发者门户网站的能力。在您的屏幕上，您很可能不会看到前面截图中列出的`HelloWorld`项目，这是我们将要构建的项目，如果这是您第一次，它应该是空的。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Because this section is to get us familiar with Xcode itself, don't hesitate
    about the next few screens. The next screens are what we will be building out,
    but are only meant to help us recognize certain parts of the Xcode application
    to make it easier for you to use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这一部分是让我们熟悉Xcode本身，不要担心接下来的几个屏幕。接下来的屏幕是我们要构建的，但只是为了帮助我们识别Xcode应用程序的某些部分，以便更容易使用。
- en: The Xcode workspace
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Xcode工作区
- en: 'Now, let''s go over the user interface of Xcode in order to understand how
    we can leverage this powerful tool. First of all, as we already know, we are introduced
    to the welcome screen when we open the application. You can choose to disable
    this feature by unchecking the **Show this window when Xcode launches** checkbox
    on the welcome screen. But when we have a project that we have created open, this
    is what it looks like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解Xcode的用户界面，以了解如何利用这个强大的工具。首先，正如我们已经知道的，当我们打开应用程序时，会看到欢迎屏幕。您可以选择通过在欢迎屏幕上取消选中**Xcode启动时显示此窗口**复选框来禁用此功能。但是当我们打开一个已创建的项目时，它看起来是这样的：
- en: '![The Xcode workspace](img/1024OT_10_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工作区](img/1024OT_10_02.jpg)'
- en: The project display
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 项目显示
- en: 'Looks pretty simple right? Well that''s good, because this is known as the
    workspace and this is critical because Xcode aims to have all development efforts
    be located within one central window in the IDE, helping us consolidate and speed
    up our development process. But recognize the two critical aspects of this workspace:
    the Navigator Area located to the left where all of our files are located, and
    then the Editor Area where we can edit the project we are in.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很简单对吧？这很好，因为这被称为工作区，这很关键，因为Xcode旨在使所有开发工作都集中在IDE的一个中心窗口中，帮助我们整合和加快开发过程。但要认识到这个工作区的两个关键方面：左侧的导航器区域，其中包含我们所有的文件，以及我们可以编辑所在项目的编辑器区域。
- en: '![The Xcode workspace](img/1024OT_10_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工作区](img/1024OT_10_03.jpg)'
- en: The Navigator and Editor Areas
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 导航器和编辑器区域
- en: The preceding screenshot helps demonstrate the two most critical aspects of
    Xcode when it comes to developing an application. Keep in mind that, depending
    on the file selected, your Editor Area will change. For example, in the preceding
    screenshots we have a GUI that allows us to set properties of our project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图有助于演示Xcode在开发应用程序时的两个最关键的方面。请记住，根据所选的文件，您的编辑器区域会发生变化。例如，在前面的截图中，我们有一个GUI，可以让我们设置项目的属性。
- en: The Xcode toolbar
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Xcode工具栏
- en: The toolbar in Xcode has various features that we'll use constantly when developing
    native applications. For example, in the following screenshot, there are **Run**,
    **Stop**, and **Breakpoints** buttons, including a **Scheme** selector. These
    actions are extremely important when debugging your application(s). The **Run**
    button does exactly what it says, it runs your application. **Stop** on the other
    hand will stop all activities with the running application. And the **Breakpoints**
    button will display our breakpoints in the Editor Area.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode工具栏具有各种功能，我们在开发原生应用程序时会经常使用。例如，在下面的截图中，有**Run**、**Stop**和**Breakpoints**按钮，以及**Scheme**选择器。在调试应用程序时，这些操作非常重要。**Run**按钮会运行您的应用程序。另一方面，**Stop**按钮将停止运行应用程序的所有活动。**Breakpoints**按钮将在编辑器区域显示我们的断点。
- en: '![The Xcode toolbar](img/1024OT_10_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工具栏](img/1024OT_10_04.jpg)'
- en: The toolbar displaying Run, Scheme, and Breakpoints
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 显示运行、Scheme和断点的工具栏
- en: The **Scheme** selector lets you choose which application to test and in what
    environment to test it. In our example application, `HelloWorld` will be tested
    using the iPhone 6.0 Simulator, but we have various options to choose from. Looking
    at the following screenshot, we can see that, if installed, we can test our application
    using the iPad Simulator and various versions of it, and the iPhone Simulator.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scheme**选择器允许您选择要测试的应用程序以及要测试的环境。在我们的示例应用程序中，`HelloWorld`将使用iPhone 6.0模拟器进行测试，但我们有各种选项可供选择。从下面的截图中可以看到，如果安装了，我们可以使用iPad模拟器和各个版本以及iPhone模拟器来测试我们的应用程序。'
- en: '![The Xcode toolbar](img/1024OT_10_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工具栏](img/1024OT_10_05.jpg)'
- en: The toolbar Scheme selector
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏Scheme选择器
- en: The toolbar also has various actions to the right of the IDE, including the
    editor views, general views, and organizer. The default editor view is a text
    editor component, allowing us to do basic editing of our source files. The middle
    editor view is the assistant editor, which we will not be covering. The last editor
    view is the version editor.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏还有各种操作，位于IDE右侧，包括编辑器视图、常规视图和组织者。默认的编辑器视图是文本编辑器组件，允许我们对源文件进行基本编辑。中间的编辑器视图是助理编辑器，我们不会涉及。最后的编辑器视图是版本编辑器。
- en: '![The Xcode toolbar](img/1024OT_10_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工具栏](img/1024OT_10_06.jpg)'
- en: The toolbar project display options
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏项目显示选项
- en: The version editor is great for our use as developers, allowing us to edit files
    and see the versioning happening immediately. For example, in the following screenshot
    we can see that a comment was added, and that the original versioned file is informing
    the user of where the changes have been made, allowing us to see live edits of
    the same file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 版本编辑器对于我们作为开发人员来说非常有用，可以让我们立即编辑文件并查看版本变化。例如，在下面的截图中，我们可以看到添加了注释，并且原始版本文件通知用户更改发生的位置，让我们可以看到同一文件的实时编辑。
- en: '![The Xcode toolbar](img/1024OT_10_07.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工具栏](img/1024OT_10_07.jpg)'
- en: The project versioning display
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 项目版本显示
- en: 'Moving on to the **View** toolbar section, we have three buttons. Each button
    reveals a certain part of the editor that is useful to us depending on the situation.
    The first button is selected by default because it shows us the Navigator Area
    to the left. The middle button reveals the debugging area as shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 继续讨论**View**工具栏部分，我们有三个按钮。每个按钮根据情况显示对我们有用的编辑器的某个部分。第一个按钮默认选中，因为它显示了左侧的导航器区域。中间的按钮显示了调试区域，如下面的截图所示：
- en: '![The Xcode toolbar](img/1024OT_10_08.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工具栏](img/1024OT_10_08.jpg)'
- en: The project debugging display
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 项目调试显示
- en: This is great because we can now debug our application as it runs and see the
    logs as the application is tested. Remember all those logs we use in our applications?
    They will show up here; they are extremely useful if we don't have a developer
    console that is very useful in our browser. The last button in the toolbar controls
    the utilities. These utilities help us control various settings of the current
    file in question; from name to source control, we can customize various details
    of our files.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，因为我们现在可以在应用程序运行时调试应用程序并查看日志。记得我们在应用程序中使用的所有日志吗？它们会显示在这里；如果我们的浏览器中没有非常有用的开发者控制台，它们非常有用。工具栏中的最后一个按钮控制工具。这些工具帮助我们控制当前文件的各种设置；从名称到源代码控制，我们可以定制文件的各种细节。
- en: '![The Xcode toolbar](img/1024OT_10_09.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode工具栏](img/1024OT_10_09.jpg)'
- en: The project file configuration display
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件配置显示
- en: Okay, so we know the basic features of Xcode and that there is much to explore—and
    that it is both great and beneficial to us as developers. We can continue to cover
    all the extremely useful features of Xcode, but for our benefit let's move on
    to PhoneGap, after all we are more interested in learning to build a native application.
    The tools can always be used and customized for our needs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们知道了Xcode的基本功能，还有很多可以探索的地方，而且作为开发者，它对我们来说既伟大又有益。我们可以继续介绍Xcode的所有非常有用的功能，但为了我们的利益，让我们转向PhoneGap，毕竟我们更感兴趣的是学习如何构建原生应用程序。工具总是可以根据我们的需求使用和定制。
- en: Setting up PhoneGap
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置PhoneGap
- en: Xcode is great to use in your arsenal of application development environments.
    However, PhoneGap is where all the magic happens. It's the framework that empowers
    us to create native applications that are based on the code we have already written
    with HTML, CSS, and JavaScript. So let's review how to install it, create a project,
    and briefly go over its support and license to prepare us to harness its abilities
    for our own applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode在应用程序开发环境中非常好用。然而，PhoneGap才是魔法发生的地方。它是一个框架，使我们能够基于我们已经用HTML、CSS和JavaScript编写的代码创建原生应用程序。因此，让我们回顾一下如何安装它，创建一个项目，并简要介绍它的支持和许可，以便为我们自己的应用程序利用其能力做好准备。
- en: Installing PhoneGap
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装PhoneGap
- en: 'PhoneGap is extremely easy to get started with; first let''s install it from
    PhoneGap''s website, here: [http://phonegap.com/download/](http://phonegap.com/download/).
    When the ZIP file completely finishes downloading, we''ll want to extract its
    contents. Now when you start examining the contents of the extraction, you''ll
    notice that there''s a lot going on, especially in the `lib` directory where multiple
    operating systems are listed. This is good, because PhoneGap supports multiple
    platforms, but what we want is specifically for iOS. Our focus should be on the
    following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PhoneGap非常容易上手；首先让我们从PhoneGap的网站安装它，网址是：[http://phonegap.com/download/](http://phonegap.com/download/)。当ZIP文件完全下载完成后，我们需要提取其内容。现在当您开始检查提取的内容时，您会注意到有很多内容，特别是在`lib`目录中列出了多个操作系统。这很好，因为PhoneGap支持多个平台，但我们想要的是特别针对iOS的。我们的重点应该放在以下内容上：
- en: '![Installing PhoneGap](img/1024OT_10_10.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![安装PhoneGap](img/1024OT_10_10.jpg)'
- en: PhoneGap directory structure
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PhoneGap目录结构
- en: Notice that in the iOS directory we have multiple files, all of which are critical
    to the creation of our first PhoneGap project. In the next section, we'll create
    our first PhoneGap project using this cleaned up version of the PhoneGap framework.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在iOS目录中，我们有多个文件，所有这些文件对于创建我们的第一个PhoneGap项目至关重要。在接下来的部分中，我们将使用这个经过简化的PhoneGap框架创建我们的第一个PhoneGap项目。
- en: Creating a PhoneGap project
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个PhoneGap项目
- en: Now that we have the PhoneGap framework downloaded and simplified for our purposes,
    we want to create our first ever project using this framework. In order to do
    that, we'll need the help of our trusted c**ommand-line interface** (**CLI**).
    By default, all Mac operating systems comes with **Terminal**, but we can also
    us iTerm (free) as well. Either way, launch that application, which is located
    in `/Applications/Utilities/`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经下载并简化了PhoneGap框架以满足我们的需求，我们想要使用这个框架创建我们的第一个项目。为了做到这一点，我们需要我们值得信赖的**命令行界面**（**CLI**）的帮助。默认情况下，所有Mac操作系统都带有**终端**，但我们也可以使用iTerm（免费）。无论哪种方式，启动该应用程序，它位于`/Applications/Utilities/`。
- en: 'When you have Terminal open, we''ll need to navigate to the directory your
    PhoneGap files are located at. This should be in our `Downloads` directory by
    default, depending on your browser settings. In this case, I would navigate to
    `/Users/acresp/Downloads` with the `cd` command, like so:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开终端时，我们需要导航到PhoneGap文件所在的目录。默认情况下，这应该在我们的`Downloads`目录中，具体取决于您的浏览器设置。在这种情况下，我会使用`cd`命令导航到`/Users/acresp/Downloads`，如下所示：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once we''re in the directory PhoneGap was extracted to, we need to navigate
    to view the `bin` directory inside the `iOS` folder inside `phonegap`. To do this,
    we can type in the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进入PhoneGap解压到的目录，我们需要导航到`phonegap`文件夹内`iOS`文件夹内的`bin`目录以查看。为此，我们可以输入以下内容：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we can build our PhoneGap application using the `create` shell script inside
    the `bin` folder. The documentation for this script is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`bin`文件夹内的`create` shell脚本构建我们的PhoneGap应用程序。该脚本的文档如下：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is excellent for us because we know what we can do to create our application
    easily. But before we do that, let's make sure our application directory is created
    within our project. For the purpose of this chapter, I have created a `cordova250`
    directory that will contain our `HelloWorld` application, and may contain other
    PhoneGap projects as well.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们来说非常好，因为我们知道可以轻松创建我们的应用程序。但在这之前，让我们确保我们的应用程序目录已经在我们的项目中创建了。在本章中，我创建了一个`cordova250`目录，其中包含我们的`HelloWorld`应用程序，可能还包含其他PhoneGap项目。
- en: 'Now that we have made sure that our application directory exists, we can run
    the following command to make sure our application gets created:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确保我们的应用程序目录存在，我们可以运行以下命令来确保我们的应用程序被创建：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will produce a directory called `HelloWorld` inside the `cordova250` folder
    with all the necessary files we need to get started. We have now created our first
    PhoneGap project. There's not a whole lot happening just yet, but let's continue;
    we'll soon start developing a native application. First, let's review the support
    that's out there for this framework and the license backing it up.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`cordova250`文件夹内产生一个名为`HelloWorld`的目录，其中包含我们启动所需的所有必要文件。我们现在已经创建了我们的第一个PhoneGap项目。目前还没有太多的事情发生，但让我们继续；我们很快就会开始开发原生应用程序。首先，让我们回顾一下这个框架的支持以及支持它的许可证。
- en: The PhoneGap license
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PhoneGap许可证
- en: 'You''re probably wondering about the PhoneGap license, especially since we
    have used many open source projects along the way to create our applications.
    PhoneGap is based on the Apache license ([http://phonegap.com/about/license/](http://phonegap.com/about/license/)).
    And what''s even better for us is that the Apache foundation has provided us with
    clear and concise information about what is allowed, forbidden, and required.
    Straight from the *FAQ* section of the *What does it mean?* section (available
    at [http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN](http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)),
    we are given all the details we need:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会对PhoneGap许可证感到好奇，特别是因为我们在创建应用程序的过程中使用了许多开源项目。PhoneGap基于Apache许可证（[http://phonegap.com/about/license/](http://phonegap.com/about/license/)）。对我们来说更好的是，Apache基金会为我们提供了清晰简明的关于允许、禁止和要求的信息。直接来自*常见问题*部分的*这意味着什么？*部分（可在[http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN](http://www.apache.org/foundation/license-faq.html#WhatDoesItMEAN)找到），我们得到了所有我们需要的细节：
- en: 'It **allows** you to:'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它允许您：
- en: '>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: freely download and use Apache software, in whole or in part, for personal,
    company internal, or commercial purposes;
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自由下载和使用Apache软件，全部或部分，用于个人、公司内部或商业目的；
- en: '>'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: use Apache software in packages or distributions that you create.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在您创建的软件包或分发中使用Apache软件。
- en: '>'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: 'It **forbids** you to:'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它禁止你：
- en: '>'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: redistribute any piece of Apache-originated software without proper attribution;
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在没有适当归属的情况下重新分发任何Apache来源的软件;
- en: '>'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: use any marks owned by The Apache Software Foundation in any way that might
    state or imply that the Foundation endorses your distribution;
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以任何方式使用Apache软件基金会拥有的标记，可能会声明或暗示基金会支持您的分发;
- en: '>'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: use any marks owned by The Apache Software Foundation in any way that might
    state or imply that you created the Apache software in question.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以任何方式使用Apache软件基金会拥有的标记，可能会声明或暗示您创建了相关的Apache软件。
- en: '>'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: 'It **requires** you to:'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它要求你：
- en: '>'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: include a copy of the license in any redistribution you may make that includes
    Apache software;
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在任何包含Apache软件的重新分发中包含许可证的副本;
- en: '>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: provide clear attribution to The Apache Software Foundation for any distributions
    that include Apache software.
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为包含Apache软件的任何分发提供清晰的归属于Apache软件基金会。
- en: '>'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: 'It **does not require** you to:'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它不要求你：
- en: '>'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: include the source of the Apache software itself, or of any modifications you
    may have made to it, in any redistribution you may assemble that includes it;
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在任何包含Apache软件的重新分发中，包括Apache软件本身的源代码，或者您对其进行的任何修改;
- en: '>'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: submit changes that you make to the software back to the Apache Software Foundation
    (though such feedback is encouraged).
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提交您对软件所做的更改给Apache软件基金会（尽管鼓励这样的反馈）。
- en: Based on these parameters, we can continue to create open source software using
    PhoneGap as long as we include a copy of the license with every redistribution,
    so long as it has clear attribution to The Apache Software Foundation. If you
    do have any other questions related to PhoneGap's license or the Apache 2.0 license,
    there is more information on the preceding link and on PhoneGap's license page
    ([http://phonegap.com/about/license/](http://phonegap.com/about/license/)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些参数，我们可以继续使用PhoneGap创建开源软件，只要我们在每次重新分发时包含许可证的副本，同时清晰地归属于Apache软件基金会。如果您有任何与PhoneGap许可证或Apache
    2.0许可证相关的其他问题，可以在上述链接和PhoneGap许可证页面（[http://phonegap.com/about/license/](http://phonegap.com/about/license/)）上找到更多信息。
- en: Configuring our project
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置我们的项目
- en: Our project can be configured to fit our needs and concurrently, those for our
    users. This process is fairly simple and well documented at the PhoneGap API documentation
    site ([http://docs.phonegap.com/en/2.5.0/guide_project-settings_index.md.html#Project%20Settings](http://docs.phonegap.com/en/2.5.0/guide_project-settings_index.md.html#Project%20Settings)).
    Most of these settings are easily modified through the `config.xml` file located
    in our project directory `/cordovar250/HelloWorld/HelloWorld/config.xml`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目可以配置以满足我们的需求，同时也满足我们的用户需求。这个过程非常简单，并且在PhoneGap API文档网站（[http://docs.phonegap.com/en/2.5.0/guide_project-settings_index.md.html#Project%20Settings](http://docs.phonegap.com/en/2.5.0/guide_project-settings_index.md.html#Project%20Settings)）上有很好的文档。大多数这些设置都可以通过我们项目目录`/cordovar250/HelloWorld/HelloWorld/config.xml`中的`config.xml`文件轻松修改。
- en: 'Here is a current list of items that can be customized:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以定制的当前列表：
- en: '| Preference | Description |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 首选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `UIWebViewBounce` (Boolean, defaults to **true**) | This sets the property
    of a rubber-band type interaction/bounce animation. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `UIWebViewBounce`（布尔值，默认为**true**）| 这设置了橡皮筋类型的交互/弹跳动画的属性。|'
- en: '| `TopActivityIndicator` (string, defaults to **gray**) | This sets the color
    of the spinning throbber in the status/battery bar, with valid values of **whiteLarge**,
    **white**, and **gray**. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `TopActivityIndicator`（字符串，默认为**gray**）| 这设置了状态/电池栏中旋转的指示器的颜色，有效值为**whiteLarge**、**white**和**gray**。|'
- en: '| `EnableLocation` (Boolean, defaults to **false**) | This determines whether
    to initialize the Geolocation plugin at start-up, making your location more accurate
    at startup. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `EnableLocation` (布尔值，默认为**false**) | 这确定是否在启动时初始化地理位置插件，使您的位置在启动时更准确。 |'
- en: '| `EnableViewportScale` (Boolean, defaults to **false**) | This enables/disables
    viewport scaling. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `EnableViewportScale` (布尔值，默认为**false**) | 这启用/禁用视口缩放。 |'
- en: '| `AutoHideSplashScreen` (Boolean, defaults to **true**) | This controls whether
    the splash screen is hidden through a JavaScript API. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `AutoHideSplashScreen` (布尔值，默认为**true**) | 这控制着是否通过JavaScript API隐藏启动画面。
    |'
- en: '| `FadeSplashScreen` (Boolean, defaults to **true**) | This enables the splash
    screen to fade in and out. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `FadeSplashScreen` (布尔值，默认为**true**) | 这使启动画面淡入淡出。 |'
- en: '| `FadeSplashScreenDuration` (float, defaults to **2**) | This indicates the
    splash screen''s fade duration in seconds. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `FadeSplashScreenDuration` (浮点数，默认为**2**) | 这表示启动画面的淡入淡出持续时间（以秒为单位）。 |'
- en: '| `ShowSplashScreenSpinner` (Boolean, defaults to **true**) | This shows or
    hides the splash screen''s loading spinner. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `ShowSplashScreenSpinner` (布尔值，默认为**true**) | 这显示或隐藏启动画面的加载旋转器。 |'
- en: '| `MediaPlaybackRequiresUserAction` (Boolean, defaults to **false**) | This
    allows HTML5 to auto play. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `MediaPlaybackRequiresUserAction` (布尔值，默认为**false**) | 这允许HTML5自动播放。 |'
- en: '| `AllowInlineMediaPlayback` (Boolean, defaults to **false**) | This controls
    inline HTML5 media playback. The `video` element in the HTML document must also
    include the `webkit-playsinline` attribute |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `AllowInlineMediaPlayback` (布尔值，默认为**false**) | 这控制内联HTML5媒体播放。HTML文档中的`video`元素还必须包括`webkit-playsinline`属性。
    |'
- en: '| `BackupWebStorage` (string, defaults to **cloud**) | If set to **cloud**,
    storage data will be backed up to iCloud. If set to **local**, only local backups
    will be made. If set to **none**, no backups occur. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `BackupWebStorage` (字符串，默认为**cloud**) | 如果设置为**cloud**，存储数据将备份到iCloud。如果设置为**local**，只会进行本地备份。如果设置为**none**，则不会发生任何备份。
    |'
- en: '| `KeyboardDisplayRequiresUserAction` (Boolean, defaults to **true**) | If
    this is set to **false**, the keyboard will open when `form` elements get called
    via JavaScript''s `focus()`. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `KeyboardDisplayRequiresUserAction` (布尔值，默认为**true**) | 如果设置为**false**，当通过JavaScript的`focus()`调用`form`元素时，键盘将打开。
    |'
- en: '| `SuppressesIncrementalRendering` (Boolean, defaults to **false**) | This
    allows content to be received before being rendered. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `SuppressesIncrementalRendering` (布尔值，默认为**false**) | 这允许在渲染之前接收内容。 |'
- en: Transferring a web application
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转移网络应用
- en: At this point, we have created a sample `HelloWorld` application using PhoneGap
    and Xcode. Now, we'll take it up a notch by reviewing transferring our single-page
    application from [Chapter 7](ch07.html "Chapter 7. One-page Applications"), *One-page
    Applications*. In this section, we'll go over transferring our assets, including
    our markup, styles, and scripts, and then learn how to debug our applications.
    Finally, we'll extend our single-page application by using native functionality
    that PhoneGap has allowed us to tap into using the code we've already written.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经使用PhoneGap和Xcode创建了一个名为`HelloWorld`的示例应用程序。现在，我们将通过回顾从[第7章](ch07.html
    "第7章。单页应用程序")*单页应用程序*转移我们的单页应用程序。在本节中，我们将介绍如何转移我们的资产，包括我们的标记、样式和脚本，然后学习如何调试我们的应用程序。最后，我们将通过使用PhoneGap允许我们利用已经编写的代码来扩展我们的单页应用程序，使用本机功能来扩展我们的单页应用程序。
- en: Transferring our assets
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移我们的资产
- en: Let's start by transferring our assets. This section will briefly go over how
    to transfer what we have written with a minimal level of effort. The goal here
    is to basically have the same application we have running natively. We won't be
    using PhoneGap's built-in features just yet, but we'll have an app up and running
    quickly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始转移我们的资产。本节将简要介绍如何以最小的努力转移我们所写的内容。这里的目标基本上是拥有与本地运行的相同应用程序。我们暂时不会使用PhoneGap的内置功能，但我们将很快拥有一个正在运行的应用程序。
- en: Including our markup
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包括我们的标记
- en: The first thing we want to do here is open up the Xcode project that was generated
    previously using PhoneGap. To do this, we first locate our project in Finder,
    in my case `~/Sites/HTML5-iPhone-Web-App/cordova250/HelloWorld/`. Once we've located
    our project, double-click on the `HelloWorld.xcodeproj` file; this will launch
    the project in Xcode.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是打开之前使用PhoneGap生成的Xcode项目。为此，我们首先在Finder中找到我们的项目，在我的情况下是`~/Sites/HTML5-iPhone-Web-App/cordova250/HelloWorld/`。一旦找到我们的项目，双击`HelloWorld.xcodeproj`文件；这将在Xcode中启动项目。
- en: Once Xcode has launched with our project, we'll see it index our files. While
    it's indexing, it won't prevent you from interacting with your project, so you'll
    be able to start editing files. So, let's go ahead and check out our `index.html`
    file located in the `www` directory.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Xcode启动了我们的项目，我们将看到它索引我们的文件。在索引过程中，它不会阻止您与项目进行交互，因此您可以开始编辑文件。因此，让我们继续查看位于`www`目录中的`index.html`文件。
- en: '![Including our markup](img/1024OT_10_11.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![包括我们的标记](img/1024OT_10_11.jpg)'
- en: Our project's preliminary HelloWorld markup
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目的初步HelloWorld标记
- en: 'As you can see, we''ve got a basic template set up for us. Let''s run this
    `HelloWorld` markup to see the results. The first item you should see is a splash
    screen with the default PhoneGap image and immediately after the device ready
    introduction. Here are screenshots displaying the results:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经为我们设置了一个基本模板。让我们运行这个`HelloWorld`标记，看看结果。您应该首先看到的是一个带有默认PhoneGap图像的启动画面，紧接着是设备准备好的介绍。以下是显示结果的屏幕截图：
- en: '![Including our markup](img/1024OT_10_12.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![包括我们的标记](img/1024OT_10_12.jpg)'
- en: The splash screen and the device-ready screen
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 启动画面和设备准备好画面
- en: 'Now that we know that our application is running with the default markup and
    styles, we should be able to move pretty quickly. So, the first order of business
    is to bring in the completed markup from the single-page application screen seen
    in [Chapter 7](ch07.html "Chapter 7. One-page Applications"), *One-page Applications*.
    We won''t review the code written for that chapter here, but here is the template:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们的应用程序正在使用默认的标记和样式运行，我们应该能够相当快地移动。因此，首要任务是从[第7章](ch07.html "第7章 单页应用")
    *单页应用*中看到的单页应用程序屏幕中带有完成标记的导入。我们不会在这里回顾为该章节编写的代码，但这是模板：
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Keep in mind that we have made some modifications in order to fit this directory
    structure. For example, instead of referencing our CSS files using `../css/somefile.css`,
    we use `css/somefile.css` and the same applies for any other assets that we'll
    be importing. You'll also notice that the preceding code template doesn't include
    the templates we created from [Chapter 7](ch07.html "Chapter 7. One-page Applications"),
    *One-page Applications*; this is to keep the preceding template short and simple
    in terms of how to import assets into your own PhoneGap project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们已经进行了一些修改，以适应这个目录结构。例如，我们不再使用`../css/somefile.css`来引用我们的CSS文件，而是使用`css/somefile.css`，其他资产也是如此。您还会注意到，前面的代码模板不包括我们从[第7章](ch07.html
    "第7章 单页应用") *单页应用*中创建的模板；这是为了使前面的模板在如何导入资产到您自己的PhoneGap项目方面保持简短和简单。
- en: At this point, we won't test our application because we're not done bringing
    in our assets, including styles and scripts, but we should be good for the time
    being. What we want to take away here is that importing an existing static web
    application is as simple as copy and paste, but don't let this fool you; most
    applications are not as simple and this example is just to demonstrate how easy
    it is to get going. Now let's move on to importing our styles.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们不会测试我们的应用程序，因为我们还没有导入我们的资产，包括样式和脚本，但我们现在应该还不错。我们想要在这里得到的是，导入现有的静态Web应用程序就像复制和粘贴一样简单，但不要被这个愚弄；大多数应用程序并不像这样简单，这个例子只是为了演示开始的简单。现在让我们继续导入我们的样式。
- en: Incorporating our styles
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整合我们的样式
- en: 'We now have our markup set up in our project `index.html` file. That was easy;
    this part will also be as easy. All we need to do is include our CSS files that
    are being used for this project. To make things easier, I''ve just included all
    of our previous stylesheets into the Xcode project''s CSS directory. Your project
    should now look like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在我们的项目`index.html`文件中设置了标记。这很容易；这部分也将很容易。我们需要做的就是包含用于此项目的CSS文件。为了简化，我只是将我们以前的所有样式表都包含到Xcode项目的CSS目录中。您的项目现在应该是这样的：
- en: '![Incorporating our styles](img/1024OT_10_13.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![整合我们的样式](img/1024OT_10_13.jpg)'
- en: Our imported stylesheets
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入的样式表
- en: Now that we have imported our stylesheets into our Xcode project, we're half
    way there. At this point we need to import our scripts. Again, do not test your
    application here since it probably won't work. This last bit will get us to where
    we need to be, so let's start importing our scripts.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将我们的样式表导入到Xcode项目中，我们已经完成了一半。在这一点上，我们需要导入我们的脚本。同样，在这里不要测试您的应用程序，因为它可能不起作用。这最后一点将使我们达到我们需要的地方，所以让我们开始导入我们的脚本。
- en: Inserting our scripts
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入我们的脚本
- en: 'Okay, so we''ve imported our markup and stylesheets—this is great. But there''s
    one last piece, our JavaScript. This last piece is essential to making our application
    run. So, let''s start by doing the same thing we did for our styles; just import
    all your scripts into the `js` directory of the Xcode project. When you do this,
    the result will be the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经导入了我们的标记和样式表，这很棒。但还有最后一部分，我们的JavaScript。这最后一部分对于使我们的应用程序运行至关重要。因此，让我们开始做与我们的样式相同的事情；只需将所有脚本导入Xcode项目的`js`目录中。当您这样做时，结果将如下所示：
- en: '![Inserting our scripts](img/1024OT_10_14.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![插入我们的脚本](img/1024OT_10_14.jpg)'
- en: Our imported scripts
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入的脚本
- en: We have our scripts inside the Xcode project. But we still need to do some configuration,
    including referencing our scripts correctly inside the `index.html` file, and
    making sure our application will launch accordingly. Let's start by referencing
    our scripts correctly in our `index.html` file.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的脚本在Xcode项目中。但我们仍然需要进行一些配置，包括在`index.html`文件中正确引用我们的脚本，并确保我们的应用程序将按预期启动。让我们首先在`index.html`文件中正确引用我们的脚本。
- en: 'Remember the markup we transferred over two sections ago, with a default template
    that was showcased? We''re going to take a step back and look at that template
    again, except we''re only going to look at the bottom of the markup right before
    the `body` tag closes. This is where our applications previously included the
    JavaScript; so there''s nothing new here, we just want to make sure the files
    are being referenced correctly. Just make sure that in your `index.html` file,
    your scripts look like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得两节前我们转移过的标记，展示了一个默认模板吗？我们要退一步再次看看那个模板，除了我们只会看标记底部在`body`标签关闭之前。这是我们的应用程序以前包含JavaScript的地方；所以这里没有什么新的，我们只是想确保文件被正确引用。只需确保在您的`index.html`文件中，您的脚本看起来像这样：
- en: '[PRE5]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note a couple of things that are going on here. First, we include the `cordova`
    library that comes with PhoneGap at the very top; this will be essential in a
    moment or two when we try to detect a `deviceready` event. Next, we reference
    all our JavaScript source files to the `js` directory in our Xcode project, not
    `../js`. Now, the last thing we need to do here is make sure our code runs when
    the device is ready, which means we need to modify how our single-page application
    starts.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里发生的一些事情。首先，我们在最顶部包含了PhoneGap提供的`cordova`库；当我们尝试检测`deviceready`事件时，这将是至关重要的。接下来，我们将所有JavaScript源文件引用到Xcode项目中的`js`目录，而不是`../js`。现在，我们需要做的最后一件事是确保我们的代码在设备准备就绪时运行，这意味着我们需要修改我们的单页应用程序的启动方式。
- en: 'To make sure our application starts, we need to listen to the `deviceready`
    event that is provided by the PhoneGap event ([http://docs.phonegap.com/en/2.5.0/cordova_events_events.md.html#deviceready](http://docs.phonegap.com/en/2.5.0/cordova_events_events.md.html#deviceready)).
    This event is triggered once Cordova has been fully loaded. This is essential
    because the DOM is not loaded while native code is loading, and the splash screen
    is displayed. So we can run into problems when a Cordova function is required
    before the DOM loads. So for our purpose, we''ll listen to the `deviceready` event
    and then start our application. This can be done with the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的应用程序启动，我们需要监听PhoneGap事件提供的`deviceready`事件（[http://docs.phonegap.com/en/2.5.0/cordova_events_events.md.html#deviceready](http://docs.phonegap.com/en/2.5.0/cordova_events_events.md.html#deviceready)）。一旦Cordova完全加载，就会触发此事件。这是至关重要的，因为在本地代码加载时DOM没有加载，并且启动画面被显示。因此，当DOM加载之前需要Cordova函数时，我们可能会遇到问题。因此，为了我们的目的，我们将监听`deviceready`事件，然后启动我们的应用程序。可以使用以下代码完成：
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's examine this code line by line. First, we create a closure that executes
    immediately. Within this scope, we listen to the `deviceready` event and assign
    the `onDeviceReady` callback function. We then define the `onDeviceReady` callback
    that shows and hides our application. This method creates three variables, `parentElement`,
    `listeningElement`, and `receivedElement`. We cache the `deviceready` DOM element
    and assign it to `parentElement`, and we do the same thing for `listeningElement`
    and `receivedElement`. Next, we set the `style` attribute on the proper elements,
    showing the application and hiding the splash screen. Finally, we start our Backbone-based
    single-page application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行检查这段代码。首先，我们创建一个立即执行的闭包。在这个范围内，我们监听`deviceready`事件并分配`onDeviceReady`回调函数。然后，我们定义了`onDeviceReady`回调，显示和隐藏我们的应用程序。这个方法创建了三个变量，`parentElement`，`listeningElement`和`receivedElement`。我们缓存了`deviceready`
    DOM元素并将其分配给`parentElement`，我们对`listeningElement`和`receivedElement`也做了同样的事情。接下来，我们在适当的元素上设置`style`属性，显示应用程序并隐藏启动画面。最后，我们启动基于Backbone的单页应用程序。
- en: 'Let''s place the preceding script after all our scripts in the `index.html`
    file. Now, we should be able to run our application successfully and navigate
    the dashboard, profile, and playlist views. If everything as discussed previously
    was done correctly, you should be able to use your single-page application natively,
    like so:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的脚本放在`index.html`文件中所有脚本之后。现在，我们应该能够成功运行我们的应用程序并导航到仪表板、个人资料和播放列表视图。如果之前讨论的一切都正确地完成了，您应该能够像这样本地使用您的单页应用程序：
- en: '![Inserting our scripts](img/1024OT_10_15.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![插入我们的脚本](img/1024OT_10_15.jpg)'
- en: Native single-page application
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本地单页应用程序
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that in the preceding screenshots, we have a **Contacts** navigation item.
    This has not been built yet and will be part of the last section of this chapter.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的屏幕截图中，我们有一个**联系人**导航项。这尚未构建，将成为本章最后一部分的一部分。
- en: At this point we have created a native application that showcases the simplicity
    of transferring a current web application using PhoneGap. Yes, we haven't used
    PhoneGap or Xcode to its fullest extent, but we now understand that getting the
    process started is pretty easy. We'll sidestep for a moment to understand debugging
    our application(s), and then ultimately use PhoneGap's API to build a native component
    into our application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个本地应用程序，展示了使用PhoneGap转移当前Web应用程序的简单性。是的，我们没有充分利用PhoneGap或Xcode，但我们现在明白了启动流程是相当容易的。我们将暂时绕过来理解调试我们的应用程序，并最终使用PhoneGap的API构建本地组件到我们的应用程序中。
- en: Debugging our application
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试我们的应用程序
- en: Debugging an application is critical to any workflow or process; for this reason
    we need to know what it's like debugging a native application built off web technologies.
    It's not as complex or easy as you may think. But it's still doable and at the
    current time of writing, this is one of the best ways to debug your application.
    So let's get to it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 调试应用程序对于任何工作流程或流程都是至关重要的；因此，我们需要知道调试基于Web技术构建的本地应用程序是什么样的。这并不像你想象的那样复杂或容易。但它仍然是可行的，并且在撰写本文时，这是调试应用程序的最佳方式之一。所以让我们开始吧。
- en: Logging out our code
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录我们的代码
- en: We're all familiar with the console object available to us via JavaScript. This
    is still available to us but is somewhat confusing when trying to find where the
    log has been output when creating a native app. Traditionally, we had a console
    tool that was available on our simulator or actual device to debug errors; however,
    this is no longer the case.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都熟悉通过JavaScript可用的控制台对象。这对我们仍然可用，但在创建本地应用程序时，尝试找到日志输出的位置时会有些困惑。传统上，我们在模拟器或实际设备上有一个可用于调试错误的控制台工具；然而，现在不再是这样。
- en: First, let's look at how logging takes place in Xcode. Remember the debug view
    discussed earlier on in the chapter? Well, this is where we want to use it. So
    first, let's enable the debug view. Now, let's run the application we currently
    have.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看Xcode中的日志记录是如何进行的。还记得本章前面讨论过的调试视图吗？好吧，这就是我们想要使用它的地方。所以首先，让我们启用调试视图。现在，让我们运行我们目前拥有的应用程序。
- en: 'When we run your application, we should see the following in the debugger area:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行您的应用程序时，我们应该在调试器区域看到以下内容：
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We should focus on the last line where `[LOG]` takes place. This is the output
    generated using `console.log()`, which is currently in our `onDeviceReady` callback.
    This is great for us because we can actively see the logs we created. The negative
    aspect to this is that we don't have typical developer tools that we can find
    in other browsers. But with recent developments, we can now debug our applications
    using Safari's built-in developer tools to debug an iOS app running in the simulator.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该关注最后一行，即`[LOG]`发生的地方。这是使用`console.log()`生成的输出，目前在我们的`onDeviceReady`回调中。这对我们来说很好，因为我们可以积极地看到我们创建的日志。这样做的负面影响是，我们没有在其他浏览器中找到的典型开发人员工具。但是最近的发展使我们现在可以使用Safari内置的开发人员工具来调试在模拟器中运行的iOS应用程序。
- en: Using the Safari developer tools
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Safari开发人员工具
- en: As I've mentioned, we are now able to debug web applications built off PhoneGap
    using Safari's developer tools. So let's take a crack at this real quick, by opening
    Safari on our computer. If you don't already have the developer tools enabled,
    do so by going into Safari's preferences and selecting the checkbox for **Show
    Develop menu in menu bar** under the **Advanced** tab.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，我们现在能够使用Safari的开发者工具调试基于PhoneGap构建的Web应用程序。所以让我们快速尝试一下，打开我们电脑上的Safari。如果您还没有启用开发者工具，请进入Safari的偏好设置，并在**高级**选项卡下选择**在菜单栏中显示开发菜单**复选框。
- en: '![Using the Safari developer tools](img/1024OT_10_16.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用Safari开发者工具](img/1024OT_10_16.jpg)'
- en: The Advanced tab for Safari preferences
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Safari偏好设置的高级选项卡
- en: Once we have the developer tools enabled, we can access them from the **Develop**
    menu for Safari. If we have our application running in the iOS simulator, then
    we should be able to debug our application by selecting `index.html` from the
    iPhone Simulator submenu. This will then launch the native developer tools in
    Safari.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启用了开发者工具，我们可以从Safari的**开发**菜单中访问它们。如果我们的应用程序在iOS模拟器中运行，那么我们应该能够通过从iPhone模拟器子菜单中选择`index.html`来调试我们的应用程序。然后这将在Safari中启动本机开发者工具。
- en: '![Using the Safari developer tools](img/1024OT_10_17.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![使用Safari开发者工具](img/1024OT_10_17.jpg)'
- en: Debugging environment
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 调试环境
- en: Now we are able to fully debug an application using the Safari developer tools
    for our native application. It is truly that easy to have a fully integrated development
    environment with simulation and debugging all part of the process. Although we
    can go into further detail about debugging, it is beyond the scope of this book.
    However, let's move on to the final section of this book, where we will learn
    to utilize PhoneGap's built-in APIs to tie into native functionality for our single-page
    application.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够使用Safari开发者工具完全调试本机应用程序。拥有一个完全集成的开发环境，模拟和调试都是这个过程的一部分，这真的很容易。虽然我们可以进一步详细讨论调试，但这超出了本书的范围。然而，让我们继续本书的最后一部分，我们将学习如何利用PhoneGap的内置API来连接到我们单页应用程序的本机功能。
- en: Extending our application with native functionality
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展我们的应用程序与本机功能
- en: Congratulations! We have been able to create our first native application using
    what we've already created with HTML5, CSS, and JavaScript. This is exciting stuff,
    but we're not done yet. Let's now leverage one of PhoneGap's APIs to tap into
    native functionality.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经能够使用我们已经创建的HTML5、CSS和JavaScript创建我们的第一个本机应用程序。这是令人兴奋的事情，但我们还没有完成。现在让我们利用PhoneGap的API之一来利用本机功能。
- en: From a higher level we want our application to display the contacts we have
    on our phone. We want to be able to access this information when we click on the
    **Contacts** button in our application navigation. For this example, we just want
    to display the full name of our contacts. To achieve these goals we'll be using
    PhoneGap's Contacts API ([http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#Contacts](http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#Contacts)).
    To do this, we'll ensure that this is configured in our application, and then
    write the appropriate code to handle this within the already existing framework
    of our application. Let's begin with the configuration.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从更高的层次上，我们希望我们的应用程序显示我们手机上的联系人。当我们点击应用程序导航中的**联系人**按钮时，我们希望能够访问这些信息。在这个例子中，我们只想显示我们联系人的全名。为了实现这些目标，我们将使用PhoneGap的Contacts
    API ([http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#Contacts](http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#Contacts))。为此，我们将确保在我们的应用程序中进行了配置，然后编写适当的代码来处理这个问题，已经存在的应用程序框架中。让我们从配置开始。
- en: Configuring our application
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置我们的应用程序
- en: 'We''ve already gone over the basics of configuring our application previously,
    but let''s take a look at this again to ensure its full understanding. First,
    let''s open up the `config.xml` file located at the top of our project. Then enable
    the Contacts API by setting its value to `CDVContacts`. When you''re done, you
    should have the following in your `config.xml` file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前讨论了配置我们的应用程序的基础知识，但让我们再次看一下以确保完全理解。首先，让我们打开位于项目顶部的`config.xml`文件。然后通过将其值设置为`CDVContacts`来启用Contacts
    API。完成后，您的`config.xml`文件应包含以下内容：
- en: '![Configuring our application](img/1024OT_10_18.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![配置我们的应用程序](img/1024OT_10_18.jpg)'
- en: The project configuration
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 项目配置
- en: Setting up our contacts functionality
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置我们的联系人功能
- en: In this section of the chapter, we'll look at hooking into our contacts information
    to display in our native application. First we'll create the view, then the template,
    and finally the actual API that comes with PhoneGap. When we're done, we should
    have a good idea on how we can tap into these APIs to create native web applications
    for iOS.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将看看如何连接到我们的联系人信息以在我们的本机应用程序中显示。首先我们将创建视图，然后模板，最后是随PhoneGap提供的实际API。完成后，我们应该对如何利用这些API来为iOS创建本机Web应用程序有一个很好的想法。
- en: Creating the ContactsView class
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建ContactsView类
- en: 'Once we have set up our configuration for this application, we need to set
    up everything else in order to get the contacts view to work. To begin, let''s
    create a contacts view to be added to our user directory. We''ll extend its functionality
    later, but for now here is the template we''ll be using:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们为这个应用程序设置了配置，我们需要设置其他一切以使联系人视图正常工作。首先，让我们创建一个联系人视图，添加到我们的用户目录中。我们稍后会扩展其功能，但现在这是我们将使用的模板：
- en: '[PRE8]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code isn't anything new. We're basically creating a `ContactsView`
    class that follows the conventions we've set previously with no bit of additional
    functionality. Do note that we have set a template for this view that does not
    exist yet. Let's include this file with the scripts we've included in `index.html`
    add it to the last view being included. Now, let's create the template associated
    with this view.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码并没有什么新东西。我们基本上正在创建一个遵循我们之前设置的约定的`ContactsView`类，没有任何额外的功能。请注意，我们已经为此视图设置了一个尚不存在的模板。让我们在`index.html`中包含此文件，并将其添加到最后一个被包含的视图中。现在，让我们创建与此视图相关联的模板。
- en: Implementing the ContactsView template
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现ContactsView模板
- en: 'Using what we''ve already built for our playlist, we''ll just duplicate the
    template for the playlist view and change its header. While we''re at it, we''ll
    just change the class of the unordered list to `contacts-list` as well. When we''re
    done, our template will look like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们已经为播放列表构建的内容，我们将简单地复制播放列表视图的模板并更改其标题。与此同时，我们还将将无序列表的类更改为`contacts-list`。完成后，我们的模板将如下所示：
- en: '[PRE9]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Include this template after the rest of the other templates we've created. At
    this point, we should be 50 percent there. Now, you may run into some styling
    issues, but just make sure to add the `contacts-list` class to the same styles
    that the playlist uses. We won't go over that here, since it's pretty brief; so
    we'll continue by writing the contacts implementation.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建的其他模板之后包含此模板。此时，我们应该已经完成了50%。现在，您可能会遇到一些样式问题，但请确保将`contacts-list`类添加到与播放列表使用的相同样式中。我们不会在这里详细介绍，因为这相当简短；因此，我们将继续编写联系人实现。
- en: Integrating the Contacts API
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 集成联系人API
- en: To look up a user's contacts is pretty simple using the PhoneGap API. In fact,
    our example will be based on the documented `Navigator` object, `contacts`. But
    first, we need to create a new instance of `ContactFindOptions` ([http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#ContactFindOptions](http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#ContactFindOptions)),
    which will hold our filtering options when finding contacts.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 查找用户的联系人使用PhoneGap API非常简单。实际上，我们的示例将基于文档中的`Navigator`对象`contacts`。但首先，我们需要创建一个`ContactFindOptions`的新实例（[http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#ContactFindOptions](http://docs.phonegap.com/en/2.5.0/cordova_contacts_contacts.md.html#ContactFindOptions)），它将在查找联系人时保存我们的过滤选项。
- en: '[PRE10]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code sets the `filter` and `multiple` properties on the instance
    of `ContactFindOptions`. By default `filter` is empty, meaning there is no limitation,
    and `multiple` is set to `true`, allowing for multiple contacts to come through.
    Next, we want to find two fields when we get the contacts, their `displayName`,
    and `name`. These fields will be in an array, which we'll use shortly.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在`ContactFindOptions`的实例上设置了`filter`和`multiple`属性。默认情况下，`filter`为空，表示没有限制，`multiple`设置为`true`，允许多个联系人通过。接下来，当我们获取联系人时，我们希望找到两个字段，它们的`displayName`和`name`。这些字段将在一个数组中，我们很快会用到。
- en: '[PRE11]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, we want to find the contacts when the view renders. So inside our render
    view, we want to pass in the preceding options.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们希望在视图渲染时找到联系人。因此，在我们的渲染视图中，我们希望传入前面的选项。
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we have not yet created our `onContactsError` or `onContactsSuccess`
    methods. Also, you'll see that we create the template and attach it to the DOM
    the same way we did for all the other views. There's not much left to do with
    this method, so let's look at our callbacks, beginning with `onContactSuccess`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们尚未创建我们的`onContactsError`或`onContactsSuccess`方法。此外，您将看到我们创建模板并将其附加到DOM的方式与我们为所有其他视图所做的方式相同。这个方法没有太多要做的事情，所以让我们看看我们的回调，从`onContactSuccess`开始。
- en: The `onContactSuccess` callback is where all our magic happens. We'll create
    a `div` element in memory and then loop through the results, adding each element
    to `div` as a list item. Once everything is completed, we'll take the contents
    of that the `div` element and add it to our `contacts-list` unordered list.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`onContactSuccess`回调是我们所有魔法发生的地方。我们将在内存中创建一个`div`元素，然后循环遍历结果，将每个元素作为列表项添加到`div`中。一旦完成所有操作，我们将获取`div`元素的内容并将其添加到我们的`contacts-list`无序列表中。'
- en: '[PRE13]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see here, we use the **underscore** method `each` to loop through
    the results. And as we mentioned before, we create a list item containing the
    user''s name as its text content. Pretty simple behavior here and nothing too
    complicated. Now, let''s check out our `onContactsError` callback:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里看到的，我们使用**underscore**方法`each`来循环遍历结果。正如我们之前提到的，我们创建一个包含用户姓名的列表项作为其文本内容。这里的行为非常简单，没有太复杂的东西。现在，让我们来看看我们的`onContactsError`回调：
- en: '[PRE14]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this callback, we just alert that there has been error. Of course, in our
    real-world application we would create something a bit more comprehensive, but
    for our purposes this is good enough. If we run our application now, we should
    get the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个回调中，我们只是警告发生了错误。当然，在我们的真实应用程序中，我们会创建更全面的内容，但对于我们的目的来说，这已经足够了。如果我们现在运行我们的应用程序，我们应该会得到以下结果：
- en: '![Integrating the Contacts API](img/1024OT_10_19.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![集成联系人API](img/1024OT_10_19.jpg)'
- en: The Contacts API implementation
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人API实现
- en: Give yourself a pat on the back! You have reached the end of this section, have
    now successfully integrated with the PhoneGap API, and tapped into native functionality.
    Very cool, isn't it?
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 给自己一个鼓励！您已经到达本节的末尾，现在已成功集成了PhoneGap API，并利用了本地功能。非常酷，不是吗？
- en: Note
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the source code provided with this book comes with a few checks,
    making sure that the same contacts aren't added each time the user visits the
    **Contacts** view. This was done in order to save some time and really focus on
    the meat of the solution.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本书提供的源代码进行了一些检查，确保用户每次访问**联系人**视图时不会添加相同的联系人。这样做是为了节省一些时间，真正专注于解决方案的核心。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we were introduced to native application development using
    the same programming languages we use for our web applications. Using the popular
    open source PhoneGap framework, we achieved the ability to create the single-page
    application, built in [Chapter 7](ch07.html "Chapter 7. One-page Applications"),
    *One-page Applications*, as a native application for iOS. We went over extending
    the single-page application by tying into the native functionality using the Contacts
    API in PhoneGap, listing out our contacts and some information. We should now
    have a foundation for creating native applications that allow us to use web technologies
    to distribute web applications for iOS Safari and the iOS operating system.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用与我们用于Web应用程序相同的编程语言进行本机应用程序开发。使用流行的开源PhoneGap框架，我们实现了创建单页面应用程序的能力，在[第7章](ch07.html
    "第7章 单页应用程序")中构建的*单页应用程序*，作为iOS的本机应用程序。我们通过使用PhoneGap中的联系人API来扩展单页面应用程序，将其与本机功能联系起来，列出我们的联系人和一些信息。现在我们应该有一个创建本机应用程序的基础，使我们能够使用Web技术来分发iOS
    Safari和iOS操作系统的Web应用程序。
