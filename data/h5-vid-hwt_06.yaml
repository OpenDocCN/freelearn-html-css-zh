- en: Chapter 6. Developing Rich Media Applications Using Canvas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用Canvas开发丰富的媒体应用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up the `canvas` environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置`canvas`环境
- en: Understanding the 2d rendering context
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解2D渲染上下文
- en: Processing shapes dynamically
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态处理形状
- en: Drawing borders for images using `canvas`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`canvas`为图像绘制边框
- en: Rounding corners
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆角
- en: Creating interactive visualizations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建交互式可视化
- en: Bouncing a ball
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹跳球
- en: Creating fallback content
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建备用内容
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '"I prefer drawing to talking. Drawing is faster, and leaves less room for lies."
    - Le Corbusier'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我更喜欢画画而不是说话。画画更快，也给谎言留下的空间更少。”- 勒·柯布西耶
- en: This might be the most experimental chapter of this entire book. In the recipes
    that follow, we will really push the limits of what is possible throughout this
    group of recipes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是整本书中最实验性的一章。在接下来的配方中，我们将真正推动这组配方所能实现的极限。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that over the course of time, the experimental new `canvas` element
    specifications are likely to change. Consider this group of recipes to be a snapshot
    of what is possible at the time of publication.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，随着时间的推移，实验性的新`canvas`元素规范可能会发生变化。请将这组配方视为出版时可能的情况的快照。
- en: Putting an image on a website is so easy we take it for granted now. Through
    code, you simply tell the browser to display an image and, it's done. All that
    seems like child's play. Currently, some browsers can actually create dynamic
    images on the fly using the new `canvas` element. All the heavy lifting is up
    to JavaScript.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站上放置一张图片是如此容易，我们现在认为这是理所当然的。通过代码，你只需告诉浏览器显示一张图片，就完成了。所有这些似乎都像是小孩子的游戏。目前，一些浏览器实际上可以使用新的`canvas`元素动态创建图像。所有繁重的工作都交给了JavaScript。
- en: The cool thing with the new open-source `canvas` element is that not only can
    you create dynamic images on the fly, but the users' actions can create new images
    in real time as well — all without requiring a plugin. Sounds great, right? In
    many ways it is, but it also leaves our friends using assistive technologies out
    in the cold.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 新的开源`canvas`元素的很酷之处不仅在于你可以动态地创建图像，而且用户的操作也可以实时地创建新的图像，而无需插件。听起来很棒，对吧？在许多方面确实如此，但它也让我们使用辅助技术的朋友们感到束手无策。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: What will happen if you're using a browser that doesn't support the new `canvas`
    element? Pretty much nothing. The browser just won't display it. That's why you'll
    need to be especially careful with this technology and not place anything inside
    the new `canvas` element on which your site or application absolutely depends.
    You must also consider fallback content.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的浏览器不支持新的`canvas`元素会发生什么？基本上什么都不会发生。浏览器只是不会显示它。这就是为什么你需要特别小心这项技术，不要在新的`canvas`元素中放置任何你的网站或应用程序绝对依赖的东西。你还必须考虑备用内容。
- en: 'Browsers that support `canvas` include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 支持`canvas`的浏览器包括：
- en: '![Introduction](img/1048_06_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/1048_06_01.jpg)'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Before proceeding with developing with the new `canvas` element, make sure you
    have a good foundation of skills with HTML and JavaScript. Being comfortable with
    object-oriented programming sure wouldn't hurt either.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续使用新的`canvas`元素进行开发之前，请确保你对HTML和JavaScript有扎实的基础。对面向对象编程感到舒适肯定也是有好处的。
- en: In this chapter, we'll look at real-life examples of setting up the `canvas`
    environment, understanding the 2d rendering context, processing shapes dynamically,
    drawing borders for images using `canvas`, rounding corners, creating interactive
    visualizations, bouncing a ball, and creating fallback content.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到设置`canvas`环境的真实例子，理解2D渲染上下文，动态处理形状，使用`canvas`为图像绘制边框，圆角，创建交互式可视化，弹跳球以及创建备用内容。
- en: Now, let's get cooking!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始吧！
- en: Setting up the canvas environment
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置`canvas`环境
- en: Creating the new `canvas` element is easy.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的`canvas`元素很容易。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Check out how simple this is:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这是多么简单：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Of course, we can use whatever height and width dimensions we need, but that
    simple set of tags is what we need to start.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以使用任何需要的高度和宽度尺寸，但是我们需要开始的是这组简单的标签。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You're probably thinking we could use CSS to control the height and width, but
    resist that temptation. Because the new `canvas` element contains a 2d rendering
    context, that approach can cause unpredictable behavior.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为我们可以使用CSS来控制高度和宽度，但要抵制这种诱惑。因为新的`canvas`元素包含一个2D渲染上下文，这种方法可能会导致不可预测的行为。
- en: There's more...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Next, we''ll call the new `canvas` element JavaScript API while calling jQuery:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调用新的`canvas`元素JavaScript API，同时调用jQuery：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: He's smart
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 他很聪明
- en: '"Let me make one thing completely clear: When you use `canvas`, you''re not
    drawing on the `canvas` element itself. Instead, you''re actually drawing on the
    2d rendering context, which you''re accessing through the `canvas` element via
    the JavaScript API." - Rob Hawkes'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “让我完全明确一件事：当你使用`canvas`时，你并不是在`canvas`元素本身上绘图。相反，你实际上是在通过JavaScript API访问`canvas`元素的2D渲染上下文上绘图。”-
    Rob Hawkes
- en: What am I sayin'?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我在说什么？
- en: Apple first introduced the new `canvas` element for the OSX Dashboard years
    ago. It was later implemented in web browsers Safari and then Chrome, with other
    browsers following suit. Since then it's become an official part of the HTML5
    specification.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果最早在OSX Dashboard中引入了新的`canvas`元素。后来它在Safari和Chrome等web浏览器中实现，其他浏览器也纷纷效仿。从那时起，它已成为HTML5规范的正式部分。
- en: What's next for <canvas>?
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<canvas>`的下一步是什么？'
- en: Right now, we're barely scratching the surface of what the new `canvas` element
    can do. Now and in the future we'll use it to create animations, charts, diagrams,
    drawing apps, graphs, and user interfaces. What will you dream up?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只是勉强触及了新的`canvas`元素所能做到的一小部分。现在和将来，我们将使用它来创建动画，图表，图表，绘图应用程序，图形和用户界面。你会想到什么呢？
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Developer Martin Angelov penned a great how-to guide titled, "An *HTML5 Slideshow
    w/Canvas & jQuery"* for Tutorial Zine at: [http://tutorialzine.com/2010/09/html5-canvas-slideshow-jquery](http://tutorialzine.com/2010/09/html5-canvas-slideshow-jquery).
    In it, Martin demonstrates how to combine the new canvas element with jQuery,
    the most popular JavaScript framework, to create an intensely interactive image
    slideshow.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者Martin Angelov为Tutorial Zine撰写了一篇名为《使用Canvas和jQuery创建HTML5幻灯片》的很棒的指南：[http://tutorialzine.com/2010/09/html5-canvas-slideshow-jquery](http://tutorialzine.com/2010/09/html5-canvas-slideshow-jquery)。在这篇文章中，Martin演示了如何将新的canvas元素与jQuery结合使用，这是最流行的JavaScript框架，以创建一个非常互动的图像幻灯片。
- en: Understanding the 2d rendering context
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解2d渲染上下文
- en: It's important to understand that the new `canvas` element is really a "surface"
    on which to draw bitmapped images in the browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，新的`canvas`元素实际上是一个在浏览器中绘制位图图像的“表面”。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Defining a `canvas` tag like this only tells half the story:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样定义一个`canvas`标签只是讲了一半的故事：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'By itself that HTML5 code does nothing. We have to use JavaScript to make the
    Document Object Model retrieve the 2d rendering context in order to get something
    to happen:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的HTML5代码什么也做不了。我们必须使用JavaScript来使文档对象模型检索2d渲染上下文，以便让一些事情发生：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To be fair, that bit of JavaScript won't do anything without the `canvas` tag
    in the HTML either.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，如果HTML中没有`canvas`标签，那么这一点JavaScript也不会起作用。
- en: There's more...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may be wondering about the name. If there's a 2d rendering context, isn't
    there probably a 3d rendering context too? The short answer is yes. But the more
    detailed answer isn't so simple.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想到这个名字。如果有一个2d渲染上下文，那么可能也有一个3d渲染上下文吧？简短的答案是肯定的。但更详细的答案并不那么简单。
- en: While a 3d rendering context does exists in theory, at the time of this publication
    no browser supports it. So if the new `canvas` element renders in 3d but nobody
    sees it, did it really do anything?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在理论上存在3d渲染上下文，但在本出版物发表时，没有浏览器支持它。所以如果新的`canvas`元素以3d方式渲染，但没有人看到它，它真的做了什么吗？
- en: You can master <canvas>
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你可以掌握<canvas>
- en: The 2d context uses a number of different drawing contexts for the new `canvas`
    element that use syntaxes that should look quite familiar if you're experienced
    with CSS and JavaScript.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 2d上下文为新的`canvas`元素使用了许多不同的绘图上下文，这些语法应该对熟悉CSS和JavaScript的人来说看起来非常熟悉。
- en: X, meet Y
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: X，见Y
- en: When drawing, remember the X and Y axis in the top left corner of your browser
    window. Values increase going down the page.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制时，请记住浏览器窗口左上角的X和Y轴。数值向下增加。
- en: Respect my authority!
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尊重我的权威！
- en: 'The World Wide Web Consortium''s HTML5 `Canvas` 2d Context specification is
    online at: [http://dev.w3.org/html5/2dcontext](http://dev.w3.org/html5/2dcontext).
    There we can dig even deeper into information like conformance requirements, the
    `canvas` state, transformations, compositing, colors and styles, line styles,
    shadows, simple shapes, complex shapes, focus management, text, images, pixel
    manipulation, drawing model, examples, and more.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 万维网联盟的HTML5`Canvas` 2d上下文规范可以在这里找到：[http://dev.w3.org/html5/2dcontext](http://dev.w3.org/html5/2dcontext)。在那里，我们可以深入了解诸如符合性要求、`canvas`状态、变换、合成、颜色和样式、线条样式、阴影、简单形状、复杂形状、焦点管理、文本、图像、像素操作、绘图模型、示例等更多信息。
- en: See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Steve Fulton and Jeff Fulton penned the book *HTML5 Canvas* for O''Reilly Books.
    While this chapter will give you 30 or so pages of valuable new `canvas` element
    recipes, the Fulton''s book weighs in at roughly 400 pages. Consider it the resource
    that picks up where this chapter leaves off. Check it out at: [http://oreilly.com/catalog/0636920013327](http://oreilly.com/catalog/0636920013327).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Steve Fulton和Jeff Fulton为O'Reilly Books撰写了《HTML5 Canvas》一书。虽然本章将为您提供大约30页有价值的新`canvas`元素配方，但Fulton的书大约有400页。把它当作是本章结束后的资源。在这里查看：[http://oreilly.com/catalog/0636920013327](http://oreilly.com/catalog/0636920013327)。
- en: Processing shapes dynamically
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态处理形状
- en: Let's look at the JavaScript functions that allow the new `canvas` element to
    draw rectangles.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看允许新的`canvas`元素绘制矩形的JavaScript函数。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: draws a filled rectangle. Next,
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 画一个填充的矩形。接下来，
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: draws an outline around the rectangle.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在矩形周围画出一个轮廓。
- en: Now, let's draw some shapes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们画一些形状。
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作...
- en: 'We''ll start with our basic `canvas` code and incorporate our new functions:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们的基本`canvas`代码开始，并整合我们的新函数：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What we've created resembles the flag of Denmark!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的东西类似于丹麦的国旗！
- en: '![How it works...](img/1048_06_02.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1048_06_02.jpg)'
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This example may not seem overwhelming at first, but when you remember that
    we've created an image with hardly any HTML and no CSS whatsoever, the new `canvas`
    element starts to look pretty impressive.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子一开始可能并不令人印象深刻，但当你记住我们几乎没有使用任何HTML和CSS就创建了一张图片时，新的`canvas`元素开始看起来相当令人印象深刻。
- en: Any way you want it
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任何你想要的方式
- en: Note that while we used color names ("white" and "red") we could also use hexadecimal
    values or RGB or even HSL! Use whatever makes the most sense for you and your
    interactive project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然我们使用了颜色名称（“white”和“red”），我们也可以使用十六进制值或RGB甚至HSL！使用对你和你的互动项目最有意义的内容。
- en: Similar to tables?
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类似于表格？
- en: Think of the color and size specifications for this example almost as the old-school
    `tables` we used to build back in the day for layout. While certainly not the
    same, there are definitely similarities to that technique in this case.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将此示例的颜色和大小规格几乎视为我们过去用于布局的老式`tables`。虽然肯定不同，但在这种情况下确实有一些相似之处。
- en: Be a square first
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首先成为一个正方形
- en: Mastering rectangles is the first `canvas` technique that's important to have
    under your belt after the ability to set up the element itself. Understanding
    the basics of this approach will help you grasp the fundamentals of the next few
    recipes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握矩形是在掌握设置元素本身的能力之后，重要的第一个`canvas`技术。理解这种方法的基础将帮助你掌握接下来几个配方的基础。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Another book weighing in at nearly 400 pages is Rob Hawkes'' *"Foundation HTML5
    Canvas: For Games and Entertainment"* from Friends of Ed. In it, Hawkes has created
    a publication for those brand new to the new `canvas` element all the way to the
    most seasoned expert looking to enhance skills. Sound like anyone you know? Check
    it out at: [http://friendsofed.com/book.html?isbn=1430232919](http://friendsofed.com/book.html?isbn=1430232919).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '另一本将近400页的书是Rob Hawkes的《Foundation HTML5 Canvas: For Games and Entertainment》，来自Friends
    of Ed。在这本书中，Hawkes为那些刚接触新的“画布”元素的人，一直到最有经验的专家提供了一个提升技能的出版物。听起来像你认识的人吗？在这里查看：[http://friendsofed.com/book.html?isbn=1430232919](http://friendsofed.com/book.html?isbn=1430232919)。'
- en: Drawing borders for images using canvas
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用画布为图像绘制边框
- en: Let's take a closer look at the super simple method of drawing borders around
    images using the new `canvas` element.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看使用新的“画布”元素绘制图像周围边框的超级简单方法。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, we''ll start with our basic `canvas` code and add one new line to draw
    a border:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从基本的“画布”代码开始，并添加一行新的代码来绘制边框：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![How to do it...](img/1048_06_03.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1048_06_03.jpg)'
- en: How it works...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: That one line of JavaScript tells the browser to create a rectangle starting
    at 10 pixels from the left and 20 pixels from the top of the new `canvas` element.
    It draws the box 100 pixels square.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的那一行告诉浏览器创建一个矩形，从新的“画布”元素的左边10像素，顶部20像素开始。它绘制了一个100像素的正方形框。
- en: There's more...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'That''s nice, but if we want the border to be any other color than the default,
    we''ll need to specify that:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但如果我们希望边框是除了默认颜色之外的任何其他颜色，我们需要指定它：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this case we've used `strokeStyle` to specify an RGB color of pure green.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用`strokeStyle`来指定纯绿色的RGB颜色。
- en: '![There''s more...](img/1048_06_04.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1048_06_04.jpg)'
- en: Style first
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首先是样式
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you plan to style a border, you'll need to specify that before the border
    is drawn by the browser. If you specify that style afterward, the browser will
    simply ignore it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算为边框设置样式，你需要在浏览器绘制边框之前指定。如果你在之后指定样式，浏览器将会忽略它。
- en: Many color values work
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 许多颜色值都可以使用
- en: The style attribute we just used was RGB, but the method also works with colors
    ("green", for example), hexadecimal values, HSL, and RGBA.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用的样式属性是RGB，但该方法也适用于颜色（例如“绿色”）、十六进制值、HSL和RGBA。
- en: I like big borders and I cannot lie
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我喜欢大边框，我无法否认
- en: 'If no border width is specified, the browser will automatically draw a one-pixel
    border. Here''s how to change that:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定边框宽度，浏览器将自动绘制一个像素的边框。以下是如何更改它的方法：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It''s just this easy:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单：
- en: '![I like big borders and I cannot lie](img/1048_06_05.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![我喜欢大边框，我无法否认](img/1048_06_05.jpg)'
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[http://rgraph.net](http://rgraph.net) is a graphic library specifically for
    the new `canvas` element. It allows you to easily create a wide variety of graph
    types: bar chart, bi-polar chart, donut chart, funnel chart, Gantt chart, horizontal
    bar chart, LED display, line chart, meter, odometer, pie chart, progress bar,
    rose chart, scatter graph, and traditional radar chart using HTML5, `canvas`,
    and JavaScript.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://rgraph.net](http://rgraph.net)是一个专门为新的“画布”元素设计的图形库。它允许您轻松创建各种图表类型：条形图、双极图、圆环图、漏斗图、甘特图、水平条形图、LED显示、折线图、仪表、里程表、饼图、进度条、玫瑰图、散点图和传统的雷达图，使用HTML5、`canvas`和JavaScript。'
- en: Rounding corners
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 圆角
- en: So far we've created images and borders using square or rectangular shapes.
    Next we'll look at how to use the new `canvas` element to round the corners of
    those images and borders via JavaScript.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用方形或矩形形状创建了图像和边框。接下来，我们将看看如何使用新的“画布”元素通过JavaScript来使这些图像和边框的角变圆。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The ability to round corners is not native to `canvas` but Rob Hawkes is a
    super-smart guy and figured out how to make it happen. Here''s what Rob did, explained
    at: [http://rawkes.com/blog/2010/12/11/rounded-corners-in-html5-canvas](http://rawkes.com/blog/2010/12/11/rounded-corners-in-html5-canvas).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 圆角的能力不是`canvas`的本机功能，但Rob Hawkes是一个非常聪明的人，他想出了如何实现它的方法。这就是Rob做的事情，在这里解释：[http://rawkes.com/blog/2010/12/11/rounded-corners-in-html5-canvas](http://rawkes.com/blog/2010/12/11/rounded-corners-in-html5-canvas).
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, Rob chose a slightly different method of calling the 2d `canvas` rendering
    context than we did, but his method works just fine too. Check it out:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Rob选择了一个稍微不同的方法来调用2d“画布”渲染上下文，但他的方法也完全有效。看看：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next part of Rob''s code should seem quite familiar: He sets the X and
    Y coordinates of the image, its size, and then the border radius:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Rob代码的下一部分应该看起来非常熟悉：他设置了图像的X和Y坐标，它的大小，然后是边框半径：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then Rob calls the ability to join lines and the specific border radius he wants
    to use. Fake it till you make it!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Rob调用了连接线和他想要使用的特定边框半径的能力。假装直到你成功为止！
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally there''s the color of the border (still green!) and the final bit of
    script that ties it all together:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是边框的颜色（仍然是绿色！）和将所有内容联系在一起的最后一小部分脚本：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Now Rob — and you, if you are following along — get to be a rockstar with a
    beautifully rounded corner image.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Rob-如果你也在跟着做-可以成为一个拥有美丽圆角图像的摇滚明星。
- en: '![There''s more...](img/1048_06_06.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1048_06_06.jpg)'
- en: Just like the Scholastic Aptitude Tests
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 就像学术能力测试一样
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Remember: `lineWidth` is to the new `canvas` element what border-radius is
    to CSS. The both accomplish the same thing — but by very different means.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：“lineWidth”对于新的“画布”元素来说就像border-radius对CSS来说一样。它们都实现了同样的功能-但是方式完全不同。
- en: What about IE?
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IE呢？
- en: 'It''s possible to support some of the new `canvas` element''s abilities in
    Internet Explorer 6-8 using the ExplorerCanvas library at: [http://code.google.com/p/explorercanvas.](http://code.google.com/p/explorercanvas.)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用ExplorerCanvas库在Internet Explorer 6-8中支持一些新的“画布”元素的功能：[http://code.google.com/p/explorercanvas.](http://code.google.com/p/explorercanvas.)
- en: We're laying a foundation
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们正在奠定基础
- en: For most of this chapter's group of recipes, we've only used the new `canvas`
    element to draw static shapes in the browser without the use of images. That may
    seem uneventful and perhaps even counterintuitive. The point is to give you a
    strong foundation with this new ability so that you can extend it to use the new
    `canvas` element to create games, visualize data, and allow users to draw objects
    dynamically.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的大部分食谱中，我们只使用了新的`canvas`元素在浏览器中绘制静态形状，而没有使用图像。这可能看起来毫无事件，甚至可能违反直觉。重点是为您提供这种新能力的坚实基础，以便您可以扩展它，使用新的`canvas`元素创建游戏，可视化数据，并允许用户动态绘制对象。
- en: See also
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Mozilla''s "People of HTML5" video series featured many of the leading voices
    of the HTML5 movement. John Foliot is the co-chair of the subcommittee on the
    accessibility of media elements in HTML5\. It should come as no surprise when
    he laments the state of current browser support for these technologies:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla的“HTML5的人”视频系列中有许多HTML5运动的领军人物。John Foliot是HTML5中媒体元素无障碍子委员会的联合主席。当他为这些技术当前浏览器支持的状况感到懊恼时，这一点应该不足为奇：
- en: '"I think much of what HTML5 is starting to deliver will be of benefit to all
    users, including those using Assistive Technology. However much of what is promised
    is not yet supported in all browsers, and related technologies — Assistive Technologies
    — have a long way to come to leverage this benefit."'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我认为HTML5开始提供的许多东西对所有用户都有好处，包括使用辅助技术的用户。然而，许多承诺的东西在所有浏览器中尚不受支持，相关技术——辅助技术——还有很长的路要走才能利用这一好处。”
- en: 'Read and watch the full interview at: [http://hacks.mozilla.org/2011/02/people-of-html5-john-foliot](http://hacks.mozilla.org/2011/02/people-of-html5-john-foliot).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读并观看完整的采访：[http://hacks.mozilla.org/2011/02/people-of-html5-john-foliot](http://hacks.mozilla.org/2011/02/people-of-html5-john-foliot).
- en: Creating interactive visualizations
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建交互式可视化
- en: 'The team at Carbon Five had a daunting task: To create a physical diagram of
    their skills and interests. They may have started with a wall in their office,
    but quickly realized the new abilities the new `canvas` element brings to the
    table would allow interactivity and the ability to draw conclusions based on it.
    Here''s how they did it at: [http://carbonfive.github.com/html5-playground/interest-map/interest-map.html.](http://carbonfive.github.com/html5-playground/interest-map/interest-map.html.)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Carbon Five团队面临着一个艰巨的任务：创建他们的技能和兴趣的物理图。他们可能从办公室的墙开始，但很快意识到新的`canvas`元素带来的新能力将允许交互性，并且可以根据此进行结论。以下是他们在这里所做的：[http://carbonfive.github.com/html5-playground/interest-map/interest-map.html.](http://carbonfive.github.com/html5-playground/interest-map/interest-map.html.)
- en: '![Creating interactive visualizations](img/1048_06_07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![创建交互式可视化](img/1048_06_07.jpg)'
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'It will be very helpful to view the source code at: [view-source:http://carbonfive.github.com/html5-playground/interest-map/interest-map.html](http://view-source:http://carbonfive.github.com/html5-playground/interest-map/interest-map.html)
    while following along with this recipe.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在按照本食谱操作时，查看源代码将非常有帮助：[view-source:http://carbonfive.github.com/html5-playground/interest-map/interest-map.html](http://view-source:http://carbonfive.github.com/html5-playground/interest-map/interest-map.html)
- en: The Carbon Five team reminds us that canvas is not officially part of the HTML5
    spec by creating this interactive visualization using an HTML4.01 Transitional
    DOCTYPE.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Carbon Five团队提醒我们，画布并不是HTML5规范的正式部分，他们使用HTML4.01 Transitional DOCTYPE创建了这个交互式可视化。
- en: '[PRE16]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s a detailed look at some of what they''re doing with JavaScript and
    the new `canvas` element. They start with some variables like the card style.
    Here, they do several things: set the background color, create a black border,
    the width of the card, and the values for a shadow around it.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是他们在JavaScript和新的`canvas`元素中所做的一些详细内容。他们从一些变量开始，比如卡片样式。在这里，他们做了几件事情：设置背景颜色，创建黑色边框，卡片的宽度，以及围绕它的阴影的值。
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The next variable should look familiar to those who know CSS. Here, the card
    font weight, size, face, color, and more are set:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个变量对于了解CSS的人来说应该很熟悉。在这里，设置了卡片的字体重量、大小、字体、颜色等等：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, they set several more variables related to margin, width, height, scale,
    radius, shadow, and more.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，他们设置了与边距、宽度、高度、比例、半径、阴影等相关的几个变量。
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Lastly, they set up variables for skills, people, and a people-to-skill matrix.
    Unfortunately, these code chunks too long for republication here.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，他们为技能、人员和人员与技能矩阵设置了变量。不幸的是，这些代码块太长，无法在此重新发布。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Variables by themselves don't do a whole lot of good unless they have functions
    to act upon them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 变量本身并不会有太大作用，除非它们有函数来对其进行操作。
- en: 'After initializing the display, the Carbon Five team uses more functions like
    drawing on the 2d `canvas` rendering element:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化显示后，Carbon Five团队使用更多的函数，比如在2D`canvas`渲染元素上绘制：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'as well as creating the name tags:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以及创建名称标签：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'and drawing the arrows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 并绘制箭头：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'With variables and functions already set, the last thing to do is call the
    `canvas` element itself in the HTML to give it all a space in which to run:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 已经设置了变量和函数，最后要做的就是在HTML中调用`canvas`元素本身，为其提供一个运行的空间：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Evil of two lessors
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 两个出租人的邪恶
- en: In the old days of the web, the Carbon Five team would have had the choice of
    leaving their map on a physical wall or creating a static graphic image of it
    for computer display. While either might render just as well as using the new
    `canvas` element, neither of them allow the team to extract valuable information
    the way the new `canvas` element does.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧网页时代，Carbon Five团队可以选择将他们的地图放在物理墙上，或者为计算机显示创建静态图像。虽然任何一种方式都可以渲染得和使用新的`canvas`元素一样好，但它们都不允许团队像新的`canvas`元素那样提取有价值的信息。
- en: What about fallback content?
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备用内容呢？
- en: Interestingly, Carbon Five used no fallback content within the new `canvas`
    element in this instance. This is an approach you'll have to weigh carefully,
    as those with older browsers or who use assistive technologies will see nothing,
    literally nothing. Carbon Five gets away with that for this internal project.
    Can you?
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Carbon Five在这种情况下没有在新的“画布”元素中使用任何回退内容。这是一个你需要仔细权衡的方法，因为那些使用旧浏览器或辅助技术的人将什么也看不到，真的什么也看不到。Carbon
    Five在这个内部项目中得以成功。你能吗？
- en: Take him up on his offer.
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接受他的提议。
- en: When writing about the project at [http://blog.carbonfive.com/2011/02/17/visualizing-skillsets-in-html5-canvas-part-1](http://blog.carbonfive.com/2011/02/17/visualizing-skillsets-in-html5-canvas-part-1)
    Carbon Five developer Alex Cruikshank went so far as to offer to create visualization
    maps to the first five people who wrote in with data in a reasonable format. As
    of publication date, it's unclear if anyone's taken him up on it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://blog.carbonfive.com/2011/02/17/visualizing-skillsets-in-html5-canvas-part-1](http://blog.carbonfive.com/2011/02/17/visualizing-skillsets-in-html5-canvas-part-1)上写关于这个项目时，Carbon
    Five的开发者亚历克斯·克鲁克山甚至提出为前五个以合理格式提供数据的人创建可视化地图。截至发布日期，尚不清楚是否有人接受了他的提议。
- en: See also
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Jacob Seidelin hit another home run with his new canvas element visualization
    of the band Radiohead''s song "Idioteque" from the album "Kid A" at: [http://nihilogic.dk/labs/canvas_music_visualization](http://nihilogic.dk/labs/canvas_music_visualization).
    Jacob''s pushing the limits of what can be done with the `canvas` element and
    JavaScript and that''s why we think he''s terrific!'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 雅各布·赛德林用他的新画布元素可视化了乐队Radiohead的歌曲“Idioteque”，这首歌来自专辑“Kid A”，网址是：[http://nihilogic.dk/labs/canvas_music_visualization](http://nihilogic.dk/labs/canvas_music_visualization)。雅各布正在挑战“画布”元素和JavaScript的极限，这就是为什么我们认为他很棒！
- en: Bouncing a ball
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹跳一个球
- en: We've looked at how do draw shapes using the new `canvas` element, and next
    we'll turn our attention to making those shapes move. Author Vinci Rufus shows
    us how.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过如何使用新的“画布”元素绘制形状，接下来我们将把注意力转向让这些形状移动起来。作者文森·鲁弗斯向我们展示了如何做到这一点。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll start with our usual `canvas` HTML code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们通常的`canvas` HTML代码开始：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next up is the unique part: the JavaScript. Here, Vinci chose a slightly different
    method of calling the 2d `canvas` rendering context than we did, but his method
    works just fine too. Check it out:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是独特的部分：JavaScript。在这里，文森选择了一个稍微不同的方法来调用2D“画布”渲染上下文，但他的方法也完全有效。看看：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Put together, that code should look like. Note the addition of an `onLoad` function
    added to the `body` tag.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些代码放在一起，应该是这样的。请注意，添加了一个`onLoad`函数到`body`标签。
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And render this blue ball:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后渲染这个蓝色的球：
- en: '![How to do it...](img/1048_06_08.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1048_06_08.jpg)'
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'So far Vinci''s code is pretty straightforward. We saw how he called the 2d
    `canvas` rendering context. He sets the color of the fill next:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，文森的代码非常简单。我们看到他是如何调用2D“画布”渲染上下文的。接下来他设置了填充的颜色：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And then draws an arc 100 pixels from the top and left and fills it with the
    blue he already set:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后画一个距离顶部和左边100像素的弧线，并用他已经设置的蓝色填充它：
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: But now all we've got is a blue ball just sitting there. Next, Vinci shows us
    how to make it move using variables and a new function named `draw.`
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们只有一个蓝色的球静静地坐在那里。接下来，文森向我们展示了如何使用变量和一个名为`draw`的新函数让它移动。
- en: There's more...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![There''s more...](img/1048_06_09.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1048_06_09.jpg)'
- en: 'As you can see, the ball is in motion but has simply drawn a straight line
    off the edge of the `canvas`. Vinci explains why:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，球在运动，但只是画了一条直线超出了“画布”的边缘。文森解释了原因：
- en: '"This is because each time the `draw()` function is called, it draws a circle
    at the new coordinates without removing the old ones. That''s how the `getContext`
    object works so it''s not a bug; it doesn''t really move the circle and, instead,
    it draws a circle at the new coordinates each time the function is called."'
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “这是因为每次调用`draw()`函数时，它都会在新的坐标处画一个圆圈，而不会移除旧的圆圈。这就是`getContext`对象的工作原理，所以这不是一个bug；它实际上并没有移动圆圈，而是每次调用函数时在新的坐标处画一个圆圈。”
- en: Start again
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新开始
- en: 'Vinci shows us a method to erase the old circles as the new `canvas` element
    draws each new one:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 文森向我们展示了一种方法，可以在新的“画布”元素绘制每一个新的圆圈时擦除旧的圆圈：
- en: '[PRE30]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, the ball appears to fall down to the right outside of the `canvas` border.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，球似乎向右下方超出了“画布”的边界。
- en: Don't box me in
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要把我困住
- en: To ensure that the ball stays within the border of the `canvas`, Vinci wrote
    some logic to check if the x and y coordinates are beyond the `canvas` dimensions.
    If they are, he makes the ball reverse directions.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保球保持在“画布”的边界内，文森编写了一些逻辑来检查x和y坐标是否超出了“画布”的尺寸。如果超出了，他就让球改变方向。
- en: '[PRE31]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now the ball should be bouncing around all four sides of the `canvas` continually.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，球应该在“画布”的四个边上不断地弹跳。
- en: '![Don''t box me in](img/1048_06_10.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![不要把我困住](img/1048_06_10.jpg)'
- en: And that's one to grow on
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是一个成长的过程
- en: As Vinci reminds us in his compelling tutorial at [http://sixrevisions.com/html/bouncing-a-ball-around-with-html5-and-javascript](http://sixrevisions.com/html/bouncing-a-ball-around-with-html5-and-javascript),
    the bouncing ball may seem simple at first, but it's actually a key technique
    to understand in order to develop just about any game for the new HTML5 `canvas`
    element.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如文森在他引人入胜的教程中提醒我们的那样，弹跳的球乍看起来可能很简单，但实际上这是一个关键的技术，需要理解才能开发任何新的HTML5“画布”元素游戏。
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: A beautiful example of user-generated graphics can be seen at Yuri Vishnevsky's
    [http://weavesilk.com](http://weavesilk.com). The site uses the new `canvas` element
    as part of an experiment in generative art. Some of the generated images are so
    beautiful, Yuri has made them available as stunning desktop background images.
    A version for iPhone and iPad is planned also.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在Yuri Vishnevsky的[http://weavesilk.com](http://weavesilk.com)上看到用户生成的图形的一个美丽的例子。该网站使用新的`canvas`元素作为生成艺术实验的一部分。一些生成的图像非常漂亮，Yuri已经将它们作为令人惊叹的桌面背景图像提供。还计划推出iPhone和iPad版本。
- en: Creating fallback content
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建回退内容
- en: '"When authors use the `canvas` element, they must also provide content that,
    when presented to the user, conveys essentially the same function or purpose as
    the bitmap `canvas`. This content may be placed as content of the `canvas` element.
    The contents of the `canvas` element, if any, are the element''s fallback content."
    - WHATWG HTML5 Specification'
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “当作者使用`canvas`元素时，他们还必须提供内容，当呈现给用户时，传达与位图`canvas`本质上相同的功能或目的。此内容可以放置为`canvas`元素的内容。`canvas`元素的内容（如果有）是元素的回退内容。”-
    WHATWG HTML5规范
- en: What happens if someone viewing your brilliant new `canvas` application is using
    an older browser and is unable to recognize your coding genius? Or what happens
    when someone uses assistive technologies? Let's take a look.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人查看您的精彩新`canvas`应用程序的浏览器使用较旧的浏览器，并且无法识别您的编码天赋会发生什么？或者当有人使用辅助技术时会发生什么？让我们来看看。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: If, for some reason, a user's browser won't support the new `canvas` element,
    it's up to us as developers to give them something valuable instead.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，用户的浏览器不支持新的`canvas`元素，作为开发人员，我们要为他们提供有价值的东西。
- en: Here we can use an image as fallback.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以使用图像作为回退。
- en: '[PRE32]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Or text:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 或者文本：
- en: '[PRE33]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Or almost any other element.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 或者几乎任何其他元素。
- en: How it works...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'By now you''re well versed at how `alt` tags work for image files: If an image
    file doesn''t show up or the user relies upon assistive technologies, the `alt`
    tag gives them at least a valuable text label representing what they''re missing.
    Fallback content for the new `canvas` element is a similar concept but is capable
    of doing and being so much more than just an `alt` tag.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经熟悉了`alt`标签如何用于图像文件：如果图像文件不显示或用户依赖辅助技术，`alt`标签至少为他们提供了一个有价值的文本标签，代表他们所错过的内容。新的`canvas`元素的回退内容是一个类似的概念，但它能够做到并且比只是一个`alt`标签更有价值。
- en: There's more...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Browsers which do support the new `canvas` element will ignore the content inside
    the container, and just render the new `canvas` element normally.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 支持新的`canvas`元素的浏览器将忽略容器内的内容，并正常呈现新的`canvas`元素。
- en: Thanks, Mozilla
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谢谢，Mozilla
- en: '"If fallback content is desired, some CSS tricks must be employed to mask the
    fallback content from Safari (which should render just the `canvas)`, and also
    to mask the CSS tricks themselves from IE (which should render the fallback content)."
    - [Mozilla.org](http://Mozilla.org)'
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果需要回退内容，必须使用一些CSS技巧来掩盖Safari中的回退内容（应该只呈现`canvas`），并且还要掩盖IE中的CSS技巧本身（应该呈现回退内容）。-
    [Mozilla.org](http://Mozilla.org)
- en: How will we deal with accessibility?
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们将如何处理可访问性？
- en: There is generally a consensus among specification writers and the HTML5 community
    at large that the new `canvas` element is only partially baked. Leaving those
    who use assistive technologies out in the cold just doesn't seem like the right
    thing to do. Watch this space.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 规范作者和HTML5社区普遍认为新的`canvas`元素只是部分成熟。让使用辅助技术的人置身于寒冷中似乎不是正确的做法。敬请关注。
- en: Are we ready for <canvas>?
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们准备好使用<canvas>了吗？
- en: Many developers consider the new `canvas` element accessibility is one of the
    last sticking points in the new HTML5 specification. With little meaningful fallback
    capabilities, this new element simply feels not ready for prime time.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员认为新的`canvas`元素的可访问性是新HTML5规范中的最后一个关键点。由于几乎没有有意义的回退功能，这个新元素似乎还没有准备好投入使用。
