- en: Chapter 2. Let's Get Stylish
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。让我们时尚起来
- en: '"In matters of style, swim with the current; in matters of principle, stand
    like a rock." – Thomas Jefferson'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在风格问题上，随波逐流；在原则问题上，坚如磐石。”- 托马斯·杰斐逊
- en: '*In this chapter, we will put on our graphic designer hats and do some styling.
    Right now our task list application that we created in the first chapter works
    but it looks like something from 2005\. We will bring it up to the present and
    into the future using CSS3 to give it a clean, modern look. We will add rounded
    corners, shadows, gradients, and transitions using the latest CSS3 features. We
    will also use CSS sprites to add some images to the task list buttons.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将戴上我们的平面设计师帽子，进行一些样式设计。现在我们在第一章中创建的任务列表应用程序可以工作，但看起来像是2005年的东西。我们将使用CSS3使其现代化，并使用最新的CSS3功能使其看起来干净、现代。我们将添加圆角、阴影、渐变和过渡效果。我们还将使用CSS精灵为任务列表按钮添加一些图像。*'
- en: 'In this chapter we will learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: New ways to specify colors in CSS3 and set transparencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CSS3中指定颜色的新方法和设置透明度
- en: How to add rounded corners to elements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向元素添加圆角
- en: How to add shadows to elements and text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向元素和文本添加阴影
- en: How to draw gradients in element backgrounds
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在元素背景中绘制渐变
- en: New CSS3 background properties
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的CSS3背景属性
- en: How to use CSS sprites in your applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在应用程序中使用CSS精灵
- en: How to use transitions and transforms to add effects to the user interface
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用过渡和变换为用户界面添加效果
- en: How to dynamically load stylesheets to create customizable user interfaces
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何动态加载样式表以创建可定制的用户界面
- en: CSS3 overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3概述
- en: CSS3 is not part of the HTML5 specification, but it is an integral part of writing
    HTML5 applications. CSS3 is being developed in tandem with HTML5 and provides
    many new styles to make web pages look and function better than ever. Things that
    were once the realm of Photoshop, such as gradients and shadows, are now easily
    added via styling. Using these new graphics features will make your applications
    look modern and add character to your applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3不是HTML5规范的一部分，但它是编写HTML5应用程序的一个重要部分。CSS3与HTML5并行开发，并提供许多新的样式，使网页的外观和功能比以往更好。曾经是Photoshop的领域，如渐变和阴影，现在可以通过样式轻松添加。使用这些新的图形功能将使您的应用程序看起来现代，并为您的应用程序增添特色。
- en: Some of the most exciting additions to CSS are the ability to add gradients
    and shadows to elements. Rounded corners, a feature that everyone wanted in their
    web pages, and which were once the realm of many HTML hacks, are now simple to
    add. It has never been easier to make web pages and applications look good without
    having to download extra images and code to support them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CSS的一些最令人兴奋的新增功能之一是能够向元素添加渐变和阴影。圆角是每个人都希望在网页中拥有的功能，曾经是许多HTML hack的领域，现在可以轻松添加。从未有过如此简单地使网页和应用程序看起来好，而无需下载额外的图像和代码来支持它们。
- en: You can see examples of all the following CSS3 styles in `chapter2/css3-examples/css3-examples.html`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter2/css3-examples/css3-examples.html`中看到所有以下CSS3样式的示例。
- en: CSS3 colors
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3颜色
- en: Before we get started with the new effects, let's discuss colors. CSS3 has new
    ways to define colors that allow you to set transparency and define colors in
    HSL format. Of course, you can still use the old standards of hex values, any
    of the CSS color names, and the `rgb()` specifier.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始新效果之前，让我们讨论一下颜色。CSS3有新的定义颜色的方式，允许您设置透明度并以HSL格式定义颜色。当然，您仍然可以使用旧的十六进制值标准、任何CSS颜色名称和`rgb()`指定符。
- en: 'A new `rgba()` specifier has been added to allow the alpha, or opacity amount,
    to be set with a color. Just like `rgb()`, the first three parameters set red,
    green, and blue amounts, and are values ranging from `0` to `255`. A fourth parameter,
    the alpha, is a floating point value from `0` to `1` where `0` is completely transparent
    and `1` is completely opaque. The following declares a red background color that
    is 50 percent transparent:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加了一个新的`rgba()`指定符，允许设置颜色的alpha或不透明度。与`rgb()`一样，前三个参数设置红色、绿色和蓝色的数量，取值范围为`0`到`255`。第四个参数alpha是一个浮点值，范围从`0`到`1`，其中`0`是完全透明，`1`是完全不透明。以下声明了一个红色背景颜色，透明度为50%：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Although most browsers support `rgba()`, it''s a good idea to specify a fallback
    for those that don''t support it by defining a color in `rgb()` format preceding
    it, as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数浏览器支持`rgba()`，但最好通过在其前面以`rgb()`格式定义颜色来为不支持它的浏览器指定一个回退，如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s an example of overlapping three elements all with an alpha value of
    `0.5` and having colors red, green, and blue (yes, you can draw circular elements,
    which we''ll see in the next section):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重叠三个元素的示例，所有元素的alpha值均为`0.5`，颜色分别为红色、绿色和蓝色（是的，您可以绘制圆形元素，我们将在下一节中看到）。
- en: '![CSS3 colors](img/5947_02_06.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3颜色](img/5947_02_06.jpg)'
- en: In addition to RGB colors, CSS3 also supports **HSL** colors, which stands for
    **Hue**, **Saturation**, and **Lightness**. HSL is based on a color wheel that
    is full color at the edges and fades to gray in the center. Now extend the wheel
    into a cylinder that is black at the bottom, white at the top, and full color
    in the middle. That is the theory around HSL colors.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了RGB颜色，CSS3还支持**HSL**颜色，它代表**色调**、**饱和度**和**亮度**。HSL基于一个颜色轮，边缘是全彩色，中心渐变为灰色。现在将该轮延伸为一个圆柱体，底部是黑色，顶部是白色，中间是全彩色。这就是HSL颜色的理论。
- en: 'It is specified using `hsl(h, s, l)`. Hue is a value from `0` to `360` that
    maps to the degrees on the color wheel. `0` is red, `120` is green, `240` is blue,
    and `360` is back around to red. Saturation is the percentage of color where `0%`
    is completely gray and `100%` full color. Lightness is the percent of lightness
    where `0%` is black, `50%` is full color, and `100%` is white. You can specify
    it with or without an alpha value, the same as `rgb()`, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它是使用`hsl(h, s, l)`指定的。色调是从`0`到`360`的值，对应于颜色轮上的角度。`0`是红色，`120`是绿色，`240`是蓝色，`360`又回到红色。饱和度是颜色的百分比，其中`0%`是完全灰色，`100%`是全彩色。亮度是亮度的百分比，其中`0%`是黑色，`50%`是全彩色，`100%`是白色。您可以像`rgb()`一样指定它，也可以不带alpha值，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Most people don't think of colors in HSL, but it's out there just in case you
    want to use it. If you want to play around with it, there is a nice HSL picker
    at [http://hslpicker.com](http://hslpicker.com).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人不会考虑HSL中的颜色，但它确实存在，以防您想要使用它。如果您想尝试一下，可以在[http://hslpicker.com](http://hslpicker.com)找到一个不错的HSL选择器。
- en: Rounded corners
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 圆角
- en: The first CSS3 effect that we'll look at is rounded corners, since that was
    such a sought-after feature before CSS3\. In the past, if you wanted rounded corners,
    there were only a few non-optimal solutions available. You could load four images,
    one for each corner, and add some extra markup to get them to line up (and try
    to make it work in all browsers). Or implement some kind of hack using multiple
    `div` tags to "draw" a rounded border. Or one of a half a dozen other ways. In
    the end none of them were great solutions. So why did we go to such lengths to
    make rounded corners work before CSS3? Because people are attracted to them and
    they just seem to make your design look more natural.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的第一个CSS3效果是圆角，因为在CSS3之前这是一个非常受欢迎的功能。过去，如果您想要圆角，只有一些非最佳的解决方案可用。您可以加载四个图像，每个角一个，然后添加一些额外的标记来使它们对齐（并尝试使其在所有浏览器中工作）。或者使用多个`div`标签来“绘制”圆角边框的某种黑客方式。或者其他半打方法之一。最终，它们都不是很好的解决方案。那么为什么我们要如此努力地在CSS3之前使圆角边框起作用呢？因为人们被它们吸引，它们似乎让您的设计看起来更自然。
- en: 'Rounded corners are ridiculously easy to add to elements using CSS3''s new
    `border-radius` property. If you want each corner to have the same border radius,
    just give it one value, like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS3的新`border-radius`属性非常容易地向元素添加圆角。如果您希望每个角具有相同的边框半径，只需给出一个值，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to set each corner of the border to a different radius, you can
    do that too. The values are in the standard order for CSS properties, clockwise
    from the top-left: top-left, top-right, bottom-right, and bottom-left.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将边框的每个角设置为不同的半径，也可以这样做。值按照CSS属性的标准顺序，顺时针从左上角开始：左上，右上，右下和左下。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may set one, two, three, or all four values. One and four are self-explanatory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置一个、两个、三个或四个值。一和四是不言自明的。
- en: If two values are set, the first applies to top-left and bottom-right and the
    second applies to top-right and bottom-left. So it's opposite corners.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置了两个值，则第一个值适用于左上和右下，第二个值适用于右上和左下。因此，它是相对的角。
- en: If three values are set, the second value applies to top-right and bottom-left.
    The first applies to top-left and the third to bottom-right.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置了三个值，则第二个值适用于右上和左下。第一个适用于左上，第三个适用于右下。
- en: 'You can also define each corner''s radius separately, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以单独定义每个角的半径，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Want to create a circle or ellipse? Set the `border-radius` value to `50%`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想要创建圆形或椭圆形？将`border-radius`值设置为`50%`。
- en: '![Rounded corners](img/5947_02_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Rounded corners](img/5947_02_01.jpg)'
- en: Shadows
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阴影
- en: Adding shadows to elements and text is simple in CSS3\. Use shadows to make
    certain elements really stand out and give a more natural look to your UI. There
    are many options for adding shadows, such as size, position, and color. Shadows
    don't always have to be behind elements and text; they can frame, highlight, and
    add effects to them too.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3中，向元素和文本添加阴影非常简单。使用阴影使某些元素真正脱颖而出，并为您的UI赋予更自然的外观。有许多选项可用于添加阴影，例如大小、位置和颜色。阴影不一定总是在元素和文本后面；它们也可以为它们提供框架、突出显示和添加效果。
- en: Box shadows
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盒子阴影
- en: 'In addition to rounded corners, you can add shadows to elements using the new
    CSS3 `box-shadow` property. The `box-shadow` property takes a number of parameters
    that tells it how to draw the shadow:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了圆角，您还可以使用新的CSS3 `box-shadow`属性为元素添加阴影。`box-shadow`属性接受一些参数，告诉它如何绘制阴影：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is an explanation of the parameters:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是参数的解释：
- en: '`h-offset`: The horizontal offset of the shadow. Negative values put the shadow
    to the left of the element.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h-offset`：阴影的水平偏移。负值将阴影放在元素的左侧。'
- en: '`v-offset`: The vertical offset of the shadow. Negative values put the shadow
    above the element.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-offset`：阴影的垂直偏移。负值将阴影放在元素上方。'
- en: '`blur-radius`: Determines the blur amount; the higher the number, the more
    blur (optional).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blur-radius`：确定模糊量；数字越高，模糊越多（可选）。'
- en: '`spread-radius`: The size of the shadow. If zero, it''s the same size as the
    blur (optional).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spread-radius`：阴影的大小。如果为零，则与模糊大小相同（可选）。'
- en: '`color`: The color of the shadow (optional).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`：阴影的颜色（可选）。'
- en: '`inset`: Add `inset` to change shadow from outer to inner (optional).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inset`：添加`inset`以将阴影从外部更改为内部（可选）。'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can produce some interesting effects other than shadows with the `box-shadow`
    property. You can give an element an inner or outer glow by setting the `offset`
    values to zero and adjusting the blur and spread (see the previous two examples).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`box-shadow`属性为元素添加除阴影之外的一些有趣效果。通过将`offset`值设置为零并调整模糊和扩展（请参见前两个示例），您可以为元素设置内部或外部发光。
- en: '![Box shadows](img/5947_02_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Box shadows](img/5947_02_02.jpg)'
- en: Text shadows
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本阴影
- en: 'In addition to box shadows, CSS3 has support for text shadows using the `text-shadow`
    property. It works nearly identically to `box-shadow` and uses almost all the
    same parameters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了盒子阴影，CSS3还支持使用`text-shadow`属性添加文本阴影。它的工作方式几乎与`box-shadow`相同，并且使用几乎相同的参数：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Like `box-shadow`, you can produce some interesting effects, such as glowing
    text:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与`box-shadow`一样，您可以产生一些有趣的效果，例如发光文本：
- en: '![Text shadows](img/5947_02_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Text shadows](img/5947_02_05.jpg)'
- en: Time for action – styles in action
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-样式行动
- en: Let's put the `border-radius` and `box-shadow` effects to good use in our task
    list application. First, we will center the task list on the page. Then we'll
    put a box around each task with rounded corners and a shadow. Let's open `taskAtHand.css`
    and make some changes. You can find the code for this section in `chapter2/example2.1`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在任务列表应用程序中充分利用`border-radius`和`box-shadow`效果。首先，我们将在页面上居中显示任务列表。然后我们将在每个任务周围放一个有圆角和阴影的框。让我们打开`taskAtHand.css`并进行一些更改。您可以在`chapter2/example2.1`中找到此部分的代码。
- en: First, we'll change the style for the `<div id="main">` element which contains
    the `task-name` text field and task list. Let's give this section a minimum width
    of `9em` and a maximum width of `25em`. We don't want the task list to get too
    wide or too small to make it easier to read. This will give us the beginnings
    of a reactive layout. We will also set the top and bottom margins to `1em`, and
    the left and right margins to `auto` to center it on the page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更改包含`task-name`文本字段和任务列表的`<div id="main">`元素的样式。让我们给这个部分设置一个最小宽度为`9em`，最大宽度为`25em`。我们不希望任务列表变得太宽或太小，以便更容易阅读。这将为我们提供一个反应式布局的开端。我们还将将上下边距设置为`1em`，将左右边距设置为`auto`以使其在页面上居中。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A reactive layout is one that reacts to its environment by adjusting its layout
    to fit the device it is displayed on. By using reactive layouts, you can ensure
    that your application works and looks good on any device, ranging from a phone
    to the desktop.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个反应式布局是根据其环境调整其布局以适应其显示的设备的布局。通过使用反应式布局，您可以确保您的应用程序在任何设备上都能正常工作和显示良好，从手机到桌面设备。
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We also want to change the `task-name` text input field to take up the entire
    width of the main section by setting its `width` property to `98%`. This will
    give it a little wiggle room for the borders of the textbox; `100%` will make
    it burst at the seams:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想通过将其`width`属性设置为`98%`来将`task-name`文本输入字段的样式更改为占据主区域的整个宽度。这将为文本框的边框留出一些余地；`100%`会让它爆炸：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now let''s work on the `task-list` items. We will give them a background color,
    rounded corners, and a shadow. We will make the shadow black and give it some
    transparency, so that the background color shows through. We will also set the
    `position` property to `relative`, so we can position the task buttons inside
    of it (see the next screenshot):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来处理`task-list`项目。我们将给它们设置背景颜色，圆角和阴影。我们将使阴影变黑并且给它一些透明度，这样背景颜色就会透过来。我们还将把`position`属性设置为`relative`，这样我们就可以在其中定位任务按钮（见下一个屏幕截图）：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s also add a border around the task buttons to group them, and move them
    over to the upper-right side of the `task` element using absolute positioning.
    We could also float it right here, but absolute positioning gives us more control:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还在任务按钮周围添加一个边框来对它们进行分组，并使用绝对定位将它们移到`task`元素的右上方。我们也可以在这里将其浮动到右侧，但是绝对定位可以给我们更多的控制：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using absolute positioning, elements are positioned relative to the nearest
    positioned parent element. In this case, that would be the `task` element. That's
    why we set its `position` property to `relative`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用绝对定位时，元素相对于最近的已定位的父元素进行定位。在这种情况下，那将是`task`元素。这就是为什么我们将其`position`属性设置为`relative`的原因。
- en: '*What just happened?*'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'If you look at the application in the browser, you will notice how much more
    natural our task list looks. The shadows really make the task items pop out from
    the page and give them depth. It makes them the stars of the application. By moving
    the task buttons over to the right out and of the way, we really make the task
    names stand out:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中查看应用程序，你会注意到我们的任务列表看起来更加自然。阴影确实让任务项目从页面中凸显出来，并赋予它们深度。这使它们成为应用程序的亮点。通过将任务按钮移到右侧并且远离，我们真的让任务名称脱颖而出：
- en: '![What just happened?](img/5947_02_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/5947_02_03.jpg)'
- en: 'Resize your browser window and see how the list reacts. Here''s the same layout
    resized smaller, like you might see on a phone or some other mobile device:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 调整浏览器窗口大小，看看列表的反应。这是相同的布局调整为更小的样子，就像你在手机或其他移动设备上看到的一样：
- en: '![What just happened?](img/5947_02_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/5947_02_04.jpg)'
- en: Backgrounds
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: There are a number of new styles for setting the background styles of elements.
    You can now easily draw gradients without using images. You can change the size
    and origin of background images, and even use multiple images in backgrounds.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多新的样式用于设置元素的背景样式。现在您可以轻松地绘制渐变而不使用图像。您可以改变背景图像的大小和原点，甚至在背景中使用多个图像。
- en: 'Gradients draw a background for an element that fades from one color to one
    or more other colors. They give depth to your pages and add a more natural look.
    You can specify two different types of gradients in CSS3: **linear** and **radial**.
    Linear gradients are, well, linear. They flow from one color to another in a straight
    line. Radial gradients spread out from a central point in a radial fashion.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 渐变为元素绘制了从一种颜色到一种或多种其他颜色的背景。它们为您的页面增添了深度，并增添了更加自然的外观。您可以在CSS3中指定两种不同类型的渐变：**线性**和**径向**。线性渐变是线性的。它们从一种颜色直线流向另一种颜色。径向渐变从中心点向外扩散。
- en: Linear gradients
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性渐变
- en: 'Linear gradients are defined using the `linear-gradient` specifier on a `background`
    property. For the simplest form, you specify a start and end color using any of
    the `color` specifiers we discussed earlier in the section on colors, and it will
    draw the gradient from the top to the bottom of the element. The following fades
    from red to blue:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 线性渐变是使用`background`属性上的`linear-gradient`指定符来定义的。对于最简单的形式，你可以使用我们在颜色部分讨论过的任何`color`指定符来指定起始和结束颜色，它会从元素的顶部到底部绘制渐变。以下是从红色到蓝色的渐变：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Although gradients are supported by nearly all browsers at this time, you still
    have to use browser-specific prefixes to get them to work. That means specifying
    them at least four times to hit most browsers. Remember to always specify the
    non-proprietary version last, as shown in the following CSS snippet, so it will
    override the browser-specific version when available:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管渐变目前受到几乎所有浏览器的支持，但您仍然必须使用特定于浏览器的前缀才能使其工作。这意味着至少要指定四次才能覆盖大多数浏览器。请记住，始终将非专有版本指定为最后一个，如下面的CSS片段所示，这样它将在可用时覆盖特定于浏览器的版本：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you want the gradient to start somewhere other than the top, you can specify
    a first parameter that is either the name of the side to start from or the amount
    to rotate it. The sides are `top`, `bottom`, `left`, and `right`. You can specify
    degrees from `-360deg` to `360deg`, or radians from `-6.28rad` to `6.28rad`. `0`
    is the same as `left`. A positive number rotates counter clockwise and a negative
    number clockwise. The following draws a gradient from `left` to `right`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使渐变从顶部开始，可以指定第一个参数，该参数可以是要从其开始的侧面的名称或旋转的量。侧面有`top`、`bottom`、`left`和`right`。您可以指定从`-360deg`到`360deg`的度数，或从`-6.28rad`到`6.28rad`的弧度。`0`与`left`相同。正数逆时针旋转，负数顺时针旋转。以下是从`left`到`right`绘制渐变的示例：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And the following draws a gradient at `45` degrees, which is from the bottom-left
    corner:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是以`45`度角绘制的渐变，即从左下角开始：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You may also add more than two color stops if you like. The following draws
    a gradient at a `45` degree angle from red to blue to green:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，您还可以添加多于两个的颜色停止。以下是从红色到蓝色到绿色的`45`度角渐变：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is how these code snippets will display:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些代码片段的显示方式：
- en: '![Linear gradients](img/5947_02_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![线性渐变](img/5947_02_07.jpg)'
- en: Radial gradients
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 径向渐变
- en: 'Radial gradients are nearly identical to linear gradients in the parameters
    they use. The default is to draw a gradient from the center to the edge of the
    element:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 径向渐变在其使用的参数上几乎与线性渐变相同。默认情况下，从元素的中心到边缘绘制渐变：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can also specify a position such as `linear-gradient` using one of the
    predefined positions or an offset point from the top-left corner for the center
    of the gradient:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定位置，例如使用预定义位置或从顶部左侧角的偏移点作为渐变的中心：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following draws the gradient with the center at `20` pixels over and `20`
    pixels down:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是以距离左上角`20`像素和`20`像素处为中心绘制的渐变：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also add more than two color stops for radial gradients. The following
    draws the gradient with the center at `20` pixels over and `20` pixels down from
    red to blue to green:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以为径向渐变添加多于两个的颜色停止。以下是从红色到蓝色到绿色的渐变，中心位于距左侧`20`像素和下方`20`像素的位置：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is how these code snippets will display:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些代码片段的显示方式：
- en: '![Radial gradients](img/5947_02_08.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![径向渐变](img/5947_02_08.jpg)'
- en: There are many more settings that you can specify for gradients to achieve some
    interesting effects, but they are beyond the scope of this book. If you find that
    creating your own gradients is too hard, you can find an excellent gradient generator
    at [http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以指定许多其他设置来实现一些有趣的渐变效果，但这超出了本书的范围。如果发现自己创建自己的渐变太难，可以在[http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)找到一个出色的渐变生成器。
- en: Background images
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景图片
- en: 'You can set the size of a background image to either a fixed pixel amount or
    a percentage of the area of the element. The image will be scaled to fit in the
    area specified. The `background-size` property takes two values: a horizontal
    size and a vertical size. If you want a background image to fill the entire background
    of an element, you can use the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将背景图像的大小设置为固定像素量或元素区域的百分比。图像将被缩放以适应指定的区域。`background-size`属性接受两个值：水平大小和垂直大小。如果要使背景图像填充元素的整个背景，可以使用以下方法：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can specify multiple background images by separating them with commas.
    The first image in the list will be drawn on top and the last will be drawn on
    the bottom. The following draws two background images:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过用逗号分隔它们来指定多个背景图像。列表中的第一张图像将绘制在顶部，最后一张将绘制在底部。以下是绘制两个背景图像的示例：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Background images](img/5947_02_17.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![背景图片](img/5947_02_17.jpg)'
- en: 'There is also a new `background-origin` property that determines where the
    background image is drawn. The possible values are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个新的`background-origin`属性，用于确定背景图像的绘制位置。可能的值如下：
- en: '`content-box`: Draws the background image only in the content area of an element'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content-box`：仅在元素的内容区域中绘制背景图像'
- en: '`padding-box`: Draws the background image out into the padding area of an element'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding-box`：将背景图像绘制到元素的填充区域'
- en: '`border-box`: Draws the background image all the way out into the border of
    an element'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-box`：将背景图像一直绘制到元素的边框'
- en: 'Here is an example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And here is the output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Background images](img/5947_02_13.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![背景图片](img/5947_02_13.jpg)'
- en: CSS sprites
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS精灵
- en: The next concept we are going to discuss is CSS sprites. This technique isn't
    new to CSS3, but it is an important thing to know how to use when writing HTML5
    applications. CSS sprites allow you to put all of the images for your application
    in a single image file and then slice the individual images out into elements
    using CSS. This technique saves the time and network resources required to download
    multiple images. It is especially useful if your application has a lot of small
    images.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要讨论的概念是CSS精灵。这种技术对于CSS3来说并不新鲜，但在编写HTML5应用程序时，了解如何使用它是很重要的。CSS精灵允许您将应用程序中的所有图像放入单个图像文件中，然后使用CSS将单个图像切片到元素中。这种技术节省了下载多个图像所需的时间和网络资源。如果您的应用程序有很多小图像，这种技术尤其有用。
- en: 'To implement CSS sprites, put all of your images into a single image file,
    known as a **sprite sheet** . Then follow these steps to get an image in the sprite
    sheet into an element on the page:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现CSS精灵，将所有图像放入单个图像文件中，称为**精灵表**。然后按照以下步骤将精灵表中的图像放入页面上的元素中：
- en: Make the element the same size as the image you want to show.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使元素与要显示的图像大小相同。
- en: Set the background image of the element to the sprite sheet image.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将元素的背景图像设置为精灵表图像。
- en: Adjust the background position of the sprite sheet so that the image you want
    to see is at the top-left corner of the element.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整精灵表的背景位置，使要查看的图像位于元素的左上角。
- en: Let's look at an example. The following sprite sheet has 16 images and each
    image is 10 pixels wide and 10 pixels high. First, we set the element's `width`
    and `height` property to `10` pixels. Next, we set the background image to the
    `sprite-sheet.png` sprite sheet. If we were to stop now, we would only get the
    first image showing in our element.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。以下精灵表有16张图片，每张图片宽10像素，高10像素。首先，我们将元素的`width`和`height`属性设置为`10`像素。接下来，我们将背景图像设置为`sprite-sheet.png`精灵表。如果我们现在停下来，我们只会在我们的元素中看到第一张图片。
- en: 'But we want to show the seventh image in our element. So we need to offset
    the background position of the sprite sheet by 20 pixels left and 10 pixels up.
    You must use negative offsets to get the correct image into position because you
    are moving the background image, not the element:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们想要在我们的元素中显示第七张图片。因此，我们需要将精灵表的背景位置向左移动20像素，向上移动10像素。您必须使用负偏移来将正确的图像放置在位置上，因为您正在移动背景图像，而不是元素：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is the result:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![CSS sprites](img/5947_02_12.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![CSS精灵](img/5947_02_12.jpg)'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Think of it as cutting a hole in the web page, then sliding a sprite sheet around
    behind it until the correct image shows though the hole.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将其视为在网页上切割一个洞，然后在洞后面滑动精灵表，直到正确的图像显示在洞中。
- en: Time for action – adding a gradient and button images
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 添加渐变和按钮图像
- en: 'Let''s use what we learned about gradients and background images to make our
    application look more interesting. First, we''ll add a gradient to the background
    of our task list application. We will add a linear gradient to the `<div id="app">`
    element. It will start with our previous background color at the top and fade
    into a dark blue color at the bottom. Notice how we keep the old background color
    as a fallback for browsers that don''t support gradients:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用我们对渐变和背景图像的了解，使我们的应用程序看起来更有趣。首先，我们将在我们的任务列表应用程序的背景中添加一个渐变。我们将在`<div id="app">`元素上添加一个线性渐变。它将从顶部开始，渐变为底部的深蓝色。请注意，我们保留旧的背景颜色作为不支持渐变的浏览器的回退：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is how it would look:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![Time for action – adding a gradient and button images](img/5947_02_09.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 添加渐变和按钮图像](img/5947_02_09.jpg)'
- en: Now let's use CSS sprites to add images to the buttons in our task list application.
    We need images for delete, move up, and move down. Our buttons will be 16x16 pixels,
    so our images will need to be the same size. Since we have three images, we will
    create a sprite sheet that is 48 pixels wide and 16 pixels high. We will put our
    sprite sheet image file named `icons.png` into the `images` folder.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用CSS精灵将图像添加到任务列表应用程序中的按钮。我们需要删除、向上移动和向下移动的图像。我们的按钮将是16x16像素，因此我们的图像也需要是相同的大小。由于我们有三张图片，我们将创建一个48像素宽、16像素高的精灵表。我们将把名为`icons.png`的精灵表图像文件放入`images`文件夹中。
- en: '![Time for action – adding a gradient and button images](img/5947_02_11.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 添加渐变和按钮图像](img/5947_02_11.jpg)'
- en: 'Now let''s open `taskAtHand.css` and add the styling to get the images out
    of the sprite sheet and into the buttons. First, we will change the style that
    applies to all the task buttons to set the size to 16x16 pixels and the background
    image to our sprite sheet. This way, we only have to specify the sprite sheet
    image once and it will apply to all of our buttons:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们打开`taskAtHand.css`并添加样式，将图像从精灵表中提取到按钮中。首先，我们将更改适用于所有任务按钮的样式，将大小设置为16x16像素，并将背景图像设置为我们的精灵表。这样，我们只需要指定一次精灵表图像，它就会应用到我们所有的按钮上：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now all of our buttons will use `icons.png` as their background. All we have
    to do now is set the background positions for each button so they align with the
    correct image:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的按钮都将使用`icons.png`作为它们的背景。我们现在所要做的就是设置每个按钮的背景位置，使它们与正确的图像对齐：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*What just happened?*'
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Take a look at the application in the browser now. We added a gradient so it's
    not so dull and flat anymore. Now it looks modern and chic. We added images to
    the buttons using CSS sprites to extract the images from one sprite sheet image.
    Doesn't this look at lot better with real icons for the buttons?
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中查看应用程序。我们添加了渐变，所以它不再那么沉闷和单调。现在它看起来现代而时尚。我们使用CSS精灵向按钮添加图像，从一个精灵表图像中提取图像。有了真正的按钮图标，这样看起来不是更好吗？
- en: '![What just happened?](img/5947_02_14.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/5947_02_14.jpg)'
- en: Transitions
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡
- en: We have a pretty good looking UI now, but we can make it even better with some
    transitions. CSS3 transitions add animation effects to elements when their styles
    change. For example, if we change the size of an element, it will gradually change
    from smaller size to a larger size thereby providing visual feedback to the user.
    When things change gradually, it catches our eye more than something that just
    appears suddenly on the page.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个相当不错的UI，但是我们可以通过一些过渡效果使其变得更好。CSS3过渡在元素样式改变时为元素添加动画效果。例如，如果我们改变元素的大小，它将逐渐从较小的大小变为较大的大小，从而为用户提供视觉反馈。当事物逐渐改变时，它比突然出现在页面上的东西更容易引起我们的注意。
- en: 'The CSS3 `transition` property allows us to specify transitions on elements.
    It has the following format:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3的`transition`属性允许我们在元素上指定过渡。它的格式如下：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is an explanation of the parameters:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是参数的解释：
- en: '`property`: The CSS property to add a transition to. For example, `width` or
    `color`. Use `all` to apply transitions to all the properties.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property`：要添加过渡的CSS属性。例如，`width`或`color`。使用`all`将过渡应用于所有属性。'
- en: '`duration`: The length of time the transition takes. For example, `0.5s` takes
    half a second to complete the transition.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration`：过渡所需的时间长度。例如，`0.5s`需要半秒钟来完成过渡。'
- en: '`timing-function`: Determines how the transition progresses over the duration:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timing-function`：确定过渡在持续时间内的进展方式：'
- en: '`linear`: The same speed from beginning to end'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linear`：从开始到结束的速度相同'
- en: '`ease`: Starts slow, then speeds up, then ends slow'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease`：开始缓慢，然后加速，然后结束缓慢'
- en: '`ease-in`: Starts slow then speeds up'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-in`：开始缓慢然后加速'
- en: '`ease-out`: Starts fast then slows down'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-out`：开始快然后减慢'
- en: '`ease-in-out`: Eases in and then out'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ease-in-out`：先缓慢，然后加速'
- en: '`cubic-bezier()`: If you don''t like the predefined functions, you can build
    your own'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cubic-bezier()`: 如果你不喜欢预定义的函数，你可以构建自己的'
- en: '`delay`: The amount of time to wait before starting the transition.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delay`: 开始过渡之前等待的时间。'
- en: 'The `cubic-bezier` function takes four parameters which are numbers from `0`
    to `1`. The following produces the same effect as the `ease` function:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`cubic-bezier`函数接受四个参数，这些参数是从`0`到`1`的数字。以下产生与`ease`函数相同的效果：'
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Building your own `cubic-bezier` functions isn't something most people can just
    do in their heads. If you want to explore creating your own timing functions,
    check out [http://cubic-bezier.com/](http://cubic-bezier.com/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自己的`cubic-bezier`函数并不是大多数人可以凭空做到的。如果你想探索创建自己的时间函数，请访问[http://cubic-bezier.com/](http://cubic-bezier.com/)。
- en: 'Like the gradients, transitions are widely supported, but you should still
    use browser-specific prefixes when declaring it:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 与渐变一样，过渡得到了广泛的支持，但在声明时仍应使用特定于浏览器的前缀：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The easiest way to apply a transition is in combination with a CSS `hover`
    selector. The following will fade the background color of an element from white
    to blue in one quarter of a second when the user moves the mouse over it:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 应用过渡的最简单方法是与CSS的`hover`选择器结合使用。当用户将鼠标移动到元素上时，以下内容将使元素的背景颜色从白色渐变到蓝色，用时0.25秒：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Transforms
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换
- en: 'CSS3 transforms provide even more sophisticated effects. There are 2D and 3D
    transformations available. We will discuss some of the 2D transformations here.
    Transforms can be used with transitions to provide some interesting effects. Here
    is the basic form of the `transform` property:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3变换提供了更复杂的效果。有2D和3D变换可用。我们将在这里讨论一些2D变换。变换可以与过渡一起使用，提供一些有趣的效果。这是`transform`属性的基本形式：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'There are a few different 2D `transform` functions. The first we''ll look at
    is `translate()`. It moves an element from its current position to a new position.
    It takes x and y positions as parameters. You can use negative values to move
    up and to the left. The following would move an element `10` pixels right and
    `25` pixels up:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些不同的2D`transform`函数。我们首先看的是`translate()`。它将一个元素从当前位置移动到一个新位置。它以x和y位置作为参数。你可以使用负值向上和向左移动。以下将使一个元素向右移动`10`像素，向上移动`25`像素：
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `rotate()` function rotates an element by a given amount. The rotation
    amount can be specified in degrees or radians. Use negative values to rotate counter
    clockwise, positive for clockwise:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate()`函数按给定的角度旋转元素。旋转量可以用度或弧度来指定。使用负值逆时针旋转，正值顺时针旋转：'
- en: '[PRE34]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `scale()` function adjusts the size of an element by some factor. It takes
    one or two parameters. If only one parameter is provided, it scales by that amount.
    If two parameters are specified, it scales the horizontal and vertical axes separately.
    The following example doubles the width and halves the height of an element:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale()`函数通过某个因子调整元素的大小。它接受一个或两个参数。如果只提供一个参数，它将按该量进行缩放。如果指定了两个参数，它将分别缩放水平和垂直轴。以下示例将元素的宽度加倍，高度减半：'
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The last one we''ll look at is the `skew()` function. This function skews,
    or stretches an element. It takes two parameters which are the amounts to rotate
    the x and y axes by. Angles are specified the same as the `rotate()` function:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下`skew()`函数。这个函数扭曲或拉伸一个元素。它接受两个参数，即旋转x和y轴的量。角度的指定方式与`rotate()`函数相同：
- en: '[PRE36]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Transformations also require browser-specific prefixes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 变换还需要特定于浏览器的前缀：
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is how transformations would look like in a browser:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是变换在浏览器中的样子：
- en: '![Transforms](img/5947_02_10.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Transforms](img/5947_02_10.jpg)'
- en: Time for action – effects in action
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-效果在行动
- en: Let's add some effects to the task list. First, we will add the ability to select
    a task in the list. When a task is clicked, it will grow in size and get a colored
    border so it's easy to tell that it is selected. We will also add a hover effect
    to the tasks so that when the user moves the mouse over a task, the task's action
    buttons are shown. When the mouse moves off of a task, the buttons will fade back
    out. You can find the code for this section in `chapter2/example2.2`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给任务列表添加一些效果。首先，我们将添加选择列表中任务的能力。当点击一个任务时，它将增大并获得一个有颜色的边框，这样就很容易看出它被选中了。我们还将为任务添加悬停效果，这样当用户将鼠标移动到一个任务上时，任务的操作按钮就会显示出来。当鼠标移出任务时，按钮将淡出。你可以在`chapter2/example2.2`中找到这一部分的代码。
- en: 'The first thing we need to do is go back to `taskAtHand.js` and add a `click`
    event handler to the `task` element after it is created in the `addTaskElement()`
    method:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是回到`taskAtHand.js`，并在`addTaskElement()`方法中创建`task`元素后添加一个`click`事件处理程序：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It calls the `onSelectTask()` method when a task is clicked. In this method
    we will mark a `task` element as selected by giving it a class name of `selected`.
    We will also remove the `selected` class from the previously selected task element:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击一个任务时，它调用`onSelectTask()`方法。在这个方法中，我们将通过给它一个`selected`类名来标记一个`task`元素为选定。我们还将从先前选定的任务元素中删除`selected`类：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now let''s add a style in `taskAtHand.css` for the selected task. We will increase
    the padding to make the element bigger, add a border to highlight it, and change
    the background color:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`taskAtHand.css`中为选定的任务添加样式。我们将增加填充以使元素更大，添加边框以突出显示它，并改变背景颜色：
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'That''s nice, but we can make it better by adding a transition. We will add
    the `transition` property to the `.task` class. It will ease in all property changes
    over one quarter of a second. This will provide some nice visual feedback to the
    user when they select a task:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但我们可以通过添加过渡来使它更好。我们将在`.task`类中添加`transition`属性。它将在0.25秒内平稳地改变所有属性。当用户选择一个任务时，这将为用户提供一些良好的视觉反馈：
- en: '[PRE41]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'While we''re at it, let''s add one more transition. We will hide the task action
    buttons until the user moves the mouse over a task or selects a task. To do that,
    all we need to do is add a little more CSS. First, we will hide the task buttons''
    container element by setting its `opacity` property to `0` to make it transparent.
    Then we add the same `transition` properties as we did previously:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在此期间，让我们再添加一个过渡效果。我们将隐藏任务操作按钮，直到用户将鼠标移动到任务上或选择任务。为此，我们只需要添加一些额外的CSS。首先，我们将通过将其`opacity`属性设置为`0`来隐藏任务按钮的容器元素，使其变为透明。然后，我们添加与之前相同的`transition`属性：
- en: '[PRE42]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now we add a `hover` selector for the `task` element that sets the `opacity`
    property to `1` to make it opaque. This, along with the transition, will make
    the task buttons appear to fade in when the user hovers over a task. We also add
    a selector to make the task buttons show up when a task is selected (the second
    line in the following snippet):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为`task`元素添加一个`hover`选择器，将`opacity`属性设置为`1`，使其不透明。这个选择器和过渡一起，将使任务按钮在用户悬停在任务上时出现淡入效果。我们还添加了一个选择器，使任务按钮在选择任务时显示出来（以下片段中的第二行）：
- en: '[PRE43]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Before CSS3, you could do the same thing with JavaScript using the jQuery `fadeIn()`
    and `fadeOut()` methods along with some mouse events, but it required considerably
    more code.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3之前，您可以使用jQuery的`fadeIn()`和`fadeOut()`方法以及一些鼠标事件来使用JavaScript做同样的事情，但这需要更多的代码。
- en: '*What just happened?*'
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We added some CSS3 transitions to the task list to make the task item buttons
    fade in and out and make selected task items grow larger when clicked. We''ve
    seen that with just a few lines of CSS we can add some nice effects to our applications.
    Here''s what our task list looks like now with **Task 2** selected:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在任务列表中添加了一些CSS3过渡效果，使任务项目按钮淡入淡出，并在单击时使选定的任务项目变大。我们已经看到，只需几行CSS代码，我们就可以为我们的应用程序添加一些不错的效果。现在我们的任务列表看起来是这样的，**Task
    2**被选中：
- en: '![What just happened?](img/5947_02_15.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/5947_02_15.jpg)'
- en: Dynamic stylesheets
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态样式表
- en: Let's add a new feature to our application to allow the user to select a color
    scheme, or theme, so they can customize the look and feel of the application.
    We can change the look of a web page by dynamically loading CSS files to override
    existing styles in our default stylesheet. To implement this, we will add a drop-down
    list of themes to our application that the user can choose from. When they change
    the theme, it will change the stylesheet which will change the color of the page.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的应用程序添加一个新功能，允许用户选择颜色方案或主题，以便他们可以自定义应用程序的外观和感觉。我们可以通过动态加载CSS文件来改变网页的外观，以覆盖默认样式表中的现有样式。为了实现这一点，我们将在应用程序中添加一个主题的下拉列表供用户选择。当他们改变主题时，它将改变样式表，从而改变页面的颜色。
- en: Time for action – adding a theme selector
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-添加主题选择器
- en: 'To start with, we need a place to put the theme selector. So let''s add a toolbar
    to the task list application''s markup in `taskAtHand.html`. We will insert it
    between the `<header>` and `<div id="main">` elements. The toolbar will contain
    a `<label>` and a `<select>` drop-down list. The list will contain four different
    color themes: `blue`, `green`, `magenta`, and `red`. You can find the code for
    this section in `chapter2/example2.3`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个放置主题选择器的地方。因此，让我们在`taskAtHand.html`中的任务列表应用程序的标记中添加一个工具栏。我们将它插入在`<header>`和`<div
    id="main">`元素之间。工具栏将包含一个`<label>`和一个`<select>`下拉列表。列表将包含四种不同的颜色主题：`blue`、`green`、`magenta`和`red`。您可以在`chapter2/example2.3`中找到此部分的代码：
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now let''s style up the toolbar. We will make the font a little smaller than
    the rest of the page and set the background color as black with some transparency
    so the color behind it bleeds through:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们设计工具栏。我们将使字体比页面的其他部分稍微小一些，并将背景颜色设置为黑色，并带有一些透明度，以便它后面的颜色透过来：
- en: '[PRE45]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, we have to implement the different themes. So let''s create a few new
    CSS files, one for each theme. We will put them in a folder named `themes` to
    keep them grouped together. The CSS files will have the same names as the `<option>`
    values: `blue.css`, `green.css`, `magenta.css`, and `red.css`. Let''s take a look
    at `green.css`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须实现不同的主题。因此，让我们创建一些新的CSS文件，每个主题一个文件。我们将把它们放在一个名为`themes`的文件夹中，以便将它们分组在一起。CSS文件将与`<option>`值具有相同的名称：`blue.css`、`green.css`、`magenta.css`和`red.css`。让我们来看一下`green.css`：
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Starting at the top we override the background gradients for the `app` element
    to make them a green color instead of blue. We also change the `header` and `footer`
    elements to make them green too. The other CSS files will be exactly the same
    as this one except they will have different colors.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部开始，我们覆盖`app`元素的背景渐变，使它们成为绿色，而不是蓝色。我们还将`header`和`footer`元素改为绿色。其他CSS文件将与此文件完全相同，只是它们的颜色会有所不同。
- en: 'Now let''s add a stylesheet `<link>` element to the `<header>` element of the
    HTML file for the theme CSS file. Since the blue theme is the default, we will
    set it to load `blue.css`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在HTML文件的`<header>`元素中添加一个样式表`<link>`元素，用于主题CSS文件。由于蓝色主题是默认的，我们将设置它加载`blue.css`：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Notice that we include the theme stylesheet after the base one. That's what
    will allow us to override the default styles. Also note that we give the `<link>`
    element an `ID` attribute, so we will be able to get to it in our JavaScript later
    on.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在基本样式表之后包含主题样式表。这将允许我们覆盖默认样式。还要注意，我们给`<link>`元素一个`ID`属性，这样我们以后就可以在JavaScript中访问它。
- en: 'The rest of the code we need to add is in `taskAtHand.js`. First, we will add
    a `change` event handler for the theme selector in the `TaskAtHand.start()` method:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加的其余代码在`taskAtHand.js`中。首先，我们将在`TaskAtHand.start()`方法中为主题选择器添加一个`change`事件处理程序：
- en: '[PRE48]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'When the user chooses a new theme, it will call the `onChangeTheme()` private
    method:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择新主题时，它将调用`onChangeTheme()`私有方法：
- en: '[PRE49]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This method gets the selected option from the list by getting its `<option>`
    elements and then finding the selected option using jQuery's `:selected` selector
    inside the `filter()` method. Then it calls the `setTheme()` method, which we
    will implement next. Lastly, we save the selected theme to `localStorage` so we
    can set it the next time the user comes back to the application.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法通过获取其`<option>`元素并使用jQuery的`:selected`选择器在`filter()`方法内找到选定的选项，从列表中获取所选选项。然后调用`setTheme()`方法，接下来我们将实现。最后，我们将所选主题保存到`localStorage`，这样下次用户返回应用程序时就可以设置它。
- en: 'The `setTheme()` method takes the theme name as a parameter. It gets the `<link
    id="theme-style">` element and changes its `href` attribute to the new stylesheet''s
    URL:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTheme()`方法接受主题名称作为参数。它获取`<link id="theme-style">`元素，并将其`href`属性更改为新样式表的URL：'
- en: '[PRE50]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: When this happens, the page will load the new stylesheet and apply its styles
    over the existing ones. And just like that, the page changes color.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当这发生时，页面将加载新的样式表，并将其样式应用于现有样式。就像这样，页面的颜色发生了变化。
- en: 'Wait, we''re not done yet. Remember how we saved the theme to `localStorage`?
    Now we have to get it back out when the user returns to our application. We will
    create a `loadTheme()` method to do that:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，我们还没有完成。还记得我们是如何将主题保存到`localStorage`的吗？现在当用户返回我们的应用程序时，我们需要将其取出。我们将创建一个`loadTheme()`方法来做到这一点：
- en: '[PRE51]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This method gets the theme name from `localStorage`. If it finds one, it calls
    `setTheme()` to set it. Then it selects that theme in the drop-down by finding
    the `<option>` in the list that has the theme name for its value, and sets the
    `selected` attribute on it. The final thing to do is add a call to `loadTheme()`
    from the `start()` method, and we're done.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法从`localStorage`获取主题名称。如果找到了一个，它就调用`setTheme()`来设置它。然后通过在列表中找到具有其值为主题名称的`<option>`，并在其上设置`selected`属性，来选择该主题。最后一件事是从`start()`方法中添加对`loadTheme()`的调用，然后我们就完成了。
- en: Note
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The style changes for our theme were pretty simple, but you could completely
    change the look and feel of your application using this technique.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主题样式更改非常简单，但是您可以完全改变应用程序的外观和感觉使用这种技术。
- en: '*What just happened?*'
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We added a theme selector that changes the theme stylesheet, which causes the
    page to use different colors to draw the background. We saved the selected theme
    to local storage so the settings are remembered when the user returns to the application.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个主题选择器，可以更改主题样式表，这会导致页面使用不同的颜色来绘制背景。我们将所选主题保存到本地存储中，因此当用户返回应用程序时，设置将被记住。
- en: Filling the window
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充窗口
- en: Before we leave the chapter on CSS, there is one more thing we will restyle.
    Let's make the application so that it fills the entire space of the window. Right
    now as the list grows, the background gradient grows and the footer moves down.
    It would be nicer if the gradient covered the entire window and the footer was
    always at the bottom.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们离开CSS章节之前，还有一件事情我们需要重新设计。让我们使应用程序填满整个窗口的空间。现在随着列表的增长，背景渐变也在增长，页脚也在下移。如果渐变覆盖整个窗口，页脚始终位于底部会更好。
- en: Time for action – expanding the application
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-扩展应用程序
- en: 'We can fill the browser window by using absolute positioning. Let''s add the
    following to the styles for the `<div id="app">` element:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用绝对定位来填充浏览器窗口。让我们为`<div id="app">`元素的样式添加以下内容：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: First, it sets positioning for the element to absolute so that we can set the
    position of the element to whatever we want. Then we set all of the `position`
    properties to `0`. This stretches the element so that it fills the entire space
    of the window. Lastly, we set the `overflow` property to `auto`. This will make
    a scrollbar appear and the gradient extend below the bottom of the window if the
    list of tasks goes beyond the height of the window.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它将元素的定位设置为绝对定位，这样我们就可以将元素的位置设置为我们想要的位置。然后我们将所有的`position`属性设置为`0`。这样就可以拉伸元素，使其填满整个窗口空间。最后，我们将`overflow`属性设置为`auto`。这将使滚动条出现，并且如果任务列表超出窗口的高度，渐变会延伸到窗口底部以下。
- en: 'We also need to reposition the footer so it sticks to the bottom of the window.
    We can do that the same way, by setting `position` to `absolute` and `bottom`
    to `0`. Notice that we didn''t set `right` to `0`, so the footer doesn''t span
    the entire width. Otherwise, it might interfere with the task list:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要重新定位页脚，使其固定在窗口底部。我们可以通过将`position`设置为`absolute`和`bottom`设置为`0`来实现。请注意，我们没有将`right`设置为`0`，因此页脚不会占据整个宽度。否则，它可能会干扰任务列表：
- en: '[PRE53]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '*What just happened?*'
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We expanded the main application element to take up the entire space of the
    browser window and moved the footer to the bottom. Let''s see how our app now
    looks in the browser:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了主应用程序元素，使其占据整个浏览器窗口的空间，并将页脚移动到底部。让我们看看我们的应用程序现在在浏览器中的样子：
- en: '![What just happened?](img/5947_02_16.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/5947_02_16.jpg)'
- en: Have a go hero
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看
- en: Think up and implement some more themes. Use some more of the CSS3 features
    we learned such as radial gradients, background images, or even some box shadows
    to produce some interesting-looking themes.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 想出并实现更多的主题。使用我们学到的一些CSS3特性，如径向渐变、背景图片，甚至一些盒子阴影来制作一些看起来有趣的主题。
- en: Pop quiz
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验
- en: Q1\. How many color stops can a gradient have?
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 渐变可以有多少个颜色停？
- en: One
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个
- en: Two
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 二
- en: Three
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三
- en: Any number
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任意数量
- en: Q2\. What does a transition do?
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 过渡是什么作用？
- en: Transitions CSS properties from one value to another
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将CSS属性从一个值过渡到另一个值
- en: Transitions an element from one type into another
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将元素从一种类型过渡到另一种类型
- en: Transitions from one class to another
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个类过渡到另一个类
- en: Transitions from one view to another
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个视图过渡到另一个视图
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about some of the new CSS3 features that can be
    used to make your applications pop and provide a lot of visual feedback to the
    user. We updated our tasklist application by adding rounded corners and shadows
    to the task elements, and adding images to the task tool buttons. We added a gradient
    to the background and a theme selector to allow the user to change the color scheme.
    We also added some transitions to make changes look more natural.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一些新的CSS3功能，可以用来使您的应用程序更加突出，并为用户提供大量的视觉反馈。我们通过向任务元素添加圆角和阴影，并向任务工具按钮添加图像来更新了我们的任务列表应用程序。我们为背景添加了渐变和主题选择器，允许用户更改颜色方案。我们还添加了一些过渡效果，使变化看起来更加自然。
- en: We covered the following concepts in this chapter.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了以下概念。
- en: How to define colors with transparencies in CSS3
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在CSS3中定义带有透明度的颜色
- en: How to give elements rounded corners
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何给元素添加圆角
- en: How to add shadows to elements and text
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向元素和文本添加阴影
- en: How to create linear and radial gradients
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建线性和径向渐变
- en: How to use CSS3 transitions and transforms to create visual effects
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS3过渡和变换来创建视觉效果
- en: How to use CSS sprites to reduce the network footprint of your applications
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS精灵来减少应用程序的网络印记
- en: How to dynamically load stylesheets
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何动态加载样式表
- en: How to make your application fill the entire window
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使您的应用程序填满整个窗口
- en: One last thing before we go on. Let me leave you with a word of warning. Just
    because CSS3 has all of these great effects, it doesn't mean you have to use them
    all in your application. Every text doesn't need a shadow, you don't need to make
    your backgrounds have rainbow-colored gradients, and every element doesn't need
    to be rotated 30 degrees. Judicious use of these effects will make your application
    look professional; overuse will make them look comical.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我给你一个警告。仅仅因为CSS3拥有所有这些出色的效果，并不意味着你必须在应用程序中全部使用它们。每个文本并不都需要阴影，你不需要让你的背景具有彩虹般的渐变，也不需要让每个元素旋转30度。谨慎地使用这些效果将使您的应用程序看起来更专业；过度使用将使它们看起来滑稽。
- en: In the next chapter, we will take our task list application to the next level
    by adding a details section to each task that uses some of the new HTML5 input
    types. We will also learn how to use custom data attributes to bind the data model
    to input elements.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过为每个任务添加一个详细部分，使用一些新的HTML5输入类型，将我们的任务列表应用程序提升到一个新的水平。我们还将学习如何使用自定义数据属性将数据模型绑定到输入元素。
