- en: Chapter 1. Responsive Elements and Media
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。响应式元素和媒体
- en: 'In this chapter, you will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Resizing an image using percent width
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用百分比宽度调整图像大小
- en: Responsive images using the cookie and JavaScript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cookie和JavaScript创建响应式图像
- en: Making your video respond to your screen width
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使您的视频响应屏幕宽度
- en: Resizing an image using media queries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询调整图像大小
- en: Changing your navigation with media queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询更改您的导航
- en: Making a responsive padding based on size
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于尺寸创建响应式填充
- en: Making a CSS3 button glow for a loading element
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使CSS3按钮在加载元素上发光
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The responsiveness website design and media is one of the most exciting things
    to happen to web development since ASCII art appeared on bulletin boards back
    when I was a school boy. The new cool features of HTML5, CSS3, and jQuery have
    brought new life to the old web in ways that have brought back the fun and really
    gets the Web audiences excited for using your applications. This chapter contains
    several recipes that will help you create responsive HTML elements and different
    media.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网站设计和媒体是自从我还是学生时ASCII艺术出现在公告板上以来，对Web开发最激动人心的事情之一。HTML5、CSS3和jQuery的新功能为旧网络带来了新生命，以一种让人兴奋的方式为您的应用程序带来了乐趣。本章包含了几个配方，将帮助您创建响应式HTML元素和不同的媒体。
- en: Some recipes are easy and some are more challenging. All of the code used for
    the **responsive web design** elements is provided inside the book, therefore
    nothing inside will be impossible to accomplish. Each and all of the responsive
    web design recipes will help you optimize your website's presentation to create
    an amazing responsive web experience for your audience no matter what device type
    or size you are using.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些配方很简单，有些则更具挑战性。**响应式网页设计**元素所使用的所有代码都在本书中提供，因此没有什么是不可能完成的。所有响应式网页设计配方都将帮助您优化您的网站呈现，为您的观众创造一个令人惊叹的响应式网页体验，无论您使用何种设备类型或尺寸。
- en: Resizing an image using percent width
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用百分比宽度调整图像大小
- en: This method relies on client-side coding for resizing a large image. It serves
    only one image to the client and asks it to render the image according to the
    size of the browser's window. This is usually the preferable method when you are
    confident that the clients have the bandwidth to download the image without causing
    the page to load slowly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法依赖于客户端编码来调整大图像的大小。它只为客户端提供一张图片，并要求根据浏览器窗口的大小来渲染图像。当您确信客户端有带宽可以下载图像而不会导致页面加载缓慢时，这通常是首选的方法。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First you will need an image. To find a high-quality image, use Google Image
    Search. A search for `robots`, for example, the search gives me 158,000,000 results,
    which is pretty good. However, what I really want is a large image, so I click
    on **Search tools**, and then click on **Any Size**, which I change to **Large**.
    I still have 4,960,000 images to choose from.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要一张图片。要找到高质量的图像，请使用Google图像搜索。例如搜索`robots`，搜索结果给我158,000,000个结果，这相当不错。但是，我真正想要的是一张大图像，所以我点击**搜索工具**，然后点击**任何尺寸**，将其更改为**大**。我仍然有496万张图片可供选择。
- en: The image should be resized to match the largest scale viewable. Open it in
    your image-editing software. If you don't have an image-editing software already,
    there are many free ones, go get one. Gimp is a powerful image-editing software
    and it's open source, or free to download. Go to [http://www.gimp.org](http://www.gimp.org)
    to get this powerful open source image-editing software.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图像应调整大小以匹配最大的可视比例。在图像编辑软件中打开它。如果您还没有图像编辑软件，有许多免费的软件，去下载一个。Gimp是一款功能强大的图像编辑软件，它是开源的，或者可以免费下载。访问[http://www.gimp.org](http://www.gimp.org)获取这款功能强大的开源图像编辑软件。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Once you have your image-editing software, open the image in it and change the
    image's width to 300px. Save your new image and then move or upload the image
    to your web directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了图像编辑软件，打开图像并将图像的宽度更改为300px。保存新图像，然后将图像移动或上传到您的网站目录。
- en: Your HTML should contain your image and some text to demonstrate the responsive
    effect. If you do not have time to write your life story, you can go back to the
    Internet and get some sample text from an Ipsum generator. Go to [http://www.lipsum.com](http://www.lipsum.com)
    and generate a paragraph of Ipsum text.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的HTML应包含图像和一些文本，以演示响应效果。如果您没有时间写自己的生活故事，可以回到互联网上从Ipsum生成器获取一些示例文本。访问[http://www.lipsum.com](http://www.lipsum.com)生成一个Ipsum文本段落。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your CSS should include a class for your paragraph and one for your image and
    an image wrapper. Float the paragraph to the left and give it a width of `60%`,
    and the image wrapper with a width of `40%`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您的CSS应包括一个段落类和一个图像类和一个图像包装器。将段落浮动到左侧，并给它一个宽度为`60%`，图像包装器的宽度为`40%`。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates a fluid layout, but does not yet do anything to create a responsive
    image. The image will stay at a static width of 300px until you add the following
    CSS. Then, add a new class to the CSS for the image. Assign it a `max-width` value
    of `100%`. This allows the width to adjust to the browser width changes. Next,
    add a dynamic `height` property to the class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个流体布局，但尚未做任何事情来创建一个响应式图像。图像将保持静态宽度为300px，直到您添加以下CSS。然后，在CSS中为图像添加一个新类。为其分配`max-width`值为`100%`。这允许宽度根据浏览器宽度的变化而调整。接下来，为该类添加一个动态的`height`属性。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This creates an image that responds to the browser window's width with an optimized
    version of that image for the audience.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个根据浏览器窗口宽度响应的图像，并为观众提供优化版本的图像。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接发送到您的电子邮件。
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The `responsive` property of the image CSS forces it to take 100 percent of
    its parent element. When the parent element''s width changes, the image changes
    to fill in that width. The `height: auto` property acts to preserve the aspect
    ratio of the image.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '图像CSS的`responsive`属性强制其占据其父元素的100％。当父元素的宽度发生变化时，图像会填充该宽度。`height: auto`属性用于保持图像的纵横比。'
- en: See also
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Responsive images using the cookie and JavaScript* recipe
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用cookie和JavaScript的响应式图像*方法'
- en: The *Making a responsive padding based on size* recipe
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于大小创建响应式填充的方法*'
- en: Responsive images using the cookie and JavaScript
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cookie和JavaScript的响应式图像
- en: A responsive image's width can be delivered through complicated server logic.
    Sometimes because of the requirements you cannot achieve the desired results through
    the easiest method. The percent-width method relies on the client side for image
    resizing of a large image file. This method provides a server-side delivery of
    the properly sized image you request. It may reduce the server load and bandwidth
    and help you with long loading, if you are concerned with slow loading affecting
    the performance of your website.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式图像的宽度可以通过复杂的服务器逻辑进行交付。有时，由于要求，您无法通过最简单的方法实现所需的结果。百分比宽度方法依赖于客户端对大型图像文件进行调整大小。此方法提供了服务器端交付您请求的适当大小的图像。它可能减少服务器负载和带宽，并帮助您解决长时间加载的问题，如果您担心加载缓慢会影响您网站的性能。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: These methods require your server to perform some sort of logic function on
    it. Firstly, it requires PHP on your server. It also requires you to create three
    different sized versions of the image and serve them to the client as requested.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法需要您的服务器对其执行某种逻辑功能。首先，它需要您的服务器上有PHP。它还要求您创建图像的三个不同大小的版本，并根据客户端的请求将它们提供给客户端。
- en: How to do it…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: The JavaScript is simple. It creates a cookie based on your device's screen
    dimensions. When the client makes a request to the server for an image, it fires
    the PHP code to deliver the appropriate image.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript很简单。它基于您设备的屏幕尺寸创建一个cookie。当客户端请求服务器的图像时，它会触发PHP代码以传递适当的图像。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, on your server, create an `images` folder in the web directory and create
    a PHP file (`index.php`) with the following code in it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的服务器上，在Web目录中创建一个`images`文件夹，并在其中创建一个名为`index.php`的PHP文件，其中包含以下代码：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now with your image-editing software, open your large image and create two smaller
    versions of it. If the original version is 300px, then make the next two copies
    200px and 100px. Then, name them `robot.png`, `robot-med.png`, and `robot-low.png`
    respectively. Upload these three images into the `images` folder.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用您的图像编辑软件打开您的大图像，并创建两个较小的版本。如果原始版本是300px，则将下面的两个副本分别制作为200px和100px。然后，分别将它们命名为`robot.png`，`robot-med.png`和`robot-low.png`。将这三个图像上传到`images`文件夹中。
- en: 'Last, but not least, put the following HTML file in your server''s document
    root:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在您服务器的文档根目录中放入以下HTML文件：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can see the recipe in action in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下截图中看到该方法的实际效果：
- en: '![How to do it…](img/5442OT_01_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_01_01.jpg)'
- en: While this method is limited to delivering a specific image for each screen
    size, and is not fluidly dynamic, it does provide the same functionality on the
    server side as a CSS media query. You can style the served image with CSS or animate
    it with JavaScript. It can be used with a combination of methods to provide responsive
    content.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此方法仅限于为每个屏幕尺寸提供特定图像，并且不是流动动态的，但它在服务器端提供了与CSS媒体查询相同的功能。您可以使用CSS对提供的图像进行样式设置，或者使用JavaScript对其进行动画处理。它可以与各种方法结合使用，以提供响应式内容。
- en: The code for this recipe was originally created by the clever folks at [http://www.html.it/articoli/responsive-images-con-i-cookie/](http://www.html.it/articoli/responsive-images-con-i-cookie/).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的代码最初由[http://www.html.it/articoli/responsive-images-con-i-cookie/](http://www.html.it/articoli/responsive-images-con-i-cookie/)的聪明人创建。
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The HTML file first creates a cookie describing your device's screen dimensions.
    When the image element calls the PHP file it works like an `include` statement
    in PHP. The PHP file first checks for the file to exist, then reads the cookie
    for the screen width, and delivers the appropriate-sized version of the image.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: HTML文件首先创建一个描述您设备屏幕尺寸的cookie。当图像元素调用PHP文件时，它的工作原理类似于PHP中的`include`语句。PHP文件首先检查文件是否存在，然后读取屏幕宽度的cookie，并传递图像的适当大小版本。
- en: Making your video respond to your screen width
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使您的视频响应您的屏幕宽度
- en: The streaming of video can also be responsive. You can easily embed an HTML5
    video in your page and make it responsive. The `video` tag easily supports using
    a percent width. However, it requires that you have the video source on your website's
    host. If you have this available, this is easy.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 视频的流媒体也可以是响应式的。您可以轻松地在页面中嵌入HTML5视频并使其响应式。`video`标签很容易支持使用百分比宽度。但是，这需要您在您网站的主机上拥有视频源。如果您有这个可用，这很容易。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, using a video-hosting site, such as YouTube or Vimeo, has many advantages
    over hosting it yourself. First, there is the bandwidth issue, you may have bandwidth
    or disk space limits on your hosting server. Additionally, video-hosting sites
    make the upload conversion to a usable web video surprisingly easy, compared to
    using only your own resources.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用视频托管网站，如YouTube或Vimeo，与自己托管它相比有很多优势。首先，存在带宽问题，您的托管服务器可能有带宽或磁盘空间限制。此外，视频托管网站使上传转换为可用的网络视频变得非常容易，而不仅仅是使用您自己的资源。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The video-hosting sites allow you to embed an iFrame or object code snippet
    in your page to stream the video on your site. This won't work inside the `video`
    tag. So, to make it responsive, there is a more complex, but still easy method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 视频托管网站允许您在页面中嵌入iFrame或对象代码片段以在您的网站上流式传输视频。这不适用于`video`标签内。因此，为了使其响应式，有一种更复杂但仍然简单的方法。
- en: How to do it…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Wrap the video-source snippet in an HTML containing the `div` element and give
    it a 50 to 60 percent padding on the bottom and relative positions. Then give
    its child element, the video iFrame object, a `100%` width and `100%` height,
    and an `absolute` position. This makes the iFrame object completely fill in the
    parent element.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将视频源片段包装在包含`div`元素的HTML中，并在底部给它50到60％的填充和相对位置。然后给它的子元素，视频iFrame对象，一个`100%`的宽度和`100%`的高度，并且一个`absolute`位置。这样可以使iFrame对象完全填充父元素。
- en: 'The following is the HTML code that uses an `iframe` tag to get a video from
    Vimeo:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`iframe`标签从Vimeo获取视频的HTML代码：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the HTML code using the older YouTube object with markup:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用旧版YouTube对象的HTML代码：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Both video types use the same CSS:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 两种视频类型使用相同的CSS：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You might not want the video to take up the entire width of the page. In this
    case, you can limit the width of the video using `width` and `max-width`. Then,
    wrap the `video-wrap` element with the another `div` element and assign a fixed
    `width` value and `max-width:100%`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不希望视频占据整个页面的宽度。在这种情况下，您可以使用`width`和`max-width`限制视频的宽度。然后，用另一个`div`元素包装`video-wrap`元素，并分配一个固定的`width`值和`max-width:100%`。
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This recipe will work on all modern browsers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法适用于所有现代浏览器。
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This method is called Intrinsic Ratios for Videos, created by Thierry Koblentz
    on A List Apart. You wrap the video inside an element that has an intrinsic aspect
    ratio, and then give the video an absolute position. This locks the aspect ratio,
    while allowing the size to be fluid.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法被称为视频的固有比率，由Thierry Koblentz在A List Apart上创建。您将视频包裹在具有固有纵横比的元素内，然后给视频一个绝对位置。这样可以锁定纵横比，同时允许尺寸是流体的。
- en: Resizing an image using media queries
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体查询调整图像大小
- en: The media query is another useful and highly customizable method for responsive
    images. This is different than responsive fluid width achieved by the percent-width
    method. Your design may require some specific image widths for different screen
    size ranges and a fluid width would break your design.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询是另一种有用且高度可定制的响应式图像方法。这与通过百分比宽度方法实现的响应式流体宽度不同。您的设计可能需要不同屏幕尺寸范围的特定图像宽度，而流体宽度会破坏您的设计。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This method only requires one image, and makes the client's browser resize the
    image instead of the server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法只需要一个图像，并且使客户端的浏览器重新调整图像而不是服务器。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The HTML code is simple, using the standard image tag, create an image element,
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代码很简单，使用标准图像标签，创建一个图像元素，如下所示：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To start with a simple version, create a media query that will detect the browser
    window's size and deliver a larger image for browser screens larger than `1024px`,
    and a smaller image for smaller browser windows. First the media query, it looks
    for the media type `screen`, and then the screen size. When the media query is
    satisfied the browser will render the CSS inside the brackets.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从一个简单版本开始，创建一个媒体查询，以检测浏览器窗口的大小，并为大于`1024px`的浏览器屏幕提供更大的图像，为较小的浏览器窗口提供较小的图像。首先是媒体查询，它寻找媒体类型`screen`，然后是屏幕大小。当媒体查询满足时，浏览器将呈现大括号内的CSS。
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, add a class to your image tag. The class will respond differently in different
    media queries, as shown in the following code line:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为图像标签添加一个类。该类将在不同的媒体查询中有不同的响应，如下面的代码行所示：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Adding the CSS class to each media query with a different size will make the
    browser render the desired image size to each differently sized browser window.
    The media query can coexist with other CSS classes. Then, outside of the media
    queries, add a CSS class for the image with `height:auto`. This will work for
    both media queries with only adding one line of CSS.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个媒体查询添加不同大小的CSS类将使浏览器为每个不同大小的浏览器窗口呈现所需的图像大小。媒体查询可以与其他CSS类共存。然后，在媒体查询之外，添加一个带有`height:auto`的图像的CSS类。这将适用于只添加一行CSS的两个媒体查询。
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To make the image respond to multiple ranges you can combine the `max-width`
    and `min-width` media queries. To specify an image size for browser windows, sized
    between `1024px` and `1280px`, add a media query for screen, `1024px` as `min-width`,
    and `1280px` as `max-width`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使图像响应多个范围，可以结合`max-width`和`min-width`媒体查询。要为浏览器窗口大小在`1024px`和`1280px`之间的屏幕添加媒体查询，添加一个媒体查询为屏幕，`1024px`为`min-width`，`1280px`为`max-width`。
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can specify many different image sizes for many different browser window
    sizes with the media query method.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用媒体查询方法可以为许多不同的浏览器窗口大小指定许多不同的图像大小。
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The media query of CSS3 gives your CSS logical conditions based on the browser's
    viewport properties, and can render different styles based on the browser's window
    properties. This recipe takes advantage of this by setting a different image width
    for many different browser's window sizes. Thus delivering a responsive image
    size, you can control with a high degree of granularity.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3的媒体查询根据浏览器的视口属性给出您的CSS逻辑条件，并且可以根据浏览器的窗口属性呈现不同的样式。这个方法利用了这一点，通过为许多不同的浏览器窗口大小设置不同的图像宽度。因此，可以提供响应式图像大小，并且可以以高度精细的方式进行控制。
- en: Changing your navigation with media queries
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体查询更改导航
- en: The media query can do more than just resizing images. You can use the media
    query to deliver a much more dynamic web page to your viewers. You can display
    a responsive menu based on different screen sizes using media queries.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询不仅可以调整图像大小，还可以向观众提供更加动态的网页。您可以使用媒体查询根据不同的屏幕尺寸显示响应式菜单。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To make a responsive menu system, using two different menus we will display
    a dynamic menu for three different browser window sizes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个响应式菜单系统，使用两个不同的菜单，我们将为三种不同的浏览器窗口大小显示一个动态菜单。
- en: How to do it…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: For the smaller browser windows, and especially for mobile devices and tablets,
    create a simple `select` menu that only takes up a small amount of vertical space.
    This menu uses an HTML `form` element for the navigation options that fires a
    JavaScript code to load the new page on selection.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较小的浏览器窗口，特别是移动设备和平板电脑，创建一个简单的`select`菜单，它只占用少量的垂直空间。该菜单使用HTML`form`元素作为导航选项，当选择时触发JavaScript代码以加载新页面。
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For the larger browser window sizes, create a simple `ul` list element that
    can be styled through CSS. This menu will receive a different layout and look
    from the different media queries. This menu is added to the same page following
    the `select` menu:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的浏览器窗口大小，创建一个可以通过CSS进行样式设置的简单`ul`列表元素。这个菜单将从不同的媒体查询中获得不同的布局和外观。这个菜单被添加到与`select`菜单相同的页面之后：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To make the menu responsive, create a media query for the target browser window
    sizes. For browser windows smaller than `800px`, the CSS will display only the
    `select` form inside the `div` element with the `small-menu` class, for all larger
    browser windows, the CSS will display the `ul` list inside the `div` element with
    the `large-menu` class. This creates an effect where the page will shift between
    menus when the browser window crosses width of `801px`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使菜单具有响应性，为目标浏览器窗口大小创建媒体查询。对于小于`800px`的浏览器窗口，CSS将仅显示带有`small-menu`类的`div`元素内的`select`表单，对于所有较大的浏览器窗口，CSS将显示带有`large-menu`类的`div`元素内的`ul`列表。这会在浏览器窗口跨过`801px`的宽度时创建一个效果，页面将在菜单之间切换。
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For the larger screen sizes, you can use the same `ul` list and use the media
    query even further to deliver a different menu by simply switching out the CSS
    and using the same HTML.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的屏幕尺寸，您可以使用相同的`ul`列表，并进一步使用媒体查询来提供不同的菜单，只需切换CSS并使用相同的HTML即可。
- en: 'For the medium-sized menu, use CSS to display the list items as a horizontal
    list, as shown in the following code snippet:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于中等大小的菜单，使用CSS将列表项显示为水平列表，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This turns the list into a horizontal list. We want this version of the navigation
    to appear on the medium-sized browser windows. Place it inside the media query
    ranging between `801px` and `1024px`, as shown in the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把列表转换为水平列表。我们希望这个版本的导航出现在中等大小的浏览器窗口上。将其放在介于`801px`和`1024px`之间的媒体查询中，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To further utilize the responsive navigation elements in the best way possible,
    we want the menu list version to move to a different layout location when the
    screen's width changes. For the middle width, `801px` to `1024px`, the menu stays
    on top of the page and has a `100%` width. When the screen is wider than `1025px`,
    the menu will float to the left-hand side of its parent element. Add to the `801px`
    to `1024px` media query a `100%` width to the `large-menu` class, and to the `1025px`
    media query, add a `20%` width and a `float:left` value to the `large-menu` class.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地利用响应式导航元素，我们希望菜单列表版本在屏幕宽度变化时移动到不同的布局位置。对于中等宽度，`801px`到`1024px`，菜单保持在页面顶部，并且宽度为`100%`。当屏幕宽度大于`1025px`时，菜单将浮动到其父元素的左侧。在`801px`到`1024px`的媒体查询中，为`large-menu`类添加`100%`的宽度，在`1025px`的媒体查询中，为`large-menu`类添加`20%`的宽度和`float:left`的值。
- en: To fill out the page we will also add a paragraph of text wrapped in a `div`
    element. You can go back to the Lorem Ipsum text generator to create filler text
    ([http://lipsum.com/](http://lipsum.com/)). In the medium-width media query give
    the element containing the paragraph a `100%` width. In the largest media query,
    give the element containing the paragraph a width of `80%` and float it to the
    right-hand side of its parent element.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充页面，我们还将添加一个包裹在`div`元素中的文字段落。您可以返回到Lorem Ipsum文本生成器创建占位文本（[http://lipsum.com/](http://lipsum.com/)）。在中等宽度的媒体查询中，给包含段落的元素一个`100%`的宽度。在最大的媒体查询中，给包含段落的元素一个`80%`的宽度，并将其浮动到其父元素的右侧。
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And your style should look as shown in following code snippet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您的样式应该如下所示：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The final result is a page with three different versions of the navigation.
    Your audience will be amazed when given an optimized version of the menu for each
    particular browser window size. You can see the navigation elements in all their
    glory in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是一个页面，其中包含三种不同版本的导航。当为每个特定的浏览器窗口大小提供优化版本的菜单时，您的受众将感到惊讶。您可以在以下截图中看到导航元素的所有精彩之处：
- en: '![How to do it…](img/5442OT_01_02.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_01_02.jpg)'
- en: How it works…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each version of the navigation utilizes the media query CSS3 property to maximize
    the space available for the menu and the content. In the smallest window, below
    `1024px`, the navigation is packed neatly inside a `select` form element. The
    medium window, ranging from `1025px` to `1280px`, the navigation is inline and
    spans across the top of the page, and is followed by the content. Finally, in
    the widest browser widths, the menu floats on the left-hand side and takes only
    20 percent of the horizontal screen space, while the content is maximized on the
    remaining 80 percent (right-hand side) of the wide-browser window. This technique
    requires more planning and effort, but is well worth it to deliver the best possible
    viewing to your audience.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每个导航版本都利用了媒体查询CSS3属性，以最大化菜单和内容的可用空间。在最小的窗口下，低于`1024px`，导航被整齐地放置在`select`表单元素内。中等窗口，范围从`1025px`到`1280px`，导航是内联的，并横跨页面顶部，后面是内容。最后，在最宽的浏览器宽度下，菜单浮动在左侧，并且只占据水平屏幕空间的20%，而内容则最大化占据剩余的80%（右侧）的宽广浏览器窗口。这种技术需要更多的规划和努力，但为了向您的受众提供最佳的观看体验，这是非常值得的。
- en: Making a responsive padding based on size
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于大小创建响应式填充
- en: To complement a responsive width image element, relative padding can be added.
    With a static width padding, the image padding may appear too thick in smaller
    browser windows and overcrowd any other elements nearby, or may push the image
    off the screen.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了补充响应式宽度图像元素，可以添加相对填充。使用静态宽度填充，图像填充可能在较小的浏览器窗口中显得太厚，并且会挤满附近的任何其他元素，或者可能将图像推出屏幕。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: A good place to start is with some understanding of the calculation of the box
    model properties. The total width an object takes is its actual width plus its
    padding, border, and margin on both sides, or *2 x (margin + border + padding)
    + content = total width*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的开始是对盒模型属性的计算有一些了解。对象占用的总宽度是其实际宽度加上其两侧的填充、边框和边距，或者*2 x (margin + border
    + padding) + content = total width*。
- en: How to do it…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'For an image that is 200px wide in its normal non-responsive state, your typical
    padding may be 8px, therefore using the previous box model, the formula can be
    framed as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个在其正常非响应状态下宽度为200px的图像，您的典型填充可能为8px，因此使用先前的盒模型，公式可以表述如下：
- en: '`2 x ( 0 + 0 + 8px ) + 200px = 216px`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 x ( 0 + 0 + 8px ) + 200px = 216px`'
- en: To find the percentage of padding, divide the padding by the total width, `8
    / 216 = 0.037%` rounded to `4%`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到填充的百分比，将填充除以总宽度，`8 / 216 = 0.037%`四舍五入为`4%`。
- en: We created this CSS and HTML earlier when we created the responsive percent-width
    image. Add to the image class a padding of `4%`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建了这个CSS和HTML，当我们创建了响应式百分比宽度的图片时。在图像类中添加`4%`的填充。
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To help you see the actual padding width change as you change the browser window''s
    size, add a background color (`background-color: #cccccc;`) to your image CSS.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '为了帮助您看到实际填充宽度随着更改浏览器窗口大小而改变，将背景颜色（`background-color: #cccccc;`）添加到您的图像CSS中。'
- en: How it works…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The image padding set at 100 percent will stick to the edge of its parent element.
    As the parent element size changes, the image padding adjusts accordingly. If
    you have done your box model math properly, your layout will successfully respond
    to your browser window's changing width.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为100%的图像填充将粘附在其父元素的边缘。随着父元素大小的变化，图像填充会相应调整。如果您正确计算了盒模型数学，您的布局将成功响应浏览器窗口的宽度变化。
- en: Making a CSS3 button glow for a loading element
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使CSS3按钮在加载元素时发光
- en: Your website, like many others, may cater to impatient people. If your site
    has a submitable form, your users may find themselves clicking the "submit" button
    a number of times impatiently if your page does not load the new content quick
    enough. This can be a problem when it causes multiple form submissions with the
    same data.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您的网站，像许多其他网站一样，可能迎合着急的人。如果您的网站有一个可提交的表单，如果您的页面加载新内容的速度不够快，您的用户可能会不耐烦地多次点击“提交”按钮。当它导致多次提交相同数据的表单时，这可能会成为一个问题。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: You can stop this behavior by adding some simple visual cues that tell the user
    something is happening behind the scenes and to be a little patient. If it's a
    little bit flashy, it might even bring a little sunshine into their otherwise
    hurried lives. This recipe does not require any images, we are going to create
    a handsome gradient submit button using CSS only. You may want to pause and go
    get a cup of coffee, as this is the longest recipe in this chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过添加一些简单的视觉提示来阻止这种行为，告诉用户幕后正在发生一些事情，并且要有点耐心。如果有点花哨，甚至可能会给他们匆忙的生活带来一点阳光。这个配方不需要任何图像，我们将只使用CSS创建一个漂亮的渐变提交按钮。您可能需要暂停一下，去喝杯咖啡，因为这是本章中最长的配方。
- en: How to do it…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: You can start by creating a form with some text boxes and a submit button. Then,
    make the form really cool, use the HTML5 placeholder property for the label. Even
    with the placeholders, the form is pretty boring.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以先创建一个带有一些文本框和提交按钮的表单。然后，使表单真的很酷，使用HTML5的占位符属性作为标签。即使有了占位符，表单还是相当无聊。
- en: Note that this is not yet supported in Internet Explorer 9.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这在Internet Explorer 9中尚不受支持。
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'By adding CSS properties we can start giving the button some life:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加CSS属性，我们可以开始为按钮赋予一些生命：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下截图中有所说明：
- en: '![How to do it…](img/5442OT_01_03.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_01_03.jpg)'
- en: 'The button can become even more shiny when we add a CSS3 gradient effect. To
    accomplish this, there must be a different line of CSS for each browser rendering
    engine: Opera, Internet Explorer, WebKit (Chrome and Safari), and Firefox. You
    can add as many gradient shifts as you like, simply by adding a `color` phase
    and the `%` location from the top, each shift separated by a comma, as shown in
    the following code snippet:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们添加CSS3渐变效果时，按钮甚至可以变得更加闪亮。为了实现这一点，必须为每个浏览器渲染引擎添加不同的CSS行：Opera、Internet Explorer、WebKit（Chrome和Safari）和Firefox。您可以通过添加`color`相位和从顶部的`%`位置，每个移位之间用逗号分隔，来添加尽可能多的渐变移位，如下面的代码片段所示：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This effect is illustrated in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个效果在以下截图中有所说明：
- en: '![How to do it…](img/5442OT_01_04.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_01_04.jpg)'
- en: 'Another effect can be added to the button by CSS, the `hover` effect. With
    this property, when the pointer moves over the button, it looks like it is being
    pressed in. The following CSS will help you add that dark border to the button:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: CSS还可以为按钮添加`hover`效果。使用此属性，当指针移动到按钮上时，它看起来就像被按下了。以下CSS将帮助您为按钮添加那个深色边框：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is displayed in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下截图中显示：
- en: '![How to do it…](img/5442OT_01_05.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_01_05.jpg)'
- en: Using CSS3 Box Shadows and jQuery we can make a simple animation of a pulsing
    halo around the **Submit** button after you pushed it. Create an event listener
    with jQuery that listens for the button's `click` event, and on that `click` event
    a series of class changes on the form button element. The `partial-fade` class
    will be added by the script to the button element.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS3 Box Shadows和jQuery，我们可以制作一个简单的动画，在您按下**提交**按钮后，围绕按钮出现脉动的光环。使用jQuery创建一个事件监听器，监听按钮的`click`事件，在该`click`事件上，对表单按钮元素进行一系列类更改。脚本将向按钮元素添加`partial-fade`类。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Don''t forget to add a link in your `head` tag to the jQuery source:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在`head`标签中添加到jQuery源的链接：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, insert the following script after the form closes:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在表单关闭后插入以下脚本：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: To finish making the button glow when you click it, add the new class `partial-fade`,
    to your CSS file and give it a CSS3 Box Shadow Property, and change the border
    properties.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成按钮在点击时发光，需要在CSS文件中添加新的类`partial-fade`，并给它一个CSS3 Box Shadow属性，并改变边框属性。
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, the **Submit** button will give a flash of blue when pressed. The following
    screenshot shows the final product:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**提交**按钮在按下时会闪烁蓝色。下面的截图显示了最终产品：
- en: '![How to do it…](img/5442OT_01_06.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_01_06.jpg)'
- en: Whew! This button was a lot of work for such a small detail, but the details
    like this will really help make a great-looking website. This happens to be one
    of my favorite details to surprise my audience with.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！为了这样一个小细节，这个按钮需要做很多工作，但是这样的细节确实会帮助制作出一个看起来很棒的网站。这恰好是我最喜欢用来给我的观众一个惊喜的细节之一。
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The CSS3 background gradient is an easy way to make a great-looking button consistently
    across browsers. The gradient is complicated and each browser currently requires
    its own line for CSS. You can control the gradient breakpoints by adding the percentage
    and colors manually. Adding box shadow, borders, and jQuery make fun effects on
    the button when the event is fired.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3背景渐变是一种在各种浏览器中制作出一个看起来很棒的按钮的简单方法。渐变很复杂，每个浏览器目前都需要自己的CSS行。您可以通过手动添加百分比和颜色来控制渐变的断点。添加盒阴影、边框和jQuery可以在事件触发时给按钮带来有趣的效果。
