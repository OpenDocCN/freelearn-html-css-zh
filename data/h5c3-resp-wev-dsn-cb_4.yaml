- en: Chapter 4. Using Responsive Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用响应式框架
- en: 'In this chapter, you will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Using the Fluid 960 grid layout
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流体960网格布局
- en: Using the Blueprint grid layout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用蓝图网格布局
- en: Fluid layout using the rule of thirds
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用三分之一规则的流体布局
- en: Trying Gumby, a responsive 960 grid
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试Gumby，一个响应式960网格
- en: The Bootstrap framework makes responsive layouts easy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap框架使响应式布局变得容易
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The **layout** frameworks have become increasingly useful and widespread in
    layout design and development. Many web developers have found that by adapting
    their designs to a framework, they can speed up their production dramatically.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 布局框架在布局设计和开发中变得越来越有用和普遍。许多网页开发人员发现，通过将他们的设计调整到一个框架中，他们可以大大加快生产速度。
- en: There are a number of good frameworks out there, which at first glance may seem
    like too much effort to spin up, otherwise you will have to sacrifice too much
    of your design to adapt to someone else's methodology. At least, that's what I
    thought at first. In practice, what I found was that learning and using frameworks
    allowed me to focus more on the parts of the project I enjoyed, and helped me
    get the project done faster. In essence, using a framework may cause your final
    products to look like the framework. Sometimes, this may not be such a terrible
    notion, that is, having a toolset at your disposal that helps you develop faster
    and better websites. There are many frameworks available; some are bare-bones,
    and require that you invest more time in design and development but you have more
    control over the final product; conversely, some provide more features, but the
    framework guides your design and it will be difficult to change without a full
    redesign.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多好的框架，乍一看可能会觉得启动起来太费劲，否则你将不得不牺牲太多设计来适应别人的方法。至少，这是我一开始的想法。实际上，我发现学习和使用框架让我更专注于项目中我喜欢的部分，并帮助我更快地完成项目。实质上，使用框架可能会导致你的最终产品看起来像框架。有时，这可能并不是一个糟糕的想法，也就是说，拥有一个工具集，可以帮助你更快、更好地开发网站。有许多可用的框架；有些是基本的，需要你在设计和开发上投入更多时间，但你对最终产品有更多的控制；另一些提供更多的功能，但框架指导你的设计，如果没有完全重新设计，将很难改变。
- en: So, which framework is right for you? The answer is of course; it depends on
    what is best for the project requirements. I suggest trying out the recipes in
    this chapter and having a number of tools at your disposal and ready to build
    with.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，哪个框架适合你呢？答案当然是：这取决于项目需求。我建议在本章中尝试一些示例，并准备好一些工具来构建项目。
- en: Using the Fluid 960 grid layout
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流体960网格布局
- en: The **960 Grid System** has been around for a while and has already proven useful
    in deploying new projects quickly. It is fairly simple to learn, and after a quick
    learning curve you can jump right into using it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 960网格系统已经存在一段时间，并且已经被证明在快速部署新项目方面非常有用。它相当简单易学，学习曲线很快，你就可以开始使用它了。
- en: The only snag in this is that it is not responsive. In fact, it behaves much
    like a table using column, spanned over fixed-width table headers. It lays out
    nicely in a 960px-wide window, and that's it, you are stuck with a good view in
    only one browser window size. So why even discuss the 960 grid at all in a book
    about responsive design? The answer is that some people liked it so much that
    they decided to fix the problem.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的问题是它不是响应式的。事实上，它的行为很像使用固定宽度表头的列跨越固定宽度表头的表格。它在960像素宽的窗口中布局得很好，就是这样，你只能在一个浏览器窗口尺寸下看到良好的视图。那么在一个关于响应式设计的书中为什么还要讨论960网格呢？答案是有些人非常喜欢它，以至于他们决定解决这个问题。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are good solutions for this, and hopefully you can find them in this chapter.
    Bear with me and I'll show you one of the simpler versions of it in this recipe.
    The simple responsive version of 960 Grid System could actually be more accurately
    described as a **fluid grid** . It replaces much of the fixed-width grid elements
    with percentage width, left-floating element. This works pretty well but when
    the columns get narrow, it can become difficult to read. We can fix this rather
    easily with some additional CSS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面有很好的解决方案，希望你可以在本章中找到。跟着我，我会在这个示例中向你展示一个更简单的版本。960网格系统的简单响应式版本实际上更准确地描述为**流体网格**。它用百分比宽度替换了大部分固定宽度网格元素，左浮动元素。这样做效果很好，但当列变窄时，阅读可能会变得困难。我们可以通过一些额外的CSS很容易地解决这个问题。
- en: What we eventually want for our page is to respond to the screen changes by
    exerting more granular change over how the grid is laid out in different screen
    sizes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终希望页面能够对屏幕变化做出更精细的响应，以更改网格在不同屏幕尺寸下的布局。
- en: First, go get the Fluid 960 Grid System at [http://www.designinfluences.com/fluid960gs/](http://www.designinfluences.com/fluid960gs/).
    Then, download and expand the archived files. Copy the `grid.css` file from the
    archived `CSS` folder into your project's `CSS` folder. Next, create a new CSS
    file in your `CSS` directory called `responsive.css`. We'll come back to that
    later.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，去[http://www.designinfluences.com/fluid960gs/](http://www.designinfluences.com/fluid960gs/)获取流体960网格系统。然后，下载并解压存档文件。将存档的`CSS`文件夹中的`grid.css`文件复制到项目的`CSS`文件夹中。接下来，在你的`CSS`目录中创建一个名为`responsive.css`的新CSS文件。我们稍后会回到这个文件。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new HTML file in your IDE. Add links to the file `grid.css`, and to
    your new CSS file, `responsive.css`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的IDE中创建一个新的HTML文件。添加链接到`grid.css`文件和你的新CSS文件`responsive.css`。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, create some content within your HTML body. Then, to make the Fluid 960
    Grid work, you first add a wrapping `div` element with a class to define the number
    of columns inside it. For this recipe use the class `containter_16`, for a total
    of 16 usable columns. You also have the option of having 12 columns by assigning
    to the `div` element the `container_12` class.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在HTML主体中创建一些内容。然后，为了使流体960网格工作，首先添加一个包装的`div`元素，其中包含一个定义内部列数的类。对于这个示例，使用`containter_16`类，共有16个可用列。你还可以通过将`div`元素分配给`container_12`类来拥有12列。
- en: Inside the `container_16` element, first create a container for a header. Create
    a new `div` element with a class `grid_16`. You probably have already guessed
    that the `grid_16` class takes the whole width of the `container_16` div. That
    was a pretty good guess; you are 98 percent correct; it actually takes 98 percent
    of the width, or all 16 columns with 2 percent outer padding. If you had instead
    used the `grid_11` class it would have taken up 11 columns, or 66.75 percent with
    2 percent padding on the outside.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`container_16`元素内，首先创建一个头部的容器。创建一个带有`grid_16`类的新的`div`元素。你可能已经猜到了，`grid_16`类占据了整个`container_16`
    div的宽度。这是一个相当好的猜测；你有98%的正确率；它实际上占据了98%的宽度，或者所有16列，外部有2%的填充。如果你使用了`grid_11`类，它将占据11列，或者66.75%的宽度，外部有2%的填充。
- en: To create a new line, we add the another `div` element, this time with the class
    `clear`. This works in a similar way to the *Enter* key on your keyboard, or a
    newline (`\n`) in some programming languages. This `clear` element is necessary
    between rows because their position is set by a `left:float` property, which does
    not have a vertical space.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建新的一行，我们添加另一个`div`元素，这次使用`clear`类。这与键盘上的*Enter*键或某些编程语言中的换行符(`\n`)类似。在行之间需要添加`clear`元素，因为它们的位置是由`left:float`属性设置的，这个属性没有垂直空间。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same could be accomplished by using an uncomplicated break, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的效果也可以通过使用简单的断点来实现，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will need to add the `clear` div or break between every row.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在每一行之间添加`clear` div或断点。
- en: 'Now, we will focus onto the content! Following your `clear` element, add six
    new `div` elements. Give the first element a `grid_3` class, the second element
    the `grid_5` class, and the rest of the elements the `grid_2` class. The order
    does not matter, as long as the number following the `grid_*` adds up to 16\.
    Insert a few lines of Ipsum filler text ([http://lipsum.com](http://lipsum.com))
    inside the `div` elements. Your code will look something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于内容！在你的`clear`元素之后，添加六个新的`div`元素。给第一个元素添加`grid_3`类，第二个元素添加`grid_5`类，其余的元素添加`grid_2`类。顺序不重要，只要`grid_*`后面的数字加起来等于16。在`div`元素中插入一些Ipsum填充文本([http://lipsum.com](http://lipsum.com))。你的代码会看起来像这样：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following screenshot, you can see how the fluid grid breaks down on
    smaller viewports:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，你可以看到流体网格在较小的视口上是如何崩溃的：
- en: '![How to do it...](img/5442OT_04_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_04_01.jpg)'
- en: 'The next step is to update your CSS to add some responsiveness to the fluid
    layout. Now, open your `responsive.css` file in your IDE to edit it. Add media
    queries to cover the smaller screen breakpoints: `1024px`, `600px`, and `420px`,
    as shown in the following code snippet:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是更新你的CSS，为流体布局添加一些响应性。现在，打开你的IDE中的`responsive.css`文件进行编辑。添加媒体查询以覆盖较小的屏幕断点：`1024px`，`600px`和`420px`，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our intent is to make some new CSS that will override the fluid grid and make
    new sticking breakpoints for content elements. At narrower widths we want an element
    to have a greater percentage width, or a fixed width. To make the override, we
    will add a new class to the media queries: `.break-column`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是创建一些新的CSS，覆盖流体网格，并为内容元素创建新的固定断点。在较窄的宽度下，我们希望一个元素有更大的百分比宽度，或者固定宽度。为了进行覆盖，我们将在媒体查询中添加一个新的类：`.break-column`。
- en: 'Next add to the `max-width:420px` media query a `min-width` value of `360px`
    for the `.break-column` element class. Then, add to the new media queries, `max-width:600px`
    and `min-width:421px`, add the `.grid_2.break-column`, `.grid_3.break-column`,
    and `.grid_5.break-column` element classes and their `width:48%` property. In
    the largest of the three media queries, add the class with a property of `width:30%`
    followed by the `!important` override (be sure it is inserted before the semicolon),
    as shown in the following code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`max-width:420px`媒体查询中，为`.break-column`元素类添加`min-width`值为`360px`。然后，在新的媒体查询中，`max-width:600px`和`min-width:421px`，添加`.grid_2.break-column`、`.grid_3.break-column`和`.grid_5.break-column`元素类以及它们的`width:48%`属性。在这三个媒体查询中最大的一个中，添加一个带有`width:30%`属性的类，后面跟着`!important`覆盖(确保它在分号之前插入)，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One last step to a responsive fluid grid! Open your HTML file again and add
    to each of the six `div` elements a class of `break-column`. And the recipe is
    complete. Refresh your browser, or open the HTML to view it. As you scale down
    your browser window or open the file in a mobile device, you will see the layout
    responds with a more optimized layout for the smaller views. The fluid grid is
    illustrated in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个响应式流体网格的最后一步！再次打开你的HTML文件，并给每个六个`div`元素添加一个`break-column`类。食谱就完成了。刷新你的浏览器，或者打开HTML文件查看。当你缩小浏览器窗口或在移动设备上打开文件时，你会看到布局会根据较小的视图做出响应并优化布局。流体网格如下截图所示：
- en: '![How to do it...](img/5442OT_04_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_04_02.jpg)'
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When you open the un-updated (fluid and non-responsive) HTML file in your browser,
    you will see your six columns, and they will fluidly retain their same proportional
    width as the browser window or the device gets smaller. When viewed in a small
    window or mobile device, it will display six unreadable narrow columns.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中打开未更新的(流体和非响应式)HTML文件时，你会看到六列，它们会在浏览器窗口或设备变小的时候保持它们相同的比例宽度。当在小窗口或移动设备中查看时，它会显示六列不可读的窄列。
- en: 'Adding the media queries works by overriding the style properties of the `div`
    elements. I demonstrated overrides with three different methods: first, the `min-width`
    method overrides the percent width; next, as the `responsive.css` file follows
    the `grid.css` file and the CSS is explicitly name-spaced (`.grid_2.break-column`,
    `.grid_3.break-column`, and `.grid_5.break-column`), it overrides the fluid width
    declared in the `grid.css` file, and in the last case, the `!important` declaration
    trumps all in the override cascade.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 添加媒体查询是通过覆盖`div`元素的样式属性来实现的。我用三种不同的方法演示了覆盖：首先，`min-width`方法覆盖了百分比宽度；接下来，由于`responsive.css`文件跟随`grid.css`文件，并且CSS是显式命名空间（`.grid_2.break-column`，`.grid_3.break-column`和`.grid_5.break-column`），它覆盖了在`grid.css`文件中声明的流体宽度，在最后一种情况下，`!important`声明会压倒所有其他覆盖级联。
- en: Using the Blueprint grid layout
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blueprint网格布局
- en: The **Blueprint CSS** framework is another popular static CSS grid system. There
    may be a case where you come across a need to make the static Blueprint CSS grid
    framework into your very own responsive Blueprint framework. This one is pretty
    easy to break apart into a responsive layout. There are only a few simple CSS
    breaks to insert and you have a responsive framework.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blueprint CSS**框架是另一个流行的静态CSS网格系统。可能会有这样一种情况，你需要将静态Blueprint CSS网格框架变成你自己的响应式Blueprint框架。这个框架很容易分解成一个响应式布局。只需要插入一些简单的CSS断点，你就有了一个响应式框架。'
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: First go and get a hold of the Blueprint CSS framework. You can download it
    at [http://www.blueprintcss.org/](http://www.blueprintcss.org/). This framework
    works similarly to other static CSS grid frameworks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先去获取Blueprint CSS框架。你可以在[http://www.blueprintcss.org/](http://www.blueprintcss.org/)下载它。这个框架与其他静态CSS网格框架类似。
- en: How to do it....
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做……
- en: Once you have downloaded the Blueprint framework, extract the files and copy
    the `blueprint` folder into your `CSS` directory. Next we'll start building the
    HTML file to work with the Blueprint CSS framework. Create a new HTML file in
    your IDE. Inside the body, add a title, and then an `hr` element.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你下载了Blueprint框架，解压文件并将`blueprint`文件夹复制到你的`CSS`目录中。接下来我们将开始构建HTML文件，以便与Blueprint
    CSS框架一起使用。在你的IDE中创建一个新的HTML文件。在body内部，添加一个标题，然后添加一个`hr`元素。
- en: '"Huh? A what?", you may ask. It''s a horizontal rule—a thematic break. Let
    me explain.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “啥？什么？”，你可能会问。这是一个水平规则——一个主题性的分隔符。让我解释一下。
- en: In previous versions of HTML, `hr` was a horizontal rule. Meaning it acted like
    a break, but places a horizontal line across the page. It got an upgrade in HTML5,
    and is now a thematic break. So what's the difference? It still, by itself, does
    the same thing putting a horizontal line across the page. However, in the past
    it was used to define the layout, but now it emphasizes a change in theme or content.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的HTML版本中，`hr`是一个水平规则。意思是它像一个分隔符一样起作用，但是在页面上放置一条水平线。它在HTML5中得到了升级，现在是一个主题性的分隔符。那么有什么区别呢？它本身仍然做着同样的事情，即在页面上放置一条水平线。然而，在过去它被用来定义布局，但现在它强调了主题或内容的变化。
- en: However, in Blueprint CSS, the `hr` element is used specifically to capture
    a row. Okay? Let us get back to our task at hand.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Blueprint CSS中，`hr`元素被专门用来捕捉一行。好吗？让我们回到手头的任务。
- en: 'After your `hr` element, you can start a row of content. First create a three-column
    layout for the first row. Then, insert some Ipsum ([http://Ipsum.com](http://Ipsum.com))
    text into the three `div` elements. This, like the 960 Grid, works like a table
    `colspan`, you assign a class to the `div` element corresponding to the number
    of columns you want the element to span across. The total number of columns is
    22\. The first three classes will be: `span-7`, `span-8`, and `span-7`. Follow
    the same steps with another thematic break:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`hr`元素之后，你可以开始一行内容。首先为第一行创建一个三列布局。然后，在三个`div`元素中插入一些Ipsum（[http://Ipsum.com](http://Ipsum.com)）文本。就像960
    Grid一样，这就像一个表格`colspan`，你给`div`元素分配一个与你想要跨越的列数相对应的类。总列数是22。前三个类将是：`span-7`，`span-8`和`span-7`。用另一个主题性的分隔符跟着同样的步骤：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In your next row, add two large columns. Add two divs with the classes `span-15`
    and `span-7` in them. In the left-hand side `div` element, add a paragraph of
    Ipsum text and an image. In the right-hand side column, add an unordered list
    of Ipsum text sentences. Then close the row with a horizontal rule:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的下一行中，添加两个大列。在它们中间添加两个带有类`span-15`和`span-7`的div。在左侧的`div`元素中，添加一段Ipsum文本和一张图片。在右侧列中，添加一列Ipsum文本句子的无序列表。然后用一个水平规则关闭这一行：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is most of the HTML we want to build for this recipe. If you want more,
    you can see the `sample.html` file in the `tests` folder of the archive you downloaded.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们想要为这个配方构建的大部分HTML。如果你想要更多，你可以在你下载的存档的`tests`文件夹中看到`sample.html`文件。
- en: In your HTML header, add links to the Blueprint CSS framework stylesheets in
    the `css/Blueprint/` directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的HTML头部，添加链接到`css/Blueprint/`目录中的Blueprint CSS框架样式表。
- en: 'Next, let''s add our own stylesheet to make the framework a responsive one.
    Add a new link to the new stylesheet, `responsive.css`, in your header. If you
    have not already added the CSS file, then add the new `responsive.css` stylesheet:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加我们自己的样式表，使框架成为一个响应式的框架。在你的头部添加一个新的链接到新的样式表`responsive.css`。如果你还没有添加CSS文件，那么添加新的`responsive.css`样式表：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the `responsive.css` stylesheet. Create a media query for the smallest
    breakpoint, and for the next breakpoint. Make the media query breakpoints at `600px`
    and `1024px`, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`responsive.css`样式表。为最小的断点和下一个断点创建一个媒体查询。将媒体查询断点设置为`600px`和`1024px`，如下所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Inside it we''re going to use a CSS trick called an **attribute selector**
    . This is like using a wildcard `*`. To make a property apply to all of the column
    span classes in the Blueprint CSS grid, such as `span-1`, `span-2`, `span-3`,
    and more, you write it like this: `div[class*=''span'']{...}`. This is a wonderful
    trick for making responsive overrides in a CSS grid.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我们将使用一种称为**属性选择器**的CSS技巧。这就像使用通配符`*`。为了使属性应用于Blueprint CSS网格中的所有列span类，比如`span-1`、`span-2`、`span-3`等，你可以这样写：`div[class*='span']{...}`。这是在CSS网格中进行响应式覆盖的一个很好的技巧。
- en: At the `600px` media query, add CSS with the attribute selector, and add a width
    of `90%`. This will make all the spans expand to 100 percent when the browser
    window is less than `600px` wide. Do the same in the `1024px` media query with
    a width of `42%`. If you were expecting nice round numbers such as 100 percent
    and 50 percent, you may be surprised; but keep in mind that Blueprint CSS adds
    padding already.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`600px`的媒体查询中，使用属性选择器添加CSS，并添加一个宽度为`90%`。当浏览器窗口小于`600px`时，这将使所有的span扩展到100%。在`1024px`的媒体查询中，使用宽度为`42%`。如果你期望得到像100%和50%这样的漂亮的整数，你可能会感到惊讶；但请记住，Blueprint
    CSS已经添加了填充。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Open the HTML in your browser or refresh your screen and you'll see that when
    you change the browser width, the spans adjust automatically to the new width.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开HTML文件或刷新屏幕，你会发现当你改变浏览器宽度时，这些span会自动调整到新的宽度。
- en: You may notice that the second row leaves too much white space when you hit
    that `1024px` breakpoint. Let's fix that. Copy your attribute selector CSS line
    in the `1024px` media query and paste it beneath. Append a `.wide` class to the
    attribute selector. Give it a width of `90%`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你达到`1024px`的断点时，你可能会注意到第二行留下了太多的空白空间。让我们来修复一下。在`1024px`的媒体查询中复制你的属性选择器CSS行，并将其粘贴在下面。在属性选择器后面添加一个`.wide`类。给它一个宽度为`90%`。
- en: In your HTML file add a `wide` class to the first span after the second thematic
    break (`hr`), the one with the image inside it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的HTML文件中，在第二个主题分隔符（`hr`）后的第一个span中添加一个`wide`类，其中包含图像。
- en: This works great on the most recent browsers, but not yet in old browsers. We'll
    need to add just a few lines of CSS to make this work in more browsers. In your
    `responsive.css` file, add on the first line the class `.container`, and give
    the attribute a width of `960px`. Then inside each media query add the same class,
    but change the width to `100%`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这在最新的浏览器上效果很好，但在旧的浏览器上还不行。我们需要添加几行CSS代码，使其在更多的浏览器中起作用。在你的`responsive.css`文件中，在第一行添加`.container`类，并给它一个宽度为`960px`的属性。然后在每个媒体查询中添加相同的类，但将宽度更改为`100%`。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That will help it from breaking in older browsers that don't support media queries.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将有助于防止在不支持媒体查询的旧浏览器中出现问题。
- en: For some extra fun, add some CSS3 transition to the spans. This will make a
    smooth animated transition to the width of the affected spans. Do this outside
    of any media queries.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加一些额外的乐趣，给这些span添加一些CSS3过渡效果。这将使受影响的span的宽度平滑地动画过渡。这些操作都是在任何媒体查询之外进行的。
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With this extra tidbit you can do some fancier responsive design in each media
    query. The new responsive Blueprint is illustrated in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个额外的小提示，你可以在每个媒体查询中做一些更花哨的响应式设计。新的响应式蓝图如下截图所示：
- en: '![How to do it....](img/5442OT_04_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![如何做....](img/5442OT_04_03.jpg)'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To make the Blueprint CSS framework responsive, we first changed its container
    width from a static width to a fluid maximum width, and added media queries at
    breakpoints. The key ingredient in this recipe was the attribute selector that
    allowed us to throw a wildcard at the CSS and avoid having to recode each span's
    property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Blueprint CSS框架具有响应性，我们首先将其容器宽度从静态宽度更改为流体最大宽度，并在断点处添加了媒体查询。这个配方的关键成分是属性选择器，它允许我们向CSS抛出一个通配符，避免了需要重新编码每个span的属性。
- en: Fluid layout using the rule of thirds
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用三分之一规则的流体布局
- en: The **rule of thirds** is a design methodology that states that a layout or
    an image can be made more interesting if it is divided into three parts horizontally
    or vertically. And like everything else related to the Internet, there is endless
    discussion and debate on it. For the purpose of this book, all we care about is
    how to make it useful.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**三分之一规则**是一种设计方法论，它规定如果一个布局或图像被水平或垂直地分成三部分，那么它会变得更有趣。就像与互联网相关的其他一切一样，关于它有无尽的讨论和辩论。对于本书的目的，我们只关心如何使它有用。'
- en: There is no indexed in search results, at least that I've seen, responsive and
    fluid layout based on the rule of thirds. However, there is a good static framework
    based on the Rule of Thirds. It's called the **Golden Grid**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 至少在我看来，搜索结果中没有基于三分之一规则的响应和流体布局的索引。然而，有一个基于三分之一规则的良好静态框架。它被称为**Golden Grid**。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Search for `Golden Grid`, and [http://code.google.com/p/the-golden-grid/](http://code.google.com/p/the-golden-grid/)
    should be the first result. From the top navigation, go to the **Downloads** page
    and get the latest version.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索`Golden Grid`，[http://code.google.com/p/the-golden-grid/](http://code.google.com/p/the-golden-grid/)应该是第一个结果。从顶部导航中，转到**Downloads**页面并获取最新版本。
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Look inside the extracted files for a `CSS/golden-base` directory. Inside it,
    copy the `golden.css` file into your development directory. You will use this
    CSS file as your base framework for layout.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取的文件中查找`CSS/golden-base`目录。在其中，将`golden.css`文件复制到你的开发目录中。你将使用这个CSS文件作为你的布局基础框架。
- en: In a new HTML file add a link to the `golden.css` stylesheet.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新的HTML文件中添加一个链接到`golden.css`样式表。
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Open this CSS file and edit the property of the `.main` class. Change `width:970px`
    to `max-width:970px`. This will break the static page template and allow the outer
    wrap to adjust as the browser's window shrinks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 打开这个CSS文件并编辑`.main`类的属性。将`width:970px`更改为`max-width:970px`。这将打破静态页面模板，并允许外部包装随着浏览器窗口的缩小而调整。
- en: While you have the `golden.css` stylesheet open, take a look at how this works.
    It's very simple; three vertical lines, and then for each division divide the
    page layout by half, and then in half again. The class spans start at `70px` width
    with the `80px` increments until they fill up their `width:950px;` attribute.
    To assign the `width` property to your element, assign it a class starting with
    the letter `g` plus the width and `10px` for a margin. These also have the `float:left;`
    and `display:inline;` styles. Because they are left-floating inline elements,
    when they run out of horizontal room, they will take a new line. Since they are
    left floated, they are aligned left, to move them to the right, you can either
    put empty elements in front of it, or use the framework's `.margin` class to put
    a left margin in front of it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开`golden.css`样式表时，看一下它是如何工作的。它非常简单；三条垂直线，然后对于每个分区，将页面布局分成一半，然后再分成一半。类跨度从`70px`宽度开始，每次增加`80px`，直到填满它们的`width:950px;`属性。要将`width`属性分配给您的元素，请为其分配一个以字母`g`开头的类，加上宽度和`10px`的边距。这些还具有`float:left;`和`display:inline;`样式。因为它们是左浮动的内联元素，当它们水平空间用完时，它们将换行。由于它们是左浮动的，它们被左对齐，要将它们移动到右边，您可以在其前面放置空元素，或者使用框架的`.margin`类在其前面放置左边距。
- en: The margins work much like the grid span's widths, they increment by `80px`,
    the only difference is that they start at `90px` instead of `70px`. The difference
    is accounted for in the element's `margin-left:10px` property.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 边距的工作方式与网格跨度的宽度类似，它们以`80px`递增，唯一的区别是它们从`90px`开始而不是`70px`。这个差异在元素的`margin-left:10px`属性中得到了解决。
- en: The elements line up in rows, and like the other frameworks we have worked with
    them in this chapter, it uses an element to clear the end of the row, before starting
    a new one. In this case, the framework uses a div with a `clear:both` property.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 元素在行中对齐，就像我们在本章中使用的其他框架一样，它在开始新行之前使用一个元素来清除行的末尾。在这种情况下，框架使用一个带有`clear:both`属性的div。
- en: Let's now get back to editing the HTML file and create a responsive layout using
    the Rule of Thirds. We will start by creating a static layout. Create a header
    (`H1`) with a style of `width:100%`, and then add three divs to clear new rows.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在回到编辑HTML文件，并使用“三分法则”创建一个响应式布局。我们将从创建一个静态布局开始。创建一个带有`width:100%`样式的标题（`H1`），然后添加三个`div`来清除新的行。
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After the first clearing `div` element, add a `div` element with the class
    `.g960`, and we will insert a large image in which we will create responsiveness
    characteristics. You can refer to the *Resizing an image using percent width*
    recipe in [Chapter 1](ch01.html "Chapter 1. Responsive Elements and Media"), *Responsive
    Elements and Media*, for a refresher on to making images responsive:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个清除`div`元素之后，添加一个带有类`.g960`的`div`元素，我们将在其中插入一个大图像，其中我们将创建响应特性。您可以参考[第1章](ch01.html
    "第1章。响应元素和媒体")中的*使用百分比宽度调整图像大小*一节，了解如何使图像具有响应性：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After the next break, insert six `div` elements, each with the class `g160`.
    Inside each, insert a paragraph of Ipsum text. For a more informative example,
    replace one of the `.g160` elements with an 80px-wide class. Be sure to also include
    the class for the margin, `ml80`, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个断点之后，插入六个带有类`g160`的`div`元素。在每个内部，插入一段Ipsum文本。为了更具信息性的示例，用一个80px宽的类替换一个`.g160`元素。确保还包括边距类`ml80`，如下所示：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That's likely enough for the HTML to get a clear demonstration of how to make
    this work. Let us now move on to adding our CSS to make this a responsive design.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能足够让HTML清楚地演示如何使其工作。现在让我们继续添加我们的CSS，使其成为一个响应式设计。
- en: Add a new CSS file to your `CSS` directory, `responsive.css`, and link to it
    in your HTML head.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`CSS`目录中添加一个新的CSS文件，`responsive.css`，并在HTML头部链接到它。
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we'll add some CSS properties to make the CSS framework responsive. First,
    let's take care of that large image. We'd rather not let it stay large when the
    browser gets smaller.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将添加一些CSS属性，使CSS框架具有响应性。首先，让我们处理一下那张大图片。当浏览器变小时，我们宁愿不让它保持大尺寸。
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, add media queries at two breakpoints, `600px` for mobile and `1024px`
    for tablets. You can add more as you like for larger screens, but for this recipe
    we're just covering the basics.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在两个断点处添加媒体查询，`600px`用于移动设备，`1024px`用于平板电脑。您可以根据需要为更大的屏幕添加更多，但是对于这个示例，我们只涵盖了基础知识。
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For all screens smaller than `600px`, we want all the `div` elements to default
    to the full width of the screen. Do not forget that we have classes with left-margin
    properties; we'll want to shrink those to zero. To keep the new CSS minimal, let's
    use the CSS attribute selectors to wildcard select all the grid classes. Add `div[class*='g']{...}`
    and assign a width of `90%`, and `div[class*='ml'] {...}` to assign a left margin
    of `0`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有小于`600px`的屏幕，我们希望所有`div`元素默认为屏幕的全宽度。不要忘记我们有带有左边距属性的类；我们将希望将它们缩小到零。为了使新的CSS尽可能简洁，让我们使用CSS属性选择器来通配选择所有网格类。添加`div[class*='g']{...}`并分配宽度为`90%`，以及`div[class*='ml']
    {...}`来分配左边距为`0`。
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For screens ranging from 600px to 1024px, add the same but change the grid class'
    width to `48%`. For this `@media` query, we don't want every element to drop to
    half of the screen. That would kill all of the joy of this responsive framework.
    After your attribute selector, add `.wide` to make a distinct CSS property for
    this distinct class. Then, give it a width of `96%`. In your HTML, add the `wide`
    class to the title and the image parent `div` elements (they are the elements
    with the `g960` class).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于屏幕范围从600px到1024px，添加相同的内容，但将网格类的宽度更改为`48%`。对于这个`@media`查询，我们不希望每个元素都占据屏幕的一半。那将破坏这个响应式框架的所有乐趣。在您的属性选择器之后，添加`.wide`以为这个特殊的类添加一个不同的CSS属性。然后，给它一个宽度为`96%`。在您的HTML中，将`wide`类添加到标题和图像父`div`元素（它们是带有`g960`类的元素）。
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot illustrates the Golden Grid behavior:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了Golden Grid的行为：
- en: '![How to do it…](img/5442OT_04_04.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_04_04.jpg)'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The attribute selectors give us a tidy trick to break apart a rigid framework
    across limited column spans into a full width across the screen. Combine this
    with your custom media queries to only change the HTML on smaller screens, and
    you have an easy recipe for a responsive, and potentially visually, compelling
    layout for all sizes. This same technique can be used for a number of different
    frameworks.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选择器为我们提供了一个巧妙的技巧，可以将刚性框架分割成有限的列跨度，变成整个屏幕的全宽。将这个与自定义媒体查询结合起来，只在较小的屏幕上改变HTML，你就可以轻松地为所有尺寸创建一个响应式、可能视觉上引人注目的布局。这个技术也可以用于许多不同的框架。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's have some fun and take this a little further. We've so far in this chapter
    dealt mostly with making static frameworks that run on a mobile device. Let's
    do an experiment together to make the Golden Grid do something cool when displayed
    on a large screen. Add a new media query for the `1280px` breakpoint.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们玩得更开心一点，把这个做得更深入一些。到目前为止，在这一章中，我们主要是在移动设备上制作静态框架。让我们一起做一个实验，让Golden Grid在大屏幕上显示时做一些酷炫的事情。为`1280px`断点添加一个新的媒体查询。
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This extra section of the recipe goes a little deeper into attribute selectors.
    It may be a bit disturbing at first to see basic logic in your CSS, but bear with
    me and you'll find some new tools for your toolbox, which you will find very useful.
    But, first let's add some more content and an HTML structure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的额外部分深入探讨了属性选择器。一开始在您的CSS中看到基本逻辑可能有点令人不安，但请耐心等待，您将会发现一些新的工具，这些工具对您的工具箱非常有用。但首先让我们添加一些更多的内容和一个HTML结构。
- en: Copy the last row of your HTML and append it to the HTML page right after where
    you have copied it. Give it a parent `div` element with a class of `g960`. To
    the preceding `div` element, add the class `last clear`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 复制您的HTML的最后一行，并将其附加到HTML页面中，就在您复制它的地方的右边。给它一个父`div`元素，类名为`g960`。在前面的`div`元素中，添加类名`last
    clear`。
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Back to your CSS. The attribute selectors now allow more conditions, such as
    parents, children, and precedence. Let''s use this to apply CSS properties to
    the grid element preceded by the `.last` div. To do this we use a `~` symbol;
    the syntax is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的CSS。属性选择器现在允许更多的条件，比如父元素、子元素和优先级。让我们使用这个来将CSS属性应用到由`.last` div元素前面的网格元素。为了做到这一点，我们使用`~`符号；语法如下：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We want this element to change into a column on the right-hand side when the
    screen is bigger than 1280px to maximize our viewing area.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望当屏幕大于1280px时，这个元素变成右侧的一列，以最大化我们的视觉区域。
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next, we want all its children to line up nicely and take up the available space,
    as well as remove any margins from the `ml` classes. This syntax is much like
    the preceding one, but uses a `>` symbol; and is written like this `DIV.parent>DIV.child`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们希望所有的子元素都能很好地排列并占用可用空间，同时移除`ml`类的任何边距。这个语法与前面的类似，但使用了`>`符号；写法如下`DIV.parent>DIV.child`。
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We also need to prevent the wrapping `g960` grid element from being affected
    by the wildcard in the `max-width:1024px` media query. Add the same attribute
    selector to the grid div element preceded by the `.lost` div element and give
    it a width of `100%`, this is shown in the following code line:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要防止包裹`g960`网格元素受到`max-width:1024px`媒体查询中通配符的影响。在`.lost` div元素前面的网格div元素中添加相同的属性选择器，并给它一个宽度为`100%`，如下面的代码行所示：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now refresh your browser's window and expand it past the `1280px` breakpoint.
    You'll see that the last row move into a sidebar position. Who says frameworks
    are too rigid to be responsive?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在刷新您的浏览器窗口，并将其扩展到`1280px`断点之后。您会看到最后一行移动到侧边栏位置。谁说框架太死板，不能响应呢？
- en: 'Now, you already know that media queries are not supported in old browsers,
    so since we care for all of our audience we want to give some love to the steadfast
    users of old browsers. Copy the CSS from the `1280px` media query breakpoint,
    and add it to a pre IE9-only stylesheet. Then make a conditional link to the stylesheet
    in your header:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经知道旧浏览器不支持媒体查询，所以既然我们关心我们所有的观众，我们希望给予那些忠实使用旧浏览器的用户一些关爱。复制`1280px`媒体查询断点的CSS，并将其添加到一个仅适用于IE9之前的样式表中。然后在您的头部添加一个条件链接到样式表：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will take care of the old-browser-support issues and your site will still
    look good in the older browsers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解决旧浏览器支持问题，您的网站在旧浏览器中看起来仍然很好。
- en: Trying Gumby, a responsive 960 grid
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试Gumby，一个响应式的960网格
- en: The Gumby framework is a continued effort on the good old reliable static 960
    Grid framework. It was brought to you by the nice folks at Digital Surgeons. The
    framework itself has been updated, and a good number of bells and whistles have
    been added. There are, of course more features than we have time to go through
    in this recipe, so we're going to stick solely to the improved layout structure
    of the framework.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Gumby框架是对可靠的静态960网格框架的持续努力。它是由Digital Surgeons的友好人士为您带来的。框架本身已经更新，添加了许多新功能。当然，我们没有时间在这个教程中介绍所有的功能，所以我们将专注于框架的改进布局结构。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's take a look at the Gumby 960 Responsive framework's website [gumbyframework.com/](http://gumbyframework.com/).
    As you go through it, you can see the modernized framework features in action.
    The layout snaps nicely to a mobile version at 767px, and in addition transforms
    the menu into a usable mobile navigation. There are several useful UI elements
    included that you will want to spend some time to getting familiar with.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Gumby 960响应式框架的网站[gumbyframework.com/](http://gumbyframework.com/)。当您浏览它时，您可以看到现代化的框架功能在其中的应用。布局在767px时很好地适应了移动版本，并且还将菜单转换为可用的移动导航。还包括了一些有用的UI元素，您会想花一些时间来熟悉它们。
- en: Click on the highly prominent **Download Gumby 2** button on the navigation
    to acquire the Gumby's master version archive. Included inside the package are
    Photoshop files to help you design your layout, the actual framework CSS, JavaScript,
    image files, and sample HTML files. The `demo.html` file could be a good place
    to examine the source and make some discoveries about how the framework is used.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 点击导航栏上非常显眼的**下载Gumby 2**按钮，获取Gumby的主版本存档。包含在包中的有Photoshop文件，帮助你设计布局，实际的框架CSS，JavaScript，图像文件和示例HTML文件。`demo.html`文件可能是检查源代码并对框架的使用进行一些发现的好地方。
- en: But save the poking around for later, let's jump right into building a page.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 但是先把探索留到以后，让我们直接开始构建一个页面。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Start by creating a new page in your HTML editor. This framework has a lean
    method of importing in your CSS scripts inside a singular link to `css/imports.css`.
    Inside that file, the different stylesheets are imported. This is a helpful concept
    in case you need to change or add stylesheets in the future, you can control it
    in this CSS file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的HTML编辑器中创建一个新页面。这个框架有一种简洁的方法，可以通过一个链接`css/imports.css`导入你的CSS脚本。在这个文件中，导入了不同的样式表。这是一个有用的概念，以防将来需要更改或添加样式表，你可以在这个CSS文件中进行控制。
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This is what the CSS looks like:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: CSS看起来是这样的：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Just so you don''t forget, add your links to a jQuery library and the included
    JavaScript files: `gumby.min.js`, `plugins.js`, and `main.js`, at the end of the
    page directly before the closing `body` tag. You will need these later.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不让你忘记，将你的链接添加到jQuery库和包含的JavaScript文件：`gumby.min.js`、`plugins.js`和`main.js`，直接放在页面末尾，紧接着`body`标签的闭合之前。你以后会需要这些。
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now that the basics are taken care of, let's move on to some development. The
    Gumby Responsive Grid framework can use either 12 or 16 columns. Start with building
    a 12-column layout and later we will make the page a hybrid one by adding a 16-layer
    section.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基础工作已经完成，让我们继续开发。Gumby响应式网格框架可以使用12列或16列。首先建立一个12列的布局，然后我们将通过添加一个16层的部分使页面成为混合布局。
- en: Inside your HTML body, add a `div` element with the class `container`. The default
    layout inside the `container` class element is 12 columns. Next, inside the `container`
    class element, add a new `div` element with a `row` class assigned. The `row`
    class element encapsulates each entire range of the 12 column spans. Inside each
    row, you have 12 column spans to work with, to build your content divs with.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的HTML body中，添加一个带有`container`类的`div`元素。`container`类元素内的默认布局是12列。接下来，在`container`类元素内部，添加一个带有`row`类的新的`div`元素。`row`类元素封装了12列跨度的整个范围。在每一行中，你有12列跨度可以使用，来构建你的内容div。
- en: Insert inside the `row` class element three new div elements with classes, `four
    columns`, `three columns`, and `five columns`. The column classes can be of whatever
    number your design requires, as long as they together are equal to 12\. The number
    label of the class determines the number of column spans the element occupies.
    Inside each of these elements add a paragraph of Ipsum filler text ([http://ipsum.com](http://ipsum.com)),
    to help give a more illustrative demonstration of the layout.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`row`类元素内插入三个新的div元素，分别为`four columns`、`three columns`和`five columns`。列类可以是你的设计需要的任何数字，只要它们加在一起等于12。类的数字标签决定了元素占据的列跨度数。在每个元素内部添加一个Ipsum填充文本段落([http://ipsum.com](http://ipsum.com))，以帮助更生动地演示布局。
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Feel free to launch this page in your browser now and see how it looks. Test
    its responsiveness to see how it behaves on the smaller screens. The CSS for the
    class, `columns`, looks as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以随意在浏览器中打开这个页面，看看它的样子。测试它的响应性，看看它在较小的屏幕上的表现如何。`columns`类的CSS如下所示：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The CSS for the number classes look as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 数字类的CSS如下所示：
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As you can see, the `columns` class gives a relative position and floats the
    element to the left, with padding and some other style.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`columns`类给出了一个相对位置，并将元素浮动到左侧，带有填充和一些其他样式。
- en: Next add another `div` element with the `row` class. And inside the `row` div,
    add a row of the six smaller `div` elements. Each of the new `div` elements will
    have the classes, `two` and `columns`. These together will take up a span of 12
    columns. Include a short paragraph of text inside each element.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来添加另一个带有`row`类的`div`元素。在`row` div内部，添加一个包含六个较小`div`元素的行。每个新的`div`元素将具有`two`和`columns`类。这两者将占据12列的跨度。在每个元素内部包含一个简短的文字段落。
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In your browser, you can see that these align nicely into six columns of content.
    When you go to a small browser window, you will see that they jump to 100 percent
    width.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，你可以看到它们很好地对齐成六列内容。当你调整到一个小的浏览器窗口时，你会看到它们跳转到100%的宽度。
- en: So far, the grids work in an orderly fashion if you have designed all your element
    to float against the left-hand side of the screen. However, that is not always
    the case; there will always be uses for content to be right, center, or some other
    arbitrary alignment. Don't worry, the Gumby 960 Responsive framework has thought
    of that. Let's add some more rows that demonstrate how to do that.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果你设计的所有元素都浮动在屏幕的左侧，网格就会按照有序的方式工作。然而，情况并非总是如此；总会有内容需要右对齐、居中或其他任意对齐方式。别担心，Gumby
    960响应式框架已经考虑到了这一点。让我们添加一些更多的行，来演示如何做到这一点。
- en: In the first row, we'll make two `div` elements, one on the left-hand side,
    and one on the right-hand side. Add a new `row` div element, and inside it, add
    two more `div` elements. Give the first one, which will lie on the left-hand side
    of the screen, the classes `two` and `columns`. With these two classes, the first
    `div` element floats left and spans across two columns. We want the next `div`
    element to only take up six columns, give it the classes, `six` and `columns`.
    We do not want this next column to float towards the left; instead, it should
    have some space between the previous `div` element and itself. To make this, there
    is a series of classes that have only a set percentage left-margin. In this case,
    we need to push the element four column spans to the right. To do so add the class,
    `push_four`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们将制作两个`div`元素，一个在左侧，一个在右侧。添加一个新的`row` div元素，在其中添加两个`div`元素。给第一个`div`元素，它将位于屏幕左侧，添加类`two`和`columns`。有了这两个类，第一个`div`元素向左浮动并跨越两列。我们希望下一个`div`元素只占据六列，给它添加类`six`和`columns`。我们不希望这个下一个列向左浮动；相反，它应该在前一个`div`元素和自身之间留有一些空间。为了做到这一点，有一系列只有固定百分比左边距的类。在这种情况下，我们需要将元素向右推四列跨度。为此，添加类`push_four`。
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following is the CSS for the `push_four` class:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`push_four`类的CSS：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To make a column span of content *centered*, there is a special class for that.
    I put center in quotes, because it''s not really centered, it''s pseudo-centered.
    Instead of using a `text-align:center` or `float:center` property, the Gumby Grid
    uses a smart left-margin system. The CSS for the centered `six column` div element
    looks as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要使内容的列跨度*居中*，有一个特殊的类。我在引号中放置了center，因为它并不真正居中，它是伪居中。Gumby Grid不使用`text-align:center`或`float:center`属性，而是使用智能左边距系统。居中的`six
    column` div元素的CSS如下所示：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It follows the same pattern as the number classes, a centered `five column`
    row has a greater left margin: `margin-left: 29.787282%`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '它遵循与数字类相同的模式，一个居中的`five column`行具有更大的左边距：`margin-left: 29.787282%`。'
- en: Finally, before we end this recipe, let's make use the framework to build a
    responsive menu. This is worth the little extra time to show at least one of the
    responsive UI elements included in the framework.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在结束这个教程之前，让我们利用框架构建一个响应式菜单。这值得额外花点时间来展示框架中包含的响应式UI元素之一。
- en: Since the CSS is already built we'll just go through the HTML to build this
    menu. Back at the top of the `container` div element, add a `row` div element.
    In the `row` div element add a `nav` element with the `id` value of `"prettynav"`
    and the `pretty navbarclearfix` class. Next, inside the `nav` element, add an
    `a href` tag with a `link` value equal to `#`, a `toggle` class, and a `data-for`
    value as `#prettynav&gt;ul` element tag. Instead of text inside the `a href` element,
    add the image inside that is included in the `img` directory, `img/icon_nav_toggle.gif`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CSS已经构建好了，我们只需通过HTML来构建这个菜单。回到`container` div元素的顶部，添加一个`row` div元素。在`row`
    div元素中添加一个`nav`元素，其`id`值为`"prettynav"`，并且具有`pretty navbarclearfix`类。接下来，在`nav`元素内部，添加一个`a
    href`标签，其`link`值等于`#`，一个`toggle`类，以及一个`data-for`值为`#prettynav&gt;ul`元素标签。在`a href`元素内部添加图像，该图像包含在`img`目录中，`img/icon_nav_toggle.gif`。
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `a href` element works as a button to display the navigation menu, when
    it is hidden in the mobile version of the menu.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`a href`元素在移动版本的菜单中隐藏时，作为显示导航菜单的按钮起作用。'
- en: 'Following the `a href` element, add an unordered list (`ul`) with list items
    (`li`) that contain the links of your navigation:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`a href`元素之后，添加一个无序列表（`ul`），其中包含您导航的链接的列表项（`li`）：
- en: '[PRE40]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This alone creates a nice responsive menu system and that would be exciting
    enough, but there's still more. You can add a submenu to each one of those menu
    list items. To add one submenu, add a `div` element with a class `dropdown`. Inside
    that `div` element, add a submenu `ul` with list items similar to the parent.
    They automatically are converted to a hidden submenu!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就创建了一个不错的响应式菜单系统，这本身就足够令人兴奋了，但还有更多。您可以为每个菜单列表项添加一个子菜单。要添加一个子菜单，添加一个带有`dropdown`类的`div`元素。在该`div`元素内部，添加一个类似于父元素的子菜单`ul`。它们会自动转换为隐藏的子菜单！
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following screenshot illustrates the Gumby framework:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了Gumby框架：
- en: '![How to do it…](img/5442OT_04_05.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_04_05.jpg)'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Gumby 960 Grid framework was designed and built to be an elegant and easy
    layout and element framework. There is not much needed to know how to make it
    work. First, learn how to class your `div` elements to make them work within the
    framework. Secondly, build it. Understanding how to use the UI elements included
    in the framework will require some more involvement, but it will be well worth
    your time.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Gumby 960 Grid框架旨在设计和构建一个优雅且易于布局和元素的框架。不需要太多了解如何使其工作。首先，学习如何对您的`div`元素进行分类，使其在框架内工作。其次，构建它。了解如何使用框架中包含的UI元素将需要更多的参与，但这将是值得您时间的。
- en: The Bootstrap framework makes responsive layouts easy
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap框架使响应式布局变得简单
- en: The Bootstrap framework (formerly known as the **Twitter Bootstrap** framework)
    stands out from most other frameworks, as it is completely responsive out of the
    box. You can either use it as a static framework, or use their additional files
    to quickly deploy a fully responsive site. This is a great tool to use when you
    need to produce fast and good sites, and you are willing to make minimal design
    adjustments to an external standard.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap框架（以前称为**Twitter Bootstrap**框架）与大多数其他框架不同，因为它是完全响应式的。您可以将其用作静态框架，也可以使用它们的附加文件快速部署完全响应式的站点。当您需要快速制作出色的站点，并且愿意对外部标准进行最小的设计调整时，这是一个很好的工具。
- en: Acquiring the framework is as easy as searching for `Bootstrap Framework` and
    going to the first link, [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/),
    and clicking on the big **Download Bootstrap** button. The package includes CSS
    files, images, and JavaScript, but no documentation. There is, however, plenty
    of good documentation online at their site, and the source of their examples is
    highly coherent. This recipe will get you started along the path of using the
    Bootstrap framework.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 获取框架就像搜索“Bootstrap框架”并转到第一个链接[http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)，然后点击大的**下载Bootstrap**按钮一样容易。该软件包包括CSS文件、图像和JavaScript，但没有文档。然而，在他们的网站上有很多很好的在线文档，他们的示例源代码也非常连贯。这个步骤将帮助您开始使用Bootstrap框架。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Building with the Bootstrap framework is remarkably easy; you can get a template
    spun up in a matter of minutes. That being said, let''s push through it. Spin
    up a new HTML file and get started. First, add a link in your header to the Bootstrap
    CSS files so we can on occasion see our work in action:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap框架构建非常容易；您可以在几分钟内创建一个模板。话虽如此，让我们继续努力。创建一个新的HTML文件并开始。首先，在页眉中添加一个链接到Bootstrap
    CSS文件，这样我们偶尔可以看到我们的工作成果：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Let us start with a simple page with a top navigation and content. The navigation
    will respond to the screen's width and optimize for each display. The navigation
    `div` element uses several classes to achieve the desired results; they are `navbarnavbar-inverse
    navbar-fixed-top`. Inside it, add a `div` element with the class `container`.
    Inside the `container` div element, there is a button graphic that is displayed
    in the mobile version. When clicked, it displays the mobile version of the menu.
    The menu is displayed in an optimized manner for both mobile and desktop versions.
    Pretty cool, eh!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个带有顶部导航和内容的简单页面开始。导航将根据屏幕宽度做出响应，并为每个显示进行优化。导航`div`元素使用了几个类来实现期望的结果；它们是`navbarnavbar-inverse
    navbar-fixed-top`。在其中，添加一个带有`container`类的`div`元素。在`container`div元素内，有一个按钮图形，它在移动版本中显示。点击后，它会显示菜单的移动版本。菜单以优化的方式显示在移动和桌面版本中。相当酷，对吧！
- en: 'Following is a sample menu to show how it is put together:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例菜单，展示了它是如何组合在一起的：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Then, insert into your header, a link to the jQuery library.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在页眉中插入一个指向jQuery库的链接。
- en: '[PRE44]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Then, at the bottom of your HTML, right before the closing `body` tag, add a
    link to the `js/bootstrap.js` file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在HTML的底部，在闭合的`body`标签之前，添加一个指向`js/bootstrap.js`文件的链接。
- en: '[PRE45]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Finally, if you haven't already copied the JS directly into your `webroot`,
    do so.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您还没有直接将JS复制到您的`webroot`中，请这样做。
- en: Now, check your slick responsive navigation.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您的时髦响应式导航。
- en: That was great, wasn't it? Now that we're both excited about the Bootstrap framework,
    let's get to work on some responsive content layout. Next, let's go through and
    build what Bootstrap calls a basic marketing site.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 那很棒，不是吗？既然我们都对Bootstrap框架感到兴奋，让我们开始做一些响应式内容布局的工作。接下来，让我们来构建Bootstrap称为基本营销网站的内容。
- en: 'First thing to do is add a `div` element with the `container` class. If you
    look back at our menu, you''ll find that this class is a clever re-usable layout
    element used throughout, to control the responsive width of the containing elements.
    Inside the `container` element, add a new `div` element and give it a class, `hero-unit`.
    Inside the `hero-unit` class, add some content that you want to display in a large
    billboard style on the screen:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是添加一个带有`container`类的`div`元素。如果您回顾我们的菜单，您会发现这个类是一个巧妙的可重复使用的布局元素，用于控制包含元素的响应式宽度。在`container`元素内，添加一个新的`div`元素并给它一个类，`hero-unit`。在`hero-unit`类内，添加一些您想要以大型广告牌样式显示在屏幕上的内容：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Refresh your browser and try that on for size. Everything looks great without
    much effort. Beneath that we want to add some columns of the teaser text. This
    is starting to look like a good landing page. Aren't you glad you are doing this?
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新浏览器，试试看。一切看起来都很好，而且不费吹灰之力。在下面，我们想要添加一些列的引人注目的文本。这开始看起来像一个不错的着陆页。你难道不为自己做这个而高兴吗？
- en: The Bootstrap framework uses a `div` element with a `row` class to outline its
    column spans. So to create a new *row* of content, add a new `div` element with
    the `row` class. Inside the row you have 12 spans available to work your content
    into. For this recipe, let's stick with simple, so insert three new `div` elements,
    each with a `span4` class, inside the `row` div element. Inside each `span4` element,
    add a secondary header and a paragraph of Ipsum ([http://lipsum.com](http://lipsum.com))
    filler text.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap框架使用`div`元素和`row`类来勾勒其列跨度。因此，要创建新的*行*内容，添加一个带有`row`类的新`div`元素。在行内，您有12个跨度可用于将内容放入其中。对于这个步骤，让我们保持简单，所以在`row`div元素内插入三个新的`div`元素，每个都带有`span4`类。在每个`span4`元素内，添加一个次级标题和一段Ipsum
    ([http://lipsum.com](http://lipsum.com))的填充文本。
- en: '[PRE47]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Open up your browser window or refresh it and see this nice layout in action.
    The newest row takes up three columns and collapses nicely into a single column,
    when you go to a mobile browser or windows with a smaller widths.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器窗口或刷新它，看看这个漂亮的布局是如何运行的。最新的行占据了三列，并在移动浏览器或宽度较小的窗口中很好地折叠成单列。
- en: You could copy the entire `row` class element and inner HTML, and paste it to
    add a whole new row of content, and it will behave nicely.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以复制整个`row`类元素和内部HTML，并将其粘贴以添加一个全新的内容行，它会很好地运行。
- en: Now that we have made a good looking page and it did not take any earth-shattering
    exertion, let us add another level to the page. This part is an excellent demonstration
    of the flexibility of the Bootstrap framework. Next, you are going to add a side
    navigation to the page.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经做了一个好看的页面，而且没有费太大的力气，让我们为页面添加另一个级别。这部分是Bootstrap框架灵活性的绝佳演示。接下来，您将在页面上添加一个侧边导航。
- en: In the second `container` class element, wrap the `hero-unit` and `row` elements
    in a new `div` element and assign that element a `span9` class. Next, insert before
    your new element another `div` element with the class `span3`. That should take
    care of the change in layout of the page; next we are going to rapidly build a
    menu inside it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个`container`类元素中，将`hero-unit`和`row`元素包装在一个新的`div`元素中，并为该元素分配一个`span9`类。接下来，在新元素之前插入另一个带有`span3`类的`div`元素。这样就可以处理页面布局的变化；接下来我们将快速在其中构建一个菜单。
- en: 'Add a new `div` element inside your `span3` div class, and give it the classes:
    `well` and `sidebar-nav`. These give the sidebar navigation a good-looking style.
    Now, onto the menu list, add an unordered list (`ul`) with the classes, `nav`
    and `nav-list`. You can add list section headers by assigning a class `nav-header`
    to a list item. Add in each of the list items, a `href` link for the navigation
    items:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`span3` div类中添加一个新的`div`元素，并给它添加`well`和`sidebar-nav`类。这样可以为侧边导航添加一个漂亮的样式。现在，添加一个带有`nav`和`nav-list`类的无序列表(`ul`)到菜单列表中。你可以通过给列表项分配`nav-header`类来添加列表部分标题。在每个列表项中添加一个导航项的`href`链接：
- en: '[PRE48]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You're almost done; there are only a couple of more steps in this recipe. Wrap
    your two new `span*` elements in another `div` element with a `row` or `row-fluid`
    class. Finally, change the `row` div element class name that contains the teaser
    content's elements to `row-fluid`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎完成了；在这个步骤中只剩下几个步骤。将你的两个新的`span*`元素包装在另一个带有`row`或`row-fluid`类的`div`元素中。最后，将包含摘要内容元素的`row`
    div元素类名称更改为`row-fluid`。
- en: '[PRE49]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Congratulations, you are done! You now have a firm base to a professional-looking
    responsive layout and design. You could only make a few modifications to this
    and have a finished product. The following screenshot shows the base Bootstrap
    framework:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你完成了！现在你有了一个专业外观的响应式布局和设计的坚实基础。你只需要对此进行一些修改，就可以得到一个成品。以下截图显示了基本的Bootstrap框架：
- en: '![Getting ready](img/5442OT_04_06.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5442OT_04_06.jpg)'
- en: How it works...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Like magic! No really, the Bootstrap framework has to be one of the easiest
    and well thought-out frameworks I've worked with yet. Once you go through the
    recipe and their documentation to get familiar with the classes and layout, it's
    very easy to rapidly develop your projects.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 就像魔术一样！不是开玩笑，Bootstrap框架必须是我使用过的最简单和最周到的框架之一。一旦你熟悉了类和布局，通过这个配方和他们的文档，快速开发你的项目就变得非常容易。
- en: There are some specific items I want to discuss. First the responsive menu;
    the top `div` element inside the `container` class is `button`, which is displayed
    only in the mobile version, and its purpose is, when clicked, to reveal the hidden
    menu `div` element, `nav-collapse`, in a mobile style.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些具体的事项我想讨论。首先是响应式菜单；`container`类中顶部的`div`元素是`button`，它只在移动版本中显示，其目的是在点击时以移动样式显示隐藏的菜单`div`元素`nav-collapse`。
- en: This, by itself, gives you a great starter for a usable and very elegant responsive
    menu. However, you will find that the button does not work by itself, that's because
    we need to add some JavaScript to make this battle-station fully operational.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这本身就为你提供了一个可用且非常优雅的响应式菜单的良好起点。然而，你会发现按钮本身不起作用，这是因为我们需要添加一些JavaScript来使这个战斗站完全运转。
- en: The responsive layout does heavy lifting behind the scenes for you also. Each
    row of the columns you create takes up the specified columns, but collapses nicely
    into a single column when you go to a mobile browser, or a window with small width.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式布局在幕后为你做了大量工作。你创建的每一列都占据了指定的列，但在移动浏览器或窄宽窗口中时，会很好地折叠成单列。
- en: There's more...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is so much more you can do with this framework. There are rich elements,
    menus, UI functions, and animations galore included in the Bootstrap framework.
    Take some time and get a more in-depth understanding of the framework and you
    will be happy you did. After learning this I found that I could deploy new work
    much more quickly and with a much less frustrating process.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框架还有很多你可以做的事情。Bootstrap框架中包含了丰富的元素、菜单、UI功能和动画。花点时间深入了解框架，你会发现这是件值得的事情。学会这些之后，我发现我可以更快地部署新的工作，而且过程也不那么令人沮丧。
