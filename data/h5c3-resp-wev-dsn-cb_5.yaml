- en: Chapter 5. Making Mobile-first Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。制作移动优先Web应用程序
- en: 'In this chapter, you will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: Using the Safari Developer Tools' User Agent switcher
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Safari开发人员工具的用户代理切换器
- en: Masking your user agent in Chrome with a plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chrome插件在Chrome中掩盖您的用户代理
- en: Using browser resizing plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器调整大小插件
- en: Learning the viewport and its options
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习视口及其选项
- en: Adding tags for jQuery Mobile
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为jQuery Mobile添加标签
- en: Adding a second page in jQuery Mobile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中添加第二个页面
- en: Making a list element in jQuery Mobile
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中制作列表元素
- en: Adding a mobile native-looking button with jQuery Mobile
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery Mobile添加移动原生外观按钮
- en: Adding a mobile stylesheet for mobile browsers only using the media query
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅为移动浏览器添加移动样式表使用媒体查询
- en: Adding JavaScript for mobile browsers only
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅为移动浏览器添加JavaScript
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will focus our efforts on mobile-first Responsive Design.
    By this, we mean first designing your site for the mobile device, and then applying
    variation or even a wholly different look for the desktop. We'll cover a few recipes
    on jQuery Mobile, a free and open source library of mobile UI elements and widgets.
    In addition, we'll build some client-side scripting to handle a unique look only
    for mobile devices.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于移动优先响应式设计。这意味着首先为移动设备设计您的站点，然后为桌面应用程序应用变化甚至完全不同的外观。我们将介绍一些关于jQuery
    Mobile的配方，这是一个免费的开源移动UI元素和小部件库。此外，我们将构建一些客户端脚本来处理仅适用于移动设备的独特外观。
- en: Using the Safari Developer Tools' User Agent switcher
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Safari开发人员工具的用户代理切换器
- en: For developing mobile-first applications, you will need to deploy them locally
    and test the various features you have developed. Many of the responsive web recipes
    we have worked on so far relied on media queries to determine layout based on
    size to deliver the optimized view of your site. This is not the only way in which
    apps can deliver mobile layout, there are more. One method is, by sniffing the
    **user agent**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发移动优先应用程序，您需要在本地部署它们并测试您开发的各种功能。到目前为止，我们已经使用了许多响应式Web配方，依赖于媒体查询来确定基于大小的布局，以提供站点的优化视图。这不是应用程序可以提供移动布局的唯一方式，还有更多。一种方法是通过**用户代理**来嗅探。
- en: You may already know about the user agent, but let's assume you don't. Besides,
    knowing everything already simply defeats the purpose of buying the book, now
    doesn't it? The user agent exists in the request header and identifies the client
    software making the request. It contains information about your processor, operating
    system version, browser, rendering engine, IP address, and other identifying information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经了解用户代理，但让我们假设您不了解。此外，已经知道一切简单地违背了购买这本书的目的，不是吗？用户代理存在于请求标头中，并标识发出请求的客户端软件。它包含有关您的处理器、操作系统版本、浏览器、渲染引擎、IP地址和其他标识信息的信息。
- en: According to the needs of the project or the preference of the developer, some
    websites are designed to display different template files for mobile devices,
    or based on other details of the user agent data. This method requires a different
    server or client intelligence to read the user agent and interpret its data to
    deliver the presentation for that scenario.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目的需求或开发人员的偏好，一些网站被设计为为移动设备显示不同的模板文件，或者基于用户代理数据的其他细节。这种方法需要不同的服务器或客户端智能来读取用户代理并解释其数据，以提供该场景的演示。
- en: So you've created a new web application, and the software displays the mobile
    template when the user agent details a mobile device. However, you want to be
    able to test it on the fly and not have to spin up a web server, so the next best
    thing is to use the user agent masking feature in Safari.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你创建了一个新的Web应用程序，当用户代理详细信息为移动设备时，软件会显示移动模板。但是，您希望能够即时测试它，而不必启动Web服务器，因此下一个最好的方法是在Safari中使用用户代理掩码功能。
- en: Using the Safari browser user agent switcher is a win-win, because not only
    does it mimic the user agent of the mobile Safari browser on iOS devices, but
    it also mimics the user agent of the Android browsers. So you can be at peace
    because the Android user agent was changed to say that it is also Mobile Safari,
    just to make your life easier. Wasn't that nice of them?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Safari浏览器用户代理切换器是双赢的，因为它不仅模仿了iOS设备上移动Safari浏览器的用户代理，还模仿了Android浏览器的用户代理。所以您可以放心，因为Android用户代理已更改为也是Mobile
    Safari，只是为了让您的生活更轻松。他们真好。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's a good practice to clearly specify in your scope of work which browsers
    and user agents you will be testing for.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的工作范围中明确指定您将进行测试的浏览器和用户代理是一个很好的做法。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: On an Apple computer, it's already installed. You are ahead of the game. So
    hang on while the Windows people catch up.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在苹果电脑上，它已经安装好了。你领先一步。所以等着Windows用户赶上吧。
- en: It looks unlikely that Apple will continue developing Safari for Windows. In
    fact, when you search for `Safari Windows`, the first link is not to the Safari
    homepage, but to an Apple support page with a link to the last Safari for Windows
    version, Safari 5.1.7 for Windows, not to the latest version (Version 6). But
    for the point of the recipe, let us continue.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果公司似乎不太可能继续为Windows开发Safari。事实上，当您搜索`Safari Windows`时，第一个链接不是Safari主页，而是一个包含指向最新Safari
    for Windows版本Safari 5.1.7 for Windows链接的苹果支持页面，而不是最新版本（版本6）。但是为了这个配方的目的，让我们继续。
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: First, open the Safari browser; you will want to go to a website that works
    as a demonstration for reading the user agent. Go to [http://whatsmyuseragent.com](http://whatsmyuseragent.com),
    and the page will show you details of your user agent.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开Safari浏览器；您将要访问一个作为读取用户代理演示的网站。转到[http://whatsmyuseragent.com](http://whatsmyuseragent.com)，页面将显示您的用户代理的详细信息。
- en: 'In Safari, go to **Safari** | **Preferences**, or press *Command* `+` *,*.
    In the **Advanced** tab, select the **Show Develop menu in menu bar** checkbox.
    You can see this illustrated in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Safari中，转到**Safari** | **首选项**，或按下*Command* `+` *,*。在**高级**选项卡中，选择**在菜单栏中显示开发菜单**复选框。您可以在以下截图中看到这一点：
- en: '![How to do it…](img/5442OT_05_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_01.jpg)'
- en: 'Now the menu bar shows the menu option **Develop**. Click on it and select
    **user agent**; a sub menu appears with different user agent options. There are
    a number of useful options here, but for this recipe, the most contextually useful
    ones are **Safari iOS 5.1 - iPhone** and **Safari iOS 5.1 - iPad** (it is very
    likely that you may have a version other than Version 5.1). This is demonstrated
    in the next screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在菜单栏显示了菜单选项**开发**。单击它，然后选择**用户代理**；一个子菜单出现，其中包含不同的用户代理选项。这里有许多有用的选项，但对于这个教程，最有用的是**Safari
    iOS 5.1 - iPhone**和**Safari iOS 5.1 - iPad**（很可能您的版本可能不是5.1）。这在下一个截图中有演示：
- en: '![How to do it…](img/5442OT_05_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_02.jpg)'
- en: 'Select one of the iOS versions; the page will automatically be refreshed. You
    will now see the new user agent information, as illustrated in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择其中一个iOS版本；页面将自动刷新。您现在将看到新的用户代理信息，如下一个截图所示：
- en: '![How to do it…](img/5442OT_05_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_03.jpg)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: I know it doesn't look like much happened, but what did happen was pretty big.
    The browser gave the server information about your computer and browser, and it
    served you a different web page as a result. You could build logic that delivers
    a special stylesheet, template, scripts, or completely different page content
    for mobile browsers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道看起来好像没有发生什么，但发生的事情很重要。浏览器向服务器提供了关于您的计算机和浏览器的信息，并因此为您提供了不同的网页。您可以构建逻辑，为移动浏览器提供特殊的样式表、模板、脚本或完全不同的页面内容。
- en: Masking your user agent in Chrome with a plugin
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件在Chrome中伪装您的用户代理
- en: The Chrome browser is rich with a multitude of plugins that you can use for
    just about any purpose under the sun. Let's explore a user-agent masking plugin
    to mask your user agent.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome浏览器拥有大量插件，您可以为几乎任何目的使用。让我们探索一个用户代理伪装插件来伪装您的用户代理。
- en: Why would you want to "mask" your user agent? Isn't that dishonest? Okay I'll
    admit it, it is. But here is one of the few cases where the ends genuinely justify
    the means. Besides, there's no harm done; it's not like the server figures out
    that your browser was lying to it and feels deceived and hurt. Masking your user
    agent gives you the power to convince the web server that your desktop browser
    is really a mobile browser. If the server believes you are using a mobile browser
    and its logic dictates that it should deliver a mobile version, then that's what
    you will get.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要“伪装”您的用户代理？这不诚实吗？好吧，我承认，是的。但这是为数不多的几种情况之一，结果确实证明了手段。此外，没有任何伤害；就像服务器发现您的浏览器在撒谎并感到被欺骗和受伤一样。伪装您的用户代理可以让您说服Web服务器，您的桌面浏览器实际上是移动浏览器。如果服务器相信您正在使用移动浏览器，并且其逻辑决定应该提供移动版本，那么您将得到移动版本。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We want to find a way to be able to toggle between different user agents, and
    we want it to be really simple. In fact, we want it to be a button on the browser
    that we can press and switch. So where will we get this awesome bit of technological
    trickery? At the Chrome Web Store!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想找到一种方法，可以在不同的用户代理之间切换，并且希望它非常简单。事实上，我们希望它是浏览器上的一个按钮，我们可以按下并切换。那么我们从哪里可以得到这个令人惊叹的技术把戏？在Chrome网络商店！
- en: I've tried a few different Chrome browser plugins and have found one that has
    become a favorite in my responsive toolkit. The **User-Agent Switcher** for Chrome
    offers a snappy method to toggle between a comprehensive list of user agents.
    To get it, take the easier path and do a search for `Google UA Spoofer`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试了一些不同的Chrome浏览器插件，并找到了一个成为我响应式工具包中最喜欢的插件。Chrome的**用户代理切换器**提供了一种快速切换全面用户代理列表的方法。要获得它，采取更简单的路径，搜索`Google
    UA Spoofer`。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The first search result should be a link to the User-Agent Switcher in the Chrome
    Web Store. If it is, go to it and click on the **ADD TO CHROME** button. That's
    all you need to do to install it. Using it will be easier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个搜索结果应该是指向Chrome网络商店中的用户代理切换器的链接。如果是的话，转到该链接，然后点击**添加到Chrome**按钮。这就是您需要安装它的全部内容。使用它将更容易。
- en: 'Now look at the topmost section of your browser, to the right of the address
    bar, and find a new icon in the shape of a tiny mask. When you click on it, a
    menu of different browsers pops up, with submenus for available versions. We tested
    it, it is easy. See the following screenshot for proof:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看浏览器顶部的最上方部分，地址栏右侧，找到一个新图标，形状像一个小面具。当您点击它时，会弹出一个不同浏览器的菜单，其中包含可用版本的子菜单。我们测试过了，很容易。看下一个截图以证明：
- en: '![How to do it...](img/5442OT_05_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_04.jpg)'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Chrome User Agent Spoofer browser plugin intercepts the normal browser user
    agent information in the request header and replaces it with the spoofed user
    agent information. So far, we've merely discussed how to test the user agent spoofer.
    How you will design your site to handle different user agents is a completely
    different subject.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome用户代理欺骗浏览器插件拦截了请求头中的正常浏览器用户代理信息，并用欺骗的用户代理信息替换它。到目前为止，我们只是讨论了如何测试用户代理欺骗器。如何设计您的网站来处理不同的用户代理是一个完全不同的主题。
- en: To see it in action, go to [http://whatsmyuseragent.com/](http://whatsmyuseragent.com/)
    and then toggle the browser plugin, from **iOS** to **iPhone**. You will see the
    user agent information change to **iPhone**. Try some more experiments and see
    how the masked user agent affects your favorite sites.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要看它的效果，请转到[http://whatsmyuseragent.com/](http://whatsmyuseragent.com/)，然后切换浏览器插件，从**iOS**切换到**iPhone**。您将看到用户代理信息更改为**iPhone**。尝试一些更多的实验，看看伪装的用户代理如何影响您喜欢的网站。
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Take a look at some of the various popular sites around the Web and you'll see
    how they handle different user agents. Some serve a different theme, while some
    redirect your browser to a subdomain for their mobile version. For example, [http://facebook.com](http://facebook.com)
    redirects to [http://m.facebook.com/?_rdr](http://m.facebook.com/?_rdr) for the
    iOS user agent, and [https://plus.google.com/](https://plus.google.com/) redirects
    to [https://plus.google.com/app/basic/stream](https://plus.google.com/app/basic/stream)
    for a mobile version of their site.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看看网络上一些流行的网站，你会看到它们如何处理不同的用户代理。有些提供不同的主题，有些将你的浏览器重定向到他们的移动版本的子域。例如，[http://facebook.com](http://facebook.com)
    会将iOS用户代理重定向到[http://m.facebook.com/?_rdr](http://m.facebook.com/?_rdr)，而[https://plus.google.com/](https://plus.google.com/)
    会将移动版本的网站重定向到[https://plus.google.com/app/basic/stream](https://plus.google.com/app/basic/stream)。
- en: 'The following screenshot shows how the masked user agent displays the page
    differently:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了伪装用户代理如何显示页面的不同之处：
- en: '![There''s more...](img/5442OT_05_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/5442OT_05_05.jpg)'
- en: Using browser resizing plugins
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浏览器调整大小插件
- en: I'll be frank with you; this recipe is about installing and using the browser
    resizing plugin that I use. If you have a better one, tell me about it. The one
    I have chosen after searching is called "Window Resizer".
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我会坦率地告诉你；这个教程是关于安装和使用我使用的浏览器调整大小插件。如果你有更好的选择，请告诉我。我在搜索后选择的插件叫做“Window Resizer”。
- en: Apart from testing on the target device, resizing the window with the plugin
    is the most accurate method of testing your media query. It is, however, only
    part of the testing you should put your responsive site through. Be sure to test
    it with emulators, and of course, actual devices, before deploying it. There's
    nothing worse than deploying a live site and watching it crash and burn after
    someone brings it to your attention.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在目标设备上测试外，使用插件调整窗口大小是测试媒体查询的最准确方法。然而，这只是你应该对响应式网站进行的测试的一部分。在部署之前，一定要使用模拟器和实际设备进行测试。没有什么比部署一个现场网站后，有人提醒你它崩溃和燃烧更糟糕的了。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Google is your friend. Search for `Window Resizer`. The first search result
    should be the Window Resizer plugin in the Chrome Web Store. There it is, like
    a beacon in the night! It has five stars, it's free; how could you not have clicked
    on that link already?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌是你的朋友。搜索“Window Resizer”。第一个搜索结果应该是Chrome网上应用店中的Window Resizer插件。就像夜晚的灯塔一样！它有五颗星，而且是免费的；你怎么能不点击那个链接呢？
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: You will find yourself at the install page in the Chrome Web Store if you have
    gone along with me. You will see an attractive, wide, and calming deep blue button
    that says **+ ADD TO CHROME**. You are drawn to it and feel the need to click
    on it. You see in the blue, the sky at night that you look up to and wonder how
    far you will travel one day. You think about all the different sizes your browser
    could be. You think about the pain you feel while dragging the corners of your
    window, trying to guess its size. You can't take it anymore. Click on the button!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟着我走，你会发现自己在Chrome网上应用店的安装页面上。你会看到一个吸引人的、宽阔而宁静的深蓝色按钮，上面写着**+ 添加到Chrome**。你被吸引住了，感觉需要点击它。你看到了蓝色，夜晚你仰望的天空，想着有一天你会走多远。你想着你的浏览器可以有多种不同的大小。你想着拖动窗口角落时的痛苦，试图猜测它的大小。你受不了了。点击按钮！
- en: A flutter of movement across your browser window indicates that changes are
    being made. In the end, the blue button turns green. You are done here.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你的浏览器窗口上出现了一阵动作的飘忽。最后，蓝色按钮变成了绿色。你在这里完成了。
- en: In your browser window, a new icon that looks like a tiny browser window has
    found its home on the right-hand side of your address field. Curiosity dictates
    that you need to know what this thing can do.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器窗口，一个看起来像一个微小浏览器窗口的新图标已经找到了它的位置，位于地址栏右侧。好奇心驱使你需要知道这个东西能做什么。
- en: This is a virtually perfect way to test different media queries and responsive
    versions of your website, second only to testing it directly on the target device.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是测试不同媒体查询和网站响应式版本的几乎完美的方法，仅次于直接在目标设备上测试。
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Use the button to test your responsive designs to pixel-perfect precision.
    When you click on it, it unveils a list of different browser window sizes. Each
    one is perfectly measured and will bend your browser''s size according to your
    will. The browser plugin does all of the guesswork and precise measuring for you,
    as it directly affects the browser window size at the click of a button! See the
    following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个按钮来测试你的响应式设计，达到像素级的精确度。当你点击它时，它会展示一个不同的浏览器窗口大小的列表。每一个都是完美测量的，会根据你的意愿调整你的浏览器大小。这个浏览器插件为你做所有的猜测和精确测量，因为它可以在点击按钮时直接影响浏览器窗口大小！见下面的截图：
- en: '![How it works...](img/5442OT_05_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/5442OT_05_06.jpg)'
- en: Learning the viewport and its options
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习视口及其选项
- en: If nothing else, it can be said that the purpose of the viewport is to tame
    the mobile browser window. The viewport is vital to determining how your mobile
    browser renders the mobile web page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有别的，可以说视口的目的是驯服移动浏览器窗口。视口对于确定你的移动浏览器如何呈现移动网页至关重要。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you are using an Apple computer, an iOS simulator can be obtained by downloading
    Xcode from Apple. It is part of the Xcode package. I usually get to it by using
    Spotlight. Press *Command* + the Space bar; the Spotlight search field appears
    in the top-right corner of your screen. Start typing in `iOS Simulator`, and it
    will appear in the search results. Click on it to spin up the iOS simulator.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用苹果电脑，可以通过从苹果下载Xcode来获得iOS模拟器。它是Xcode软件包的一部分。我通常通过使用Spotlight来找到它。按下*Command*
    + 空格键；Spotlight搜索框会出现在屏幕右上角。开始输入“iOS Simulator”，它会出现在搜索结果中。点击它来启动iOS模拟器。
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open up one of the responsive projects that you've done from a previous recipe
    project. I suggest opening up the [resp-width-layout-media-query.html](http://resp-width-layout-media-query.html)
    project from the *Creating a responsive width layout with media query* recipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 打开之前从上一个配方项目中完成的响应式项目之一。我建议打开*使用媒体查询创建响应式宽度布局*配方中的[resp-width-layout-media-query.html](http://resp-width-layout-media-query.html)项目。
- en: To get an iOS simulator for Windows, you'll need to find one on the Web. After
    searching, I found a good one at [http://iphone4simulator.com/](http://iphone4simulator.com/),
    and another at [http://iphonetester.com/](http://iphonetester.com/). To use them,
    you'll need to upload your project files to a web host before this web simulator
    can view it. The simulator cannot read files from your local hard drive, unless
    you are running a local web server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上获得iOS模拟器，你需要在网上找到一个。经过搜索，我在[http://iphone4simulator.com/](http://iphone4simulator.com/)找到了一个好的模拟器，还有一个在[http://iphonetester.com/](http://iphonetester.com/)。要使用它们，你需要在将项目文件上传到Web主机之前，这个Web模拟器才能查看它。该模拟器无法读取你本地硬盘上的文件，除非你运行一个本地Web服务器。
- en: 'First, for comparison, view the file in your browser. Then in your iPhone simulator,
    enter the URL of the files, and you''ll discover the shock and horror of seeing
    your site looking just like the desktop version. I experienced the same frustration
    when my early responsive projects did not work the way I wanted them to. The problem
    is that the mobile browser does not know what size you want it to be. It is smart
    but not clever. Like all software, it needs good instructions. So take a deep
    breath and we will fix it together. The problem is illustrated in the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了比较，在你的浏览器中查看文件。然后在你的iPhone模拟器中，输入文件的URL，你会发现震惊和恐惧，因为你的网站看起来就像桌面版本一样。当我的早期响应式项目不按照我想要的方式工作时，我也经历了同样的挫败感。问题在于移动浏览器不知道你希望它的大小是多少。它很聪明，但不够机智。就像所有软件一样，它需要良好的指示。所以深呼吸，我们将一起解决它。问题在下面的截图中有所说明：
- en: '![How to do it…](img/5442OT_05_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_07.jpg)'
- en: 'You can tell the mobile browser what it should do by configuring the viewport.
    First add the simple viewport `<meta>` tag:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过配置viewport告诉移动浏览器它应该做什么。首先添加简单的viewport `<meta>`标签：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Before we go any further, I should tell you about this caveat. If you don't
    intend to do a design for the mobile device, then leave out the viewport `<meta>`
    tag. It can cause unintended consequences on your page delivery. In fact, it might
    just show a sliver of your page and not allow the viewer to pan out our scroll
    to view the whole page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我应该告诉你一个警告。如果你不打算为移动设备设计页面，那就不要包含viewport `<meta>`标签。它可能会对你的页面交付产生意想不到的后果。事实上，它可能只会显示你页面的一小部分，不允许观众放大或滚动查看整个页面。
- en: Now we will discuss its options. First, the width; I'm a big fan of the K.I.S.S.
    principle (keep it short and simple). Unless you have a reason for specifying
    a particular width, enter the device width as the viewport width. This way, it
    will read the device width and set that as the page width. Setting a specific
    width, `1000px` for example, will look okay on your iPad, but on your phone devices
    it will render too wide and nullify the media queries smaller than that width.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论它的选项。首先是宽度；我非常喜欢K.I.S.S.原则（保持简短和简单）。除非你有特定的宽度要求，将设备宽度作为viewport宽度。这样，它将读取设备宽度并将其设置为页面宽度。设置特定的宽度，例如`1000px`，在iPad上看起来还可以，但在手机设备上会呈现得太宽，使小于该宽度的媒体查询无效。
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you''ve made the change, open your iOS simulator''s browser and view the
    file. You can see the fixed version in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你做出了改变，打开你的iOS模拟器的浏览器并查看文件。你可以在下面的截图中看到修复后的版本：
- en: '![How to do it…](img/5442OT_05_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_08.jpg)'
- en: Next, let's talk about scaling. Let's assume you have no special request to
    do anything weird, like starting the scale with any value other than one. Add
    to the viewport `<meta>` tag, the initial scale value of `1`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们谈谈缩放。假设你没有特殊要求，不要做任何奇怪的事情，比如以除了一之外的任何值开始缩放。在viewport `<meta>`标签中添加初始缩放值`1`。
- en: Okay, I know I said don't do anything weird, but just for demonstration, change
    your initial scale to `2`. Refresh your screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我知道我说过不要做任何奇怪的事情，但只是为了演示，将你的初始比例改为`2`。刷新你的屏幕。
- en: Next, change it to `0.4`. Remember this is just for demonstration. Please refresh
    your screen again. In the portrait view, you can see that the web page uses the
    small screen media query. Now, change the orientation of the simulator to bring
    it to landscape mode. You will now see that the larger media query is active.
    That was an interesting experiment; now change your initial scale back to `1`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将其更改为`0.4`。请记住，这只是为了演示。请再次刷新你的屏幕。在纵向视图中，你会看到网页使用了小屏幕媒体查询。现在，更改模拟器的方向，使其进入横向模式。现在你会看到较大的媒体查询被激活。这是一个有趣的实验；现在将你的初始比例改回`1`。
- en: Finally, do you want your viewers to be able to zoom in and out using the multi-touch
    pinch? Use the meta attribute `maximum-scale` to limit how much zooming you want
    to allow. Set the maximum scale to `1` if you want to disallow zooming.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你是否希望你的观众能够使用多点触控缩放？使用meta属性`maximum-scale`来限制你想要允许的缩放程度。如果你不想允许缩放，将最大缩放设置为`1`。
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The viewport `<meta>` tag was included in the Safari Mobile browser by Apple
    initially, and was then added to other browsers. It is used to define the width
    the page should be read in. When the browser sees the viewport `<meta>` tag with
    the width attribute defined, it loads the page at the scale defined in that width
    setting, coupled with the initial scale attribute.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: viewport `<meta>`标签最初是由苹果的Safari移动浏览器添加的，然后被添加到其他浏览器中。它用于定义页面应该以什么宽度进行阅读。当浏览器看到viewport
    `<meta>`标签中定义了宽度属性时，它会以该宽度设置中定义的比例加载页面，再加上初始缩放属性。
- en: Adding tags for jQuery Mobile
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为jQuery Mobile添加标签
- en: This recipe jumps deep into a new area of responsive design, that is, mobile-first.
    Mobile-first, in a nutshell, means that you would first design for a mobile version
    of the site and then make modifications for the desktop. Now, this does not mean
    that you are designing a "mobile only" website, only that designing your layouts
    and styles for mobile comes first.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例深入到了一个新的响应式设计领域，即移动优先。移动优先，简而言之，意味着你首先设计网站的移动版本，然后对桌面进行修改。现在，这并不意味着你正在设计一个“仅限移动”的网站，只是移动端的布局和样式首先设计。
- en: Mobile-first may require rethinking your designs, or at least designing from
    a different perspective. But isn't change good? Can't we all improve our design
    skills by trying out new approaches? Isn't Darwinism merely the survival of those
    who are best suited to adapt to change?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Mobile-first可能需要重新思考你的设计，或者至少从不同的角度进行设计。但改变不是好事吗？我们不是可以通过尝试新的方法来改进我们的设计技能吗？达尔文主义不仅仅是适应变化的人才能生存吗？
- en: So let's go ahead with an open mind and try some mobile-first development.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们以开放的心态前进，尝试一些移动优先的开发。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, hop on over to the jQuery Mobile site. It is at [http://jquerymobile.com](http://jquerymobile.com).
    Otherwise, you can simply search for `jQuery Mobile` if you are lazy like me.
    I'll provide the direct link if you don't want to search for it and because you
    are my special buddy. The direct link to the site is [http://lmgtfy.com/?q=jquery+mobile&l=1](http://lmgtfy.com/?q=jquery+mobile&l=1).
    I'll even shorten that for you; go to [http://bit.ly/TMpuB8](http://bit.ly/TMpuB8).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，跳转到jQuery Mobile网站。网址是[http://jquerymobile.com](http://jquerymobile.com)。否则，如果你像我一样懒得话，你可以简单地搜索`jQuery
    Mobile`。如果你不想搜索，因为你是我的特别朋友，我会提供直接链接。网站的直接链接是[http://lmgtfy.com/?q=jquery+mobile&l=1](http://lmgtfy.com/?q=jquery+mobile&l=1)。我甚至会为你缩短链接；访问[http://bit.ly/TMpuB8](http://bit.ly/TMpuB8)。
- en: Here, you can download the library if you want to host your files locally (and
    there are some very good reasons to do that); for this recipe, however, we can
    do it the more expedient way and let someone else host all the necessary files.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果你想要在本地托管文件，你可以下载这个库（而且有一些非常好的理由可以这样做）；然而，对于这个示例，我们可以更加迅速地让其他人托管所有必要的文件。
- en: The jQuery Mobile site has a veritable cornucopia of docs and samples. It even
    has download builders, so you can scale down the necessary libraries to just those
    that are needed to run your mobile web app.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile网站有大量的文档和示例。它甚至有下载构建器，所以你可以缩减必要的库，只使用那些运行你的移动web应用程序所需的文件。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, create a new HTML document in your IDE. Add the viewport `<meta>` tag
    to your header:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的IDE中创建一个新的HTML文档。在头部添加viewport `<meta>`标签：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, include links to the jQuery Mobile CSS and JavaScript files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，包括链接到jQuery Mobile CSS和JavaScript文件。
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It's worth it to pause for a pedagogical minute and talk about your stylesheets.
    In the previous piece of code, we are linking to a remote jQuery CSS. I would
    recommend you (if you are going to host this file locally) to leave it as is and
    add all of your new CSS for your elements in an entirely different stylesheet.
    Additionally, if you want to make any changes to jQuery's CSS, add another CSS
    file and make explicit namespaced overrides, or use the `!important` override.
    Name this something like `jQuery-mobile-changes.css`. I don't expect that you
    will need to do this, but just in case you do, this is a good way to handle it.
    I recommend this because when a new version of jQuery is released, you won't need
    to break your site when you upgrade.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 值得停下来进行一分钟的教学，并谈谈你的样式表。在前面的代码中，我们链接到了远程的jQuery CSS。我建议你（如果你要在本地托管这个文件）保持原样，并在一个完全不同的样式表中添加你所有新的元素的CSS。另外，如果你想对jQuery的CSS进行任何更改，添加另一个CSS文件并进行显式的命名空间覆盖，或者使用`!important`覆盖。将其命名为`jQuery-mobile-changes.css`之类的东西。我不认为你会需要这样做，但以防万一，这是一个处理的好方法。我建议这样做是因为当一个新版本的jQuery发布时，你不需要在升级时破坏你的网站。
- en: 'That covers most of your header. Now let''s create some basic content for the
    page. First, let''s wrap the page with a `<div>` element:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上涵盖了你的页眉大部分内容。现在让我们为页面创建一些基本内容。首先，让我们用一个`<div>`元素包裹页面：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One of the really great features of jQuery Mobile is that it uses tags, which
    you can put inside the HTML elements that are not used to render your page. The
    benefit is that you can use the same template for your desktop site just by swapping
    out the jQuery Mobile scripts and styles for your own. Next, add some tags to
    your wrapping `<div>` element that tell jQuery Mobile to act on this page. Add
    `data-role="page"` to the element.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile的一个非常棒的特性是它使用标签，你可以将这些标签放在HTML元素中，这些元素不用来渲染你的页面。好处是你可以通过替换jQuery
    Mobile脚本和样式来在桌面站点上使用相同的模板。接下来，向包裹的`<div>`元素添加一些标签，告诉jQuery Mobile在这个页面上起作用。在元素中添加`data-role="page"`。
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's demonstrate by building a sample text page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过构建一个示例文本页面来演示。
- en: Add a new `h1` header title wrapped in a `<div>` element. To the `<div>` element,
    add a `data-role="header"` attribute. Then, open the file in a browser to see
    the jQuery Mobile theme.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个`<div>`元素中添加一个新的`h1`标题。给`<div>`元素添加一个`data-role="header"`属性。然后，在浏览器中打开文件，查看jQuery
    Mobile主题。
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That's a good start; let's continue by adding some more examples of page structure
    in jQuery Mobile.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的开始；让我们继续添加一些jQuery Mobile中页面结构的示例。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can also give these elements IDs and classes for your desktop version.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以为桌面版本给这些元素添加ID和类。
- en: Next, add a body. Add a paragraph of some filler text and then wrap the paragraph
    in a `<div>` element. Assign an HTML5 data attribute `data-role:"content"` to
    the `<div>` element.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个body。添加一段填充文本，然后将段落包裹在一个`<div>`元素中。给`<div>`元素分配一个HTML5数据属性`data-role:"content"`。
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly, add a footer. Wrap a simple text in an `h4` tag, and wrap that in
    a `<div>` element. Now give that `<div>` element the attribute `data-role="footer"`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，添加一个页脚。在一个`<div>`元素中包裹一个简单的文本，然后在一个`<div>`元素中包裹一个`h4`标签。现在给这个`<div>`元素添加属性`data-role="footer"`：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That''s all there is to it. The jQuery Mobile site has great documentation
    and examples on how to further build mobile sites using their framework. We will
    be going through more jQuery Mobile recipes in this chapter. Go check them out.
    This is how your page will look with jQuery Mobile:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。jQuery Mobile网站有很好的文档和示例，介绍了如何进一步使用他们的框架构建移动站点。在本章中，我们将继续介绍更多的jQuery Mobile示例。去看看吧。这是使用jQuery
    Mobile的页面效果：
- en: '![How to do it...](img/5442OT_05_09.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_09.jpg)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: jQuery Mobile uses HTML5 data attributes to fire the scripts for markup and
    widgets. The script will automatically act when you place the data attribute in
    the element.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile使用HTML5数据属性来触发标记和小部件的脚本。当您在元素中放置数据属性时，脚本将自动起作用。
- en: Adding a second page in jQuery Mobile
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中添加第二个页面
- en: There is a really cool feature in jQuery Mobile that allows you to divide a
    bigger HTML page into smaller, digestible parts. Imagine you have a page that
    has a lot of content and you don't want to force your audience to keep scrolling
    down to read. Consider using jQuery Mobile's multipage template structure. The
    user experience of a web page on a mobile device is very different from that of
    the one on a desktop. On the old desktop Web, it was often said, "Content is king";
    now that the Web is mobile, there is limited space, and it's easy for all that
    content to become too much content. You may want to consider limiting some of
    what is displayed on each page. In this recipe, we will use jQuery Mobile to divide
    a large page with lots of data into smaller digestible bits.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中有一个非常酷的功能，允许您将一个更大的HTML页面分成更小、可消化的部分。想象一下，您有一个包含大量内容的页面，您不希望强迫您的受众不断向下滚动阅读。考虑使用jQuery
    Mobile的多页面模板结构。移动设备上的网页用户体验与桌面上的网页用户体验非常不同。在旧的桌面Web上，经常说“内容为王”；现在Web是移动的，空间有限，所有内容很容易变得过多。您可能希望考虑限制每个页面显示的一些内容。在本示例中，我们将使用jQuery
    Mobile将包含大量数据的大页面分成更小的可消化部分。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the previous recipe, we built a simple page using jQuery Mobile tags. Let's
    dig up the file from that recipe and save it as a new file to work on. This will
    serve as a starting point for this recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们使用了jQuery Mobile标记构建了一个简单的页面。让我们找出那个示例的文件，并将其另存为一个新文件进行操作。这将作为本示例的起点。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add an ID of `p1` to the outer, wrapping `<div>` element (with the page `data-role`).
    This will help jQuery identify and transition between the multipage elements.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部包裹的`<div>`元素（带有页面`data-role`）中添加ID为`p1`。这将帮助jQuery识别和在多页面元素之间进行过渡。
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You have created what jQuery Mobile will recognize as the first page among the
    multiple pages. Let's create the next one. Create new opening and closing `<div>`
    elements right before the closing `<body>` tag. Give this `<div>` element a `data-role="page"`
    element just like the previous instance, and an ID of `p2`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了jQuery Mobile将识别为多个页面中的第一个页面。让我们创建下一个页面。在闭合的`<body>`标签之前，创建新的开放和闭合的`<div>`元素。给这个`<div>`元素一个`data-role="page"`元素，就像之前的实例一样，并且ID为`p2`。
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This page will need `data-role="header"`, `data-role="content"`, and `data-role="footer"`,
    just like the previous `<div>` element `data-role="page"`. You can also simply
    copy the previous section and paste it into the `"p2"` `<div>` element.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面将需要`data-role="header"`、`data-role="content"`和`data-role="footer"`，就像之前的`<div>`元素`data-role="page"`一样。您也可以简单地复制上一节并将其粘贴到`"p2"`
    `<div>`元素中。
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are almost done; we only need to link the pages together. In the `"p1"`
    content, right before the closing `<div>` element, add an `href` anchor tag linking
    to `"#p2"`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了；我们只需要将页面链接在一起。在`"p1"`内容中，在闭合的`<div>`元素之前，添加一个`href`锚标签，链接到`"#p2"`：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `"p2"` `<div>` element, inside the `data-role="content"` `<div>` element,
    add another link, linking back to the first page ID:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`"p2"` `<div>`元素中，在`data-role="content"` `<div>`元素内部，添加另一个链接，链接回第一个页面的ID：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now save the file and launch it. You''ll see it create a nice and native-looking
    mobile website. Click on the **Page** links and you''ll see that there is a smooth
    fade transition between the multipage pages. You will also notice that the back
    button works as well. If you think about it, this behavior is very useful for
    the native app look and feel of our website. See the first page in the next screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存文件并启动它。您将看到它创建了一个漂亮且原生的移动网站。单击**页面**链接，您将看到多页面之间有平滑的淡入淡出过渡。您还会注意到返回按钮也可以正常工作。如果您仔细考虑，这种行为对于网站的原生应用外观和感觉非常有用。请查看下一个截图中的第一个页面：
- en: '![How to do it...](img/5442OT_05_10.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_10.jpg)'
- en: 'The second page is illustrated in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了第二个页面：
- en: '![How to do it...](img/5442OT_05_11.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_11.jpg)'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: jQuery Mobile can load multiple pages within a single HTML page and present
    them as multiple pages or subpages. To link between them, simply add `HREF="#page"`.
    When that link is clicked, jQuery Mobile will look for an internal page with that
    ID and smoothly write it to the viewport.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile可以在单个HTML页面内加载多个页面，并将它们呈现为多个页面或子页面。要在它们之间进行链接，只需添加`HREF="#page"`。当单击该链接时，jQuery
    Mobile将查找具有该ID的内部页面，并平滑地将其写入视口。
- en: Making a list element in jQuery Mobile
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在jQuery Mobile中创建列表元素
- en: 'Let me be the first to say this: I love unordered lists. Conversely, I have
    an equally intense aversion to "programmer art" tables. In fact, I''ve earned
    a reputation with the people I work with as a "destroyer of tables". There are
    very few sets of things in HTML that can''t be displayed using a good list, which
    is why I adore the way in which jQuery Mobile handles lists. jQuery Mobile lists,
    in my opinion, prove why a list is the superior way to present data, menus, navigation,
    and so on. Enough of my abnormal obsession with unordered lists, let''s go through
    a recipe about jQuery Mobile lists together.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我第一个说：我喜欢无序列表。相反，我对“程序员艺术”表格有同样强烈的厌恶。事实上，我在与我一起工作的人中赢得了一个“表格销毁者”的名声。在HTML中几乎没有一组东西不能用一个好的列表来显示，这就是为什么我喜欢jQuery
    Mobile处理列表的方式。在我看来，jQuery Mobile列表证明了为什么列表是呈现数据、菜单、导航等的优越方式。足够了解我对无序列表的异常迷恋，让我们一起来学习一下jQuery
    Mobile列表的使用方法。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Think about how many awful tables you have put out on the Internet and what
    terrible things all of that deadweight code has turned into. That's enough admonishment
    for the crimes of your past, let's move forward and make some jQuery Mobile lists!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 想想你在互联网上发布了多少糟糕的表格，以及所有那些废代码变成了多么可怕的东西。对于你过去的罪行，这已经是足够的警告了，让我们继续前进，制作一些jQuery
    Mobile列表！
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new page with the necessary header information that jQuery Mobile wants.
    Include the viewport `<meta>` tag and the links to the jQuery Mobile stylesheet,
    the jQuery JavaScript, and finally, the jQuery Mobile JavaScript. You can host
    these locally on your own server or use those hosted at [http://code.jquery.com](http://code.jquery.com).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新页面，包含jQuery Mobile所需的必要头部信息。包括viewport `<meta>`标签和链接到jQuery Mobile样式表、jQuery
    JavaScript，最后是jQuery Mobile JavaScript。你可以在自己的服务器上托管这些文件，也可以使用[http://code.jquery.com](http://code.jquery.com)上托管的文件。
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next create a `<div>` element with the `data-role="page"` attribute. This is
    an HTML5 attribute that jQuery Mobile uses to deploy style, elements, and widgets.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一个带有`data-role="page"`属性的`<div>`元素。这是一个HTML5属性，jQuery Mobile用它来部署样式、元素和小部件。
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Inside that `<div>` wrap, create an unordered list of your favorite robots.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个`<div>`包裹中，创建一个你最喜欢的机器人的无序列表。
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's not launch this right now. We both already know that this will look like
    a plain old list. If you were making a separate CSS for a desktop version, you
    could style this list there.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要启动这个。我们俩都知道这看起来就像一个普通的列表。如果你为桌面版本制作了一个单独的CSS，你可以在那里为这个列表设置样式。
- en: Add the attribute `data-role="listview"` to your unordered list. Now you can
    launch this and see that it looks like a styled list of robots.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性`data-role="listview"`添加到你的无序列表中。现在你可以启动它，看看它看起来像一个样式化的机器人列表。
- en: Let's keep going. Because this is a list, and we love lists, we're going to
    just keep playing with it and see what jQuery Mobile can do with it. Add another
    attribute, `data-inset="true"`. Now your list has a cool wrap border around it
    so each item does not stretch to the edge of the screen.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。因为这是一个列表，而且我们喜欢列表，我们将继续使用它，并看看jQuery Mobile可以对其进行什么操作。添加另一个属性，`data-inset="true"`。现在你的列表周围有一个很酷的包边，所以每个项目不会延伸到屏幕的边缘。
- en: Sometimes, you may end up with a really long list, like when you make a list
    of cool robots, because robots are cool, and you don't want to have to keep scrolling
    and scrolling to select your favorite robot. jQuery Mobile has a built-in solution
    for this, a filtering element. Invoke it by adding a new attribute, `data-filter="true"`.
    Refresh your mobile browser; you will see an input at the top to enter a `filtertext`
    element. The Search widget uses a client-side search/filter to filter out list
    items. No longer will you have to scroll down to find that awesome robot at the
    bottom of your list.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能会得到一个非常长的列表，比如当你制作一个酷机器人列表时，因为机器人很酷，你不想不断滚动来选择你最喜欢的机器人。jQuery Mobile为此提供了一个内置解决方案，即过滤元素。通过添加一个新属性`data-filter="true"`来调用它。刷新你的移动浏览器；你会看到一个输入框在顶部输入`filtertext`元素。搜索小部件使用客户端搜索/过滤来过滤列表项。你将不再需要滚动到列表底部找到那个令人惊叹的机器人。
- en: 'Let''s take this to the next level. What if we want to be able to filter the
    robots by some other data that we don''t want to display, such as the robot manufacturer?
    You can add the attribute `data-filtertext=""` to each list item. It would look
    something like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个提升到下一个级别。如果我们想要能够根据一些我们不想显示的其他数据来过滤机器人，比如机器人制造商，我们可以为每个列表项添加属性`data-filtertext=""`。它看起来会像这样：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'See the following figure for a demonstration:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下图示：
- en: '![How to do it...](img/5442OT_05_12.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_12.jpg)'
- en: This list can even be styled differently by assigning a theme in the data attribute.
    Try adding `data-theme="a"` to the unordered list. Now try using the letters `b`
    through `f`. Each one has a different theme that you can apply to the list.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表甚至可以通过在数据属性中分配一个主题来进行不同的样式设置。尝试向无序列表添加`data-theme="a"`。现在尝试使用字母`b`到`f`。每个字母都有一个不同的主题，你可以应用到列表上。
- en: Here is the unordered list with the different attributes we have used so far.
    The figure after the following piece of code shows the different themes in action.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是到目前为止我们使用的不同属性的无序列表。在下面的代码片段之后的图示展示了不同的主题效果。
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![How to do it...](img/5442OT_05_13.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_13.jpg)'
- en: Next let's see what happens when these list items become links. Add an `href`
    anchor tag to each item.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们看看当这些列表项变成链接时会发生什么。为每个项目添加一个`href`锚标签。
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When you refresh your screen, you will see how it adds the icon to indicate
    that it is a clickable link. However, since `href` links to `#`, it does not load
    a new page. See the following screenshot for the illustrated example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刷新屏幕时，你会看到它添加了图标来指示它是一个可点击的链接。然而，由于`href`链接到`#`，它不会加载一个新页面。请参见下面的屏幕截图以获得示例：
- en: '![How to do it...](img/5442OT_05_14.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_14.jpg)'
- en: Let's break this list apart, into two groups, the "destroy all humans" group
    and the "workerbot" group. Add another list item for the first group to the top
    of the list, with the attribute `data-role="list-divider"`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个列表分成两组，“摧毁所有人类”组和“工作机器人”组。为第一组在列表顶部添加另一个列表项，带有属性`data-role="list-divider"`。
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Add another similar list item about halfway down the list.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中间再添加一个类似的列表项。
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is shown in the next screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这在下一个截图中显示：
- en: '![How to do it...](img/5442OT_05_15.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_15.jpg)'
- en: You might feel the need to organize your robots into these groups if it makes
    you feel good. We can take this impulse further and make the lists nested. Add
    a `ul` element to the `list-divider` that you just made, and then cut and paste
    the first half of the robots' `li` code into this `ul` element.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这样做让你感觉良好，你可能会有必要将你的机器人组织成这些组。我们可以进一步采取这种冲动，使列表嵌套。在你刚刚制作的`list-divider`中添加一个`ul`元素，然后将机器人的`li`代码的前半部分剪切并粘贴到这个`ul`元素中。
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Do the same for the next list section. Then, refresh to see the new results.
    Check out the following figure:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对下一个列表部分也做同样的操作。然后刷新以查看新的结果。查看下图：
- en: '![How to do it...](img/5442OT_05_16.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_16.jpg)'
- en: 'You can add an `h3` header title wrap to the parent list items, and even a
    description wrapped in a paragraph element. These lists keep getting fancier and
    fancier. See the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以给父列表项添加一个`h3`标题包裹，甚至在段落元素中添加一个描述。这些列表变得越来越花哨。参见下面的截图：
- en: '![How to do it...](img/5442OT_05_17.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_17.jpg)'
- en: So let's do one final list feature and call it a recipe. This is a gorgeous
    widget for handling lists. You can make a list of collapsible list elements. We're
    going to change the `ul` and `li` list item attributes. First, make the outer
    `ul` list element contain the attributes `data-role="collapsible-set"`, `data-theme="b"`,
    and `data-content-theme="d"`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们做最后一个列表特性，并称之为一个配方。这是一个处理列表的华丽小部件。你可以制作一个可折叠列表元素的列表。我们将改变`ul`和`li`列表项的属性。首先，使外部`ul`列表元素包含属性`data-role="collapsible-set"`、`data-theme="b"`和`data-content-theme="d"`。
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Each of the two direct child `li` elements of that `ul` element should have
    the attribute `data-role="collapsible"`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 那个`ul`元素的两个直接子`li`元素应该有属性`data-role="collapsible"`。
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Give the attributes `data-role="listview"` and `data-filter="true"` to the child
    `ul` element of that collapsible `li` list item.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 给那个可折叠`li`列表项的子`ul`元素添加属性`data-role="listview"`和`data-filter="true"`。
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The whole unordered list list will look like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 整个无序列表看起来是这样的：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The finished list has been depicted in the following figure:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的列表已经在下图中显示：
- en: '![How to do it...](img/5442OT_05_18.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/5442OT_05_18.jpg)'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: That was amazing. You did not have to do much apart from making a good list.
    No table could have pulled that off, ever. As long as you use the HTML5 data attributes
    in your elements, jQuery Mobile will do the heavy lifting and turn your list into
    a sleek, native-looking web app. jQuery Mobile takes the data attribute (which
    doesn't affect the layout or style), and from it, it rewrites the HTML and CSS
    for the mobile version.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 太神奇了。除了做一个好的列表之外，你并不需要做太多事情。任何表格都无法做到这一点。只要在你的元素中使用HTML5数据属性，jQuery Mobile就会承担大部分工作，将你的列表转换成一个时尚的、移动端原生外观的Web应用。jQuery
    Mobile获取数据属性（不影响布局或样式），并从中重写移动版本的HTML和CSS。
- en: Adding a mobile, native-looking button with jQuery Mobile
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery Mobile添加一个移动端原生外观的按钮
- en: Let's make buttons! Making a button may seem like a very trivial part of the
    design, but contrarily, when you are building a web application, a button can
    be a very important part of the site's usability.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制作按钮！制作按钮可能看起来是设计中非常微不足道的一部分，但相反，当你构建一个Web应用程序时，按钮可能是网站可用性的一个非常重要的部分。
- en: jQuery Mobile has an impressive array of button invocations, and they are all
    easy to use. They are usable within many other jQuery Mobile widgets as well.
    In addition, it is just as easy to make a button from a link as it is to make
    one from a `form input` element.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile有一个令人印象深刻的按钮调用数组，它们都很容易使用。它们也可以在许多其他jQuery Mobile小部件中使用。此外，从链接创建按钮和从`form
    input`元素创建按钮一样容易。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In your IDE or text editor, spin up a new HTML document and add the requisite
    header tags. First add the viewport `<meta>` tag, followed by links to the jQuery
    Mobile CSS and the JavaScript libraries jQuery and jQuery Mobile.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的IDE或文本编辑器中，启动一个新的HTML文档，并添加必要的头部标签。首先添加viewport`<meta>`标签，然后添加链接到jQuery Mobile
    CSS和JavaScript库jQuery和jQuery Mobile。
- en: '[PRE28]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In your HTML `<body>` tag, add a `<div>` element with the HTML5 attribute `data-role="page"`.
    Inside it, add an `h1` header and wrap it with a `<div>` element with the `data-role="header"`
    attribute. Following the header element, add a `<div>` element with the `data-role="content"`
    attribute. See the following code snippet:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的HTML`<body>`标签中，添加一个带有HTML5属性`data-role="page"`的`<div>`元素。在其中，添加一个`h1`标题，并用带有`data-role="header"`属性的`<div>`元素包裹它。在标题元素之后，添加一个带有`data-role="content"`属性的`<div>`元素。参见下面的代码片段：
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's compare some different methods to create a basic button. First, there
    is the HTML5 element `<button>`, various `<input>` form elements `button` and
    `submit`, and an `href` pseudo button. Put one of each inside your content `<div>`
    element.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一些不同的方法来创建一个基本按钮。首先是HTML5元素`<button>`，各种`<input>`表单元素`button`和`submit`，以及一个`href`伪按钮。在你的内容`<div>`元素中放入每种按钮。
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Launch your new page. You will see four new buttons that look identical (with
    the exception of the text). You can see that each of these methods is delivered
    the same way. This is impressive, as your non-mobile version of the template file
    may require you to use a certain type of `submit` element (which is not exactly
    mobile-first, but no one is perfect). See the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的新页面。你会看到四个看起来完全相同的新按钮（除了文字）。你可以看到每种方法都是以相同的方式呈现的。这很令人印象深刻，因为你的模板文件的非移动版本可能需要你使用某种类型的`submit`元素（这并不完全是移动优先的，但没有人是完美的）。参见下面的截图：
- en: '![How to do it...](img/5442OT_05_19.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_19.jpg)'
- en: Let's continue with this recipe now by demonstrating how to add icons to the
    buttons using jQuery Mobile. This is a simple, one-step process; it uses an HTML5
    data attribute, the `data-icon` attribute. In your first button, add the `data-icon="delete"`
    attribute; in the next one, add the `data-icon="check"` attribute; add `data-icon="plus"`
    to the next one; and finally, add `data-icon="arrow-l"` to the last button in
    this set of buttons. There is a list of icons that you can put in there; you can
    find them in the documentation.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续这个教程，演示如何使用jQuery Mobile向按钮添加图标。这是一个简单的、一步到位的过程；它使用了一个HTML5数据属性，即`data-icon`属性。在第一个按钮中，添加`data-icon="delete"`属性；在下一个按钮中，添加`data-icon="check"`属性；在下一个按钮中添加`data-icon="plus"`；最后，在这组按钮中的最后一个按钮中添加`data-icon="arrow-l"`属性。你可以在文档中找到可以放在其中的图标列表。
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows the new buttons:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了新的按钮：
- en: '![How to do it...](img/5442OT_05_20.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_20.jpg)'
- en: 'You can also make a button smaller by adding the `data-mini="true"` attribute
    and position the icon at the right, left, top, or bottom corners of the button
    using the `data-iconpos` attribute. Otherwise, you can use the `data-iconpos="notext"`
    attribute to only show the icon. See the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过添加`data-mini="true"`属性使按钮变小，并使用`data-iconpos`属性将图标定位在按钮的右、左、顶部或底部角落。否则，你可以使用`data-iconpos="notext"`属性仅显示图标。参见下面的屏幕截图：
- en: '![How to do it...](img/5442OT_05_21.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_21.jpg)'
- en: The default behavior for these jQuery Mobile buttons is to stretch across the
    whole screen. You can change this by adding the attribute `data-inline="true"`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些jQuery Mobile按钮的默认行为是横跨整个屏幕。你可以通过添加`data-inline="true"`属性来改变这一点。
- en: '[PRE32]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It''s messy, but you can see it in action here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有些混乱，但你可以在这里看到它的效果：
- en: '![How to do it...](img/5442OT_05_22.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_22.jpg)'
- en: They will become inline elements, similar to the list items that are displayed
    as inline. We're almost done, but there's still some fun to be had. We can also
    make button groups easily. Remove the `data-inline="true"` attribute that you
    added in the previous section. Next, wrap the button elements with a `<div>` element,
    with the attribute `data-role="controlgroup"`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 它们将变成内联元素，类似于以内联方式显示的列表项。我们几乎完成了，但还有一些有趣的地方。我们还可以轻松地创建按钮组。删除在上一节中添加的`data-inline="true"`属性。接下来，用`<div>`元素包装按钮元素，并添加`data-role="controlgroup"`属性。
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now you can see the potential for creative button groups and keeping them together
    in a pretty package. Let's add some more effects to the button group. If you add
    `data-type="horizontal"` to the `"controlgroup"` `<div>` element, you'll make
    a mess that you'll need to clean up. One way to clean this up would be to change
    all of the `data-iconpos` attributes to `"notext"`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到创造性按钮组的潜力，并将它们整齐地放在一起。让我们给按钮组添加一些更多的效果。如果你在`"controlgroup"` `<div>`元素中添加`data-type="horizontal"`，你会弄得一团糟。清理这一点的一种方法是将所有的`data-iconpos`属性改为`"notext"`。
- en: 'Finally, as we have seen in the previous jQuery Mobile recipes, the `data-theme`
    attribute can make your buttons colorful. To quickly show this effect, add a different
    `data-theme` attribute (`a`, `b`, `c`, `e`) to each of the buttons (I skipped
    `d`, it looked too much like `c`). These are illustrated in the next screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如我们在之前的jQuery Mobile教程中所看到的，`data-theme`属性可以使你的按钮变得丰富多彩。为了快速展示这种效果，为每个按钮添加不同的`data-theme`属性（`a`、`b`、`c`、`e`）（我跳过了`d`，它看起来太像`c`）。这些在下一个屏幕截图中有所体现：
- en: '![How to do it...](img/5442OT_05_23.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/5442OT_05_23.jpg)'
- en: How it works...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: All you really need to know about how this works is which data tags to use to
    make jQuery Mobile pick up the HTML elements and turn them into mobile-native
    buttons. It happens auto-magically actually, when you have the correct attributes,
    and it works no matter what method of the `submit` button it is applied to. jQuery
    Mobile fires an event on the HTML5 attributes and adds the HTML and styles to
    the rendered page.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你真正需要知道的是如何使用哪些数据标签使jQuery Mobile识别HTML元素并将其转换为移动原生按钮。实际上，当你有正确的属性时，它会自动发生，并且无论应用于`submit`按钮的方法如何，它都能正常工作。jQuery
    Mobile在HTML5属性上触发事件，并将HTML和样式添加到渲染的页面中。
- en: Adding a mobile stylesheet for mobile browsers only using the media query
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在移动浏览器中仅使用媒体查询添加移动样式表
- en: In this recipe, we want to be able to use a stylesheet in the template only
    for use by mobile browsers. JavaScript aside, there is no way in client-side rendering
    to listen for the user agent and deliver some logic or special template for mobile
    browsers. Let's take the K.I.S.S. approach and get as close as we can with a media
    query.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们希望能够在模板中仅供移动浏览器使用样式表。除了JavaScript之外，在客户端渲染中没有办法监听用户代理并为移动浏览器提供一些逻辑或特殊模板。让我们采用K.I.S.S.方法，并尽可能接近媒体查询。
- en: Of course, there are numerous ways to write JavaScript to detect a user agent,
    and we will cover that in a later recipe, but for now let's write a killer media
    query to lock down the mobile browser for a specific CSS. In the previous recipes,
    our media queries were performed inside a stylesheet. This one will be different
    as we will put it inside the HTML header link. Change is good, do not worry. The
    reason we are putting the media query within the HTML link to the CSS file is
    that we want to call that CSS file only under special circumstances. This recipe
    is especially useful when you are using mobile-first design and technologies like
    jQuery Mobile.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有许多种方法可以编写JavaScript来检测用户代理，我们将在后面的教程中介绍，但现在让我们编写一个杀手级的媒体查询来锁定特定CSS的移动浏览器。在之前的教程中，我们的媒体查询是在样式表中执行的。这一次将会有所不同，因为我们将把它放在HTML头部链接中。改变是好的，不要担心。我们将媒体查询放在HTML链接到CSS文件中的原因是，我们希望只在特殊情况下调用该CSS文件。当你使用移动优先设计和jQuery
    Mobile等技术时，这个教程尤其有用。
- en: Getting ready
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Fire up your handy IDE and start a new HTML page. Be sure to add your viewport
    `<meta>` tag. If you like, you can add a paragraph of text in the HTML body.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您方便的IDE并开始一个新的HTML页面。确保添加您的视口`<meta>`标签。如果您愿意，您可以在HTML主体中添加一个文字段落。
- en: How to do it...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In the `<body>` tag of your new HTML file, add two paragraphs of text. Each
    with a different class (`class="a"` and `class="b"`). This will be enough HTML
    to demonstrate the media query at work.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的新HTML文件的`<body>`标签中，添加两个文字段落。每个都有不同的类（`class="a"`和`class="b"`）。这将是足够的HTML来演示媒体查询的工作。
- en: '[PRE34]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now back to the `<head>` tag. First, let''s add the viewport `<meta>` tag.
    Include the content attribute `"width=device-width"`. Next, add some simple style
    for the font (`font-size: 100%`).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '现在回到`<head>`标签。首先，让我们添加视口`<meta>`标签。包括内容属性`"width=device-width"`。接下来，为字体添加一些简单的样式（`font-size:
    100%`）。'
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next we''re going to add the link to the mobile CSS stylesheet with a media
    query. The basic stylesheet link contains `rel="stylesheet"` and the path. Add
    to it the conditions it needs to satisfy to use that stylesheet. Add a media query
    for `screen` and `max-device-width=320px`. Your CSS link should look like this:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加移动CSS样式表的链接和媒体查询。基本的样式表链接包含`rel="stylesheet"`和路径。添加它需要满足的条件。为`screen`和`max-device-width=320px`添加一个媒体查询。您的CSS链接应该如下所示：
- en: '[PRE36]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There's nothing more for us to do in the HTML file, so create a CSS file in
    the same directory and name it `mobile.css`. Open it to edit it. We don't need
    to do much here, only one line is sufficient. Add a line for the `b` class paragraph
    and give it an attribute of `2rem` for the font size. REM means Relative EM, or
    relative to the root font size (in case you skipped the responsive typography
    recipes).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML文件中我们没有更多要做的事情，所以在同一个目录中创建一个CSS文件并将其命名为`mobile.css`。打开它进行编辑。我们在这里不需要做太多事情，只需要一行就足够了。为`b`类段落添加一行，并为字体大小添加一个属性`2rem`。REM表示相对EM，或者相对于根字体大小（如果您跳过了响应式排版配方）。
- en: '[PRE37]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now let''s try it out. Open your HTML file in a browser, and then open it in
    your mobile device simulator. Here, you can see the mobile device has a unique
    presentation with a different font size for the `b` class paragraph. See this
    recipe illustrated in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们试一试。在浏览器中打开您的HTML文件，然后在移动设备模拟器中打开它。在这里，您可以看到移动设备具有独特的呈现方式，`b`类段落的字体大小不同。请参阅以下屏幕截图中的这个配方：
- en: '![How to do it...](img/5442OT_05_24.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_05_24.jpg)'
- en: How it works...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The media query is designed to become active only on devices that have a screen
    resolution of 320px or lesser. Anything greater than that ignores (it still does
    get downloaded) the CSS file linked. You could additionally write media queries
    for other specific devices as well.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询的设计仅在具有320px或更低分辨率的设备上才会激活。大于这个值的任何值都会忽略（它仍然会下载）链接的CSS文件。您还可以为其他特定设备编写媒体查询。
- en: Adding JavaScript for mobile browsers only
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅为移动浏览器添加JavaScript
- en: In the previous recipe, we wrote a media query inside a stylesheet link. This
    was useful for our own mobile-first responsive web development. However, when
    using JavaScript code specifically for mobile platforms, such as jQuery Mobile,
    you might not want to have them initiated on desktop computers. Let's build a
    tiny JavaScript code that detects the mobile device screen size and then deploys
    jQuery Mobile for it but not for the desktop.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们在样式表链接中编写了一个媒体查询。这对于我们自己的移动优先响应式网页开发非常有用。然而，当使用专门针对移动平台的JavaScript代码，比如jQuery
    Mobile时，您可能不希望在桌面计算机上启动它们。让我们构建一个小的JavaScript代码，检测移动设备屏幕大小，然后为其部署jQuery Mobile，但不适用于桌面设备。
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了
- en: Mobile-first technologies like jQuery Mobile are amazing tools when you have
    a server-side technology. They do need server-side logic to work the best. If
    you are not fortunate enough to have access to server-side logic, you can employ
    some client-side tricks to work your magic.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 像jQuery Mobile这样的移动优先技术是在拥有服务器端技术时的惊人工具。它们需要服务器端逻辑才能发挥最佳作用。如果您没有幸运地获得了服务器端逻辑的访问权限，您可以使用一些客户端技巧来发挥您的魔力。
- en: How to do it...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: If you have not looked through the jQuery Mobile recipes, take a look now; we're
    going to reuse one of the recipes that we have used already.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有浏览过jQuery Mobile的配方，请现在浏览一下；我们将重用我们已经使用过的配方之一。
- en: Open up one of the files that you created in the previous recipe using jQuery
    Mobile. You can use the *Adding a mobile, native-looking button with jQuery Mobile*
    recipe. If you worked through this recipe on making a mobile, native-looking button,
    use it to follow along.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 打开之前使用jQuery Mobile创建的文件之一。您可以使用*使用jQuery Mobile添加移动原生外观按钮*的配方。如果您已经按照这个配方制作了一个移动的、原生外观的按钮，请使用它进行跟踪。
- en: When we last saw this file, the jQuery Mobile script took your plain old boring
    HTML buttons and turned them into cool jQuery Mobile buttons. All you needed was
    to include the HTML5 data attributes in your elements, and jQuery Mobile did the
    rest auto-magically. So what if you only want this to happen on a mobile device?
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们上次看到这个文件时，jQuery Mobile脚本将您的普通无聊的HTML按钮转换成了很酷的jQuery Mobile按钮。您所需要做的就是在您的元素中包含HTML5数据属性，然后jQuery
    Mobile会自动完成剩下的工作。那么如果您只想在移动设备上发生这种情况呢？
- en: Well, you would be in trouble if it weren't for the magic of client-side scripting.
    We first want the script to be aware that it is dealing with a mobile device.
    One way is by querying the user agent of the DOM element. I've seen a few people
    do that, but it's complicated enough to be bug-prone. So instead, let's detect
    the size of the device screen. Most mobile viewports are at most 600 pixels wide
    or smaller; so for now, you are safe if you are developing applications assuming
    that that is the correct maximum size.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有客户端脚本的魔力，你可能会遇到麻烦。我们首先希望脚本意识到它正在处理一个移动设备。一种方法是通过查询DOM元素的用户代理。我见过一些人这样做，但足够复杂以至于容易出错。所以，让我们检测设备屏幕的大小。大多数移动视口最多为600像素宽或更小；所以现在，如果您正在开发应用程序，并假设这是正确的最大尺寸，那么您是安全的。
- en: So let's make the script get the screen width from the DOM; if it's smaller
    than 600px, go get jQuery Mobile script. First, using jQuery, fire a function
    when the document loads.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们让脚本从DOM获取屏幕宽度；如果小于600px，就获取jQuery Mobile脚本。首先，使用jQuery，在文档加载时触发一个函数。
- en: '[PRE38]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Inside the function, write a conditional statement; if the screen is smaller
    than 600, then do something.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，编写一个条件语句；如果屏幕小于600，则做某事。
- en: '[PRE39]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: That's a good start, but let's be more specific about "doing something". What
    we want the script to do is fetch and run the jQuery Mobile script. A good method
    for that is jQuery's `$.getScript()` function. So put that in the `if` condition,
    including the jQuery Mobile source URL.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的开始，但让我们更具体地谈谈“做某事”。我们希望脚本能够获取并运行jQuery Mobile脚本。一个很好的方法是使用jQuery的`$.getScript()`函数。所以把它放在`if`条件中，包括jQuery
    Mobile源URL。
- en: '[PRE40]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now load the page in your mobile device emulator.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在您的移动设备模拟器中加载页面。
- en: How it works...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If the emulator successfully spoofs the device width in the request, you will
    see the jQuery Mobile version of the HTML page. In your desktop browser, no matter
    what size your browser window is, you will not be able to load the jQuery Mobile
    script.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模拟器成功地欺骗了请求中的设备宽度，您将看到HTML页面的jQuery Mobile版本。在您的桌面浏览器中，无论浏览器窗口大小如何，您都无法加载jQuery
    Mobile脚本。
- en: jQuery's `$.getScript()` is a function that loads an external script into the
    header. You can use it like we did in the recipe, to conditionally load an external
    JavaScript and additionally execute functions on its successful loading.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的`$.getScript()`是一个将外部脚本加载到头部的函数。您可以像我们在示例中所做的那样使用它，有条件地加载外部JavaScript，并在成功加载时执行其他函数。
