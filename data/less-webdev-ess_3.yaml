- en: Chapter 3. Nested Rules, Operations, and Built-in Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。嵌套规则，操作和内置函数
- en: In this chapter, you will learn how *Less* helps you organize your CSS selectors
    more intuitively, makes inheritance clear, and makes your style sheets shorter.
    You will also learn about operations and built-in functions. Operations let you
    add, subtract, divide, and multiply property values and colors. They also give
    you the power to create complex relationships between properties. You will also
    learn how to set variables or guards using the built-in functions in your *Less*
    code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习*Less*如何帮助你更直观地组织你的CSS选择器，使继承清晰，并使你的样式表更短。你还将学习操作和内置函数。操作让你能够添加、减去、除以和乘以属性值和颜色。它们还让你有能力在属性之间创建复杂的关系。你还将学习如何在你的*Less*代码中使用内置函数来设置变量或保护。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Nesting CSS rules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套CSS规则
- en: Using operations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用操作
- en: Using built-in functions in you code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的代码中使用内置函数
- en: Using built-in functions in your mixins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用混合中的内置函数
- en: The navigation structure
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航结构
- en: With the examples in this chapter, you will extend the layout from [Chapter
    2](ch02.html "Chapter 2. Using Variables and Mixins"), *Using Variables and Mixins*
    step by step with a navigation structure. You will build this navigation structure
    by styling an HTML list with *Less*. This navigation structure forms a menu in
    the sidebar of the layout.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的示例，你将逐步扩展[第2章](ch02.html "第2章。使用变量和混合")中的布局，*使用变量和混合*，并使用导航结构。你将通过使用*Less*来为HTML列表设置样式来构建这个导航结构。这个导航结构形成了布局侧边栏中的菜单。
- en: 'The final result will look like the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将如下截图所示：
- en: '![The navigation structure](img/1465-03-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![导航结构](img/1465-03-01.jpg)'
- en: The final navigation menu built using *Less*
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Less*构建的最终导航菜单
- en: Nested rules
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套规则
- en: You will use the layout example from [Chapter 2](ch02.html "Chapter 2. Using
    Variables and Mixins"), *Using Variables and Mixins*, to study *nesting of rules*
    in more detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用[第2章](ch02.html "第2章。使用变量和混合")中的布局示例，*使用变量和混合*，来更详细地研究*规则的嵌套*。
- en: To do this, you must first open `http://localhost/index.html` in your browser
    and then open `less/sidebar.less` in your text editor.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，你首先必须在浏览器中打开`http://localhost/index.html`，然后在你的文本编辑器中打开`less/sidebar.less`。
- en: 'Anchors are added to the menu items. This means that the HTML code of the side
    menu now looks like the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 锚点被添加到菜单项中。这意味着侧边栏的HTML代码现在看起来像以下代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You need a selector for each rule to style the different elements in CSS as
    can be seen in the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要为CSS中的不同元素设置每个规则的选择器，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, both the `ul` (including the `li` element and the `a` anchor)
    element and the `h2` element are the children of the `aside` element with the
    `#sidemenu` ID. CSS doesn''t reflect this relationship because it is currently
    in the format as shown in the preceding code. *Less* will help you to reflect
    this relationship in your code. In *Less*, you can write the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`ul`（包括`li`元素和`a`锚点）元素和`h2`元素都是具有`#sidemenu` ID的`aside`元素的子元素。CSS并没有反映这种关系，因为它目前的格式如前面的代码所示。*Less*将帮助你在你的代码中反映这种关系。在*Less*中，你可以写下以下代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code will compile straight into the following CSS syntax:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将直接编译成以下CSS语法：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The resulting CSS of your compiled *Less* code is exactly the same as your original
    CSS code. In *Less*, you refer to the `#sidemenu` ID only once, and due to the
    nesting of `h2` and `ul` inside `#sidemenu`, your code structure is intuitive
    and reflecting the **DOM structure** of your HTML code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你编译后的*Less*代码的结果CSS与你原始的CSS代码完全相同。在*Less*中，你只需一次引用`#sidemenu` ID，由于`h2`和`ul`嵌套在`#sidemenu`中，你的代码结构是直观的，并且反映了你的HTML代码的**DOM结构**。
- en: 'To keep your code clean, a new `less/sidebar.less` file has been created. It
    contains the preceding *Less* code. Of course, this file should also be imported
    into `less/styles.less` using the following line of code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持你的代码整洁，一个新的`less/sidebar.less`文件已经被创建。它包含了前面的*Less*代码。当然，这个文件也应该被导入到`less/styles.less`中，使用以下代码行：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Please also note that the sidebar is wrapped in a semantic HTML5 `aside` element
    instead of a `div` element. Although this is more semantic**,** you will find
    that your sidebar has floated to the left after you made these changes. To fix
    this, open `less/content.less` in your text editor. By studying the nesting of
    the CSS selectors in the *Less* code, you will find `aside float:right;` nested
    in the `.wrapper` container. If you move this `aside` rule inside the `#content`
    container, the syntax should look like the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，侧边栏被包裹在语义化的HTML5 `aside`元素中，而不是`div`元素中。虽然这更语义化，但你会发现在你做出这些改变后，你的侧边栏已经浮动到了左侧。要解决这个问题，打开你的文本编辑器中的`less/content.less`。通过研究*Less*代码中CSS选择器的嵌套，你会发现`.wrapper`容器中嵌套了`aside
    float:right;`。如果你将这个`aside`规则移到`#content`容器中，语法应该如下所示：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `less/content.less` file, you will also find the line `h2 { color: @content-dark-color;
    }`, which is in contrast to what you will see in the `aside` element. The `h2`
    rule will still be overwritten by `#sidebar h2{ color: black; }`. The final rule
    contains a `#sidebar` selector and so it has a higher **CSS specificity**, as
    explained in the first chapter.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '在`less/content.less`文件中，你还会发现一行`h2 { color: @content-dark-color; }`，这与你在`aside`元素中看到的是相反的。`h2`规则仍然会被`#sidebar
    h2{ color: black; }`覆盖。最终的规则包含了一个`#sidebar`选择器，因此它具有更高的**CSS特异性**，正如第一章所解释的那样。'
- en: Inspect the *Less* files, such as `less/header.less`, again and keep these brand
    new insights about nesting of CSS selectors in mind. You will see that nesting
    is already used frequently. For example, in `less/header.less`, the properties
    of the `h1` element are set by nesting.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 检查*Less*文件，例如`less/header.less`，再次牢记关于CSS选择器嵌套的全新见解。你会发现嵌套已经经常被使用。例如，在`less/header.less`中，`h1`元素的属性是通过嵌套设置的。
- en: A proper inspection of these files will also show you how mixins can be nested
    in classes and other mixins.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些文件进行适当的检查还将向您展示混合可以嵌套在类和其他混合中的方式。
- en: Mixins and classes
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合和类
- en: 'The name of a mixin should always end with parentheses; otherwise, it is a
    normal **class**. Both mixins and classes can be nested in *Less*. Consider the
    difference in the following example *Less* code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 混合的名称应该总是以括号结尾；否则，它就是一个普通的**类**。*Less*中的混合和类都可以嵌套。考虑以下示例*Less*代码的区别：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This code gets compiled into the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将被编译成以下代码：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can see how the properties of `.class-1` are copied into `.class-2` in
    the compiled CSS. When you add parentheses after `.class-1` in*Less* and make
    it a mixin, you should now consider the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`.class-1`的属性如何被复制到编译后的CSS中的`.class-2`中。当您在*Less*中在`.class-1`后面添加括号并将其变成混合时，现在您应该考虑以下代码：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This code will get compiled into the following CSS code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将被编译成以下CSS代码：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's go back to the example of the side navigation menu. When your menu is
    ready, you will find that the "navigating" text inside the `h2` heading element
    makes no sense. Unless you are visually impaired and use a screen reader, you
    can easily see the side menu is intended as navigation for the website. So, you
    can hide this heading but should keep it visible for **screen readers**. Setting
    `display:none` will hide the element from screen readers, while `visibility:hidden`
    will also hide the element but still takes space and so can mess up our design.
    Setting the `clip` property will help in this situation. You can find more details
    by visiting [http://a11yproject.com/posts/how-to-hide-content/](http://a11yproject.com/posts/how-to-hide-content/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到侧边导航菜单的示例。当您的菜单准备好时，您会发现`h2`标题元素内的“导航”文本毫无意义。除非您视力受损并使用屏幕阅读器，否则您可以轻松地看到侧边菜单是网站的导航。因此，您可以隐藏此标题，但应该保持对**屏幕阅读器**可见。设置`display:none`将使元素对屏幕阅读器不可见，而`visibility:hidden`也会隐藏元素，但仍会占用空间，因此可能会搞乱我们的设计。设置`clip`属性将有助于解决这种情况。您可以通过访问[http://a11yproject.com/posts/how-to-hide-content/](http://a11yproject.com/posts/how-to-hide-content/)了解更多详情。
- en: 'Based on the rule of precedence, you can write the following class using *Less*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据优先规则，您可以使用*Less*编写以下类：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the preceding class to `less/boxsizing.less` and rename this file as `less/basics.less`.
    Also, please don''t forget to rename the import statement in `less/styles.less`.
    Now you can use the following *Less* code to hide the `h2` heading element in
    the sidebar menu:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将前述类添加到`less/boxsizing.less`中，并将此文件重命名为`less/basics.less`。还请不要忘记重命名`less/styles.less`中的导入语句。现在，您可以使用以下*Less*代码来隐藏侧边栏菜单中的`h2`标题元素：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After performing these steps and compiling the *Less* code into the CSS code,
    the sidebar navigation will now look like the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些步骤并将*Less*代码编译为CSS代码后，侧边导航现在将如下截图所示：
- en: '![Mixins and classes](img/1465-03-02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![混合和类](img/1465-03-02.jpg)'
- en: A styled navigation menu with hidden heading text
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 带有隐藏标题文本的样式化导航菜单
- en: 'As `.screenreaders-only` is a class and not a mixin, and classes are compiled
    to your final CSS, not only can you use the `.screenreaders-only` class to add
    its properties to other classes in *Less*, but you can also use the class in your
    HTML directly, as shown in the following line of code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`.screenreaders-only`是一个类而不是混合，并且类被编译到最终的CSS中，因此不仅可以使用`.screenreaders-only`类将其属性添加到*Less*中的其他类中，还可以直接在HTML中使用该类，如下面的代码行所示：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When working with *Less*, you will often have to choose between specific compiled
    *Less* classes based on your project's HTML structure and a more generic solution
    that will be applied with a class inside your HTML code. Unfortunately, in these
    cases, there is no single solution. In general, DOM-specific code will generate
    more CSS code but will also keep your HTML clean and give you the opportunity
    to generate more semantic HTML code. Reusing your *Less* code won't always be
    simple for this option.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用*Less*时，您经常需要根据项目的HTML结构选择特定编译的*Less*类和更通用的解决方案，该解决方案将应用于HTML代码中的一个类。不幸的是，在这些情况下，没有单一的解决方案。一般来说，特定于DOM的代码将生成更多的CSS代码，但也会保持HTML的清晰，并为您提供生成更多语义HTML代码的机会。对于这个选项，重用您的*Less*代码并不总是简单的。
- en: Compiling your *Less* syntax as classes and using them in your HTML will make
    your code more reusable. On the other hand, it will mess up your HTML due to these
    classes. Also, the relationship between the CSS effects and HTML structure becomes
    less strict. This makes it more difficult to maintain or change.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的*Less*语法编译为类，并在HTML中使用它们将使您的代码更具可重用性。另一方面，它会由于这些类而搞乱您的HTML。此外，CSS效果与HTML结构之间的关系变得不那么严格。这使得维护或更改变得更加困难。
- en: Variables
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'In `less/variables.less`, you should define a section for your sidebar, as
    shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`less/variables.less`中，您应该定义一个侧边栏的部分，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the preceding variables, the *Less* code in `less/sidebar.less` will now
    look like the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的变量，`less/sidebar.less`中的*Less*代码现在将如下所示：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Classes and namespaces
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类和命名空间
- en: Before finishing the menu, the *Less* code used to style the menu will be changed
    to a class first. The points to consider here have already been discussed. A navigation
    is a general structure that can be used in many projects. In the class structure,
    it can be used to style any HTML list.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成菜单之前，用于样式化菜单的*Less*代码将首先更改为类。这里已经讨论了需要考虑的要点。导航是一个通用结构，可以在许多项目中使用。在类结构中，它可以用来为任何HTML列表设置样式。
- en: 'Please create a new file for `less/nav.less` and write the following code into
    it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请为`less/nav.less`创建一个新文件，并将以下代码写入其中：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now you can turn every HTML list (`ul` or `ol`) in our HTML document into a
    navigation structure just by adding the `.nav` class to it. This can be done using
    the following line of code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过将`.nav`类添加到每个HTML列表（`ul`或`ol`）中，将我们HTML文档中的每个HTML列表转换为导航结构。可以使用以下代码行来实现：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Please notice that with this *Less* code, lists can''t be nested, and the items
    on the list should contain anchors (links). These requirements make it seem clear
    that this code can easily be (re)used in your other projects. *Less* also offers
    the possibility of defining **namespaces**. Namespaces can make your code more
    portable and are defined in the same way as CSS ID selectors. Namespaces start
    with a `#`, as shown in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用这个*Less*代码，列表不能嵌套，列表中的项目应包含锚点（链接）。这些要求使得这段代码在您的其他项目中可以轻松地被（重新）使用。*Less*还提供了定义**命名空间**的可能性。命名空间可以使您的代码更具可移植性，并且与CSS
    ID选择器的定义方式相同。命名空间以`#`开头，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `#lessnamespace` namespace can now be used as an example, as shown in the
    following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`#lessnamespace`命名空间现在可以作为示例使用，如下面的代码所示：'
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In fact, a namespace doesn''t differ from an ID selector. The `#lessnamespace`
    namespace can also be used directly in your HTML code, although this is not useful
    in most cases, as shown in the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，命名空间与ID选择器没有区别。`#lessnamespace`命名空间也可以直接在您的HTML代码中使用，尽管在大多数情况下这并没有什么用，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: HTML requires every ID to be defined only once, so you can't use the preceding
    HTML code more than once in your HTML document unless you append the ID to the
    body. Nevertheless, the preceding code shows that even specifically written *Less*
    code for a custom HTML DOM structure can be reused in other projects.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTML要求每个ID只能定义一次，因此除非将ID附加到body，否则不能在HTML文档中多次使用前面的HTML代码。然而，前面的代码表明，即使为自定义HTML
    DOM结构专门编写了*Less*代码，也可以在其他项目中重用。
- en: 'In the `#lessnamespace` namespace, as defined earlier, `.nav` is a class that
    makes direct usage possible. When `.nav` is changed to a mixin, it can only be
    reused in *Less,* as shown in the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前定义的`#lessnamespace`命名空间中，`.nav`是一个使直接使用成为可能的类。当`.nav`被更改为mixin时，它只能在*Less*中被重用，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This code will get compiled straight into the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将直接编译成以下代码：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Operating on numbers, colors, and variables
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作数字、颜色和变量
- en: '*Less* has support for the basic arithmetic operations: addition (`+`), subtraction
    (`-`), multiplication (`*`), and division (`/`). In the strict-math mode, operations
    should be placed between parentheses. You can apply an operation on variables,
    values, and numbers. These will help you make relationships between variables.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*Less*支持基本算术运算：加法（`+`）、减法（`-`）、乘法（`*`）和除法（`/`）。在strict-math模式下，操作应放在括号之间。您可以对变量、值和数字进行操作。这些将帮助您建立变量之间的关系。'
- en: 'Open `less/footer.less` to immediately see the operation that you used, as
    in the following code, and its benefits:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`less/footer.less`立即看到您使用的操作，如下面的代码所示，以及它的好处：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the preceding code, the `/` sign (division) has been used to give the footer
    columns one-third of the available width (as set by `@basic-width`). Using operations
    in your code feels so natural that you may not have even realized you have been
    using them until now. *Less* uses normal **order precedence**, where you can add
    extra parentheses to explicitly set precedence and avoid confusion. For instance,
    in *Less*, *3 + 3 * 3* gives *12*. So, *(3 + 3) * 3* equals *18,* as shown in
    the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`/`符号（除法）被用来使页脚列占可用宽度的三分之一（由`@basic-width`设置）。在代码中使用操作感觉如此自然，以至于您可能甚至没有意识到您一直在使用它们。*Less*使用正常的**顺序优先级**，您可以添加额外的括号来明确设置优先级并避免混淆。例如，在*Less*中，*3
    + 3 * 3*得到*12*。因此，*(3 + 3) * 3*等于*18*，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This code will get compiled into the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将编译成以下代码：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*Less* operations can also be used for color manipulation and operations can
    be applied on values and colors with different units, as shown in the following
    code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*Less*操作也可以用于颜色处理，可以对不同单位的值和颜色进行操作，如下面的代码所示：'
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This code will get compiled into the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将编译成以下代码：
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The & symbol
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '&符号'
- en: 'The `&` symbol plays a special and important role in *Less*. It refers to the
    parent of the current selector and you can use it to reverse the order of nesting
    and to extend or merge classes. You will see that the following example will tell
    you more than what can be expressed in a thousand words:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`&`符号在*Less*中扮演着特殊而重要的角色。它指的是当前选择器的父级，您可以使用它来颠倒嵌套顺序，扩展或合并类。您将看到下面的示例将告诉您比千言万语还要多的内容：'
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This code will compile into the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将编译成以下代码：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can see that `.class2` becomes the parent of `.class1` when you use the
    `&` symbol after it. The `&` symbol can also be used in order to reference nesting
    that is outside the mixin.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到当您在`.class2`后使用`&`符号时，它变成了`.class1`的父级。`&`符号也可以用来引用超出mixin范围的嵌套。
- en: 'The `&` symbol can also be used to nest and append **pseudo classes** to a
    class. Later on, you will see that you can use it to append classes too. A simple
    example of this will be adding a `:hover` pseudo class triggered by a mouse hover
    to a link, as shown in the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`&`符号也可以用来嵌套和附加**伪类**到一个类。稍后，您将看到您还可以用它来附加类。一个简单的例子是为链接添加一个由鼠标悬停触发的`:hover`伪类，如下面的代码所示：'
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This code can be compiled into the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以编译成以下代码：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, open `less/mixins.less` in your text editor and find the **clearfix mixin**.
    The clearfix mixin uses the `&` symbol to append the `:hover`, `:after`, and `:before`
    pseudo classes to your elements, as shown in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在文本编辑器中打开`less/mixins.less`，找到**clearfix mixin**。clearfix mixin 使用`&`符号将`:hover`、`:after`和`:before`伪类附加到您的元素上，如下面的代码所示：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With this new knowledge about the `&` symbol, it will now be easy for you to
    understand how to extend your example navigation menu with the `:hover` and `:active`
    (`.active`) states, and the following code shows you how your extended code will
    look:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有了关于`&`符号的这些新知识，您现在可以轻松理解如何通过`:hover`和`:active`（`.active`）状态扩展示例导航菜单，下面的代码显示了您的扩展代码将是什么样子：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open `http://localhost/indexnav.html` in your browser to inspect the results
    of the preceding syntax.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost/indexnav.html`以检查前面语法的结果。
- en: 'The `extend` pseudo-class is a *Less* pseudo-class and uses the same syntax
    as a CSS pseudo-class. The `extend` pseudo-class adds the selector to the **extended
    selector** list. Adding the selector to the selector list of a different class
    gives the selector the same properties as the extended class. Remember the `.hyperlink`
    class in a previous example? If you extend this class, then both classes will
    have the same properties:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend`伪类是*Less*伪类，使用与CSS伪类相同的语法。`extend`伪类将选择器添加到**扩展选择器**列表中。将选择器添加到不同类的选择器列表中，使选择器具有与扩展类相同的属性。还记得之前示例中的`.hyperlink`类吗？如果您扩展此类，那么两个类将具有相同的属性：'
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This code will get compiled into the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将编译为以下代码：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Notice that the nested `:hover` pseudo class is not covered in `.other-hyperlink`.
    To extend a class including the nested elements of the extended style, you will
    have to add the `all` keyword, as shown in the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，嵌套的`:hover`伪类未在`.other-hyperlink`中涵盖。要扩展包括扩展样式的嵌套元素的类，必须在选择器末尾添加`all`关键字，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This code now gets compiled into the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，此代码将编译为以下代码：
- en: '[PRE36]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In cases where you nest the `:extend` statement, you have to use the `&` symbol
    as a reference, as shown in the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌套`：extend`语句的情况下，您必须使用`&`符号作为引用，如下面的代码所示：
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In spite of the fact that the `extend` syntax mimics the syntax of the pseudo
    class, both of them can be combined as long as `:extend` is added at the end of
    the selector, as shown in the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`extend`语法模仿伪类的语法，但只要在选择器末尾添加`:extend`，两者就可以结合使用，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Property merging
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性合并
- en: '**Property merging** is useful if properties accept a **Comma Separated Value**
    (**CSV**). You will find this type of property mostly in CSS3, where borders,
    backgrounds, and transitions accept a CSV list. However, you will also find that
    the old-school `font-family` parameter accepts a list of font names that are separated
    by commas. Properties are merged by adding a plus sign (`+`) after their names,
    as shown in the following code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性合并**在属性接受**逗号分隔值**（**CSV**）时非常有用。您将在CSS3中大多数情况下找到这种类型的属性，其中边框、背景和过渡接受CSV列表。但是，您还会发现老式的`font-family`参数接受由逗号分隔的字体名称列表。通过在名称后添加加号（`+`）来合并属性，如下面的代码所示：'
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This code will get compiled into the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将编译为以下代码：
- en: '[PRE40]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Built-in functions
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置函数
- en: '*Less* supports many handy **built-in functions**. A built-in function can
    be used to manipulate *Less* values inside mixins and set the variables'' values.
    Last but not least, they can also be used in **guard expressions**. You will find
    the complete list of functions by visiting [http://lesscss.org/functions/](http://lesscss.org/functions/).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*Less*支持许多方便的**内置函数**。内置函数可用于在混合中操作*Less*值并设置变量的值。最后但同样重要的是，它们还可以用于**守卫表达式**。您可以通过访问[http://lesscss.org/functions/](http://lesscss.org/functions/)找到完整的函数列表。'
- en: In this chapter, you won't find them all, but you will learn how to use functions
    from all different groups. Functions can be grouped based on their input and output
    types, where these types are mathematical functions, color functions, list functions,
    string functions, and type functions. There is also a small number of functions
    that can't be grouped using the preceding classification.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您不会找到所有这些函数，但您将学习如何使用来自所有不同组的函数。函数可以根据其输入和输出类型进行分组，其中这些类型是数学函数、颜色函数、列表函数、字符串函数和类型函数。还有一小部分函数无法使用前述分类进行分组。
- en: JavaScript
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: '*Less* functions map native **JavaScript functions** and code in the first
    place because of the fact that *Less* has been written in JavaScript. Currently,
    JavaScript expressions can still be evaluated as values inside *Less* code, but
    this ability may be removed in future versions. JavaScript code should be wrapped
    between back quotes when used in your *Less* code, as shown in the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*Less*函数首先映射本机**JavaScript函数**和代码，因为*Less*是用JavaScript编写的。目前，JavaScript表达式仍然可以在*Less*代码中作为值进行评估，但这种能力可能会在将来的版本中被移除。在您的*Less*代码中使用JavaScript代码时，应该将JavaScript代码包装在反引号之间，如下面的代码所示：'
- en: '[PRE41]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This *Less* code, which includes JavaScript code, will compile into the following
    CSS code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 包含JavaScript代码的*Less*代码将编译为以下CSS代码：
- en: '[PRE42]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Even though it is possible, try to avoid using JavaScript in your code. **Less
    compilers** written in other languages can't evaluate this code, so your code
    is not portable and is more difficult to maintain.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可能，但尽量避免在代码中使用JavaScript。用其他语言编写的**Less编译器**无法评估此代码，因此您的代码不具备可移植性，并且更难以维护。
- en: 'If there is no built-in *Less* function available for your purpose, try to
    write the equivalent of what you need in *Less* code. Since Version 1.6, there
    is a `max()` function, and previously, you could use the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的目的没有内置的*Less*函数可用，尝试用*Less*代码编写您需要的等效代码。自1.6版本以来，有一个`max()`函数，以前可以使用以下代码：
- en: '[PRE43]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In particular, watch out when using the JavaScript environment in your *Less*
    code. Also, values such as `document.body.height` make no sense in your compiled
    and stateless CSS.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在使用JavaScript环境时要小心在您的*Less*代码中。此外，诸如`document.body.height`之类的值在您编译的无状态CSS中毫无意义。
- en: List functions
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表函数
- en: '`Extract()` and `length()` are functions to get the values and the length of
    a CSV list. Together, these functions can be used to **iterate** as arrays over
    a CSV list.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Extract()`和`length()`是用于获取CSV列表的值和长度的函数。这些函数可以一起用于作为数组在CSV列表上进行**迭代**。'
- en: Remember the loop used to set background images in [Chapter 2](ch02.html "Chapter 2. Using
    Variables and Mixins"), *Using Variables and Mixins*? Here, you will use the same
    technique to add icons before the links in the sidebar navigation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得在[第2章](ch02.html "第2章。使用变量和混合")中用于设置侧边栏导航中的链接前景图像的循环吗？在这里，您将使用相同的技术在链接之前添加图标。
- en: This example uses icons from Font Awesome. Font Awesome is an iconic font that
    uses scalable vector icons which can be manipulated by CSS. Icons can be scaled
    or colored easily with CSS; also, loading the font requires only one HTTP request
    for all icons. Please refer to [http://fontawesome.io/](http://fontawesome.io/)
    for more information.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用了来自Font Awesome的图标。Font Awesome是一种使用可缩放矢量图标的图标字体，可以通过CSS进行操作。图标可以很容易地通过CSS进行缩放或着色；此外，加载字体只需要一个HTTP请求来获取所有图标。请参阅[http://fontawesome.io/](http://fontawesome.io/)获取更多信息。
- en: 'To use Font Awesome, reference its source first by adding the following line
    of code to the head section of your HTML document:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Font Awesome，首先通过将以下代码添加到HTML文档的头部来引用其源：
- en: '[PRE44]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Font Awesome and other iconic fonts can also be integrated and compiled into
    your project using *Less*. You will learn how to do this in [Chapter 4](ch04.html
    "Chapter 4. Avoid Reinventing the Wheel"), *Avoid Reinventing the Wheel*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Font Awesome和其他图标字体也可以使用*Less*集成和编译到您的项目中。您将在[第4章](ch04.html "第4章。避免重复造轮子")中学习如何做到这一点，*避免重复造轮子*。
- en: 'In your HTML, you can now use the following line of code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的HTML中，现在可以使用以下代码行：
- en: '[PRE45]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Icons are added with the CSS `:before` pseudo class, so the preceding HTML
    code can also be styled without a class by using the following *Less* code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图标是使用CSS的`:before`伪类添加的，因此前面的HTML代码也可以通过以下*Less*代码进行样式设置，而无需使用类：
- en: '[PRE46]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Tip
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A list of Font Awesome icons and their CSS content values can be found by visiting
    [http://astronautweb.co/snippet/font-awesome/](http://astronautweb.co/snippet/font-awesome/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过访问[http://astronautweb.co/snippet/font-awesome/](http://astronautweb.co/snippet/font-awesome/)找到Font
    Awesome图标及其CSS内容值的列表。
- en: 'With this information about iconic fonts, you can construct a loop that adds
    icons to the list items of your navigation, as shown in the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有了关于图标字体的这些信息，您可以构建一个循环，将图标添加到导航的列表项中，如下面的代码所示：
- en: '[PRE47]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the `@icon_: e(extract(@icons, @i));` line, `e()` is a **string function**,
    and this function is the equivalent of escaping using `~""`. Please also note
    that in the `content: "@{icon_}\00a0";` statement, `\00a0` only adds an extra
    space that separates the icon from the link.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '在`@icon_: e(extract(@icons, @i));`行中，`e()`是一个**字符串函数**，这个函数相当于使用`~""`进行转义。还请注意，在`content:
    "@{icon_}\00a0";`语句中，`\00a0`只是添加了一个额外的空格，用于将图标与链接分隔开。'
- en: The icons in the `@icons` CSV list are randomly chosen. The recursive calling
    of the `add-icons-to-list()` mixin starts with the `.add-icons-to-list(length(@icons));`
    call, where `length(@icons)` returns the number of items in `@icons`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`@icons` CSV列表中的图标是随机选择的。`add-icons-to-list()` mixin的递归调用从`.add-icons-to-list(length(@icons));`调用开始，其中`length(@icons)`返回`@icons`中的项目数。'
- en: 'The *Less* code of the loop which adds icons to the list items should be added
    into `less/navicons.less`. After adding the code, open `http://localhost/indexnavicons.html`
    to see the results, which should look like the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将添加图标到列表项的循环的*Less*代码应该添加到`less/navicons.less`中。在添加代码后，打开`http://localhost/indexnavicons.html`查看结果，结果应该如下屏幕截图所示：
- en: '![List functions](img/1465-03-03.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![列表函数](img/1465-03-03.jpg)'
- en: Iconized hyperlinks built with Less and Font Awesome
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Less和Font Awesome构建的图标化超链接
- en: 'The icon list in the preceding screenshot serves only for demonstration purposes,
    where, in fact, the icons are not even related to the hyperlinks. The absence
    of this relationship makes it difficult to find a use case at all. However, with
    your creative minds, I bet you can find one. Remember that CSS is used only for
    presentation and cannot modify HTML, so you can''t set the links themselves using
    *Less*. However, creating a relationship between the hyperlinks and icons that
    already exist is possible, as shown in the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，图标列表仅用于演示目的，在实际情况下，这些图标甚至与超链接没有关联。这种关系的缺失使得很难找到任何用例。但是，凭借你们的创造力，我敢打赌你们能找到一个。请记住，CSS仅用于演示，不能修改HTML，因此无法使用*Less*设置链接本身。但是，可以创建超链接和已存在的图标之间的关系，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Here, `a[href*="linux"]` is a selector for all anchors with the word `linux`
    in their `href` attribute. After adding the preceding code to `less/styles.less`,
    you can view the results at `http://localhost/index.html`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`a[href*="linux"]`是一个选择器，用于选择所有`href`属性中包含`linux`单词的锚点。在将上述代码添加到`less/styles.less`后，可以在`http://localhost/index.html`上查看结果。
- en: Using color functions
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用颜色函数
- en: '*Less* color functions can be split into functions for **color definition**,
    **blending, operations**, and **channel manipulation**.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '*Less*颜色函数可以分为**颜色定义**、**混合、操作**和**通道操作**的函数。'
- en: 'Colors are defined in **color channels.** An RGB color has three channels:
    red, green, and blue. CSS2 used this RGB definition to declare colors, and CSS3
    adds new definitions for color declaration. These new definitions, such as HSL
    and HSV, are nothing more than transformations of RGB values. The CSS3 color setting
    methods should be more intuitive and user friendly. For instance, HSL defines
    colors in three channels, which are hue, saturation, and lightness in this case.
    *Less* has built-in functions for channel manipulation of different types of color
    definitions. *Less* also supports different types of color definitions. Since
    CSS3, you can declare color values as hexadecimal colors, RGB colors, RGBA colors
    (RGB colors with an additional alpha channel that sets the opacity), HSL colors,
    and HSLA colors (HSL colors with an additional alpha channel that also sets the
    opacity). Of course, you are allowed to use the predefined cross-browser color
    names.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色是在**颜色通道**中定义的。RGB颜色有三个通道：红色、绿色和蓝色。CSS2使用这个RGB定义来声明颜色，CSS3为颜色声明添加了新的定义。这些新的定义，如HSL和HSV，实际上只是RGB值的转换。CSS3颜色设置方法应该更直观和用户友好。例如，HSL在这种情况下定义了三个通道的颜色，即色调、饱和度和亮度。*Less*具有用于不同类型颜色定义的通道操作的内置函数。*Less*还支持不同类型的颜色定义。自CSS3以来，您可以将颜色值声明为十六进制颜色、RGB颜色、RGBA颜色（带有额外alpha通道的RGB颜色，用于设置不透明度）、HSL颜色和HSLA颜色（带有额外alpha通道的HSL颜色，也用于设置不透明度）。当然，您可以使用预定义的跨浏览器颜色名称。
- en: 'The compiled color values of *Less*''s color definitions are not always defined
    as a hexadecimal color in CSS code; if possible, the output of a color definition
    matches the CSS values, as shown in the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*Less*颜色定义的编译颜色值并不总是在CSS代码中定义为十六进制颜色；如果可能的话，颜色定义的输出与CSS值匹配，如下面的代码所示：'
- en: '[PRE49]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The preceding *Less* code becomes the following CSS code after compilation:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，上述*Less*代码变为以下CSS代码：
- en: '[PRE50]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Colors are a basic part of the design and styling of your website. Color functions
    can help you design your **color palettes** and make them dynamic. They will be
    used, for instance, to give elements a border color that is darker than the background
    color or to give elements contrasting colors that are based on a single input
    color.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色是网站设计和样式的基本部分。颜色函数可以帮助您设计您的**调色板**并使其具有动态性。例如，它们将用于为元素赋予比背景颜色更深的边框颜色，或者为元素赋予基于单个输入颜色的对比颜色。
- en: The darken() and lighten() functions
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`darken()`和`lighten()`函数'
- en: The `darken()` and `lighten()` functions are two color functions that can be
    used to obtain a darker or lighter variant of the input color. You have seen how
    these functions have been used in the example layout from [Chapter 2](ch02.html
    "Chapter 2. Using Variables and Mixins"), *Using Variables and Mixins*. Now you
    can apply these functions on the website navigation menu you have built previously.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`darken()`和`lighten()`函数是两个颜色函数，可用于获得输入颜色的较暗或较亮的变体。您已经看到这些函数如何在[第2章](ch02.html
    "第2章。使用变量和混合")的示例布局中使用，*使用变量和混合*。现在，您可以在先前构建的网站导航菜单上应用这些函数。'
- en: 'Please open `less/variablesnav.less` in your text editor and define your menu
    variables that are dependent on the main `@menucolor` parameter as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请在文本编辑器中打开`less/variablesnav.less`，并根据以下方式定义依赖于主`@menucolor`参数的菜单变量：
- en: '[PRE51]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: After doing this, check your changes by opening `http://localhost/indexnav.html`
    in your browser. Now you can modify the look of your navigation by only changing
    the color defined by the `@menucolor` variable. You will also find that setting
    `@menucolor` to a light color, such as pink or yellow, makes your fonts unreadable
    due to the **contrast** between the background color and the font color not being
    high enough. High contrast plays an important role in web design. Designs with
    high contrast help you meet **accessibility** standards. High contrast not only
    helps visibly disabled or color blind people, it also influences those with normal
    vision, as humans are naturally in favor of high contrast color designs. This
    favor plays a role in the first impression of your website.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过在浏览器中打开`http://localhost/indexnav.html`来检查您的更改。现在，您可以通过仅更改`@menucolor`变量定义的颜色来修改导航的外观。您还会发现，将`@menucolor`设置为浅色，如粉红色或黄色，会使您的字体由于背景颜色和字体颜色之间的**对比度**不够高而无法阅读。高对比度在网页设计中起着重要作用。高对比度的设计有助于满足**可访问性**标准。高对比度不仅有助于视觉障碍或色盲人士，也影响正常视力的人，因为人类天生喜欢高对比度的颜色设计。这种偏好在您网站的第一印象中起着作用。
- en: Calculating the right amount of contrast is not always easy. Also, in this case,
    you don't want to have to change all your font colors after changing the basic
    color. The `contrast()` function of *Less* will help you to choose a color that
    can easily be seen against a colored background. In accordance with WCAG 2.0 ([http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef](http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef)),
    this function compares the **luma** value and not the lightness of the colors.
    The `luma()` function itself is also a built-in color function.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 计算正确的对比度并不总是容易的。此外，在这种情况下，您不希望在更改基本颜色后不得不更改所有字体颜色。*Less*的`contrast()`函数将帮助您选择一种颜色，可以在有色背景下轻松看到。根据WCAG
    2.0（[http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef](http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef)），此函数比较**亮度**值而不是颜色的明亮度。`luma()`函数本身也是一个内置的颜色函数。
- en: The `contrast()` function accepts four parameters. The first parameter defines
    the color to be compared against; this is the background color in this particular
    case. The second and third parameters define the dark and light color, which are
    black and white by default. The fourth and last parameter sets a threshold. This
    threshold has been set to 43 percent by default and defines the luma (perceptual
    brightness). Colors above the threshold are considered as light, and `contrast()`
    returns the dark color that is already defined in the second parameter for these
    light colors.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`contrast()`函数接受四个参数。第一个参数定义要与之比较的颜色；在这种特殊情况下，这是背景颜色。第二和第三个参数定义暗色和亮色，默认为黑色和白色。第四个和最后一个参数设置一个阈值。默认情况下，此阈值设置为43%，并定义了亮度（感知亮度）。超过阈值的颜色被视为亮色，`contrast()`返回已在第二个参数中定义的暗色。'
- en: 'Now, reopen `less/variablesnav.less` and change the navigating font colors
    according to the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新打开`less/variablesnav.less`，并根据以下代码更改导航字体颜色：
- en: '[PRE52]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: To see more effects, change the `@menucolor` variable to different colors such
    as `yellow`, `pink`, `darkgreen`, or `black` and observe the change by opening
    `http://localhost/indexnav.html`. Keep in mind that the lightest color is white
    and the darkest is black, so `darken(black,10%);` or `lighten(white,10%);` won't
    have any effect.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多效果，请将`@menucolor`变量更改为不同的颜色，如`yellow`、`pink`、`darkgreen`或`black`，并通过打开`http://localhost/indexnav.html`来观察变化。请记住，最浅的颜色是白色，最深的是黑色，因此`darken(black,10%);`或`lighten(white,10%);`不会产生任何效果。
- en: Color manipulation
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色操作
- en: As mentioned earlier, *Less* provides you with many functions to manipulate
    colors. This book is not about **color theory**, so it handles only some examples
    of color manipulation. You can find more information about color theory by visiting
    [http://www.packtpub.com/article/introduction-color-theory-lighting-basics-blender](http://www.packtpub.com/article/introduction-color-theory-lighting-basics-blender).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，*Less*为您提供了许多操作颜色的功能。本书不涉及**色彩理论**，因此只处理了一些颜色操作的示例。您可以通过访问[http://www.packtpub.com/article/introduction-color-theory-lighting-basics-blender](http://www.packtpub.com/article/introduction-color-theory-lighting-basics-blender)获取更多关于色彩理论的信息。
- en: Color operations
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色操作
- en: With the `darken(), lighten()`, and `contrast()` functions, you have become
    acquainted with some of the color operations. Other operations include `saturate()`,
    `desaturate()`, `fadein()`, `fadeout()`, `fade()`, `spin()`, `mix()`, and `grayscale()`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`darken()`、`lighten()`和`contrast()`函数，您已经了解了一些颜色操作。其他操作包括`saturate()`、`desaturate()`、`fadein()`、`fadeout()`、`fade()`、`spin()`、`mix()`和`grayscale()`。
- en: The functions mentioned earlier accept one or more color values, with the percentage
    as an input parameter, and return a color. Please note that the color ranges from
    white to black and does not wrap around. So, you can't, as mentioned earlier,
    darken the color black so that it becomes white.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的函数接受一个或多个颜色值，以百分比作为输入参数，并返回一个颜色。请注意，颜色范围从白色到黑色，不会环绕。因此，无法像前面提到的那样使黑色变暗，使其变成白色。
- en: If color definitions contain percentages, then the operations change them with
    the absolute percentage of the input parameter. So, `darken(hsl(90, 80%, 50%),
    20%)` becomes `#4d8a0f`; which equals `hsl(90, 80%,30%)` and *not* `hsl(90, 80%,10%)`.
    Of course, you will see the same effect as you manipulate the second channel,
    which defines saturation. For instance, `desaturate(hsl(45, 65%, 40%), 50%)` compiles
    into `#756e57;`, which equals `hsl(45, 15%, 40%)`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果颜色定义包含百分比，则操作会将其转换为输入参数的绝对百分比。因此，`darken(hsl(90, 80%, 50%), 20%)`变为`#4d8a0f`；相当于`hsl(90,
    80%,30%)`而*不是*`hsl(90, 80%,10%)`。当然，您会看到相同的效果，因为您操作了定义饱和度的第二通道。例如，`desaturate(hsl(45,
    65%, 40%), 50%)`编译为`#756e57;`，相当于`hsl(45, 15%, 40%)`。
- en: The `mix()` function is the last example of color operations. The other functions
    are left for you as exercises.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`mix()`函数是颜色操作的最后一个示例。其他函数留作练习。'
- en: '[PRE53]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This will again become the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这将再次变成以下内容：
- en: '[PRE54]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This mixture will also be shown in the following image :'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这种混合也将显示在以下图像中：
- en: '![Color operations](img/1465-03-04.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![颜色操作](img/1465-03-04.jpg)'
- en: How a mixture of blue and yellow is presented using `mix(blue, yellow, 50%)`
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用`mix(blue, yellow, 50%)`来呈现蓝色和黄色的混合
- en: Color blending with Less
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Less进行颜色混合
- en: The color blending functions calculate a new color based on two input colors,
    where functions apply basic operations such as subtraction on the color channels
    of the input colors. Available functions, also called blend modes, include `multiply()`,
    `screen()`, `overlay()`, `softlight()`, `hardlight()`, `difference()`, `exclusion()`,
    `average()`, and `negation()`. Users of layered image editors such as Photoshop
    or GIMP will recognize these functions.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色混合函数根据两个输入颜色计算新的颜色，其中函数对输入颜色的颜色通道应用基本操作，如减法。可用的函数，也称为混合模式，包括`multiply()`、`screen()`、`overlay()`、`softlight()`、`hardlight()`、`difference()`、`exclusion()`、`average()`和`negation()`。使用图层图像编辑器（如Photoshop或GIMP）的用户将会认识到这些函数。
- en: 'The `difference()` function subtracts the second color from the first color
    on a channel-by-channel basis, as shown in the following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`difference()`函数按通道逐个通道地从第一个颜色中减去第二个颜色，如下所示：'
- en: '[PRE55]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The preceding code will become the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将变成以下代码：
- en: '[PRE56]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following figure shows how a mixture of orange and red would appear:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了橙色和红色混合的效果：
- en: '![Color blending with Less](img/1465-03-05.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![使用Less进行颜色混合](img/1465-03-05.jpg)'
- en: How a mixture of orange and red will appear using `difference(orange, red, 50%)`
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`difference(orange, red, 50%)`来呈现橙色和红色的混合
- en: Type functions
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型函数
- en: 'Type functions evaluate the type of the input value and return as `true` if
    the type matches the function. The functions that are available are `isnumber(),`
    `isstring()`, `iscolor()`, `iskeyword()`, `isurl()`, `ispixel()`, `isem()`, `ispercentage()`,
    and `isunit()`. Some example functions are shown in the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 类型函数评估输入值的类型，并在类型匹配函数时返回`true`。可用的函数包括`isnumber()`、`isstring()`、`iscolor()`、`iskeyword()`、`isurl()`、`ispixel()`、`isem()`、`ispercentage()`和`isunit()`。以下代码显示了一些示例函数：
- en: '[PRE57]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Type functions are useful in defining guards. Please consider the following
    syntax:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 类型函数在定义守卫时非常有用。请考虑以下语法：
- en: '[PRE58]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The `default()` function is another built-in function that is not grouped in
    a function class. The `default()` function can be used inside a guard and returns
    as `true` when none of the other mixins match the caller. You can add a default
    mixin to the preceding mixins, as shown in the following code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`default()`函数是另一个内置函数，不属于函数类。`default()`函数可以在守卫内使用，并在没有其他mixin与调用者匹配时返回`true`。您可以将默认mixin添加到前面的mixin中，如下所示：'
- en: '[PRE59]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The box-shadow mixin
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: box-shadow mixin
- en: 'With all that you have learned about *Less*, you now can understand, build,
    and evaluate any complex *Less* code. To prove this, please open `less/mixins.less`
    and take a look at the box-shadow mixin (originally published on [lesscss.org](http://lesscss.org)),
    which looks like the following code:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习*Less*，您现在可以理解、构建和评估任何复杂的*Less*代码。为了证明这一点，请打开`less/mixins.less`，看一下box-shadow
    mixin（最初发布在[lesscss.org](http://lesscss.org)上），代码如下：
- en: '[PRE60]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: To fully understand these mixins, you will have to know the basics of **box-shadow**
    in CSS3\. The box-shadow properties accept a CSV list of shadows. A shadow consists
    of a list of two to four length values and a color. The first two length values
    describe the vertical and horizontal offsets related to the center of the box.
    These values are required but can be set to `0` to get an equal-size shadow around
    the box. The final values are optional and set the blur radius and the spread
    radius, respectively. The blur and spread radii are both `0` by default and give
    a sharp shadow, where the spread radius equals the blur radius.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解这些混合，您将需要了解CSS3中**box-shadow**的基础知识。box-shadow属性接受阴影的CSV列表。阴影由两到四个长度值和一个颜色组成。前两个长度值描述与框的中心相关的垂直和水平偏移量。这些值是必需的，但可以设置为`0`以获得围绕框的等大小阴影。最后的值是可选的，并设置模糊半径和扩展半径。默认情况下，模糊和扩展半径都为`0`，并产生一个锐利的阴影，其中扩展半径等于模糊半径。
- en: Now you should be able to evaluate the mixin. You will see that the mixins form
    a guard. Both mixins accept two parameters. The first parameter is the length
    vector, which is described earlier; the second is a color or a percentage. If
    you recall that the `isnumber(40%)` call evaluates as `true` despite the ending
    percent sign. Calling `rgba(0, 0, 0, @alpha)` will give shades of gray depending
    on the value of `@alpha`. If you define the second parameter as a color, such
    as `blue` or `#0000ff`#, the `iscolor(@c)` guard will evaluate as `true`, and
    the first mixin will be compiled using your defined color.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够评估这个混合。您将看到这些混合形成了一个保护。两个混合都接受两个参数。第一个参数是长度向量，如前所述；第二个是颜色或百分比。如果您回忆一下`isnumber(40%)`的调用会评估为`true`，尽管最后有百分号。调用`rgba(0,
    0, 0, @alpha)`将根据`@alpha`的值给出灰色的阴影。如果您将第二个参数定义为颜色，比如`blue`或`#0000ff`，`iscolor(@c)`保护将评估为`true`，并且第一个混合将使用您定义的颜色进行编译。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you built a navigation menu with *Less*. The navigation contains,
    amongst other things, hovers, contrast colors, and icons that can all be set with
    a few basic settings. You have learned how to use nesting rules, mixins, and built-in
    functions in *Less*. At the end of the chapter, you have understood and used complex
    *Less* code. All this newly acquired knowledge will be very useful in the next
    chapter. In the next chapter, you will learn how to find and build reusable *Less*
    code. This will help you work faster and obtain better results.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您使用*Less*构建了一个导航菜单。导航包含了悬停、对比颜色和图标等内容，所有这些都可以通过几个基本设置来设置。您已经学会了如何在*Less*中使用嵌套规则、混合和内置函数。在本章的结尾，您已经理解并使用了复杂的*Less*代码。所有这些新获得的知识将在下一章中非常有用。在下一章中，您将学习如何查找和构建可重用的*Less*代码。这将帮助您更快地工作并获得更好的结果。
