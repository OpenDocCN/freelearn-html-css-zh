- en: Chapter 6. Bootstrap 3, WordPress, and Other Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Bootstrap 3，WordPress和其他应用程序
- en: After reading the preceding chapters, you should have learned enough to build
    your own projects with *Less*. You will write better CSS and achieve more than
    you did before in the same time. You are definitely ready for the last step now.
    In the last chapter of this book, you will learn how to use *Less* with other
    well-known frameworks, applications, and tools. You will read about the web developer's
    tools that are built with *Less* or have integrated *Less* in their workflow.
    These projects can be used, customized, and extended with *Less* and will help
    you build better projects with *Less*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '在阅读了前面的章节之后，你应该已经学会了如何使用*Less*构建自己的项目。你将在同样的时间内写出更好的CSS并取得更多的成就。你现在绝对已经准备好了最后一步。在本书的最后一章中，你将学习如何在其他知名框架、应用程序和工具中使用*Less*。你将了解到使用*Less*构建更好项目的工具，这些项目可以使用、定制和扩展*Less*。 '
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Bootstrap 3
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 3
- en: Semantic UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义化UI
- en: Building grids with *Less*
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*Less*构建网格
- en: WordPress and *Less*
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WordPress和*Less*
- en: Alternative compilers to compile your *Less* code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译*Less*代码的替代编译器
- en: Bootstrap 3
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap 3
- en: Bootstrap 3, formerly known as **Twitter's Bootstrap**, is a CSS and JavaScript
    framework for building application frontends. The three in Bootstrap 3 refers
    to the third version of this framework; wherever Bootstrap is written in this
    book, it refers to this third version. The third version of Bootstrap has important
    changes over the earlier versions of the framework. Bootstrap 3 is not compatible
    with the earlier versions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 3，以前被称为**Twitter的Bootstrap**，是用于构建应用程序前端的CSS和JavaScript框架。Bootstrap
    3中的三指的是这个框架的第三个版本；在本书中提到Bootstrap时，指的就是这个第三个版本。Bootstrap 3与框架早期版本有重要的变化。Bootstrap
    3与早期版本不兼容。
- en: 'Bootstrap 3 can be used to build great frontends. You can download the complete
    framework, including CSS and JavaScript, and start using it right away. Bootstrap
    also has a **grid**. The grid of Bootstrap is mobile-first by default and has
    12 columns. In fact, Bootstrap defines four grids: the extra-small grid up to
    768 pixels (mobile phones), the small grid between 768 and 992 pixels (tablets),
    the medium grid between 992 and 1200 pixels (desktop), and finally, the large
    grid of 1200 pixels and above for large desktops . In [Chapter 5](ch05.html "Chapter 5. Integrate
    Less in Your Own Projects"), *Integrate Less in Your Own Projects*, you build
    a grid with Preboot''s mixins; Bootstrap''s grid works in a similar way.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 3可以用来构建出色的前端。你可以下载完整的框架，包括CSS和JavaScript，并立即开始使用。Bootstrap还有一个**网格**。Bootstrap的网格默认是移动优先的，有12列。事实上，Bootstrap定义了四个网格：小于768像素的超小网格（手机），768到992像素之间的小网格（平板电脑），992到1200像素之间的中等网格（桌面），最后，大于1200像素的大桌面的大网格。在[第5章](ch05.html
    "第5章。将Less集成到您自己的项目中")中，*将Less集成到您自己的项目中*，你使用Preboot的mixin构建了一个网格；Bootstrap的网格以类似的方式工作。
- en: The grid, all other CSS components, and JavaScript plugins are described and
    well documented at [http://getbootstrap.com/](http://getbootstrap.com/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 网格、所有其他CSS组件和JavaScript插件在[http://getbootstrap.com/](http://getbootstrap.com/)上都有描述和文档。
- en: 'Bootstrap''s default theme looks like the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的默认主题如下截图所示：
- en: '![Bootstrap 3](img/1465OS_06_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap 3](img/1465OS_06_01.jpg)'
- en: Example of a layout built with Bootstrap 3
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bootstrap 3构建的布局示例
- en: The time when all Bootstrap websites looked quite similar is far behind us now.
    Bootstrap will give you all the freedom you need to create innovative designs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 过去所有的Bootstrap网站看起来都很相似的时代已经远去。Bootstrap将给你创造创新设计所需的所有自由。
- en: There is much more to tell about Bootstrap, but for now, let's get back to *Less*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Bootstrap还有很多要讲，但现在让我们回到*Less*。
- en: Working with Bootstrap's Less files
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bootstrap的Less文件
- en: All the CSS code of Bootstrap is written in *Less*. You can download Bootstrap's
    *Less* files and recompile your own version of the CSS. The *Less* files can be
    used to customize, extend, and reuse Bootstrap's code. In the following sections,
    you will learn how to do this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的所有CSS代码都是用*Less*编写的。你可以下载Bootstrap的*Less*文件并重新编译自己的版本的CSS。*Less*文件可以用于定制、扩展和重用Bootstrap的代码。在接下来的章节中，你将学习如何做到这一点。
- en: To download the *Less* files, follow the links at [http://getbootstrap.com/](http://getbootstrap.com/)
    to Bootstrap's GitHub pages at [https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap).
    On this page, choose **Download Zip** on the right-hand side column.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载*Less*文件，请在[http://getbootstrap.com/](http://getbootstrap.com/)上的Bootstrap的GitHub页面[https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap)上选择**下载Zip**在右侧栏。
- en: Building a Bootstrap project with Grunt
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Grunt构建Bootstrap项目
- en: After downloading the files mentioned earlier, you can build a Bootstrap project
    with **Grunt**. Grunt is a JavaScript task runner; it can be used for the automation
    of your processes. Grunt helps you when performing repetitive tasks such as minifying,
    compiling, unit testing, and linting your code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载了前面提到的文件之后，你可以使用**Grunt**构建一个Bootstrap项目。Grunt是一个JavaScript任务运行器；它可以用于自动化你的流程。Grunt在执行重复任务时会帮助你，比如代码的缩小、编译、单元测试和代码的linting。
- en: Grunt runs on **node.js** and uses **npm**, which you saw while installing the
    *Less* compiler. Node.js is a standalone JavaScript interpreter built on Google's
    V8 JavaScript runtime, as used in Chrome. Node.js can be used for easily building
    fast, scalable network applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt在**node.js**上运行，并使用**npm**，你在安装*Less*编译器时看到了。Node.js是一个独立的JavaScript解释器，建立在谷歌的V8
    JavaScript运行时上，就像在Chrome中使用的那样。Node.js可以用于轻松构建快速、可扩展的网络应用程序。
- en: When you unzip the files from the downloaded file, you will find `Gruntfile.js`
    and `package.json` among others. The `package.json` file contains the metadata
    for projects published as npm modules. The `Gruntfile.js` file is used to configure
    or define tasks and load Grunt plugins. The Bootstrap Grunt configuration is a
    great example to show you how to set up automation testing for projects containing
    HTML, *Less* (CSS), and JavaScript. This book can't handle all of this; more information
    about Grunt.js can be found in *Grunt.js Cookbook* available at [http://www.packtpub.com/grunt-js-cookbook/book](http://www.packtpub.com/grunt-js-cookbook/book).
    The parts that are interesting for you as a *Less* developer are mentioned in
    the following sections.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你解压下载的文件时，你会在其中找到`Gruntfile.js`和`package.json`等文件。`package.json`文件包含了作为npm模块发布的项目的元数据。`Gruntfile.js`文件用于配置或定义任务和加载Grunt插件。Bootstrap
    Grunt配置是一个很好的例子，可以向你展示如何为包含HTML、*Less*（CSS）和JavaScript的项目设置自动化测试。这本书无法涵盖所有内容；关于Grunt.js的更多信息可以在[http://www.packtpub.com/grunt-js-cookbook/book](http://www.packtpub.com/grunt-js-cookbook/book)上找到*Grunt.js
    Cookbook*。作为*Less*开发者，对你有趣的部分在下面的章节中提到。
- en: In `package.json` file, you will find that Bootstrap compiles its *Less* files
    with `grunt-contrib-less`. At the time of writing this book, the `grunt-contrib-less`
    plugin compiles *Less* with less.js Version 1.7\. In contrast to Recess (another
    JavaScript build tool previously used by Bootstrap), `grunt-contrib-less` also
    supports source maps.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在`package.json`文件中，你会发现Bootstrap使用`grunt-contrib-less`来编译它的*Less*文件。在撰写本书时，`grunt-contrib-less`插件使用less.js版本1.7来编译*Less*。与Recess（Bootstrap先前使用的另一个JavaScript构建工具）相比，`grunt-contrib-less`也支持源映射。
- en: Apart from `grunt-contrib-less`, Bootstrap also uses `grunt-contrib-csslint`
    to check the compiled CSS for syntax errors. The `grunt-contrib-csslint` plugin
    also helps improve browser compatibility, performance, maintainability, and accessibility.
    The plugin's rules are based on the principles of object-oriented CSS ([http://www.slideshare.net/stubbornella/object-oriented-css](http://www.slideshare.net/stubbornella/object-oriented-css)).
    You can find more information by visiting [https://github.com/stubbornella/csslint/wiki/Rules](https://github.com/stubbornella/csslint/wiki/Rules).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`grunt-contrib-less`，Bootstrap还使用`grunt-contrib-csslint`来检查编译后的CSS是否存在语法错误。`grunt-contrib-csslint`插件还有助于改善浏览器兼容性、性能、可维护性和可访问性。该插件的规则基于面向对象的CSS原则（[http://www.slideshare.net/stubbornella/object-oriented-css](http://www.slideshare.net/stubbornella/object-oriented-css)）。你可以通过访问[https://github.com/stubbornella/csslint/wiki/Rules](https://github.com/stubbornella/csslint/wiki/Rules)来获取更多信息。
- en: Bootstrap makes heavy use of *Less* variables, which can be set by the customizer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap大量使用*Less*变量，这些变量可以通过自定义器进行设置。
- en: Whoever has studied the source of `Gruntfile.js` may very well also find a reference
    to the `BsLessdocParser` Grunt task. This Grunt task is used to build Bootstrap's
    customizer dynamically based on the *Less* variables used by Bootstrap. Though
    the process of parsing *Less* variables to build, for instance, documentation
    will be very interesting, this task is not discussed here further. You will read
    about the customizer later in this chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经研究过`Gruntfile.js`源代码的人可能也会找到对`BsLessdocParser` Grunt任务的引用。这个Grunt任务用于基于Bootstrap使用的*Less*变量动态构建Bootstrap的自定义器。尽管解析*Less*变量来构建文档等过程非常有趣，但这个任务在这里不再讨论。你将在本章后面了解到自定义器。
- en: 'This section ends with the part of `Gruntfile.js` that does the *Less* compiling.
    The following code from `Gruntfile.js` should give you an impression of how this
    code will look:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本节以`Gruntfile.js`中执行*Less*编译的部分结束。`Gruntfile.js`中的以下代码应该让你对这段代码的外观有所了解：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Last but not least, let's have a look at the basic steps to run Grunt from the
    command line and build Bootstrap. Grunt will be installed with npm. Npm checks
    Bootstrap's `package.json` file and automatically installs the necessary local
    dependencies listed there.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一下从命令行运行Grunt并构建Bootstrap的基本步骤。Grunt将通过npm安装。Npm会检查Bootstrap的`package.json`文件，并自动安装列在那里的必要的本地依赖项。
- en: 'To build Bootstrap with Grunt, you will have to enter the following commands
    on the command line:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Grunt构建Bootstrap，你需要在命令行上输入以下命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, you can compile the CSS and JavaScript by running the following
    command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以通过运行以下命令来编译CSS和JavaScript：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will compile your files into the `/dist` directory. The `> grunt test`
    command will also run the built-in tests.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你的文件编译到`/dist`目录中。`> grunt test`命令也会运行内置的测试。
- en: Compiling your Less files
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译你的Less文件
- en: Although you can build Bootstrap with Grunt, you don't have to use Grunt. You
    will find the *Less* files in a separate directory called `/less` inside the root
    `/bootstrap` directory. The main project file is `bootstrap.less`; other files
    will be explained in the next section. You can use `bootstrap.less` in the same
    way as you did in the earlier chapters.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用Grunt构建Bootstrap，但并不一定非要使用Grunt。你会在根目录`/bootstrap`内找到一个名为`/less`的单独目录中的*Less*文件。主项目文件是`bootstrap.less`；其他文件将在下一节中解释。你可以像在前面的章节中一样使用`bootstrap.less`。
- en: 'You can include `bootstrap.less` together with less.js into your HTML for the
    purpose of testing as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`bootstrap.less`与less.js一起包含到你的HTML中进行测试。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Of course, you can compile this file server side too as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以在服务器端编译这个文件，方法如下：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Dive into Bootstrap's Less files
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入了解Bootstrap的Less文件
- en: 'Now it''s time to look at Bootstrap''s *Less* files in more detail. The `/less`
    directory contains a long list of files. You will recognize some files by their
    names. You have seen files such as `variables.less`, `mixins.less`, and `normalize.less`
    earlier. Open `bootstrap.less` to see how the other files are organized. The comments
    inside `bootstrap.less` tell you that the *Less* files are organized by functionality
    as shown in the following code snippet:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更详细地查看Bootstrap的*Less*文件了。`/less`目录包含了一长串文件。您可以通过它们的名称来识别一些文件。您之前已经看到了一些文件，比如`variables.less`、`mixins.less`和`normalize.less`。打开`bootstrap.less`文件，看看其他文件是如何组织的。`bootstrap.less`文件中的注释告诉您，*Less*文件按功能组织，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Although Bootstrap is strongly CSS-based, some of the components don't work
    without the related JavaScript plugins. The navbar component is an example of
    this. Bootstrap's plugins require **jQuery**. You can't use the newest 2.x version
    of jQuery because this version doesn't have support for Internet Explorer 8.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Bootstrap基本上是基于CSS的，但一些组件在没有相关的JavaScript插件的情况下无法工作。导航栏组件就是一个例子。Bootstrap的插件需要**jQuery**。您不能使用最新的2.x版本的jQuery，因为这个版本不支持Internet
    Explorer 8。
- en: To compile your own version of Bootstrap, you have to change the variables defined
    in `variables.less`. In the preceding chapters, you learned that you don't have
    to overwrite the original files and variables. When using the *last declaration
    wins* and *lazy loading* rules, it will be easy to redeclare some variables. Redeclaration
    of variables was discussed earlier in [Chapter 2](ch02.html "Chapter 2. Using
    Variables and Mixins"), *Using Variables and Mixins*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译您自己的Bootstrap版本，您必须更改`variables.less`中定义的变量。在前面的章节中，您已经学会了不必覆盖原始文件和变量。使用*最后声明胜出*和*延迟加载*规则时，重新声明一些变量将变得很容易。变量的重新声明在[第2章](ch02.html
    "第2章。使用变量和混合")中已经讨论过，*使用变量和混合*。
- en: Creating a custom button with Less
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Less创建自定义按钮
- en: 'By default, Bootstrap defines seven different buttons, as shown in the following
    screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bootstrap定义了七种不同的按钮，如下截图所示：
- en: '![Creating a custom button with Less](img/1465OS_06_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![使用Less创建自定义按钮](img/1465OS_06_02.jpg)'
- en: The seven different button styles of Bootstrap 3
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 3的七种不同按钮样式
- en: 'Please take a look at the following HTML structure of Bootstrap''s buttons
    before you start writing your *Less* code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写*Less*代码之前，请查看Bootstrap按钮的以下HTML结构：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A button has two classes. Globally, the first `.btn` class only provides layout
    styles, and the second `.btn-default` class adds the colors. In this example,
    you will only change the colors, and the button's layout will be kept intact.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个按钮有两个类。全局来看，第一个`.btn`类只提供布局样式，第二个`.btn-default`类添加颜色。在这个例子中，您只会改变颜色，按钮的布局将保持不变。
- en: 'Open `buttons.less` in your text editor. In this file, you will find the following
    *Less* code for the different buttons:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`buttons.less`文件。在这个文件中，您会找到不同按钮的以下*Less*代码：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code makes it clear that you can use the `.button-variant()`
    mixin to create your customized buttons. For instance, to define a custom button,
    you can use the following *Less* code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码清楚地表明，您可以使用`.button-variant()`混合来创建自定义按钮。例如，要定义一个自定义按钮，您可以使用以下*Less*代码：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding case, you want to extend Bootstrap with your customized button,
    add your code to a new file, and call this file `custom.less`. Appending `@import
    custom.less` to the list of components inside `bootstrap.less` will work well.
    The disadvantage of doing this will be that you will have to change `bootstrap.less`
    again when updating Bootstrap; so, alternatively, you could create a file such
    as `custombootstrap.less` which contains the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，如果您想要使用自定义按钮扩展Bootstrap，可以将您的代码添加到一个新文件中，并将该文件命名为`custom.less`。将`@import
    custom.less`附加到`bootstrap.less`中的组件列表中将起作用。这样做的缺点是，当更新Bootstrap时，您将不得不再次更改`bootstrap.less`；或者，您可以创建一个名为`custombootstrap.less`的文件，其中包含以下代码：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous step extends Bootstrap with a custom button; alternatively, you
    could also change the colors of the default button by redeclaring its variables.
    To do this, create a new file, `custombootstrap.less` again, and add the following
    code into it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤使用自定义按钮扩展了Bootstrap；或者，您还可以通过重新声明其变量来更改默认按钮的颜色。为此，再次创建一个名为`custombootstrap.less`的文件，并将以下代码添加到其中：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In some situations, you will, for instance, need to use the button styles without
    everything else of Bootstrap. In these situations, you can use the `reference`
    keyword with the `@import` directive, as discussed earlier in [Chapter 5](ch05.html
    "Chapter 5. Integrate Less in Your Own Projects"), *Integrate Less in Your Own
    Projects*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，例如，您需要使用Bootstrap的按钮样式，而不需要其他任何东西。在这种情况下，您可以在`@import`指令中使用`reference`关键字，如前面在[第5章](ch05.html
    "第5章。将Less集成到您自己的项目中")中讨论的那样，*将Less集成到您自己的项目中*。
- en: 'You can use the following *Less* code to create a Bootstrap button for your
    project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下*Less*代码为您的项目创建一个Bootstrap按钮：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see the result of the preceding code by visiting `http://localhost/index.html`
    in your browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在浏览器中访问`http://localhost/index.html`来查看上述代码的结果。
- en: Notice that depending on the version of less.js you use, you may find some unexpected
    classes in the compiled output. **Media queries** or extended classes sometimes
    break the referencing in older versions of less.js.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据您使用的less.js版本，您可能会在编译输出中找到一些意外的类。**媒体查询**或扩展类有时会破坏旧版本的less.js中的引用。
- en: Customizing Bootstrap's navbar with Less
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Less自定义Bootstrap的导航栏
- en: 'An important component of Bootstrap is the navigation bar. The navigation bar
    adds the main navigation to a website. It mostly contains a logo or brand name,
    a searchbox, and navigation links. In this book, navbar refers to the navigation
    bar. A typical Bootstrap navbar will look like the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的一个重要组件是导航栏。导航栏为网站添加了主要导航。它主要包含标志或品牌名称、搜索框和导航链接。在本书中，导航栏指的是导航栏。典型的Bootstrap导航栏将如下截图所示：
- en: '![Customizing Bootstrap''s navbar with Less](img/1465OS_06_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用Less自定义Bootstrap的导航栏](img/1465OS_06_03.jpg)'
- en: Example of a Bootstrap navbar
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap导航栏的示例
- en: 'Bootstrap''s navbar is responsive by default. On small screen sizes, the preceding
    navbar will look like the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的导航栏默认是响应式的。在小屏幕尺寸上，上述导航栏将如下截图所示：
- en: '![Customizing Bootstrap''s navbar with Less](img/1465OS_06_04.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用Less自定义Bootstrap的导航栏](img/1465OS_06_04.jpg)'
- en: A collapsed and opened Bootstrap navbar
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 折叠和展开的Bootstrap导航栏
- en: In addition to the CSS, Bootstrap's responsive navbar requires the collapse
    JavaScript plugin. This plugin should be included in your version of Bootstrap.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了CSS之外，Bootstrap的响应式导航栏还需要折叠JavaScript插件。这个插件应该包含在您的Bootstrap版本中。
- en: 'Now, try to change the colors of the default navbar as an example. To do this,
    you must first open `variables.less` to find out which variables color the navbar
    as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试更改默认导航栏的颜色作为示例。为此，您必须首先打开`variables.less`，以找出哪些变量给导航栏上色，如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You have seen that it was easy to find these variables. The comments in the
    file are a handy guide to find them. You will also see that the meaningful and
    descriptive names for variables make sense, as learned in [Chapter 2](ch02.html
    "Chapter 2. Using Variables and Mixins"), *Using Variables and Mixins*. On the
    other hand, you may be wondering why there are so many variables only for the
    navbar. The navbar has many elements and different manifestations that need to
    be defined with variables. As mentioned earlier, Bootstrap's navbar is responsive
    by default; it collapses for smaller screens (or in fact, from the mobile-first
    point of view, it becomes horizontal for larger screen sizes). So, styles must
    be defined for both the collapsed and horizontal versions of the navbar. Colors
    for the navbar links and the collapsed menu toggle button are also set in the
    preceding code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到找到这些变量很容易。文件中的注释是找到它们的方便指南。您还会看到变量的有意义和描述性名称是有意义的，就像在[第2章](ch02.html "第2章。使用变量和mixin")中学到的那样，*使用变量和mixin*。另一方面，您可能会想知道为什么导航栏只有这么多变量。导航栏有许多元素和不同的表现形式，需要用变量来定义。正如前面提到的，Bootstrap的导航栏默认是响应式的；它会在较小的屏幕上折叠（或者从移动优先的角度来看，它会在较大的屏幕尺寸上变成水平的）。因此，必须为导航栏的折叠和水平版本定义样式。上述代码还设置了导航栏链接和折叠菜单切换按钮的颜色。
- en: 'Just like Bootstrap''s buttons, the Bootstrap navbar is also built with two
    classes, as shown in the following code snippet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Bootstrap的按钮一样，Bootstrap的导航栏也是用两个类构建的，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this case, the `.navbar` class provides layout styles, and the second `.navbar-default`
    class adds the colors and other variations. The `.navbar` class also has a third
    class that sets its type. There are four types of navbars: the default, fixed
    to top, fixed to bottom, and static top.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`.navbar`类提供布局样式，第二个`.navbar-default`类添加了颜色和其他变化。`.navbar`类还有一个设置其类型的第三个类。有四种类型的导航栏：默认、固定在顶部、固定在底部和静态顶部。
- en: 'The navbar classes can be found in `navbar.less`. The navbar doesn''t have
    a mixin to build the classes. The *Less* code provides classes for two alternate
    navbar styles: `.navbar-default` and `.navbar-inverse`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏类可以在`navbar.less`中找到。导航栏没有mixin来构建这些类。*Less*代码提供了两种备用导航栏样式的类：`.navbar-default`和`.navbar-inverse`。
- en: As there are no mixins to use, redeclaration of some of the navbar's variables
    will be the best option to customize its look and feel. Optionally, you can copy
    the complete `.navbar-default` class and use it for customization. Bootstrap intends
    to use only one navbar per page, so additional style classes don't have added
    value.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有mixin可用，重新声明一些导航栏的变量将是自定义其外观和感觉的最佳选择。或者，您可以复制完整的`.navbar-default`类并用于自定义。Bootstrap打算每页只使用一个导航栏，因此额外的样式类没有增加的价值。
- en: 'For instance, now set the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，现在设置如下：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can declare these variables into `customnavbar.less` and also add `@import
    "bootstrap.less";` to this file. Now, you can compile `customnavbar.less`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这些变量声明为`customnavbar.less`，并在该文件中添加`@import "bootstrap.less";`。现在，您可以编译`customnavbar.less`。
- en: You can see the result of the preceding code by visiting `http://localhost/customnavbar.html`
    in your browser.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在浏览器中访问`http://localhost/customnavbar.html`来查看上述代码的结果。
- en: Bootstrap classes and mixins
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bootstrap的类和mixin
- en: Skipping through the components, you will see that Bootstrap is a very complete
    framework. After the compilation of the framework, you have all the classes you
    need to build your responsive website. On the other hand, Bootstrap can also be
    used as a library. You have already seen how to use only the buttons.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览组件时，您会发现Bootstrap是一个非常完整的框架。在编译框架之后，您将拥有构建响应式网站所需的所有类。另一方面，Bootstrap也可以作为一个库来使用。您已经看到如何只使用按钮。
- en: 'In `utilities.less`, you can find the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`utilities.less`中，您可以找到以下代码：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code makes the `.clearfix` class available for direct usage in
    your HTML; on the other hand, you can still reuse the `.clearfix()` mixin. You
    can find Bootstrap's mixins in `mixins.less`. This strict separation of mixins
    and classes allows you to import `mixins.less` and apply these mixins into your
    own code under your own class name(s), without actually creating an output of
    these classes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使`.clearfix`类可以直接在您的HTML中使用；另一方面，您仍然可以重用`.clearfix()` mixin。您可以在`mixins.less`中找到Bootstrap的mixin。这种严格的mixin和类的分离允许您导入`mixins.less`并将这些mixin应用到您自己的代码中，而不需要实际创建这些类的输出。
- en: 'The preceding import of the `mixins.less` file will allow you to use Bootstrap''s
    gradient mixins for your own projects, as shown in the following code snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`mixins.less`文件的前面导入将允许您在自己的项目中使用Bootstrap的渐变mixin，如下面的代码片段所示：'
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code will compile into the following CSS code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将编译为以下CSS代码：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the gradient mixins are namespaced. Please also visit `http://localhost/gradient.html`
    to see how the background gradient from the preceding example will look.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，渐变混合是有命名空间的。还请访问`http://localhost/gradient.html`，以查看前面示例中的背景渐变的外观。
- en: Theming Bootstrap with Less
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Less主题化Bootstrap
- en: As Bootstrap's styles are built with *Less*, it will be easy to theme your own
    version of Bootstrap. There are basically two ways to integrate your theme's *Less*
    code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Bootstrap的样式是用*Less*构建的，因此很容易为Bootstrap的自定义版本设置主题。基本上有两种方法可以集成您的主题的*Less*代码。
- en: The first method compiles all code to a single CSS file. This method is recommended
    in most cases because loading requires only one HTTP request.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法将所有代码编译为单个CSS文件。在大多数情况下，推荐使用此方法，因为加载只需要一个HTTP请求。
- en: 'To use this method, import your theme file into `bootstrap.less` with the `@import`
    statement and recompile Bootstrap. Alternatively, create a new project file, for
    instance, `bootstraptheme.less`, which includes both, as shown in the following
    code snippet:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此方法，使用`@import`语句将您的主题文件导入到`bootstrap.less`中，并重新编译Bootstrap。或者，创建一个新的项目文件，例如`bootstraptheme.less`，其中包括两者，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This method overwrites Bootstrap's styles at the *Less* level, while the second
    method does the same at the CSS level. In this second method, the theme's *Less*
    code will be compiled in to separate CSS files, which will be loaded after Bootstrap's
    CSS.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在*Less*级别上重写了Bootstrap的样式，而第二种方法在CSS级别上执行相同的操作。在第二种方法中，主题的*Less*代码将被编译成单独的CSS文件，这些文件将在Bootstrap的CSS之后加载。
- en: 'Your HTML for client-side compiling will be as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您的客户端编译的HTML将如下所示：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Your HTML after server-side compiling will be as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端编译后，您的HTML将如下所示：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This second method requires an extra HTTP request when loading your page, but
    on the other hand, it offers the opportunity to load Bootstrap''s core from CDN
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这种第二种方法在加载页面时需要额外的HTTP请求，但另一方面，它提供了从CDN加载Bootstrap核心的机会，如下所示：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The a11y theme for Bootstrap
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bootstrap的a11y主题
- en: '**A11y** is a commonly used shorthand for (web) accessibility. Accessibility
    plays an important role in modern web designs; nevertheless, many websites pay
    less attention to it. The a11y theme for Bootstrap provides better accessibility
    with Bootstrap.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**A11y**是（网络）可访问性的常用缩写。可访问性在现代网页设计中起着重要作用；然而，许多网站对此关注较少。Bootstrap的a11y主题提供了更好的可访问性与Bootstrap。'
- en: The a11y theme can be downloaded from [https://github.com/bassjobsen/bootstrap-a11y-theme](https://github.com/bassjobsen/bootstrap-a11y-theme).
    You only have to compile the *Less* file to use the theme. Also, in this case,
    you can choose between integrating the *Less* code into your *Less* code base
    or compiling a separate theme's CSS file. For more accessibility improvements
    of Bootstrap, also take a look at [https://github.com/paypal/bootstrap-accessibility-plugin/](https://github.com/paypal/bootstrap-accessibility-plugin/).
    Notice that this plugin doesn't provide any *Less* code, but only CSS.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: a11y主题可以从[https://github.com/bassjobsen/bootstrap-a11y-theme](https://github.com/bassjobsen/bootstrap-a11y-theme)下载。您只需编译*Less*文件即可使用该主题。此外，在这种情况下，您可以选择将*Less*代码集成到您的*Less*代码库中，或者编译一个单独的主题CSS文件。要了解有关Bootstrap的更多无障碍改进，请访问[https://github.com/paypal/bootstrap-accessibility-plugin/](https://github.com/paypal/bootstrap-accessibility-plugin)。请注意，此插件不提供任何*Less*代码，只提供CSS。
- en: Color schemes with 1pxdeep
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1pxdeep的颜色方案
- en: '**1pxdeep** helps you use **relative visual weight** and **color schemes**
    in your project. Based on a seed color, 1pxdeep''s `scheme.less` file generates
    a color pallet with 16 colors. Each color is also defined in a variable. The variables,
    such as `@color1` or `@color4c`, can be used for the customization of your design.
    Every color variable also defines a class with the same name, so `@color1` in
    your *Less* code and `.color1` in your HTML refer to the same color in your color
    scheme.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**1pxdeep**帮助您在项目中使用**相对视觉权重**和**颜色方案**。基于种子颜色，1pxdeep的`scheme.less`文件生成一个包含16种颜色的调色板。每种颜色也以变量的形式定义。这些变量，如`@color1`或`@color4c`，可用于自定义设计。每个颜色变量还定义了一个同名的类，因此您的*Less*代码中的`@color1`和HTML中的`.color1`指的是您颜色方案中的同一种颜色。'
- en: After implementing 1pxdeep in your project, changing the branding or color scheme
    will be as simple as changing the seed color.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中实现1pxdeep后，更改品牌或颜色方案将像更改种子颜色一样简单。
- en: 'A typical `Less` project file using 1pxdeep and Bootstrap will look like the
    following code snippet:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用1pxdeep和Bootstrap的典型`Less`项目文件将如下代码片段所示：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding code redeclares Bootstrap''s variables, such as `@brand-primary:
    hsl(hue(#428bca),@sat,@l-factor);`, and enables you to use 1pxdeep''s variables
    such as `@color3` in the `style.less` file, as shown in the following code snippet:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '前面的代码重新声明了Bootstrap的变量，例如`@brand-primary: hsl(hue(#428bca),@sat,@l-factor);`，并使您能够在`style.less`文件中使用1pxdeep的变量，如下面的代码片段所示：'
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '1pxdeep''s CSS classes can also be used directly in your HTML code as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 1pxdeep的CSS类也可以直接在您的HTML代码中使用，如下所示：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: On 1pxdeep's website, you can test different seed colors to get an impression
    of how they look. Please visit [http://rriepe.github.io/1pxdeep/](http://rriepe.github.io/1pxdeep)
    and be surprised.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在1pxdeep的网站上，您可以测试不同的种子颜色，以了解它们的外观。请访问[http://rriepe.github.io/1pxdeep/](http://rriepe.github.io/1pxdeep)并感到惊讶。
- en: Using Bootstrap's customizer to build your own version
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bootstrap的自定义工具构建您自己的版本
- en: Whoever wants to start with a customized version of Bootstrap from scratch can
    also use Bootstrap's customizer. You will find the customizer by visiting [http://getbootstrap.com/customize/](http://getbootstrap.com/customize/).
    The customizer allows you to choose which *Less* files should be used. It will
    also be possible to set all Bootstrap's *Less* variables. The list can also be
    used as a reference for Bootstrap's variables when compiling a version yourself.
    Notice that the files that can be downloaded when using the customizer don't contain
    any *Less* files, so files from the Bootstrap customizer are not suitable for
    further customization with *Less*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 想要从头开始使用定制版本的Bootstrap的人也可以使用Bootstrap的自定义工具。您可以通过访问[http://getbootstrap.com/customize/](http://getbootstrap.com/customize/)找到自定义工具。自定义工具允许您选择使用哪些*Less*文件。还可以设置所有Bootstrap的*Less*变量。该列表也可以用作在编译自己的版本时Bootstrap变量的参考。请注意，使用自定义工具时可以下载的文件不包含任何*Less*文件，因此Bootstrap自定义工具中的文件不适合进一步使用*Less*进行定制。
- en: Semantic UI – another Less framework
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Semantic UI - 另一个Less框架
- en: Semantic can be used to build frontends too. Just like Bootstrap, it contains
    CSS components and modules. Components have been split up in to elements, collections,
    and views. Modules require not only CSS, but also JavaScript.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Semantic也可以用于构建前端。就像Bootstrap一样，它包含CSS组件和模块。组件已分为元素、集合和视图。模块不仅需要CSS，还需要JavaScript。
- en: Semantic's name already makes clear that it pays attention to the semantics
    of HTML5\. It is also tag-agnostic, which means you can use any HTML tags with
    UI elements.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Semantic的名称已经清楚地表明它关注HTML5的语义。它还是标签不可知的，这意味着您可以在UI元素中使用任何HTML标签。
- en: 'In the following code, you will find a short HTML example that shows how Semantic
    is intended to be used:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，您将找到一个简短的HTML示例，展示了Semantic的预期用法：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Also, Semantic has been built with *Less*. The complete source, including the
    *Less* files, can be downloaded from [https://github.com/semantic-org/semantic-ui/](https://github.com/semantic-org/semantic-ui/).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Semantic也是使用*Less*构建的。完整的源代码，包括*Less*文件，可以从[https://github.com/semantic-org/semantic-ui/](https://github.com/semantic-org/semantic-ui/)下载。
- en: The way Semantic handles *Less* differs from Bootstrap and most of the examples
    you have seen earlier in this book. The Semantic source will also be built with
    Grunt, as described in the preceding Bootstrap sections. On the contrary, Semantic
    does not define variables and also doesn't define a master file that imports and
    connects the different *Less* files. The Semantic *Less* code is split up in to
    different modules in which most settings are hardcoded.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Semantic处理*Less*的方式与Bootstrap和本书中早期看到的大多数示例不同。与之相反，Semantic源代码也将使用Grunt构建，就像前面的Bootstrap部分描述的那样。然而，Semantic不定义变量，也不定义导入和连接不同*Less*文件的主文件。Semantic的*Less*代码分为不同的模块，其中大多数设置都是硬编码的。
- en: The different ways of handling *Less* by Semantic also means that when your
    projects use the framework in its entirety, you will always have to run the complete
    Grunt task after changing or extending the *Less* code. On the other hand, it
    will be very easy to use single Semantic components or modules in your projects.
    The components and modules do not depend on each other or global variables.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Semantic处理*Less*的不同方式也意味着，当您的项目完全使用框架时，您将始终需要在更改或扩展*Less*代码后运行完整的Grunt任务。另一方面，在您的项目中使用单个Semantic组件或模块将非常容易。这些组件和模块不依赖于彼此或全局变量。
- en: Please visit `http://localhost/semanticui.html` from the example files to see
    how this works. You will see that you can use the grid or buttons by including
    only the *Less* file. Also notice that if your buttons use icons (Semantic includes
    a complete port of Font Awesome designed by Dave Gandy for its standard icon set),
    you should also include the `icon.less` file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问示例文件中的`http://localhost/semanticui.html`以查看其工作原理。您会发现，您可以只包含*Less*文件来使用网格或按钮。还要注意，如果您的按钮使用图标（Semantic包含由Dave
    Gandy设计的Font Awesome的完整端口作为其标准图标集），您还应该包含`icon.less`文件。
- en: Automatic prefixing of vendor-specific rules
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动添加供应商特定规则的前缀
- en: When building Semantic with Grunt, the tasks first compile the *Less* files
    to single CSS files. After this task, the next task runs `grunt-autoprefixer`.
    The `grunt-autoprefixer` plugin parses *Less* or CSS and adds vendor-prefixed
    CSS properties using the **Can I Use...** database ([http://caniuse.com/](http://caniuse.com/)).
    The *Less* files in the `/build` directory are also prefixed this way. You can
    find more information on `grunt-autoprefixer` by visiting [https://github.com/nDmitry/grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer).
    The final tasks will bundle the CSS and JavaScript files in a single file and
    minify them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Grunt构建Semantic时，任务首先将*Less*文件编译为单个CSS文件。在此任务之后，下一个任务运行`grunt-autoprefixer`。`grunt-autoprefixer`插件使用**Can
    I Use...**数据库（[http://caniuse.com/](http://caniuse.com/)）解析*Less*或CSS，并添加带有供应商前缀的CSS属性。`/build`目录中的*Less*文件也以这种方式添加前缀。您可以通过访问[https://github.com/nDmitry/grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)了解有关`grunt-autoprefixer`的更多信息。最终任务将捆绑CSS和JavaScript文件到单个文件中并对其进行缩小。
- en: Automatic prefixing will be very interesting for your future projects, because
    it enables you to write your *Less* code with single-line declarations only. Study
    Semantic's `Grunt.js` to find out how this works. For now, running task and automatic
    prefixing is out of the scope of this book. Notice that if you use single *Less*
    files from Semantic for your project, you will have to use the files from the
    `/build` directory instead of the `/source` directory. The *Less* files in the
    `/build` directory are prefixed while those in the `/source` directory are not.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 自动添加前缀对于您未来的项目将非常有趣，因为它使您可以仅使用单行声明编写您的*Less*代码。查看Semantic的`Grunt.js`以了解其工作原理。目前，运行任务和自动添加前缀不在本书的范围内。请注意，如果您在项目中使用Semantic的单个*Less*文件，您将需要使用`/build`目录中的文件，而不是`/source`目录中的文件。`/build`目录中的*Less*文件已添加前缀，而`/source`目录中的文件没有。
- en: Other frameworks to build your grid with Less
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Less构建网格的其他框架
- en: 'In the preceding section, you learned how to use Bootstrap and Semantic UI
    to build complete frontends. In practice for many projects, only a grid will be
    enough to start. You have seen that Semantic''s grid can be compiled easily as
    a single component. Also, Bootstrap''s grid can be compiled as a single component
    using the following code snippet:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，您学习了如何使用Bootstrap和Semantic UI构建完整的前端。在实践中，对于许多项目，只需一个网格就足够了。您已经看到，语义的网格可以轻松编译为单个组件。同样，Bootstrap的网格也可以使用以下代码片段编译为单个组件：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Alternatively, you could also use another grid system. Some of them are discussed
    in brief in the following sections.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以使用另一个网格系统。其中一些在以下部分中简要讨论。
- en: Using the Golden Grid System to build your grids
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用黄金网格系统构建您的网格
- en: The **Golden Grid System** (**GGS**) splits the screen into 18 even columns.
    The leftmost and rightmost columns are used as the outer margins of the grid;
    this leaves 16 columns for your design. More details about this grid system can
    be found at [http://goldengridsystem.com/](http://goldengridsystem.com/).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**黄金网格系统**（**GGS**）将屏幕分成18个均匀的列。最左边和最右边的列用作网格的外边距；这为您的设计留下了16列。有关此网格系统的更多详细信息可以在[http://goldengridsystem.com/](http://goldengridsystem.com/)找到。'
- en: GGS comes with a *Less* file to compile the required CSS to build the grid.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: GGS带有一个*Less*文件，用于编译所需的CSS以构建网格。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Frameless** grid system adapts column by column, not pixel by pixel.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**Frameless**网格系统逐列适应，而不是像素逐像素。'
- en: The Frameless grid system, built by the same author who built GGS, is not fluid;
    the grid adds columns when a breakpoint has been reached. Notice that Bootstrap's
    grids work the same way. Frameless comes with a *Less* template that can be compiled
    to use the grid. This template contains a small CSS reset, some consistency fixes,
    as well as some basic customizable variables and functions for starting off a
    Frameless grid. More information about Frameless grids can be found at [http://framelessgrid.com/](http://framelessgrid.com/).
    Frameless' documentation is sparse; however, you can find the source of Frameless'
    home page on GitHub. This will give you an impression of how to use it with *Less*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由构建GGS的同一作者构建的Frameless网格系统不是流体的；当达到断点时，网格会添加列。请注意，Bootstrap的网格工作方式相同。Frameless带有一个*Less*模板，可以编译以使用网格。此模板包含一个小的CSS重置，一些一致性修复，以及一些用于启动Frameless网格的基本可自定义变量和函数。有关Frameless网格的更多信息可以在[http://framelessgrid.com/](http://framelessgrid.com/)找到。Frameless的文档很少；但是，您可以在GitHub上找到Frameless主页的源代码。这将让您了解如何使用它与*Less*。
- en: The Semantic Grid System
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义网格系统
- en: The **Semantic Grid System** is very basic and effective. After setting the
    column and gutter widths, choose the number of columns and switch between pixels
    and percentages; you will have a layout without any `.grid_x` classes in your
    markup. The Semantic Grid System is also responsive. It also supports nesting
    and push and pull, which allows you to apply left and right indents to your columns.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**语义网格系统**非常基础和有效。设置列和间距宽度后，选择列数并在像素和百分比之间切换；您将在标记中没有任何`.grid_x`类的布局。语义网格系统也是响应式的。它还支持嵌套和推拉，这使您可以对列应用左右缩进。'
- en: 'Defining a fluid layout with *Less* will be as simple as compiling, as shown
    in the following code snippet:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Less*定义流体布局将像在以下代码片段中所示一样简单：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Further information about the Semantic Grid System can be found at [http://semantic.gs/](http://semantic.gs/).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 关于语义网格系统的更多信息可以在[http://semantic.gs/](http://semantic.gs/)找到。
- en: WordPress and Less
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress和Less
- en: Nowadays, WordPress is not only used for weblogs; it can also be used as a content
    management system to build a website.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，WordPress不仅用于博客；它也可以用作内容管理系统来构建网站。
- en: The WordPress system, written in PHP, has been split up into the core system,
    plugins, and themes. Plugins add additional functionalities to the system and
    themes handle the look and feel of a website built with WordPress. Plugins work
    independent of each other. Plugins are also independent of the theme, and the
    theme mostly does not depend on plugins either. WordPress themes define the global
    CSS for a website, but every plugin can also add its own CSS code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 用PHP编写的WordPress系统已分为核心系统、插件和主题。插件为系统添加了额外的功能，主题处理了使用WordPress构建的网站的外观和感觉。插件彼此独立工作。插件也独立于主题，主题大多也不依赖插件。WordPress主题为网站定义全局CSS，但每个插件也可以添加自己的CSS代码。
- en: WordPress theme developers can use *Less* to compile the CSS of themes and plugins.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress主题开发人员可以使用*Less*来编译主题和插件的CSS。
- en: Using the Roots theme with Less
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Less的Roots主题
- en: '**Roots** is a WordPress starters theme. You can use Roots to build your own
    theme. Roots is based on HTML5 Boilerplate ([http://html5boilerplate.com/](http://html5boilerplate.com/))
    and Bootstrap. Please also visit the Roots theme website at [http://roots.io/](http://roots.io/).
    Also, Roots can be completely built with Grunt. More information about how to
    use Grunt for WordPress development can be found at [http://roots.io/using-grunt-for-wordpress-theme-development/](http://roots.io/using-grunt-for-wordpress-theme-development/).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**Roots**是一个WordPress起始主题。您可以使用Roots来构建自己的主题。Roots基于HTML5 Boilerplate ([http://html5boilerplate.com/](http://html5boilerplate.com/))和Bootstrap。还请访问Roots主题网站[http://roots.io/](http://roots.io/)。此外，Roots也可以完全使用Grunt构建。有关如何在WordPress开发中使用Grunt的更多信息，请访问[http://roots.io/using-grunt-for-wordpress-theme-development/](http://roots.io/using-grunt-for-wordpress-theme-development/)。'
- en: After downloading Roots, the *Less* files can be found in the `assets/less/`
    directory. These files include Bootstrap's *Less* files, as described earlier.
    The `assets/less/app.less` file imports the main Bootstrap *Less* file, `bootstrap.less`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Roots后，*Less*文件可以在`assets/less/`目录中找到。这些文件包括Bootstrap的*Less*文件，如前所述。`assets/less/app.less`文件导入了主要的Bootstrap
    *Less*文件，`bootstrap.less`。
- en: Now, you can edit `app.less` to customize your theme. You will have to rebuild
    Roots after your changes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以编辑`app.less`来自定义您的主题。更改后，您将需要重新构建Roots。
- en: Roots' documents describe editing Bootstrap's `variables.less` file as the easiest
    way to customize a website built with Roots. More information can be found at
    [http://roots.io/modifying-bootstrap-in-roots/](http://roots.io/modifying-bootstrap-in-roots/).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Roots的文档描述了编辑Bootstrap的`variables.less`文件作为定制使用Roots构建的网站的最简单方法。更多信息请访问[http://roots.io/modifying-bootstrap-in-roots/](http://roots.io/modifying-bootstrap-in-roots/)。
- en: JBST with a built-in Less compiler
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JBST内置Less编译器
- en: JBST is also a WordPress starters theme. JBST is intended to be used with so-called
    child themes. More information about WordPress child themes can be found at [https://codex.wordpress.org/Child_Themes](https://codex.wordpress.org/Child_Themes).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: JBST也是一个WordPress入门主题。JBST旨在与所谓的子主题一起使用。有关WordPress子主题的更多信息，请访问[https://codex.wordpress.org/Child_Themes](https://codex.wordpress.org/Child_Themes)。
- en: 'After installing JBST, you will find a *Less* compiler under **Appearance**
    in your **Dashboard**, as shown in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 安装JBST后，您将在**仪表板**的**外观**下找到一个*Less*编译器，如下截图所示：
- en: '![JBST with a built-in Less compiler](img/1465OS_06_06.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![JBST内置Less编译器](img/1465OS_06_06.jpg)'
- en: JBST's built-in Less Compiler in the WordPress Dashboard
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: JBST在WordPress仪表板中内置的Less编译器
- en: The built-in *Less* compiler can be used to fully customize your website with
    *Less*. Bootstrap also forms the skeleton of JBST, and the default settings are
    gathered from the a11y bootstrap theme mentioned earlier.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的*Less*编译器可用于完全定制您的网站与*Less*。Bootstrap也构成了JBST的骨架，并且默认设置是从前面提到的a11y bootstrap主题中收集的。
- en: JBST's *Less* compiler can be used in different ways.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: JBST的*Less*编译器可以以不同的方式使用。
- en: 'First, the compiler accepts any custom written *Less* (and CSS) code. For instance,
    to change the color of the `h1` elements, you should simply edit and recompile
    the code as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编译器接受任何自定义编写的*Less*（和CSS）代码。例如，要更改`h1`元素的颜色，只需编辑并重新编译代码如下：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Second, you can edit Bootstrap''s variables and (re)use Bootstrap''s mixins.
    So, to set the background color of the navbar and add a custom button, you can
    use the following code in the *Less* compiler:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您可以编辑Bootstrap的变量并（重新）使用Bootstrap的混合器。因此，要设置导航栏的背景颜色并添加自定义按钮，可以在*Less*编译器中使用以下代码：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Third, you can set JBST''s built-in *Less* variables, for instance, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，您可以设置JBST内置的*Less*变量，例如：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Fourth and last, JBST has its own set of mixins. To set a custom font, you
    can edit as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，JBST有自己的一套混合器。要设置自定义字体，可以编辑如下：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, the parameters are used to set the font name (`@family`)
    and the path to the font files (`@path/@font-path`). The `@weight` and `@style`
    parameters set the font's properties. For more information, visit [https://github.com/bassjobsen/Boilerplate-JBST-Child-Theme](https://github.com/bassjobsen/Boilerplate-JBST-Child-Theme).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，参数用于设置字体名称（`@family`）和字体文件的路径（`@path/@font-path`）。`@weight`和`@style`参数设置了字体的属性。更多信息，请访问[https://github.com/bassjobsen/Boilerplate-JBST-Child-Theme](https://github.com/bassjobsen/Boilerplate-JBST-Child-Theme)。
- en: More *Less* code can also be added in a special file (`wpless2css/wpless2css.less`
    or `less/custom.less`); these files will also give you the option to add, for
    instance, a library of prebuilt mixins, such as the ones discussed in [Chapter
    4](ch04.html "Chapter 4. Avoid Reinventing the Wheel"), *Avoid Reinventing the
    Wheel*. After adding the library via this file, the mixins can also be used with
    the built-in compiler.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在特殊文件（`wpless2css/wpless2css.less`或`less/custom.less`）中添加更多*Less*代码；这些文件还可以让您选择添加预构建的混合库，例如[第4章](ch04.html
    "第4章。避免重复造轮子")中讨论的那些，*避免重复造轮子*。通过这个文件添加库后，混合器也可以与内置编译器一起使用。
- en: The Semantic UI WordPress theme
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Semantic UI WordPress主题
- en: 'Semantic UI, as discussed earlier, offers its own WordPress plugin. The plugin
    can be found on GitHub at [https://github.com/ProjectCleverWeb/Semantic-UI-WordPress](https://github.com/ProjectCleverWeb/Semantic-UI-WordPress).
    After installing and activating this theme, you can use your website directly
    with Semantic UI. With the default setting, your website will look like the following
    screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Semantic UI提供了自己的WordPress插件。该插件可以在GitHub上找到[https://github.com/ProjectCleverWeb/Semantic-UI-WordPress](https://github.com/ProjectCleverWeb/Semantic-UI-WordPress)。安装并激活此主题后，您可以直接使用Semantic
    UI进行网站。使用默认设置，您的网站将如下截图所示：
- en: '![The Semantic UI WordPress theme](img/1465OS_06_07.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Semantic UI WordPress主题](img/1465OS_06_07.jpg)'
- en: Website built with Semantic UI WordPress theme
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Semantic UI WordPress主题构建的网站
- en: WordPress plugins and Less
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress插件和Less
- en: 'As discussed earlier, WordPress plugins have their own CSS. This CSS will add
    to the page as a normal style sheet as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，WordPress插件有自己的CSS。此CSS将作为普通样式表添加到页面中，如下所示：
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Unless a plugin provides *Less* files for their CSS, it will not be easy to
    manage its styles with *Less*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 除非插件为其CSS提供*Less*文件，否则将很难使用*Less*管理其样式。
- en: Theme WooCommerce with Less
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有Less的WooCommerce主题
- en: '**WooCommerce** is a popular e-commerce plugin for WordPress. With WooCommerce,
    you can build a web shop in a trice. You can theme your WooCommerce web shop with
    *Less*, as documented at [http://docs.woothemes.com/document/css-structure/](http://docs.woothemes.com/document/css-structure/).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**WooCommerce**是WordPress的一款热门电子商务插件。使用WooCommerce，您可以很快地建立一个网店。您可以使用*Less*为WooCommerce网店设置主题，文档在[http://docs.woothemes.com/document/css-structure/](http://docs.woothemes.com/document/css-structure/)中有记录。'
- en: WooCommerce's *Less* file should be compiled into CSS and used as described
    earlier. To create a single CSS file for all your style sheets with *Less*, you
    can consider importing `woocommerce.less` into your project's master *Less* file
    and disable the default styling with `define('WOOCOMMERCE_USE_CSS', false);` in
    your theme's `functions.php` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: WooCommerce的*Less*文件应该编译成CSS并按照前面描述的方式使用。要为所有样式表创建单个CSS文件，您可以考虑将`woocommerce.less`导入到项目的主*Less*文件中，并在主题的`functions.php`文件中使用`define('WOOCOMMERCE_USE_CSS',
    false);`禁用默认样式。
- en: The WP Less to CSS plugin
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WP Less to CSS插件
- en: The **WP Less to CSS** plugin, which can be found by visiting [http://wordpress.org/plugins/wp-less-to-css/](http://wordpress.org/plugins/wp-less-to-css/),
    offers the possibility to style your WordPress website with *Less*. As seen earlier,
    you can enter your *Less* code with the built-in compiler of JBST. This code will
    be compiled into the website's CSS. This plugin compiles *Less* with the PHP Less
    compiler, `Less.php`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**WP Less to CSS**插件可以在[http://wordpress.org/plugins/wp-less-to-css/](http://wordpress.org/plugins/wp-less-to-css/)找到，它可以让您使用*Less*为WordPress网站设置样式。如前所述，您可以使用JBST的内置编译器输入*Less*代码。此代码将被编译成网站的CSS。此插件使用PHP
    Less编译器`Less.php`编译*Less*。'
- en: Alternative compilers for compiling your Less code
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于编译Less代码的替代编译器
- en: With the growing popularity of *Less*, the *Less* compiler has been ported to
    other languages as well. These ports can be used to compile *Less* with native
    language calls. Please keep in mind that these ports will usually lag the official
    JavaScript implementation, so you may find they are missing recent *Less* features.
    You may also realize, as mentioned earlier in [Chapter 3](ch03.html "Chapter 3. Nested
    Rules, Operations, and Built-in Functions"), *Nested Rules, Operations, and Built-in
    Functions*, that these compilers are not able to compile native JavaScript expressions
    within backticks.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 随着*Less*的日益流行，*Less*编译器也被移植到其他语言。这些移植可以用于使用本地语言调用编译*Less*。请记住，这些移植通常会滞后于官方JavaScript实现，因此您可能会发现它们缺少最近的*Less*功能。您可能也会意识到，正如[第3章](ch03.html
    "第3章。嵌套规则、操作和内置函数")中早些时候提到的，*嵌套规则、操作和内置函数*，这些编译器无法编译反引号内的本机JavaScript表达式。
- en: The Less.php compiler
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Less.php编译器
- en: This PHP port of the official *Less* processor can be download at [http://lessphp.gpeasy.com/](http://lessphp.gpeasy.com/).
    You have seen an example of its usage already; the WP Less to CSS plugin has been
    built with it. `Less.php` also implements caching for faster compiling.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 官方*Less*处理器的这个PHP移植版本可以在[http://lessphp.gpeasy.com/](http://lessphp.gpeasy.com/)下载。您已经看到了它的用法示例；WP
    Less to CSS插件就是用它构建的。`Less.php`还实现了缓存以加快编译速度。
- en: Although `Less.php` offers the possibility of creating CSS dynamically, you
    still should precompile your CSS for production in most cases. WordPress is also
    written in PHP, so in the case of the WordPress plugin, *Less* can be compiled
    without using system calls.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`Less.php`提供了动态创建CSS的可能性，但在大多数情况下，您仍应该为生产环境预编译您的CSS。WordPress也是用PHP编写的，因此在WordPress插件的情况下，可以使用*Less*进行编译，而无需使用系统调用。
- en: 'In the following code, you will find a short example that will show you how
    to compile, customize, and use Bootstrap on a website written in PHP:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，您将找到一个简短的示例，它将向您展示如何在PHP编写的网站上编译、自定义和使用Bootstrap：
- en: '[PRE33]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The **lessphp** compiler available at [http://leafo.net/lessphp/](http://leafo.net/lessphp/)
    is an alternative PHP Less compiler.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://leafo.net/lessphp/](http://leafo.net/lessphp/)提供的**lessphp**编译器是另一种PHP
    Less编译器。'
- en: The .less compiler for .NET apps
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET应用程序的.less编译器
- en: 'The `.less` compiler is a complete port of the JavaScript *Less* library for
    the **.NET platform**. If you want to statically compile your files, you can use
    the included `dotless.Compiler.exe` compiler. You can use `.less` for your web
    page by adding a new HTTP handler to your `Web.Config` file as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`.less`编译器是JavaScript *Less*库在**.NET平台**上的完整移植。如果您想要静态编译您的文件，可以使用附带的`dotless.Compiler.exe`编译器。您可以通过向`Web.Config`文件添加新的HTTP处理程序来使用`.less`来制作您的网页，如下所示：'
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: List of tools to develop Less
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发Less的工具列表
- en: On the *Less* website ([http://lesscss.org/usage/](http://lesscss.org/usage/)),
    you will find many other libraries, tools, and frameworks to develop *Less*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Less*网站([http://lesscss.org/usage/](http://lesscss.org/usage/))上，您将找到许多其他库、工具和框架来开发*Less*。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use *Less* with Bootstrap and Semantic UI
    and also got introduced to other grids and frameworks built with *Less*. You have
    seen how to use *Less* with WordPress, and finally, you saw how to use alternative
    compilers for your project.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何在Bootstrap和Semantic UI中使用*Less*，还介绍了其他使用*Less*构建的网格和框架。您已经了解了如何在WordPress中使用*Less*，最后，您了解了如何为项目使用替代编译器。
- en: This is also the last chapter of this book. In this book, you learned how to
    use *Less* for your projects. You saw how variables, mixins, and built-in functions
    can help you reuse your code. With *Less*, you can nest your style rules, which
    make your code more intuitive and readable. After reading this book, you know
    you don't have to write all the code yourself, but you can use prebuilt mixins
    written by others. Finally, you obtained knowledge on how to start projects from
    scratch with *Less* and integrate *Less* with WordPress, Bootstrap, and other
    tools. Now, you are really ready to start developing *Less*. Congratulations!
    You have enabled yourself to work better and faster using *Less* for your projects
    and will save more time for your real design tasks.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是本书的最后一章。在本书中，您学会了如何在项目中使用*Less*。您看到了变量、混合和内置函数如何帮助您重用代码。使用*Less*，您可以嵌套您的样式规则，这使得您的代码更直观和可读。阅读本书后，您知道自己不必亲自编写所有代码，而是可以使用他人编写的预构建混合。最后，您学会了如何从头开始使用*Less*启动项目，并将*Less*与WordPress、Bootstrap和其他工具集成。现在，您真的准备好开始开发*Less*了。恭喜！您已经使自己能够更好、更快地使用*Less*来开发项目，并为真正的设计任务节省更多时间。
