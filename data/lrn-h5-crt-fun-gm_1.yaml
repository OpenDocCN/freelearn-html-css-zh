- en: Chapter 1. An Overview of HTML5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。HTML5概述
- en: Welcome to the fascinating world of web development! As we begin our journey
    towards HTML5 development, we'll take the time and review the past. After all,
    you can't really get anywhere unless you know where you're coming from. Unless
    you have been living under a rock for the past several years, you have certainly
    heard a lot about Web 2.0, the Open Web, and definitely HTML5\. If you have heard
    those terms from, say, three different people, you will probably have also heard
    at least three different definitions of each. For this reason, we will briefly
    describe what those terms mean, why you should be excited about them, and how
    HTML5 is a game changer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到迷人的网络开发世界！在我们开始HTML5开发的旅程时，我们将花时间回顾过去。毕竟，除非你知道自己来自哪里，否则你真的无法到达任何地方。除非你在过去几年里一直生活在石头下，你肯定听说过很多关于Web
    2.0、开放网络和HTML5的事情。如果你从三个不同的人那里听到这些术语，你可能也听到了至少三种不同的定义。因此，我们将简要描述这些术语的含义，为什么你应该对它们感到兴奋，以及HTML5是如何改变游戏规则的。
- en: What is HTML?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是HTML？
- en: The first term we need to be clear about before we start talking about the Open
    Web, and how HTML5 plays a central role in its success, is HTML. Simply put, HTML
    is a very basic markup language used to describe text files to the programs that
    read them. While that is possibly the most generalized definition of what it is,
    it is interesting how such a fundamental technology has played such a crucial
    part in the development of our entire society. From humble beginnings, and serving
    a very specific purpose at first, HTML has become the primary markup language
    of the Web, which in turn has found its way into almost every household throughout
    the world, as well as most briefcases, pockets, and other electronic devices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始谈论开放网络以及HTML5在其中的核心作用之前，我们需要澄清的第一个术语是HTML。简单来说，HTML是一种非常基本的标记语言，用于描述文本文件给读取它们的程序。虽然这可能是对它的最概括的定义，但有趣的是这样一种基本技术如何在我们整个社会的发展中发挥了如此关键的作用。从不起眼的开始，最初只是为了服务一个非常具体的目的，HTML已经成为了网络的主要标记语言，进而进入了世界上几乎每一个家庭，以及大多数公文包、口袋和其他电子设备。
- en: Given this dramatic, widespread reach of HTML, it quickly became clear that
    the technology needed to do more than simply declaring the color of some block
    of text, or the width and height of a photograph stored in some research paper.
    Because of the many different ways in which the Web has been used over the years,
    HTML has grown and evolved, going from a simple markup language, to becoming the
    foundation for the development of powerful, highly complex online applications
    and services.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于HTML的这种戏剧性、广泛的影响，很快就清楚地意识到这种技术需要做的不仅仅是声明一些文本块的颜色，或者一些研究论文中存储的照片的宽度和高度。由于多年来网络被使用的许多不同方式，HTML已经发展和演变，从一个简单的标记语言，发展成为强大、高度复杂的在线应用和服务的基础。
- en: A brief history of HTML
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML的简要历史
- en: '**Hyper Text Markup Language**, or **HTML** for short, as we know it today
    was first conceived in the mind of Tim Berners-Lee in 1989\. At the time, while
    working at the European Laboratory for Particle Physics in Geneva, Switzerland,
    Tim Berners-Lee thought it would be beneficial to link the various research documents
    written and used by scientists. That way, instead of having a large collection
    of individual and independent documents that one could read, each document that
    referenced another research paper could have a hyper link to the other document,
    so that the reader could navigate from one document to the next with ease, and
    in a timely manner.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本标记语言**，简称**HTML**，就像我们今天所知的那样，最早是由蒂姆·伯纳斯-李在1989年构想出来的。当时，他在瑞士日内瓦的欧洲粒子物理实验室工作，他认为将科学家们编写和使用的各种研究文档链接在一起会很有益处。这样，不仅可以阅读大量独立的文档，每个引用另一篇研究论文的文档都可以有一个超链接到另一篇文档，这样读者就可以轻松地从一篇文档导航到下一篇文档，而且时间上也更为及时。'
- en: In order to implement his idea of hyperlinking documents together, Tim Berners-Lee
    looked to an existing markup language as the basis for his own markup language—**Standard
    Generalized Markup Language** or **SGML** for short—as a starting point. SGML
    was a simple language designed to structure text by using a tag vocabulary. For
    example, in order to specify that a block of text was to be interpreted as a paragraph,
    one would surround such text with a pair of "paragraph tags", which looked the
    same as today's paragraph tags in HTML. While the basic vocabulary in Tim's version
    of the language remained the same, one key tag was added—the hyperlink tag. Thus,
    HTML was born.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现他将文档超链接在一起的想法，蒂姆·伯纳斯-李将现有的标记语言作为他自己标记语言的基础——**标准通用标记语言**，简称**SGML**。SGML是一种通过使用标签词汇来结构化文本的简单语言。例如，为了指定一个文本块被解释为一个段落，一个人会用一对“段落标签”将这样的文本包围起来，这看起来与今天HTML中的段落标签一样。虽然蒂姆版本的语言中的基本词汇保持不变，但添加了一个关键标签——超链接标签。因此，HTML诞生了。
- en: Keep in mind that Tim's vision for the language was very specific. Through HTML's
    ability to cross-reference documents together, published scientific research papers
    could be much more efficiently studied. It was not until many years later that
    HTML started being used for other purposes beyond sharing of interlinked text.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，蒂姆对这种语言的愿景非常具体。通过HTML跨文档引用的能力，发表的科学研究论文可以更有效地进行研究。直到多年后，HTML才开始被用于除了共享互联文本之外的其他目的。
- en: The evolution of the World Wide Web
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 万维网的演变
- en: As the computer became more common place and more people started to own their
    own machine, and as the Internet became more widely used, people started finding
    new ways to use the new technology. Instead of using the Web simply to read what
    others had written, people began to use it to talk to people by writing and publishing
    documents. It wasn't long after that until the Internet became a giant virtual
    society.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着计算机变得更加普遍，越来越多的人开始拥有自己的机器，随着互联网的广泛使用，人们开始找到新的使用新技术的方式。人们开始使用Web不仅仅是阅读他人所写的内容，而是开始通过编写和发布文档与他人交流。不久之后，互联网就成为了一个巨大的虚拟社会。
- en: The Internet continued to grow in popularity through the 1990s, and different
    uses for it continue to emerge. With each new idea of how that amazing infrastructure
    could be used, new ways had to be thought of in order to bring those ideas into
    reality, since the technology that supported the Internet was still the same.
    At its core, a web application was still nothing more than a text-based document,
    formatted using HTML. In order to add some logic to this otherwise static data,
    programmers used programs stored in the web server to manipulate input from the
    user, and create HTML documents dynamically. Again, the actual documents that
    users interacted with as they navigated the Internet, were nothing more than pure
    HTML.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 20世纪90年代，互联网继续增长，不同的用途不断出现。随着对这种惊人基础设施如何使用的新想法，必须想出新的方法来将这些想法变为现实，因为支持互联网的技术仍然是相同的。在本质上，Web应用程序仍然只是一个基于文本的文档，使用HTML格式化。为了向这些否则静态数据添加一些逻辑，程序员使用存储在Web服务器中的程序来操作用户的输入，并动态创建HTML文档。再次强调，用户在浏览互联网时实际上与之交互的文档只不过是纯HTML。
- en: In order for the Internet to continue to grow and adapt to the way and purposes
    for which it was being used, changes were needed. Instead of only sending plain
    text data to HTML readers (web browsers), it would be more efficient if there
    was a way to add some sort of code to the web pages, so that it could process
    information while on the browser. Thus, JavaScript was born.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使互联网能够继续增长和适应其使用方式和目的，需要进行改变。与其仅向HTML阅读器（Web浏览器）发送纯文本数据，不如找到一种方法在网页上添加某种代码，以便在浏览器上处理信息。因此，JavaScript诞生了。
- en: Today the Web continues to grow both in terms of the amount of people using
    it, and in the ways and purposes in which it is used. The good news is that the
    technologies that support and run the Web are also growing and evolving, so that
    new use cases can be accommodated.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，网络在使用人数和使用方式和目的方面继续增长。好消息是，支持和运行网络的技术也在不断增长和发展，以便适应新的用例。
- en: What is HTML5?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5是什么？
- en: You undoubtedly have heard people using the term HTML5 in different contexts,
    which has probably caused at least some confusion. Like most so-called technical
    terms that find their way into the general population, and frequently fall from
    the lips of not-so-technical people, HTML5 finding it's way into the general population
    in fact means more than one thing. At the most basic level, HTML5 refers to the
    next version of the markup language created by Tim Berners-Lee, which now has
    a governing body guiding its progress. The other meaning of the term makes reference
    to other technologies that compliment the markup language, as well as the idea
    of an Open Web, which we'll talk more about later in the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，你肯定听过人们在不同情境下使用HTML5这个术语，这可能至少引起了一些混淆。与大多数所谓的技术术语一样，它们进入了普通大众，并经常从非技术人员的嘴唇上掉下来，HTML5进入普通大众实际上意味着不止一件事。在最基本的层面上，HTML5指的是由Tim
    Berners-Lee创建的标记语言的下一个版本，现在有一个指导其进展的管理机构。该术语的另一个含义是指与标记语言相辅相成的其他技术，以及开放网络的概念，我们将在本章后面更多地讨论。
- en: HTML5 – the next step in the evolution
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5-演变的下一步
- en: Believe it or not, people have been trying to develop full-featured, complex
    applications intended to be executed in web browsers for a long time. For the
    most part, the greatest challenge has been the fact that the technologies required
    to accomplish this goal haven't been fully available until relatively recently.
    The reason why it was so difficult to create large web applications using earlier
    versions of HTML was that HTML was not originally designed for this. However,
    as the Web has evolved, so has HTML.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，人们一直在努力开发旨在在Web浏览器中执行的功能齐全、复杂的应用程序。在很大程度上，最大的挑战是实现这一目标所需的技术直到相对最近才完全可用。使用早期版本的HTML创建大型Web应用程序如此困难的原因在于HTML最初并非为此而设计。然而，随着Web的发展，HTML也在不断发展。
- en: One of the goals of HTML5 is to accomplish exactly that—to enable developers
    to create powerful, non-trivial applications that run completely over the Internet.
    Another major goal of HTML5 is to be completely backwards compatible, so that
    web pages used for other purposes (namely the hyperlinking of research documents)
    can still function the same.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5的目标之一就是实现这一点-使开发人员能够创建完全在互联网上运行的功能强大的非平凡应用程序。HTML5的另一个主要目标是完全向后兼容，以便用于其他目的（即超链接研究文档）的网页仍然可以正常运行。
- en: Just as Tim Berners-Lee added the hyperlink tag to SGML (among other tags),
    HTML5 is basically just that—more tags (or more functionality) to the previous
    version of the language. While that is a good, general overview of what HTML5
    is, there is a bit more to the story. Beyond the new tags added to the HTML specification,
    the term HTML5 also refers to this next step in the evolution of the Web.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Tim Berners-Lee向SGML（以及其他标记）添加了超链接标记一样，HTML5基本上就是这样-比以前版本的语言更多的标记（或更多的功能）。虽然这是HTML5是什么的一个很好的概述，但故事还有更多。除了向HTML规范添加的新标记外，HTML5这个术语还指的是Web演变的下一步。
- en: Some people have called this Web 2.0 and others have simply called it *the future*.
    When I refer to this next step in the history of HTML, I'll be referring to the
    upgrades done to HTML, CSS, and JavaScript, since these are the three major technologies
    behind this new Internet, where web applications (including online games) are
    the center of attention, as well as one of the focuses of this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人称之为Web 2.0，而其他人简单地称之为*未来*。当我提到HTML历史上的下一个步骤时，我将指的是对HTML、CSS和JavaScript的升级，因为这三种技术是这个新互联网的核心，其中Web应用程序（包括在线游戏）是关注的中心之一，也是本书的重点之一。
- en: HTML5 is not a single feature
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5不是一个单一的特性
- en: Before providing the developer with new features, HTML5 tries to solve core
    problems that were exposed in previous versions of HTML, namely the programming
    architecture. Since HTML was not originally created with web application development
    in mind, as programmers started using it for such purposes, they soon found themselves
    with very messy code. The application data was heavily mixed with the presentation
    code, which was in turn tightly coupled with the application logic.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在为开发人员提供新功能之前，HTML5试图解决在以前版本的HTML中暴露出的核心问题，即编程架构。由于HTML最初并不是为了网页应用程序开发而创建的，当程序员开始将其用于此类目的时，他们很快发现自己的代码非常混乱。应用程序数据与呈现代码严重混合，而呈现代码又与应用程序逻辑紧密耦合。
- en: To solve this problem, developers were given **Cascading Style Sheets** (**CSS**),
    which allowed them to separate HTML markup (the information) from how the information
    was rendered. Thus, the term HTML5 really refers to three separate technologies,
    namely HTML5 (the new semantic elements or tags), CSS3, and JavaScript (all the
    new APIs, such as web storage, web workers, and web sockets, to name a few).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，开发人员得到了**层叠样式表**（**CSS**），它允许他们将HTML标记（信息）与信息的呈现方式分开。因此，HTML5实际上指的是三种不同的技术，即HTML5（新的语义元素或标签）、CSS3和JavaScript（所有新的API，如Web存储、Web
    Workers和Web Sockets等）。
- en: More semantic document structure
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多语义化的文档结构
- en: As developers see the need for, and experiment with different applications for
    existing technologies, they use what they have, and adapt it to the new circumstances.
    Such was the case with previous versions of HTML. Since only a handful of container
    tags existed, developers described very complex document structures with the same
    elements; while this accomplished the job, it also made it confusing and hard
    to maintain structures. Simply put, if all you have is a hammer, then everything
    you see will become a nail.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员看到现有技术的不同应用的需求，并对其进行实验时，他们会使用自己手头的工具，并将其适应新的环境。这就是以前版本的HTML的情况。由于只存在少数几个容器标签，开发人员使用相同的元素描述非常复杂的文档结构；虽然这完成了工作，但也使得结构混乱且难以维护。简而言之，如果你手头只有一把锤子，那么你看到的一切都会变成钉子。
- en: 'For example, it was common for developers to use the `<div>` tag to represent
    every single part of the document when describing a structure like the one represented
    by the following illustration:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，开发人员通常使用`<div>`标签来表示文档的每个部分，描述类似下图所示的结构时。
- en: '![More semantic document structure](img/6029OT_01_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![更多语义化的文档结构](img/6029OT_01_01.jpg)'
- en: Figure 1
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: The previous figure shows a very typical structure of most websites built in
    the last generation of web design.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了大多数上一代网页设计中使用的典型结构。
- en: 'Such a design could be represented by the following structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的设计可以用以下结构表示：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: While using the `<div>` tag for any purpose under the heavens was one way to
    get the job done, you can see how this can quickly get out of hand, and turn the
    document into something hard to understand without great inspection. Looking at
    this type of code becomes especially troublesome when you see a long series of
    closing `<div`> tags—how can you know what each closing tag is actually closing,
    since all the tags have the same name? Worse yet, how can you know if you have
    just the right number of closing tags?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用`<div>`标签来完成任何目的是完成工作的一种方式，但你可以看到这很快就会失控，将文档变成难以理解而需要仔细检查的东西。当你看到一长串闭合的`<div>`标签时，这种代码变得尤为麻烦——你怎么知道每个闭合标签实际上关闭了什么，因为所有标签都有相同的名称？更糟糕的是，你怎么知道你有恰好数量的闭合标签？
- en: Another major problem with designing HTML structures after the `<div>` paradigm
    was that each tag was completely meaningless from a semantic point of view. In
    order to make each `<div>` tag slightly more meaningful and self-describing, extra
    attributes were added, normally in the form an an ID or a class. Again, this solution
    only added to the problem, since larger, more complex documents required more
    and more of these attributes, which one had to keep track of, thus increasing
    the complexity of what should be a simple solution.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<div>`范式之后设计HTML结构的另一个主要问题是，从语义角度来看，每个标签都是完全无意义的。为了使每个`<div>`标签稍微更有意义和自我描述，通常会添加额外的属性，通常以ID或类的形式。再次，这种解决方案只会加剧问题，因为更大、更复杂的文档需要更多这些属性，而这些属性需要跟踪，从而增加了本应简单的解决方案的复杂性。
- en: Thankfully, in HTML5 this problem is solved in a very elegant manner. Seeing
    that a lot of documents used the `<div>` tags for the same purpose, namely to
    define common sections such as the header, footer, navigation, and main content,
    new tags were added to represent such common sections. With these new tags, you
    are now able to visually scan a design structure, and very quickly understand
    the way information is to be laid out. Furthermore, the need to create endless
    ID attributes in order to distinguish each `<div>` tag is completely gone.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，在HTML5中，这个问题以一种非常优雅的方式得到了解决。鉴于许多文档都使用`<div>`标签来定义共同的部分，如页眉、页脚、导航和主要内容，因此添加了新的标签来表示这些共同的部分。有了这些新标签，你现在可以直观地扫描设计结构，并非常快速地理解信息的布局方式。此外，完全消除了为了区分每个`<div>`标签而创建无尽的ID属性的需求。
- en: 'Using some of the new tags provided by HTML5, the same design concept from
    *figure 1* can be represented as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML5提供的一些新标签，可以将*图1*中的相同设计概念表示如下：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接发送到您的电子邮件。
- en: You can see how much more descriptive the code becomes. Keep in mind also, that
    the benefits of this more meaningful structure extend beyond better readability
    for humans. With the new semantic tags in HTML5, search engines (such as Google,
    Microsoft's Bing, and Yahoo!) are able to better understand the content of web
    pages, and can therefore better index your website based on its subject matter,
    thus making the Web a bit better. Also, by defining your HTML files with more
    specific tags, screen reader software is able to better understand the contents
    of web pages, thus allowing users who depend on such software to better use and
    enjoy the Internet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到代码变得更加描述性。还要记住，这种更有意义的结构的好处不仅仅是对人类更易读。使用HTML5中的新语义标签，搜索引擎（如Google、微软的必应和雅虎！）能够更好地理解网页的内容，因此可以更好地根据其主题对您的网站进行索引，从而使网络变得更好。此外，通过使用更具体的标签定义HTML文件，屏幕阅读器软件能够更好地理解网页的内容，从而使依赖此类软件的用户更好地使用和享受互联网。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since the Internet seems to have made our world completely flat, you should
    never make the assumption that only your friends and neighbors will be accessing
    the content you publish online. Not only will your visitors come to your site
    from other countries and devices (such as smartphones, tablets, and even television
    sets), but many of the people surfing the Internet (thus, coming to your site
    to consume the material you make available to them) also have special needs such
    as visual or audio aid devices or software. For this reason, when you lay down
    any HTML code, keep that in mind, and consider how a screen reader program might
    interpret your content, and how easy it will be for that user to use and consume
    your work.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于互联网似乎使我们的世界变得完全扁平，你不应该假设只有你的朋友和邻居才能访问你在网上发布的内容。你的访问者不仅会来自其他国家和设备（如智能手机、平板电脑，甚至电视机），而且许多上网的人（因此，来到你的网站消费你提供给他们的材料）也有视觉或音频辅助设备或软件等特殊需求。因此，当你编写任何HTML代码时，请记住这一点，并考虑屏幕阅读器程序可能如何解释你的内容，以及用户使用和消费你的作品会有多容易。
- en: The following tags were added to HTML5 to accomplish this new, more streamlined
    semantic order. Keep in mind that each tag has several attributes, which we'll
    discuss in detail when we show sample usage in the next chapter. Also, because
    of the new data attributes, elements can be extended arbitrarily.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标签是为了实现这种新的、更简化的语义顺序而添加到HTML5中的。请记住，每个标签都有几个属性，我们将在下一章中展示示例用法时详细讨论。此外，由于新的数据属性，元素可以任意扩展。
- en: The following table has been taken from *HTML5 W3C Candidate Recommendation
    17 December 2012*, which can be found at [http://www.w3.org/TR/2012/CR-html5-20121217/](http://www.w3.org/TR/2012/CR-html5-20121217/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格摘自*HTML5 W3C候选推荐2012年12月17日*，可在[http://www.w3.org/TR/2012/CR-html5-20121217/](http://www.w3.org/TR/2012/CR-html5-20121217/)找到。
- en: '| Tag name | Description |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 标签名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `<address>` | This tag represents contact information related to its associated
    article element, or related to the entire document when associated with a body
    element. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `<address>` | 该标签表示与其关联的文章元素相关的联系信息，或者与body元素相关联时，表示与整个文档相关的联系信息。 |'
- en: '| `<article>` | This tag represents a standalone piece of content, such as
    an article or blog post. Article elements may be nested, in which case a child
    article node would be associated with its parent, yet it would still be independent
    of all other pieces of content in the document. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `<article>` | 该标签表示一个独立的内容片段，如文章或博客文章。文章元素可以嵌套，这种情况下，子文章节点将与其父节点相关联，但它仍然独立于文档中的所有其他内容。
    |'
- en: '| `<aside>` | This tag represents a piece of content related to other content
    elements within the document, yet could still be represented independently of
    its related elements. For example, sub-navigation sections, sidebars, and so on.
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `<aside>` | 该标签表示与文档中的其他内容元素相关的内容片段，但仍然可以独立表示其相关元素。例如，子导航部分、侧边栏等。 |'
- en: '| `<audio>` | This tag represents a sound or audio stream (or both) from a
    single source. Multiple sources may be specified, though the browser selects the
    most appropriate source to stream from. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `<audio>` | 该标签表示来自单一来源的声音或音频流（或两者）。可以指定多个来源，但浏览器会选择最合适的来源进行流式传输。 |'
- en: '| `<bdi>` | This tag represents an isolated piece of text context that may
    be formatted in a bidirectional fashion. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `<bdi>` | 该标签表示一个孤立的文本内容，可以以双向方式格式化。 |'
- en: '| `<bdo>` | This tag represents an element that controls the text direction
    of its children elements. The value of the `dir` attribute specifies whether text
    within the element is to flow from left to right (with a value of `ltr`) or from
    right to left (with a value of `rtl`). |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `<bdo>` | 该标签表示控制其子元素文本方向的元素。`dir`属性的值指定元素内的文本是从左到右流动（值为`ltr`）还是从右到左流动（值为`rtl`）。
    |'
- en: '| `<canvas>` | This tag represents a rectangular panel that may have its contents
    manipulated through rendering context APIs exposed through JavaScript. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `<canvas>` | 该标签表示一个矩形面板，可以通过JavaScript公开的渲染上下文API来操作其内容。 |'
- en: '| `<command>` | This tag represents a command that can be executed by the user,
    such as a keyboard shortcut. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `<command>` | 该标签表示用户可以执行的命令，如键盘快捷键。 |'
- en: '| `<details>` | This tag represents additional content related to some other
    element or content. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `<details>` | 这个标签代表了与其他元素或内容相关的附加内容。 |'
- en: '| `<figure>` | This tag represents independent content that may be used as
    annotations for photos, illustrations, and so on. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `<figure>` | 这个标签代表了可以用作照片、插图等注释的独立内容。 |'
- en: '| `<footer>` | This tag represents a section of content with information about
    its elements, such as copyright information and other details about an article.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `<footer>` | 这个标签代表了一个包含有关其元素的信息的内容部分，比如版权信息和关于文章的其他细节。 |'
- en: '| `<header>` | This tag represents a section heading, such as table of contents
    and navigational elements. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `<header>` | 这个标签代表了一个部分标题，比如目录和导航元素。 |'
- en: '| `<hgroup>` | This tag represents a section subheading, such as alternative
    titles and bylines. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `<hgroup>` | 这个标签代表了一个部分副标题，比如备用标题和署名。 |'
- en: '| `<mark>` | This tag represents a section of content marked up for referencing,
    similar in purpose as highlighting a block of text. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `<mark>` | 这个标签代表了用于引用的一部分内容，类似于对一段文本进行高亮。 |'
- en: '| `<meter>` | This tag represents a value within a known range, such as the
    amount of energy left. Note that since there is a dedicated `progress` element,
    the `meter` element should not be used to represent a progress bar. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `<meter>` | 这个标签代表了在已知范围内的值，比如剩余能量的数量。请注意，由于有专门的`progress`元素，`meter`元素不应该用来表示进度条。
    |'
- en: '| `<nav>` | This tag represents a navigation element with links to other documents,
    or links within the same document. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `<nav>` | 这个标签代表了一个带有指向其他文档或同一文档内链接的导航元素。 |'
- en: '| `<progress>` | This tag represents the amount of progress done within a known
    range, such as the number of steps completed in a registration process. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `<progress>` | 这个标签代表了在已知范围内完成的进度量，比如在注册过程中完成的步骤数。 |'
- en: '| `<rt>` | This tag represents the text component of a ruby annotation. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `<rt>` | 这个标签代表了ruby注释的文本组件。 |'
- en: '| `<rp>` | This tag represents the text component of a ruby annotation that
    is displayed by the browser when ruby annotations are not supported. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `<rp>` | 这个标签代表了当ruby注释不被支持时，浏览器显示的ruby注释的文本组件。 |'
- en: '| `<section>` | This tag represents a general-purpose section within the document,
    such as a slide, or the area of a document where a list of articles is displayed.
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `<section>` | 这个标签代表了文档中的一个通用部分，比如幻灯片，或者显示文章列表的部分。 |'
- en: '| `<summary>` | This tag represents a summary of some content. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `<summary>` | 这个标签代表了一些内容的摘要。 |'
- en: '| `<time>` | This tag represents a date and time in both human and machine-readable
    formats. The content displayed by the browser is meant for human consumption,
    whereas the data attributes are designed to be used by the browser and other applications.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `<time>` | 这个标签代表了一个日期和时间，可以以人类可读和机器可读的格式显示。浏览器显示的内容是为人类消费而设计的，而数据属性则是为了被浏览器和其他应用程序使用而设计的。
    |'
- en: '| `<video>` | This tag represents a video stream from a single source. Multiple
    sources may be specified, though the browser selects the most appropriate source
    to stream from. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `<video>` | 这个标签代表了来自单一来源的视频流。可以指定多个来源，但浏览器会选择最合适的来源进行流式传输。 |'
- en: '| `<wbr>` | This tag represents a line break opportunity, hinting to the browser
    where it would be appropriate to break a line when needed. Note that this element
    has no width, so that when a line break is not required, the element is not visible.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `<wbr>` | 这个标签代表了一个换行机会，提示浏览器在需要时在何处进行换行。请注意，这个元素没有宽度，因此当不需要换行时，该元素是不可见的。
    |'
- en: A warning about performance
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于性能的警告
- en: Something that is often overlooked in web design and front-end web development
    is performance. While today's major browsers make rendering HTML seem like a trivial
    task, there is actually a lot of work going on behind the scenes in order to turn
    a collection of HTML tags and CSS into a nice looking web page. What's more, as
    it becomes easier to add bells and whistles to a web page through rollover effects,
    drop down menus, and automatic slideshows, it is easy to forget about what the
    browser still needs to do to get that work done.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页设计和前端开发中经常被忽视的是性能。虽然今天的主流浏览器让渲染HTML看起来像是一项微不足道的任务，但实际上在幕后进行了大量工作，以将一系列HTML标签和CSS转化为一个漂亮的网页。更重要的是，随着在网页中添加鼠标悬停效果、下拉菜单和自动幻灯片变得更加容易，很容易忘记浏览器仍然需要做些什么来完成这项工作。
- en: If you think about an HTML document as a tree structure, where each nested tag
    is like a branch in the structure, then it's easy to understand what a deep layout
    would look like compared to a shallow layout. In other words, the more nested
    tags you have, the deeper the structure.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把HTML文档看作是一棵树形结构，其中每个嵌套的标签就像结构中的一个分支，那么很容易理解深层布局相对于浅层布局会是什么样子。换句话说，你拥有的嵌套标签越多，结构就会越深。
- en: With that said, always keep in mind that the slightest change in an HTML node
    (such as the physical size a text tag takes up on the page changing because a
    hover effect caused the text to become bold, thus taking a few extra pixels on
    the screen) may trigger what is called a reflow, which essentially will cause
    the browser to perform many calculations on each and every branch (tag) in your
    HTML structure, because it will need to recalculate where each element needs to
    go, so it can redraw the page properly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，要牢记的是，HTML节点中最微小的变化（比如文本标签的物理大小因为悬停效果导致文本变粗，从而在屏幕上多占据了几个像素）可能会触发所谓的回流，这实际上会导致浏览器对HTML结构中的每个分支（标签）进行多次计算，因为它需要重新计算每个元素的位置，以便正确地重绘页面。
- en: The more shallow you can make your HTML structures, the less calculations the
    browser will need to make every time it needs to redraw the page, thus causing
    a smoother experience. While the argument that deeply nested `<div>` tags cause
    HTML files to become harder to read and maintain can be subjective, there is no
    arguing that deep HTML structures perform much worse than flatter alternatives.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你的HTML结构越浅，浏览器在重新绘制页面时需要进行的计算就越少，从而使体验更加流畅。虽然深度嵌套的`<div>`标签导致HTML文件变得难以阅读和维护的论点可能是主观的，但毫无疑问，深层HTML结构的性能远远不如更扁平的替代方案。
- en: Native features of the browser
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器的本地功能
- en: As stated earlier, one of the strengths of HTML5 is the way it reflects real-world
    needs, and brings elegant solutions to such needs. Features that don't get used
    a whole lot by developers (or that don't get wide adoption by browser makers)
    eventually find their way out of the spec. Likewise, repeated efforts by developers
    to solve recurring problems eventually cause new features to be suggested, then
    added to the spec. As new recommendations become accepted as part of the spec,
    browser makers implement these new features, and the end result is that the browser
    is extended, and becomes capable of doing what developers had to code by hand.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，HTML5的一个优点是它反映了现实世界的需求，并为这些需求提供了优雅的解决方案。开发人员很少使用的功能（或者没有得到浏览器制造商的广泛采用）最终会从规范中消失。同样，开发人员反复努力解决重复出现的问题最终会导致新功能被提出，然后被添加到规范中。随着新的建议被接受为规范的一部分，浏览器制造商实现这些新功能，最终结果是浏览器被扩展，能够做开发人员以前需要手动编码的事情。
- en: As an example, let's take a look at placeholder fields. A placeholder is the
    text inside an input field found in HTML forms, which take the place of a separate
    label. When the input field is empty, the text inside it describes the data that
    the field expects (such as a first name, or an e-mail address). Once the user
    begins to type into the field, that placeholder text disappears, and the actual
    input from the user replaces it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们来看看占位字段。占位符是在HTML表单中的输入字段内的文本，它代替了单独的标签。当输入字段为空时，其中的文本描述了字段期望的数据（比如名字或电子邮件地址）。一旦用户开始在字段中输入，占位符文本就会消失，用户的实际输入会替代它。
- en: '![Native features of the browser](img/6029OT_01_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器的本地功能](img/6029OT_01_03.jpg)'
- en: While this technique is very intuitive, it takes more physical space to represent,
    which becomes especially challenging on smaller screen sizes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种技术非常直观，但在表示上需要更多的物理空间，尤其是在较小的屏幕尺寸上。
- en: 'A much more dynamic solution, as shown in the following screenshot, is to use
    a combination of JavaScript and CSS to move the field label inside the field itself:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如下面的屏幕截图所示，一个更加动态的解决方案是使用JavaScript和CSS的组合将字段标签放在字段内部：
- en: '![Native features of the browser](img/6029OT_01_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器的本地功能](img/6029OT_01_04.jpg)'
- en: 'Before HTML5, this effect took quite a few lines of boilerplate JavaScript
    code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5之前，实现这种效果需要写相当多的样板JavaScript代码：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Of course, there are many ways to achieve this same effect using JavaScript.
    In HTML5, this same feature, called placeholder, can be achieved with a single
    line of code, as shown in the following code snippet:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有很多种方法可以用JavaScript实现相同的效果。在HTML5中，可以用一行代码实现相同的功能，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The reason that this second version works is because the attribute *placeholder*
    was added to the browser, as well as the logic required to make it work. While
    this may seem like a nice little trick that the browser has learned, let''s take
    a closer look at some of the main benefits this provides us with:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第二个版本之所以有效，是因为*placeholder*属性被添加到了浏览器，以及使其工作所需的逻辑。虽然这可能看起来像是浏览器学会的一个小技巧，但让我们更仔细地看一下它给我们带来的一些主要好处：
- en: You, as the developer, have potentially hundreds fewer lines of code to write
    and test throughout the course of your entire project, since the browser exposes
    such a simple alternative
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为开发人员，你在整个项目过程中可能要写和测试的代码行数会减少数百行，因为浏览器提供了这样一个简单的替代方案
- en: 'Development time decreases for two reasons: you have less code to write, and
    you have less code to test'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发时间减少有两个原因：你需要写的代码更少，你需要测试的代码也更少
- en: Your code will be more portable and reliable, since you don't need to write
    specific implementations of your code logic for each browser, and you can trust
    that each browser will implement the feature properly (even if it takes a couple
    of updates for them to get there)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的代码将更具可移植性和可靠性，因为你不需要为每个浏览器编写特定的代码逻辑实现，并且你可以相信每个浏览器都会正确地实现该功能（即使它们需要几次更新才能达到这一点）
- en: In other words, instead of putting a lot of your efforts into normalizing your
    code so it runs the same way in as many browsers as possible, or writing a lot
    of boilerplate code just to bring your application to the latest accepted standards,
    you can now invest the majority of your time building unique applications, since
    the repetitive code is abstracted away by the browser.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，与其将大量精力投入到规范化代码，使其在尽可能多的浏览器中以相同方式运行，或者写大量样板代码来将应用程序带到最新的接受标准，现在你可以将大部分时间投入到构建独特的应用程序上，因为浏览器已经将重复的代码抽象化了。
- en: One last exciting point about this positive cycle of HTML5 that I'd like to
    point out is, how, since HTML5 is responsive to common use cases and real world
    needs, as time goes by we can only expect more and more really neat and useful
    features being added to the browser natively. Who can even imagine what new features
    the browser will support natively in the next few years?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于HTML5这种积极循环的最后一个令人兴奋的点是，随着时间的推移，我们只能期待浏览器本地添加更多更加精彩和有用的功能。谁能想象得到未来几年浏览器将本地支持什么新功能呢？
- en: As of this book, the following are some native features that modern browsers
    support (more detail about these features will be given in the following chapters,
    but this list should give you a good foretaste of what is to come).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本书，现代浏览器支持以下一些原生功能（关于这些功能的更多细节将在接下来的章节中给出，但这个列表应该让您对即将到来的内容有一个很好的预览）。
- en: Automatic form validation
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动表单验证
- en: You tell the browser the exact format that your want user input to be in, and
    the browser will enforce that format. Any invalid input provided (based on your
    settings), and the browser will even report back to the user, letting the user
    know what went wrong.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您告诉浏览器您希望用户输入的确切格式，并且浏览器将强制执行该格式。提供任何无效输入（基于您的设置），浏览器甚至会向用户报告，让用户知道出了什么问题。
- en: New input types
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的输入类型
- en: Collect data from the user in a variety of formats beyond text, lists, or checkboxes
    and radio buttons. For values within a given numerical range, you can use a slider
    input (also known as a range input). You can also take precise input related to
    dates, colors, telephone numbers, or e-mail addresses. All it takes to specify
    such restrictions in your input is a single HTML element attribute.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以各种格式从用户那里收集数据，超出文本、列表、复选框和单选按钮。对于给定数值范围内的值，可以使用滑块输入（也称为范围输入）。您还可以输入与日期、颜色、电话号码或电子邮件地址相关的精确输入。在输入中指定这些限制只需要一个HTML元素属性。
- en: Telephone-friendly hyperlinks
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电话友好的超链接
- en: When browsing through text documents, the browser has always been very good
    at navigating from one document to the next. All it takes to tell the browser
    where to go next is an anchor tag. Now that smart phones make up nearly half of
    all Internet usage in some parts of the world, a hyper link can have a different
    context—such as telling your device to dial a number, for example. With HTML5
    you can tell that same anchor tag to treat its link as a phone number to be called,
    similar to how you currently tell it to treat its resource as an email address.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览文本文档时，浏览器一直非常擅长从一个文档导航到下一个文档。只需告诉浏览器下一步去哪里就可以了，这需要一个锚标签。现在，智能手机在世界某些地区的互联网使用量中占据了近一半的份额，超链接可以有不同的上下文，比如告诉您的设备拨打一个号码。使用HTML5，您可以告诉同一个锚标签将其链接视为要拨打的电话号码，类似于您当前告诉它将其资源视为电子邮件地址。
- en: CSS-based DOM selectors
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于CSS的DOM选择器
- en: 'Unless you have lived under a rock for the past five years or so, you will
    have heard of, and possibly used the most popular JavaScript library today—jQuery.
    One of the main reasons that jQuery has become so popular, and has gained such
    wide acceptance by web developers, is the revolutionary way in which it allows
    you to access DOM elements. Before jQuery, the three most common ways of accessing
    DOM elements were as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你过去五年来一直生活在石头下，否则你一定听说过并可能使用过如今最流行的JavaScript库——jQuery。jQuery变得如此流行并得到Web开发人员的广泛接受的主要原因之一是它革命性地允许你访问DOM元素的方式。在jQuery之前，访问DOM元素的三种最常见方式如下：
- en: '`document.getElementsByTagName()`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.getElementsByTagName()`'
- en: '`document.getElementsByClassName()`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.getElementsByClassName()`'
- en: '`document.getElementById()`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.getElementById()`'
- en: 'Based on jQuery''s solution to this limited way of accessing document nodes,
    you can now retrieve an element (or a collection of elements) from your document
    by specifying a CSS selector. Any or all nodes that match such CSS selectors are
    returned by the new selecting commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 基于jQuery对访问文档节点的有限方式的解决方案，您现在可以通过指定CSS选择器从文档中检索元素（或一组元素）。新的选择命令返回与这些CSS选择器匹配的任何或所有节点：
- en: '`document.querySelector("css query goes here");`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.querySelector("css查询在这里");`'
- en: '`document.querySelectorAll("css query goes here");`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.querySelectorAll("css查询在这里");`'
- en: Text-to-speech
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本转语音
- en: Text-to-speech is probably one of the most exciting and powerful features being
    added natively to the browser. While your user can simply type some input into
    an input field, and you can do with that text input what you wish, the browser
    now gives you the ability to take voice input from your user. Whatever the user
    literally *tells* the browser through a microphone, the browser will use its own
    text analysis algorithms, and give you the equivalent text transcription. By adding
    a single line of code to your application (and a web-based application, no less),
    you can now get that much closer to the type of interface only portrayed in movies
    (or offline, in desktop-based applications).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 文本转语音可能是最令人兴奋和强大的功能之一，它被原生添加到浏览器中。虽然用户可以简单地在输入字段中输入一些内容，您可以对该文本输入进行任何操作，但浏览器现在可以让您从用户那里接收语音输入。无论用户通过麦克风向浏览器直接*告诉*浏览器什么，浏览器都会使用自己的文本分析算法，并为您提供等效的文本转录。通过向您的应用程序添加一行代码（而且是基于Web的应用程序），您现在可以更接近于只在电影中（或离线，在基于桌面的应用程序中）展示的界面类型。
- en: CSS3
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3
- en: Cascading Style Sheets, most commonly known simply as CSS, is another contributing
    technology to the success of HTML and the World Wide Web. CSS is a style language
    that controls the way an HTML structure is rendered. Some of the benefits of using
    a style language alongside a markup language include separation of concerns, reusability
    of visual design, ease of maintenance, and scalability. As part of the HTML5 revolution,
    there were some significant updates to the CSS spec, which have also taken the
    language to a whole new level.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 层叠样式表，通常简称为CSS，是HTML和万维网成功的另一个贡献技术。CSS是一种控制HTML结构呈现方式的样式语言。使用标记语言和样式语言的好处包括关注点分离、可重用的视觉设计、易于维护和可扩展性。作为HTML5革命的一部分，CSS规范进行了一些重大更新，这也将语言提升到了一个全新的水平。
- en: Separation of concerns
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关注点分离
- en: The first, and possibly most apparent benefit that CSS brings to the game is
    separation of concerns. By allowing HTML to describe the data that it represents,
    and not worry about how that data is presented, CSS is able to control the way
    that data is displayed. This way the CSS expert can work on styling a web application
    without the need to touch the HTML file. Best of all, the CSS expert needs absolutely
    no knowledge of any of the possibly many other technologies used in a given project.
    This way, no matter how complex the rest of the project is, the styling can be
    done independently and separately.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CSS为游戏带来的第一个，可能也是最明显的好处是关注点分离。通过允许HTML描述其表示的数据，并且不担心如何呈现这些数据，CSS能够控制数据的显示方式。这样，CSS专家可以在不需要触及HTML文件的情况下处理Web应用程序的样式。最重要的是，CSS专家绝对不需要了解给定项目中可能使用的任何其他技术。这样，无论项目的其余部分有多复杂，样式都可以独立和分开地完成。
- en: Reusability of visual design
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视设计的可重用性
- en: 'There are many ways to include CSS rules into an HTML document. For example,
    you can write all the CSS code right into the same HTML file that uses it, you
    can write it inside each HTML element as you create them, or you can put the CSS
    style in a completely separate file, then import the stylesheet into the HTML
    file. Most commonly, what you''ll want to do is write all your CSS code in one
    or more separate files (think separation of concerns), then import each file into
    the HTML files that you''d like to use for each set of styles. This way you can
    have a single stylesheet that describes a particular visual *theme*, then you
    can reuse that theme throughout an entire application (possibly composed of thousands
    of individual HTML files and pieces) simply by importing the stylesheet with a
    single line of code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以将CSS规则包含到HTML文档中。例如，您可以将所有CSS代码直接写入使用它的同一HTML文件中，也可以在创建每个HTML元素时将其写入其中，或者可以将CSS样式放在一个完全独立的文件中，然后将样式表导入到HTML文件中。最常见的做法是将所有CSS代码写在一个或多个单独的文件中（考虑关注点分离），然后将每个文件导入到您想要用于每组样式的HTML文件中。这样，您可以拥有一个描述特定视觉*主题*的单个样式表，然后可以通过一行代码将该主题在整个应用程序中重用（可能由成千上万个单独的HTML文件和片段组成），只需导入样式表：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code is an example of CSS rules written on a specific element.
    In this case, only this HTML paragraph tags will use the style defined by this
    simple rule (which tells the browser to render the text in red, and 23 pixels
    height).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是在特定元素上编写的CSS规则的示例。在这种情况下，只有这些HTML段落标记将使用由这个简单规则定义的样式（告诉浏览器以红色渲染文本，并且高度为23像素）。
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous code is an example of CSS rules written in a separate document.
    In this case, any HTML paragraph tags in the file `index.html` will use the style
    defined by this simple rule (which tells the browser to render the text in red,
    and 23 pixels height). Other documents will not use the styling rules found in
    `my-style sheet.css` if the stylesheet is not imported into those files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是在一个单独的文档中编写的CSS规则的示例。在这种情况下，文件`index.html`中的任何HTML段落标记都将使用由这个简单规则定义的样式（告诉浏览器以红色渲染文本，并且高度为23像素）。如果样式表未导入到其他文档中，那么其他文档将不使用`my-style
    sheet.css`中找到的样式规则。
- en: Ease of maintenance
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易于维护
- en: Another tremendous benefit that you get by separating the presentation of your
    HTML documents through external CSS files is that maintenance becomes very easy.
    Imagine the scenario where you write all your styles in the same document that
    uses them. If you only have one document, then that's not a big problem. However,
    most projects include multiple HTML files. So imagine that you simply copy and
    paste the CSS from one file into the next, since they both share the same CSS
    rules. How would you go about making a change to some of these rules if you now
    have tens or hundreds of files to update also, since the CSS to be updated in
    found in all of these HTML file?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将HTML文档的表现层与外部CSS文件分离，您获得的另一个巨大好处是维护变得非常容易。想象一下，如果您将所有样式都写在使用它们的同一文档中。如果您只有一个文档，那么这不是一个大问题。然而，大多数项目包括多个HTML文件。因此，想象一下，您只需将一个文件中的CSS复制并粘贴到下一个文件中，因为它们都共享相同的CSS规则。如果您现在需要更改其中一些规则，那么您将如何更新数十甚至数百个文件，因为需要更新的CSS在所有这些HTML文件中都可以找到？
- en: Thus, if you only have a few CSS that only contain CSS code, and all the HTML
    files that use them simply import the stylesheet, whenever you need to change
    the style for your project, you only need to update one CSS file. Once that CSS
    file is updated, all other HTML files that import the CSS will automatically use
    the new style.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你只有几个只包含CSS代码的CSS文件，以及所有使用它们的HTML文件只是简单地导入样式表，那么当你需要为项目更改样式时，只需要更新一个CSS文件。一旦更新了该CSS文件，所有导入该CSS的其他HTML文件将自动使用新样式。
- en: Scalability
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Lastly, the advantage of using CSS is that it makes the presentation layer of
    your project very scalable. Once the CSS code is in place, you can use it throughout
    hundreds of thousands of files (think of Wikipedia, for example), and the style
    will be consistent throughout all of them. If you then decide to upgrade your
    design, you only need to make changes to one file—the stylesheet.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用CSS的优势在于它使项目的表现层非常具有可扩展性。一旦CSS代码就位，你可以在成千上万的文件中使用它（比如维基百科），并且样式将在所有文件中保持一致。如果你决定升级设计，只需要更改一个文件——样式表。
- en: The evolution of CSS
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS的演变
- en: Although the idea of having a separate style language to handle the presentation
    layer of HTML documents is unarguably brilliant, CSS has been somewhat of a nightmare
    to most designers. Since different browsers have always tried to be unique enough
    from other competing browsers in order to win the favor of users, different browsers
    have implemented certain features of CSS differently. For examples, a CSS rule
    that specifies an element with a width of 500 pixels would not behave consistently
    in all major browsers. By specifying an element's width attribute through CSS,
    most browsers would only set the content width of the element, while allowing
    any padding, border, and margin width to make the total width of the element even
    larger. However, there were browsers that included the width of an element's padding
    and border when setting the CSS width attribute.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有一个单独的样式语言来处理HTML文档的呈现层的想法无疑是很棒的，但是对于大多数设计师来说，CSS一直是一种噩梦。由于不同的浏览器一直试图与其他竞争浏览器有足够的独特之处，以赢得用户的青睐，不同的浏览器以不同的方式实现了CSS的某些功能。例如，指定宽度为500像素的CSS规则在所有主要浏览器中的行为并不一致。通过CSS指定元素的宽度属性，大多数浏览器只会设置元素的内容宽度，同时允许任何填充、边框和边距宽度使元素的总宽度更大。然而，有些浏览器在设置CSS宽度属性时会包括元素的填充和边框宽度。
- en: '![The evolution of CSS](img/6029OT_01_02.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![CSS的演变](img/6029OT_01_02.jpg)'
- en: The previous figure shows an example of a CSS box model. Note that the margin
    space is always transparent, while any padding space inherits the background color
    or image of its corresponding element.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了CSS盒模型的一个例子。请注意，边距空间始终是透明的，而任何填充空间都会继承其相应元素的背景颜色或图像。
- en: Inconsistencies like this made the success of CSS limited and slow. When a designer
    took on a project, one design would need to be coded with many browsers in mind,
    which also meant that it would need to be tested in many different browsers. Not
    only that, but the actual set of features that CSS offered were limited. For example,
    before Version 3, the only way to create an element with rounded corners through
    CSS was by adding a background image to the element, where this image was a box
    with rounded corners. This was not very practical, and often involved changing
    the HTML structure, which partly defeated the purpose of external stylesheets.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这种不一致性使得CSS的成功受到限制并且缓慢。当设计师接手一个项目时，一个设计需要考虑到许多浏览器，这也意味着需要在许多不同的浏览器中进行测试。不仅如此，CSS提供的实际功能也是有限的。例如，在第3版之前，通过CSS创建具有圆角的元素的唯一方法是向元素添加背景图像，其中该图像是一个带有圆角的框。这并不是非常实用，通常需要更改HTML结构，这在一定程度上违背了外部样式表的目的。
- en: Thanks to the responsive nature of web standards, however, a new version of
    CSS was released alongside the new version of HTML. Officially named CSS Level
    3, the new specification builds on CSS Level 2 modules, and includes additional
    modules. Given the wide acceptance and usage of CSS, major web browsers have been
    doing a much better job at implementing features more consistently, meaning that
    one code base is more likely to run consistently on different browsers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于Web标准的响应性，随着新版本的HTML一起发布了CSS的新版本。正式命名为CSS Level 3，新规范建立在CSS Level 2模块的基础上，并包括额外的模块。鉴于CSS的广泛接受和使用，主要的Web浏览器在更一致地实现功能方面做得更好，这意味着一个代码库更有可能在不同的浏览器上一致地运行。
- en: Experimental features and vendor prefixes
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验性功能和供应商前缀
- en: As new features are added to the spec, and the spec itself progresses, browser
    vendors attempt to stay on top of things and provide the latest and greatest features
    to designers and end users. As of this book, however, not all features listed
    on the CSS3 specification are fully implemented by all browsers. The way you can
    tell if a feature is not yet fully supported by the browser (or that a feature
    may stop being supported by a particular browser) is that the CSS rule is prefixed
    by a dash, followed by the code name for the browser. For example, `-webkit-(rule
    name)`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新功能被添加到规范中，规范本身的进展，浏览器供应商试图保持领先地位，并为设计师和最终用户提供最新和最好的功能。然而，截至本书出版时，并非所有列在CSS3规范中的功能都被所有浏览器完全实现。您可以通过CSS规则是否带有破折号和浏览器的代码名称前缀来判断浏览器是否尚未完全支持某个功能（或者某个功能可能停止被某个特定浏览器支持）。例如，`-webkit-（规则名称）`。
- en: '| Vendor | Prefix |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 供应商 | 前缀 |'
- en: '| --- | --- |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Google Chrome | `-webkit-` |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| Google Chrome | `-webkit-` |'
- en: '| Mozilla Firefox | `-moz-` |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| Mozilla Firefox | `-moz-` |'
- en: '| Microsoft Internet Explorer | `-ms-` |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| Microsoft Internet Explorer | `-ms-` |'
- en: '| Opera | `-o-` |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| Opera | `-o-` |'
- en: '| Safari | `-webkit-` |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| Safari | `-webkit-` |'
- en: Eventually, the specification will stabilize even more, and all browsers will
    implement the CSS specification the same, and no vendor prefix will need to appear
    in your stylesheet code. But until then, you'll need to repeat some CSS Level
    3 rules so that each browser will recognize the feature.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，规范将进一步稳定，所有浏览器都将以相同的方式实现CSS规范，您的样式表中将不再需要出现供应商前缀。但在那之前，您需要重复一些CSS Level 3规则，以便每个浏览器都能识别该功能。
- en: CSS preprocessors
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS预处理器
- en: It can sometimes be difficult to keep up with all the CSS features and their
    corresponding browser support. Some features have already gone out of the prefix
    (meaning that all major browsers support the rule without the vendor prefix keyword
    in front of the rule keyword). Still, many others haven't completely outgrown
    this experimental stage, and only some of the major browsers support them without
    any vendor prefix.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有时很难跟上所有CSS功能及其相应的浏览器支持。一些功能已经不再需要前缀（这意味着所有主要浏览器都支持规则，而不需要在规则关键字前面加上供应商前缀关键字）。但是，许多其他功能仍未完全摆脱这个实验阶段，只有一些主要浏览器支持它们而没有任何供应商前缀。
- en: Some brave developers make the effort to stay on top of the latest browser updates,
    and update their code accordingly, by removing superfluous vendor prefixes from
    their stylesheet code. Others find this proactive effort to be counter productive,
    and instead include all possible versions of the rule to their code, in which
    case they would only need to update their stylesheet code one day in the far future,
    if at all.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一些勇敢的开发人员努力跟上最新的浏览器更新，并相应地更新他们的代码，通过从样式表代码中删除多余的供应商前缀。其他人发现这种积极的努力是适得其反的，而是将所有可能的规则版本包含到他们的代码中，这样他们只需要在遥远的将来的某一天更新他们的样式表代码，如果有的话。
- en: Of course, repeating the same rule with each vendor prefix in front of it, followed
    by the non-prefixed rule, quickly makes your stylesheet files very large, and
    a nightmare to maintain. Find an approach that works best for you. There are also
    various tools available that help you maintain your CSS files, especially with
    regards to this evolving situation with the vendor prefix.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，用每个供应商前缀重复相同的规则，然后跟着非前缀规则，会迅速使你的样式表文件变得非常庞大，难以维护。找到最适合你的方法。还有各种工具可用于帮助你维护你的CSS文件，特别是关于供应商前缀的这种不断发展的情况。
- en: The two most popular such tools (also known as CSS preprocessors) are LESS (see
    [http://lesscss.org/](http://lesscss.org/)) and SASS (see [http://sass-lang.com/](http://sass-lang.com/)).
    Although each preprocessor is slightly different, they all accomplish the same
    thing, namely, taking plain CSS stylesheets, then adding all the required vendor
    prefixes where needed.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的这类工具（也称为CSS预处理器）是LESS（见[http://lesscss.org/](http://lesscss.org/)）和SASS（见[http://sass-lang.com/](http://sass-lang.com/)）。虽然每个预处理器略有不同，但它们都实现了同样的功能，即，接受普通的CSS样式表，然后在需要的地方添加所有必需的供应商前缀。
- en: CSS3 modules
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3模块
- en: The new CSS Level 3 modules can be divided into several modules, namely, **style
    attributes** , **selectors**, **colors**, and **media queries**.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 新的CSS Level 3模块可以分为几个模块，即**样式属性**，**选择器**，**颜色**和**媒体查询**。
- en: Style attributes tell the browser how an element is to be rendered (or styled).
    This could be anything from a string of text being styled with a font size of
    23 px, to styling a list of images rotated 45 degrees about their y-axis and placed
    above its own reflection, to styling various HTML nodes to animate every half
    a second using keyframe animation.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 样式属性告诉浏览器如何呈现（或样式化）元素。这可以是任何东西，从一个字符串文本被样式化为23像素的字体大小，到样式化一组图像，使其绕其y轴旋转45度并放置在自己的倒影上，再到样式化各种HTML节点以每半秒使用关键帧动画进行动画处理。
- en: Selectors are the way you tell the browser what elements are to be styled. That
    is, through the special expression language of CSS selectors, you can address
    one or more elements whose styling rules follow the selector declaration. The
    new CSS3 selectors basically extend this expression language, making it possible
    to target different elements in different, more flexible ways.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器是告诉浏览器要样式化哪些元素的方式。也就是说，通过CSS选择器的特殊表达语言，你可以寻址一个或多个元素，其样式规则遵循选择器声明。新的CSS3选择器基本上扩展了这种表达语言，使得可以以不同、更灵活的方式来定位不同的元素。
- en: Colors, as the name implies, hints to the browser how an element is to be shaded.
    Colors can be applied to the actual text on a web page, to the border surrounding
    text or other elements, as well as the background of elements, following the box
    model scheme.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色，顾名思义，提示浏览器如何对元素进行着色。颜色可以应用于网页上的实际文本，也可以应用于文本或其他元素周围的边框，以及元素的背景，遵循盒模型方案。
- en: Finally, media queries allow the stylesheet to target the document (or parts
    of it) based on various conditions. What's more, media queries are triggered in
    real time by the browser. In other words, if, for example, you specify a media
    query that defines CSS rules that should only apply when the browser window is
    no wider than a certain width, the browser will update the web page automatically
    as needed as the window is resized. This way a web page can be *responsive*, meaning
    that it responds immediately to any changes in its environment that causes any
    media query to become valid.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，媒体查询允许样式表基于各种条件来定位文档（或其部分）。而且，媒体查询由浏览器实时触发。换句话说，例如，如果你指定了一个媒体查询，定义了只有在浏览器窗口不超过某个宽度时才应用的CSS规则，那么浏览器将根据需要自动更新网页，随着窗口的调整大小。这样，网页可以是*响应式*的，意味着它立即对其环境中的任何变化做出响应，使得任何媒体查询都变得有效。
- en: A brief definition of these modules will follow, but a more in-depth discussion,
    along with usage examples, can be found in subsequent chapters as each model is
    added to our games.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块的简要定义将在下文中进行，但更深入的讨论以及使用示例可以在随后的章节中找到，因为每个模块都被添加到我们的游戏中。
- en: Style attributes
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式属性
- en: Within the style attributes module , we can subdivide the features into smaller
    modules that deal with custom fonts, text effects, other effects, and animation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式属性模块中，我们可以将特性细分为处理自定义字体、文本效果、其他效果和动画的较小模块。
- en: '| Attribute | Definition |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 定义 |'
- en: '| --- | --- |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `border-radius` | This specifies how much to round each corner or a box |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `border-radius` | 这指定了每个框的角要圆多少 |'
- en: '| `border-image` | This specifies an image to render over the border of a box
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `border-image` | 这指定了要在框的边框上渲染的图像 |'
- en: '| `box-shadow` | This specifies the direction and size of a drop shadow relative
    to a box |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `box-shadow` | 这指定了相对于框的投影的方向和大小 |'
- en: '| `background-size` | This specifies the size of a background image |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `background-size` | 这指定了背景图像的大小 |'
- en: '| `background-origin` | This specifies the offset position of background images
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `background-origin` | 这指定了背景图像的偏移位置 |'
- en: '| `background-clip` | This specifies how much to draw a background image |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `background-clip` | 这指定了要绘制背景图像的程度 |'
- en: '| `animation` | This specifies various aspects of animation, such as keyframes,
    timing, effect, and so on |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `animation` | 这指定了动画的各个方面，比如关键帧、时间、效果等 |'
- en: '| `transform` | This specifies various types of 2D and 3D transformations |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `transform` | 这指定了各种2D和3D变换 |'
- en: '| `transition` | This specifies how two attributes should transition from one
    to the other |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `transition` | 这指定了两个属性应该如何从一个过渡到另一个 |'
- en: '| `text-shadow` | This specifies the direction and size of a drop shadow relative
    to text |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `text-shadow` | 这指定了相对于文本的投影阴影的方向和大小 |'
- en: '| `@font-face` | This specifies a font file that the browser can download into
    the user''s system and use as a native font |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `@font-face` | 这指定了浏览器可以下载到用户系统并用作本机字体的字体文件 |'
- en: Selectors
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器
- en: CSS selectors , first introduced in CSS Level 1, have always been fairly powerful
    and comprehensive.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: CSS选择器，最早在CSS Level 1中引入，一直以来都非常强大和全面。
- en: '| Attribute | Definition |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 定义 |'
- en: '| --- | --- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `E[foo^="bar"]` | It selects an `E` element with an attribute `foo` has a
    value that begins with `bar` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `E[foo^="bar"]` | 它选择了一个具有属性`foo`值以`bar`开头的`E`元素 |'
- en: '| `E[foo$="bar"]` | It selects an `E` element with an attribute `foo` has a
    value that ends with `bar` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `E[foo$="bar"]` | 它选择了一个具有属性`foo`值以`bar`结尾的`E`元素 |'
- en: '| `E[foo*="bar"]` | It selects an `E` element with an attribute `foo` has a
    value that contains `bar` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `E[foo*="bar"]` | 它选择了一个具有属性`foo`值包含`bar`的`E`元素 |'
- en: '| `E:root` | It selects an `E` element at the root of the document |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `E:root` | 它选择了文档根部的`E`元素 |'
- en: '| `E:nth-child(n)` | It selects the *N*th `E` child element |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `E:nth-child(n)` | 它选择了第N个`E`子元素 |'
- en: '| `E:nth-last-child(n)` | It selects the *N*th `E` child element counting from
    the last child element |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `E:nth-last-child(n)` | 它选择了从最后一个子元素开始计数的第N个`E`子元素 |'
- en: '| `E:nth-of-type(n)` | It selects the *N*th `E` sibling element of its type
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `E:nth-of-type(n)` | 它选择其类型的第N个`E`兄弟元素 |'
- en: '| `E:nth-last-of-type(n)` | It selects the *N*th `E` sibling element of its
    type, counting from the last child element |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `E:nth-last-of-type(n)` | 它选择了从最后一个子元素开始计数的第N个`E`兄弟元素 |'
- en: '| `E:last-child` | It selects the last `E` element |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `E:last-child` | 它选择了最后一个`E`元素 |'
- en: '| `E:first-of-type` | It selects the first `E` sibling element of its type
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `E:first-of-type` | 它选择了其类型的第一个`E`兄弟元素 |'
- en: '| `E:last-of-type` | It selects the last `E` sibling element of its type |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `E:last-of-type` | 它选择了其类型的最后一个`E`兄弟元素 |'
- en: '| `E:only-child` | It selects an `E` element if this is the only child node
    of its parent element |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `E:only-child` | 它选择了一个`E`元素，如果这是其父元素的唯一子节点 |'
- en: '| `E:only-of-type` | It selects an `E` element if this is the only sibling
    node of its type of its parent element |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `E:only-of-type` | 它选择了一个`E`元素，如果这是其父元素的唯一同类型的兄弟节点 |'
- en: '| `E:empty` | It selects an `E` element if it has no child nodes and no text
    content |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `E:empty` | 它选择了一个`E`元素，如果它没有子节点和文本内容 |'
- en: '| `E:target` | It selects an `E` element whose `ID` attribute matches the URL
    hash symbol |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `E:target` | 它选择了一个`E`元素，其`ID`属性与URL哈希符号匹配 |'
- en: '| `E:enabled``E:disabled` | It selects an `E` element that has been disabled
    through its corresponding attribute |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `E:enabled``E:disabled` | 它选择了通过相应属性被禁用的`E`元素 |'
- en: '| `E:checked` | It selects an `E` element that has been checked through its
    corresponding attribute, or through appropriate user interaction |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `E:checked` | 它选择了通过相应属性或适当的用户交互已被选中的`E`元素 |'
- en: '| `E:not(S)` | It selects an `E` element that does not match a selector expression
    `S` |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `E:not(S)` | 它选择了一个不匹配选择器表达式`S`的`E`元素 |'
- en: '| `F ~ E` | It selects an `E` element preceded by an `F` element |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `F ~ E` | 它选择了一个`F`元素之前的`E`元素 |'
- en: 'Source: Cascading Style Sheets (CSS) Snapshot 2010, W3C Working Group Note
    12 May 2011[](http://www.w3.org/TR/CSS/)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：层叠样式表（CSS）快照2010，W3C工作组注释2011年5月12日[](http://www.w3.org/TR/CSS/)
- en: Colors
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色
- en: 'The two main additions to colors in CSS Level 3 are the adoption of HSL colors,
    and an additional alpha channel. Before, you could specify a color using RGB by
    specifying a value between 0 and 255 for each channel (red, green, and blue).
    Now the extra alpha channel can be appended to the end of the attribute, allowing
    you to control the level of transparency:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: CSS Level 3中对颜色的两个主要添加是采用HSL颜色和额外的alpha通道。以前，您可以通过为每个通道（红色、绿色和蓝色）指定0到255之间的值来指定RGB颜色。现在，额外的alpha通道可以附加到属性的末尾，允许您控制透明度的级别：
- en: '[PRE6]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This CSS rule specifies a completely white background, with an opacity of 50
    percent (half transparent) represented by the decimal fraction:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS规则指定了一个完全白色的背景，不透明度为50%（半透明），用小数表示：
- en: '[PRE7]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Alternatively, you can specify the same CSS rule using percentages for all values,
    which might be easier to read, and make the expression more consistent.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用百分比为所有值指定相同的CSS规则，这可能更容易阅读，并使表达更一致。
- en: Specifying colors using **Hue, Saturation, and Lightness** (**HSL**) is similarly
    easy, and arguably much more intuitive. Instead of using the `RGB` or `RGBA` keyword,
    you simply specify a color as HSL by using the keyword `HSL` (or `HSLA` if you
    would like to add the extra and optional alpha channel). Another benefit to using
    `HSL` over `RGB` is that `RGB` is hardware-oriented, whereas `HSL` is not.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**色调、饱和度和亮度**（**HSL**）指定颜色同样简单，而且可能更直观。您不再需要使用`RGB`或`RGBA`关键字，而是通过使用关键字`HSL`（如果您想要添加额外的可选alpha通道，则使用`HSLA`）。使用`HSL`而不是`RGB`的另一个好处是，`RGB`是面向硬件的，而`HSL`不是。
- en: '[PRE8]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here you specify a very bright red background color by setting the saturation
    to its limit, and lighting the color half way. Remember that setting the lightness
    channel to `100%` will cause the color to be completely white (as a super bright
    light would do), while setting it to `0%` will cause it to be completely black,
    as you would expect in a dark room; for example, see the following line of code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过将饱和度设置为极限，并将颜色点亮一半，您可以指定一个非常明亮的红色背景颜色。请记住，将亮度通道设置为`100%`会使颜色完全变为白色（就像超级明亮的灯光一样），而将其设置为`0%`会使其完全变为黑色，就像在黑暗的房间中一样；例如，参见以下代码行：
- en: '[PRE9]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Alternatively, you can specify the same CSS rule with a semi-transparent look
    by adding the alpha channel, and setting it to the `50%` opacity.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过添加alpha通道并将其设置为`50%`不透明度，为相同的CSS规则指定半透明外观。
- en: The hue channel of HSL is a number between 0 and 359, which represents an angle
    in the color wheel, with red being 0 degrees, green being 120, and blue being
    240\. Note that this number wraps (since it's an angle value), so that 360 represents
    the same location in the wheel as 0\. The saturation and lightness channels represent
    the percentage between being fully represented, and not at all.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: HSL的色调通道是0到359之间的数字，表示颜色轮上的角度，红色为0度，绿色为120度，蓝色为240度。请注意，这个数字是环绕的（因为它是一个角度值），所以360代表轮子上的相同位置为0。饱和度和亮度通道表示完全表示和完全不表示之间的百分比。
- en: Media queries
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体查询
- en: 'Media queries allow you check for specific features of the device rendering
    your HTML file. This is most commonly used in determining in real time the width
    and height of the window viewing your site. A common use case for this powerful
    feature is to determine whether the user is on a mobile device or not. A simple
    way to understand media queries is to think of them in terms of conditional statements,
    such as, "if the media is (…)". For example, as illustrated in the following screenshot,
    when a media is at least 500 pixels wide, one set of CSS rules gets applied. When
    the media is less than 500 pixels wide, an alternative set of CSS rules are used:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询允许您检查渲染HTML文件的设备的特定功能。这在实时确定查看您网站的窗口的宽度和高度方面最常用。这个强大功能的常见用例是确定用户是否在移动设备上。理解媒体查询的一个简单方法是将它们视为条件语句，比如，“如果媒体是（…）”。例如，如下截图所示，当媒体宽度至少为500像素时，将应用一组CSS规则。当媒体宽度小于500像素时，将使用另一组CSS规则：
- en: '![Media queries](img/6029OT_01_05.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![媒体查询](img/6029OT_01_05.jpg)'
- en: The same HTML structure is rendered differently based on the current state of
    the browser, thanks to media queries.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 由于媒体查询，相同的HTML结构根据浏览器的当前状态呈现不同。
- en: '[PRE10]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This simple example specifically targets any device in portrait mode, and defines
    the CSS rule that specifies a red background color to the body element.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子特别针对处于纵向模式的任何设备，并定义了指定`body`元素为红色背景颜色的CSS规则。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Behind the scenes, the way that browsers implement this particular media query
    (the `portrait` mode) is by calculating the width of the window viewing the page
    with respect to the window's height. If the window happens to be higher than it
    is wider, then for all practical purposes, the page is considered to be in the
    `portrait` mode. Similarly, if you manually resize the window, or if it just happens
    to be in a position where it is wider than higher, then the browser will consider
    the page to be in the `landscape` mode, and any media queries targeting the mode
    will be triggered.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，浏览器实现这个特定的媒体查询（`portrait`模式）的方式是通过计算查看页面的窗口的宽度与窗口的高度的比例。如果窗口的高度大于宽度，那么从实际目的上来说，页面被认为处于`portrait`模式。同样，如果您手动调整窗口大小，或者它刚好处于宽度大于高度的位置，那么浏览器将认为页面处于`landscape`模式，并且将触发针对该模式的任何媒体查询。
- en: '[PRE11]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the previous example, we tell the browser to check if the window is less
    than or equal to 240 pixels wide. If it is, we define the CSS rule that tells
    the `body` tag to render itself with a white background.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们告诉浏览器检查窗口是否小于或等于240像素宽。如果是，我们定义CSS规则，告诉`body`标签以白色背景呈现自己。
- en: '[PRE12]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As a last example for now, we tell the browser to check for a few different
    conditions in the previous code snippet. If at least one of the conditions evaluates
    to true, then the CSS rules inside that media query block will be made available
    to the page. This can be very helpful when reusing rules for different conditions,
    or when simply creating different rules to be applied in different situations.
    In this particular case, we set the background color of the body tag to a bright
    green whenever one of two (or both) conditions are true: the window is at least
    5000 pixels tall, or the window''s width is between 800 pixels and 1200 pixels
    (both values inclusive).'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一个例子，我们告诉浏览器在上一个代码片段中检查几个不同的条件。如果至少一个条件求值为true，则该媒体查询块内的CSS规则将对页面可用。在不同条件下重用规则或者简单地创建不同规则以应用于不同情况时，这将非常有帮助。在这种特殊情况下，我们将`body`标签的背景颜色设置为明亮的绿色，只要两个条件中的一个（或两个都是）为true：窗口高度至少为5000像素，或者窗口宽度在800像素和1200像素之间（两个值都包括在内）。
- en: JavaScript APIs
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript API
- en: As stated earlier, when HTML was created, it was not meant to be used for the
    development of large enterprise applications. When JavaScript was first created
    back in 1995, its main goal was to provide a simple scripting language that would
    allow web designers to add some logic to their web pages. This too was not meant
    to be a foundation tool from which large, complex applications would be developed.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，当HTML被创建时，并不是用于开发大型企业应用程序。当JavaScript于1995年首次创建时，其主要目标是提供一种简单的脚本语言，使Web设计人员能够为其网页添加一些逻辑。这也不是用于开发大型复杂应用程序的基础工具。
- en: However, as we have seen with HTML itself, as well as CSS, JavaScript has become
    very widely used, and developers have outgrown its limited capabilities. Seeing
    the direction in which developers were taking the language, in an attempt to leverage
    the Web as a platform, browser vendors started to make improvements to JavaScript
    as much as was in their power. As a result, very powerful JavaScript engines have
    emerged. So, as JavaScript become even more used, and as browser became even more
    powerful, a new set of additions has been added to JavaScript.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如我们在HTML本身以及CSS中所看到的，JavaScript已经被广泛使用，开发人员已经超越了其有限的能力。看到开发人员采用这种语言的方向，为了利用Web作为平台，浏览器供应商开始尽其所能改进JavaScript。结果，非常强大的JavaScript引擎已经出现。因此，随着JavaScript的使用越来越广泛，浏览器变得越来越强大，JavaScript也增加了一系列新的功能。
- en: Today JavaScript is the most popular scripting language used on the Web. Given
    its capabilities and the latest tooling available for it, JavaScript has become
    a very good option for the development of large applications, especially for games.
    The latest JavaScript APIs allow for 2D and 3D graphics rendering, thread-like
    behavior, sockets, embedded databases, and a whole lot more. Best of all, this
    new functionality is built with security in mind, and is not only available on
    desktop computers, but can also be used in most devices connected to the World
    Wide Web.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，JavaScript是最流行的Web脚本语言。鉴于其功能和最新的工具，JavaScript已成为开发大型应用程序的非常好的选择，特别是游戏。最新的JavaScript
    API允许进行2D和3D图形渲染，类似线程的行为，套接字，嵌入式数据库等等。最重要的是，这些新功能是以安全性为重点构建的，并且不仅适用于台式电脑，还可以在连接到全球网络的大多数设备上使用。
- en: New JavaScript APIs
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的JavaScript API
- en: 'While the following is not a comprehensive list of all the new and upcoming
    APIs and language features, it does cover the most significant, stable additions
    to JavaScript, especially ones that we can leverage for game development. A more
    detailed explanation of each of the APIs listed in the following list, as well
    as usage examples, are available in subsequent chapters:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然以下内容并非所有新的和即将推出的API和语言特性的全面列表，但它确实涵盖了JavaScript最重要、最稳定的新增内容，特别是我们可以利用它们进行游戏开发。关于以下列表中列出的每个API的更详细解释以及使用示例，可在随后的章节中找到：
- en: '| API | Definition |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| API | 定义 |'
- en: '| --- | --- |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Canvas API | It renders 2D or 3D graphics |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 画布API | 它渲染2D或3D图形 |'
- en: '| Web Audio API | It controls playback of audio files |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| Web Audio API | 它控制音频文件的播放 |'
- en: '| Web Video API | It controls playback of video files |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| Web视频API | 它控制视频文件的播放 |'
- en: '| Geolocation API | It provides access to geographical location of hosting
    device |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 地理位置API | 它提供对托管设备地理位置的访问 |'
- en: '| Web Socket API | It provides a protocol for two way communication with a
    remote server |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| Web Socket API | 它提供了与远程服务器进行双向通信的协议 |'
- en: '| Web Workers API | It provides a thread-like, background worker for concurrent
    execution |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| Web Workers API | 它提供了类似线程的后台工作程序以进行并发执行 |'
- en: '| Messaging API | It provides mechanism for communication between different
    browser contexts |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 消息API | 它提供了不同浏览器上下文之间通信的机制 |'
- en: '| Web Storage API | It provides a key-value pair persistence mechanism |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| Web存储API | 它提供了一个键值对持久性机制 |'
- en: '| Indexed Database API | It provides a NoSQL object storage mechanism |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 索引数据库API | 它提供了一个NoSQL对象存储机制 |'
- en: '| Drag and Drop API | It provides a native mechanism for dragging and dropping
    objects |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 拖放API | 它提供了一种原生的拖放对象的机制 |'
- en: '| Selector API | It provides a mechanism to select DOM elements using CSS selectors
    |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 选择器API | 它提供了使用CSS选择器选择DOM元素的机制 |'
- en: Note
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There was another persistence API in HTML5 that was known as WebSQL. The spec
    for this API defined an asynchronous way to store and query data in the client
    using an actual built-in SQL-based database engine. The specification has been
    deprecated, and was replaced in its entirety by the more robust and more accepted
    IndexedDB API.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5中还有另一个持久性API，称为WebSQL。该API的规范定义了一种在客户端使用实际内置的基于SQL的数据库引擎进行存储和查询数据的异步方式。该规范已被弃用，并且完全被更强大、更受欢迎的IndexedDB
    API所取代。
- en: The Web as a platform
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为平台的Web
- en: One of the most exciting things about HTML5 is that it is the main language
    of the World Wide Web. In other words, just about any device connected to the
    Web is able to run any games or applications you write in it. That makes the Web
    a very unique platform.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5最令人兴奋的事情之一是它是全球网络的主要语言。换句话说，几乎任何连接到网络的设备都能运行你在其中编写的任何游戏或应用程序。这使得Web成为一个非常独特的平台。
- en: Doubtlessly, you have heard about or experienced such things as "the console
    war", where different video game console manufactures fight to win a larger percentage
    of the market over their competitors. While some people own more than one video
    game console, the majority of gamers own only one system. So what that means for
    a game developer is that, in order for their games to sell well, or in other words,
    in order for their games to be played and enjoyed by the largest possible amount
    of players, they need to develop the same version of a game for multiple platforms.
    This is an expensive and very time consuming process. Creating one game is already
    expensive and time consuming, let alone duplicating all that work for one or two
    other platforms.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，你已经听说过或经历过“游戏机战争”之类的事情，不同的游戏机制造商争夺更大比例的市场份额。虽然一些人拥有多个游戏机，但大多数玩家只拥有一个系统。因此，对于游戏开发人员来说，为了使他们的游戏销售良好，或者换句话说，为了使他们的游戏被尽可能多的玩家玩和享受，他们需要为多个平台开发相同版本的游戏。这是一个昂贵且非常耗时的过程。创建一个游戏已经很昂贵和耗时了，更不用说为其他一个或两个平台复制所有这些工作了。
- en: Today, with more and more users world wide using the Internet, you don't have
    to go through what console video game developers do. As long as your game runs
    properly in a standard, modern web browser, it will run the same in just about
    any other browser across the world. In other words, your same code base can be
    enjoyed by over a billion people because they all run browsers that conform to
    HTML5\. This makes the Web the largest, and greatest platform of all time. And
    the best part about it—it's totally free to develop for it. You don't need to
    have a special license or pay royalties to anyone in order to develop games or
    other applications for the Web.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，随着全球范围内越来越多的用户使用互联网，你不必像游戏机开发人员那样经历。只要你的游戏在标准的现代Web浏览器中正常运行，它在世界上几乎任何其他浏览器中都会运行相同。换句话说，因为它们都运行符合HTML5的浏览器，所以超过十亿人可以享受你的相同代码库。这使得Web成为有史以来最大、最伟大的平台。最棒的是，完全免费开发。你不需要特殊许可证或向任何人支付版税，就可以为Web开发游戏或其他应用程序。
- en: The Open Web
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放网络
- en: As we mentioned earlier in the chapter, there are many buzz words in circulation
    today, whose meaning is unclear at best. Depending on who is telling you about
    the future of the human race, the specific definition of the term Open Web may
    vary.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面提到的，今天流传着许多术语，其含义充其量是不清楚的。根据谁告诉您有关人类未来的情况，术语“开放网络”的具体定义可能会有所不同。
- en: Most commonly, the term *Open Web* refers not to a collection of technologies,
    but rather to a philosophy, if you will. The word open is meant in the sense that
    the Web is not closed up to a select few, or restricted by someone, or to a certain
    purpose. The World Wide Web is designed to be a place where all are welcome to
    come, create, innovate, consume, and enjoy. There is no centralized governing
    body over the Web. In reality, everybody owns the Web, especially in the sense
    that without the millions of individual servers and files, the Web would not be
    what it is.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的情况下，“开放网络”一词不是指一系列技术，而是指一种哲学，如果您愿意的话。开放一词是指网络不对少数人关闭，也不受某人限制，也不是为了某一特定目的。万维网被设计成一个所有人都欢迎来创造、创新、消费和享受的地方。网络没有中央管理机构。实际上，每个人都拥有网络，尤其是因为没有数百万个个人服务器和文件，网络就不会成为现在的样子。
- en: You may be asking yourself what this all has to do with HTML or HTML5, or what
    is it in for you. Simply put, everything. Really. The reason the Open Web is such
    an exciting thing (and such a success so far) is because for the most part, everybody
    is on equal ground there. While there are dozens of different server-side languages
    and technologies, the part of the application that users interact with is written
    in three basic technologies, namely HTML, CSS, and JavaScript. The reason that
    now is such an exciting time to be a part of the Open Web, and the reason that
    you should consider yourself lucky to be able to be a part of it, is that these
    technologies are ripening and getting more mature.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问自己这一切与HTML或HTML5有什么关系，或者对您有什么好处。简单地说，一切。真的。开放网络如此令人兴奋的原因（迄今为止如此成功）是因为大部分时间，每个人都站在同等的地位上。虽然有数十种不同的服务器端语言和技术，但用户与之交互的应用程序部分是用三种基本技术编写的，即HTML、CSS和JavaScript。现在是成为开放网络一部分的令人兴奋的时刻，您应该觉得自己很幸运能够成为其中一部分的原因是，这些技术正在成熟和变得更加成熟。
- en: HTML5 is built for the Open Web. It has enough power to leverage the distributed
    paradigm of the Web, and allows you, whether you're an independent developer or
    a member of a very large corporation with hundreds of other programmers, to create
    a desktop-like experience right on a browser, instantly reaching hundreds of millions
    of people world wide, all the time.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5是为开放网络而构建的。它具有足够的能力来利用网络的分布式范例，并允许您，无论您是独立开发人员还是一个拥有数百名其他程序员的非常大的公司的成员，都可以在浏览器上创建类似桌面的体验，立即触达全球数亿人口。
- en: HTML5 – a game changer
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5 - 一个改变游戏规则的技术
- en: Back when the World Wide Web was first introduced, its founders had one thing
    in mind—information exchange. Later, HTML was developed, with the goal of describing
    text documents. Again, the main aim was to aid the exchange and distribution of
    text documents.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当万维网首次推出时，其创始人心中只有一件事——信息交换。后来，HTML被开发出来，其目标是描述文本文档。再次强调，主要目的是帮助交换和分发文本文档。
- en: Although HTML5 is fully backwards compatible, and still provides a terrific
    paradigm for information distribution, it is also designed with applications in
    mind. Today the Web is no longer used only for information exchange. People are
    now using the Web as a means to find entertainment—to watch movies, listen to
    the radio, and especially to play complete, full-featured video games.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管HTML5完全向后兼容，并且仍然提供了一个极好的信息分发范例，但它也是为应用程序而设计的。今天，网络不再仅仅用于信息交换。人们现在使用网络作为一种娱乐手段——观看电影，收听广播，尤其是玩完整的、功能齐全的视频游戏。
- en: 'HTML5 is a game changer in at least three ways, namely its wide adoption, its
    powerful capabilities, and the fact that it brings its features right to the browser—no
    plug-ins required. These three ways are explained as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5至少在三个方面是一个改变游戏规则的技术，即它的广泛采用、强大的功能以及它将其功能直接带到浏览器中——无需插件。这三种方式如下解释：
- en: '**Wide adoption**: Not only are there over a billion people using the World
    Wide Web, but just about any device connected to it is able to execute HTML5 code.
    That means your program HTML5 games to be played on desktop computers, laptops,
    smart mobile phones, tablets, and even television sets.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广泛采用：不仅有超过十亿人使用万维网，而且几乎任何连接到网络的设备都能执行HTML5代码。这意味着您可以编写HTML5游戏，让它在台式电脑、笔记本电脑、智能手机、平板电脑，甚至电视上播放。
- en: '**Powerful capabilities**: Before HTML5, many commonly used tasks and features
    had to be programmed every time by developers—the drag-and-drop functionality,
    form validation, custom font faces, and so on. With HTML5, all of those things
    (and much more) are done for you by the web browser. You no longer need tens or
    hundreds of lines of code to create a drag-and-drop effect. The browser makes
    that job trivial for you, the developer.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的功能：在HTML5之前，许多常用的任务和功能都需要开发人员每次编程——拖放功能、表单验证、自定义字体等等。有了HTML5，所有这些事情（以及更多）都由网络浏览器为您完成。您不再需要几十甚至几百行代码来创建拖放效果。浏览器会为您，开发人员，轻松完成这项工作。
- en: '**No plug-ins**: While many of the features that HTML5 bring to the table had
    already bee seen before by means of third-party software, such as Macromedia Flash
    (which was later acquired by Adobe), or Java applets. The challenge with using
    these technologies as part of your web applications was that users had to install
    (and frequently upgrade) plug-ins that extended the browser''s native capabilities.
    No only that, but developers also needed to learn and maintain at least two separate
    code bases, written in different languages. HTML5 solves that problem by cooking
    its own powerful feature set, allowing users to have a similar, and often better
    experience with the software, and best of all, without installing or worrying
    about a single plug-in.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无需插件**：虽然HTML5带来的许多特性在之前已经通过第三方软件（如Macromedia Flash（后来被Adobe收购）或Java小程序）看到过，但使用这些技术作为网页应用的一部分的挑战在于用户必须安装（并经常升级）扩展浏览器本机功能的插件。不仅如此，开发人员还需要学习和维护至少两个不同语言编写的代码库。HTML5通过提供自己强大的特性集来解决了这个问题，允许用户在不安装或担心任何插件的情况下获得类似甚至更好的体验。'
- en: In summary, the Web has gone from being a place to exchange information, to
    a place where users go to find quality entertainment. Responsive to this change,
    HTML5 has been designed to empower you to create the entertainment that users
    are looking for on the Web, in the form of fun video games.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，网络已经从一个交换信息的地方发展成为用户寻找优质娱乐的地方。为了响应这一变化，HTML5被设计为让您能够在Web上创建用户寻找的娱乐，以有趣的视频游戏的形式。
- en: Learning HTML5 through game development
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过游戏开发学习HTML5
- en: In this book we will learn all about HTML5\. We'll learn what each feature is
    meant to do and how you can use them. More than that, however, we want to make
    this teaching process fun, simple, and memorable. Thus, our approach might be
    somewhat different than most other books.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将学习关于HTML5的一切。我们将学习每个特性的用途以及如何使用它们。然而，更重要的是，我们希望使教学过程有趣、简单和值得记忆。因此，我们的方法可能与大多数其他书籍有些不同。
- en: 'If you pay close attention to the way most teachers and authors teach new concepts,
    you will notice the following pattern: first the topic is explained, then, in
    an attempt to solidify the student''s understanding of the material just covered,
    an example is given in order to show how the subject may be applied. The problem
    is that often this example is neither useful nor usable. For example, in computer
    programming books, you will see a common theme describing animals, food, or other
    abstract concepts that do not lend themselves well in real-world application.
    Thus, the student may become frustrated by the lack of real-world applications.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察大多数教师和作者教授新概念的方式，您会注意到以下模式：首先解释主题，然后为了巩固学生对刚刚讲解的材料的理解，给出一个示例以展示主题如何应用。问题在于，这个示例通常既不实用也不可用。例如，在计算机编程书籍中，您会看到一个常见的主题描述动物、食物或其他抽象概念，这些概念在现实世界中并不适用。因此，学生可能会因缺乏真实世界的应用而感到沮丧。
- en: The key to effective learning, then, is a good example or use cases where the
    student may apply the newly acquired information. This way, when the student finds
    himself or herself in a real-world situation when their new skill could indeed
    be applied, they may readily recognize the opportunity and use the knowledge just
    gained. Furthermore, if the learning process is too abstract and theoretical,
    the student tends to get distracted or even bored. If the teaching process is
    involving and fun, on the other hand, the student is more likely to remember the
    concepts, but better yet, he or she is more likely to understand what is being
    taught.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有效学习的关键是一个好的例子或用例，学生可以在其中应用新获得的信息。这样，当学生发现自己处于真实世界的情况下，他们新获得的技能确实可以应用时，他们可以很容易地认识到这个机会并使用刚刚获得的知识。此外，如果学习过程过于抽象和理论化，学生往往会分心甚至感到无聊。另一方面，如果教学过程参与和有趣，学生更有可能记住概念，更重要的是，他们更有可能理解所教授的内容。
- en: Our approach in this book will be slightly different than what you might be
    accustomed to, in that we will focus most of our efforts not in listing as much
    theoretical information as we can about HTML5 and all that it involves, but rather
    in illustrating each topic through a fun game.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中的方法可能与您习惯的有些不同，因为我们将大部分精力集中在通过有趣的游戏来阐述每个主题，而不是尽可能多地列出关于HTML5及其涉及的理论信息。
- en: Why teach HTML5 through game development, you ask? There are many reasons for
    this. For starters, games are fun. Game development, although some of your friends
    might disagree, is also fun and very rewarding. Also, it just so happens that
    most of the features of HTML5 lend themselves so well to game development, that
    teaching HTML5 and not making the application for games is also rude. Finally,
    games are so fun, that learning a new programming technology through game development
    will provide the learner with both a very exciting set of examples to show each
    concept in action, and also a powerful physical product as the outcome of the
    learning process.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要通过游戏开发来教授HTML5呢？有很多原因。首先，游戏很有趣。游戏开发虽然有些朋友可能不同意，但也很有趣和有益的。另外，恰巧HTML5的大多数特性非常适合游戏开发，因此教授HTML5而不开发游戏也有点失礼。最后，游戏非常有趣，通过游戏开发学习新的编程技术将为学习者提供一组非常激动人心的示例，展示每个概念的实际应用，并且作为学习过程的强大实际产品。
- en: Our goal in this book is not, however, to teach you how to develop video games.
    What we're setting out to do is to teach you HTML5 first and foremost. If you
    already know game development, and have some experience in this arena, you will
    not only learn the latest and greatest features of HTML5, but also learn how they
    can be applied directly to designing and programming video games. If you're not
    a very experienced game developer, or haven't done any game development at all
    as a matter of fact, do not fear! You will still learn some techniques of game
    development, since we'll walk you through the concepts involved, but keep in mind
    that the focus of the book is HTML5.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，本书的目标并不是教你如何开发视频游戏。我们的目标是首先教你HTML5。如果您已经了解游戏开发，并在这个领域有一些经验，您不仅将学习HTML5的最新和最伟大的功能，还将学习如何将它们直接应用于设计和编程视频游戏。如果您不是非常有经验的游戏开发人员，或者事实上根本没有进行过任何游戏开发，不要害怕！您仍然会学习一些游戏开发技巧，因为我们将引导您了解涉及的概念，但请记住，本书的重点是HTML5。
- en: The games we will be writing in the book will be fun, complete, and easy to
    extend. We will be building each game in layers, so that adding more capabilities
    or refactoring parts of it will be simple enough. At the end of each chapter you
    will have your own HTML5 game, which because of the Open Web, you will be able
    to share with all your friends with access to the Internet, as well as with hundreds
    of millions of people world wide.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中编写的游戏将是有趣的、完整的，并且易于扩展。我们将为每个游戏构建多个层，以便添加更多功能或重构其部分将变得非常简单。在每章的末尾，您将拥有自己的HTML5游戏，由于开放网络，您将能够与所有有互联网访问权限的朋友以及全球数亿人分享。
- en: Finally, since HTML is nothing more than text markup, and JavaScript is a dynamic,
    interpreted language, we will not be needing expensive or complex tools in order
    to develop our games. If you have a text editor program in your computer, and
    a modern web browser such as Google Chrome, Mozilla Firefox, Opera, Safari, or
    the latest Internet Explorer, then you are good to go. You will also need one
    type or another of a web server, which we'll go into more details about in the
    next chapter.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于HTML只是文本标记，而JavaScript是一种动态的、解释性的语言，我们不需要昂贵或复杂的工具来开发我们的游戏。如果您的计算机上有文本编辑器程序，以及Google
    Chrome、Mozilla Firefox、Opera、Safari或最新的Internet Explorer等现代Web浏览器，那么您就可以开始了。您还需要一种或另一种类型的Web服务器，我们将在下一章中详细介绍。
- en: Thanks to the nature of the Open Web and HTML5, it doesn't matter one bit what
    kind of computer system you have. Whatever HTML5 code you write on your particular
    system will run just the same on somebody else's different computer. Best yet,
    there will be no installations required, which further lowers any barriers that
    could keep your games from being enjoyed by hundreds of millions of people world
    wide.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开放网络和HTML5的性质，您使用什么样的计算机系统都无所谓。您在自己的系统上编写的任何HTML5代码都将在其他人不同的计算机上运行。更好的是，不需要安装，这进一步降低了可能阻止您的游戏被全球数亿人享受的任何障碍。
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we took a look at what HTML is, where it came from, and where
    it's headed. We discussed how the Open Web is a place where anyone with at least
    some knowledge of the technologies that make it work, and a lot of ambition (or
    enough curiosity) can reach an unprecedented audience at a virtually non-existent
    cost.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下HTML是什么，它来自哪里，以及它的发展方向。我们讨论了开放网络是一个任何至少具有一些使其工作的技术知识和大量雄心（或足够的好奇心）的人都可以以几乎不存在的成本达到前所未有的观众的地方。
- en: Although HTML5 is an upgrade of previous versions of HTML, the term also makes
    reference to the upgrade of other technologies that go hand in hand with the markup
    language, such as CSS and JavaScript. All three of these languages have been upgraded
    in response to current needs, and in order to take the Web to the next level.
    Many of the new features added to the languages attempt to shift the hard work
    of implementing commonly used functionality from the developer to the browser.
    What was once done by many developers through arduous, time consuming, and often
    expensive work, can now be done by the browser with minimal effort by the programmer.
    Also, many of the new features and capabilities of HTML5 make the web platform
    a very aggressive opponent to the desktop paradigm. The idea of individual desktop
    computers running in complete isolation from each other, each running program
    from its own central storage system is steadily going away. The replacement is
    a cloud-based paradigm, where the software in question is sent to each user from
    one central server connected to the Web. And since these web applications are
    executed in the users' browser, some of the major parts of the application are
    written in pure HTML5.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管HTML5是对以前版本的HTML的升级，但这个术语也指的是与标记语言配套升级的其他技术，比如CSS和JavaScript。这三种语言都是为了满足当前的需求而进行升级，以便将网络带入下一个层次。许多新功能的添加旨在将常用功能的实现工作从开发人员转移到浏览器上。曾经由许多开发人员通过艰苦、耗时且经常昂贵的工作完成的工作，现在可以由程序员轻松地通过浏览器完成。此外，HTML5的许多新功能和能力使网络平台成为桌面范式的一个非常强大的对手。个别桌面计算机在完全隔离的状态下运行，每个计算机从自己的中央存储系统运行程序的想法正在逐渐消失。取而代之的是基于云的范式，所需的软件从连接到网络的一个中央服务器发送到每个用户。由于这些Web应用程序在用户的浏览器中执行，因此应用程序的一些主要部分是用纯HTML5编写的。
- en: HTML5 is the perfect technology to master right now because it is at the core
    of the Open Web. Thanks to the responsive and evolving nature of HTML5, we can
    only wait to see what the future has in store for us, as browsers continue to
    get more powerful, and the cost of computing continues to decline.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5是现在掌握的完美技术，因为它是开放网络的核心。由于HTML5的响应和不断发展的性质，我们只能等待看看未来对我们有什么安排，因为浏览器继续变得更加强大，计算成本继续下降。
- en: We will explore the exciting world of HTML5, and cover its major concepts and
    building blocks by designing and developing fun and engaging games. We're taking
    this approach not only because games are fun, but also because many of the new
    capabilities in HTML5 lend themselves so well to the complex problems of programming
    video games. Also, by successfully programming full games in pure HTML5 technology,
    we will be able to test and prove the true capacity of HTML5 and the Open Web.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索令人兴奋的HTML5世界，并通过设计和开发有趣而引人入胜的游戏来介绍其主要概念和构建模块。我们采取这种方法不仅因为游戏很有趣，而且因为HTML5中许多新的功能非常适合解决编程视频游戏的复杂问题。此外，通过成功地使用纯HTML5技术编程完整的游戏，我们将能够测试和证明HTML5和开放网络的真正能力。
- en: In the next chapter we will take the first step towards building awesome web-based
    games. First we'll set up a development environment by installing a web server.
    Next we will build an HTML5 web portal from which we can access our games, as
    well as get a bit of practice using the new semantic elements.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将迈出建立令人惊叹的基于网络的游戏的第一步。首先，我们将通过安装网络服务器来建立开发环境。接下来，我们将建立一个HTML5网络门户，通过它我们可以访问我们的游戏，并且可以练习使用新的语义元素。
