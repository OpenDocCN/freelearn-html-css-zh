- en: Angular - A Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular - 入门
- en: When Sir Timothy Berners-Lee invented the Internet, he never anticipated that
    the Internet would be used to publish selfies, share cat videos, or bomb web page
    with ads. His main intention (guessing) was to create a web of documents so a
    user on the Internet can access these hypertexts from anywhere and make use of
    it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当Timothy Berners-Lee爵士发明互联网时，他从未想到互联网会被用来发布自拍照、分享猫视频或用广告轰炸网页。他的主要意图（猜测）是创建一个文档网络，以便互联网上的用户可以从任何地方访问这些超文本并加以利用。
- en: 'An interesting article published by Craig Buckler at Sitepoint titled, The
    Web Runs Out of Disk Space ([http://www.sitepoint.com/web-runs-disk-space/](http://www.sitepoint.com/web-runs-disk-space/)),
    shows how the content on the Internet is spread out:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Sitepoint的Craig Buckler发表的一篇有趣的文章，标题为《网络磁盘空间不足》（[http://www.sitepoint.com/web-runs-disk-space/](http://www.sitepoint.com/web-runs-disk-space/)），展示了互联网上的内容是如何分布的：
- en: 28.65% pictures of cats
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 28.65％的猫图片
- en: 16.80% vain selfies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16.80％的自恋自拍
- en: 14.82% pointless social media chatter
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 14.82％毫无意义的社交媒体闲聊
- en: 12.73% inane vlogger videos
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 12.73％愚蠢的视频博主视频
- en: 9.76% advertising/clickbait pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9.76％的广告/点击诱导页面
- en: 8.70% scams and cons
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8.70％的欺诈和骗局
- en: 4.79% articles soliciting spurious statistics
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4.79％的虚假统计文章
- en: 3.79% new JavaScript tools/libraries
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3.79％的新JavaScript工具/库
- en: 0.76% documents for the betterment of human knowledge
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0.76％的文件，以改善人类知识
- en: You can see, since the invention of the Internet to the present day, how we
    have evolved. *Better evolution needs better frameworks* to build and manage such
    apps that need to be scalable, maintainable, and testable. This is where Angular
    stepped in back in 2010 to fill the gap and it has been evolving quite well since
    then.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，从互联网的发明到现在，我们是如何演变的。*更好的演变需要更好的框架*来构建和管理这样的应用程序，这些应用程序需要可扩展、可维护和可测试。这就是2010年Angular填补空白的地方，自那时以来它一直在不断发展。
- en: We are going to start our journey by understanding the new changes to Angular,
    the importance of TypeScript, and see how Ionic 2 has adapted itself with Angular
    to help build performance-efficient and modern Mobile Hybrid apps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从理解Angular的新变化、TypeScript的重要性开始我们的旅程，并看看Ionic 2如何与Angular一起适应，以帮助构建性能高效和现代的移动混合应用程序。
- en: 'In this chapter, we will take a quick peek at new topics added as part of Angular
    with the help of an example. The main changes that have taken place in Angular
    (2) are primarily on the lines of performance and componentization, apart from
    the language update. We will be going through the following topics in this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过一个示例快速了解Angular的新主题。Angular（2）中发生的主要变化主要是性能和组件化，除了语言更新。在本章中，我们将介绍以下主题：
- en: What is new in Angular?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular有什么新东西？
- en: TypeScript and Angular
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript和Angular
- en: Building a Giphy app
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Giphy应用程序
- en: What is new in Angular?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular有什么新东西？
- en: Angular 2 is one of the most anticipated and dramatic version upgrades I have
    seen for any software. Angular 1 was a boon to web/mobile web/hybrid app developers,
    where managing a lot of things was made easy. Not only did Angular 1 help restructure
    client-side app development, but it also provided a platform to build applications;
    not websites, but applications. Though the first release suffered performance
    issues when dealing with large datasets, the Angular team bounced back quite well
    with the later releases of Angular 1, that is, Angular 1.4.x and above, and fixed
    these performance issues by releasing a more stable version in the form of Angular
    (2).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2是我见过的软件最受期待和最戏剧性的版本升级之一。Angular 1对于Web/移动Web/混合应用程序开发人员来说是一个福音，它使许多事情变得容易。Angular
    1不仅帮助重构客户端应用程序开发，而且提供了构建应用程序的平台；不是网站，而是应用程序。尽管第一个版本在处理大型数据集时存在性能问题，但Angular团队在随后的Angular
    1.4.x及以上版本中取得了相当大的进展，并通过发布更稳定的版本（即Angular 2）解决了这些性能问题。
- en: 'Some of the new changes that have accompanied with Angular (2) are:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些伴随Angular（2）的新变化是：
- en: Speed and performance improvements.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速度和性能改进。
- en: Component based (not the typical MV*).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于组件（而不是典型的MV*）。
- en: Angular CLI.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI。
- en: Simple and expressive syntax.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单而富有表现力的语法。
- en: Progressive Web Apps (PWA).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐进式Web应用程序（PWA）。
- en: Cross-platform app development, which includes desktops, mobile, and web.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台应用程序开发，包括桌面、移动和Web。
- en: Cordova-based Hybrid app development.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Cordova的混合应用程序开发。
- en: Angular Universal provider for the server side for fast initial views.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于快速初始视图的Angular Universal提供程序。
- en: Upgrades to better animation, internationalization, and accessibility.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级以获得更好的动画、国际化和可访问性。
- en: Angular can be written on ES5, ES6, TypeScript, and Dart are based on the user's
    comfort with the JavaScript flavor.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular可以用ES5、ES6、TypeScript和Dart编写，根据用户对JavaScript口味的喜好。
- en: With these new updates, developing apps has never been easier, be it on the
    desktop, mobile, or Mobile Hybrid environments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些新的更新，无论是在桌面、移动还是移动混合环境上，开发应用程序都变得更加容易。
- en: 'Note: The latest version of Angular is going to be called just Angular, not
    Angular 2, or AngularJS 4, or NG4\. So throughout this book, I will refer to Angular
    version 2 as Angular.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：最新版本的Angular将被称为Angular，而不是Angular 2，或AngularJS 4，或NG4。因此，在本书中，我将把Angular版本2称为Angular。
- en: The current latest version of Angular is 4\. Do checkout [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to know a bit more about Angular 4 and how it improves Ionic.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前最新版本的Angular是4。请查看[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic
    3*，了解更多关于Angular 4及其如何改进Ionic的信息。
- en: 'You can find more information about Angular here: [https://angular.io](https://angular.io).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到有关Angular的更多信息：[https://angular.io](https://angular.io)。
- en: 'Note: If you are new to Angular, you can refer to these books:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您是Angular的新手，可以参考这些书籍：
- en: '[https://www.packtpub.com/web-development/learning-angular-2](https://www.packtpub.com/web-development/learning-angular-2)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/learning-angular-2](https://www.packtpub.com/web-development/learning-angular-2)'
- en: '[https://www.packtpub.com/web-development/mastering-angular-2-components](https://www.packtpub.com/web-development/mastering-angular-2-components)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/mastering-angular-2-components](https://www.packtpub.com/web-development/mastering-angular-2-components)'
- en: '[https://www.packtpub.com/web-development/mastering-angular-2](https://www.packtpub.com/web-development/mastering-angular-2)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/mastering-angular-2](https://www.packtpub.com/web-development/mastering-angular-2)'
- en: '[https://www.packtpub.com/web-development/angular-2-example](https://www.packtpub.com/web-development/angular-2-example)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/angular-2-example](https://www.packtpub.com/web-development/angular-2-example)'
- en: 'Or these videos:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这些视频：
- en: '[https://www.packtpub.com/web-development/angular-2-projects-video](https://www.packtpub.com/web-development/angular-2-projects-video)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/angular-2-projects-video](https://www.packtpub.com/web-development/angular-2-projects-video)'
- en: '[https://www.packtpub.com/web-development/web-development-angular-2-and-bootstrap-video](https://www.packtpub.com/web-development/web-development-angular-2-and-bootstrap-video)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/web-development-angular-2-and-bootstrap-video](https://www.packtpub.com/web-development/web-development-angular-2-and-bootstrap-video)'
- en: '[https://www.packtpub.com/web-development/angular-2-web-development-TypeScript-video](https://www.packtpub.com/web-development/angular-2-web-development-TypeScript-video)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/angular-2-web-development-TypeScript-video](https://www.packtpub.com/web-development/angular-2-web-development-TypeScript-video)'
- en: TypeScript primer
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript入门
- en: Angular uses TypeScript extensively for app development. Hence as part of the
    Angular primer, we will refresh the necessary TypeScript concepts as well.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Angular在应用程序开发中广泛使用TypeScript。因此，作为Angular入门的一部分，我们也将复习必要的TypeScript概念。
- en: If you are new to TypeScript, TypeScript is a typed superset of JavaScript that
    compiles to plain JavaScript. TypeScript provides static typing, classes, and
    interfaces and supports almost all features of ES6 and ES7 before they land in
    the browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是TypeScript的新手，TypeScript是JavaScript的一种带类型的超集，可以编译成普通的JavaScript。TypeScript提供静态类型、类和接口，并支持几乎所有ES6和ES7的特性，这些特性在浏览器中还没有实现。
- en: A TypeScript file is saved with a `.ts` extension.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript文件保存为`.ts`扩展名。
- en: The main advantage of adding typings to an untyped language (JavaScript) is
    to make IDEs understand what we are trying to do and better assist us while coding;
    in other words, Intellisense.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为无类型语言（JavaScript）添加类型的主要优势是让IDE理解我们尝试做的事情，并在编码时更好地帮助我们；换句话说，智能感知。
- en: Having said that, here is what we can do with TypeScript.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，这就是我们可以用TypeScript做的事情。
- en: Variable typing
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量类型
- en: 'In vanilla JavaScript, we would do something like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯JavaScript中，我们会做类似这样的事情：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But in TypeScript, we cannot do as shown in the preceding code snippet, the
    TypeScript compiler would complain as we are modifying the variable type at runtime.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在TypeScript中，我们不能像前面的代码片段中所示那样做，TypeScript编译器会抱怨，因为我们在运行时修改了变量类型。
- en: Defining types
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义类型
- en: 'When we declare variables, we can optionally declare the types of variables.
    For instance:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们声明变量时，可以选择声明变量的类型。例如：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This increases the predictability of what we are trying to do.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这增加了我们尝试做的事情的可预测性。
- en: Classes
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: I am a guy who believes that JavaScript is an object-based programming language
    and not an object-oriented programming language, and I know quite a lot of people
    who disagree with me.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个相信JavaScript是基于对象的编程语言而不是面向对象编程语言的人，我知道有很多人不同意我的观点。
- en: 'In vanilla JavaScript, we have functions, which act like a class and exhibit
    prototype-based inheritance. In TypeScript/ES6, we have the class construct:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯JavaScript中，我们有函数，它们就像类，并展示基于原型的继承。在TypeScript/ES6中，我们有类构造：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, we have defined a class named Person and we are defining
    the class constructor, which accepts the name on initialization of the class.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们定义了一个名为Person的类，并定义了类构造函数，在类初始化时接受名称。
- en: To initialize the class, we will invoke the class with a new keyword and pass
    in the name to the constructor. The variable that stores the instance of the class
    -- the object, `arvind` in the preceding example, can also be typed to the class.
    This helps in better understanding the possibilities of the `arvind` object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化类，我们将使用new关键字调用类，并将名称传递给构造函数。存储类实例的变量——在上面的例子中是对象`arvind`，也可以被赋予类的类型。这有助于更好地理解`arvind`对象的可能性。
- en: 'Note: The classes in ES6 still follow Prototypal-based Inheritance and not
    the classical Inheritance model.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：ES6中的类仍然遵循基于原型的继承，而不是经典的继承模型。
- en: Interface
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口
- en: As we start building complex apps, there will be a common need for a certain
    type of structure to be repeated throughout the app, which follows certain rules.
    This is where an interface comes into the picture. Interfaces provide *structural
    subtyping* or *duck* *typing* to check the type and *shape* of entities.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始构建复杂的应用程序时，通常会需要一种特定类型的结构在整个应用程序中重复出现，这遵循某些规则。这就是接口的作用。接口提供*结构子类型*或*鸭子类型*来检查实体的类型和*形状*。
- en: 'For instance, if we are working with an app that deals with cars, every car
    will have a certain common structure that needs to be adhered to when used within
    the app. Hence we create an interface named ICar. Any class working with cars
    will implement this interface as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们正在开发一个涉及汽车的应用程序，每辆汽车都有一定的共同结构，在应用程序中使用时需要遵守这个结构。因此，我们创建一个名为ICar的接口。任何与汽车相关的类都将按照以下方式实现这个接口：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Modules and imports
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块和导入
- en: 'In vanilla JavaScript, you must have observed code blocks like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯JavaScript中，你可能会观察到这样的代码块：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Modules are achieved in ES6/TS using the imports and exports syntax:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6/TS中，使用导入和导出语法实现模块：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These are the bare essentials that we would need to get started with TypeScript.
    We will look at more such concepts where needed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们开始使用TypeScript所需的基本要素。我们将在需要时查看更多类似的概念。
- en: With this we wrap up the key concepts needed to get started with TypeScript.
    Let us get started with Angular.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些概念，我们结束了开始使用TypeScript所需的关键概念。让我们开始学习Angular。
- en: 'For more information on TypeScript, check out: [https://www.TypeScriptlang.org/docs/tutorial.html](https://www.typescriptlang.org/docs/tutorial.html).
    Also check out the TypeScript introduction video: [https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript](https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有关TypeScript的更多信息，请查看：[https://www.typescriptlang.org/docs/tutorial.html](https://www.typescriptlang.org/docs/tutorial.html)。还可以查看TypeScript介绍视频：[https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript](https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript)。
- en: Angular
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular
- en: Angular (2) has added a bunch of new features and updated existing features
    and removed a few over Angular 1.x. In this section, we will go through some of
    the essential features of Angular.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Angular（2）添加了许多新功能，并更新了现有功能，并删除了一些Angular 1.x中的功能。在本节中，我们将介绍一些Angular的基本功能。
- en: Components
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: 'Angular components are inspired by the Web Components specification. At a very
    high level, Web Components have four pieces:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Angular组件受到Web组件规范的启发。在非常高的层面上，Web组件有四个部分：
- en: '**Custom elements**: A user can create their own HTML element.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义元素**：用户可以创建自己的HTML元素。'
- en: '**HTML imports**: Import one HTML document into another.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML导入**：将一个HTML文档导入到另一个HTML文档中。'
- en: '**Templates**: HTML definitions of the custom elements.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：自定义元素的HTML定义。'
- en: '**Shadow DOM**: A specification to write encapsulated logic of custom elements.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shadow DOM**：编写自定义元素封装逻辑的规范。'
- en: The preceding four specifications explain how a frontend developer can develop
    their own standalone, isolated, and reusable components, similar to a HTML select
    box (`<select></select>`), or a text area (`<textarea></textarea>`), or an input
    (`<input />`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面四个规范解释了前端开发人员如何开发自己的独立、隔离和可重用组件，类似于HTML选择框（`<select></select>`）、文本区域（`<textarea></textarea>`）或输入框（`<input
    />`）。
- en: 'You can read more about the Web Component specification here: [https://www.w3.org/standards/techs/components#w3c_all](https://www.w3.org/standards/techs/components#w3c_all).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处阅读有关Web组件规范的更多信息：[https://www.w3.org/standards/techs/components#w3c_all](https://www.w3.org/standards/techs/components#w3c_all)。
- en: 'If you would like to dig deeper into the Web Component, check out: [http://webcomponents.org/](http://webcomponents.org/).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想深入了解Web组件，请查看：[http://webcomponents.org/](http://webcomponents.org/)。
- en: As mentioned, Angular is (loosely) built on Web Components, where the preceding
    four specifications are implemented in an Angular way.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Angular（宽松地）是构建在Web组件上的，前面四个规范是以Angular方式实现的。
- en: 'In simple terms, our entire app is a tree of components. For example, if we
    look at the world''s most viewed page, [https://www.google.com](https://www.google.com),
    it would look something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我们整个应用程序是一个组件树。例如，如果我们看世界上最受欢迎的页面[https://www.google.com](https://www.google.com)，它可能看起来像这样：
- en: '![](img/00005.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: And if we had to build this page in Angular, we would first split the page into
    components.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们必须在Angular中构建此页面，我们首先会将页面拆分为组件。
- en: 'A visual representation of all the components that go into the preceding page
    would look like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面页面中的所有组件的可视表示如下：
- en: '![](img/00006.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'Note: Each black box is a (custom) component.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：每个黑色框都是（自定义）组件。
- en: As we can see from the preceding figure, the entire page is a tree of custom
    components.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图中可以看出，整个页面是一棵自定义组件树。
- en: 'A (custom) component would typically consist of three pieces:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: （自定义）组件通常由三部分组成：
- en: '`component.ts`: This represents the component logic'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component.ts`：表示组件逻辑'
- en: '`component.html`: This represents the component view (template)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component.html`：表示组件视图（模板）'
- en: '`component.css`: This represents the component specific styles'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component.css`：表示组件特定的样式'
- en: To build a custom component, we need to use a `Component` decorator on top of
    a class. In simple terms, a decorator lets us configure a class with specific
    metadata on them. This metadata will then be used by Angular to understand the
    behavior of that class. Decorators start with an `@`, followed by the name of
    the decorator.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建自定义组件，我们需要在类的顶部使用`Component`装饰器。简单来说，装饰器让我们可以在类上配置特定的元数据。然后Angular将使用这些元数据来理解该类的行为。装饰器以`@`开头，后面跟着装饰器的名称。
- en: 'The component decorator tells Angular that the class being processed needs
    to exhibit the behavior of an Angular component. A simple decorator would look
    as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 组件装饰器告诉Angular正在处理的类需要表现出Angular组件的行为。一个简单的装饰器如下所示：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Some of the properties that go into a component decorator are:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 组件装饰器中包含的一些属性有：
- en: '`selector`: CSS selector that identifies this component in a template'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selector`：在模板中标识此组件的CSS选择器'
- en: '`templateUrl`: URL to an external file containing a template for the view'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templateUrl`：包含视图模板的外部文件的URL'
- en: '`styleUrls`: List of URLs to style sheets to be applied to this component''s
    view'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleUrls`：要应用于此组件视图的样式表的URL列表'
- en: '`providers` : List of providers available to this component and its children'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providers`：此组件及其子组件可用的提供者列表'
- en: 'To know more about the Component decorator, refer to the following link: [https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Component装饰器的更多信息，请参阅以下链接：[https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html)
- en: Zones
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域
- en: Zones are one of the new concepts that have been introduced in Angular. The
    concept of Zones was migrated from Dart to JavaScript.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 区域是Angular中引入的新概念之一。区域的概念是从Dart迁移到JavaScript的。
- en: The main reason why a lot of developers were attracted towards Angular initially
    was by its *Auto-magic Data Binding* among other things. This was achieved using
    scopes in Angular 1.x. In Angular 2, we are using Zone.js ([https://github.com/angular/zone.js](https://github.com/angular/zone.js))
    to achieve the same.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员最初被Angular吸引的主要原因是其*自动数据绑定*，以及其他一些原因。这是通过在Angular 1.x中使用作用域来实现的。在Angular
    2中，我们使用Zone.js（[https://github.com/angular/zone.js](https://github.com/angular/zone.js)）来实现相同的功能。
- en: Whenever there is a change in the data, Angular updates the appropriate *stakeholders* (variables,
    interfaces, providers, and so on) with new data. Angular can track all synchronous
    activities quite easily. But for change detection in asynchronous code, such as
    event handling, AJAX calls, or Timers, Angular 2 uses Zone.js.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每当数据发生变化时，Angular会使用新数据更新适当的*利益相关者*（变量、接口、提供程序等）。Angular可以轻松跟踪所有同步活动。但是对于异步代码的变化检测，例如事件处理、AJAX调用或计时器，Angular
    2使用Zone.js。
- en: 'To know more about zones, how they work, and change detection in Angular, check
    out Zones in Angular: [http://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html](http://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html)
    and Angular change detection explained: [http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html](http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关区域的更多信息，以及它们的工作方式和在Angular中的变化检测，请查看Angular中的区域：[http://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html](http://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html)和解释Angular变化检测：[http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html](http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html)。
- en: Templates
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: Templates are used to bind the component logic to the HTML. Templates are also
    used as an interface between the user interaction of the user and app logic.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 模板用于将组件逻辑绑定到HTML。模板还用作用户交互和应用逻辑之间的接口。
- en: Templates have changed quite a bit when compared to version 1 of Angular. But
    there are a few things that still remain the same. For instance, the way we take
    a value from a component and display it in the user interface remains the same
    with the double curly brace notation (interpolation syntax).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与Angular 1版本相比，模板已经发生了相当大的变化。但是仍然有一些事情保持不变。例如，我们从组件中获取值并在用户界面中显示它的方式仍然相同，使用双大括号表示法（插值语法）。
- en: 'The following is a sample `app.component.ts`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`app.component.ts`的示例：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `app.component.html` would look something like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component.html`可能如下所示：'
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Templates can also be made inline by passing in the template metadata to the
    decorator instead of `templateUrl`. This would look something like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 模板也可以通过将模板元数据传递给装饰器而不是`templateUrl`来内联。这可能如下所示：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `template` metadata takes higher priority over `templateUrl`. For example,
    if we have defined both a `template` and `templateUrl` metadata, `template` is
    picked up and rendered.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`template`元数据优先级高于`templateUrl`。例如，如果我们同时定义了`template`和`templateUrl`元数据，将选择并呈现`template`。'
- en: 'We can also write multiline templates using backtick(`) instead of quotes,
    in both ES6 as well as TypeScript. For more information, refer to Template Literals:
    [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用反引号（`）而不是引号在ES6和TypeScript中编写多行模板。有关更多信息，请参阅模板文字：[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)
- en: In Angular 1.x, we have core/custom directives. But in Angular (2), we have
    various notations, using which we achieve the same behavior of a directive from
    Angular 1.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 1.x中，我们有核心/自定义指令。但是在Angular（2）中，我们有各种表示法，使用这些表示法可以实现与Angular 1中指令相同的行为。
- en: 'For instance, if we want to add a custom class to an element based on the truthiness
    of an expression, it would look this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想根据表达式的真值向元素添加自定义类，它会是这样的：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding is a replacement for the famous `ng-class` Angular 1.x directive.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是著名的`ng-class` Angular 1.x指令的替代品。
- en: 'To handle events, we use the `( )` notation, as in:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理事件，我们使用`( )`表示法，如下所示：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: And this `pullhair()` is defined inside the component class.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 而且`pullhair()`是在组件类内部定义的。
- en: 'To keep the data bindings up to date, we use the `[( )]` notation, as in:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持数据绑定最新，我们使用`[( )]`表示法，如下所示：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This keeps the name property in the component class in sync with the textbox.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得组件类中的名称属性与文本框同步。
- en: 'An example of `*ngFor`, which is a replacement for `ng-repeat`, is shown here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了`*ngFor`的示例，它是`ng-repeat`的替代品：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that `let` in front of `todo` indicates that it is a local variable in
    that zone.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`todo`前面的`let`表示它是该区域中的局部变量。
- en: These are some of the basic concepts that we need to get started with our hands-on
    example. I will talk about other Angular (2) concepts as and when they appear
    in our app.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们需要开始实际示例的基本概念。当这些概念在我们的应用中出现时，我会谈论其他Angular（2）的概念。
- en: Giphy app
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Giphy应用
- en: Using the concepts we have learned so far, we are going to build a simple app
    using Angular and an Open JSON API provider named Giphy.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们迄今为止学到的概念，我们将使用Angular和一个名为Giphy的开放JSON API提供程序构建一个简单的应用。
- en: Giphy ([http://giphy.com](http://giphy.com)) is a simple Gif search engine.
    The guys at Giphy exposed an open REST API that we can consume and do a bunch
    of things with the data.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Giphy（[http://giphy.com](http://giphy.com)）是一个简单的Gif搜索引擎。Giphy的人们公开了一个我们可以使用和处理数据的开放REST
    API。
- en: 'The app we are going to build is going to talk to the Giphy JSON API and return
    the results. Using Angular, we are going to build interfaces for three features
    in the app:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要构建的应用将与Giphy JSON API通信并返回结果。使用Angular，我们将为应用中的三个功能构建接口：
- en: Show a random Gif
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示一个随机Gif
- en: Show trending Gifs
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示趋势Gifs
- en: Search a Gif
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索Gif
- en: We will be using Angular CLI ([https://cli.angular.io/](https://cli.angular.io/))
    and Twitter Bootstrap ([http://getbootstrap.com/](http://getbootstrap.com/)) with
    the Cosmos theme ([https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/)).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Angular CLI（[https://cli.angular.io/](https://cli.angular.io/)）和Twitter
    Bootstrap（[http://getbootstrap.com/](http://getbootstrap.com/)）与Cosmos主题（[https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/)）。
- en: Before we start building the app, let's first understand the app structure.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用之前，让我们首先了解应用的结构。
- en: Architecture
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: 'The first thing we are going to look at is the architecture of the app. On
    the client side, we will have a router, from which all things start flowing. The
    router will have four routes:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的第一件事是应用程序的架构。在客户端，我们将有一个路由器，所有事情都将从那里开始流动。路由器将有四个路由：
- en: Home route
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页路由
- en: Browse route
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览路由
- en: Search route
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索路由
- en: Page Not Found route
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面未找到路由
- en: We will have one service, with three methods that will interact with the Giphy
    REST API.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有一个服务，其中有三种方法将与Giphy REST API交互。
- en: 'Apart from the previously mentioned items, we will have the following components:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的项目，我们还将有以下组件：
- en: '**Nav Component**: App Navbar'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航组件**：应用程序导航栏'
- en: '**Home Component**: Home Page which shows a random gif'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页组件**：主页，显示随机gif'
- en: '**Trending Component**: Show trending gifs'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**趋势组件**：显示趋势gif'
- en: '**Search Component**: Search a gif'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索组件**：搜索gif'
- en: '**Giphy Component**: Template for a gif'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Giphy组件**：gif模板'
- en: '**Page not found Component**: To show a page that tells the user that nothing
    is found'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面未找到组件**：显示告诉用户未找到任何内容的页面'
- en: 'The component tree for this would look as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的组件树如下所示：
- en: '![](img/00007.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: API
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: 'The Giphy API is quite easy to understand and use. You can find the official
    API documents here: [https://github.com/Giphy/GiphyAPI](https://github.com/Giphy/GiphyAPI).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Giphy API相当容易理解和使用。您可以在这里找到官方API文档：[https://github.com/Giphy/GiphyAPI](https://github.com/Giphy/GiphyAPI)。
- en: 'The APIs that we are going to consume are:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的API是：
- en: 'Random Gif: [http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机Gif：[http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC)
- en: 'Trending Gifs: [http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋势Gifs：[http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC)
- en: 'Search Gifs: [http://api.giphy.com/v1/stickers/search?q=cat&api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/stickers/search?q=cat&api_key=dc6zaTOxFJmzC)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索Gifs：[http://api.giphy.com/v1/stickers/search?q=cat&api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/stickers/search?q=cat&api_key=dc6zaTOxFJmzC)
- en: You can navigate to the preceding links to see the sample data.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以转到上述链接以查看示例数据。
- en: At the time of writing, Giphy exposed `dc6zaTOxFJmzC` as the API key to use.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Giphy公开了`dc6zaTOxFJmzC`作为要使用的API密钥。
- en: Angular CLI
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular CLI
- en: 'To develop our Giphy app, we are going to use Angular CLI. If you are new to
    the CLI and its features, I recommend checking out this video: Simple Angular
    2 App With Angular CLI: [https://www.youtube.com/watch?v=QMQbAoTLJX8](https://www.youtube.com/watch?v=QMQbAoTLJX8).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发我们的Giphy应用程序，我们将使用Angular CLI。如果您对CLI及其功能不熟悉，我建议您观看此视频：使用Angular CLI创建简单的Angular
    2应用程序：[https://www.youtube.com/watch?v=QMQbAoTLJX8](https://www.youtube.com/watch?v=QMQbAoTLJX8)。
- en: This example is written with Angular CLI version 1.0.0-beta.18.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例是使用Angular CLI版本1.0.0-beta.18编写的。
- en: Installing software
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装软件
- en: For us to successfully develop the Angular-Giphy App, we need to have Node.js
    installed ([https://nodejs.org/en](https://nodejs.org/en)). We will be using NPM
    ([https://www.npmjs.com](https://www.npmjs.com)) to download the required modules
    via the Angular CLI.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功开发Angular-Giphy应用程序，我们需要安装Node.js ([https://nodejs.org/en](https://nodejs.org/en))。我们将使用NPM
    ([https://www.npmjs.com](https://www.npmjs.com)) 通过Angular CLI下载所需的模块。
- en: 'Once Node.js is installed, open a new command prompt/terminal and run the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Node.js后，打开新的命令提示符/终端，然后运行以下命令：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will go ahead and install the Angular CLI generator. That is all we would
    need to start developing our app.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这将继续安装Angular CLI生成器。这是我们开始开发应用程序所需的全部内容。
- en: 'Note: I have used angular-cli version 1.0.0 to build this app.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我使用了angular-cli版本1.0.0构建此应用程序。
- en: Text editors
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Regarding text editors, you can use any editor to work with Angular as well
    as Ionic. You can also try Sublime text ([http://www.sublimetext.com/3](http://www.sublimetext.com/3))
    or Atom editor ([https://atom.io/](https://atom.io/)) or Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    for working with the code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文本编辑器，您可以使用任何编辑器来处理Angular和Ionic。您还可以尝试Sublime text ([http://www.sublimetext.com/3](http://www.sublimetext.com/3))
    或Atom编辑器 ([https://atom.io/](https://atom.io/)) 或Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    来处理代码。
- en: 'If you are using Sublime text, you can take a look at: [https://github.com/Microsoft/TypeScript-Sublime-Plugin](https://github.com/Microsoft/TypeScript-Sublime-Plugin)
    to add TypeScript intelligence to your editor. And for Atom, refer to the following
    link: [https://atom.io/packages/atom-TypeScript](https://atom.io/packages/atom-typescript).'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Sublime text，可以查看：[https://github.com/Microsoft/TypeScript-Sublime-Plugin](https://github.com/Microsoft/TypeScript-Sublime-Plugin)
    以在编辑器中添加TypeScript智能。对于Atom，请参阅以下链接：[https://atom.io/packages/atom-TypeScript](https://atom.io/packages/atom-typescript)。
- en: Scaffolding an Angular 2 app
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建一个Angular 2应用程序
- en: 'The first thing we are going to do is scaffold an Angular app using the Angular
    CLI. Create a new folder named `chapter1` and open a command prompt/terminal in
    that folder and run the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要做的是使用Angular CLI搭建一个Angular应用程序。创建一个名为`chapter1`的新文件夹，并在该文件夹中打开命令提示符/终端，然后运行以下命令：
- en: '[PRE15]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now Angular CLI generator will go ahead and create all the files and folders
    necessary to work with our Angular app.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Angular CLI生成器将继续创建所有必要的文件和文件夹，以便与我们的Angular应用程序一起使用。
- en: 'As mentioned earlier, you can check out Simple Angular 2 app with Angular CLI:
    [https://www.youtube.com/watch?v=QMQbAoTLJX8](https://www.youtube.com/watch?v=QMQbAoTLJX8),
    as well to go through Angular CLI docs: [https://cli.angular.io/reference.pdf](https://cli.angular.io/reference.pdf)
    to know more about it.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可以查看使用Angular CLI创建简单的Angular 2应用程序：[https://www.youtube.com/watch?v=QMQbAoTLJX8](https://www.youtube.com/watch?v=QMQbAoTLJX8)，也可以查看Angular
    CLI文档：[https://cli.angular.io/reference.pdf](https://cli.angular.io/reference.pdf)
    了解更多信息。
- en: 'The scaffolded project structure would look as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架项目结构如下所示：
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will be spending most of our time inside the `src` folder. Once the project
    is completely scaffolded, `cd` into the `giphy-app` folder and run the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将大部分时间花在`src`文件夹内。一旦项目完全搭建好，进入`giphy-app`文件夹并运行以下命令：
- en: '[PRE17]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will start the built-in server. Once the build is completed, we can navigate
    to [http://localhost:4200](http://localhost:4200) to view the page. The page should
    look something like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动内置服务器。构建完成后，我们可以导航到[http://localhost:4200](http://localhost:4200)查看页面。页面应该看起来像这样：
- en: '![](img/00008.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: Building the Giphy app
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Giphy应用程序
- en: Now that we have all the pieces to get started, we will start off by adding
    Twitter Bootstrap CSS to the app.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始了，我们将首先向应用程序添加Twitter Bootstrap CSS。
- en: 'For this example, we will be using a Bootstrap theme from [https://bootswatch.com/](https://bootswatch.com/)
    named Cosmos. We can find the Cosmos CSS theme on the theme page: [https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/),
    by clicking on the Cosmos dropdown and selecting the `bootstrap.min.css` option.
    Or alternatively, we can find it here: [https://bootswatch.com/cosmo/bootstrap.min.css](https://bootswatch.com/cosmo/bootstrap.min.css).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用来自[https://bootswatch.com/](https://bootswatch.com/)的Bootstrap主题Cosmos。我们可以在主题页面上找到Cosmos
    CSS主题：[https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/)，点击Cosmos下拉菜单，选择`bootstrap.min.css`选项。或者，我们也可以在这里找到它：[https://bootswatch.com/cosmo/bootstrap.min.css](https://bootswatch.com/cosmo/bootstrap.min.css)。
- en: If you want, you can use any other theme or the vanilla Bootstrap CSS as well.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你也可以使用任何其他主题或原始的Bootstrap CSS。
- en: 'To add the theme file, navigate to `giphy-app/src/styles.css` and add the following
    line inside it:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加主题文件，导航到`giphy-app/src/styles.css`并在其中添加以下行：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That is it, now our app is powered with Twitter Bootstrap CSS.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，现在我们的应用程序已经使用了Twitter Bootstrap CSS。
- en: 'Next, we will start working on our app''s main page. For that we will be leveraging
    an example template from Twitter Bootstrap named the Starter Template. The template
    can be found here: [http://getbootstrap.com/examples/starter-template/](http://getbootstrap.com/examples/starter-template/).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始处理应用程序的主页面。为此，我们将利用Twitter Bootstrap的一个示例模板，名为Starter Template。模板可以在这里找到：[http://getbootstrap.com/examples/starter-template/](http://getbootstrap.com/examples/starter-template/)。
- en: The Starter template consists of a navigation bar and a body section where the
    content gets displayed.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 起始模板包括一个导航栏和一个主体部分，其中显示内容。
- en: For the Navbar section, we will be generating a new component named `nav-bar`
    and updating the relevant code in it.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于导航栏部分，我们将生成一个名为`nav-bar`的新组件，并更新其中的相关代码。
- en: 'To generate a new custom component using Angular CLI, navigate to the `giphy-app`
    folder and run the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Angular CLI生成一个新的自定义组件，导航到`giphy-app`文件夹并运行以下命令：
- en: '[PRE19]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note: You can either kill the current running command or spawn a new command
    prompt/terminal to run the preceding command.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你可以终止当前运行的命令，或者生成一个新的命令提示符/终端来运行前面的命令。
- en: 'And you should see something like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似这样的东西：
- en: '[PRE20]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now open `giphy-app/src/app/nav-bar/nav-bar.component.html` and update it as
    follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`giphy-app/src/app/nav-bar/nav-bar.component.html`并更新如下：
- en: '[PRE21]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: All we are doing here is creating the header bar with two menu items and the
    app name, which acts as a link to the home page.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的一切就是创建一个带有两个菜单项和应用程序名称的标题栏，它作为指向主页的链接。
- en: 'Next, we will update the `giphy-app/src/app/app.component.html` to load the
    `nav-bar` component. Replace the contents of that file with the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新`giphy-app/src/app/app.component.html`以加载`nav-bar`组件。用以下内容替换该文件的内容：
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, we will start adding routes to the app. As discussed earlier, we are going
    to have three routes.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始向应用程序添加路由。如前所述，我们将有三个路由。
- en: 'To add routing support to the current app, we need to do three things:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为当前应用程序添加路由支持，我们需要做三件事：
- en: Create the routes needed.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所需的路由。
- en: Configure `@NgModule`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`@NgModule`。
- en: Tell Angular where to load the content of these routes.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉Angular在哪里加载这些路由的内容。
- en: At the time of writing, Angular CLI has disabled route generation. Hence we
    are going to create the same manually. Otherwise we could simply run `ng generate
    route home` to generate the home route.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Angular CLI已禁用了路由生成。因此，我们将手动创建相同的路由。否则，我们可以简单地运行`ng generate route home`来生成主页路由。
- en: 'So first, let''s define all the routes. Create a new file named `app.routes.ts`
    inside the app folder. Update the file as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 所以首先，让我们定义所有的路由。在app文件夹内创建一个名为`app.routes.ts`的新文件。更新文件如下：
- en: '[PRE23]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: All we have done here is exported an array of routes. Do notice the path `'**'`.
    This is how we define the other section of the routes.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的一切就是导出一个路由数组。请注意路径`'**'`。这是我们定义路由的另一部分。
- en: 'We will create the required components now. Run the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建所需的组件。运行以下命令：
- en: '[PRE24]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we will configure the `@NgModule`. Open `giphy-app/src/app/app.module.ts`
    and add the following imports at the top:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将配置`@NgModule`。打开`giphy-app/src/app/app.module.ts`并在顶部添加以下导入：
- en: '[PRE25]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, update the `imports` property of the `@NgModule` decorator as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新`@NgModule`装饰器的`imports`属性如下：
- en: '[PRE26]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The completed page would look as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的页面将如下所示：
- en: '[PRE27]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now we will update the app component to show the Navbar as well as the current
    route content.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新应用程序组件以显示导航栏以及当前路由内容。
- en: 'Update the `giphy-app/src/app/app.component.html` as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`giphy-app/src/app/app.component.html`如下：
- en: '[PRE28]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using the `router-outlet`, we tell the router to load the current route content
    at that location.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`router-outlet`，我们告诉路由器在该位置加载当前路由内容。
- en: 'If you want to know more about routing in Angular, you can check out: Routing
    in Eleven Dimensions with Component Router by Brian Ford: [https://www.youtube.com/watch?v=z1NB-HG0ZH4](https://www.youtube.com/watch?v=z1NB-HG0ZH4).'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于Angular中的路由，请查看：Brian Ford的《Eleven Dimensions with Component Router》：[https://www.youtube.com/watch?v=z1NB-HG0ZH4](https://www.youtube.com/watch?v=z1NB-HG0ZH4)。
- en: Next, we will update the home component HTML and test the app so far.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新主页组件的HTML并测试到目前为止的应用程序。
- en: 'Open `giphy-app/src/app/home/home.component.html` and update it as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`giphy-app/src/app/home/home.component.html`并按以下方式更新它：
- en: '[PRE29]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once this is done, save the file and run the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，保存文件并运行以下命令：
- en: '[PRE30]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And we should see the following page:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下页面：
- en: '![](img/00009.jpeg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'As we can see, the page looks broken. Let''s fix this by adding a couple of
    styles. Open `giphy-app/src/styles.css` and add the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，页面看起来有问题。让我们通过添加一些样式来修复这个问题。打开`giphy-app/src/styles.css`并添加以下内容：
- en: '[PRE31]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now our page will look as expected:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的页面将如预期般显示：
- en: '![](img/00010.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: Next, we will start by writing the service to talk to the Giphy API. We will
    be writing three methods, one to get a random gif, one to get the latest trends,
    and one to search the Gif API with a keyword.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始编写服务以与Giphy API交互。我们将编写三种方法，一种用于获取随机gif，一种用于获取最新趋势，一种用于使用关键字搜索Gif API。
- en: 'To get started, we will generate a service. Run the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时，我们将生成一个服务。运行以下命令：
- en: '[PRE32]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As shown in the warning, the service that has been generated has not been marked
    as a provider. So we need to do that manually.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如警告所示，生成的服务尚未标记为提供者。因此，我们需要手动进行标记。
- en: 'Open `giphy-app/src/app/app.module.ts` and import the `GiphyService`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`giphy-app/src/app/app.module.ts`并导入`GiphyService`：
- en: '[PRE34]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, add the `GiphyService` as a provider in the `@NgModule` decorator, `providers`
    property:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`@NgModule`装饰器的`providers`属性中添加`GiphyService`作为提供者：
- en: '[PRE35]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The complete `giphy-app/src/app/app.module.ts` would look as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`giphy-app/src/app/app.module.ts`如下所示：
- en: '[PRE36]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now we will update the `giphy-app/src/app/giphy.service.ts` with the three
    methods. Open `giphy-app/src/app/giphy.service.ts` and update it as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新`giphy-app/src/app/giphy.service.ts`以包含这三种方法。打开`giphy-app/src/app/giphy.service.ts`并按以下方式更新它：
- en: '[PRE37]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: All we are doing here is making an HTTP GET request to the corresponding Giphy
    API URLs and returning an Observable.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的只是向相应的Giphy API URL发出HTTP GET请求并返回一个Observable。
- en: In RxJS ([http://reactivex.io/rxjs/](http://reactivex.io/rxjs/)), an Observable
    is an entity, which can change over a period of time. This is the most basic building
    block of RxJS. An Observer subscribes to an Observable and reacts to its changes.
    This pattern is called a Reactive pattern.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在RxJS（[http://reactivex.io/rxjs/](http://reactivex.io/rxjs/)）中，Observable是一个可以随时间变化的实体。这是RxJS的最基本构建块。观察者订阅Observable并对其变化做出反应。这种模式称为响应式模式。
- en: 'Quoting from the documentation:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 引用自文档：
- en: This pattern facilitates concurrent operations because it does not need to block
    while waiting for the Observable to emit objects, but instead it creates a sentry
    in the form of an observer that stands ready to react appropriately at whatever
    future time the Observable does so.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式有助于并发操作，因为它不需要在等待Observable发出对象时阻塞，而是创建一个观察者作为哨兵，随时准备在Observable未来发出对象时做出适当的反应。
- en: 'If you are new to Observables, you can start here: [http://reactivex.io/documentation/observable.html](http://reactivex.io/documentation/observable.html)
    followed by: Taking advantage of Observables in Angular: [http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html](http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html)
    and Angular 2 HTTP requests with Observables: [https://scotch.io/tutorials/angular-2-http-requests-with-observables](https://scotch.io/tutorials/angular-2-http-requests-with-observables).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Observables还不熟悉，可以从这里开始：[http://reactivex.io/documentation/observable.html](http://reactivex.io/documentation/observable.html)，然后阅读：在Angular中利用Observables：[http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html](http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html)和Angular
    2中使用Observables进行HTTP请求：[https://scotch.io/tutorials/angular-2-http-requests-with-observables](https://scotch.io/tutorials/angular-2-http-requests-with-observables)。
- en: Now that the service is completed, we will update the `HomeComponent` to get
    a random gif and display it on the home page.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务已经完成，我们将更新`HomeComponent`以获取一个随机的gif并在主页上显示它。
- en: 'Open `giphy-app/src/app/home/home.component.ts` and update it as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`giphy-app/src/app/home/home.component.ts`并按以下方式更新它：
- en: '[PRE38]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding code, first off, we have imported `GiphyService` and added
    it to the constructor. Next, we have written `getRandomGif()` and invoked `getRandomGif()`
    from the constructor. In `getRandomGif()`, we have invoked `getRandomGif()` on
    `giphyService` to get a random gif. We are then assigning the gif to a class variable
    named `gif`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，首先，我们导入了`GiphyService`并将其添加到构造函数中。接下来，我们编写了`getRandomGif()`并从构造函数中调用了`getRandomGif()`。在`getRandomGif()`中，我们在`giphyService`上调用了`getRandomGif()`来获取一个随机的gif。然后，我们将gif赋值给一个名为`gif`的类变量。
- en: 'Just to see if everything is working fine, we will run the app by executing
    `ng serve` and opening developer tools. If everything goes well, we should see
    the response from the Giphy API:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保一切正常运行，我们将通过执行`ng serve`并打开开发者工具来运行应用程序。如果一切顺利，我们应该能看到来自Giphy API的响应：
- en: '![](img/00011.jpeg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: Now that we have the response, we want to build a component that will display
    the gif. We want to build a separate component for this because we will be using
    the same component on other pages as well to display a gif where needed.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经得到了响应，我们希望构建一个组件来显示这个gif。我们希望构建一个单独的组件，因为我们将在其他页面上使用相同的组件来显示需要的gif。
- en: 'Let''s go ahead and scaffold the component. Run the following:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续搭建组件。运行以下命令：
- en: '[PRE39]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, open `giphy-app/src/app/gif-viewr/gif-viewr.component.html` and update
    it as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`giphy-app/src/app/gif-viewr/gif-viewr.component.html`并按以下方式更新它：
- en: '[PRE40]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Once this is done, we need to tell the component to expect the data from the
    parent component, as the home component will pass the `imgUrl` to the `gif-viewer`
    component.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们需要告诉组件从父组件中期望数据，因为主页组件将把`imgUrl`传递给`gif-viewer`组件。
- en: 'Open `giphy-app/src/app/gif-viewr/gif-viewr.component.ts`. First, update the
    import statement by adding a reference to the Input decorator:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`giphy-app/src/app/gif-viewr/gif-viewr.component.ts`。首先，通过添加对Input装饰器的引用来更新导入语句：
- en: '[PRE41]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, add an Input decorator to the `imgUrl` variable:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`imgUrl`变量中添加一个Input装饰器：
- en: '[PRE42]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The updated `giphy-app/src/app/gif-viewr/gif-viewr.component.ts` would look
    as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的`giphy-app/src/app/gif-viewr/gif-viewr.component.ts`如下所示：
- en: '[PRE43]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Note: To define an input for a component, we use the `@Input` decorator. To
    know more about the `@Input` decorator, refer to the Attribute Directives section
    in Angular docs: [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html).'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：要为组件定义输入，我们使用`@Input`装饰器。要了解更多关于`@Input`装饰器的信息，请参考Angular文档中的属性指令部分：[https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)。
- en: 'Save the file and open `giphy-app/src/app/home/home.component.html`. We will
    add the `app-gif-viewr` component inside this page:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并打开`giphy-app/src/app/home/home.component.html`。我们将在此页面内添加`app-gif-viewr`组件：
- en: '[PRE44]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The complete file would look as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的文件如下所示：
- en: '[PRE45]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, we will update CSS to beautify the page. Open `giphy-app/src/styles.css`
    and add the following CSS to the existing styles:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新CSS以美化页面。打开`giphy-app/src/styles.css`并将以下CSS添加到现有样式中：
- en: '[PRE46]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If we go back to the browser and refresh, we should see the following:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到浏览器并刷新，我们应该会看到以下内容：
- en: '![](img/00012.jpeg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: And every time we refresh a page, we will see a new gif come up.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 每次刷新页面，我们都会看到一个新的gif出现。
- en: Next, we are going to work on the Trending page. This page will show gifs that
    are trending using the Pintrest layout (or Masonry layout). The Trending REST
    API supports pagination. We will be making use of this to load 12 gifs at a time.
    And then provide a Load More button to fetch the next 12 gifs.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在热门页面上进行工作。该页面将显示当前流行的gif，使用Pintrest布局（或Masonry布局）。热门REST API支持分页。我们将利用这一点，每次加载12个gif。然后提供一个“加载更多”按钮来获取接下来的12个gif。
- en: 'First, let''s get the data from the Giphy API. Open `giphy-app/src/app/trending/trending.component.ts`.
    We will first import the `GiphyService`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从Giphy API获取数据。打开`giphy-app/src/app/trending/trending.component.ts`。我们将首先导入`GiphyService`：
- en: '[PRE47]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we will add the same to the constructor and update the constructor to
    invoke `getTrendingGifs()`:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加相同的内容到构造函数中，并更新构造函数以调用`getTrendingGifs()`：
- en: '[PRE48]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`offset` and `perPage` will be used to manage pagination.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`offset`和`perPage`将用于管理分页。'
- en: '`results` will be used to store the response from the server.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`results`将用于存储来自服务器的响应。'
- en: '`gifs` is the array consisting of an array of trending gifs that we are exposing
    to the template.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`gifs`是由一系列热门gif组成的数组，我们将其暴露给模板。'
- en: '`isLoading` is a `boolean` variable to keep track if a request is in progress
    or not. Using `isLoading`, we will show/hide the Load More button.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`isLoading`是一个`boolean`变量，用于跟踪请求是否正在进行中。使用`isLoading`，我们将显示/隐藏“加载更多”按钮。'
- en: 'Next, we will add `getTrendingGifs()`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加`getTrendingGifs()`：
- en: '[PRE49]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To display the gifs retrieved, we will update the trending component template.
    Open `giphy-app/src/app/trending/trending.component.html` and update it as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示检索到的gif，我们将更新热门组件模板。打开`giphy-app/src/app/trending/trending.component.html`并进行如下更新：
- en: '[PRE50]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: All we are doing here is setting up `app-gif-viewr` to take the gif URL by applying
    an `*ngFor` directive on it. And at the bottom, a Load More button, so a user
    can load more gifs.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的一切就是设置`app-gif-viewr`以通过对其应用`*ngFor`指令来获取gif URL。底部还有一个“加载更多”按钮，用户可以加载更多gif。
- en: 'And finally to achieve the Pintrest/Masonry layout, we will add a couple of
    CSS rules. Open `giphy-app/src/styles.css` and add the following styles:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了实现Pintrest/Masonry布局，我们将添加一些CSS规则。打开`giphy-app/src/styles.css`并添加以下样式：
- en: '[PRE51]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Save all the files and head back to the browser. If we click on the trending
    menu item in the Navbar, we should see the following:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并返回浏览器。如果我们点击导航栏中的热门菜单项，我们应该会看到以下内容：
- en: '![](img/00013.jpeg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'And if we scroll down completely, we should see a Load More button:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们完全向下滚动，我们应该会看到一个“加载更多”按钮：
- en: '![](img/00014.jpeg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'Clicking on the Load More button will load the next set of gifs:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“加载更多”按钮将加载下一组gif：
- en: '![](img/00015.jpeg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: I wasted about 15 minutes clicking Load More and watching the gifs. I think
    this is why APIs should have a rate limit.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我浪费了大约15分钟点击“加载更多”并观看gif。我认为这就是为什么API应该有速率限制的原因。
- en: 'Finally, we will implement searching gif. Open giphy-`app/src/app/search/search.component.ts`
    and import `GiphyService`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将实现搜索gif。打开`giphy-app/src/app/search/search.component.ts`并导入`GiphyService`：
- en: '[PRE52]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add `giphyService` as a class variable in the constructor:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中将`giphyService`添加为一个类变量：
- en: '[PRE53]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Next, we will add variables to manage pagination as well as the response:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加变量来管理分页以及响应：
- en: '[PRE54]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now we will invoke `searchGifs`, which makes a REST call to get the searched
    gifs, by passing in the query string:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将调用`searchGifs`，它通过传递查询字符串来进行REST调用以获取搜索到的gif：
- en: '[PRE55]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following is a method to manage the search form submit button:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个管理搜索表单提交按钮的方法：
- en: '[PRE56]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'And finally, `getMore()` to load more pages of the same query:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`getMore()`来加载同一查询的更多页面：
- en: '[PRE57]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The updated `giphy-app/src/app/search/search.component.ts` would look as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的`giphy-app/src/app/search/search.component.ts`如下所示：
- en: '[PRE58]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now we will update the `giphy-app/src/app/search/search.component.html`. Open
    `giphy-app/src/app/search/search.component.html` and update it as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新`giphy-app/src/app/search/search.component.html`。打开`giphy-app/src/app/search/search.component.html`并进行如下更新：
- en: '[PRE59]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This view is the same as the Trending component, except there is a search textbox,
    which will allow the user to search by entering a string.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图与热门组件相同，只是有一个搜索文本框，允许用户通过输入字符串进行搜索。
- en: 'If we save all the files, go back to the browser, and navigate to the Search
    page, we should see an empty page with a search textbox. At this point, the load
    more button will not be shown. If we enter text and hit the return key, we should
    see results, as shown in the following screenshot:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存所有文件，返回浏览器，并导航到搜索页面，我们应该会看到一个带有搜索文本框的空白页面。此时，“加载更多”按钮将不会显示。如果我们输入文本并按回车键，我们应该会看到结果，如下图所示：
- en: '![](img/00016.jpeg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: With this we have completed the implementation of a Giphy API with an Angular
    app.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经完成了在Angular应用中使用Giphy API的实现。
- en: 'To bring this example to a closure, we will update `giphy-app/src/app/page-not-found/page-not-found.component.html`
    as follows:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这个例子，我们将更新`giphy-app/src/app/page-not-found/page-not-found.component.html`如下：
- en: '[PRE60]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'And when we navigate to [http://localhost:4200/nopage](http://localhost:4200/nopage),
    we should see the following page:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导航到[http://localhost:4200/nopage](http://localhost:4200/nopage)时，我们应该看到以下页面：
- en: '![](img/00017.jpeg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: Summary
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone through a high level overview of TypeScript and
    why we use TypeScript. Next we got acquainted with Angular's new syntax and the
    component structure. Using this knowledge, we have built an app named Giphy, which
    interfaces with the Giphy REST API to get gifs.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经对TypeScript进行了高层次的概述，以及为什么我们使用TypeScript。接下来，我们熟悉了Angular的新语法和组件结构。利用这些知识，我们构建了一个名为Giphy的应用程序，它与Giphy的REST
    API进行交互以获取gif。
- en: 'You can read more about Angular here: [https://angular.io](https://angular.io).'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读更多关于Angular的信息：[https://angular.io](https://angular.io)。
- en: Also, check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to know more about the changes to Angular 4.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，查看[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic 3*，了解有关Angular
    4的更多变化。
- en: In the next chapter -- Welcome to Ionic, we will get started with Mobile Hybrid
    development using Cordova and we will look at how Ionic fits into the bigger scheme
    of things.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章--欢迎来到Ionic，我们将开始使用Cordova进行移动混合开发，并了解Ionic如何融入更大的方案。
