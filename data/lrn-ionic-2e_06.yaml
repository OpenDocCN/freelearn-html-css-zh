- en: Ionic Native
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic Native
- en: In this chapter, we are going to look at integrating device-specific features,
    such as network, battery status, camera, and so on into an Ionic app. To start
    exploring this, we will first look at Cordova plugins, and then work with Ionic
    Native.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何将设备特定功能（如网络、电池状态、相机等）集成到Ionic应用程序中。为了开始探索这一点，我们将首先研究Cordova插件，然后使用Ionic
    Native。
- en: 'In this chapter, we will take a look at:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下：
- en: Setting up a platform-specific SDK
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置特定于平台的SDK
- en: Working with the Cordova plugin API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cordova插件API
- en: Working with Ionic Native
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ionic Native
- en: Testing a few Ionic Native plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试一些Ionic Native插件
- en: Setting up a platform-specific SDK
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置特定于平台的SDK
- en: Before we start interacting with the device-specific features, we need to have
    the SDK for that device's operating system set up on our local machine. Officially,
    Ionic supports iOS, Android, and Windows phone platforms. Nevertheless, Ionic
    can be used on any device, which can run HTML, CSS, and JavaScript.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始与设备特定功能交互之前，我们需要在本地机器上设置该设备操作系统的SDK。官方上，Ionic支持iOS、Android和Windows手机平台。尽管如此，Ionic可以在任何可以运行HTML、CSS和JavaScript的设备上使用。
- en: 'The following are links on how to set up a mobile SDK on our local machine.
    Unfortunately, we cannot proceed further in this chapter (and book) without setting
    that up. Let''s look at the following links:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在本地机器上设置移动SDK的链接。不幸的是，如果没有设置，我们无法继续本章节（和书籍）。让我们看一下以下链接：
- en: '**Android**: [https://cordova.apache.org/docs/en/latest/guide/platforms/android/](https://cordova.apache.org/docs/en/latest/guide/platforms/android/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**：[https://cordova.apache.org/docs/en/latest/guide/platforms/android/](https://cordova.apache.org/docs/en/latest/guide/platforms/android/)'
- en: '**iOS**: [https://cordova.apache.org/docs/en/6.x/guide/platforms/ios/](https://cordova.apache.org/docs/en/6.x/guide/platforms/ios/)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**：[https://cordova.apache.org/docs/en/6.x/guide/platforms/ios/](https://cordova.apache.org/docs/en/6.x/guide/platforms/ios/)'
- en: '**Windows**: [https://cordova.apache.org/docs/en/6.x/guide/platforms/wp8/](https://cordova.apache.org/docs/en/6.x/guide/platforms/wp8/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：[https://cordova.apache.org/docs/en/6.x/guide/platforms/wp8/](https://cordova.apache.org/docs/en/6.x/guide/platforms/wp8/)'
- en: 'Note: For other supported OS, you can check out [https://cordova.apache.org/docs/en/6.x/guide/overview/](https://cordova.apache.org/docs/en/6.x/guide/overview/).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：对于其他支持的操作系统，您可以查看[https://cordova.apache.org/docs/en/6.x/guide/overview/](https://cordova.apache.org/docs/en/6.x/guide/overview/)。
- en: In this book, we will work with Android and iOS only. You can follow a similar
    approach for other mobile platforms as well. Before we proceed further, we need
    to make sure the setup is completed, and is working as expected.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只会使用Android和iOS。您也可以为其他移动平台采用类似的方法。在我们继续之前，我们需要确保设置已经完成，并且按预期工作。
- en: The Android setup
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android设置
- en: 'Make sure you have the SDK installed and Android tools are in your path:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已安装SDK并且Android工具在您的路径中：
- en: 'From anywhere on your machine in a command prompt/terminal, run: `android`.
    This will launch the Android SDK manager. Make sure that you have the latest version
    of Android, or any specific version you are targeting installed.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在计算机的任何位置的命令提示符/终端中运行：`android`。这将启动Android SDK管理器。确保您已安装最新版本的Android，或者您正在针对安装特定版本。
- en: 'Run the following command:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will launch the Android Virtual Device manager. Make sure you have at
    least one AVD set up. If this isn''t yet the case, you can easily do so by clicking
    on the Create button. You can fill the options as follows:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将启动Android虚拟设备管理器。确保至少设置了一个AVD。如果还没有这样做，您可以通过单击“创建”按钮轻松完成。您可以按照以下选项填写选项：
- en: '![](img/00081.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: The iOS setup
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS设置
- en: 'Make sure you have Xcode and the required tools installed, and also have `ios-sim`
    and `ios-deploy` installed globally:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装Xcode和所需工具，并且已全局安装`ios-sim`和`ios-deploy`：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: iOS setup can be done only on an Apple machine. Windows developers cannot deploy
    iOS apps from Windows machines, as Xcode is required to do so.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: iOS设置只能在苹果设备上完成。Windows开发人员无法从Windows设备部署iOS应用程序，因为需要Xcode。
- en: Testing the setup
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试设置
- en: Let's take a look at how we can test the setup for Android and iOS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何测试Android和iOS的设置。
- en: Testing for Android
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Android
- en: 'To test the setup, we will scaffold a new Ionic app, and emulate that using
    the Android and iOS emulators. We will first scaffold a tabs app. Create a folder
    named `chapter6` and open a new command prompt/terminal. Run the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试设置，我们将创建一个新的Ionic应用程序，并使用Android和iOS模拟器进行模拟。我们将首先创建一个选项卡应用程序。创建一个名为`chapter6`的文件夹，并打开一个新的命令提示符/终端。运行以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To emulate the app on an Android emulator, first we need to add Android platform
    support for this project and then emulate it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Android模拟器上模拟应用程序，首先需要为此项目添加Android平台支持，然后模拟它：
- en: 'To add the Android platform, run the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 添加Android平台，请运行以下命令：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once that is done, run the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请运行以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After some time, you will see the emulator launch, and the app will be deployed
    and executed inside the emulator. If you have already worked with native Android
    apps, you know how slow the Android emulator is. If you have not, it is quite
    slow. An alternative to the Android emulator is Genymotion ([https://www.genymotion.com](https://www.genymotion.com)).
    Ionic is nicely integrated with Genymotion as well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，您将看到模拟器启动，并且应用程序将在模拟器内部部署和执行。如果您已经使用原生Android应用程序工作过，您就知道Android模拟器有多慢。如果您没有，它非常慢。Android模拟器的替代方案是Genymotion
    ([https://www.genymotion.com](https://www.genymotion.com))。Ionic也与Genymotion很好地集成在一起。
- en: Genymotion has two flavors, one free and the other for commercial use. The free
    version has minimal features and is supposed to be for personal use only.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Genymotion有两种版本，一种是免费的，另一种是商业使用的。免费版本功能有限，只能用于个人使用。
- en: 'You can download a copy of Genymotion from: [https://www.genymotion.com/#!/store](https://www.genymotion.com/#!/store).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下网址下载Genymotion的副本：[https://www.genymotion.com/#!/store](https://www.genymotion.com/#!/store)。
- en: 'Once you have installed Genymotion, create a new virtual device with your preferred
    Android SDK. My config looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Genymotion后，请使用您喜欢的Android SDK创建一个新的虚拟设备。我的配置如下：
- en: '![](img/00082.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: 'Next, we launch the emulator and let it run in the background. Now that we
    have Genymotion running, we need to tell Ionic to emulate the app using Genymotion
    and not the Android emulator. For that we use the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们启动模拟器并让其在后台运行。现在Genymotion正在运行，我们需要告诉Ionic使用Genymotion而不是Android模拟器来模拟应用程序。为此，我们使用以下命令：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Instead of this: `ionic emulate android`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是这个：`ionic emulate android`。
- en: 'This will deploy the app to the Genymotion emulator and you can see the app
    immediately, unlike with the Android emulator:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将部署应用程序到Genymotion模拟器，您可以立即看到应用程序，而不像使用Android模拟器那样需要等待。
- en: '![](img/00083.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: Make sure Genymotion is running in the background before you run the app.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在运行应用程序之前，Genymotion在后台运行。
- en: 'If Genymotion seems a bit large for your pocket, you can simply connect your
    Android mobile phone to your machine and run this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Genymotion对您来说有点大，您可以简单地将Android手机连接到计算机并运行以下命令：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will deploy the app to the actual device.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将部署应用程序到实际设备。
- en: 'To set up Android USB debugging, please refer to: [https://developer.android.com/studio/run/device.html](https://developer.android.com/studio/run/device.html).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Android USB调试，请参考：[https://developer.android.com/studio/run/device.html](https://developer.android.com/studio/run/device.html)。
- en: The earlier screenshots of Genymotion are taken from a personal edition, as
    I do not have a license for it. I generally use the iOS emulator in tandem with
    my Android mobile phone during the development phase. Once the entire development
    is completed, I purchase device time from device farms, and test on the targeted
    devices.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Genymotion的早期截图来自个人版，因为我没有许可证。在开发阶段，我通常与我的Android手机一起使用iOS模拟器。一旦整个开发完成，我会从设备农场购买设备时间，并在目标设备上进行测试。
- en: 'If you are facing an issue while connecting your Android mobile phone to your
    computer, please check if you are able to run `adb device` in the command prompt/terminal and
    are able to see your device listed here. You can find more information on **Android
    Debug Bridge** (**ADB**) at: [https://developer.android.com/studio/command-line/adb.html](https://developer.android.com/studio/command-line/adb.html).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在连接Android手机到计算机时遇到问题，请检查您是否能够在命令提示符/终端中运行`adb device`并在此处看到您的设备。您可以在[https://developer.android.com/studio/command-line/adb.html](https://developer.android.com/studio/command-line/adb.html)找到有关**Android调试桥**（**ADB**）的更多信息。
- en: Testing for iOS
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试iOS
- en: To test for iOS, we will first add iOS platform support as we did for Android,
    and then emulate it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试iOS，我们将首先添加iOS平台支持，就像我们为Android做的那样，然后模拟它。
- en: 'Run the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, run this: `ionic emulate ios`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行：`ionic emulate ios`。
- en: 'You should see the default emulator launch and, finally, the app will appear
    in the emulator as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到默认的模拟器启动，最后，应用程序将出现在模拟器中，如下面的截图所示：
- en: '![](img/00084.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: 'To deploy onto an Apple device, you can run the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署到苹果设备，您可以运行以下命令：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Make sure you are able to emulate/run the app before moving further.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在继续之前能够模拟/运行应用程序。
- en: Getting started with Cordova plugins
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cordova插件入门
- en: 'According to the Cordova documentation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Cordova文档：
- en: '"A plugin is a package of injected code that allows the Cordova WebView within
    which the app renders to communicate with the native platform on which it runs.
    Plugins provide access to device and platform functionality that is ordinarily
    unavailable to web-based apps. All the main Cordova API features are implemented
    as plugins, and many others are available that enable features such as bar code
    scanners, NFC communication, or to tailor calendar interfaces..."'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “插件是一种注入代码的包，允许应用程序呈现的Cordova WebView与其运行的本机平台进行通信。插件提供对设备和平台功能的访问，这些功能通常对基于Web的应用程序不可用。所有主要的Cordova
    API功能都是作为插件实现的，还有许多其他可用的插件，可以启用诸如条形码扫描仪、NFC通信或定制日历界面等功能…”
- en: In other words, Cordova plugins are windows to the device-specific features.
    The Cordova team has already built the needed plugins to work with almost all
    device-specific features. There are community-contributed plugins as well that
    can provide customization wrappers around device-specific features.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Cordova插件是访问设备特定功能的窗口。Cordova团队已经构建了需要的插件，以便几乎可以与所有设备特定功能一起使用。还有社区贡献的插件，可以提供围绕设备特定功能的定制包装。
- en: 'You can search for existing plugins here: [https://cordova.apache.org/plugins/](https://cordova.apache.org/plugins/).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里搜索现有的插件：[https://cordova.apache.org/plugins/](https://cordova.apache.org/plugins/)。
- en: During the course of this chapter, we will be exploring a few plugins. Since
    we are focusing on Ionic-specific development, we will add plugins using the Ionic
    CLI. Under the hood, Ionic CLI calls the Cordova CLI to execute the necessary
    actions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的过程中，我们将探索一些插件。由于我们专注于Ionic特定的开发，我们将使用Ionic CLI添加插件。在幕后，Ionic CLI调用Cordova
    CLI来执行必要的操作。
- en: The Ionic plugin API
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic插件API
- en: There are four main commands that we will be using while dealing with plugins.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理插件时，我们将使用四个主要命令。
- en: Add a plugin
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加插件
- en: 'This CLI command is used to add a new plugin to the project:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此CLI命令用于向项目添加新插件：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also, you can use this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用这个：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Remove a plugin
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除插件
- en: 'This CLI command is used to remove a plugin from the project:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此CLI命令用于从项目中删除插件：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Also, you can use this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用这个：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: List added plugins
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出已添加的插件
- en: 'This CLI command is used to list all the plugins in the project, for example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此CLI命令用于列出项目中的所有插件，例如：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Search plugins
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索插件
- en: 'This CLI command is used to search plugins from the command line, for example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此CLI命令用于从命令行搜索插件，例如：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Ionic Native
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic Native
- en: Now that we have the lay of the land on how to work with Cordova plugins, we
    will scaffold a new project and work with integrating Cordova plugins with our
    Ionic app.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用Cordova插件，我们将创建一个新项目并与我们的Ionic应用程序集成Cordova插件。
- en: Ionic provides us a simple wrapper to work with Cordova plugins in a TypeScript
    fashion. Until all the plugins adopt the ES6/TS approach, we will need a way to
    work with these plugins inside our Ionic app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic为我们提供了一个简单的包装器，以TypeScript的方式处理Cordova插件。在所有插件都采用ES6/TS方法之前，我们需要一种方法在我们的Ionic应用程序中使用这些插件。
- en: Enter Ionic Native. Ionic Native is an ES6/TypeScript implementation of today's
    ES5 Cordova plugins, so you can import the plugins you need and use them in TypeScript.
    The Ionic team has done a great job in making the plugins available to us in the
    form of TypeScript bindings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 进入Ionic Native。Ionic Native是当今ES5 Cordova插件的ES6/TypeScript实现，因此您可以导入所需的插件并在TypeScript中使用它们。Ionic团队在以TypeScript绑定的形式向我们提供插件方面做得非常好。
- en: Ionic Native test drive
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic Native测试驱动
- en: 'To test, we will scaffold a new project and execute the following commands:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试，我们将创建一个新项目并执行以下命令：
- en: 'Run the following command:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And `cd` into the `example15` folder.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 并`cd`到`example15`文件夹中。
- en: 'Let''s search for the battery status plugin and add it to our project. Run
    the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们搜索电池状态插件并将其添加到我们的项目中。运行以下命令：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will launch the default browser and will navigate you to: [http://cordova.apache.org/plugins/?q=battery%20status](http://cordova.apache.org/plugins/?q=battery%20status).
    Depending on what plugin name you find, you can add that plugin to the project.
    So, in our case, to add the battery status plugin to the project, we would run
    this:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动默认浏览器并将您导航到：[http://cordova.apache.org/plugins/?q=battery%20status](http://cordova.apache.org/plugins/?q=battery%20status)。根据你找到的插件名称，你可以将该插件添加到项目中。所以，在我们的情况下，要将电池状态插件添加到项目中，我们将运行以下命令：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will add the battery status plugin ([https://github.com/apache/cordova-plugin-battery-status](https://github.com/apache/cordova-plugin-battery-status))
    to our current project. The same can be found from the Ionic Native''s documentation
    here: [https://ionicframework.com/docs/native/battery-status/](https://ionicframework.com/docs/native/battery-status/).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向我们当前的项目中添加电池状态插件（[https://github.com/apache/cordova-plugin-battery-status](https://github.com/apache/cordova-plugin-battery-status)）。在Ionic
    Native的文档中也可以找到相同的内容：[https://ionicframework.com/docs/native/battery-status/](https://ionicframework.com/docs/native/battery-status/)。
- en: 'To view all the plugins that were installed, run the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看已安装的所有插件，运行以下命令：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, you should see the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你应该看到以下屏幕截图：
- en: '![](img/00085.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: 'Apart from adding the Cordova plugin, we need to add the required Ionic Native
    module for battery status. Run the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加Cordova插件之外，我们还需要为电池状态添加所需的Ionic Native模块。运行以下命令：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After adding the module, we need to mark it as a provider in `example15/src/app/app.module.ts`.
    Open `example15/src/app/app.module.ts` and update it as shown:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 添加模块后，我们需要在`example15/src/app/app.module.ts`中将其标记为提供者。打开`example15/src/app/app.module.ts`并按照所示进行更新：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we can start consuming the battery status plugin. Open `example15/src/pages/home/home.ts`
    and update it with the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始使用电池状态插件。打开`example15/src/pages/home/home.ts`并使用以下代码进行更新：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is how Ionic Native exposes `BatteryStatus`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Ionic Native如何公开`BatteryStatus`。
- en: 'Next, update the `ion-content` section of `example15/src/pages/home/home.html`
    as shown:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式更新`example15/src/pages/home/home.html`中的`ion-content`部分：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now run the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will not see any output on the page and, if you open the development tools,
    you will see a warning in the console that says:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在页面上看不到任何输出，如果你打开开发工具，你会在控制台中看到一个警告，上面写着：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This means that we cannot run the plugins directly in the browser; they need
    an environment to execute such as Android, iOS, or Windows.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们不能直接在浏览器中运行插件；它们需要一个环境来执行，比如Android、iOS或Windows。
- en: 'To test the app (and plugin), we will add either an Android platform or an
    iOS platform:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试应用程序（和插件），我们将添加一个Android平台或一个iOS平台：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also use the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then execute any one of the following commands:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行以下命令之一：
- en: '`ionic emulate android`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ionic emulate android`'
- en: '`ionic emulate ios`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ionic emulate ios`'
- en: '`ionic run android`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ionic run android`'
- en: '`ionic run ios`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ionic run ios`'
- en: 'Running any one of the preceding command would display the following output:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 运行任何一个前面的命令都会显示以下输出：
- en: '![](img/00086.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: Now you know how to add Cordova plugins to your Ionic app and test them. In
    the next section, we will be working with a few more plugins. The preceding screenshots
    from Genymotion are from my personal use license. These images are for illustration
    purposes only.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何向你的Ionic应用程序中添加Cordova插件并对其进行测试。在接下来的部分中，我们将使用更多的插件。来自Genymotion的前面的屏幕截图是我个人使用许可证的。这些图片仅用于说明目的。
- en: The Cordova whitelist plugin
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cordova白名单插件
- en: 'Before we go ahead and start working with Ionic Native, we are going to spend
    a moment on one of the key Cordova plugins -- the whitelist plugin: [https://github.com/apache/cordova-plugin-whitelist](https://github.com/apache/cordova-plugin-whitelist).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续使用Ionic Native之前，我们将花一些时间来了解一个关键的Cordova插件--白名单插件：[https://github.com/apache/cordova-plugin-whitelist](https://github.com/apache/cordova-plugin-whitelist)。
- en: 'From the Cordova documentation on the whitelist plugin:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从白名单插件的Cordova文档中：
- en: '"Domain whitelisting is a security model that controls access to external domains
    over which your application has no control. Cordova provides a configurable security
    policy to define which external sites may be accessed."'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: “域白名单是一种安全模型，用于控制应用程序无法控制的外部域的访问。Cordova提供了一个可配置的安全策略，用于定义可以访问哪些外部站点。”
- en: 'So, if we want to have more control over how our app should behave when dealing
    with content from other sources, we should be working with the whitelist plugin.
    As you may have noticed, this plugin is already added to our Ionic app. If this
    plugin is not added to the Ionic/Cordova app, you can do so easily by running:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们希望更好地控制我们的应用程序在处理来自其他来源的内容时的行为方式，我们应该使用白名单插件。您可能已经注意到，此插件已添加到我们的Ionic应用程序中。如果此插件尚未添加到Ionic/Cordova应用程序中，您可以通过运行以下命令轻松添加：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once the plugin is added, you can update the `config.xml` file with the navigation
    whitelist -- the links that your app is allowed to open inside WebView to allow
    links to `example.com`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了插件，您可以更新`config.xml`文件以进行导航白名单 - 允许您的应用程序在WebView内打开的链接，以允许链接到`example.com`。
- en: 'You will be adding the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您将添加以下代码：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you want your WebView to link to any website, you need to add this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使您的WebView链接到任何网站，您需要添加以下内容：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can also add an Intent whitelist, where you can specify the list of links
    that are allowed to be browsed on the device. For instance, open the SMS app from
    our custom app:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加意图白名单，其中可以指定允许在设备上浏览的链接列表。例如，从我们的自定义应用程序中打开短信应用程序：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Or simple web pages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 或简单的网页：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can also enforce a **Content Security Policy** (**CSP**) ([http://content-securitypolicy.com/](http://content-securitypolicy.com/))
    on your app as well using this plugin. All you need to do is add a `meta` tag
    to the `www/index.html` file, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用此插件在应用程序上强制执行**内容安全策略**（**CSP**）（[http://content-securitypolicy.com/](http://content-securitypolicy.com/)）。您只需要在`www/index.html`文件中添加`meta`标签，如下所示：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This was a quick tour of the Whitelist plugin. This plugin is applicable to:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是白名单插件的快速介绍。此插件适用于：
- en: Android 4.0.0 or above
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 4.0.0或更高版本
- en: iOS 4.0.0 or above
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 4.0.0或更高版本
- en: Do remember to add this plugin and configure it; otherwise, external links will
    not work.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住添加并配置此插件；否则，外部链接将无法工作。
- en: Working with Cordova plugins using Ionic Native
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ionic Native处理Cordova插件
- en: In the earlier example, we have already seen how we can integrate a device feature
    such as battery status with our Ionic app. Now, we are going to explore a few
    more such plugins and see how we can implement them.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们已经看到了如何将设备功能（例如电池状态）与我们的Ionic应用程序集成。现在，我们将探索更多类似的插件，并看看如何实现它们。
- en: Device
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备
- en: The first plugin we are going to look at in this section is the device plugin.
    This plugin describes the device's hardware and software specifications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中首先查看的插件是设备插件。此插件描述了设备的硬件和软件规格。
- en: 'You can know more about this plugin here: [https://github.com/apache/cordova-plugin-device](https://github.com/apache/cordova-plugin-device)
    or [https://ionicframework.com/docs/native/device/](https://ionicframework.com/docs/native/device/).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处了解有关此插件的更多信息：[https://github.com/apache/cordova-plugin-device](https://github.com/apache/cordova-plugin-device)或[https://ionicframework.com/docs/native/device/](https://ionicframework.com/docs/native/device/)。
- en: 'Let us scaffold a new blank app and then add the device plugin to it:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们搭建一个新的空白应用程序，然后向其中添加设备插件：
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Once the app is scaffolded, `cd` into the `example16` folder. Now we will add
    the device plugin, run the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序搭建完成后，`cd`进入`example16`文件夹。现在我们将添加设备插件，运行以下命令：
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will add the device plugin. Once that is done, we will add the Ionic native
    device module. Run the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加设备插件。完成后，我们将添加Ionic本机设备模块。运行以下命令：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once the module is added, we need to mark it as a provider in `example16/src/app/app.module.ts`.
    Update `example16/src/app/app.module.ts` as shown:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 添加模块后，我们需要在`example16/src/app/app.module.ts`中将其标记为提供者。按照以下方式更新`example16/src/app/app.module.ts`：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Next, we will add either the iOS or the Android platform by running `ionic platform
    add ios` or `ionic platform add android`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行`ionic platform add ios`或`ionic platform add android`来添加iOS或Android平台之一。
- en: 'Now, we will add the code relevant to the device plugin. Open `example16/src/pages/home/home.ts`
    and update the class as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加与设备插件相关的代码。打开`example16/src/pages/home/home.ts`并按照以下方式更新类：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, update `example16/src/pages/home/home.html` as shown:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式更新`example16/src/pages/home/home.html`：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Save all the files and, finally, run `ionic emulate ios` or `ionic emulate
    android`. We should see the following output:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，最后运行`ionic emulate ios`或`ionic emulate android`。我们应该看到以下输出：
- en: '![](img/00087.gif)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.gif)'
- en: As you can see from the preceding screenshot, the device is a Nexus 6P.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，设备是Nexus 6P。
- en: Toast
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 吐司
- en: The next plugin we are going to work with is the Toast plugin. This plugin shows
    text popups that do not block the user's interaction with the app.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的下一个插件是Toast插件。此插件显示文本弹出窗口，不会阻止用户与应用程序的交互。
- en: 'You can learn more about this plugin here: [https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin)
    or [https://ionicframework.com/docs/native/toast/](https://ionicframework.com/docs/native/toast/).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里了解有关此插件的更多信息：[https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin)或[https://ionicframework.com/docs/native/toast/](https://ionicframework.com/docs/native/toast/)。
- en: 'We will scaffold a new blank app using the following command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令搭建一个新的空白应用程序：
- en: '[PRE39]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once the app is scaffolded, `cd` into the `example17` folder. Now we will add
    the Toast plugin, run:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序搭建完成后，`cd`进入`example17`文件夹。现在我们将添加Toast插件，运行：
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then we will add the Ionic Native Toast module:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将添加Ionic Native Toast模块：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, we will add Toast as a provider in `example17/src/app/app.module.ts`.
    Update `example17/src/app/app.module.ts` as shown:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`example17/src/app/app.module.ts`中将Toast添加为提供者。按照以下方式更新`example17/src/app/app.module.ts`：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过运行以下命令添加iOS或Android平台之一：
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Or:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we will add the code relevant to the Toast plugin. Open `example17/src/pages/home/home.ts`
    and update as the file shown:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加与Toast插件相关的代码。打开`example17/src/pages/home/home.ts`并按照文件中所示进行更新：
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Save all the files and run:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并运行：
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And you should see the following output:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/00088.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: 'To know more about the Toast plugin API methods, refer to: [http://ionicframework.com/docs/native/toast/](http://ionicframework.com/docs/native/toast/).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Toast插件API方法的更多信息，请参阅：[http://ionicframework.com/docs/native/toast/](http://ionicframework.com/docs/native/toast/)。
- en: Dialogs
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话框
- en: The next plugin we are going to work with is the dialogs plugin. This triggers
    the alert, confirm, and prompt windows.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要使用的插件是对话框插件。这会触发警报、确认和提示窗口。
- en: 'You can learn more about the plugin from here: [https://github.com/apache/cordova-plugin-dialogs](https://github.com/apache/cordova-plugin-dialogs)
    and [https://ionicframework.com/docs/native/dialogs/](https://ionicframework.com/docs/native/dialogs/).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这里了解有关插件的更多信息：[https://github.com/apache/cordova-plugin-dialogs](https://github.com/apache/cordova-plugin-dialogs)
    和 [https://ionicframework.com/docs/native/dialogs/](https://ionicframework.com/docs/native/dialogs/)。
- en: 'First, scaffold a new blank app for the dialogs plugin:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为对话框插件搭建一个新的空白应用程序：
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Once the app is scaffolded, `cd` into the `example18` folder. Now we will add
    the dialogs plugin, run:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序搭建完成后，`cd`进入`example18`文件夹。现在，我们将添加对话框插件，运行：
- en: '[PRE48]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After that, we will add the Ionic Native module for dialogs. Run the following
    command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将为对话框添加Ionic Native模块。运行以下命令：
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, add Dialogs as a provider. Update `example18/src/app/app.module.ts` as
    mentioned:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将对话框添加为提供者。按照以下步骤更新`example18/src/app/app.module.ts`：
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过运行以下命令添加iOS或Android平台之一：
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Or:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, we will add the code relevant to the Dialog plugin. Open `example18/src/pages/home/home.ts`
    and update as the file with the code mentioned:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加与对话框插件相关的代码。打开`example18/src/pages/home/home.ts`并更新为所述的代码文件：
- en: '[PRE53]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Next, we will update `example18/src/pages/home/home.html` as shown:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将按照以下方式更新`example18/src/pages/home/home.html`：
- en: '[PRE54]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Save all the files and, finally, run the following command:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，最后运行以下命令：
- en: '[PRE55]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We should see the following output:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '![](img/00089.jpeg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: 'To learn more about the dialogs plugin API methods, refer to: [https://ionicframework.com/docs/native/dialogs/](https://ionicframework.com/docs/native/dialogs/).'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关对话框插件API方法的更多信息，请参阅：[https://ionicframework.com/docs/native/dialogs/](https://ionicframework.com/docs/native/dialogs/)。
- en: Local notifications
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地通知
- en: The next plugin we are going to work with is the local notification plugin.
    This plugin is primarily used to notify or remind users about an activity related
    to an app. Sometimes, notifications are also shown when a background activity
    is going on such as, a large file upload.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要使用的插件是本地通知插件。该插件主要用于通知或提醒用户与应用相关的活动。有时，当后台活动正在进行时，也会显示通知，比如大文件上传。
- en: 'You can learn more about the plugin from here: [https://github.com/katzer/cordova-plugin-local-notifications](https://github.com/katzer/cordova-plugin-local-notifications)
    and [https://ionicframework.com/docs/native/local-notifications/](https://ionicframework.com/docs/native/local-notifications/).'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这里了解有关插件的更多信息：[https://github.com/katzer/cordova-plugin-local-notifications](https://github.com/katzer/cordova-plugin-local-notifications)
    和 [https://ionicframework.com/docs/native/local-notifications/](https://ionicframework.com/docs/native/local-notifications/)。
- en: 'First, scaffold a new blank app for the local notification plugin:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为本地通知插件搭建一个新的空白应用程序：
- en: '[PRE56]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Once the app is scaffolded, `cd` into the `example19` folder. Now, we will
    add the local notification plugin, run the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序搭建完成后，`cd`进入`example19`文件夹。现在，我们将添加本地通知插件，运行以下命令：
- en: '[PRE57]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Next, add the Ionic Native module:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加Ionic Native模块：
- en: '[PRE58]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'And update the providers in `example19/src/app/app.module.ts`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 并在`example19/src/app/app.module.ts`中更新提供者：
- en: '[PRE59]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过运行以下命令添加iOS或Android平台之一：
- en: '[PRE60]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Or:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE61]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, we will add the code relevant to the local notifications plugin. Open
    `example19/src/pages/home/home.ts` and update as shown:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加与本地通知插件相关的代码。打开`example19/src/pages/home/home.ts`并按照以下方式更新：
- en: '[PRE62]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, we will update `example19/src/pages/home/home.html` as shown:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将按照以下方式更新`example19/src/pages/home/home.html`：
- en: '[PRE63]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Save all the files and run the following command:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，然后运行以下命令：
- en: '[PRE64]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Or:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE65]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We should see the following output:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '![](img/00090.gif)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.gif)'
- en: 'Now, when we look at that notification bar, we should see the local notification:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们查看通知栏时，应该看到本地通知：
- en: '![](img/00091.jpeg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: 'To learn more about the dialogs plugin API methods, refer to: [https://ionicframework.com/docs/native/local-notifications/](https://ionicframework.com/docs/native/local-notifications/).'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关对话框插件API方法的更多信息，请参阅：[https://ionicframework.com/docs/native/local-notifications/](https://ionicframework.com/docs/native/local-notifications/)。
- en: Geolocation
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理位置
- en: The final plugin we are going to take a look at is the Geolocation plugin, which
    helps to fetch the coordinates of the device.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要查看的最后一个插件是地理位置插件，它可以帮助获取设备的坐标。
- en: 'You can know more about the plugin from here: [https://github.com/apache/cordova-plugin-geolocation](https://github.com/apache/cordova-plugin-geolocation)
    and [https://ionicframework.com/docs/native/geolocation/](https://ionicframework.com/docs/native/geolocation/).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这里了解有关插件的更多信息：[https://github.com/apache/cordova-plugin-geolocation](https://github.com/apache/cordova-plugin-geolocation)
    和 [https://ionicframework.com/docs/native/geolocation/](https://ionicframework.com/docs/native/geolocation/)。
- en: 'First, scaffold a new blank app for the Geolocation plugin:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为地理位置插件搭建一个新的空白应用程序：
- en: '[PRE66]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Once the app is scaffolded, `cd` into the `example20` folder. Now we will add
    the Geolocation plugin, run the following command:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序搭建完成后，`cd`进入`example20`文件夹。现在，我们将添加地理位置插件，运行以下命令：
- en: '[PRE67]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, run the following command to add the Ionic Native module:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令以添加Ionic Native模块：
- en: '[PRE68]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, we register the provider. Update `example20/src/app/app.module.ts`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们注册提供者。更新`example20/src/app/app.module.ts`：
- en: '[PRE69]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Once that is done, add either the iOS or the Android platform by running:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，通过运行以下命令添加iOS或Android平台之一：
- en: '[PRE70]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Or:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE71]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, we will add the code relevant to the Geolocation plugin. Open `example20/src/pages/home/home.ts`
    and update with the following:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加与地理位置插件相关的代码。打开`example20/src/pages/home/home.ts`并更新如下：
- en: '[PRE72]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Next, update `example20/src/pages/home/home.html` as shown in the following
    code:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下代码更新`example20/src/pages/home/home.html`：
- en: '[PRE73]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Save all the files and finally run the following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，最后运行以下命令：
- en: '[PRE74]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Or:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE75]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'We should see the following output:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够看到以下输出：
- en: '![](img/00092.jpeg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: 'Once the permission is provided, we should see the values as shown in the following
    screenshot:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦权限被提供，我们应该能够看到以下截图中显示的值：
- en: '![](img/00093.gif)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.gif)'
- en: 'My Google Nexus 6P runs Android Nougat, which has a new feature called runtime
    permissions. This allows a user to give permission at runtime rather than while
    installing the app. You can learn more about that feature here: [https://developer.android.com/training/permissions/requesting.html](https://developer.android.com/training/permissions/requesting.html).'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我的Google Nexus 6P运行Android Nougat，其中有一个名为运行时权限的新功能。这允许用户在运行时而不是在安装应用程序时给予权限。您可以在这里了解更多关于该功能的信息：[https://developer.android.com/training/permissions/requesting.html](https://developer.android.com/training/permissions/requesting.html)。
- en: 'To learn more about the Geolocation plugin API methods, refer to: [https://ionicframework.com/docs/native/geolocation/](https://ionicframework.com/docs/native/geolocation/).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Geolocation插件API方法的更多信息，请参考：[https://ionicframework.com/docs/native/geolocation/](https://ionicframework.com/docs/native/geolocation/)。
- en: The preceding examples should have provided a good insight into how you can
    use Ionic Native.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子应该已经很好地展示了你如何使用Ionic Native。
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen what Cordova plugins are, and how they can be
    used in an existing Ionic app. We started off by setting up a local development
    environment for Android and iOS, and then we learned how to emulate and run an
    Ionic app. Next, we explored how to add Cordova plugins to an Ionic project and
    use them. Finally, with the aid of Ionic Native, we injected plugins in our Ionic
    app and worked with them.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了Cordova插件是什么，以及它们如何在现有的Ionic应用程序中使用。我们首先建立了一个用于Android和iOS的本地开发环境，然后学习了如何模拟和运行Ionic应用程序。接下来，我们探索了如何将Cordova插件添加到Ionic项目中并使用它们。最后，借助Ionic
    Native，我们在Ionic应用程序中注入了插件并与它们一起工作。
- en: In the next chapter, we are going to use the knowledge we have gained so far
    in building an app named Riderr. Using the public API exposed by Uber, we will
    be building an app using which a rider can book an Uber ride.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用到目前为止所学到的知识来构建一个名为Riderr的应用程序。利用Uber提供的公共API，我们将构建一个应用程序，通过它，乘客可以预订Uber车辆。
