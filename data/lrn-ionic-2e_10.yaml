- en: Releasing the Ionic App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布Ionic应用
- en: 'In this chapter, we will take a look at three ways of generating the installer
    for your Ionic app. One uses the PhoneGap build service, the second uses the Cordova
    CLI, and, finally, the third uses the Ionic package service. We will generate
    installers for both Android and iOS operating systems. We will cover the following
    topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍三种为Ionic应用生成安装程序的方法。一种是使用PhoneGap构建服务，第二种是使用Cordova CLI，最后一种是使用Ionic包服务。我们将为Android和iOS操作系统生成安装程序。本章将涵盖以下主题：
- en: Generating Icons and Splash screens
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成图标和启动屏幕
- en: Validating config.xml
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证config.xml
- en: Using the PhoneGap build service to generate installers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PhoneGap构建服务生成安装程序
- en: Using the Cordova CLI to generate installers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cordova CLI生成安装程序
- en: Using Ionic package to generate service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ionic包生成服务
- en: Preparing the app for distribution
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序准备分发
- en: Now that we have successfully built our Ionic app, we want to distribute it.
    The best way to reach a wider audience is with the help of the App stores. However,
    before we start distributing the app, we will need app-specific icons and splash
    screens. Splash screens are totally optional and depend on the product idea.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功构建了Ionic应用，我们希望进行分发。通过应用商店是触及更广泛受众的最佳方式。但是，在开始分发应用之前，我们将需要特定于应用的图标和启动屏幕。启动屏幕是完全可选的，取决于产品理念。
- en: Setting up Icons & Splash screens
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置图标和启动屏幕
- en: 'By default, when you run the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当您运行以下代码时：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: or
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The CLI automatically adds a new folder named resources. You can check this
    out in [Chapter 7](part0120.html#3IE3G0-9757c8e51afd47e0a7a9ced32db749b8), *Building
    Riderr App*. The resources folder consists of either Ionic or Android or both
    the subfolders, depending on how many platforms you have added, and in each of
    these folders, you will see two subfolders, named icon and splash.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: CLI会自动添加一个名为资源的新文件夹。您可以在[第7章](part0120.html#3IE3G0-9757c8e51afd47e0a7a9ced32db749b8)中查看这一点，*构建Riderr应用*。资源文件夹包括Ionic或Android或两者的子文件夹，具体取决于您添加了多少个平台，在每个文件夹中，您将看到两个名为图标和启动的子文件夹。
- en: You can keep the splash folder if your app uses splash screens, else delete
    the folder to save a few bytes of your final app installer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序使用启动屏幕，则可以保留启动文件夹，否则删除该文件夹以节省最终应用程序安装程序的几个字节。
- en: 'To generate icons, you can get a copy of your icon greater than 1024 x 1024
    and use any service, such as the following, to generate icons and splash screens
    for both Android and iOS:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成图标，您可以获取大于1024 x 1024的图标副本，并使用任何服务，例如以下服务，为Android和iOS生成图标和启动屏幕：
- en: '[http://icon.angrymarmot.org/](http://icon.angrymarmot.org/)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://icon.angrymarmot.org/](http://icon.angrymarmot.org/)'
- en: '[http://makeappicon.com/](http://makeappicon.com/)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://makeappicon.com/](http://makeappicon.com/)'
- en: I have no association with any of the preceding services. You use these services
    at your own risk.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我与上述任何服务都没有关联。您使用这些服务需自担风险。
- en: 'Alternatively, the best part is that you can place a file named `icon.png`
    and `splash.png` in the resources folder and run the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更好的是，您可以将名为`icon.png`和`splash.png`的文件放在资源文件夹中，并运行以下代码：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will take care of uploading your images to the Ionic cloud, resizing them
    as needed, and saving them back to the resources folder.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将负责将您的图像上传到Ionic云，根据需要调整其大小，并将其保存回资源文件夹。
- en: Be aware that you are uploading your content into a public/Ionic cloud.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您正在将内容上传到公共/ Ionic云中。
- en: 'If you want to convert only icons, you can use the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想转换图标，可以使用以下方法：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For only splash screens, you can use this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只需要启动屏幕，可以使用以下方法：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can use [http://code.ionicframework.com/resources/icon.psd](http://code.ionicframework.com/resources/icon.psd)
    to design your icon and [http://code.ionicframework.com/resources/splash.psd](http://code.ionicframework.com/resources/splash.psd)
    to design your splash screens.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[http://code.ionicframework.com/resources/icon.psd](http://code.ionicframework.com/resources/icon.psd)来设计您的图标，使用[http://code.ionicframework.com/resources/splash.psd](http://code.ionicframework.com/resources/splash.psd)来设计您的启动屏幕。
- en: You can place an `icon.png` image, an `icon.psd` file, or an icon.ai file at
    the root of the resources folder and ionic resources will do the magic!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`icon.png`图像，`icon.psd`文件或icon.ai文件放在资源文件夹的根目录，ionic资源将会自动处理！
- en: Updating the config.xml
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新config.xml
- en: 'As we already know, `config.xml` is the single source of truth that the Cordova
    API trusts while generating the OS-specific installers. So, this file needs to
    be validated thoroughly before we start the deployment process. You can follow
    the checklist to ensure that all the things are in place:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我们已经知道的那样，`config.xml`是Cordova API信任的唯一真相来源，用于生成特定于操作系统的安装程序。因此，在我们开始部署过程之前，需要对此文件进行彻底验证。您可以按照清单来确保所有事情都就绪：
- en: Widget ID is defined and valid
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件ID已定义并有效
- en: Widget Version is defined and valid
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件版本已定义并有效
- en: In the case of an app update, Widget Version is updated and valid
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用更新的情况下，小部件版本已更新并有效
- en: Name tag is defined and valid
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称标签已定义并有效
- en: Description is defined and valid
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述已定义并有效
- en: Author information is defined and valid
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者信息已定义并有效
- en: Access tag is defined and is limited to the required domains ([https://github.com/apache/cordova-plugin-whitelist#network-request-whitelist](https://github.com/apache/cordova-plugin-whitelist#network-request-whitelist))
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问标签已定义并且限制在所需的域内（[https://github.com/apache/cordova-plugin-whitelist#network-request-whitelist](https://github.com/apache/cordova-plugin-whitelist#network-request-whitelist)）
- en: Allow Navigation is defined and is limited to the required domains ([https://github.com/apache/cordova-plugin-whitelist#navigation-whitelist](https://github.com/apache/cordova-plugin-whitelist#navigation-whitelist))
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许导航已定义并且限制在所需的域内（[https://github.com/apache/cordova-plugin-whitelist#navigation-whitelist](https://github.com/apache/cordova-plugin-whitelist#navigation-whitelist)）
- en: Allow Intent is defined and is limited to the required domains ([https://github.com/apache/cordova-plugin-whitelist#intent-whitelist](https://github.com/apache/cordova-plugin-whitelist#intent-whitelist))
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许意图已定义并且限制在所需的域内（[https://github.com/apache/cordova-plugin-whitelist#intent-whitelist](https://github.com/apache/cordova-plugin-whitelist#intent-whitelist)）
- en: Cross-check the preferences
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交叉检查偏好设置
- en: Cross-check the icons and splash image's path
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交叉检查图标和启动图片的路径
- en: Cross-check the permissions if any
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交叉检查权限（如果有的话）
- en: Update `index.html` with the content security policy meta tag ([https://github.com/apache/cordova-plugin-whitelist#content-security-policy](https://github.com/apache/cordova-plugin-whitelist#content-security-policy))
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内容安全策略元标记（[https://github.com/apache/cordova-plugin-whitelist#content-security-policy](https://github.com/apache/cordova-plugin-whitelist#content-security-policy)）更新`index.html`
- en: Once the preceding points are verified, we will get started with the installer
    generation process.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦以上点都经过验证，我们将开始安装程序生成过程。
- en: The PhoneGap build service
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PhoneGap构建服务
- en: The first approach we will take a look at is generating app installers using
    the PhoneGap build service. This is perhaps the simplest way to generate installers
    for Android and iOS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看一下使用PhoneGap构建服务生成应用程序安装程序的方法。这可能是为Android和iOS生成安装程序的最简单方法。
- en: The process is quite simple. We upload the entire project to the PhoneGap build
    service and it takes care of building the installer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程非常简单。我们将整个项目上传到PhoneGap构建服务，它会负责构建安装程序。
- en: If you think uploading the complete project is not practical, you can upload
    only the `www` folder. However, you need make the following changes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为上传完整项目不切实际，你可以只上传`www`文件夹。但是，你需要做以下更改。
- en: Move `config.xml` inside the `www` folder.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`config.xml`移动到`www`文件夹内。
- en: Move the resources folder inside the `www` folder.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资源文件夹移动到`www`文件夹内。
- en: Update the path of the resources folder in `config.xml`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config.xml`中更新资源文件夹的路径。
- en: If you find yourself doing the preceding often, I would recommend using a build
    script to generate a PhoneGap build `Deployable` folder with the preceding changes
    made to the project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常做以上操作，我建议使用一个构建脚本来生成一个带有以上更改的PhoneGap构建`Deployable`文件夹。
- en: If you are planning to release your app only for Android, you do not need to
    do anything more. However, if you are planning to generate iOS installers, you
    need to get an Apple Developer Account and follow the steps at [http://docs.build.phonegap.com/en_US/signing_signing-ios.md.html](http://docs.build.phonegap.com/en_US/signing_signing-ios.md.html)
    to generate the required certificates.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划只为Android发布你的应用程序，你不需要做任何其他事情。但是，如果你计划生成iOS安装程序，你需要获得一个苹果开发者账户，并按照[http://docs.build.phonegap.com/en_US/signing_signing-ios.md.html](http://docs.build.phonegap.com/en_US/signing_signing-ios.md.html)中的步骤生成所需的证书。
- en: You can also sign your Android app using the steps mentioned at [http://docs.build.phonegap.com/en_US/signing_signing-android.md.html](http://docs.build.phonegap.com/en_US/signing_signing-android.md.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以按照[http://docs.build.phonegap.com/en_US/signing_signing-android.md.html](http://docs.build.phonegap.com/en_US/signing_signing-android.md.html)中提到的步骤签署你的Android应用程序。
- en: 'Once you have the required certificates and keys, we are good to start generating
    the installer. You can follow the given steps to make the process easy:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有所需的证书和密钥，我们就可以开始生成安装程序了。你可以按照以下步骤使过程变得简单：
- en: Create a PhonegGap account and log in ([https://build.phonegap.com/plans](https://build.phonegap.com/plans))
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个PhoneGap账户并登录（[https://build.phonegap.com/plans](https://build.phonegap.com/plans)）
- en: Next, navigate to [https://build.phonegap.com/people/edit](https://build.phonegap.com/people/edit)
    and select the Signing Keys tab, and upload iOS and Android certificates.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到[https://build.phonegap.com/people/edit](https://build.phonegap.com/people/edit)，选择Signing
    Keys选项卡，并上传iOS和Android证书。
- en: 'Next, navigate to: [https://build.phonegap.com/apps](https://build.phonegap.com/apps)
    and click on New App. As part of the *Free plan*, you can have as many apps as
    you want as long as they are pulled from Public Git repos. Alternatively, you
    can create a private app from a Private repo or by uploading a ZIP file.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到：[https://build.phonegap.com/apps](https://build.phonegap.com/apps)，点击New
    App。作为*免费计划*的一部分，只要从公共Git存储库中拉取，你可以拥有尽可能多的应用。或者，你可以从私有存储库创建私有应用，或者通过上传ZIP文件创建。
- en: 'For testing the service, you can create a `.zip` file (not `.rar` or `.7z)`
    with the following folder structure:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试服务，你可以创建一个`.zip`文件（不是`.rar`或`.7z`），具有以下文件夹结构：
- en: '`App` (root folder)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App`（根文件夹）'
- en: '`config`.xml'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`.xml'
- en: '`resources` (folder)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`（文件夹）'
- en: '`www` (folder)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www`（文件夹）'
- en: This is all you need for the PhoneGap build to work.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是PhoneGap构建工作所需的一切。
- en: Upload the ZIP file to [https://build.phonegap.com/apps](https://build.phonegap.com/apps)
    and create the app.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件上传到[https://build.phonegap.com/apps](https://build.phonegap.com/apps)并创建应用程序。
- en: This process generally takes up to a minute to do its magic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程通常需要大约一分钟来完成它的魔力。
- en: Sometimes, you may see unexpected errors from the build service. Wait for some
    time and try again. Depending on the traffic, sometimes the build process may
    take a bit longer than expected.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能会从构建服务中看到意外的错误。等一会儿，然后再试一次。根据流量的不同，有时构建过程可能会比预期的时间长一些。
- en: Generating Installers using Cordova CLI
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cordova CLI生成安装程序
- en: We will look at creating installers using Cordova CLI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下使用Cordova CLI创建安装程序。
- en: Android installer
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android安装程序
- en: 'First, we will take a look at generating an installer for Android using the
    CLI. You can follow the given steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一下使用CLI为Android生成安装程序。你可以按照以下步骤进行：
- en: Open a new command prompt/terminal at the root of the project.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录打开一个新的命令提示符/终端。
- en: 'Remove unwanted plugins using the following:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令移除不需要的插件：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Build the app in release mode with the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在发布模式下构建应用程序：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will generate an unsigned installer in release mode and place it at `<<ionic
    project>>/platforms/android/build/outputs/apk/android-release-unsigned.apk`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在发布模式下生成一个未签名的安装程序，并将其放置在`<<ionic project>>/platforms/android/build/outputs/apk/android-release-unsigned.apk`。
- en: Next, we need to create a signing key. If you already have a signing key or
    you are updating an existing app, you can skip the next step.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个签名密钥。如果你已经有一个签名密钥，或者你正在更新一个现有的应用程序，你可以跳过下一步。
- en: 'The private key is generated using the keytool. We will create a folder named
    deploy-keys and save all these keys there. Once the folder is created, run the `cd` command
    and navigate into the folder and run this:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 私钥是使用keytool生成的。我们将创建一个名为deploy-keys的文件夹，并将所有这些密钥保存在那里。创建文件夹后，运行`cd`命令进入文件夹并运行以下命令：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will be asked the following questions, and you can answer them as shown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被问到以下问题，您可以按照所示回答：
- en: '![](img/00139.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: If you lose this file, you cannot submit updates to the app store, ever.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您丢失了此文件，您将永远无法提交更新到应用商店。
- en: 'Note: To know more about the keytool and signing process, refer to [https://developer.android.com/studio/publish/app-signing.html](https://developer.android.com/studio/publish/app-signing.html).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：要了解有关keytool和签名过程的更多信息，请参阅[https://developer.android.com/studio/publish/app-signing.html](https://developer.android.com/studio/publish/app-signing.html)。
- en: This is an optional step, you can copy the `android-release-unsigned.apk` to
    the `deploy-keys` folder and run the following commands from there too. I will
    leave the files where they are.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个可选步骤，您也可以将`android-release-unsigned.apk`复制到`deploy-keys`文件夹中，并从那里运行以下命令。我会把文件留在原地。
- en: 'Next, we sign the unsigned APK using the jarsigner tool:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用jarsigner工具对未签名的APK进行签名：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You will be asked for the passphrase, which you have entered as the first step
    while creating the keystore. Once the signing process is completed, the existing
    `android-release-unsigned.apk` will be replaced with the signed version of the
    same name.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将要求输入密码，这是您在创建密钥库时的第一步输入的密码。签名过程完成后，现有的`android-release-unsigned.apk`将被替换为同名的已签名版本。
- en: We run the preceding command from inside the deploy-keys folder.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在从deploy-keys文件夹内运行上述命令。
- en: 'Finally, we run the `zipalign` tool to optimize the APK:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们运行`zipalign`工具来优化APK：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding command will create `my-ionic-app.apk` in the `deploy-keys` folder.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在`deploy-keys`文件夹中创建`my-ionic-app.apk`。
- en: Now, you can submit this APK to the app store.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将此APK提交到应用商店。
- en: iOS installer
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS安装程序
- en: 'Next, we will generate an installer for iOS using XCode. You can follow the
    given steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用XCode为iOS生成安装程序。您可以按照给定的步骤进行：
- en: Open a new command prompt/terminal at the root of the project.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录打开新的命令提示符/终端。
- en: 'Remove unwanted plugins:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除不需要的插件：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Navigate to platforms/iOS and launch the `projectname.xcodeproj` using XCode.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到platforms/iOS并使用XCode启动`projectname.xcodeproj`。
- en: Once the project is inside XCode, select Product and then Archive from the navigation
    menu.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目在XCode中，选择产品，然后从导航菜单中选择存档。
- en: Next, select Window and select Organizer from the navigation menu. You will
    be shown a list of archives created.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择窗口并从导航菜单中选择组织者。您将看到一个创建的存档列表。
- en: Click on the archive snapshot we have created now, and click on Submit. The
    validation of your account is performed and then the app will be uploaded to iStore.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们现在创建的快照存档，然后点击提交。进行帐户验证，然后应用将被上传到iStore。
- en: Finally, you need to log in to the iTunes store to set up screenshots, a description,
    and more.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要登录iTunes商店设置截图、描述等。
- en: This concludes the process of generating installers using the Cordova CLI.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了使用Cordova CLI生成安装程序的过程。
- en: Ionic package
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离子包
- en: In this section, we will look at Ionic package.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下Ionic Package。
- en: Uploading a project to Ionic cloud
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传项目到Ionic云
- en: 'Using Ionic cloud services to generate installers is quite simple. First, we
    upload our app to our Ionic account by running the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ionic云服务生成安装程序非常简单。首先，我们通过运行以下命令将我们的应用上传到我们的Ionic帐户：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Log in to your Ionic account before executing the preceding command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上述命令之前，请登录您的Ionic帐户。
- en: If your project has sensitive information, cross-check with Ionic license before
    uploading the app to the cloud.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目涉及敏感信息，请在将应用上传到云之前与Ionic许可证进行交叉检查。
- en: Once the app is uploaded, an app ID will be generated for your app. You can
    find the app ID in the `ionic.config.json` file located at the root of the project.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上传应用后，将为您的应用生成一个应用ID。您可以在项目根目录下的`ionic.config.json`文件中找到应用ID。
- en: Generating the required keys
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成所需的密钥
- en: You need to follow Step 5 in the Generating Installers using Cordova CLI section,
    the Android Installer subsection, to get the keystore file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要按照“使用Cordova CLI生成安装程序”部分的第5步，Android安装程序子部分，获取密钥库文件。
- en: 'Next, we use the ionic package command to generate the installer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用ionic package命令生成安装程序：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The options will consist of the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 选项将包括以下内容：
- en: '![](img/00140.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: 'For instance, if you would like to generate an installer for Android in release
    mode, it will be as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想要以发布模式为Android生成安装程序，将如下所示：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are running the preceding command from inside the deploy-keys folder.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在从deploy-keys文件夹内运行上述命令。
- en: 'Similarly, the preceding command for iOS will be as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，iOS的上述命令将如下所示：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to release and manage an Ionic app. We saw how to
    generate installers using the PhoneGap build service, using Cordova CLI, and,
    finally, using Ionic Package.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何发布和管理Ionic应用。我们看到了如何使用PhoneGap构建服务、使用Cordova CLI以及最后使用Ionic Package生成安装程序。
- en: In the next chapter, we will look at Ionic 3 and the key differences between
    Ionic 2 and Ionic 3.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下Ionic 3和Ionic 2与Ionic 3之间的主要区别。
- en: Note that almost all the concepts we learned so far are still applicable in
    Ionic 3 as well.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，到目前为止我们学到的几乎所有概念在Ionic 3中仍然适用。
