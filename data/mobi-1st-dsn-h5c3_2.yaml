- en: Chapter 2. Building the Home Page
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。构建主页
- en: 'In this chapter, we are going to start using the 320 and Up framework to immediately
    get started on building the home page of our example portfolio site. We will start
    off with some basics of where specific code goes and why. We will then quickly
    move on to building our page with many of the typical elements of a portfolio
    home page: navigation, hero/slider, and a triplet of content panels. If you don''t
    know what these terms mean, don''t worry, you will soon!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将开始使用320 and Up框架，立即开始构建我们示例作品网站的主页。我们将从一些基础知识开始，了解特定代码放在哪里以及为什么。然后我们将快速转移到构建我们的页面，包括作品主页的许多典型元素：导航、主页/幻灯片和三个内容面板。如果你不知道这些术语的含义，不要担心，你很快就会知道的！
- en: If you have successfully downloaded and unzipped all the code from the link
    at the end of [Chapter 1](ch01.html "Chapter 1. Mobile First – How and Why?"),
    *Mobile First – How and Why?*, you are ready to go. If not, go back and use the
    link there to download the sample code and return.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经成功下载并解压了[第1章](ch01.html "第1章。移动优先-如何以及为什么？")结尾处的链接中的所有代码，*移动优先-如何以及为什么？*，你已经准备好了。如果没有，请返回并使用链接下载示例代码。
- en: Preparing and planning your workspace
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备和规划你的工作空间
- en: 'Everyone has preferred methods for where they keep their code and how they
    organize it, and there are a lot of conventions in web development about organization
    that are great to know about. Ultimately, if you have a workflow you like for
    working with code, especially code from tutorials, please just go ahead and use
    it. But for those of you who don''t, I suggest you place the code you download
    in some kind of working directory where you keep (or plan to keep) all web projects.
    I typically keep all my web code in a directory I call `work` in my `home` folder.
    So on a Unix or Mac OS X machine, it would look like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都有自己喜欢的代码存放方法和组织方式，网页开发中有很多关于组织的惯例，了解这些惯例是很好的。如果你有自己喜欢的工作流程，尤其是从教程中获取代码的工作流程，请继续使用。但是对于那些没有喜好的人，我建议你把下载的代码放在一个工作目录中，你可以在那里保存（或计划保存）所有的网页项目。我通常把所有的网页代码放在一个名为`work`的目录中。所以在Unix或Mac
    OS X机器上，它看起来是这样的：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A few last notes about where to put your code. If you are using this book specifically
    for the purpose of building something you want to deploy and use, you may only
    want to use the sample code as a reference and build your project using only the
    320 and Up framework files provided. However, ensure that you put all of it in
    a directory named something other than 320 and Up.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于放置代码的一些建议。如果你使用这本书特别是为了构建你想要部署和使用的东西，你可能只想使用示例代码作为参考，并仅使用320 and Up框架提供的文件来构建你的项目。但是，请确保你把所有这些放在一个名为320
    and Up之外的目录中。
- en: Regardless of how you proceed from your end, I will provide the before and after
    code in every chapter so that you can have a template of sorts to get started
    and also an example of the final product that we will have by the end of this
    chapter. If you're just getting started and all this confuses you, just copy the
    code and edit it. You can always download a fresh copy if you need it later.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何进行，我都会在每一章提供之前和之后的代码，这样你就可以有一个模板来开始，也可以看到我们在本章结束时将会得到的最终产品的示例。如果你刚开始并且对此感到困惑，只需复制代码并进行编辑。如果以后需要，你可以随时下载一个新的副本。
- en: If you look inside the `ch2` directory, you should see the two folders `before`
    and `after`. From here on, I am going to assume that you will take the simplest
    route and directly edit the `before` files. But please do carry on with your preferred
    way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`ch2`目录，你应该会看到两个文件夹`before`和`after`。从现在开始，我假设你会选择最简单的方式直接编辑`before`文件。但是请按照你喜欢的方式继续。
- en: 'Go ahead and move to or look into the `before` directory. You will see the
    `320andup` folder that I cloned from Andy Clarke''s GitHub repository (`repo`).
    All I did was change location into the `before` directory by typing the following
    command line:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前往或查看`before`目录。你会看到我从Andy Clarke的GitHub仓库（`repo`）克隆下来的`320andup`文件夹。我所做的就是通过输入以下命令行来切换到`before`目录：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then I cloned the code from the repo:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我从仓库克隆了代码：
- en: '`git clone git@github.com:malarkey/320andup.git`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone git@github.com:malarkey/320andup.git`'
- en: If you don't want to mess around with any of this, just use the code I have
    provided. I just want you to know how I got the code there.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想去研究这些，就直接使用我提供的代码。我只是想让你知道我是如何把代码放在那里的。
- en: Once you look inside the `320andup` folder, you will see a lot of files. Don't
    get stressed out. I will explain what we are working with as we go. And some of
    the files we simply won't use. If you were going to deploy this code, I would
    encourage you to go through some kind of production process to deploy only the
    code you really need. That is beyond the scope of this book though, because we
    will focus exclusively on building.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你查看了`320andup`文件夹的内容，你会看到很多文件。不要感到压力。我会在我们进行时解释我们正在使用的内容。而且我们有些文件根本不会用到。如果你要部署这些代码，我鼓励你进行某种生产过程，只部署你真正需要的代码。不过，这本书的范围超出了这一点，因为我们将专注于构建。
- en: Planning ahead
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提前规划
- en: I know you are probably excited to get started on writing some code, but first
    we need to do a bit of planning on what it is we will be building. When I prepare
    to build a site, this is what I do first so that I have a reference for what I
    am building with code. It's good practice; you don't want to just wing it. But
    it also gets more complicated when you are building a responsive site.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你可能很兴奋地开始编写一些代码，但首先我们需要对我们将要构建的内容进行一些规划。当我准备构建一个网站时，这是我首先要做的，这样我就有了一个构建代码的参考。这是一个好的实践；你不想随意尝试。但是当你构建一个响应式网站时，情况也会变得更加复杂。
- en: 'That said, here is the formula we will follow for each page that we will build:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，这是我们将遵循的每个页面的公式：
- en: Describe the elements we want on the page and their hierarchy.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述我们想要的页面元素及其层次结构。
- en: Draw some simple pictures (called **wireframes**) of the elements on the page
    for all the different screen sizes we are coding to.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们需要编码的所有不同屏幕尺寸的页面元素（称为**线框图**）绘制一些简单的图片。
- en: Write some code for a 320 px wide screen (with some thinking ahead).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为320像素宽的屏幕编写一些代码（并提前考虑）。
- en: Write some code for the other screen sizes we need to code for.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们需要编码的其他屏幕尺寸编写一些代码。
- en: 'Let''s start with step 1\. Our portfolio site is going to have the following
    elements on the home page:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一步开始。我们的作品集网站首页将包括以下元素：
- en: Navigation menu
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航菜单
- en: Hero/slider
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主页/幻灯片
- en: Triad of content panels
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容面板三合一
- en: Footer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚
- en: 'This is a fairly effective page layout for a portfolio site but it can work
    just as well for a company website. Before even designing a page, we should take
    a moment to plan out what the page content will look like in a really abstract
    way. Typically, the best way to represent this is with a wireframe. A wireframe
    should show where the content is placed on the page as well as the relative size.
    Here is what our site looks like as a desktop layout:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当有效的作品集网站页面布局，但对于公司网站也同样有效。在设计页面之前，我们应该花一点时间以一种非常抽象的方式规划页面内容会是什么样子。通常，最好的表示方法是用线框图。线框图应该显示内容放置在页面上的位置以及相对大小。这是我们的网站作为台式机布局的样子：
- en: '![Planning ahead](img/6463_02_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![提前规划](img/6463_02_03.jpg)'
- en: I quickly made that image in Photoshop, but you can easily do it in any image
    editor (in fact, many of my colleagues and I really like doing it with simple
    collaborative image editors, such as the one in Google Drive). You might want
    to take a moment right now to make your own image if you are making something
    that is different from this example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我很快就在Photoshop中制作了那张图片，但你可以在任何图片编辑器中轻松完成（事实上，我和许多同事都非常喜欢使用简单的协作图片编辑器，比如Google
    Drive中的编辑器）。如果你正在制作与这个示例不同的东西，你可能想现在花点时间制作你自己的图片。
- en: The important thing in this phase is not to think about dimensions just yet
    (but that will come soon), and think instead about each kind of content and evaluate
    its importance with regard to the purpose of the site. The purpose of this portfolio
    site is to showoff our work so that we can get hired. To achieve that end, we've
    decided to have a home page, a gallery page, a contact form, and an **About Me**
    page. Not groundbreaking, but pretty effective. Next, let's examine how the home
    page can support the purpose of the site.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，重要的是暂时不要考虑尺寸（但很快会考虑），而是考虑每种内容类型，并评估它对网站目的的重要性。这个作品集网站的目的是展示我们的作品，以便我们能够被雇佣。为了实现这一目标，我们决定有一个主页、一个画廊页面、一个联系表格和一个**关于我**页面。并不是开创性的，但相当有效。接下来，让我们看看主页如何支持网站的目的。
- en: Navigation
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: 'On the home page, the navigation area will link to those pages I listed in
    the previous section:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在首页上，导航区将链接到我在上一节中列出的那些页面：
- en: '**A logo**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标志**'
- en: '**Home**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首页**'
- en: '**Gallery**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**画廊**'
- en: '**Contact**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**联系**'
- en: '**About Me**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于我**'
- en: Hero/slider
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主页/幻灯片
- en: This area is large and eye-catching. Let's plan to put some bold images and/or
    text here to drive people to the gallery work we want to highlight as well as
    the contact form.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个区域很大，很吸引人。让我们计划在这里放一些大胆的图片和/或文本，以吸引人们去浏览我们想要突出的画廊作品以及联系表格。
- en: Content panels
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容面板
- en: 'These areas should highlight the purpose of the site. I think that these areas
    are for those who will take the initiative to scroll down. In other words, those
    willing to scroll down are curious and we should supply them with more details
    about the purpose of the site. For example, my content might highlight three skill
    areas: frontend engineering, user experience, and visual design. Since I am mainly
    a frontend engineer, it is the highest priority; the next priority being user
    experience and the last being visual design. While all three will be visible at
    once on a desktop or a larger tablet, we can''t comfortably fit all three in view
    on smaller tablets and mobiles.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些区域应该突出网站的目的。我认为这些区域是为那些愿意往下滚动的人准备的。换句话说，愿意往下滚动的人是好奇的，我们应该为他们提供有关网站目的的更多细节。例如，我的内容可能突出三个技能领域：前端工程、用户体验和视觉设计。由于我主要是前端工程师，它是最优先的；其次是用户体验，最后是视觉设计。虽然在台式机或较大的平板电脑上可以同时看到这三个，但在较小的平板电脑和手机上，我们无法舒适地同时看到这三个。
- en: For yourself, think carefully about the three areas you want to highlight. It's
    common to dedicate a panel to social media integration as well. Whatever you decide
    on, make sure it gives more detail and doesn't just repeat the same content on
    the page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你自己，仔细考虑一下你想要突出的三个领域。通常会将一个面板专门用于社交媒体整合。无论你决定了什么，确保它提供更多细节，而不仅仅是重复页面上相同的内容。
- en: Footer
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页脚
- en: The footer will have a short statement and a link at the top for the purpose
    of getting back to the main navigation. There's a really good reason to have a
    link to the top, especially on mobiles. On a mobile device, we need to provide
    an easy way for users to navigate from the top to the bottom of the page without
    having to manually scroll.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚将有一个简短的声明和一个顶部的链接，目的是返回主导航。特别是在手机上，有一个返回顶部的链接是非常重要的。在移动设备上，我们需要为用户提供一种方便的方式，让他们能够从页面顶部导航到底部，而不必手动滚动。
- en: Ok, now we have our content prioritized and categorized, but you should have
    noticed a problem with the wireframe. I started with a desktop view but this book
    is mainly about designing for mobiles first, right? The reason I made that wireframe
    first is because I assume that most readers have designed a desktop page before
    moving on to mobile designs. In fact, it is common to only design for the desktop
    view! From here on, we will strictly be focusing on mobiles first. I promise!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经对我们的内容进行了优先排序和分类，但你应该已经注意到线框图中的一个问题。我从台式机视图开始，但这本书主要是关于首先为手机设计，对吧？我之所以首先制作那个线框图，是因为我假设大多数读者在转向移动设计之前已经设计过台式机页面。事实上，只设计台式机视图是很常见的！从现在开始，我们将严格专注于首先设计手机。我保证！
- en: 'So knowing what our content is, we now need to make a layout that will work
    for mobiles. First, I''ll show you what I think our layout should be and then
    explain the reason. Here it is:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，知道我们的内容是什么，现在我们需要制作一个适用于移动设备的布局。首先，我会向您展示我认为我们的布局应该是什么，然后解释原因。就是这样：
- en: '![Footer](img/6463_02_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![页脚](img/6463_02_04.jpg)'
- en: Notice that we have to account for the address bar and the toolbar. Keep in
    mind that we aren't only designing for the iPhone. I just made that as a quick
    example, mostly because it is familiar to so many. The point is, on mobiles not
    only are you dealing with a small screen, you can't even count on getting all
    of the small screen since most mobile web browsers need some "chrome" for address
    and toolbar. There are some things we can do to try to reclaim that real estate,
    but more on that later. For now, we need to make a pessimistic assumption in order
    to plan our layout. And if we are using the currently very popular iPhone 4/4S's
    mobile Safari browser as an example, we only have 320 px by 376 px to work with
    because we use 60 px for the address bar and 44 px for the toolbar. The iPhone
    5 is taller by about 88 px. To repeat though, we are not designing this just for
    the iPhone. We are looking at this example mainly to make a point—you can't necessarily
    fit a lot of content in the viewport.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们必须考虑地址栏和工具栏。请记住，我们不仅仅是为iPhone设计。我只是以它作为一个快速的例子，主要是因为它对很多人来说很熟悉。重点是，在移动设备上，您不仅要处理小屏幕，而且甚至不能指望获得所有小屏幕，因为大多数移动网络浏览器需要一些地址和工具栏的“chrome”。有一些事情我们可以做来尝试重新获得那个空间，但稍后再说。现在，我们需要做一个悲观的假设来规划我们的布局。如果我们以目前非常流行的iPhone
    4/4S的移动Safari浏览器为例，我们只有320像素乘以376像素可用，因为我们使用60像素用于地址栏和44像素用于工具栏。iPhone 5的高度要高大约88像素。再次重申，我们不仅仅是为iPhone设计。我们主要是看这个例子来说明一个观点——您不能保证在视口中放入大量内容。
- en: In fact, it looks like we can only fit a navigation bar and the hero/slider.
    Better make sure that the content in the hero/slider counts for something! We
    won't focus too much on content strategy in this book, as there are a lot of other
    people who are far more experienced at it than me; nevertheless, let's do our
    best to put some well-chosen content there.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，看起来我们只能放一个导航栏和主要内容。最好确保英雄/幻灯片中的内容有意义！在本书中，我们不会过多关注内容策略，因为有很多其他更有经验的人在这方面；然而，让我们尽力在那里放一些精心选择的内容。
- en: 'That said, we can still include all the other content; it''s just out of view
    for now. If the users scroll down, they should still be able to see the three
    content panels just stacked rather than spread along the width of the page. A
    user who has scrolled down should see this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们仍然可以包括所有其他内容；它们现在只是看不见。如果用户向下滚动，他们仍然应该能够看到三个内容面板，而不是沿页面宽度展开。向下滚动的用户应该看到这个：
- en: '![Footer](img/6463_02_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![页脚](img/6463_02_05.jpg)'
- en: If the users continue to scroll down, they will see the third panel and eventually
    the footer. To reiterate, by the time they get to the footer, it might be really
    helpful to have an easy access to site navigation from here.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户继续向下滚动，他们将看到第三个面板，最终是页脚。重申一下，当他们滚动到页脚时，从这里轻松访问站点导航可能会非常有帮助。
- en: Ok, so I bet you are eager to write some code and build! We can do it now that
    we know what we are building. Since a 320 px wide screen needs everything to fill
    the width of the screen, and all the main blocks are to be stacked, the HTML and
    CSS code will be quite simple!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我打赌您迫不及待地想要编写一些代码并构建！既然我们知道我们要构建什么，现在我们可以做到。由于320像素宽的屏幕需要所有内容填充屏幕的宽度，并且所有主要块都需要堆叠，HTML和CSS代码将非常简单！
- en: 'Go ahead and open up the `index.html` file inside the `320andup` directory;
    or follow in the code sample and open up the file in this path:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 继续打开`320andup`目录中的`index.html`文件；或者按照代码示例打开此路径中的文件：
- en: '`ch2/before/320andup/index.html`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch2/before/320andup/index.html`'
- en: We are going to take a quick look at this page in a browser and then we are
    going to change it to add our own content. Go ahead and view this file in a browser
    in your preferred manner. I prefer to use a Python simple HTTP server (see the
    following tip). But since we are only working with a static site, you can just
    double-click on the file or even drag it into a browser window.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将快速浏览一下浏览器中的这个页面，然后我们将更改它以添加我们自己的内容。继续以您喜欢的方式在浏览器中查看此文件。我更喜欢使用Python简单的HTTP服务器（请参阅以下提示）。但由于我们只是在处理静态站点，您可以双击文件，甚至将其拖入浏览器窗口。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Python simple HTTP server**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python简单HTTP服务器**'
- en: I hate to be so Mac OS X-centric, but if you are using a Mac this will be easy.
    If you are using another *nix OS, it will still be pretty easy. If you are using
    Windows, it will be a little more work; nevertheless, it will probably be worth
    it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想太偏向Mac OS X，但如果您使用Mac，这将很容易。如果您使用其他*nix操作系统，这仍然会很容易。如果您使用Windows，这将需要更多的工作；然而，这可能是值得的。
- en: 'To start a Python simple server on a Mac, you simply browse (via the command
    line) to the directory you want to serve up to a browser and type:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上启动Python简单服务器，您只需通过命令行浏览到要提供给浏览器的目录，然后键入：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If using another *nix OS, you may need to install Python using your package
    manager and then run the preceding command. For Windows, you will need to install
    it from [http://www.python.org/getit/](http://www.python.org/getit/). Follow the
    instructions to get it all going and then use the command line to run the same
    command.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用其他*nix操作系统，您可能需要使用软件包管理器安装Python，然后运行上述命令。对于Windows，您需要从[http://www.python.org/getit/](http://www.python.org/getit/)安装它。按照说明进行操作，然后使用命令行运行相同的命令。
- en: 'For those of you familiar with WAMP/MAMP solutions, you may want to use those
    instead. You can find them at:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉WAMP/MAMP解决方案的人，您可能希望使用它们。您可以在以下位置找到它们：
- en: '[http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
- en: '[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html)'
- en: I highly recommend that you use a cutting edge browser, such as Chrome or Firefox,
    for the work we will be doing in this book, as they have really useful development
    tools that help you see what is going on with your code. Development tools make
    it easy for you to understand how things work as well as how to solve problems.
    In fact, many of the features we will be using are only available in modern browsers.
    So if you don't have one, go get one; they are all free and easy to install. For
    the record, my main development browser is Chrome.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你使用最先进的浏览器，比如Chrome或Firefox，在本书中我们将要做的工作中，它们有非常有用的开发工具，可以帮助你了解你的代码发生了什么。开发工具使你更容易理解事物是如何工作的，以及如何解决问题。事实上，我们将要使用的许多功能只在现代浏览器中可用。所以如果你还没有，去下载一个；它们都是免费且易于安装的。就我个人而言，我的主要开发浏览器是Chrome。
- en: Ok, once you have this in your browser, you should see what I have in the following
    image. Take a moment to read through it. You may have a lot of questions, and
    that is a good thing. By the time we build things, you will know a lot more.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，一旦你在浏览器中打开这个页面，你应该能看到我在下面的图片中所展示的内容。花点时间仔细阅读一下。你可能会有很多问题，这是件好事。在我们构建东西的时候，你会知道更多。
- en: '![Footer](img/6463_02_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![页脚](img/6463_02_06.jpg)'
- en: So, the first thing we need to do is edit this file (the one on the path `ch2/before/320andup/index.html`)
    to make it our own. Basically, we want to hollow out this page by removing the
    header, footer, and everything in between. In the `before` directory, I have provided
    an example called `index_stripped.html`. Feel free to compare your effort with
    that example file (if you are just beginning as a developer, don't be tempted
    to just change the name of `index_stripped.html` to `index.html` and use it; make
    the effort to edit the code successfully).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们需要做的第一件事是编辑这个文件（路径为`ch2/before/320andup/index.html`）使其成为我们自己的。基本上，我们想要通过移除页眉、页脚和中间的所有内容来清空这个页面。在`before`目录中，我提供了一个名为`index_stripped.html`的示例。随意将你的努力与该示例文件进行比较（如果你是一名初学者开发者，不要被诱惑只是将`index_stripped.html`的名称改为`index.html`并使用它；努力编辑代码成功）。
- en: 'One more thing we will want to do right off the bat is make it so that we can
    pull in the JavaScript library jQuery from Google''s servers. Google is very nice
    and hosts a ton of JavaScript and AJAX related libraries. So, many of us can use
    Google as a **Content Delivery Network** (**CDN**). However, you may notice that
    the line of HTML that pulls it in from Google''s service is missing something:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一开始要做的另一件事是，使我们能够从谷歌的服务器中拉取JavaScript库jQuery。谷歌非常友好，托管了大量的JavaScript和AJAX相关的库。因此，我们许多人可以将谷歌作为**内容交付网络**（**CDN**）。然而，你可能会注意到从谷歌服务中拉取它的HTML代码行缺少了一些东西：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It's missing the HTTP protocol, which is fancy talk for the first part of a
    URL, before the slash. I bet you're thinking why? The reason is that we need it
    to work within either `http` or `https` domains, depending on what our site is.
    Leaving it off essentially makes it so that it defaults to whatever the HTTP protocol
    is for the page this code lives in. If you specify it incorrectly as `http` within
    an `https` site (which is secure), it will throw a security warning to all well-made
    browsers because you can't serve up insecure content within the context of a secure
    site. Otherwise, `http` is just fine (you can also leave this out entirely and
    whatever protocol your site is using will apply).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它缺少了HTTP协议，这是URL的第一部分，在斜杠之前的花哨说法。我敢打赌你在想为什么？原因是我们需要它在`http`或`https`域内工作，这取决于我们的网站是什么。将其省略会使其默认为此代码所在页面的HTTP协议。如果你在安全的`https`站点中错误地指定为`http`，它将向所有良好的浏览器发出安全警告，因为你不能在安全站点的上下文中提供不安全的内容。否则，`http`是完全可以的（你也可以完全省略这一点，使用你的网站所使用的任何协议）。
- en: 'For this project, I am using `http`; however, if you are building a secure
    site, by all means, make sure you make this secure as well. Here is what your
    code should look like now:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我正在使用`http`；然而，如果你正在构建一个安全的网站，务必确保这也是安全的。现在你的代码应该是这样的：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now if you refresh the page, you should not notice anything unless you look
    under the hood to see where your jQuery came from. If you don''t know how to inspect
    whether site resources are downloading, don''t worry about it too much right now.
    But if you are seeing errors, just double-check to make sure your code matches
    the example. You can check to see if you are getting JavaScript errors in any
    developer console, regardless of the browser you are using (even IE). Once this
    is working correctly, you can first have the page request that the jQuery library
    come from Google''s service. If that fails, it will come from your site''s server.
    Again, I won''t go too much into the details of this boilerplate code, but it
    is good to know that the following line of HTML is a backup in case Google can''t
    serve up the jQuery file when you request it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你刷新页面，你不应该注意到任何变化，除非你查看jQuery的来源。如果你不知道如何检查站点资源是否正在下载，现在不要太担心。但如果你看到错误，只需仔细检查你的代码是否与示例匹配。你可以在任何开发者控制台中检查是否有JavaScript错误，无论你使用的是哪种浏览器（甚至是IE）。一旦这个工作正确了，你可以首先让页面请求jQuery库来自谷歌的服务。如果失败，它将来自你网站的服务器。再次强调，我不会过多介绍这个样板代码的细节，但知道以下这行HTML是一个备份，以防谷歌无法在你请求时提供jQuery文件：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's build!
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始构建！
- en: OK! All the fundamentals are now in place. Let's build the components of the
    page for a small screen first. Let's go from the top of the page to the bottom.
    As I mentioned earlier, it typically makes sense for all the content to span the
    full width of small screens. Let's begin with the header and navigation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！所有的基础都已经就位了。让我们首先为小屏幕构建页面的组件。让我们从页面顶部到底部开始。正如我之前提到的，通常所有的内容都应该跨越小屏幕的整个宽度。让我们从页眉和导航开始。
- en: 'Just below the opening body tag, let''s put some HTML for our navigation. It
    should look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在body标签的下面，让我们放一些HTML来制作我们的导航。它应该是这个样子的：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Header
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页眉
- en: We created a header block. We are using this for both semantic and layout reasons.
    The header will mainly contain the logo and navigation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个页眉块。我们出于语义和布局原因使用它。页眉主要包含标志和导航。
- en: Logo
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标志
- en: The logo will be contained in an `<a>` tag. This follows the unofficial web
    convention that the site logo should link back to the home page. We will still
    have an explicit link to the home page but it is helpful to offer both the links
    to users without being confusing. I use the shorthand ./ in order to have the
    page link back to the root of the current level of depth; for production, you
    may want to take the extra step of having it linked to your fully qualified root
    domain (for example, [www.yourdomain.com/index.html](http://www.yourdomain.com/index.html)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 标志将包含在`<a>`标签中。这遵循了非官方的网络惯例，即网站标志应链接回首页。我们仍然会有一个明确的链接到首页，但提供两个链接对用户而言是有帮助的，而不会令人困惑。我使用简写./以便页面链接回到当前深度级别的根目录；对于生产，您可能希望采取额外步骤，将其链接到您的完全合格的根域（例如，[www.yourdomain.com/index.html](http://www.yourdomain.com/index.html)）。
- en: Navigation
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: We create a semantic `<nav>` block and place some nested containers ending in
    an `<ul>` (unordered list) inside. Each `<li>` (list item) will have a link to
    each page on our website. For this project, we will handcode each link, but if
    you were using some kind of framework, these links would be generated dynamically.
    I went ahead and created links to pages that don't exist yet, so if you click
    on them you will get a **404 file not found** message.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个语义`<nav>`块，并在内部放置了一些嵌套容器，最后是一个`<ul>`（无序列表）。每个`<li>`（列表项）将链接到我们网站上的每个页面。对于这个项目，我们将手动编写每个链接，但如果您使用某种框架，这些链接将动态生成。我已经创建了指向尚不存在的页面的链接，因此如果您单击它们，将收到**404文件未找到**的消息。
- en: There are a few key things to notice about navigation. Right now, without any
    CSS applied, the basic layout is virtually what we want. Each link is stacked
    vertically and with some additional padding that will be a clear target for fat
    fingers the world around. This is all pretty ideal, since it's always good to
    know that your site will still function without CSS. This is good for many reasons.
    One being the case that your CSS fails to get served up for some reason. Another
    includes users who are using text-only browsers. You will also notice that there
    are a few relatively non-semantic containers here that function as utility containers.
    A few we will use soon.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关于导航有一些关键事项需要注意。现在，没有应用任何CSS，基本布局几乎是我们想要的。每个链接都垂直堆叠，并且有一些额外的填充，这将是全世界肥厚手指的明显目标。这一切都非常理想，因为知道您的网站在没有CSS的情况下仍然可以正常运行总是很好的。这有很多原因。其中一个是您的CSS由于某种原因未能提供服务。另一个包括使用纯文本浏览器的用户。您还会注意到这里有一些相对非语义的容器，它们作为实用容器发挥作用。我们很快会使用其中一些。
- en: One problem with this navigation is that once we style it properly, it will
    eat up a lot of screen real estate. The minimum area for an element that requires
    interaction on touch interfaces is roughly 50 px by 50 px so that it is wide enough
    for a fingertip. There is some leeway here though. For example, if the touch target
    is really wide, you can get away with making it about 40 px tall but that can
    get risky. Some usability experts recommend making your touch targets as wide
    as 60 px to accommodate the fattest finger—the thumb, since many users use it
    to get around on a mobile. For argument's sake though, let's make a compromise
    and assume each element to be 40 px tall and full-width, or at least 320 px wide.
    That means our navigation with the logo will be 200 px tall. We have potentially
    eaten up over half our screen real estate with just navigation and we do need
    to remember the potential chrome that we have to plan for. Greeting users with
    only navigation and no actual content is just plain bad.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种导航的一个问题是，一旦我们正确地对其进行样式设置，它将占用大量屏幕空间。在触摸界面上需要交互的元素的最小区域大约是50像素乘以50像素，以便足够宽以适应手指。不过这里有一些余地。例如，如果触摸目标真的很宽，您可以将其高度设置为大约40像素，但这可能有风险。一些可用性专家建议将触摸目标的宽度设置为60像素，以适应最粗的手指——拇指，因为许多用户在移动设备上使用它四处移动。不过，为了论证起见，让我们做出妥协，假设每个元素的高度为40像素，宽度为全宽，或者至少为320像素。这意味着我们的导航与标志将有200像素高。我们可能已经占用了超过一半的屏幕空间，只是导航，我们确实需要记住我们必须为潜在的浏览器界面做规划。只用导航而没有实际内容来迎接用户是非常糟糕的。
- en: We will need to do something about this!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对此做些什么！
- en: Luckily, a convention has rapidly emerged to solve just this problem. Most mobile-friendly
    websites and mobile apps use an icon with a series of three parallel lines to
    signify a hidden navigation menu.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一个快速出现的惯例解决了这个问题。大多数移动友好的网站和移动应用程序使用一个由三条平行线组成的图标来表示隐藏的导航菜单。
- en: '![Navigation](img/6463_02_07.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![导航](img/6463_02_07.jpg)'
- en: To the user, this should indicate that a touch or click of this element will
    reveal or hide the navigation. This assumes that the user knows the convention,
    of course. For this reason, there may be some situations where this is not appropriate,
    especially on sites where there is little navigation. That said, we are going
    to go ahead and build our navigation following this convention in order to save
    screen space and learn how to make this enhancement.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户来说，这应该表明触摸或点击此元素将显示或隐藏导航。当然，这假设用户知道惯例。出于这个原因，可能有一些情况这不合适，特别是在导航很少的网站上。也就是说，我们将继续按照这个惯例构建我们的导航，以节省屏幕空间并学习如何进行此增强。
- en: Here is the basic strategy we will use. We will hide and show the menu via CSS
    and use JavaScript to only change the class. This way, if users have no JS, they
    will still get the menu, but unfortunately it will be completely expanded.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将使用的基本策略。我们将通过CSS隐藏和显示菜单，并使用JavaScript仅更改类。这样，如果用户没有JS，他们仍然会得到菜单，但不幸的是它将完全展开。
- en: 'So first things first; we will add a button. Add your button just below the
    `<a>` tag that will hold our logo. We will style the menu in a bit to organize
    things better, but let''s get this working first. Here is what your navigation
    HTML should look like now:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的事情是添加一个按钮。在包含我们的标志的`<a>`标签下面添加你的按钮。我们将稍后对菜单进行样式设置，以更好地组织事物，但首先让我们让它工作起来。现在你的导航HTML应该是这样的：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you refresh, you will now see a little nubbin of a button just to the left
    of your logo. It's not much to look at now, but be patient. We will write the
    JS code that will toggle some class to hide/show the navigation menu. Go ahead
    and open up the file in the path `ch2/before/320andup/js/script.js`. At this point,
    it should be an empty file. We are going to write some simple JavaScript that
    will hide and show the menu. Again, if a user doesn't have JS, the menu simply
    stays open. This is just one small example of progressive enhancement, there are
    more to come.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果刷新，你现在会看到一个小按钮的按钮，就在你的标志的左边。现在看起来不起眼，但请耐心等待。我们将编写JS代码来切换一些类来隐藏/显示导航菜单。继续打开路径`ch2/before/320andup/js/script.js`中的文件。此时，它应该是一个空文件。我们将编写一些简单的JavaScript来隐藏和显示菜单。同样，如果用户没有JS，菜单就会保持打开状态。这只是渐进增强的一个小例子，还有更多要来的。
- en: 'Next, we''ll write this JS to assign a new class to the menu when a user touches
    the button. We are going to use some simple, elegant jQuery:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写这个JS来在用户触摸按钮时为菜单分配一个新的类。我们将使用一些简单而优雅的jQuery：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is what this code does. The JS that appears first, `$(document).ready()`,
    is some jQuery that basically waits for the moment when the DOM has loaded, then
    executes all code placed within the `ready` function. It is typical to use this
    to make sure all the elements of the DOM are there so that the code that calls
    specific elements are actually all there.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的作用是什么呢。首先出现的JS，`$(document).ready()`，是一些jQuery，基本上等待DOM加载完成的时刻，然后执行放在`ready`函数中的所有代码。通常使用这个来确保DOM的所有元素都在那里，以便调用特定元素的代码实际上都在那里。
- en: The next line, `$('.navbar').removeClass('open')`, will remove the `open` class
    that we will use later to make the menu open and close with some CSS. If the device
    has no JS, then this class is never removed and the open style is the only one
    that will ever be applied to the menu!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一行代码`$('.navbar').removeClass('open')`，将删除我们稍后将使用的`open`类，以便使用一些CSS来打开和关闭菜单。如果设备没有JS，那么这个类就永远不会被移除，打开样式就是唯一应用于菜单的样式！
- en: The next line of code beginning with `$('.menu-button').on('click', function(){`
    attaches an event listener to the button that has a class of `.menu-button`. When
    a user clicks on the button, the code inside that function runs. Additionally,
    a touch event is translated into a click by mobile browsers, so both kinds of
    events are handled with this code. But getting back to the function—after a user
    touches or clicks, the function simply adds or removes the class `open` on the
    element with a class `navbar`. From here on, I won't go into too many details
    about the JavaScript we write. If you need more help in understanding it, that
    is beyond the scope of this book. But if you don't feel ready to dig into JavaScript,
    just follow along and you should learn something!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码以`$('.menu-button').on('click', function(){`开头，为具有`.menu-button`类的按钮附加了一个事件监听器。当用户点击按钮时，函数内的代码运行。此外，移动浏览器将触摸事件转换为点击，因此这段代码处理了两种事件。但回到函数——用户触摸或点击后，函数简单地在具有`.navbar`类的元素上添加或删除`open`类。从现在开始，我不会详细介绍我们编写的JavaScript。如果你需要更多帮助理解它，那就超出了本书的范围。但如果你还不准备深入研究JavaScript，只需跟着我，你应该会学到一些东西！
- en: Now, if you save this code and reload your page, you can try this out. If you
    open your favorite developer tools and look at the `<nav>` tag when you click
    on the button, you should see the class `open` appear and disappear from that
    element. If it's not happening, or if you are getting errors, try retracing your
    steps and see if you missed some code. Also, try running the complete version
    of code from this chapter to see if it works properly. If the code I've provided
    you doesn't work, something other than the code is amiss.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你保存这段代码并重新加载页面，你可以试一下。如果你打开你最喜欢的开发者工具，点击按钮时查看`<nav>`标签，你应该会看到类`open`出现和消失在那个元素上。如果没有发生，或者你遇到错误，尝试重新追溯你的步骤，看看是否漏掉了一些代码。另外，尝试运行本章提供的完整代码，看看是否正常工作。如果我提供给你的代码不起作用，那么除了代码之外还有其他问题。
- en: If you don't see any errors, but at the same time don't see anything changing
    in your browser's inspector, just hang tight. It may not be updating the DOM for
    some reason. But we will soon see proof of its working once we add some styles.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到任何错误，但同时在浏览器的检查器中也没有看到任何变化，那就耐心等待。可能由于某种原因它没有更新DOM。但一旦我们添加一些样式，我们很快就会看到它的工作证明。
- en: Most of the CSS I will be writing can be written in plain CSS, SASS, or LESS.
    For a few reasons, I prefer to work with SASS. This subject too is outside the
    scope of this book. But for brevity, I will do my best to show you how to do all
    the CSS code examples both in SASS and plain CSS. Please read [Appendix B](apb.html
    "Appendix B. Using CSS Preprocessors"), *Using CSS Preprocessors* and other preprocessors
    if you need to learn more. Otherwise, follow along and I will continue to show
    code examples of both CSS and SASS. The finished code samples are all in CSS and
    SASS/SCSS.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要写的大部分CSS可以用纯CSS、SASS或LESS来编写。出于几个原因，我更喜欢使用SASS。这个主题也超出了本书的范围。但为了简洁起见，我将尽力向你展示如何在SASS和纯CSS中编写所有CSS代码示例。如果你需要了解更多，请阅读[附录B](apb.html
    "附录B. 使用CSS预处理器")，*使用CSS预处理器*和其他预处理器。否则，请跟着我继续展示CSS和SASS的代码示例。完成的代码示例都是CSS和SASS/SCSS。
- en: First things first, let's arrange the navigation menu so that things are laid
    out in a way that enhances usability and appearance. For example, let's get all
    those stacked elements to be 40 px tall.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安排导航菜单，以便以一种增强可用性和外观的方式布局事物。例如，让我们让所有这些堆叠的元素高40像素。
- en: 'If you are following and using SCSS, go ahead and open `_page.scss` inside
    the `scss` folder and make sure you change the name of the `css` file that is
    linked in the header of your page to:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用SCSS，请打开`scss`文件夹中的`_page.scss`，确保你将页面头部链接的`css`文件名更改为：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are other ways you could handle this, of course, but let''s keep it simple.
    If you are editing the plain CSS, just open the file in the path:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以用其他方法来处理这个问题，但让我们保持简单。如果你正在编辑纯CSS，只需打开路径中的文件：
- en: '`ch2/before/320andup/css/320andup.css`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`ch2/before/320andup/css/320andup.css`'
- en: Again, you can always change the name of this file and the one linked to in
    your header if you wish, but I suggest we keep it simple for now and leave it
    as it is. Now, let's start styling this page. Just a quick note—for many of these
    styles, I am borrowing heavily from the great and powerful Twitter Bootstrap framework,
    which is a frontend framework that includes boilerplate CSS and HTML. You can
    include it with 320 and Up, but I decided not to include it in this book for simplicity.
    That said, if you decide to combine the two (and if you like building things well
    and quickly, I highly recommend you do), you will find that many of the styles
    I use are quite compatible with it. Now let's go!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你愿意，你可以随时更改这个文件的名称以及头部链接的文件名称，但我建议我们现在保持简单，暂时不要更改。现在，让我们开始为这个页面添加样式。只是一个快速的提示——对于这些样式中的许多样式，我大量借鉴了强大的
    Twitter Bootstrap 框架，这是一个包含样板 CSS 和 HTML 的前端框架。你可以在 320 and Up 中包含它，但出于简单起见，我决定不在本书中包含它。也就是说，如果你决定将两者结合起来（如果你喜欢快速而好地构建东西，我强烈建议你这样做），你会发现我使用的许多样式与它非常兼容。现在让我们开始吧！
- en: 'First, let''s get the button moved to where it should be and get it to look
    good:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们把按钮移到它应该在的地方，并让它看起来不错：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The button is far away from all our links, so that users won't accidentally
    touch it when they are trying to open a link. It also looks a little better, but
    still needs those three lines that we discussed earlier. We won't need any images
    though.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮远离了所有的链接，这样用户在尝试打开链接时就不会意外触摸到它。它看起来也好一点，但仍然需要我们之前讨论过的那三行。不过我们不需要任何图片。
- en: If you are using any SASS or LESS, you can take advantage of one of the many
    handy mixins provided in 320 and Up. You should open up `_mixins.scss` and take
    a quick look at all of them. Again, if you are new to them, I will quickly give
    an example of what is so cool about them in just a moment; however, first a quick
    explanation of what mixins are in SASS and why they are so great.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用任何SASS或LESS，你可以利用320 and Up提供的许多方便的mixin之一。你应该打开`_mixins.scss`，快速查看所有的mixin。同样，如果你对它们还不熟悉，我将很快给出一个例子，说明它们有多酷；不过，首先简要解释一下SASS中的mixin以及它们为什么如此出色。
- en: 'In SASS, you can define mixins by typing `@mixin` followed by some CSS that
    you want to generate. This is great if you have a complicated task that you want
    to accomplish without repeated efforts. This harkens back to the concept of DRY;
    for example, we can make three rounded rectangles by using the rounded corners
    of CSS3 for the menu button. The trouble is that currently there are at least
    three different ways to declare rounded corners, thanks to vendor prefixes. For
    all rounded corners, we have to define them like so:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中，你可以通过输入`@mixin`，然后是你想要生成的一些CSS来定义mixin。如果你有一个复杂的任务，不想重复努力，这是非常好的。这回到了DRY的概念；例如，我们可以使用CSS3的圆角来制作菜单按钮的三个圆角矩形。问题是，目前至少有三种不同的方式来声明圆角，这要归功于供应商前缀。对于所有的圆角，我们必须这样定义：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So, we could type the preceding code every time we need a rounded corner anywhere
    in our site styles. Or, we could save the effort and put these in a mixin. The
    rounded mixin does just that for you. Have a look at it in the `_mixins` file
    right now. Mixins in SASS do a lot of things, but this case alone is compelling.
    It essentially behaves like a callable function that executes when the code is
    compiled to CSS (read [Appendix B](apb.html "Appendix B. Using CSS Preprocessors"),
    *Using CSS Preprocessors*, for more details). You code `@include rounded` and
    the CSS inside that mixin is rendered to your final CSS. In this case, you get
    all those ways of creating rounded corners without all the typing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在需要在网站样式中的任何地方使用圆角时每次都输入前面的代码。或者，我们可以节省精力并将这些放入mixin中。圆角mixin就是为你做这件事。现在就在`_mixins`文件中查看它。SASS中的mixin可以做很多事情，但单单这种情况就很有说服力。它本质上就像一个可调用的函数，当代码编译成CSS时执行（详细信息请参阅[附录B](apb.html
    "附录 B. 使用 CSS 预处理器")，“使用 CSS 预处理器”）。你可以编写`@include rounded`，mixin中的CSS将呈现在最终的CSS中。在这种情况下，你可以获得所有这些创建圆角的方式，而无需输入所有的内容。
- en: If you're already using SASS, here is all you need to do to see it in action
    on your site (if you're not, read [Appendix B](apb.html "Appendix B. Using CSS
    Preprocessors"), *Using CSS Preprocessors*, to see how to get it going). First,
    we will add some new markup to our button.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在使用SASS，这就是你需要在你的网站上看到它的操作（如果你没有，阅读[附录B](apb.html "附录 B. 使用 CSS 预处理器")，“使用
    CSS 预处理器”来了解如何开始）。首先，我们将为我们的按钮添加一些新的标记。
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Write this SCSS nested inside your `.menu-button` SCSS:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个SCSS嵌套在你的`.menu-button` SCSS中：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The rounded mixin will render the following CSS (or you can handcode this if
    you wish):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 圆角mixin将呈现以下CSS（或者如果你愿意，你也可以手动编写）：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The last three lines are generated by the mixin when the SCSS is processed.
    This is quite a time-saver. By now your button should be looking neat and floating
    over to the right!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当SCSS被处理时，最后三行是mixin生成的。这真的可以节省很多时间。现在你的按钮应该看起来整洁，漂浮在右边！
- en: 'Now, let''s get all those links to look neat. Here is what your SCSS should
    look like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们让所有这些链接看起来整洁。你的SCSS应该是这样的：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And here is the CSS:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will give a neat contrast and make the links 40 px tall. But now we need
    to do something to get that menu hiding and showing. My preference is to do it
    without JavaScript animation. Ok, it's more than a preference actually. CSS3 animations
    will be smoother for the most part, furthermore; this really comports with the
    ideology of progressive enhancement. If a device does not support CSS3 animations,
    it is quite possible that it isn't really powerful enough to deal with JavaScript
    animations either, so why are you forcing it to run JS loops just for a nice-to-have
    feature? On the other hand, most devices that support CSS3 animations optimize
    these animations by utilizing the GPU. Even if they don't, they will still play
    a JS animation as well.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个清晰的对比，并使链接高40像素。但现在我们需要做一些事情来隐藏和显示菜单。我更倾向于不使用JavaScript动画来做。好吧，实际上这不仅仅是倾向。CSS3动画在大多数情况下会更流畅，而且这确实符合渐进增强的思想。如果设备不支持CSS3动画，它很可能也不足以处理JavaScript动画，那么为什么要强制它运行JS循环来实现一个好看的功能呢？另一方面，大多数支持CSS3动画的设备通过利用GPU来优化这些动画。即使它们不这样做，它们也会播放JS动画。
- en: I won't get too clever with my arguments, but this code essentially works well
    if you are on a slow device that doesn't support CSS3 animations and if you are
    on the slickest mobile out there.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在我的论点上太聪明，但如果你是在一个不支持CSS3动画的慢设备上，或者你是在最流畅的移动设备上，这段代码基本上是有效的。
- en: First things first, we need to make one embarrassing concession here. CSS3 animations
    will not work when the height of an element is automatically calculated (yet!).
    This doesn't have to matter for us, since we can easily know the height of our
    navigation menu. But if you wanted to use this kind of animation on a menu of
    an unknown size, you could not use this approach. There are other approaches for
    that scenario; however, they are not included in this book. ![Navigation](img/01.jpg)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在这里做一个尴尬的让步。当元素的高度自动计算时，CSS3动画将无法工作（尚未！）。这对我们来说并不重要，因为我们可以很容易地知道我们的导航菜单的高度。但是，如果你想在未知大小的菜单上使用这种动画，你就不能使用这种方法。对于这种情况还有其他方法；然而，它们没有包含在这本书中。![导航](img/01.jpg)
- en: 'So, here is what your SCSS now needs to look like:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在你的SCSS需要看起来像这样：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And the CSS:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 和CSS：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We set the maximum height of the open menu 5 x 44 = 220px. There are five stacked
    elements in `nav` and we know that they are each 44 px tall (I could tell by looking
    in my dev tools). By extension, the closed version, the version that has had the
    `open` class removed should have a max-height of 44 px. We need the overflow to
    be hidden so that the other elements aren't visible when the menu collapses to
    a smaller height.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置打开菜单的最大高度为5 x 44 = 220px。`nav`中有五个堆叠的元素，我们知道它们每个都有44像素高（我可以通过我的开发工具看到）。由此推断，关闭版本，即已删除`open`类的版本，应该有一个最大高度为44像素。我们需要隐藏溢出，这样当菜单折叠到较小的高度时，其他元素就不可见了。
- en: 'You should also notice that the five different ways of creating the CSS3 transition
    animations were written with one line of SCSS (another mixin):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该注意到，创建CSS3过渡动画的五种不同方法是用一行SCSS（另一个mixin）编写的：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Things are looking really nice now! Play around with it and enjoy. This was
    a pretty intense section. The rest will be a tad simpler, I promise!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来非常不错！随意尝试并享受。这是一个相当紧张的部分。其余部分会简单一些，我保证！
- en: Next, let's move on to our *Hero* section. For now, we will simply have a background
    with some placeholder text and a button. But I will provide some tips and suggestions
    for making a slide show later in this section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续我们的*英雄*部分。现在，我们将简单地有一个背景，一些占位文本和一个按钮。但我将在本节稍后提供一些制作幻灯片秀的提示和建议。
- en: Hero
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄
- en: Let's keep the markup simple for now. Later, we will come back and make this
    a simple slideshow.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们暂时保持标记简单。稍后，我们将回来把它做成一个简单的幻灯片秀。
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `hero` `div` acts as a container for some styles and content that we will
    add. For now, we will just stick to adding a headline, some text, and a button
    that will eventually take users to our contact page.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 英雄div充当一些样式和内容的容器，我们将添加一些内容。现在，我们将只添加一个标题，一些文本和一个按钮，最终会将用户带到我们的联系页面。
- en: 'Here is what the SCSS should look like:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS应该是这样的：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '…and the CSS:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 和CSS：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Again, you can see the use of a mixin. We used the gradient mixin, `@horizontal`,
    to create eight lines of plain 'ol CSS. Convinced you should be using SASS yet?
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以看到mixin的使用。我们使用了渐变mixin，`@horizontal`，创建了八行普通的CSS。你相信你应该使用SASS了吗？
- en: Everything else is relatively straightforward. You may notice that I had to
    override the text-shadow of the button with a black colored shadow, since the
    peachy-colored shadow would have looked pretty terrible behind white text on a
    black button. All the other choices are just some basic styles for this area,
    which you can feel free to adjust according to your taste.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 其他的都相对简单。你可能会注意到，我不得不用黑色的阴影覆盖按钮的文本阴影，因为桃红色的阴影在黑色按钮上的白色文本后面看起来会很糟糕。所有其他选择都只是这个区域的一些基本样式，你可以根据自己的口味随意调整。
- en: Now, let's move on to the trio of content panels that will go at the bottom.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续到底部的三个内容面板。
- en: Content panels
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容面板
- en: 'Now below the hero, place this example code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在英雄下面，放置这个示例代码：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, I have to confess at this juncture that all I did for this section was
    copy Andy's example from his panel `upstart`. These are darn useful. You can find
    his examples inside any of the preprocessor folders, but I got mine from `ch2/before/320andup/scss/320andup-panels/index.html`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我必须在这里承认，我在这一部分所做的一切都只是复制了Andy在他的面板`upstart`中的示例。这些非常有用。你可以在任何预处理器文件夹中找到他的示例，但我从`ch2/before/320andup/scss/320andup-panels/index.html`中找到了我的。
- en: Not only are these automagically (that's silly developer speak for something
    that happens automatically but seems mysterious and magical) laid out for us but,
    as you will soon see, they are already responsive without us having to make any
    effort. This is a huge payoff!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不仅是自动布局的（这是愚蠢的开发人员用来表示自动发生但似乎神秘和神奇的事情），而且，正如你很快会看到的，它们已经是响应式的，而无需我们付出任何努力。这是一个巨大的回报！
- en: 'The only change I want to make is to the background color of the `div` with
    a class of `full`. The bluish color doesn''t go well with my orange theme. But
    if you look at the SCSS for the panel upstart (in `upstarts/320andup-panels/_upstart.scss`),
    you will notice that the color for the background is calculated from a `$basecolor`
    variable:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要做的唯一更改是`full`类的`div`的背景颜色。蓝色与我的橙色主题不搭配。但是，如果你查看面板起始的SCSS（在`upstarts/320andup-panels/_upstart.scss`中），你会注意到背景的颜色是从`$basecolor`变量计算出来的：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'That means you need to assign the `$basecolor` variable to something. Let''s
    just use one of the shades of orange from our hero gradient! Open up `_variables.scss`
    and change `$basecolor` to this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你需要将`$basecolor`变量分配给某个值。让我们使用我们英雄渐变中的橙色之一！打开`_variables.scss`，将`$basecolor`更改为这样：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You will notice that our button in the hero changed color! Whoa! That's actually
    Ok, I planned for it. This is a powerful feature of tying your styles together
    with variables, but it can bite you if you don't pay attention.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们英雄中的按钮颜色改变了！哇！这实际上是可以的，我已经计划好了。这是将样式与变量绑定在一起的强大功能，但如果你不注意的话，它可能会让你感到困扰。
- en: Ok! Now things are looking really sharp! If you resize your browser, you can
    see the content panels change size and layout. We just need to make a footer,
    then we can add some responsive styles of our own for the things 320 and Up has
    not done for us.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 好！现在看起来非常锐利！如果你调整浏览器大小，你会看到内容面板的大小和布局发生变化。我们只需要制作一个页脚，然后我们可以为320及以上的内容添加一些响应式样式。
- en: Footer
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页脚
- en: 'Let''s keep things simple again:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次保持简单：
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will style it like so. First the SCSS:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这样设计。首先是SCSS：
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And the CSS:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 和CSS：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Hopefully, you've gotten the hang of this now. But you can once again see the
    use of some variables as well as the ampersand sign in the SCSS to help write
    code faster.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在已经掌握了这一点。但你可以再次看到在SCSS中使用一些变量以及`&`符号来帮助更快地编写代码。
- en: Next, we handle what happens to the layout on larger screens.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们处理在较大屏幕上的布局发生的变化。
- en: Making our page responsive
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使我们的页面响应式
- en: The best way to see when you need to add new styles is to take your browser
    window from its narrowest and gradually drag it wider. When the design starts
    to look weird or broken, it's time to restyle it.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 查看何时需要添加新样式的最佳方法是将浏览器窗口从最窄逐渐拖宽。当设计开始看起来奇怪或破碎时，就是重新设计的时候了。
- en: In our case, the main things we will need to restyle for larger screens are
    the navigation, the hero, and the footer. The content panels are already taken
    care of for us. Let's start with the navigation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要为较大的屏幕重新设计的主要内容是导航、英雄和页脚。内容面板已经为我们处理了。让我们从导航开始。
- en: In the case of the navigation, we implemented the hide/show functionality to
    save valuable screen space, but at some point we don't need to make users click
    to reveal the menu. We can simply leave the navigation fully displayed at all
    times like a desktop site navigation that we are used to. In order to find the
    point where that layout breaks, we could drag our browser width, which could quickly
    get tedious. Also, in reality, responsive websites aren't for wackos that resize
    their browsers spontaneously and repeatedly, like yours truly, but for devices
    of different sizes. Luckily, 320 and Up has a useful tool in its toolbox to help
    out.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航的情况下，我们实现了隐藏/显示功能，以节省宝贵的屏幕空间，但在某些时候，我们不需要让用户点击来显示菜单。我们可以简单地将导航始终完全显示，就像我们习惯的桌面站点导航一样。为了找到布局中断的点，我们可以拖动浏览器宽度，这可能会很烦人。而且，实际上，响应式网站不是为了那些不断自发地调整浏览器大小的怪人，比如我自己，而是为了不同尺寸的设备。幸运的是，320及以上在其工具箱中有一个有用的工具来帮助我们。
- en: If you open up an HTML file called `responsive.html` in the directory you're
    working in (to remind you it's `ch2/before/320andup/responsive.html`), it should
    just automatically load your `index.html` file. Now, by scrolling left and right,
    you can see your layout in five good layout breakpoints (not to be confused with
    breakpoints used in debugging code). Of course, there will be exceptions, but
    these breakpoints are a real time-saving place to start as they tend to hit the
    range of devices currently available. I encourage you to critique and question,
    but for now, let's take advantage of them as they are paired up with 320 and Up
    and will speed up development that is going to support a good design in almost
    all cases. If you open this page through your computer's filesystem, it won't
    load the pages. See my note earlier in the chapter to find a good way to open
    up this page. But to restate, my personal favorite for something this simple is
    the Python simple HTTP server.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在工作目录中打开名为`responsive.html`的HTML文件（提醒你，它是`ch2/before/320andup/responsive.html`），它应该会自动加载你的`index.html`文件。现在，通过左右滚动，你可以在五个良好的布局断点中看到你的布局（不要与调试代码中使用的断点混淆）。当然，会有例外，但这些断点是一个真正节省时间的起点，因为它们往往涵盖了当前可用的设备范围。我鼓励你批评和质疑，但现在，让我们利用它们，因为它们与320及以上配对，并且将加速几乎所有情况下支持良好设计的开发。如果你通过计算机文件系统打开此页面，它不会加载页面。请参阅本章前面的注释，找到打开此页面的好方法。但重申一下，对于这么简单的东西，我个人最喜欢的是Python简单的HTTP服务器。
- en: Ok, so when you successfully get this page to load, what do you see? You should
    notice that the design works really well on the mobile and small tablet layouts.
    Based on the minimal amount of placeholder content I have in here, it doesn't
    look too sparse nor does it look too cramped. And as a bonus, those neat content
    panels expand to fill the extra real estate. The framework facilitates this via
    `@media` queries. More on this in a minute.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，当您成功加载此页面时，您看到了什么？您应该注意到设计在移动和小平板布局上运行得非常好。基于我在这里放置的最少量的占位内容，它看起来既不太稀疏，也不显得太拥挤。而且作为一个奖励，这些整洁的内容面板会扩展以填充额外的空间。框架通过`@media`查询实现了这一点。稍后再详细介绍。
- en: That said, what do you think about the tablet — portrait layout? It usually
    works, but we have more room in that hero area now. That doesn't mean we have
    to add more content but we can probably make that text a little bigger to fill
    it out. To heck with that, let's make it really bold and get people's attention.
    The nice thing is that 320 and Up already has all the structure in place to make
    it easy to change the size. First let's look at the code, then I will explain
    what goes on under the hood.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，您对平板电脑的纵向布局有什么看法？通常情况下，它是有效的，但是现在我们在英雄区域有更多的空间。这并不意味着我们必须添加更多内容，但我们可能可以把文本放大一点来填充它。让我们大胆一点，让它变得非常粗体，吸引人们的注意。好处是，320
    and Up已经为轻松更改大小提供了所有的结构。首先让我们看看代码，然后我会解释底层发生了什么。
- en: 'If you are using SASS, this is super easy. Open the `_768.sass` or `_768.scss`
    file and add this code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用SASS，这非常容易。打开`_768.sass`或`_768.scss`文件并添加以下代码：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'or in CSS, find the point in your file that says:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在CSS中，找到文件中的这一点：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'and within the curly braces add this code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在大括号内添加以下代码：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: So, if you are new to SASS or `@media` queries, I will take a moment to help
    you understand what is happening here. First, I will explain the `@media` query.
    Quite simply, in this case all it does is tell the browser that once the screen
    is a minimum width of 768 px, the contained styles should be applied. You can
    set other dimensions and other conditions as well.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您对SASS或`@media`查询不熟悉，我将花一点时间帮助您理解这里发生了什么。首先，我将解释`@media`查询。在这种情况下，它的作用很简单，就是告诉浏览器一旦屏幕宽度达到最小宽度768像素，就应用其中的样式。您还可以设置其他尺寸和其他条件。
- en: 'As for the magic in SASS that allows us to organize these styles in separate
    files, there is a similar syntax that is only in the `.sass` or `.scss` file (not
    the `.css` file) and is, in essence, an instruction to the preprocessor to pull
    in separate files. You may have noticed that the file you edited (and a bunch
    of others) has an underscore at the beginning of the name. That indicates that
    it is a partial file. If you look at the `320andup-sass.sass` file or the corresponding
    file for the language you chose, you will notice that inside all the `@media`
    queries, there are `@import` statements. For the file we just edited, there is
    an `@import 768` statement inside the same exact `@media` query you see in the
    plain CSS file:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 关于SASS中允许我们将这些样式组织在单独文件中的魔法，只有在`.sass`或`.scss`文件中（而不是`.css`文件）才有类似的语法，实质上是一条指令，让预处理器引入单独的文件。您可能已经注意到，您编辑的文件（以及其他一堆文件）的名称开头有一个下划线。这表示它是一个部分文件。如果您查看`320andup-sass.sass`文件或您选择的语言的相应文件，您会注意到在所有`@media`查询中，都有`@import`语句。对于我们刚刚编辑的文件，在相同的`@media`查询中有一个`@import
    768`语句，就像您在普通CSS文件中看到的那样：
- en: '[PRE32]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When it gets to this point in the file, it tells the SASS preprocessor to go
    find the file with the name `_768.sass` and render whatever code is there into
    this place. So, not exactly rocket science, but a lot of the busy work of setting
    all this up has been taken care of for you.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件执行到这一点时，它告诉SASS预处理器去找到名称为`_768.sass`的文件，并将那里的任何代码呈现到这个位置。因此，这并不是什么高深的科学，但是设置所有这些的繁重工作已经为您处理了。
- en: 'Ok, now back to getting this design to respond to this tablet size. The other
    thing you will notice is that we probably don''t need to have the navigation elements
    hidden anymore. If we can keep the navigation convenient and show a lot of content
    as well, then we''ve accomplished some very important missions! So let''s go back
    to that `_786.sass` file and add this above our previous chunk of code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在回到让这个设计响应这个平板尺寸的问题。您还会注意到的另一件事是，我们可能不再需要隐藏导航元素了。如果我们可以保持导航方便，并显示大量内容，那么我们已经完成了一些非常重要的任务！所以让我们回到`_786.sass`文件，并在我们之前的代码块上面添加以下代码：
- en: '[PRE33]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You'll notice this structure mirrors the structure of our original `site.sass`
    file. This is just a good practice for maintenance reasons as well as making sure
    that the styles actually override the other ones.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这个结构与我们原始的`site.sass`文件的结构相似。这只是出于维护原因的一个良好实践，以确保样式实际上覆盖了其他样式。
- en: Refresh your screen if necessary and now you'll see that the navigation elements
    extend from left to right. This is probably what you are used to seeing on a regular
    old desktop website. And there was much rejoicing. There is the possibility of
    moving this style into the `_480` file layout too, but it looks a bit crowded
    to my eye. That said, if you had less navigation and a small logo (or no logo),
    you might want to apply that style at 480 px instead.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，刷新您的屏幕，现在您会看到导航元素从左到右延伸。这可能是您在常规桌面网站上习惯看到的。大家都很高兴。这种样式也可能移动到`_480`文件布局中，但在我看来，这看起来有点拥挤。话虽如此，如果您的导航较少并且有一个小徽标（或没有徽标），您可能希望在480像素时应用该样式。
- en: 'There is one more neat little tweak that we should make at this point. All
    the content in the navigation and hero is sitting closer to the edge of the viewport
    than it needs to. We can definitely add some breathing space. In the markup, we
    have a nice utility class that we can use for this purpose (it''s been something
    of a convention that frontend developers have been using for a while now). Add
    this code in the `_768` file of your choosing, above all the previous code we''ve
    written so far:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，还有一个很棒的小调整。导航和英雄中的所有内容都比需要的边缘更靠近视口。我们肯定可以添加一些空间。在标记中，我们有一个很好的实用类，可以用于这个目的（这已经成为前端开发人员一直在使用的一种约定）。在您选择的`_768`文件中添加此代码，放在我们迄今为止编写的所有先前代码的上面：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This allows us to center these containers within the other elements that we
    want to visually fill the width of the screen, which makes our app have a huge
    visual impact without the content sprawling too much. This sizing and margin is
    dynamic and changes in a fluid manner as the browser gets wider in proportion
    to the content panels below. We could set explicit widths at various visual breakpoints;
    however, we wouldn't be taking advantage of the framework then. I would argue
    that fixed widths are a passing paradigm.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够将这些容器居中放置在我们希望在屏幕宽度上填充的其他元素中，这样我们的应用程序在不过分扩展内容的情况下产生了巨大的视觉影响。这种大小和边距是动态的，并且随着浏览器变得更宽而以流畅的方式变化。我们可以在各种视觉断点处设置明确的宽度；然而，如果我们这样做，我们就没有充分利用这个框架。我认为固定宽度是一种过时的范式。
- en: Let me explain what I mean by that. In the earlier days of web design, designers
    made their pages look more like… well, pages. But web design currently has an
    expanded idea that the page should be more flexible. I think this is a good thing,
    don't you? Just as an example, users with large displays don't get a narrow band
    of content in the middle of their page.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下我的意思。在网页设计的早期，设计师们让他们的页面看起来更像……嗯，页面。但是当前的网页设计有一个更灵活的理念。我认为这是一件好事，你不觉得吗？举个例子，使用大屏幕的用户不会在页面中间得到一个狭窄的内容带。
- en: 'Along those lines, did you notice another convenience of the way 320 and Up
    is designed? Once we applied the styles for 768, those styles are applied to the
    larger screens too. Neat! Less code means faster and better work, and easier maintenance.
    It also means less CSS for a browser to download. That is the UI trifecta: good
    user experience, good performance, and maintainability.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着这些线路，您是否注意到“320 and Up”的设计方式还有另一个便利之处？一旦我们应用了768的样式，这些样式也适用于更大的屏幕。很棒！更少的代码意味着更快更好的工作，更容易的维护。这也意味着浏览器需要下载更少的CSS。这就是UI的三重要素：良好的用户体验，良好的性能和可维护性。
- en: Now, another thing you'll notice is that our footer is fine. I must admit that
    I've taken the easy way out with that, but the approach I've used here is still
    useful for content of this type. When there is little content for an area of the
    page, such as a footer, it pays to just tastefully center-align all the content.
    When done properly, it is easy to read and doesn't distract from what is clearly
    the more important content up above on the page. And if the footer has something
    really important, you should consider moving it up into the body of your page!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你会注意到另一件事，我们的页脚没问题。我必须承认，我在这方面采取了简单的方法，但我在这里使用的方法对于这种类型的内容仍然很有用。当页面的某个区域（比如页脚）的内容很少时，只需将所有内容合理地居中对齐是很有益的。如果做得当，它很容易阅读，并且不会分散注意力，而这显然是页面上方更重要的内容。如果页脚有非常重要的内容，您应该考虑将其移到页面的主体部分！
- en: Next, let's revisit, the Hero area and discuss adding images in there and use
    some simple code to cycle through them.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们重新审视英雄区域，并讨论在其中添加图像并使用一些简单的代码来循环播放它们。
- en: Slider
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑块
- en: So, before we get into making a slideshow, it will be useful to see how well
    320 and Up facilitates making images responsive. If you look in the supplied code
    in the `index.html` file, you will see a block of code just below the hero markup
    for slider markup. I have left comments in there to make it easy to find.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在制作幻灯片之前，看一下320 and Up如何便于制作响应式图像将是有用的。如果您查看`index.html`文件中提供的代码，您将看到英雄标记下方的幻灯片标记。我已经在那里留下了注释，以便您可以轻松找到。
- en: 'For now, because I want you to see something already put in place for you in
    your own file, only add the following markup:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为我希望您看到已经为您放置在您自己的文件中的一些内容，所以只需添加以下标记：
- en: '[PRE35]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Use this markup in place of the hero markup (either delete the hero stuff or
    comment it out; it's totally up to you).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用这个标记代替英雄标记（要么删除英雄内容，要么将其注释掉；完全取决于你）。
- en: 'Next, add this small bit of CSS to the `site.css` file you are working in (it
    will be identical in all file types):'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您正在工作的`site.css`文件中添加以下少量CSS（所有文件类型中都是相同的）：
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Refresh the page and play around with the width of your browser. You should
    see the image change without ever getting cropped. This is an elegant solution
    in that one image will work for all layouts. It is not a solution for all cases
    (and there are a lot of discussions right now about how to make images more responsive
    to screen size). But here is the situation it is good for: I have a small number
    of images that aren''t too large and I don''t need to have them cropped differently
    for different screen sizes. This situation is actually pretty common, so as long
    as you can get your images to be lightweight, it works well.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面并调整浏览器宽度。您应该看到图像在不被裁剪的情况下发生变化。这是一个优雅的解决方案，因为一个图像将适用于所有布局。这并不是所有情况的解决方案（目前有很多关于如何使图像更适应屏幕尺寸的讨论）。但是它适用于以下情况：我有少量不太大的图像，我不需要为不同的屏幕尺寸裁剪它们。这种情况实际上非常普遍，只要您的图像能够轻量化，它就能很好地工作。
- en: Now, let's add a little bit more complexity without recreating the wheel. For
    now, we will just add two more images and I will supply some simple JavaScript
    to cycle through and have the images fade-in.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们增加一些复杂性，而不是重新发明轮子。现在，我们只会添加两张图片，并提供一些简单的JavaScript来循环播放并使图像淡入。
- en: 'Let''s change the markup so that we can get ready for more JS and CSS:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改标记，以便为更多的JS和CSS做好准备：
- en: '[PRE37]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Not a ton of code, but let's walk through this to understand it in depth. We
    need to wrap the images in `<div>` tags now (for other purposes, you could always
    put them in other block elements; however, right now this simple markup is totally
    appropriate for our purpose). These `div` containers allow us to assign classes
    and do block level styling to anything within a slide and not just images. For
    now, we are only placing a single image in these slides, but if we wanted to add
    captions or buttons or something that would become impractical. For the slideshow
    to display flexibly, we just need these wrappers around everything.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 代码不多，但让我们深入了解一下。现在我们需要将图像包装在`<div>`标签中（出于其他目的，您总是可以将它们放在其他块元素中；但是，现在这种简单的标记对于我们的目的来说是完全合适的）。这些`div`容器允许我们为幻灯片中的任何内容分配类并进行块级样式设置，而不仅仅是图像。目前，我们只在这些幻灯片中放置了一个图像，但是如果我们想要添加标题或按钮或其他东西，那将变得不切实际。为了使幻灯片放映灵活显示，我们只需要将这些包装器放在所有内容周围。
- en: 'Now, let''s look at some CSS to get this to display properly:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一些CSS，以便正确显示这个：
- en: '[PRE38]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'and the compiled CSS:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 和编译后的CSS：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This markup allows us to make sure that the first image is the only one visible
    without even running any JavaScript. The `slide` class by default is not visible
    and it only becomes visible when it gets the class `active` added to it. This
    not only works at the code level, but also reads nicely. You read the code and
    it says `class="active slide"` and you have a pretty good idea what that means.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标记使我们可以确保第一个图像是唯一可见的，甚至不需要运行任何JavaScript。默认情况下，`slide`类是不可见的，只有在添加`active`类时才变得可见。这不仅在代码级别上起作用，而且读起来也很好。您读到代码，它说`class="active
    slide"`，您就会对这是什么意思有一个很好的想法。
- en: To move on, let's add some JS to see if we can get a simple animation going.
    This will not be a fancy animation. Just to warn you; if you want something with
    cool controls and other bells and whistles, that is beyond the scope of this book.
    If you want a neat responsive slideshow, I recommend either the carousel included
    in Twitter Bootstrap or any other responsive slideshow. This sample code I am
    sharing below will simply cycle through some images.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一些JS，看看我们是否可以进行简单的动画。这不会是一个花哨的动画。提醒您一下；如果您想要一些带有酷炫控件和其他花里胡哨的东西，那就超出了本书的范围。如果您想要一个漂亮的响应式幻灯片放映，我建议使用Twitter
    Bootstrap中包含的轮播或其他任何响应式幻灯片放映。我下面分享的示例代码将简单地循环浏览一些图像。
- en: 'Add this inside your `document ready` function:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`document ready`函数中添加这个：
- en: '[PRE40]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This code was adapted from [http://jonraasch.com/blog/a-simple-jquery-slideshow](http://jonraasch.com/blog/a-simple-jquery-slideshow)
    to work with our 320 and Up layout. It will cycle through your images and append
    the active class to each one while removing it from the previous one. Then once
    it gets to the last one, it assigns it to the first one. Again, a very simple
    approach since the focus of this book is 320 and Up. If you want to use a slideshow,
    I suggest not reinventing the wheel since there are a lot of great components
    out there. If you are looking to choose a good component, look for one that is
    either designed to be responsive or at least does not interfere with it.. Another
    criterion for me is that it uses CSS3 animations with JS polyfills. CSS3 animations
    are likely to (though not in all cases) run smoother on mobiles than JS animations.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是从[http://jonraasch.com/blog/a-simple-jquery-slideshow](http://jonraasch.com/blog/a-simple-jquery-slideshow)改编的，以适应我们的320和Up布局。它将循环浏览您的图像，并将活动类附加到每个图像，同时从上一个图像中删除它。然后一旦到达最后一个，它就会分配给第一个。再次，这是一个非常简单的方法，因为本书的重点是320和Up。如果您想使用幻灯片放映，我建议不要重复发明轮子，因为有很多很棒的组件可供选择。如果您想选择一个好的组件，请寻找一个设计为响应式的组件，或者至少不会干扰它。对我来说，另一个标准是它使用带有JS
    polyfills的CSS3动画。CSS3动画在移动设备上可能（虽然不是在所有情况下）比JS动画更流畅。
- en: 'One limitation of the image we have used is that for really large screens,
    the image kind of gets swallowed up in all the negative space on the left and
    right of the slide. If this bothers you and is keeping your site from looking
    as good as you think it should, there are two strategies at your disposal: include
    larger images or put a full-width background in that area. I prefer the latter
    because a proportionally larger image is going to eat up the top of our layout
    and would also mean larger files that could definitely harm performance.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的图像的一个限制是，对于非常大的屏幕，图像在幻灯片的左右负空间中有点被吞没。如果这让您感到困扰，并且使您的网站看起来不如您认为的那样好，那么您有两种策略可供选择：包含更大的图像或在该区域放置全宽度的背景。我更喜欢后者，因为比例更大的图像将占据我们布局的顶部，并且还意味着可能会损害性能的更大的文件。
- en: Remember that the ultimate goal here is to get content to the visitors on our
    site! The latter strategy requires some planning though. Either your images need
    to have some transparency around the edges or the background of all your images
    should match the background you use in your CSS or the slider area. I am going
    to show you a simple example of matching the background.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里的最终目标是将内容呈现给我们网站的访问者！后一种策略需要一些规划。要么您的图像需要在边缘周围具有一些透明度，要么所有图像的背景应与您在CSS或滑块区域中使用的背景相匹配。我将向您展示一个简单的匹配背景的示例。
- en: 'I happen to know that the sample images I created have a vertical gradient
    that goes from `#383234` to `#231F20`. So now all I need to do is make a background
    that matches that. Using the SCSS mixin provided in 320 and Up is ridiculously
    easy. I just add this to my `.slider` styles:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我碰巧知道我创建的示例图像具有从`#383234`到`#231F20`的垂直渐变。所以现在我所需要做的就是制作一个与之匹配的背景。使用320和Up提供的SCSS
    mixin非常容易。我只需将这个添加到我的`.slider`样式中：
- en: '[PRE41]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'and that is rendered to CSS as:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 并且渲染为CSS：
- en: '[PRE42]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The limitation of this approach is that devices that don't support gradients
    will get a solid color. If this is unacceptable to you, then it's time to go back
    to the drawing table and come up with a design that will work in all scenarios!
    In most cases, I have worked with designers who either throw their hands up in
    this situation or find ways to make their design work in all situations. If you
    ask me, it's a moving target and it's best to focus your energies on a design
    that you know will look spot-on to 80 percent of your audience and still decent
    to the remainder of your site's viewers.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的局限性在于不支持渐变的设备将会得到纯色。如果这对你来说是不可接受的，那么现在是时候回到绘图板，想出一个在所有情况下都能工作的设计了！在大多数情况下，我与设计师合作，他们要么在这种情况下束手无策，要么找到方法使他们的设计在所有情况下都能工作。如果问我，这是一个不断变化的目标，最好把精力集中在一个你知道会完美呈现给80%的受众，并且对你网站其他观众也还不错的设计上。
- en: Ok! Now you have the fundamentals for a home page that will display optimally
    on virtually any device! This was a lot of work, but now that we have laid the
    ground work, the other pages will go fast.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 好！现在你已经掌握了一个主页的基本知识，它将在几乎任何设备上都能得到最佳显示！这是很多工作，但现在我们已经奠定了基础，其他页面将会很快。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we created navigation that changes based on screen size so
    that users of small screens can expand or collapse it and users of large screens
    get the entire navigation menu. We even used CSS to create the icon that indicates
    a collapsible menu. We made a responsive hero area with a big call to action,
    leveraging mixins and variables to quickly get our design to come together with
    colors that complement one another. We used the panel `Upstart` to get the triad
    of content panels at the bottom of our page and we used the supplied icons and
    CSS framework to include social media and contact info icons in the footer. And
    best of all, this happened really fast. When you get the hang of it, you can pull
    a page like this together within an hour. Now let's move on to the next chapter!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们创建了根据屏幕大小变化的导航，这样小屏幕用户可以展开或折叠它，而大屏幕用户可以获得完整的导航菜单。我们甚至使用CSS创建了指示可折叠菜单的图标。我们制作了一个响应式的主区域，有一个大的行动号召，利用混合和变量快速将我们的设计与相互补充的颜色结合在一起。我们使用面板“Upstart”在页面底部获得了三个内容面板，并使用提供的图标和CSS框架在页脚包括社交媒体和联系信息图标。最重要的是，这一切发生得非常快。一旦你掌握了它，你可以在一个小时内完成这样的页面。现在让我们继续下一章吧！
