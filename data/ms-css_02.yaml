- en: Ramping Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速
- en: In order to be a great coder, you need to ramp up and learn about things that
    will help you become a better developer. In this chapter, we're going to look
    at text editors that will speed up our workflow. We'll then look at a *CSS reset*,
    which resets the default browser such that its styling is reduced to nothing,
    and the built-in browser developer tools to help us troubleshoot our code. Then,
    we'll look at how to rename elements with classes and IDs as well as qualify our
    selectors using descendant selectors.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成为一个优秀的编码人员，你需要加速并学习一些能帮助你成为更好的开发人员的东西。在本章中，我们将看看可以加快工作流程的文本编辑器。然后，我们将看看*CSS重置*，它重置默认浏览器，使其样式减少到最低，并内置浏览器开发者工具，帮助我们排除代码故障。然后，我们将看看如何使用类和ID重命名元素，并使用后代选择器限定我们的选择器。
- en: Text editors
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: 'HTML, CSS, and JavaScript can be written in any text-editing application. This
    is one of the great things about the three core web languages. The problem is
    that writing HTML, CSS, and JavaScript is extremely error-prone. For CSS, commas,
    semicolons, and curly braces need to be typed in the right spots. A specific syntax
    needs to be adhered to perfectly in most cases, else your page won''t render as
    expected. The following is an illustration of TextEdit for Mac. It''s similar
    in nature to Notepad for Windows, in that it doesn''t have many features that
    make writing code easy:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript可以在任何文本编辑应用程序中编写。这是这三种核心网络语言的伟大之处之一。问题在于，编写HTML、CSS和JavaScript极易出错。对于CSS，逗号、分号和大括号需要在正确的位置输入。在大多数情况下，需要完美地遵守特定的语法，否则你的页面将无法按预期渲染。以下是Mac上的TextEdit的示例。它与Windows上的记事本类似，因为它没有许多使编写代码变得容易的功能：
- en: '![](img/00025.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.jpeg)'
- en: 'Let''s write some code in TextEdit anyway. We start with the HTML doc type.
    Post this, we add an HTML opening and closing tag and then the `head` tag and
    inside that the `title` tag. You''ll soon realize that it''s a pretty tedious
    process, that is, writing code in TextEdit. We can write code here, but we''re
    really getting nothing out of it, no syntax highlighting, and no other assistance
    whatsoever:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，让我们在TextEdit中写一些代码。我们从HTML文档类型开始。之后，我们添加一个HTML开放和闭合标签，然后是`head`标签，里面是`title`标签。你很快就会意识到，这是一个相当乏味的过程，也就是在TextEdit中编写代码。我们可以在这里写代码，但我们真的得不到任何东西，没有语法高亮，也没有其他任何帮助：
- en: '![](img/00026.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.jpeg)'
- en: Luckily, a good text editor can really do the hard work for you. In this chapter,
    we'll look at such a text editor, namely Sublime Text 3, and some of the nice
    features it has to help you write HTML and CSS even better. First, we'll look
    at snippets, then we'll look at syntax highlighting, followed by code suggestions
    and multiple cursors. Sublime Text 3 is my text editor of choice as it is fast
    and easy to use. One of the things I love is how easy and natural it allows me
    to write code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一个好的文本编辑器可以真正为你做一些艰苦的工作。在本章中，我们将看看这样一个文本编辑器，即Sublime Text 3，以及它具有的一些很好的功能，可以帮助你更好地编写HTML和CSS。首先，我们将看看片段，然后我们将看看语法高亮，接着是代码建议和多个光标。Sublime
    Text 3是我选择的文本编辑器，因为它快速且易于使用。我喜欢的一件事是它如何轻松自然地让我编写代码。
- en: Snippets
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 片段
- en: 'In Sublime Text 3, you simply need to type in `html:5` in your HTML file and
    hit the *Tab* key to get a basic boilerplate for your HTML. So, all of the code
    that we had to type in TextEdit can be quickly written for us:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sublime Text 3中，你只需在HTML文件中输入`html:5`，然后按下*Tab*键，就可以获得HTML的基本样板。所以，我们在TextEdit中必须输入的所有代码都可以很快地为我们写好：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another thing is when you type in `div` and hit the *Tab* key, you can have
    `div` expanded with the closing tag created automatically and the cursor right
    in between the opening and closing `div` tag:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件事是，当你输入`div`并按下*Tab*键时，可以自动创建`div`的闭合标签，并将光标放在开放和闭合`div`标签之间：
- en: '![](img/00027.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: 'We can do this for any HTML element; just type in something like `p` and hit
    *Tab* and get your cursor right in between:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对任何HTML元素做到这一点；只需输入像`p`这样的东西，然后按下*Tab*键，将光标放在中间：
- en: '![](img/00028.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: That is beautiful! It's really nice to have something that simple.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！拥有如此简单的东西真的很好。
- en: 'We can take this one step further and install the Emmet package. I highly encourage
    you to do so. This will provide you with even better code snippets. In fact, the
    `html:5` code snippet that produced the basic HTML boilerplate before, is actually
    an Emmet snippet; it doesn''t come standard with Sublime:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再进一步安装Emmet包。我强烈鼓励你这样做。这将为您提供更好的代码片段。实际上，之前生成基本HTML样板的`html:5`代码片段实际上是一个Emmet片段；它不是Sublime的标准功能：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The ability to install packages, which are basically plugins, in Sublime is
    another reason why it''s so powerful. There''s a package for everything you need
    that doesn''t come out of the box with Sublime. So let''s say you need syntax
    highlighting for ColdFusion code; there''s a package available that will do this
    for you. I have an article on my site that covers package installation, which
    is pretty simple. Just check it out at [richfinelli.com/installing-sublime-package-manager/](http://www.richfinelli.com/installing-sublime-package-manager/):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sublime中安装包（基本上是插件）的能力，是它如此强大的另一个原因。对于Sublime没有默认提供的所有内容，都有一个可用的包。所以，假设你需要ColdFusion代码的语法高亮；有一个可用的包可以为你做到这一点。我在我的网站上有一篇文章，介绍了包安装，这非常简单。只需在[richfinelli.com/installing-sublime-package-manager/](http://www.richfinelli.com/installing-sublime-package-manager/)上查看它：
- en: '![](img/00029.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: 'By far, this is the best package, and the first thing you should install is
    Emmet. With Emmet, say you go to your HTML and type in something like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这是最好的包，你应该安装的第一件事就是Emmet。有了Emmet，比如你去到你的HTML并输入像这样的东西：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will expand to the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将扩展为以下内容：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the `$` expanded in to 1 for the first `a`, and 2 for second, and
    so on, which can be very useful. Writing HTML quickly using a CSS selector-like
    syntax is just one of the nice things that Emmet allows you to do.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`$`在第一个`a`中扩展为1，第二个为2，依此类推，这可能非常有用。使用类似CSS选择器的语法快速编写HTML只是Emmet允许你做的好事之一。
- en: Multiple cursors
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重光标
- en: 'Keeping the `div` tag we just expanded with Emmet, let''s look at Sublime''s
    multiple cursors feature. Since we had five lists, we may need to type in the
    same thing in each one. If you hold down your *cmd* key and click on separate
    lines of code, you can actually create multiple cursors. As illustrated, you can
    now type the same thing in five different spots:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Emmet扩展的`div`标签，让我们来看看Sublime的多重光标功能。由于我们有五个列表，我们可能需要在每个列表中输入相同的内容。如果按住*cmd*键并单击代码的不同行，您实际上可以创建多个光标。如图所示，您现在可以在五个不同的位置输入相同的内容：
- en: '![](img/00030.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: 'Now, let''s say you want to type in some placeholder text where you will have
    multiple cursors. First, type in "lorem5", or "lorem" followed by any other number,
    and you''ll get than many words of placeholder "lorem ipsum" text:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设您想在多个光标处输入一些占位文本。首先，输入“lorem5”，或者输入“lorem”后跟任何其他数字，您将获得相应数量的占位“lorem ipsum”文本：
- en: '![](img/00031.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: 'Then, just hit *Tab*, and it will automatically expand to, in our case, 5 words
    of lorem ipsum text, as illustrated here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需按下*Tab*，它将自动扩展到我们的情况下，即5个字的lorem ipsum文本，如图所示：
- en: '![](img/00032.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.jpeg)'
- en: Syntax highlighting
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法高亮
- en: 'Let''s switch over to our CSS for a second. Another feature that will make
    our job much easier is syntax highlighting. Notice how the rule sets all follow
    a color scheme. The selectors are red, properties are blue, and the values are
    purple. They will start getting embedded into your subconscious mind:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时切换到我们的CSS。另一个将使我们的工作更加轻松的功能是语法高亮。请注意，所有规则集都遵循一种颜色方案。选择器是红色的，属性是蓝色的，值是紫色的。它们将开始嵌入到您的潜意识中：
- en: '![](img/00033.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00033.jpeg)'
- en: 'What Sublime Text does for you is it subtly points out your mistakes. I often
    type in a semicolon where a colon is required. This will cause your CSS to not
    work. Syntax highlighting, though, tells me that something is wrong because, as
    shown in the following screenshot, the color scheme changes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text为您做的是，它微妙地指出了您的错误。我经常在需要冒号的地方输入了分号。这将导致您的CSS无法工作。尽管如此，语法高亮告诉我有些地方不对，因为如下截图所示，颜色方案发生了变化：
- en: '![](img/00034.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00034.jpeg)'
- en: 'It''s easy to spot a color difference but difficult to see the difference between
    a colon and a semicolon if you are not looking for it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易发现颜色差异，但如果您不寻找它，很难看出冒号和分号之间的区别：
- en: Code suggestion
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码建议
- en: 'There are some cool features available, such as code completion and code suggestion.
    So if you start typing in something like `border-`, you''ll get all the different
    properties that start with `border`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些很酷的功能可用，比如代码完成和代码建议。因此，如果您开始输入类似`border-`的内容，您将获得所有以`border`开头的不同属性：
- en: '![](img/00035.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: 'In this case, I''m looking for `border-radius`, so I can just go to that suggestion
    and hit *Tab* and it automatically completes the task for me:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我正在寻找`border-radius`，所以我可以直接转到该建议并按下*Tab*，它会自动为我完成任务：
- en: '![](img/00036.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: There are so many other reasons why I love this text editor that I won't go
    into. It comes at a cost of $70 but has an unlimited free trial that you can use
    to determine whether or not you like it—trust me, you will. Now I'm not saying
    that Sublime is the only text editor you should use or try. There are other good
    editors as well, like Visual Studio Code, Atom, Adobe Brackets, and others. If
    you're using something else that does most of the things I'm talking about and
    it works for you, then stick with it. Just make sure that you don't use Notepad
    or TextEdit to write your code as that will be very painful and unproductive.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个文本编辑器的原因还有很多，我就不一一列举了。它的价格是70美元，但有一个无限免费试用版，您可以用来确定您是否喜欢它——相信我，您会喜欢的。现在我并不是说Sublime是您应该使用或尝试的唯一文本编辑器。还有其他好的编辑器，比如Visual
    Studio Code，Atom，Adobe Brackets等。如果您使用的是其他大部分我所说的功能，并且对您有用的东西，那就坚持使用它。只是确保您不要使用记事本或文本编辑器来编写代码，因为那将非常痛苦和低效。
- en: A good text editor is essential for writing good HTML and CSS and will make
    our lives much easier. Next, you're going to learn about CSS resets and how they
    help us create a very good starting point for writing CSS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的文本编辑器对于编写良好的HTML和CSS至关重要，并将使我们的生活更加轻松。接下来，您将了解CSS重置以及它们如何帮助我们为编写CSS创建一个非常好的起点。
- en: CSS reset
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS重置
- en: In the last section, you learned about the power of a good text editor. In this
    section, we're going to use that text editor to explore something called a *CSS
    reset*. There's a lot of pieces to starting a website that need to be in place
    and are typically part of your website boilerplate. I call these pieces your "base
    layer". A big part of this *base layer* is the CSS reset. A reset allows you to
    eliminate browser inconsistencies with regard to default browser styling and eliminate
    all default browser styles in general. It allows *you* to more easily provide
    *your* handcrafted styles using CSS. In this section, we're going to first load
    in a CSS reset, then examine that reset and see what it's doing. Finally, we'll
    add to and customize the reset to fit our needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您了解了良好文本编辑器的强大功能。在本节中，我们将使用该文本编辑器来探索一种称为*CSS重置*的东西。开始网站需要放置并且通常是您网站样板的一部分的许多部分。我称这些部分为您的“基础层”。这个*基础层*的一个重要部分是CSS重置。重置允许您消除浏览器在默认浏览器样式方面的不一致，并一般上消除所有默认浏览器样式。它允许*您*更轻松地使用CSS提供*您*手工制作的样式。在本节中，我们将首先加载CSS重置，然后检查该重置并看看它在做什么。最后，我们将添加和自定义重置以满足我们的需求。
- en: Loading Eric Meyer's CSS reset
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载Eric Meyer的CSS重置
- en: 'There are a few different resets to choose from, but I''ve been hooked to the
    CSS guru Eric Meyer''s reset. Let''s go grab it from [meyerweb.com/eric/tools/css/reset/](http://meyerweb.com/eric/tools/css/reset/):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的重置可供选择，但我已经迷上了CSS大师Eric Meyer的重置。让我们从[meyerweb.com/eric/tools/css/reset/](http://meyerweb.com/eric/tools/css/reset/)获取它：
- en: '![](img/00037.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: 'So, scroll down a little bit to find the top of the reset, then just highlight
    all of the code until you get to the closing curly brace:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，向下滚动一点，找到重置的顶部，然后只需突出显示所有代码，直到你到达闭合大括号：
- en: '![](img/00038.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: 'Switch over to Sublime, open your style sheet, and paste it in there:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 Sublime，打开你的样式表，然后粘贴进去：
- en: '![](img/00039.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: 'Before we save this, let''s open the `index.html` file for our site. One of
    the things you can do with Sublime is this: if you right-click on your HTML file,
    you can select Open in Browser and it will open your default browser:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存之前，让我们打开我们网站的 `index.html` 文件。你可以用 Sublime 做的一件事是：如果你右键点击你的 HTML 文件，你可以选择在浏览器中打开，它会打开你的默认浏览器：
- en: '![](img/00040.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: 'In my case, it''s Chrome. So this is what the site will look like without the
    reset:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，是 Chrome。所以这就是没有重置的网站会是什么样子：
- en: '![](img/00041.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00041.jpeg)'
- en: As you can see in the next screenshot, all of the CSS we added actually removed
    the little bit of styling we had. This is why we call it a reset. All text looks
    the same—no margin, no padding, no nothing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在下一个截图中看到的，我们添加的所有 CSS 实际上移除了我们的一点点样式。这就是为什么我们称它为重置。所有文本看起来都一样——没有边距，没有填充，什么都没有。
- en: '![](img/00042.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: Examining the CSS reset
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 CSS 重置
- en: 'Up at the very top of our style sheet, there is a CSS comment that credits
    Eric Meyer for the reset. We''ll leave that in there:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的样式表的顶部，有一个 CSS 注释，归功于 Eric Meyer 的重置。我们会留下这个注释：
- en: '![](img/00043.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: 'Next, we have the bulk of the reset. This huge chunk of code is vaguely a reminder
    of the rule set you learned about in [Chapter 1](part0021.html#K0RQ0-a72d261cc09f412988422c8a08f12cd5),
    *CSS Foundations*. It''s really just a rule set with a very long selector. The
    selector has just about every HTML element separated by commas:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有大部分的重置。这一大块代码模糊地提醒了你在 [第1章](part0021.html#K0RQ0-a72d261cc09f412988422c8a08f12cd5)
    中学到的规则集，*CSS 基础*。它实际上只是一个带有非常长选择器的规则集。选择器中用逗号分隔了几乎每个 HTML 元素：
- en: '![](img/00044.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: 'This means that all these elements are going to receive the same styles from
    the declaration block:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着所有这些元素都将从声明块中接收相同的样式：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see in the first three declarations of this declaration block, `margin`,
    `padding`, and `border` are set to `0`. Using the value of `0` is the same as
    using `0px` just with two less characters. You just don't need to specify pixels
    if the value is zero. This removes the default margin, padding, and border from
    all the elements. Right below those declarations, we have the `font-size` property,
    which is `100%`. This line is an instruction to make all the fonts browser-default,
    which basically means `16px` since the default browser font size for most desktop
    browsers is `16px`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在这个声明块的前三个声明中看到的，`margin`、`padding` 和 `border` 都被设置为 `0`。使用值 `0` 和使用 `0px`
    是一样的，只是少了两个字符。如果值是零，你就不需要指定像素。这将从所有元素中移除默认的 margin、padding 和 border。在这些声明的下面，我们有
    `font-size` 属性，它是 `100%`。这一行是一个指令，使所有字体都是浏览器默认的，基本上就是 `16px`，因为大多数桌面浏览器的默认字体大小是
    `16px`。
- en: 'Below this declaration block, we have the new HTML5 elements whose display
    we set to block. This allows some older browsers that don''t recognize these new
    elements to now consider them block-level elements. This allows HTML5 to work
    in some older browsers:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个声明块下面，我们有新的 HTML5 元素，我们将它们的显示设置为块级。这允许一些不认识这些新元素的旧浏览器现在将它们视为块级元素。这使得 HTML5
    可以在一些旧浏览器中工作：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we have a new selector and declaration that sets the `line-height` to
    `1`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个新的选择器和声明，将 `line-height` 设置为 `1`：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `line-height` property cascades downward, meaning if we set it on an element,
    for example, `body`, it will be inherited down to all the other elements it contains.
    The value of `1` is a unit-less value, so `1` will be equal to the size of the
    font. The value of `1.2` would be 1.2 times the size of the font. So, if the `font-size`
    is `16px` and `line-height` is `1`, then the `line-height` will be equivalent
    to `16px`. If `line-height` is set to `2` and your font size is `16px`, then `line-height`
    will be equivalent to `32px`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`line-height` 属性向下级联，这意味着如果我们在一个元素上设置它，例如 `body`，它将被继承到它包含的所有其他元素。值 `1` 是一个无单位的值，所以
    `1` 将等于字体的大小。值 `1.2` 将是字体大小的 1.2 倍。所以，如果 `font-size` 是 `16px`，`line-height` 是
    `1`，那么 `line-height` 将等于 `16px`。如果 `line-height` 设置为 `2`，你的字体大小是 `16px`，那么 `line-height`
    将等于 `32px`。'
- en: 'Next in the style sheet are the ordered and unordered lists, where we remove
    the bullet point and numbers from `ul`, `ol` and by way of cascade, `li`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在样式表中是有序和无序列表，我们从 `ul`、`ol` 中移除了项目符号和编号，通过级联的方式也会应用到 `li` 中：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Beneath this, you will see that the reset has set some defaults for the `blockquote`
    and `q` elements. I find myself rarely using block quotes, and this reset is kind
    of long, so typically I get delete this section of the reset. But if you find
    yourself using these elements often, then keep it in there:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之下，你会看到重置为 `blockquote` 和 `q` 元素设置了一些默认值。我很少使用块引用，而且这个重置有点长，所以通常我会删除这部分重置。但如果你经常使用这些元素，那就保留它：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we have 2 `table` properties being reset: `border-collapse` and `border-spacing`:
    which I''ve never dug into too deeply but ultimately handle some nuanced table
    inconsistencies that you''ll never see in any modern desktop browser.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们重置了 2 个 `table` 属性：`border-collapse` 和 `border-spacing`：我从未深入研究过，但最终处理了一些微妙的表格不一致，你在任何现代桌面浏览器中都看不到。
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is pretty much the anatomy of a CSS reset. This reset should be a part
    of your base layer of CSS that gets you started. We'll now look at how we can
    add to this and customize it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是 CSS 重置的解剖。这个重置应该是你的 CSS 基础层的一部分，让你开始。我们现在将看看如何添加和自定义它。
- en: Customizing the CSS reset
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 CSS 重置
- en: 'Let''s update the `line-height` and `font-family` property on the `body` element,
    which will establish what is called "vertical rhythm" and make `Arial` the default
    `font-family` for all the elements:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`body`元素上的`line-height`和`font-family`属性，这将建立所谓的“垂直韵律”，并使`Arial`成为所有元素的默认`font-family`：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will then see how it affects the text, chiefly adding some vertical space
    between rows lines of text:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会看到它如何影响文本，主要是在文本的行之间添加一些垂直空间：
- en: '![](img/00045.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: Establishing these defaults early for everything is nice; that way, you don't
    have to describe `line-height` and `font-family` over and over again for each
    element throughout your CSS. Note that not all properties act like `font-family`
    and `line-height` and are inherited by child elements; only certain properties
    have this effect, mainly text-level properties behave like this. In this case,
    we set those properties on the `body` element, but they cascaded down to `h1`,
    `h2`, and our `p`, giving them all the `Arial` `font` and `line-height` of `1.4`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有这些默认值尽早建立是很好的；这样，你就不必一遍又一遍地为CSS中的每个元素描述`line-height`和`font-family`。请注意，并非所有属性都像`font-family`和`line-height`那样被子元素继承；只有某些属性具有这种效果，主要是文本级别的属性才会表现出这种行为。在这种情况下，我们在`body`元素上设置了这些属性，但它们被级联到了`h1`、`h2`和我们的`p`，使它们都具有`Arial`的`font`和`line-height`为`1.4`。
- en: 'I''d like to add in a couple more rules sets to our reset. Let''s make some
    room down at the bottom of the reset. The first one I''d like to add is `clearfix`,
    as shown in the next piece of code. I''m not going to go into `clearfix` now.
    I''ll explain it in depth in [Chapter 3](part0056.html#1LCVG0-a72d261cc09f412988422c8a08f12cd5),
    *Creating a Page Layout with Floats*. This default is very helpful for clearing
    floats; we''re going to need it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在我们的重置中再添加几个规则集。让我们在重置的底部留出一些空间。我想要添加的第一个是`clearfix`，如下一段代码所示。我现在不打算详细介绍`clearfix`。我将在[第3章](part0056.html#1LCVG0-a72d261cc09f412988422c8a08f12cd5)中详细解释它，*使用浮动创建页面布局*。这个默认值对于清除浮动非常有帮助；我们将需要它：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The next thing we''ll do is set the `max-width` for media elements to ensure
    responsive media. I''ll discuss this more in [Chapter 6](part0133.html#3UQQQ0-a72d261cc09f412988422c8a08f12cd5),
    *Becoming Responsive*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的是为媒体元素设置`max-width`，以确保响应式媒体。我将在[第6章](part0133.html#3UQQQ0-a72d261cc09f412988422c8a08f12cd5)中更详细地讨论这个问题，*成为响应式*：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, I''d like to un-reset our `strong` and `b` elements and make sure
    that they *do* have a `font-weight` of `bold`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想取消对`strong`和`b`元素的重置，并确保它们确实具有`bold`的`font-weight`：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'So that''s it about the reset. Now, jumping over to our HTML, I want to elaborate
    on two more pieces of our base layer that aren''t in the reset:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以关于重置就是这样。现在，转到我们的HTML，我想详细说明两个不在重置中的基础层的部分：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'First, we have a piece of `clearfix` that handles `IE 7`, as shown in the following
    code. You don''t need to know exactly what this is doing, but you may want to
    know that it makes `clearfix` work in IE7\. If you''re not supporting older versions
    of IE, you can omit that part. Again, we''ll look at `clearfix` in detail in [Chapter
    3](part0056.html#1LCVG0-a72d261cc09f412988422c8a08f12cd5), *Creating a Page Layout
    with Floats*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有一个处理`IE 7`的`clearfix`，如下面的代码所示。你不需要知道这到底是在做什么，但你可能想知道它使`clearfix`在IE7中工作。如果你不支持较旧版本的IE，你可以省略这部分。同样，我们将在[第3章](part0056.html#1LCVG0-a72d261cc09f412988422c8a08f12cd5)中详细讨论`clearfix`，*使用浮动创建页面布局*：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we zoom in to this code, it happens to be an embedded stylesheet. You can
    see there is an opening and closing `style` tag with a rule set in between:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们放大这段代码，它恰好是一个嵌入样式表。你可以看到有一个开头和结尾的`style`标签，中间有一个规则集：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Outside of the embedded stylesheet, the line that precedes the opening `style`
    tag is what''s called an `IE` conditional comment, and it says this: "if lower
    than or equal to `IE 7`, see the rule below."'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入样式表之外，紧接着开头的`style`标签的那一行是所谓的`IE`条件注释，它说：“如果低于或等于`IE 7`，请看下面的规则。”
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Underneath the rule set, we have a `script` pointing to the HTML5 Shiv library,
    which makes older versions of IE understand the newer HTML5 elements:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在规则集下面，我们有一个指向HTML5 Shiv库的`script`，它使旧版本的IE能够理解更新的HTML5元素：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is also inside of an IE conditional comment, but it's targeting all versions
    of IE. Actually, IE 10 and higher don't support IE conditional comments anymore,
    so this script only supports IE9 and lower versions; however, it makes sure our
    HTML5 elements are supported in older browsers. Again, if you aren't supporting
    these older browsers, feel free to omit that as well.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是在IE条件注释中，但它是针对所有版本的IE。实际上，IE 10及更高版本不再支持IE条件注释，因此这个脚本只支持IE9及更低版本；然而，它确保我们的HTML5元素在较旧的浏览器中得到支持。同样，如果你不支持这些较旧的浏览器，也可以省略这部分。
- en: In this section, we dissected our CSS resets and how to get your base layer
    ready for writing code. Now, let's take a look at the *Chrome DevTools* section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们剖析了我们的CSS重置以及如何准备好基础层来编写代码。现在，让我们来看看*Chrome DevTools*部分。
- en: Chrome DevTools
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome DevTools
- en: Most of the CSS we have done so far has been fairly simple. Everything we did
    worked the first time we tried, and that doesn't always happen. Often, CSS doesn't
    work and I'm left wondering what I missed. Syntax highlighting in my editor, while
    helpful, doesn't stop me from overlooking mistakes. Usually, it's a tiny mistake
    that causes something not to work and it's hard to find the error and fix it.
    In this section, we'll simply look at how to open up DevTools. Then, we'll modify
    some CSS in the inspector and finally look at the console to find errors.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的大部分CSS都相当简单。我们尝试的时候，所有的东西都能一次成功，但这并不总是发生。通常，CSS不起作用，我总是在想我错过了什么。我的编辑器中的语法高亮虽然有帮助，但并不能阻止我忽略错误。通常，是一个小错误导致某些东西不起作用，很难找到错误并修复它。在本节中，我们将简单地看一下如何打开DevTools。然后，我们将在检查器中修改一些CSS，最后查看控制台以找到错误。
- en: How to open developer tools
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何打开开发者工具
- en: 'To open up Chrome''s DevTools, all you need to do is right-click or *Ctrl*
    + click on any part of the page. You''ll get a contextual menu, as shown in the
    following screenshot. When you select the Inspect Element option, you get a whole
    new world of techie goodness:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开 Chrome 的 DevTools，您只需右键单击或 *Ctrl* + 单击页面的任何部分。您将获得一个上下文菜单，如下截图所示。当您选择“检查元素”选项时，您将进入一个全新的技术世界：
- en: '![](img/00046.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: 'What typically happens is DevTools will occupy the lower half of your screen.
    As you can see in the following screenshot, on the left-hand side, you have your
    HTML as rendered by the browser, technically referred to as the DOM. On the right-hand
    side, you will have all your styles:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，DevTools 会占据屏幕的下半部分。如下截图所示，左侧是浏览器渲染的 HTML，技术上称为 DOM。右侧是所有样式：
- en: '![](img/00047.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: 'If you hover over something on the left-hand side, it gets highlighted at the
    top. So, if you hover over `h2` or click on it, it gets highlighted, as you can
    see in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在左侧悬停在某个元素上，它会在顶部突出显示。因此，如果您悬停在 `h2` 上或单击它，它会突出显示，如下截图所示：
- en: '![](img/00048.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: 'If you hover over `<section>` or click on it, it gets highlighted at the top:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您悬停在 `<section>` 上或单击它，它会在顶部突出显示：
- en: '![](img/00049.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: Changing CSS inside the inspector
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改检查器内的 CSS
- en: 'On the right-hand side of the inspector, you will see all your styles for whatever
    element you have highlighted in the DOM. You can even click on any of those properties
    or values and change them. So if you click on `26px`, next to `font-size`, you
    can increase it to whatever you want. This is updated immediately in the browser,
    which is very cool:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器的右侧，您将看到您在 DOM 中突出显示的任何元素的所有样式。您甚至可以单击其中任何属性或值并更改它们。因此，如果您单击 `font-size`
    旁边的 `26px`，您可以将其增加到您想要的任何值。这将立即在浏览器中更新，非常酷：
- en: '![](img/00050.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: 'You can even uncheck certain properties and see that change immediately. So,
    as you can see in the next screenshot, if you click on the `h2` element in the
    DOM and then uncheck color and margin bottom on the right-hand side, this change
    to the h2 element takes immediate effect. Simply recheck them to add them back:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以取消选中某些属性并立即看到更改。因此，如下截图所示，如果您在 DOM 中单击 `h2` 元素，然后在右侧取消颜色和下边距，这对 `h2` 元素的更改会立即生效。只需重新选中它们即可添加它们回来：
- en: '![](img/00051.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: 'If you click on the last element—in this case, `margin-bottom` and hit *Tab*,
    it will allow you to type in a new property and value. So add `margin-left` of
    `-40px` and see what it looks like; this moves this `h2` over `40px` to the left:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您单击最后一个元素-在这种情况下是 `margin-bottom` 并按 *Tab*，它将允许您输入新的属性和值。因此，添加 `margin-left`
    为 `-40px`，看看效果；这将将此 `h2` 向左移动 `40px`：
- en: '![](img/00052.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: 'Now these aren''t permanent changes. As soon as the browser is refreshed, these
    styles will disappear; however, you can copy this rule set and paste it into your
    code if you want to keep these changes we''re experimenting with. It even tells
    us where this rule set is currently located in the style sheet-line 86\. If you
    hover your mouse over that, it will tell you exactly where that file is in your
    website''s folder:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些不是永久更改。一旦刷新浏览器，这些样式就会消失；但是，如果您想保留我们正在尝试的这些更改，可以复制此规则集并将其粘贴到您的代码中。它甚至告诉我们当前样式表中的此规则集位于样式表的第
    86 行。如果您将鼠标悬停在那里，它将准确告诉您该文件在您网站文件夹中的位置：
- en: '![](img/00053.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: Using the console to find errors
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制台查找错误
- en: 'We''re just looking at the tip of the iceberg so far when it comes to what
    you can do with Chrome DevTools. For instance, sometimes adding an image can be
    tricky. So, let''s add the following image tag to the page by typing it into our
    HTML, above `h2`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是在探索 Chrome DevTools 的冰山一角。例如，有时添加图像可能会有些棘手。因此，让我们通过在 HTML 中输入以下图像标签来将其添加到页面上，放在
    `h2` 上方：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we save this and refresh the site, we will see that the image just doesn''t
    show up, so there''s something wrong. Refreshing the page, a red error icon with
    the number one will show up in DevTools. As shown in the following screenshot,
    there''s an error:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存并刷新网站，我们会发现图像根本没有显示出来，所以肯定有问题。刷新页面后，DevTools 中会出现一个带有数字一的红色错误图标。如下截图所示，这里有一个错误：
- en: '![](img/00054.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: 'To see what the error is, click on the Console tab. You''ll see that the `sharkey.png`
    file cannot be found:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看错误是什么，请单击“控制台”选项卡。您会看到 `sharkey.png` 文件找不到：
- en: '![](img/00055.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: 'This is good information. It''s telling you it''s not a problem related to
    permissions. It''s not a 403; it just can''t find the file it''s looking for at
    this location. So one of the things I would do is open up my `images` folder and
    make sure that the image is in the folder, and in this case, let''s say that it
    is. There''s only one problem, though. The file it''s looking for is spelled differently:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很有用的信息。它告诉您这不是与权限相关的问题。这不是 403；它只是找不到它正在寻找的文件。因此，我会打开我的 `images` 文件夹，并确保图像在文件夹中，在这种情况下，我们假设它在那里。但是，唯一的问题是，它正在寻找的文件拼写不同：
- en: '![](img/00056.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: 'It''s looking for `sharkey`, S-H-A-R-K-E-Y, and the file is actually just S-H-A-R-K-Y,
    so that is easy enough to fix. Now that you know what''s wrong, you can just change
    the name in your HTML:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在寻找 `sharkey`，S-H-A-R-K-E-Y，而实际文件只是 S-H-A-R-K-Y，所以很容易修复。现在您知道问题出在哪里，只需在您的
    HTML 中更改名称即可：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you refresh the browser after saving this, this image should show up:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您保存后刷新浏览器，此图像应该会显示出来：
- en: '![](img/00057.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: So these two things, the element inspector and the console, can be extremely
    useful in experimenting with code and troubleshooting code. My biggest suggestion
    is if things aren't working as you expect them to with your HTML, CSS, and JavaScript,
    just open up DevTools and take a look under the hood. Chances are that pretty
    much all day, you'll have DevTools open. I should also add that Firefox, Safari,
    and IE have DevTools that all do similar tasks and can be just as useful for troubleshooting
    in those browsers. We've barely scratched the surface of what developer tools
    can do. Check out my blog post on troubleshooting HTML and CSS with the Chrome
    DevTools for more information; it is available at [www.richfinelli.com/troubleshooting-html-and-css](http://www.richfinelli.com/troubleshooting-html-and-css).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这两个东西，元素检查器和控制台，在实验和故障排除代码方面都非常有用。我的最大建议是，如果你的HTML、CSS和JavaScript不像你期望的那样工作，只需打开DevTools，看看底层。很可能你会整天都打开DevTools。我还要补充一点，Firefox、Safari和IE都有类似任务的DevTools，对于这些浏览器的故障排除同样有用。我们只是触及了开发者工具可以做的一小部分。查看我的博客文章，了解如何使用Chrome
    DevTools进行HTML和CSS故障排除的更多信息；网址是[www.richfinelli.com/troubleshooting-html-and-css](http://www.richfinelli.com/troubleshooting-html-and-css)。
- en: 'It explains how to create new selectors and how to access computed values instead
    of declared values, which is nice when debugging CSS rules and determining which
    rules take priority. It also walks you through the device emulation mode, among
    other things:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它解释了如何创建新的选择器，以及如何访问计算值而不是声明的值，这在调试CSS规则和确定哪些规则优先级时非常有用。它还介绍了设备仿真模式等内容：
- en: '![](img/00058.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: Now you know how to use Chrome DevTools, your ace in the hole for troubleshooting
    HTML and CSS. Next, you're going to learn how to rename elements, which is where
    a lot of the power of CSS really takes place.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何使用Chrome DevTools，它是你故障排除HTML和CSS的王牌。接下来，你将学习如何重命名元素，这是CSS真正发挥作用的地方。
- en: Renaming elements — classes and IDs
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名元素——类和ID
- en: Renaming elements is such a powerful feature of CSS. Let me set this up for
    you. So far, CSS has been good because we have been able to keep things consistent.
    All heading 1s are blue with a font size of 20 pixels, for instance, but what
    if you want your `h1` to look different? That's where renaming and classifying
    elements really becomes useful. In this section, you're going to learn about how
    to rename and style elements based on classes and IDs. We'll look at how this
    will pay off on our shark website, first with classes, followed by IDs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名元素是CSS的一个强大功能。让我为你设置一下。到目前为止，CSS一直很好，因为我们能够保持一致。例如，所有的标题1都是蓝色，字体大小为20像素，但是如果你想让你的`h1`看起来不同呢？这就是重命名和分类元素真正有用的地方。在这一部分，你将学习如何根据类和ID重命名和样式化元素。我们将看看这将如何在我们的鲨鱼网站上得到回报，首先是类，然后是ID。
- en: Classes
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: 'Look at the `index.html` file. You can see there are several HTML5 `<section>`
    tags throughout the page: one in the initial section, one in the secondary section,
    and one in the alternate section, making three all together. One of those is shown
    below:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`index.html`文件。你会看到页面中有几个HTML5的`<section>`标签：一个在初始部分，一个在次要部分，一个在替代部分，总共有三个。其中一个如下所示：
- en: '![](img/00059.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'Inside the second `<section>`, there are three `div` tags, each housing an
    `img`, `h2`, `p`, and an `a` tag. So there is nothing fancy about this HTML. The
    last section looks a lot like the first section; it just has `h1` and `h2` elements
    and a couple of paragraphs. Here''s the dilemma, though: we want `h1` at the bottom
    of the page to be different from the site''s main `h1` element. The solution is
    to add a class and a style based on this class. So, down in the alternative section,
    inside of the `h1` element, we''re going to add the class attribute. We''ll type
    `class=""` and enter any name or abbreviation we think is fitting:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个`<section>`中，有三个`div`标签，每个标签中都有一个`img`、`h2`、`p`和一个`a`标签。所以这个HTML并不复杂。最后一个部分看起来很像第一个部分；它只有`h1`和`h2`元素以及几个段落。然而，这里有个难题：我们希望页面底部的`h1`与网站的主`h1`元素不同。解决方法是添加一个类和基于这个类的样式。所以，在替代部分的`h1`元素内，我们将添加类属性。我们将输入`class=""`，并输入任何我们认为合适的名称或缩写：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'I''ll tell you right now the hardest job in programming and computer science
    is naming things. This name should be meaningful enough so that if another person
    comes across your code and were to pick up from where you left, they won''t be
    completely lost. So, in our case, we''ll use `alt-headline`. Classes are case-sensitive,
    so I recommend you use lowercase and separate words using a dash, which is the
    common naming convention in CSS. If you use a space, it will be seen as two classes,
    and that''s really not what we want to do:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 编程和计算机科学中最困难的工作是命名事物。这个名字应该有足够的意义，这样如果另一个人遇到你的代码并且想要接着你的工作，他们不会完全迷失。所以，在我们的例子中，我们将使用`alt-headline`。类是区分大小写的，所以我建议你使用小写，并用破折号分隔单词，这是CSS中常见的命名约定。如果你使用空格，它会被视为两个类，这并不是我们想要做的事情：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So we'll save our HTML and hop over to our CSS.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将保存我们的HTML并跳到我们的CSS。
- en: 'Underneath `h1`, we will add our class name, preceded by a period as our selector.
    Type `.alt-headline` and add a font size of 40px:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`h1`下面，我们将添加我们的类名，前面加上一个句点作为选择器。输入`.alt-headline`并添加一个字体大小为40px：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before we save this, we''ll make this CSS window smaller so we can see our
    site adjacent to our code. Scroll down to `h1` on your site and you will see in
    the preview on the left-hand side that it''s currently `70px`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存之前，我们将把CSS窗口缩小，这样我们就可以在代码旁边看到我们的网站。滚动到你的网站上的`h1`，你会在左侧的预览中看到它当前是`70px`：
- en: '![](img/00060.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: 'When you save the CSS, `h1` becomes `40px`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存CSS时，`h1`变成了`40px`：
- en: '![](img/00061.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.jpeg)'
- en: 'I put this new rule set below the original `h1` rule set, and you might think
    that because it comes second, it overwrites the one above it. That''s actually
    not what''s happening here. Even if I were to switch this rule set to be above
    `h1`, it would still be `40px`. This is because classes carry more weight than
    an element when used as a selector:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这个新的规则集放在原始的`h1`规则集下面，你可能会认为因为它是第二个，它会覆盖上面的那个。实际上并不是这里发生的事情。即使我把这个规则集移到`h1`上面，它仍然是`40px`。这是因为当作为选择器使用时，类比元素具有更大的权重：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Following is the output of preceding code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/00062.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: For good measure though, let's keep the `alt-headline` rule set below the original
    `h1` selector.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保险起见，让我们保留原始`h1`选择器下面的`alt-headline`规则集。
- en: Classifying multiple elements
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类多个元素
- en: 'Classes are also used for classifying multiple elements. If you want to change
    the `h2` tags in the middle section to all be similar but different to `h2` tags
    elsewhere on the page, using a class will be the perfect option. Let''s go into
    our HTML, add a class to all the `div` tags in the `secondary-section`, and call
    it `column-title`. Go to the `The Octopus`, `The Crab`, and `The Whale` headings,
    and use Sublime''s nice multiple cursor browser feature to add `class="column-title"`
    to each one of them. For example, the `The Octopus` heading should look like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 类也用于对多个元素进行分类。如果你想要改变中间部分的`h2`标签，使其与页面其他地方的`h2`标签相似但不同，使用类将是完美的选择。让我们进入我们的HTML，在`secondary-section`中的所有`div`标签中添加一个类，并称之为`column-title`。转到`The
    Octopus`，`The Crab`和`The Whale`标题，并使用Sublime的多光标浏览器功能为每个标题添加`class="column-title"`。例如，`The
    Octopus`标题应该是这样的：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we go to our CSS and add `.column-title` underneath `h2`. We''ll then
    add some properties and values. Add `font-style` as `normal`; you want to get
    rid of `italic`. Our color is blue, `#0072ae`, and we''ll make `font-weight` bold:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们去到我们的CSS，在`h2`下面添加`.column-title`。然后添加一些属性和值。添加`font-style`为`normal`；你想要去掉`italic`。我们的颜色是蓝色，`#0072ae`，我们将使`font-weight`为粗体：
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Save this, go to the browser, and you''ll see that now the `h2` tags underneath
    each image are different to the other `h2` tags that you have elsewhere on the
    site:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个，转到浏览器，你会看到现在每个图像下面的`h2`标签与你在网站其他地方看到的`h2`标签不同：
- en: '![](img/00063.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: 'The `h2` tags at the bottom and the top of the site are still red and in italic:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 底部和顶部的`h2`标签仍然是红色的，而且是斜体的：
- en: '![](img/00064.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.jpeg)'
- en: Classes can be very useful for naming and classifying groups of the same element
    that you want to look the same. Next, let's rename an element using an ID.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 类可以非常有用，用于命名和分类你想要看起来相同的相同元素组。接下来，让我们使用ID重命名一个元素。
- en: IDs
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ID
- en: 'Scroll up to the top of our site, and in our HTML, go to `h1`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到我们网站的顶部，在我们的HTML中，转到`h1`：
- en: '![](img/00065.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: 'Let''s give the first `h1` tag a special ID called `main-site-title`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给第一个`h1`标签一个特殊的ID，叫做`main-site-title`：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With an ID, you can also use whatever name you want inside the quotes as long
    as it''s meaningful. Switch over to the CSS and scroll down to just underneath
    our `alt-headline` class. This is where we''ll add `main-site-title`. The main
    difference between writing classes and IDs is we start classes with a period and
    IDs with a number sign or pound sign or a hashtag (whatever you want to call it):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有了一个ID，你也可以在引号内使用任何你想要的名称，只要它有意义。切换到CSS，滚动到我们的`alt-headline`类的下面。这就是我们将添加`main-site-title`的地方。编写类和ID的主要区别在于，我们用句点开头的类和用数字符号或井号或井号（你想叫它什么都可以）开头的ID：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In this case, we''ll then say the color is different: `deep pink`. Save this
    and refresh the site to see the effect:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以说颜色是不同的：`深粉色`。保存并刷新网站以查看效果：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Following is the output of preceding code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/00066.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: You can see that this changes just the Old Chompy `h1`, the one that has the
    ID.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这只改变了Old Chompy的`h1`，即具有ID的那个。
- en: Should we use classes or IDs?
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应该使用类还是ID？
- en: "Now, you're probably thinking, what's the difference between a class and an\
    \ ID? Well, the first point to make is an ID has more weight than a class, literally\
    \ 10 times more weight. Keeping your selectors lightweight is one of the keys\
    \ to scalable, reusable CSS. What does having more weight really mean? It means\
    \ it's more specific and an ID will overrule any class. We'll deep dive into specificity\
    \ rules and weights in [\uFEFFChapter 4](part0072.html#24L8G0-a72d261cc09f412988422c8a08f12cd5),\
    \ *Creating Buttons with Modular, Reusable CSS Classes, and CSS3*. For now, just\
    \ know that IDs will overrule classes when targeting the same element. The second\
    \ point to make is that an ID is unique, and therefore, it can only be used once\
    \ per page. Given these two points, primarily the first point, as a coding standard,\
    \ I rarely use IDs for styling because classes are almost always more than sufficient."
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: "现在，你可能会想，类和ID之间有什么区别？嗯，首先要说的是，ID的权重比类更大，确切地说是10倍。保持你的选择器轻量级是可扩展、可重用的CSS的关键之一。权重更大到底意味着什么？这意味着它更具体，ID将覆盖任何类。我们将深入研究[\uFEFF\
    第4章](part0072.html#24L8G0-a72d261cc09f412988422c8a08f12cd5)中的特异性规则和权重，*使用模块化、可重用的CSS类和CSS3创建按钮*。现在，只需知道当目标相同元素时，ID将覆盖类。第二点是，ID是唯一的，因此，它只能在页面上使用一次。鉴于这两点，主要是第一点，作为编码标准，我很少使用ID进行样式设置，因为类几乎总是足够的。"
- en: Renaming elements with a simple class is so unbelievably powerful and probably
    the most useful thing in all of CSS. While naming classes, although sometimes
    tricky, it is important to make names semantic or meaningful. For example, if
    you're naming your blog post container, it's okay to name it "blog-post-container"
    because that perfectly describes what it is. IDs, although they have their time
    and place, aren't as useful as classes. It's best to just use a class in most
    circumstances to keep your specificity low. In the next section, you'll learn
    about how we can target elements by their context using descendant selectors.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单类重命名元素是如此强大，可能是CSS中最有用的东西。虽然命名类有时可能有点棘手，但重要的是要使名称语义化或有意义。例如，如果您正在命名您的博客文章容器，将其命名为"blog-post-container"是可以的，因为这完美地描述了它是什么。ID虽然有其时机和地点，但并不像类那样有用。在大多数情况下最好只使用类来保持您的特异性低。在下一节中，您将学习如何使用后代选择器根据其上下文来定位元素。
- en: Descendant selectors
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后代选择器
- en: Renaming elements with classes, as you learned in the previous section, is an
    extremely powerful feature in CSS. However, that's not the only way to target
    a specific type of element. Descendant selectors will allow you to target elements
    on a page based on their ancestor elements. This is often necessary because you
    only want to apply a margin or a new font based on the context of the element.
    You can use a descendant selector to get that context without putting a class
    on every element every time you want to target it. I'm going to first explain
    what parent, sibling, and child elements are as well as what ancestor and descendant
    elements are. We'll need to be clear about these if we want to use descendant
    selectors. We'll follow this up by using a practical example of the descendant
    selector and finishing up by calculating the descendant selector's weight.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在上一节中学到的，使用类重命名元素是CSS中非常强大的功能。然而，这并不是定位特定类型元素的唯一方法。后代选择器允许您基于其祖先元素来定位页面上的元素。这通常是必要的，因为您只想根据元素的上下文应用边距或新字体。您可以使用后代选择器来获取上下文，而无需每次都在每个元素上放置一个类。我将首先解释父元素、兄弟元素和子元素是什么，以及祖先和后代元素是什么。如果我们想要使用后代选择器，我们需要对这些清楚明了。接下来，我们将使用后代选择器的一个实际示例，并通过计算后代选择器的权重来结束。
- en: Parent, child, and sibling elements
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 父元素、子元素和兄弟元素
- en: 'Let''s go to our HTML and take a peek at this nicely nested HTML code in the
    `secondary-section`. So basically, what we have here is a `section` tag and three
    `div` tags that are inside of that section:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去我们的HTML，看看`secondary-section`中这个嵌套良好的HTML代码。所以基本上，我们这里有一个`section`标签和三个在该部分内部的`div`标签：
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: So `<div>` is the child element of `<section>`, while `<section>` is the parent.
    In other words, `<div>` is the descendant of `<section>`, `<section>` is the ancestor
    of `<div>`. `<figure>` is also a descendant of `<section>`, and `<img>` is a descendant
    of `<section>`. Note that `<figure>`, `<h2>`, and `<p>` are on the same level
    of the HTML so they are siblings, and they are also all descendants of `<section>`.
    That's as complicated as it gets; there are no uncles, no aunts, and no third
    cousins.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`<div>`是`<section>`的子元素，而`<section>`是父元素。换句话说，`<div>`是`<section>`的后代，`<section>`是`<div>`的祖先。`<figure>`也是`<section>`的后代，`<img>`是`<section>`的后代。请注意，`<figure>`、`<h2>`和`<p>`在HTML中处于同一级别，因此它们是兄弟元素，它们也都是`<section>`的后代。这就是它的复杂程度；没有叔叔、没有阿姨，也没有远房表兄弟。
- en: Creating descendant selectors
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建后代选择器
- en: 'In the previous section, *Renaming elements – classes and IDs*, we added a
    class to all `<h2>`''s because we knew that `<h2>` tags in the `secondary-section`
    of our HTML were different than all other `<h2>` tags. So we probably will want
    to target other elements in this area to be different as well. Here''s how we
    can do that best. Instead of putting the class on the `<h2>` tag, let''s put it
    on the `section` tag and use descendant selectors from there. Let''s get rid of
    `class="column-title"` in all the `<h2>` tags. On the `section` element, let''s
    add a new class, namely `secondary-section`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，*重命名元素-类和ID*，我们给所有`<h2>`添加了一个类，因为我们知道HTML中`secondary-section`的`<h2>`标签与所有其他`<h2>`标签不同。所以我们可能也想要将这个区域中的其他元素也设置为不同。这是我们可以做到最好的方式。不要在`<h2>`标签上放置类，而是在`section`标签上放置它，并从那里使用后代选择器。让我们去掉所有`<h2>`标签中的`class="column-title"`。在`section`元素上，让我们添加一个新的类，即`secondary-section`：
- en: '[PRE31]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Save this and you will see the `<h2>` tags lose their blue bold color because
    in the CSS, we were still targeting the `.column-title` class that no longer exists:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个，您会看到`<h2>`标签失去了它们的蓝色粗体颜色，因为在CSS中，我们仍然在定位已经不存在的`.column-title`类：
- en: '![](img/00067.jpeg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'So now what I''ll do is go into the CSS, find the `.column-title` class, update
    that:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我要做的是进入CSS，找到`.column-title`类，更新它：
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This is our descendant selector. If we save and refresh, we see that it changes
    those `<h2>` tags back to the blue, bold, and non-italic `font-style` that we
    want:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的后代选择器。如果我们保存并刷新，我们会看到它将那些`<h2>`标签改回我们想要的蓝色、粗体和非斜体的`font-style`：
- en: '![](img/00068.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: 'So this `.secondary-section` selector shown in the following CSS is a descendant
    selector. It''s targeting all the `h2`''s that are inside of `secondary-section`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 所以下面CSS中显示的`.secondary-section`选择器是一个后代选择器。它定位了所有在`secondary-section`内部的`h2`：
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we take a peek back at the HTML, you will see the `h2` is indeed inside
    of `secondary-section`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回头看一下HTML，您会看到`h2`确实在`secondary-section`中：
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we can take this a step further. Go into the CSS and underneath our existing
    `.secondary-section h2` rule set, type `.secondary-section p`. This is going to
    target our paragraph inside of the `secondary-section`. So add a color of deep
    pink, save and refresh, and you''ll see that now all our paragraphs are pink:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以更进一步。进入CSS，在我们现有的`.secondary-section h2`规则集下面，键入`.secondary-section p`。这将定位我们`secondary-section`内部的段萌。添加一个深粉色的颜色，保存并刷新，您会看到现在所有的段落都是粉色的：
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here''s what that looks like:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来是这样的：
- en: '![](img/00069.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'We can also do this with our `image` tag. If you look back at the HTML, our
    `image` tag is inside of a `div` tag that''s inside of a `figure` tag:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对我们的`image`标签进行同样的操作。如果您回顾一下HTML，我们的`image`标签位于`div`标签内，而`div`标签位于`figure`标签内。
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Switching back to our CSS, we can type the selector `.secondary-section div
    figure img` and then we add a border of `10px`, solid, in this gray color:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 切换回我们的CSS，我们可以输入选择器`.secondary-section div figure img`，然后我们添加一个`10px`的实线边框，颜色为灰色：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Following is the output of preceding code:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/00070.jpeg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: 'While we can see that works and we have got a gray border round our images
    on the site, we''re being a little more specific than we need to be with our selector.
    We could just get away with typing `img` without `div` and `figure` and the borders
    would still be there:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以看到它起作用了，并且我们在网站上的图像周围有了灰色边框，但我们的选择器比我们需要的更具体。我们可以只输入`img`而不是`div`和`figure`，边框仍然会存在：
- en: '[PRE38]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'There''s another problem with using a really long selector like this. The following
    selector carries more weight and could overrule other styles that you may not
    want it to:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样一个非常长的选择器还有另一个问题。以下选择器的权重更大，可能会覆盖您不希望覆盖的其他样式：
- en: '[PRE39]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is against keeping your code lightweight. Specificity is something I really
    want to stress; don't overdo it with really long selectors. In fact, as a rule
    of thumb, try not to go more than three levels deep; there are exceptions to this
    rule, of course, but try to keep it in mind as you write your CSS. The reason
    for this is there's an exact science to calculating the weight of your CSS selector,
    which I'll get into in a later section. I want to at least introduce it now so
    that we can start getting familiar with it.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这违反了保持代码轻量级的原则。特异性是我真的想要强调的东西；不要用非常长的选择器过度使用它。事实上，作为一个经验法则，尽量不要超过三级深；当然也有例外，但在编写CSS时要记住这一点。原因是计算CSS选择器的权重是一门确切的科学，我将在后面的章节中详细介绍。我至少想现在介绍一下，这样我们就可以开始熟悉它。
- en: Calculating the weight of selectors
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算选择器的权重
- en: 'A class is worth 10 points, so `.secondary-section` is worth 10 points. A plain
    old element such as `p` or `div` is worth 1 point. Therefore, the `.secondary-section
    p` selector is 11 points. The `.secondary-section div figure img` selector is
    13 points. Let''s create another selector below the one worth 13 points and we
    have `.secondary-section img`. Then, let''s change the `border-color` to `blue`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类值为10分，所以`.secondary-section`值为10分。像`p`或`div`这样的普通元素值为1分。因此，`.secondary-section
    p`选择器值为11分。`.secondary-section div figure img`选择器值为13分。让我们在值为13分的选择器下面创建另一个选择器，我们有`.secondary-section
    img`。然后，让我们将`border-color`改为`blue`：
- en: '[PRE40]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'When we save this, our border is going to remain gray because the point value
    of our last selector is only 11; it''s getting beat out by the previous selector''s
    point value of 13\. That''s the problem with these long descendant selectors that
    are longer than they should be, they get weighted heavier:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存时，我们的边框将保持灰色，因为我们最后一个选择器的点数仅为11；它被前一个选择器的13点的点数击败了。这就是这些较长的后代选择器的问题，它们的权重更重：
- en: '![](img/00071.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: 'Following is the output of preceding code:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/00072.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: IDs have a point value of 100 points, which is why I advise against using them.
    They have so much unnecessary weight to them and drive the specificity level through
    the roof. Assigning point values kind of sounds like keeping score on a video
    game, but the difference is you want to try and keep your point value as low as
    possible on this game. If you do that, you will be able to write less complicated
    CSS.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ID的点值为100分，这就是为什么我建议不要使用它们。它们有太多不必要的权重，使特异性水平飙升。分配点值听起来有点像在视频游戏中记分，但不同之处在于您希望尽量保持在这个游戏中的点值低。如果您这样做，您将能够编写更简单的CSS。
- en: BEM
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BEM
- en: One technique for keeping specificity low is avoiding descendant selectors altogether
    using *BEM*. BEM stands for *Block Element Modifier* and is a naming convention
    for CSS. The idea is to use a specific naming convention to add a class to every
    element you are eventually going to style. This way every element has a specificity
    score of 10, thus every element has the same specificity. There's a lot more to
    it that just that, and I recommend checking it out at [http://getbem.com/](http://getbem.com/)
    to learn more about it. I tend to use the BEM methodology, but that's not to say
    descendant selectors need to be completely avoided. I think there's a time and
    place for them. My suggestion is keep your descendant selectors reasonable and
    avoid longer descendant selectors with more than 3 levels.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 保持特异性低的一种技巧是完全避免使用后代选择器，而是使用*BEM*。BEM代表*块元素修饰符*，是CSS的命名约定。其思想是使用特定的命名约定为您最终要样式化的每个元素添加一个类。这样，每个元素的特异性得分为10，因此每个元素的特异性相同。除此之外还有很多内容，我建议您在[http://getbem.com/](http://getbem.com/)上了解更多。我倾向于使用BEM方法，但这并不意味着后代选择器完全需要避免。我认为它们有时机和地方。我的建议是保持您的后代选择器合理，并避免超过3级的较长后代选择器。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the features of a good text editor, discussed
    CSS resets, explored the troubleshooting power of Chrome's DevTools, and learned
    how to rename elements with classes. In the final section of this chapter, you
    learned about descendant selectors.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了良好文本编辑器的特性，讨论了CSS重置，探索了Chrome的DevTools的故障排除功能，并学习了如何使用类重命名元素。在本章的最后一节中，您了解了后代选择器。
- en: The next chapter is about creating a multicolumn layer using floats and understanding
    the solutions to the problems that floats cause.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章是关于使用浮动创建多列层并了解浮动引起的问题的解决方案。
