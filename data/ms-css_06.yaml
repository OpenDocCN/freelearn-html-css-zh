- en: Becoming Responsive
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变得响应式
- en: "\uFEFFUp to this point, we've built almost everything with a fixed size. Our\
    \ layout had a fixed width, our images had fixed widths, and our menu had a fixed\
    \ width as well. But this is not going to deliver a favorable experience when\
    \ using phones, tablets, and a multitude of other device sizes that are out there.\
    \ Luckily, responsive web design is here to transform our static website into\
    \ a fluid, device-friendly website."
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们几乎所有的东西都是固定尺寸。我们的布局有固定宽度，我们的图片有固定宽度，我们的菜单也有固定宽度。但是当使用手机、平板电脑和其他各种设备尺寸时，这样做并不会带来良好的体验。幸运的是，响应式网页设计可以将我们的静态网站转变为流体、设备友好的网站。
- en: 'The book that started it all - *Responsive Web Design*, by *Ethan Marcotte*,
    *2011*. He outlined three main technical pillars of responsive web design:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开创一切的书籍- *响应式网页设计*，作者*Ethan Marcotte*，*2011*年。他概述了响应式网页设计的三个主要技术支柱：
- en: Fluid grids,
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流体网格，
- en: Flexible images, and
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活的图片，以及
- en: Media queries.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体查询。
- en: We'll discuss these three fundamental CSS foundations of responsive web design,
    followed by how to build accommodations for primary navigation at smaller screen
    sizes, and finally, the `viewport` meta tag.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论响应式网页设计的三个基本CSS基础，然后讨论如何在较小的屏幕尺寸下构建主导航的适配，最后是`viewport`元标签。
- en: Fluid grids
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流体网格
- en: In this section, we'll discuss the first of the three main components of responsive
    web design, the fluid grid, or a percentage-based layout. We'll look at converting
    a fixed width layout into a fluid grid, and to do this, you'll need to learn the
    formula for converting pixels into percentages.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论响应式网页设计的三个主要组成部分之一，即流体网格或基于百分比的布局。我们将看看如何将固定宽度布局转换为流体网格，为此，您需要学习将像素转换为百分比的公式。
- en: Converting pixels to percentages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将像素转换为百分比
- en: 'Right now, we have a fixed width layout, as shown in the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个固定宽度布局，如下面的屏幕截图所示：
- en: '![](img/00229.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00229.jpeg)'
- en: 'If you shrink the browser, you can see how it breaks down into smaller sizes,
    as shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您缩小浏览器，您会看到它会分解成更小的尺寸，如下面的屏幕截图所示：
- en: '![](img/00230.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00230.jpeg)'
- en: 'Creating a fluid grid is the first step in fixing this. The goal is to convert
    all our pixel-based widths, as well as left and right margins and left and right
    padding, into percentages. We''re going to ignore our main navigation for now,
    but we''ll circle back to it in a later section. We''ll start with the `div` tag,
    which is the `wrapper` class, that I have used to wrap a lot of the content. Let''s
    change the property `width` to `max-width`. This indicates that this element can
    be smaller than `960px` wide, but it can''t be any wider than that. Let''s also
    set the width to `90%`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建流体网格是解决这个问题的第一步。目标是将所有基于像素的宽度以及左右边距和左右填充转换为百分比。我们现在先忽略主导航，但稍后我们会回到它。我们将从`div`标签开始，这是我用来包装大部分内容的`wrapper`类。让我们将属性`width`更改为`max-width`。这表示该元素可以比`960px`宽，但不能超过这个宽度。让我们还将宽度设置为`90%`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, as per this code, we''re making the width 90 percent of its parent element,
    which has no width. Therefore, it will be 90 percent of the browser window. This
    will give it a 5 percent gutter on either side with widths narrower than `960px`.
    Let''s look at the site in the browser. You can refresh the browser and make it
    smaller again. The following screenshot shows that it doesn''t have a dramatic
    effect and looks pretty bad:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据这段代码，我们将宽度设置为其父元素的90%，而父元素没有宽度。因此，它将是浏览器窗口的90%。这将使其在`960px`以下的宽度上两侧有5%的间距。让我们在浏览器中查看网站。您可以刷新浏览器并再次缩小它。下面的屏幕截图显示了它没有显著的影响，看起来相当糟糕：
- en: '![](img/00231.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00231.jpeg)'
- en: We want to create these elements inside `wrapper` percentages as well. Since
    we're starting with fixed pixel widths, we to convert all pixels into percentages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想在`wrapper`内部创建这些元素的百分比。由于我们从固定像素宽度开始，我们需要将所有像素转换为百分比。
- en: Calculating percentage widths
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算百分比宽度
- en: 'According to *Responsive Web Design*, by *Ethan Marcotte*, there is a formula
    for converting pixel-based layouts to percentage-based layouts: *target / context
    = result*. The *target* is the desired width of an element. The *context* is typically
    the width of its parent element. The *result* is the percentage we can plug into
    our CSS.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*Ethan Marcotte*的*响应式网页设计*，有一个将基于像素的布局转换为基于百分比的布局的公式：*目标/上下文=结果*。*目标*是元素的期望宽度。*上下文*通常是其父元素的宽度。*结果*是我们可以插入到我们的CSS中的百分比。
- en: 'If we look at our HTML inside the `intro-content` section, we can see the `wrapper`
    class and the two `div` tags inside of it, namely `intro-content` and `go-premium`,
    as shown in the following code snippet:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看看`intro-content`部分内的HTML，我们可以看到`wrapper`类和其中的两个`div`标签，即`intro-content`和`go-premium`，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Back to our CSS, our first element is `intro-content`, which is the section
    that appears inside of the wrapper, as shown in the following code snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的CSS，我们的第一个元素是`intro-content`，它是出现在包装器内部的部分，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The target here is 600 pixels and the context is 960 pixels. So our calculation
    would be 600 divided by 960, which equals 0.625\. We''ll plug this in as our width,
    add a percentage as our unit of measure, and move the decimal point over two places
    so that it comes out to 62.5%:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的目标是600像素，上下文是960像素。因此我们的计算是600除以960，等于0.625。我们将这个值作为我们的宽度插入，并添加一个百分比作为我们的度量单位，并将小数点移动两位，使其变为62.5%：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, my comment at the end of the declaration tells me that the element
    was originally 600 pixels wide, and the parent element was originally 960 pixels
    wide.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，声明结束时的我的注释告诉我，元素最初宽度为600像素，父元素最初宽度为960像素。
- en: 'The `margin-right` property needs to be a percentage too. The formula remains
    the same—*target* divided by *context* equals *result*. Our target is 60 pixels,
    and our context is still 960 pixels—the parent element, which is the `wrapper`
    class. 60 divided by 960 comes out 0.0625\. We convert this into a percentage
    by moving the decimal point two places, and we have `6.25%`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`margin-right`属性也需要是百分比。公式仍然是一样的——*目标*除以*上下文*等于*结果*。我们的目标是60像素，我们的上下文仍然是960像素——父元素，即`wrapper`类。60除以960得到0.0625。我们将这个转换为百分比，将小数点移动两位，得到`6.25%`：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next up is our call-to-action button''s container, `go-premium`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们的呼吁行动按钮的容器，`go-premium`：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As the width is `300px`, it needs to be converted into a percentage as well.
    So let''s do the same thing, in this case, 300 divided by 960—we still have the
    same parent here. It''s 0.3125\. Move the decimal point two place, add a percentage,
    and then put that in a CSS comment to the right in case we need it later:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于宽度是`300px`，它也需要转换为百分比。所以让我们做同样的事情，在这种情况下，300除以960——我们仍然有同样的父元素。这是0.3125。将小数点移动两位，加上百分比，然后将其放在CSS注释中，以备将来使用：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now I think we''re ready to look at this in the browser. If I shrink the browser
    window a little, the layout no longer breaks immediately:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我认为我们准备好在浏览器中查看这个了。如果我稍微缩小浏览器窗口，布局不会立即破裂：
- en: '![](img/00232.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00232.jpeg)'
- en: 'But if I shrink the browser window a little more, then it ultimately starts
    to look pretty terrible:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我再稍微缩小浏览器窗口，那么最终它开始看起来非常糟糕：
- en: '![](img/00233.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00233.jpeg)'
- en: However, we did make some progress as our layout is starting to become fluid.
    The intro content and the call-to-action button are getting narrower as the browser
    window gets smaller. Eventually, they will start overlapping, but that's okay;
    at least we have a fluid foundation for this top section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们确实取得了一些进展，因为我们的布局开始变得流体。介绍内容和呼吁行动按钮随着浏览器窗口的变小而变窄。最终，它们将开始重叠，但没关系；至少我们为这个顶部部分建立了一个流体基础。
- en: 'Now let''s take a look at the three columns underneath of it; they are kind
    of breaking as the window gets smaller:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看它下面的三列；它们在窗口变小时有点破碎：
- en: '![](img/00234.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00234.jpeg)'
- en: 'So let''s take a look at the HTML for this in our `secondary-section` class.
    These three columns are inside of a `div` tag with a class of `wrapper` that was
    also originally 960 pixels wide (but is now a max-width of 960px with a width
    of 90%):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看`secondary-section`类中的HTML。这三列在一个`div`标签中，类名为`wrapper`，最初也是960像素宽（但现在是最大宽度为960px，宽度为90%）：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We''ll continue using it as our context while we convert our `.column` width
    from pixels into percentages. All the way down to the bottom of our CSS, we see
    that each column is `300px` wide:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用它作为我们的上下文，同时将我们的`.column`宽度从像素转换为百分比。一直到我们的CSS底部，我们看到每列宽度为`300px`：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s apply our formula here. We already know that 300 divided by 960 is 31.25
    percent because that''s the exact calculation we used just before this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里应用我们的公式。我们已经知道300除以960等于31.25%，因为这是我们刚刚使用的确切计算：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `margin-left` property is `30px`, so we''re actually going to copy and
    paste 31.25 percent down here, but we''ll move the decimal one place and add a
    comment stating 30 divided by 960:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`margin-left`属性是`30px`，所以我们实际上要复制并粘贴31.25%到这里，但是我们会移动小数点一位，并添加一个注释说明30除以960：'
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We do have a `margin-left` property of `0` value on the first column. We don''t
    have to change 0 to a percentage because 0, 0 pixels, and 0 percent are all the
    same exact thing—nothing:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一列上有一个`margin-left`属性的值为`0`。我们不必将0更改为百分比，因为0、0像素和0%都是完全相同的东西——什么都没有：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As a side note, I never changed any heights, top and bottom margins, or padding
    because they just didn''t really matter to us. So now if we refresh this section
    and make it smaller, we will see our three columns shrinking proportionately as
    our browser window shrinks:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，我从来没有改变过任何高度、顶部和底部边距或填充，因为这些对我们来说并不重要。所以现在，如果我们刷新这个部分并使其变小，我们会看到我们的三列会与浏览器窗口一起按比例缩小：
- en: '![](img/00235.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00235.jpeg)'
- en: So everything in our home page is fluid now, except for our nav, which I'm going
    to leave as is for now. I want to handle it totally differently, so I'll leave
    it as a fixed width.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们主页的一切都是流体的，除了我们的导航，我现在打算保持原样。我想要完全不同的处理方式，所以我会将其保持为固定宽度。
- en: Changing padding to a percentage
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将填充更改为百分比
- en: 'We never had to change our padding left or right to a percentage because we
    didn''t have any, but the process to do so is very similar. You still use the
    same formula – target divided by context equals result. But the context is a little
    different now; it''s the width of the element itself and not the width of the
    parent element, like it is for width and margin. The only caveat to that is if
    the element itself doesn''t have a width defined, you can use the width of its
    parent or determine the width itself by determining the width of the parent:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从来不必将填充左右更改为百分比，因为我们没有任何填充，但是这样做的过程非常相似。您仍然使用相同的公式——目标除以上下文等于结果。但是上下文现在有点不同；它是元素本身的宽度，而不是父元素的宽度，就像宽度和边距一样。唯一的例外是，如果元素本身没有定义宽度，您可以使用其父元素的宽度或通过确定父元素的宽度来确定元素本身的宽度：
- en: '![](img/00236.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00236.jpeg)'
- en: 'If you''re using the `box-sizing` property with the border box value, padding
    would no longer be factored into the box model width of the element. Therefore,
    you can leave it as a pixel length and just convert the width and margin into
    a percentage, so `box-sizing: border-box` could definitely be helpful.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用`box-sizing`属性和border-box值，填充将不再计入元素的框模型宽度。因此，您可以将其保留为像素长度，只需将宽度和边距转换为百分比，因此`box-sizing:
    border-box`肯定会很有帮助。'
- en: A fluid grid on the shark movies page
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鲨鱼电影页面上的流体网格
- en: Let's search for some other non-percentage-based widths/margins/paddings. So
    we're not worried about anything related to vertical distance, like `height`,
    `margin-top`, `margin-bottom`, `padding-top` or `padding-bottom`. And we're not
    worried about any value of `0`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们搜索一些其他非百分比宽度/边距/填充。所以我们不用担心任何与垂直距离相关的东西，比如`height`、`margin-top`、`margin-bottom`、`padding-top`或`padding-bottom`。我们也不用担心任何值为`0`的东西。
- en: 'We will come across `auto` for the left and right margin in the `wrapper` rule
    set:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`wrapper`规则集中遇到`auto`的左右边距：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This doesn't need to be converted into a percentage because `auto` automatically
    calculates the width based on the space available, so it's as good as a percentage.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这不需要转换成百分比，因为`auto`会根据可用空间自动计算宽度，所以它和百分比一样好。
- en: 'We are worried about this `margin` property in the following declaration block:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们担心以下声明块中的`margin`属性：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This rule set has a `margin` of `30px`; it's using the single value syntax.
    This means the top, bottom, left, and right margins are all `30px`. We only want
    to change the left and right margins. So what we can do is use the two-value syntax.
    The first value refers to the top and bottom margins, and the second value refers
    to the left and right margins.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则集有一个`margin`为`30px`；它使用了单值语法。这意味着上下左右的边距都是`30px`。我们只想改变左右边距。所以我们可以使用双值语法。第一个值是指上下边距，第二个值是指左右边距。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Remember `content-block .figure` is the element that wraps around our image,
    as shown in the following screenshot. So we''re actually trying to convert `margin-right`
    and `margin-left` into a percentage:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`content-block .figure`是围绕我们的图片的元素，如下图所示。所以我们实际上是在尝试将`margin-right`和`margin-left`转换为百分比：
- en: '![](img/00237.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00237.jpeg)'
- en: 'If we look in our `shark-movies.html`, we will see that the image is inside
    of a `wrapper`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`shark-movies.html`中查看，我们会发现图片在`wrapper`中：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So again, we know the `wrapper` is 960 pixels. So far, our context has been
    very easy to determine because our context has always been the width of the `wrapper`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们知道`wrapper`是960像素。到目前为止，我们的上下文很容易确定，因为我们的上下文一直是`wrapper`的宽度。
- en: 'The number 30 divided by 960 is 03.125, which is 3.125%, so we''ll save this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 30除以960得到03.125，即3.125%，所以我们会保存这个：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: On our site, except for nav, all the hard pixel lengths are percentages! Not
    everything has to be a percentage for responsive web design to work. We made a
    judgment call that we'd handle navigation without percentage widths. This is true
    for the fluid grid and so many other decisions for responsive web design; there
    really isn't a one-size-fits-all solution. Each component of your website needs
    to be thought out thoroughly from the desktop down to mobile, or even better yet,
    starting from the mobile up through to the desktop. So step one, creating fluid
    grids, is complete for now. This is an important step because it ensures our design
    will start to fit nicely on all our screen sizes. In the next section, we'll look
    at flexible images.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的网站上，除了导航之外，所有硬像素长度都是百分比！并不是所有东西都必须是百分比才能实现响应式网页设计。我们做出了判断，决定我们会处理导航而不使用百分比宽度。这对于流体网格和响应式网页设计的许多其他决定都是正确的；真的没有一种大小适合所有的解决方案。您网站的每个组件都需要从桌面到移动端进行彻底思考，甚至更好的是，从移动端到桌面。因此，第一步，创建流体网格，目前已经完成。这是一个重要的步骤，因为它确保我们的设计将开始在所有屏幕尺寸上很好地适应。在下一节中，我们将看一下灵活的图片。
- en: Flexible images
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灵活的图片
- en: We've created a fluid grid, which is the first foundation of a responsive web
    design. Foundation two is responsive images or flexible images. We want our images
    or at least certain images to behave the same way as our divs and sections. We
    want them to be fluid or flexible.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个流体网格，这是响应式网页设计的第一个基础。基础二是响应式图片或灵活图片。我们希望我们的图片，或者至少某些图片，能像我们的divs和sections一样行为。我们希望它们是流体的或灵活的。
- en: 'Looking at our site, what we can notice is that the three images of `The Octopus`,
    `The Crab`, and `The Whale` shrink as the column they are in gets smaller. On
    the other hand, the shark at the top kind of stays the same size no matter what
    the browser width is:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的网站来看，我们可以注意到`章鱼`、`螃蟹`和`鲸鱼`的三张图片随着它们所在的列变小。另一方面，顶部的鲨鱼无论浏览器宽度如何，大小似乎都保持不变：
- en: '![](img/00238.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00238.jpeg)'
- en: 'Our image in the navigation is not flexible. The three images in our columns
    are flexible. We''ll look at the image in the navigation and see why. But first,
    let''s go over the three things that will guarantee responsive images:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导航中的图片不是灵活的。我们列中的三张图片是灵活的。我们将看一下导航中的图片，看看原因。但首先，让我们来看看保证响应式图片的三个因素：
- en: Put the `img` tag inside of a container. The most semantic container is usually
    the `figure` tag, but it could certainly be any element.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`img`标签放在一个容器中。最语义化的容器通常是`figure`标签，但它当然可以是任何元素。
- en: Make the container fluid; give it a percentage width.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使容器变得流体；给它一个百分比宽度。
- en: Assign the `max-width` property of `100%` to all the `img` tags or at least
    to the `img` tags you want to be fluid or flexible.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给所有`img`标签或至少要成为流体或灵活的`img`标签分配`max-width`属性为`100%`。
- en: The octopus, crab, and whale images
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章鱼、螃蟹和鲸鱼的图片
- en: 'Now let''s look at one of the images in our HTML file. We can see the octopus
    image is inside of a container. The container is the `figure` element:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看我们HTML文件中的一张图片。我们可以看到章鱼图片在一个容器中。容器是`figure`元素：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `figure` element doesn''t have a width defined, but it''s a block-level
    element that takes up the entire width of its container. So we could think of
    the figure width as `100%`. It''s inside of the `column` div:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`figure`元素没有定义宽度，但它是一个占据整个容器宽度的块级元素。所以我们可以将`figure`宽度看作`100%`。它在`column` div中：'
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we look in our CSS column, we see the column width is `31.25%`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在我们的CSS列中查看，我们会看到列宽为`31.25%`：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So there we have our first step – we have our image inside of the container.
    Then we have step two – the parent is fluid. The third step is assigning a max
    width to all the images.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们完成了第一步——我们的图像在容器内。然后我们有第二步——父元素是流动的。第三步是为所有图像分配最大宽度。
- en: 'Let''s scroll up to the top of our CSS file. I actually have this selector,
    shown in the next screenshot, as part of my reset. It targets `img`, `iframe`,
    `video`, and `object`, pretty much all types of media. I have assigned this selector
    with maximum width of 100 percent:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们滚动到我们的 CSS 文件的顶部。实际上，我在重置中有这个选择器，如下一个屏幕截图所示。它针对`img`、`iframe`、`video`和`object`，几乎所有类型的媒体。我已经为这个选择器分配了最大宽度为100%：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'I make this selector part of my reset or base layer of styles that I use on
    every project. So for fun, let''s remove that property:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这个选择器作为我在每个项目中使用的重置或基本样式层的一部分。所以，玩得开心，让我们删除那个属性：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If we save it and look at our site, as we shrink the browser window, the images
    wouldn''t get smaller; they''ll stay the same size and get squashed together:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存并查看我们的网站，当我们缩小浏览器窗口时，图像不会变小；它们将保持相同的大小并挤在一起：
- en: '![](img/00239.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00239.jpeg)'
- en: 'When we add back the `max-width: 100%` declaration, these images become flexible
    again. This indicates that the maximum width of any image can only be 100 percent
    of its container. So, as the container gets smaller, the width of the image will
    also get smaller:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们重新添加`max-width: 100%`声明时，这些图像再次变得灵活。这表明任何图像的最大宽度只能是其容器的100%。因此，随着容器变小，图像的宽度也会变小：'
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/00240.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00240.jpeg)'
- en: The shark image
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鲨鱼图片
- en: 'There are two reasons why the shark image is not getting smaller. Let''s inspect
    them. We can see that the shark image does have an immediate container element
    – a `figure` tag. But that container is intentionally not fluid:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 鲨鱼图像不会变小有两个原因。让我们来检查一下。我们可以看到鲨鱼图像确实有一个直接的容器元素——一个`figure`标签。但是该容器是故意不是流动的：
- en: '![](img/00241.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00241.jpeg)'
- en: 'If you click on the container of the images container, the `nav` tag, you will
    see it expands to the full width of the browser, demonstrating how the container
    is not fluid:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击图像容器，即`nav`标签，您会看到它会扩展到浏览器的全宽，说明容器不是流动的：
- en: '![](img/00242.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00242.jpeg)'
- en: 'If we inspect the image itself, we see that it has a width assigned to it of
    `160px`, which will definitely stop it from being fluid:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查图像本身，我们会看到它被分配了`160px`的宽度，这肯定会阻止它成为流动的：
- en: '![](img/00243.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00243.jpeg)'
- en: Personally, I don't like having a width set on the image. Even if I don't want
    this image to be fluid, I don't want to have a width on it either. In this case,
    let's do a little cleanup here and change the image so the figure element has
    a width of `160px`, which is the image's container, instead of the image itself.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我不喜欢在图片上设置宽度。即使我不希望这张图片是流动的，我也不希望它有宽度。在这种情况下，让我们做一些清理工作，并更改图片，使得图像元素的宽度为`160px`，这是图像的容器，而不是图像本身。
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is more of my preference:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这更多地是我的个人偏好：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Intentionally we are leaving the shark image as a fixed width as it doesn't
    necessarily need to shrink or grow to make this design responsive. We'll handle
    the header section separately later in this chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意将鲨鱼图像保留为固定宽度，因为它不一定需要缩小或增大以使设计具有响应性。我们将在本章后面单独处理页眉部分。
- en: Shrinking images on the shark movies page
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在鲨鱼电影页面上缩小图像
- en: 'Let''s take a look at the images on the movies page. They don''t shrink when
    we resize the browser. They have fixed widths:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下电影页面上的图像。当我们调整浏览器大小时，它们不会缩小。它们有固定的宽度：
- en: '![](img/00244.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00244.jpeg)'
- en: 'I think they should shrink; they''re just a little too big in smaller browser
    sizes. The reason all three images on our movies page don''t shrink is because
    their parent element does not have a width defined. Let''s use Ethan Marcotte''s
    formula-target divided by context equals result. We know the context of the area
    filled by the image, heading 1, paragraph, and learn more button is still 960px
    wide because it''s inside of a `wrapper`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为它们应该缩小；它们在较小的浏览器尺寸下有点太大了。我们电影页面上的所有三个图像之所以不会缩小，是因为它们的父元素没有定义宽度。让我们使用 Ethan
    Marcotte 的公式-目标除以上下文等于结果。我们知道图像、标题1、段落和了解更多按钮所占区域的上下文仍然是960像素宽，因为它在`wrapper`内部：
- en: 'So what is the width of the anchor tag that surrounds the image? If we look
    at our CSS, we have `.content-block .figure`, where there is no width defined:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 那么围绕图像的锚点标签的宽度是多少？如果我们查看我们的 CSS，我们有`.content-block .figure`，那里没有定义宽度：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we look at the image that is inside of `.figure`, there is no width defined
    there as well:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`.figure`内部的图像，那里也没有定义宽度：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'So we have to use the power of Chrome DevTools in order to figure out what
    the width of the `a` element around the `img` element is. If we hover over the
    actual image itself, we see the image is 200 pixels by 200 pixels:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须利用 Chrome DevTools 的功能来确定围绕`img`元素的`a`元素的宽度是多少。如果我们悬停在图像本身上，我们会看到图像是200像素乘以200像素：
- en: '![](img/00245.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00245.jpeg)'
- en: If we actually highlight the anchor, as shown in the following screenshot, DevTools
    tell us that the width is 230 pixels. You can see that it says in that pop-up
    bubble right above the image itself. Our width is 230 - 200 pixels of the image
    plus 15 pixels border left and 15 pixels border right. This makes sense.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们实际上突出显示锚点，如下面的屏幕截图所示，DevTools 告诉我们宽度为230像素。您可以看到它在图像正上方的弹出气泡中。我们的宽度是230
    - 图像的200像素加上15像素的左边框和15像素的右边框。这是有道理的。
- en: '![](img/00246.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00246.jpeg)'
- en: "Now what we want to do is we want to use 230 as our target when we convert\
    \ the pixel value into a percentage. We are also going to have to use `box sizing:\
    \ border-box`. Remember that, as you learned in *The box model and block versus\
    \ inline elements* section in [\uFEFFChapter 1](part0021.html#K0RQ0-a72d261cc09f412988422c8a08f12cd5),\
    \ *CSS Foundations*, if you set an element to `box-sizing: border-box`, then the\
    \ `border` and `padding` get calculated into the `width` that you define:"
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: "现在我们要做的是，当我们将像素值转换为百分比时，我们要使用230作为我们的目标。我们还将不得不使用`box-sizing: border-box`。记住，正如你在[\uFEFF\
    第1章](part0021.html#K0RQ0-a72d261cc09f412988422c8a08f12cd5)中学到的*CSS基础*中的*盒模型和块与内联元素*部分中所学到的，如果你将一个元素设置为`box-sizing:\
    \ border-box`，那么`border`和`padding`会被计算到你定义的`width`中："
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '230 divided by 960 equals 0.23958333333333, so we''ll convert that into a percent
    and we get `23.98333333333%`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 230除以960等于0.23958333333333，所以我们将其转换为百分比，得到`23.98333333333%`：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now if we refresh the browser and make it smaller, we can see our images get
    smaller. It may look a little odd at the moment, but believe it or not, that's
    what we were shooting for, so that's great!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们刷新浏览器并将其缩小，我们会看到我们的图片变小了。现在可能看起来有点奇怪，但信不信由你，这正是我们想要的，所以很棒！
- en: '![](img/00247.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.jpeg)'
- en: 'Let''s head back to the CCS code now. This technique we''re using is very helpful,
    but we could potentially be repeating `box-sizing: border-box` a lot throughout
    our code. Let''s remove it altogether from our `.content-block .figure` rule set
    and add it to our reset a little differently, where it should be. Let''s add this
    to our reset section of our stylesheet:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '现在让我们回到CCS代码。我们正在使用的这种技术非常有帮助，但我们可能会在整个代码中重复使用`box-sizing: border-box`。让我们从`.content-block
    .figure`规则集中完全删除它，并以稍微不同的方式将其添加到我们的重置中，应该在哪里。让我们将这个添加到我们样式表的重置部分：'
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As part of our reset, every element will get `box-sizing: border-box`. We can
    see where we''ve added it to our HTML element and used the universal (star) selector,
    which, as you''ll remember from our section on specificity rules, applies to all
    elements. We''re applying `box-sizing: border-box` on the `html` element only,
    but everything else is going to get `box-sizing: inherit`. `html` is the parent
    of every element; therefore, you''re inheriting the `border-box` property to every
    element. Alright, we took a little detour from flexible images, but we needed
    to do this to create a positive path forward.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '作为我们的重置的一部分，每个元素都将获得`box-sizing: border-box`。我们可以看到我们已经将它添加到我们的HTML元素中，并使用了通用（星号）选择器，正如你从我们的特异性规则部分中记得的那样，它适用于所有元素。我们只在`html`元素上应用`box-sizing:
    border-box`，但其他所有东西都将获得`box-sizing: inherit`。`html`是每个元素的父元素；因此，你正在继承`border-box`属性到每个元素。好了，我们从灵活的图片中稍微偏离了一下，但我们需要这样做来创造一个积极的前进路径。'
- en: So, in summary, our images are now flexible, but our site isn't perfect at very
    small browser widths (think smaller devices like phones or tablets). In the next
    section, we'll figure out how to handle this using media queries.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，我们的图片现在是灵活的，但在非常小的浏览器宽度下（比如手机或平板电脑等更小的设备），我们的网站并不完美。在下一节中，我们将找出如何使用媒体查询来处理这个问题。
- en: Media queries
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体查询
- en: The first two foundations of responsive web design can only get you so far.
    The most important foundation is the media query. Media queries are basically
    "if" statements or conditional logic inside your CSS. For instance, *if* the width
    of the browser is less than 500 pixels, we can then apply different rule sets
    based on these conditions. Media queries are extremely powerful because at certain
    points, our website really breaks down and looks bad, and we're going to need
    to fix this with . In this section, we'll figure out what a media query is, and
    we'll use it to fix the remaining issues with the site, especially at narrower
    widths.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网页设计的前两个基础只能让你走得更远。最重要的基础是媒体查询。媒体查询基本上是你的CSS中的“if”语句或条件逻辑。例如，*如果*浏览器的宽度小于500像素，我们可以根据这些条件应用不同的规则集。媒体查询非常强大，因为在某些点上，我们的网站真的会崩溃并且看起来很糟糕，我们需要用它来修复这个问题。在本节中，我们将找出什么是媒体查询，并使用它来修复网站的剩余问题，特别是在更窄的宽度下。
- en: 'Another thing to consider is this – since we''re going to shrink our browser
    window to kind of emulate a tablet or mobile, we won''t have a lot of room to
    look at DevTools. You can click on the 3-vertical-dots icon to open up a drop
    down menu to shift DevTools over to the right:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 还要考虑的一件事是，由于我们要缩小浏览器窗口来模拟平板电脑或移动设备，我们将没有太多的空间来查看DevTools。你可以点击3个垂直点的图标，打开下拉菜单将DevTools移到右边：
- en: '![](img/00248.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: Chrome changes its UI from time to time as it updates, so the icon may look
    different for you.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome会不时地更新UI，所以图标可能对你来说看起来不一样。
- en: 'Now we can shrink our browser window to any smaller width we want and still
    have plenty of room for the developer tools:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将浏览器窗口缩小到任何更小的宽度，仍然有足够的空间来使用开发者工具：
- en: '![](img/00249.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: Quick tip
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: If you use Chrome DevTools and shrink your browser window, in the top-right
    corner it will show you the width and height of the browser's viewport. So, in
    the following image, you can see it's providing information about the width, which
    is at **691px**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Chrome DevTools并缩小浏览器窗口，在右上角它会显示浏览器视口的宽度和高度。因此，在下面的图片中，你可以看到它提供了关于宽度的信息，为**691px**。
- en: '![](img/00250.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00250.jpeg)'
- en: 'The problem with our site right now is if we reach a narrower width, the nav
    will be behind the shark, the call-to-action button will be smushed into the site
    title, and three columns are way too narrow as well:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们网站目前的问题是，如果达到更窄的宽度，导航栏将会在鲨鱼后面，呼吁行动按钮将被挤压到网站标题中，三列也太窄了：
- en: '![](img/00249.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: So we'll skip the nav and circle back to it at the end of this section. The
    main site title and call-to-action button are floated. At 1,023 pixels, let's
    "defloat" these two sections and stack them on top of each other using a media
    query.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将跳过导航栏，最后再回来处理。主要的网站标题和呼吁行动按钮是浮动的。在1023像素时，让我们使用媒体查询“取消浮动”这两个部分，并将它们堆叠在一起。
- en: Anatomy of a media query
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体查询的解剖
- en: 'I''m going to put all the media queries at the bottom of the style sheet. You
    don''t have to do this, but that''s what I''ll do. Media queries always start
    with `@media`. Then, they have two parts. The first part is the *media type*.
    For example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把所有媒体查询放在样式表的底部。您不必这样做，但我会这样做。媒体查询始终以`@media`开头。然后，它们有两个部分。第一部分是*媒体类型*。例如：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You could plug in `print` , `screen`, `all` and a few other options as well.
    `print` would only be applied to print style sheets, whereas, `screen` would only
    be applied to computer screens (but not print outs). `all` would apply to both.
    If we left out the `media type` altogether - which is perfectly acceptable - it
    defaults to `all`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以插入`print`，`screen`，`all`和其他一些选项。`print`仅适用于打印样式表，而`screen`仅适用于计算机屏幕（但不适用于打印输出）。`all`将适用于两者。如果我们完全省略`媒体类型`
    - 这是完全可以接受的 - 它将默认为`all`。
- en: 'The second part of a media query is called the *media feature* and determines
    when to use the media query. We need to separate this from the `@media screen`
    with the word "and". For instance:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询的第二部分称为*媒体特征*，并确定何时使用媒体查询。我们需要将其与“@media screen”分开，使用“and”一词。例如：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Again, this is conditional logic similar to an if-statement in JavaScript. If
    both the *media type* and the *media feature* evaluate to true then what's inside
    the media query will be applied (Yes, we'll be putting stuff inside the media
    query's curly braces shortly).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这是类似于JavaScript中的if语句的条件逻辑。如果*媒体类型*和*媒体特征*都评估为true，那么媒体查询内部的内容将被应用（是的，我们很快将在媒体查询的大括号内放置内容）。
- en: '`(max-width: 1023px)` means that if the browser window is 1,023px or lower
    then this media query will apply (or evaluate to true). Once the screen width
    is more than 1,023px, then the media query will no longer apply (or evaluate to
    false). You can also use `min-width`; it has the reverse effect, applying to everything
    1,023px and greater:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`(max-width: 1023px)`表示如果浏览器窗口为1,023px或更低，则此媒体查询将应用（或评估为true）。一旦屏幕宽度超过1,023px，那么媒体查询将不再应用（或评估为false）。您还可以使用`min-width`；它具有相反的效果，适用于所有大于1,023px的内容：'
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In fact, you can use any length value as well as many other values. Commonly
    though, `max-width` and `min-width` work just fine with what we''re trying to
    do and we''ll stick with `max-width` for now. Notice the curly braces at the end.
    It''s almost like we just built a CSS rule set:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您也可以使用任何长度值以及许多其他值。通常，`max-width`和`min-width`与我们要做的事情非常契合，我们现在将坚持使用`max-width`。注意末尾的大括号。这几乎就像我们刚刚构建了一个CSS规则集：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Inside the curly braces of the media query, we can start writing plain old
    CSS that will only be applied if the browser window is both (1) a screen and (2)
    1,023px or less. Let''s add `float: none` and `width: auto` to both the `intro-content`
    and `go-premium`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '在媒体查询的大括号内，我们可以开始编写纯粹的CSS，只有在浏览器窗口同时（1）是屏幕和（2）1,023px或更少时才会应用。让我们将`float: none`和`width:
    auto`都添加到`intro-content`和`go-premium`：'
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `auto` value is the default for the `width` property, so it effectually
    makes these block elements span the full width available, which will be 100 percent
    of the `wrapper`. The `auto` keyword means it will automatically calculate the
    value. `auto` has different values based on the property it's paired with. In
    this case, it basically the same as `100%`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: “auto”值是“width”属性的默认值，因此它实际上使这些块元素跨越整个可用宽度，这将是“wrapper”的100％。“auto”关键字意味着它将自动计算值。“auto”根据其配对的属性具有不同的值。在这种情况下，它基本上与“100％”相同。
- en: 'Now we can see our intro content is no longer floated, the width is the full
    width, and the `go-premium` button is the same:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们的介绍内容不再浮动，宽度是全宽，而`go-premium`按钮也是一样的：
- en: '![](img/00251.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00251.jpeg)'
- en: 'However, we have a big space between the `go-premium` button and the `intro-content`
    that we need to get rid of:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`go-premium`按钮和`intro-content`之间有一个很大的空间，我们需要摆脱它：
- en: '![](img/00252.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00252.jpeg)'
- en: 'To fix this, we''re going to add:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将添加：
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'On the `go-premium` button itself, we''ll remove the top margin:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在`go-premium`按钮本身上，我们将删除顶部边距：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We''ve got our title, our subtitle, our text, and our button, and everything''s
    looking good:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了我们的标题，副标题，文本和按钮，一切看起来都很好：
- en: '![](img/00253.jpeg)              ![](img/00254.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00253.jpeg) ![](img/00254.jpeg)'
- en: Considering iPads and other tablet dimensions
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑iPad和其他平板电脑尺寸
- en: We chose 1,023 as the break point because that is just one pixel under the width
    of an iPad held in landscape orientation.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择1,023作为断点，因为这只是低于横向放置的iPad的宽度的一个像素。
- en: '![](img/00255.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00255.jpeg)'
- en: This way, our media query will apply to all the widths and devices lesser than
    1,024p. As of 2017, I would *guess* that the iPad is - if not the most popular
    tablet - one of the most popular. I can say with more certainty that the iPad
    is definitely not the only popular tablet. In fact, it is amazing just how many
    different tablet devices and widths there are out there, so you may not want to
    necessarily use 1,024 and 768, respectively, as the basis for your media queries.
    Figure out where your layout generally starts to break or look funny and determine
    the logical placement of your media queries from there. Then, test your site on
    an iPad and any other device or emulator you can find in order to make sure your
    site looks good. We'll just use 1,023 as our baseline since, in our case, the
    layout still looks good at 1,024.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的媒体查询将适用于所有小于1,024p的宽度和设备。截至2017年，我会*猜测* iPad是 - 如果不是最受欢迎的平板电脑 - 其中一个最受欢迎的平板电脑。我可以更肯定地说iPad绝对不是唯一受欢迎的平板电脑。事实上，令人惊讶的是，有多少不同的平板设备和宽度，因此您可能不希望分别使用1,024和768作为媒体查询的基础。找出您的布局通常从何处开始中断或看起来有趣，并确定媒体查询的逻辑放置位置。然后，在iPad和任何其他设备或模拟器上测试您的网站，以确保您的网站看起来不错。在我们的情况下，我们将使用1,023作为基线，因为在1,024时，布局仍然看起来不错。
- en: Adding our three columns to the media query
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的三列添加到媒体查询
- en: 'So now, we just need to add all of the CSS to our media query in order to get
    the rest of the site looking good, starting with the three column area. As you
    can see in the following screenshot, these are just too tight:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要将所有的CSS添加到我们的媒体查询中，以使网站的其余部分看起来不错，从三列区域开始。正如您在下面的截图中所看到的，这些区域太紧凑了：
- en: '![](img/00256.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00256.jpeg)'
- en: 'It''s kind of standard practice to create a tube of content for smaller devices,
    getting rid of any multicolumn, floated layout. So we''ll remove the float again
    from `.column` and make the width the full width of the parent by specifying the
    keyword of `auto`. Let''s go to the bottom of our CSS and update the media query:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为较小的设备创建内容管道是一种标准做法，摆脱任何多列浮动布局。因此，我们将再次从`.column`中删除浮动，并通过指定`auto`关键字使宽度成为父元素的全宽。让我们转到CSS的底部并更新媒体查询：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now when we go to our site, each of these three columns will have a full width
    and will not be floated:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们转到我们的网站时，这三列中的每一列都将占满整个宽度，不会浮动：
- en: '![](img/00257.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00257.jpeg)'
- en: 'The problem is that we should probably center this text and the image itself.
    So first we''ll target `.column figure` first inside the media query to center
    the image:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，我们可能应该将这段文字和图像本身居中。因此，首先我们将在媒体查询中首先针对`.column figure`进行定位以居中图像：
- en: '[PRE38]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'By using the `auto` keyword for the left and right margin and setting not only
    `width: 100%` but also `max-width: 25px` we are able to center the images:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '通过使用`auto`关键字设置左右边距，并且不仅设置`width: 100%`而且还设置`max-width: 25px`，我们能够使图像居中：'
- en: '![](img/00258.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00258.jpeg)'
- en: 'Adding width: `100%` ensures that if the `wrapper` container is ever less than
    250px (the max-size of the image) then the image width will be `100%` of its container;
    sort of a safety net for really narrow widths.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '添加`width: 100%`确保如果`wrapper`容器小于250px（图像的最大尺寸），则图像宽度将是其容器的`100%`；在非常窄的宽度下起到一种安全保障作用。'
- en: 'Next, let''s center the heading, simply using `text-align: center`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，让我们简单地使用`text-align: center`来居中标题：'
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Looking good:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错：
- en: '![](img/00259.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: There's another approach that we could take with our responsive design – the
    mobile-first approach.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的响应式设计还可以采用另一种方法-移动优先方法。
- en: The mobile-first approach
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动优先方法
- en: 'Typically, this is the best practice. We want to be thinking about smaller
    displays at the same time or before the desktop experience, as the name suggests.
    This way, the content and design take into account mobile devices and all their
    constraints at the very beginning, so they can be fully realized in the design
    and build process. Mobile first relates to much more than how we code our CSS.
    But here''s the general idea behind the code part of mobile first: Put all of
    your CSS targeting the smallest devices outside of any media query. Then use media
    queries to target larger and larger devices.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这是最佳实践。我们希望在同一时间或在桌面体验之前考虑较小的显示屏，正如名称所示。这样，内容和设计可以在设计和构建过程中充分考虑移动设备及其所有约束，因此可以完全实现。Mobile
    first不仅涉及我们如何编写CSS。但这是移动优先的代码部分的一般思路：将所有针对最小设备的CSS放在任何媒体查询之外。然后使用媒体查询来针对越来越大的设备。
- en: '![](img/00260.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00260.jpeg)'
- en: This means using `min-width` media queries to add additional CSS for larger
    displays. For instance, our layout wouldn't have any floats by default; instead,
    it would be a single tunnel of content, which is usually standard for mobile.
    Then our media queries, using `min-width` instead of `max-width`, would add the
    floats that would be applied at wider screen widths to create a multicolumn layout.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着使用`min-width`媒体查询为较大的显示屏添加额外的CSS。例如，我们的布局默认情况下不会有任何浮动；相反，它将是一个单一的内容隧道，这通常是移动设备的标准。然后我们的媒体查询，使用`min-width`而不是`max-width`，将添加浮动，这些浮动将应用于更宽的屏幕宽度以创建多列布局。
- en: 'For more information on the mobile-first approach, check out Luke Wroblewski''s
    defining book on the subject-*Mobile First*-available on the [abookapart.com](https://abookapart.com/)
    website:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有关移动优先方法的更多信息，请查看Luke Wroblewski关于该主题的定义书籍-*Mobile First*-可在[abookapart.com](https://abookapart.com/)网站上找到：
- en: '![](img/00261.jpeg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00261.jpeg)'
- en: Solving the navigation problem
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决导航问题
- en: Let's talk about this navigation now. Solving navigation isn't as easy as solving
    what we just tackled using media queries. At certain widths, our shark just gets
    in the way of the nav, and at some point, we are going to have to do something
    with the dropdown as well. Also, if we were to add a few more nav items, then
    we'd have this problem at even wider widths.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈这个导航。解决导航问题并不像使用媒体查询解决我们刚刚解决的问题那么容易。在某些宽度下，我们的鲨鱼会挡住导航，而且在某个时候，我们还需要对下拉菜单做些处理。此外，如果我们要添加更多的导航项，那么在更宽的宽度下，我们将遇到这个问题。
- en: '![](img/00262.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00262.jpeg)'
- en: 'We hit our first real challenge of what to do with the navigation. There are
    certain responsive design patterns that have emerged. Let''s talk about a site
    that''s curated by Brad Frost – [bradfrost.github.io/this-is-responsive](http://bradfrost.github.io/this-is-responsive/):'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到了解决导航的第一个真正挑战。出现了一些特定的响应式设计模式。让我们谈谈Brad Frost策划的网站-[bradfrost.github.io/this-is-responsive](http://bradfrost.github.io/this-is-responsive/)：
- en: '![](img/00263.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00263.jpeg)'
- en: 'It''s basically a collection of patterns to use for responsive web design.
    It has a bunch of different ways of handling navigation that you can explore.
    Let''s look at the first one under *Patterns*, called Toggle. At a wider width,
    the menu kind of looks like ours; it''s just some nav items up at the top:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是一组用于响应式网页设计的模式。它有很多不同的处理导航的方式供您探索。让我们看看*模式*下的第一个，称为切换。在较宽的宽度下，菜单看起来有点像我们的；顶部只是一些导航项：
- en: '![](img/00264.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00264.jpeg)'
- en: 'At a narrower browser width, the nav items are replaced with a menu link:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在较窄的浏览器宽度下，导航项被替换为菜单链接：
- en: '![](img/00265.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00265.jpeg)'
- en: 'When you click on the link, it expands and hides the menu:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击链接时，它会展开并隐藏菜单：
- en: '![](img/00266.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.jpeg)'
- en: This is generally what we want to do with our site; this will require a little
    heavier use of media queries and some JavaScript or jQuery to show and hide the
    navigational click. Up for the challenge? Good, let's get it done!
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是我们想要在我们的网站上做的事情；这将需要更多地使用媒体查询和一些JavaScript或jQuery来显示和隐藏导航点击。准备好挑战了吗？好的，让我们做到！
- en: We've used media queries to change our CSS based on the width of the screen.
    This is tremendously useful as it fixed most of our issues at narrower widths.
    We still need to remedy the navigation at smaller widths. In the next section,
    we are going to use media queries to drastically change our navigation so that
    it's hidden, except for a Menu icon that can be clicked to show the navigation
    with jQuery.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用媒体查询根据屏幕宽度更改了我们的CSS。这非常有用，因为它修复了我们在较窄宽度下的大部分问题。我们仍然需要在较小宽度下修复导航。在下一节中，我们将使用媒体查询大幅改变我们的导航，使其隐藏，除了一个可以点击以显示带有jQuery的导航的菜单图标。
- en: Mobile menu
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动菜单
- en: So far in this chapter, you've learned about Ethan Marcotte's three fundamentals
    of responsive web design – fluid grids, flexible images that squish, and media
    queries. That's kind of the easy part in a way. The hard part is figuring out
    the multitude of tricky design challenges; for example, what to do with our menu
    on a mobile, especially as we decide to add more menus. Luckily, this is the one
    area where a decent design pattern has emerged. We are going to forgo the horizontal
    menu that shows each button on the nav in lieu of a hidden menu that is activated
    by a click or touch. Upon being clicked or touched, the hidden menu will slide
    down vertically and show all the menu choices. We'll achieve this by styling the
    mobile nav in its open state. Then, we'll hide the nav and add in the menu icon
    that triggers the mobile menu to open and close it. Finally, we'll link our HTML
    to the jQuery CDN and our scripts file and write a bit of basic jQuery needed
    to accomplish this.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，您已经了解了Ethan Marcotte关于响应式网页设计的三个基本原则-流体网格，可伸缩的图像和媒体查询。在某种程度上，这在某种程度上是容易的部分。困难的部分是弄清楚多种棘手的设计挑战；例如，在移动设备上该怎么处理我们的菜单，特别是当我们决定添加更多菜单时。幸运的是，这是一个体面的设计模式已经出现的领域。我们将放弃水平菜单，而是显示导航栏上的每个按钮的隐藏菜单，而是通过点击或触摸来激活的隐藏菜单。被点击或触摸后，隐藏菜单将垂直滑下并显示所有菜单选项。我们将通过为移动导航设置样式来实现这一点。然后，我们将隐藏导航并添加触发移动菜单打开和关闭的菜单图标。最后，我们将将我们的HTML链接到jQuery
    CDN和我们的脚本文件，并编写一些基本的jQuery来实现这一点。
- en: Styling the mobile nav in its open state
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在打开状态下为移动导航设置样式
- en: 'At the very bottom of the style sheet, I''m going to add in a new media query
    targeting `900px` or less:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式表的最底部，我将添加一个针对`900px`或更小的新媒体查询：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Notice I also add a comment at the closing curly brace of the first media query.
    This is useful so we don''t lose track of where our first media query ends. The
    new mobile nav will only be triggered at a new break point, `900px` wide. That''s
    when it starts to look funky and starts breaking. Firstly, I don''t want the nav
    to be fixed to the top anymore, so let''s get rid of fixed positioning and replace
    it with the default static position:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我还在第一个媒体查询的结束大括号处添加了一个注释。这很有用，这样我们就不会迷失我们的第一个媒体查询的结束位置。新的移动导航只会在新的断点`900px`宽度时触发。那时它开始看起来很奇怪并且开始破损。首先，我不想导航固定在顶部，所以让我们摆脱固定定位并将其替换为默认的静态位置：
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Static, as you'll recall from an earlier section, is the default value for the
    `position` property so it basically turns off `fixed` positioning and returns
    it as an element that behaves based on the *normal flow*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 静态，你可能还记得之前的部分，是`position`属性的默认值，因此它基本上关闭了`fixed`定位，并将其返回为根据*正常流*行为的元素。
- en: 'Next, let''s tell all the immediate list items of `primary-nav` to float to
    the right instead of left. We''ll also give it a full width because these floated
    elements are only going to take up the width needed, similar to inline elements,
    so we are going to tell them to take up the entire width available by setting
    the width to `100%`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们告诉`primary-nav`的所有直接列表项向右浮动，而不是向左。我们还将给它一个完整的宽度，因为这些浮动元素只会占用所需的宽度，类似于内联元素，因此我们将告诉它们通过将宽度设置为`100％`来占用整个可用宽度：
- en: '[PRE42]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Again I also add a comment to signal the closing curly brace of this media query
    so to not lose track of it.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在这个媒体查询的结束大括号处添加了一个注释，以便不会迷失。
- en: 'Now let''s focus on the anchors. Let''s align the text to the right, standardize
    the padding, remove the border on the left and add a border at the bottom, and
    give it a little smaller font size of 13px, and width of 100%:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们专注于锚点。让我们将文本对齐到右侧，标准化填充，移除左侧的边框并在底部添加边框，并将字体大小调整为13px，并将宽度设置为100％：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Okay, so this is what the nav looks like before we apply this CSS:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是在应用此CSS之前导航的样子：
- en: '![](img/00267.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00267.jpeg)'
- en: 'This is what it looks like when we refresh. Now it''s starting to look like
    mobile navigation:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这是刷新后的样子。现在它开始看起来像移动导航了：
- en: '![](img/00268.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpeg)'
- en: 'The problem is that the width of 100% didn''t really work. Well, actually it
    did; the anchors are 100 percent of their container, but it''s their container
    also needs to be 100%. So let''s assign the `primary-nav` with a width of 100
    percent:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于100％的宽度实际上并没有起作用。嗯，实际上它起作用了；锚点是其容器的100％，但它们的容器也需要是100％。因此，让我们将`primary-nav`的宽度设置为100％：
- en: '[PRE44]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can cross that off our to-do list:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在待办清单上划掉这一项：
- en: '![](img/00269.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00269.jpeg)'
- en: This resembles a menu for sure. The big elephant in the room is that the shark
    is just taking up too much space in the middle. Let's fix that.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实像是一个菜单。房间里的大象是鲨鱼只是占用了太多的空间。让我们来修复一下。
- en: 'Let''s add a new selector to the bottom of the media query targeting the shark.
    We''ll make it much smaller, move it up, and hug it close to the left using the
    offset properties in the top and left positions since this is already an absolutely
    positioned element:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在针对鲨鱼的媒体查询的底部添加一个新的选择器。我们将使它变得更小，向上移动，并使用顶部和左侧位置的偏移属性将其紧贴到左侧，因为这已经是一个绝对定位的元素：
- en: '[PRE45]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'That looks good:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错：
- en: '![](img/00270.jpeg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpeg)'
- en: 'The next thing to fix is the dropdown menu. This won''t do:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要修复的是下拉菜单。这样不行：
- en: '![](img/00271.jpeg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00271.jpeg)'
- en: 'We have a design decision to make right now. Should we hide the dropdown menu
    and not let any mobile users have access to it? We could. But that''s not fair
    to mobile users. We can obviously keep it as shown above, but I think we''ll serve
    mobile users better by assimilating it into the `primary-nav`. I want to make
    it look like the other major menus. So we''re going to target the `.has-submenu
    ul` selector. We''ll add this rule set to the bottom of the media query. We''ll
    change the `position` property from `absolute` to `static`, change the `display`
    property to `block`, remove the `border` and `border-radius` properties, and make
    the `width` stretch all the way across:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要做一个设计决定。我们应该隐藏下拉菜单，不让任何移动用户访问它吗？我们可以。但这对移动用户不公平。我们显然可以保持它如上所示，但我认为把它融入到`primary-nav`中会更好地为移动用户服务。我想让它看起来像其他主要菜单。所以我们要针对`.has-submenu
    ul`选择器。我们将在媒体查询的底部添加这个规则集。我们将把`position`属性从`absolute`改为`static`，把`display`属性改为`block`，移除`border`和`border-radius`属性，并让`width`横跨整个宽度：
- en: '[PRE46]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now we have this:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有这个：
- en: '![](img/00272.jpeg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00272.jpeg)'
- en: 'Wow! That looks pretty good. Let''s also kill the animation as it''s no longer
    needed. We''ll add a new selector inside the media query and set `-webkit-animation`
    and `animation` to `none`; this keyword will kill the animation:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！看起来很不错。我们也可以取消动画，因为它不再需要。我们将在媒体查询内部添加一个新的选择器，并将`-webkit-animation`和`animation`设置为`none`；这个关键字将取消动画：
- en: '[PRE47]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We no longer get the animation. The hover-state of the "Movies" menu covers
    the shark in an odd way, but that will get fixed shortly when we add the hamburger
    menu icon:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再有动画效果。"电影"菜单的悬停状态以一种奇怪的方式覆盖了鲨鱼，但很快在我们添加汉堡菜单图标时就会得到修复：
- en: '![](img/00273.jpeg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00273.jpeg)'
- en: Mobile navigation in its open state is now complete; now we need to hide it
    and add the hamburger icon that will trigger it to open and close.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 移动导航在打开状态下已经完成；现在我们需要隐藏它，并添加汉堡图标来触发它的打开和关闭。
- en: Adding the hamburger menu icon
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加汉堡菜单图标
- en: 'Let''s add a `div` tag right on top of the `primary-nav` in both the `index.html`
    file and the `shark-movies.html` file. We''ll give it a class of `mobile-menu-icon`;
    that''s going to be important:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`index.html`文件和`shark-movies.html`文件中的`primary-nav`正上方添加一个`div`标签。我们给它一个类名`mobile-menu-icon`；这很重要：
- en: '[PRE48]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Nothing shows up in the browser when we apply this because this is simply an
    empty `div` tag. Let''s use a background image to add the icon. We''re not going
    to put this in a media query; we''re actually going to move all the way up to
    where the nav originally sits in the CSS and add this rule set:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们应用这个时，浏览器中什么都没有显示出来，因为这只是一个空的`div`标签。让我们使用背景图片添加图标。我们不会把这个放在媒体查询中；实际上，我们会移动到CSS中原始的nav所在的位置，并添加这个规则集：
- en: '[PRE49]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We already have this image sitting in our images folder. We''re using zero
    and zero as our background position and no-repeat to make sure that this image
    doesn''t automatically repeat itself. Still nothing will show up in the browser
    unless we add a width and height. We know the image is `30px` wide and `26px`
    tall, so we''ll use those exact dimensions:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的图片文件夹中有这张图片。我们使用零和零作为我们的背景位置和no-repeat，以确保这张图片不会自动重复。除非我们添加宽度和高度，否则在浏览器中什么都不会显示。我们知道这张图片宽30像素，高26像素，所以我们将使用这些确切的尺寸：
- en: '[PRE50]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now when we save and refresh, we can see the three bar icon sitting at the
    top of the browser window:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们保存并刷新时，我们可以看到三条杠图标位于浏览器窗口的顶部：
- en: '![](img/00274.jpeg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00274.jpeg)'
- en: 'We also want to move it to the right and give it some space from the edges
    using some margin top, right, and bottom. We can also change the cursor, so this
    way it has a different look to it. Let''s add these properties to `mobile-menu-icon`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想把它移到右边，并给它一些距离，使用一些上、右和下的margin。我们还可以改变光标，这样它看起来就有了不同的外观。让我们把这些属性添加到`mobile-menu-icon`中：
- en: '[PRE51]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Before we refresh the browser, we can see that we have just a regular cursor
    hovering over the icon:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在刷新浏览器之前，我们可以看到我们只是在图标上方普通的光标悬停：
- en: '![](img/00275.jpeg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00275.jpeg)'
- en: 'After we refresh, it moves over to the right and now it has a pointer type
    of a cursor indicating that it''s clickable:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新后，它移到右边，现在有一个指针类型的光标，表示它是可点击的：
- en: '![](img/00276.jpeg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00276.jpeg)'
- en: Obviously, we won't see this on mobile devices but desktop devices or desktop
    browsers; that's kind of a little nice thing to have.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们在移动设备上看不到这个，但在桌面设备或桌面浏览器上，这是一个小小的好东西。
- en: Hiding the menu
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏菜单
- en: 'Now let''s hide the menu by default. Instead of using `display: none`, which,
    as I mentioned earlier, is not great for accessibility reasons, let''s explore
    another technique that hides the content more creatively so screen readers can
    still find and announce it. We''ll go back down inside of our media query, inside
    `.primary-nav`. We''re going to say the height of this element is zero:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '现在让我们默认隐藏菜单。我们不再使用`display: none`，因为如我之前提到的，这对无障碍原因来说并不好。让我们探索另一种更有创意地隐藏内容的技术，以便屏幕阅读器仍然可以找到并宣布它。我们将回到媒体查询内部，`.primary-nav`内部。我们将说这个元素的高度是零：'
- en: '[PRE52]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Following is the output of preceding code:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/00277.jpeg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00277.jpeg)'
- en: There you go. Now what we want to do is activate that menu on a click.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在我们要做的是在点击时激活菜单。
- en: Using jQuery to trigger the menu on a click
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery在点击时触发菜单
- en: 'For this stage, we have to link to jQuery and our own JavaScript file. We''ll
    do this at the bottom of the HTML, just above our closing `</body>` and `</html>`
    tags. Copy a link to the jQuery CDN that''s hosted on Google''s site. Below this,
    add a link to our own JS file. We''re going to put this file in the `js` folder
    and we''re going to name that file `scripts.js`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们需要链接到jQuery和我们自己的JavaScript文件。我们将在HTML的底部，在闭合的`</body>`和`</html>`标签之前做这个。复制一个链接到托管在谷歌网站上的jQuery
    CDN。在此之下，添加一个链接到我们自己的JS文件。我们将把这个文件放在`js`文件夹中，并将文件命名为`scripts.js`：
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Also, let's copy this to the same place in the `shark-movies.html`. Let's create
    that new JavaScript file as well.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，让我们将这个复制到`shark-movies.html`的相同位置。我们也要创建一个新的JavaScript文件。
- en: In Sublime Text an easy way to create a new file, is to use *Cmd* + *N* (on
    Mac) or *Ctrl* + *N* (on Windows). *Cmd* + *S* (on Mac) or *Ctrl* + *S* (on Windows)
    will let you save name and save the file.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sublime Text中创建新文件的简单方法是使用*Cmd* + *N*（在Mac上）或*Ctrl* + *N*（在Windows上）。*Cmd*
    + *S*（在Mac上）或*Ctrl* + *S*（在Windows上）将让您保存名称并保存文件。
- en: '![](img/00278.jpeg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00278.jpeg)'
- en: 'We''ll save it in the `js` folder:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其保存在`js`文件夹中：
- en: '![](img/00279.jpeg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00279.jpeg)'
- en: We'll name the file `scripts.js`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将文件命名为`scripts.js`。
- en: 'Okay, great, now let''s write some jQuery. Don''t worry if everything here
    doesn''t make too much sense to you. I''m not going to go into much detail as
    this topic is beyond the scope of this book, but it''s needed for our responsive
    design. What we''re going to paste here to our new `scripts.js` file is a function
    that fires when the DOM is ready:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们写一些jQuery。如果这里的一切对你来说都不太有意义，不要担心。我不会详细讨论这个话题，因为这超出了本书的范围，但这对我们的响应式设计是必需的。我们要粘贴到我们的新`scripts.js`文件中的是一个在DOM准备就绪时触发的函数：
- en: '[PRE54]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We want to put the code we write, inside this function. This simply tells the
    script to wait for the web page to be ready before the code inside it gets executed.
    It''s kind of just standard fair for jQuery. So, let''s paste it in our function
    as such:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想把我们写的代码放在这个函数里。这只是告诉脚本在网页准备就绪之前等待，然后再执行其中的代码。这对于jQuery来说是标准的。因此，让我们将其粘贴到我们的函数中：
- en: '[PRE55]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'First, what we have here is a jQuery function that''s targeting the `mobile-menu-icon`
    class specifically when you click on that element:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在这里有一个jQuery函数，它专门针对`mobile-menu-icon`类，当你点击该元素时：
- en: '[PRE56]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Once that element is clicked, two lines of code are executed. We''re going
    to hone in first on the `primary-nav` and toggle a class called `active`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击了该元素，就会执行两行代码。我们首先要关注的是`primary-nav`，并切换一个名为`active`的类：
- en: '[PRE57]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'So, if you click on the hamburger menu, it''s going to add a class of `active`
    to `primary-nav`. If you click on it a second time, it''s going to remove it and
    kind of keep doing that for us, which is nice. The next line is targeting `$(this)`.
    Here, `$(this)` refers to whatever we''re clicking on. In this case we''re clicking
    on `mobile-menu-icon` and toggling a class called `open` on it. Looking at the
    mobile menu icon and the `primary-nav` in DevTools:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您点击汉堡菜单，它将向`primary-nav`添加一个`active`类。如果您再次点击它，它将删除它，并为我们保持这样做，这很好。下一行是针对`$(this)`。在这里，`$(this)`指的是我们点击的任何东西。在这种情况下，我们点击的是`mobile-menu-icon`，并在其上切换一个名为`open`的类。查看DevTools中的移动菜单图标和`primary-nav`：
- en: '![](img/00280.jpeg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00280.jpeg)'
- en: 'The code line in DevTools is highlighted in the following screenshot:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: DevTools中的代码行在以下截图中突出显示：
- en: '![](img/00281.jpeg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00281.jpeg)'
- en: 'Both of these should get the classes added. When we click on the hamburger
    menu icon, we see the `mobile-menu-icon` gets the `open` class and the `primary-nav`
    gets the `active` class:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都应该添加类。当我们点击汉堡菜单图标时，我们会看到`mobile-menu-icon`获得`open`类，`primary-nav`获得`active`类：
- en: '![](img/00282.jpeg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00282.jpeg)'
- en: 'When we click on it again, they both disappear. So now we can go ahead and
    target those classes how we need to. Let''s go back to our CSS. We want to target
    the `mobile-menu-icon` in it''s open state. So we add that selector to the nav
    section of the CSS:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次点击它时，它们两者都消失了。所以现在我们可以继续以我们需要的方式定位这些类。让我们回到我们的CSS。我们想要定位`mobile-menu-icon`在打开状态下。因此，我们将该选择器添加到CSS的nav部分中：
- en: '[PRE58]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'All we''re going to do is just change the background image:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的就是改变背景图片：
- en: '[PRE59]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now when we click on the hamburger icon, we get the x icon, and when we click
    on it again, we get the menu icon. So that''s good:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们点击汉堡图标时，我们得到x图标，当我们再次点击它时，我们得到菜单图标。所以很好：
- en: '![](img/00283.jpeg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00283.jpeg)'
- en: 'Now we want to target the `primary-nav.active` selector, so let''s add that
    to our CSS, and give it some height:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要定位`primary-nav.active`选择器，因此让我们将其添加到我们的CSS中，并给它一些高度：
- en: '[PRE60]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now when we click on the icon, we get our menu:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们点击图标时，我们得到我们的菜单：
- en: '![](img/00284.jpeg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00284.jpeg)'
- en: 'When we click on it again, it disappears:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次点击它时，它消失了：
- en: '![](img/00285.jpeg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00285.jpeg)'
- en: 'At the moment, the image appears and disappears immediately, so we want to
    add a transition to that. Let''s go to `.primary-nav` and add a transition:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，图像出现并立即消失，所以我们想为其添加一个过渡效果。让我们去`.primary-nav`并添加一个过渡效果：
- en: '[PRE61]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We now should have a silky smooth transition, where the hidden navigation slides
    down and up as we click on the menu icon.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该有一个丝般顺滑的过渡效果，当我们点击菜单图标时，隐藏的导航会向下滑动和向上滑动。
- en: Our mobile navigation is done, with quite a bit of CSS and a touch of JavaScript,
    and our site is widely responsive now. There's just one thing we have to do –
    we need to test our site on a mobile device. We'll notice that the result is very
    different than when we resize our browser to the width of a phone or tablet. Luckily,
    the solution is very simple – the `viewport` meta tag.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的移动导航已经完成，有相当多的CSS和一点JavaScript，并且我们的网站现在具有广泛的响应性。我们只需要做一件事 - 我们需要在移动设备上测试我们的网站。我们会注意到，结果与我们将浏览器调整为手机或平板电脑宽度时非常不同。幸运的是，解决方案非常简单
    - `viewport` meta标签。
- en: Viewport meta tag
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视口meta标签
- en: We are just about done with our responsive site. We have everything in place,
    except that we haven't actually tested it on a mobile device yet. In this section,
    let's test our design using Chrome's mobile device simulator and then look at
    and try to understand the `viewport` meta tag.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的响应式网站几乎完成了。除了我们还没有在移动设备上测试过它。在本节中，让我们使用Chrome的移动设备模拟器来测试我们的设计，然后看看并尝试理解`viewport`
    meta标签。
- en: Testing our responsive design on a mobile device
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在移动设备上测试我们的响应式设计
- en: 'One way to test on a mobile would be this – make your site live and test on
    an actual phone or tablet. An easier way to do a simple test on a phone (but possibly
    slightly less accurate) is to use Chrome''s Device Simulator. Within DevTools
    there is a devices icon:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在手机上测试的一种方法是这样的-让您的网站上线并在实际手机或平板上测试。一个更简单的方法是在手机上进行简单测试（但可能略微不太准确）是使用Chrome的设备模拟器。在DevTools中有一个设备图标：
- en: '![](img/00286.jpeg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00286.jpeg)'
- en: 'Once you click on that, you''ll be able to choose a phone. We can see our site,
    but it doesn''t look similar to when we just minimized our browser window to be
    about the size of a phone:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击了那个，你就可以选择一个手机。我们可以看到我们的网站，但它看起来并不像我们刚刚将浏览器窗口最小化到手机大小时那样：
- en: '![](img/00287.jpeg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00287.jpeg)'
- en: 'What''s happening is that most mobile devices are going to try and shrink your
    website to fit on the phone, and then if your site isn''t responsive, it will
    look like the desktop version, only much smaller. So one noticeable thing is I''m
    not seeing mobile navigation. There is a very simple solution – the `viewport`
    meta element. I''m going to copy and paste this into both the `index` and `shark-movies`
    pages:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的情况是，大多数移动设备会尝试缩小您的网站以适应手机屏幕，然后如果您的网站不具有响应性，它将看起来像桌面版本，只是小得多。所以一个显而易见的问题是我没有看到移动导航。有一个非常简单的解决方案-`viewport`元素。我将把它复制粘贴到`index`和`shark-movies`页面中：
- en: '[PRE62]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'It''s just a `meta` element with a name of `viewport`; we''ll come back to
    this in a second. Now, look what happens when we refresh the browser:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个带有`viewport`名称的`meta`元素；我们稍后会回到这个问题。现在，让我们看看当我们刷新浏览器时会发生什么：
- en: '![](img/00288.jpeg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00288.jpeg)'
- en: We are actually getting the mobile version, so this looks a lot better and it
    fixed the problem we were having.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上我们得到了移动版本，所以这看起来好多了，解决了我们遇到的问题。
- en: The anatomy of the viewport meta tag
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: viewport元标签的解剖
- en: 'Let''s examine this meta tag:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个元标签：
- en: '[PRE63]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Here, I''ve provided the name attribute with a value of `viewport`. Then, I
    have a `content` attribute with a couple of different things provided inside of
    it. The first thing is `width=device-width`. This basically means "please don''t
    scale my page down on mobile devices because I''m handling that with media queries.
    Thanks!" The second thing is `initial-scale=1.0`, which basically says this –
    size it to exactly the width of the device and nothing more. Lastly, we have the
    `minimum-scale=1.0`. This helps when you rotate your phone so the website stays
    exactly the width of the device after the width of the device is changed from
    *portrait* mode to *landscape* mode and vice versa. There''s more to the `viewport`
    meta tag. We could add `user-scalable=no`:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我提供了一个带有值`viewport`的名称属性。然后，我有一个`content`属性，里面提供了一些不同的东西。第一件事是`width=device-width`。这基本上意味着“请不要在移动设备上缩小我的页面，因为我正在使用媒体查询来处理这个问题。谢谢！”第二件事是`initial-scale=1.0`，基本上是说这个-将其大小调整到设备的宽度，而不多。最后，我们有`minimum-scale=1.0`。这在您旋转手机时会有所帮助，因此网站在设备的宽度从*纵向*模式更改为*横向*模式以及反之后仍然保持在设备的宽度。`viewport`元标签还有更多内容。我们可以添加`user-scalable=no`：
- en: The `user-scalable=no` term doesn't allow the user to zoom in or out on their
    phone. Sites that have this can be very annoying, which is why we're not going
    to include it on our site.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`user-scalable=no`这个术语不允许用户在手机上放大或缩小。拥有这个属性的网站可能会非常恼人，这就是为什么我们不会在我们的网站上包含它的原因。'
- en: In conclusion, I recommend adding the `viewport` meta tag to your site's boiler
    plate to use it on every site. Also, there is no substitute for actual device
    testing as an actual phone and an emulator is never quite the same.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我建议将`viewport`元标签添加到您的网站的模板中，以便在每个网站上使用。实际设备测试没有替代品，因为实际手机和模拟器永远不会完全相同。
- en: Summary
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the core concepts of responsive web design that
    will allow you to make your sites look good on any device. You learned that fluid
    grids and flexible images are the first steps to get a site to fit all screen
    sizes. We now understand how media queries can make sure the site looks good at
    narrower widths. We also created a mobile menu, using jQuery to trigger the menu
    on a click. Finally, we tested our design on Chrome's mobile device simulator
    and learned how to use the `viewport` meta tag to ensure our site is responsive
    on mobile devices. I strongly urge you, when employing these techniques yourselves,
    to consider the mobile experience from the very beginning, especially in the design
    process. In the next chapter, we will discuss web fonts.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们涵盖了响应式网页设计的核心概念，这将使您的网站在任何设备上都能看起来很好。您学到了流体网格和灵活图片是使网站适应所有屏幕尺寸的第一步。我们现在了解了媒体查询如何确保网站在较窄的宽度下看起来很好。我们还使用jQuery创建了一个移动菜单，以便在点击时触发菜单。最后，我们在Chrome的移动设备模拟器上测试了我们的设计，并学会了如何使用`viewport`元标签来确保我们的网站在移动设备上具有响应性。我强烈建议您在自己使用这些技术时，从设计过程的一开始就考虑移动体验。在下一章中，我们将讨论网络字体。
