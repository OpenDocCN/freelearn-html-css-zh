- en: Wrapping Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Welcome to the last chapter of this book. As we're at the end of this journey,
    I wanted to walk you through some steps in your web development learning progression
    as well as go through some links and resources for more information on everything
    you've learned up to this point.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的最后一章。由于我们已经完成了这段旅程，我想带您走过您在Web开发学习过程中的一些步骤，并浏览一些链接和资源，以获取有关到目前为止学到的所有内容的更多信息。
- en: The next steps
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: The next logical progression when learning CSS is moving to a CSS preprocessor,
    like Sass or Less. CSS preprocessors allow you to write CSS using programming
    features like nesting, imports, variables, and mixins that get compiled down to
    regular CSS. Another logical step in front end development is learning JavaScript.
    First though, let's talk about the CSS preprocessor, Sass.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 学习CSS的下一个逻辑步骤是转向CSS预处理器，如Sass或Less。CSS预处理器允许您使用编程功能编写CSS，如嵌套、导入、变量和混合，这些功能会被编译成常规CSS。前端开发的另一个逻辑步骤是学习JavaScript。不过，首先让我们谈谈CSS预处理器Sass。
- en: CSS preprocessors
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS预处理器
- en: I've used both *Less* and *Sass*, but I've been using Sass for a while now.
    When I started to create the course materials for this book I had almost forgotten
    what it was like to write CSS without Sass. Needless to say, writing CSS is much
    easier using Sass. It keeps your code much more organized and clean, and I highly
    recommend it. Let's go over some of the notable features of Sass.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我既使用了*Less*又使用了*Sass*，但我现在已经使用Sass一段时间了。当我开始为这本书创建课程材料时，我几乎忘记了没有Sass的情况下编写CSS是什么感觉。毋庸置疑，使用Sass编写CSS要容易得多。它使您的代码更有组织性和清晰，并且我强烈推荐它。让我们来看看Sass的一些显着特点。
- en: Variables
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 'One simple yet powerful feature of Sass is variables. Let''s set up variables
    called `$blue`, and `$red` which respectively equal the colors I''ve been using
    throughout the site for basically anything you saw that was blue or red:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Sass的一个简单而强大的功能是变量。让我们设置名为`$blue`和`$red`的变量，分别等于我在整个站点中使用的蓝色或红色的颜色：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now when I need to put enter the hard-to-remember hex value of `#0072AE`, I
    can just type in `$blue` and Sass magically takes care of it. An equally good
    use of variables is they with fonts, and that''s where I think it really gets
    powerful. With fonts, you can usually type in a `font-family` and then create
    a stack of fonts. But, this can get lengthy and repetitive. So plugging all of
    this information into a variable, a very simple one such as `$maven` or `$droid`,
    makes it really easy to use fonts quickly and at any time you need to:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我需要输入难以记住的十六进制值`#0072AE`时，我只需输入`$blue`，Sass就会神奇地处理它。变量的另一个很好的用途是它们与字体一起使用，这就是我认为它真正强大的地方。对于字体，通常可以输入`font-family`，然后创建一组字体。但是，这可能会变得冗长和重复。因此，将所有这些信息插入变量中，例如`$maven`或`$droid`这样的非常简单的变量，使得快速使用字体变得非常容易，随时都可以使用：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then I can use those variables anywhere I set a `font-family`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以在设置`font-family`的任何地方使用这些变量：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will be compiled into this whole string:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被编译为整个字符串：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Mixins
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合
- en: 'There''s an even better feature in Sass called **mixins**. Basically, they
    are a method for abstracting out repetition. For instance, it''s a drag to type
    in vendor prefixes for CSS3, but I can declare a mixin using the `@mixin` keyword
    and then create a template chock-full of vendor prefixes. Here, I have declared
    a mixin named `transition`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Sass中还有一个更好的功能，称为**混合**。基本上，它们是一种抽象重复的方法。例如，为CSS3输入供应商前缀很麻烦，但我可以使用`@mixin`关键字声明一个混合，然后创建一个充满供应商前缀的模板。在这里，我声明了一个名为`transition`的混合：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The mixin has parenthesis with arguments inside of it, `$property`, `$duration`,
    and `$timing-function`. Each argument has a default assigned to it, `all`, `.25s`,
    and `ease`. Then I have the -webkit- prefixed transition property and the un-prefixed
    verison. Both have the arguments of the mixin as their values.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 混合带有括号，括号内有参数`$property`，`$duration`和`$timing-function`。每个参数都有默认值，`all`，`.25s`和`ease`。然后我有-webkit-前缀的过渡属性和未前缀的版本。两者都将混合的参数作为它们的值。
- en: 'This allows me to go into my CSS and, if I want to use a transition, just add
    the `@include transition`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我可以进入我的CSS，并且，如果我想使用过渡，只需添加`@include transition`：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This compiles down to:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译为：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Another thing I can do is update the default values of this mixin anytime I
    call it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我还可以在任何时候调用此混合时更新其默认值：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will compile down to:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译为：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: SASS nesting
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SASS嵌套
- en: 'Beyond variables and mixins, there''s nesting, which on the surface may not
    seem too powerful but is extremely convenient. Instead of writing descendant selectors,
    you can nest selectors inside of each other. You can see in the following CSS
    code that I''ve actually nested the `focus` and `hover` selectors inside of `.button`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了变量和混合，还有嵌套，表面上看起来可能不太强大，但非常方便。您可以将选择器嵌套在彼此内部，而不是编写后代选择器。您可以在以下CSS代码中看到，我实际上将`focus`和`hover`选择器嵌套在`.button`内部：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This compiles down in to the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译为以下内容：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As a rule of thumb, don't nest if you don't have to because the selector gets
    more specific and weighs more each time you nest. The trick to modular CSS is
    keeping your selectors lightweight. For more information on nesting and using
    the special ampersand character in Sass check out my article I wrote for CSS-Tricks.com
    entitled, *The Sass Ampersand* ([https://css-tricks.com/the-sass-ampersand/](https://css-tricks.com/the-sass-ampersand/)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个经验法则，如果不必要，不要嵌套，因为选择器每次嵌套都会变得更具体和更重要。模块化CSS的技巧是保持选择器的轻量级。有关Sass中嵌套和使用特殊的&字符的更多信息，请查看我为CSS-Tricks.com撰写的文章*The
    Sass Ampersand*（[https://css-tricks.com/the-sass-ampersand/](https://css-tricks.com/the-sass-ampersand/)）。
- en: Creating and importing partial files with SASS
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SASS创建和导入部分文件
- en: 'In the *Font kits and font services* section in [Chapter 7](part0158.html#4MLOS0-a72d261cc09f412988422c8a08f12cd5),
    *Web Fonts,* we also discussed that Sass allows you to create partial files for
    different parts of your CSS and import them into your main Sass file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0158.html#4MLOS0-a72d261cc09f412988422c8a08f12cd5)的*Web Fonts*部分的*Font
    kits and font services*中，我们还讨论了Sass允许您为CSS的不同部分创建部分文件，并将它们导入到您的主Sass文件中：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sass will compile all partial Sass files into one main CSS file. So I have my
    CSS broken down into smaller chunks. They all compile down into `style.css`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Sass将所有部分Sass文件编译成一个主CSS文件。所以我的CSS被分解成更小的块。它们都编译成`style.css`。
- en: The best part about having these multiple organized files is that they compile
    down into one file, so that means just one HTTP request instead of multiple requests.
    That's a performance gain right there. Not to mention it keeps my CSS very organized.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些多个组织良好的文件的最大好处是它们会编译成一个文件，这意味着只有一个HTTP请求，而不是多个请求。这就是性能的提升。更不用说它使我的CSS非常有条理。
- en: So these are just a few of the very nice features of a preprocessor, specifically
    Sass. Using Sass or Less is definitely the most logical step at this point. The
    Sass style sheet you write will need to go through a compiler though that turns
    it into regular old CSS; otherwise, the browsers won't understand the Sass code.
    For compiling, you have a few options. You can install Ruby and Sass and use your
    command line to watch for any changes made to the Sass files. You could also check
    out software like CodeKit to do the same. Or you can use a task runner like Gulp,
    as we talked about at the end of the last section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是预处理器（特别是Sass）的一些非常好的特性。在这一点上，使用Sass或Less绝对是最合乎逻辑的步骤。您编写的Sass样式表需要通过编译器处理，将其转换为普通的CSS；否则，浏览器将无法理解Sass代码。对于编译，您有几个选项。您可以安装Ruby和Sass，并使用命令行来监视对Sass文件所做的任何更改。您还可以查看类似CodeKit的软件来执行相同的操作。或者您可以使用像Gulp这样的任务运行器，就像我们在上一节末讨论的那样。
- en: 'To learn more about SASS, I recommend *Brock Nunn''s Rapid SASS* video course
    in the Packt library:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于SASS的信息，我建议在Packt图书馆中观看*Brock Nunn的Rapid SASS*视频课程：
- en: '![](img/00485.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00485.jpeg)'
- en: 'Also, check out *SASS for Web Designers* by *Dan Cederholm*. This book does
    a really great job at explaining Sass in simple terms, and it''s a quick read:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还要查看*Dan Cederholm*的*SASS for Web Designers*。这本书非常好地以简单的方式解释了Sass，并且阅读起来很快：
- en: '![](img/00486.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00486.jpeg)'
- en: JavaScript and jQuery
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript和jQuery
- en: Another logical step for front end developers is to learn JavaScript if you
    haven't done so already. With CSS, we can add interactivity through the `hover`
    and `focus` states, but we can't have the on-click or swipe feature or anything
    like that. Enter JavaScript and jQuery. I recommend that you learn the basics
    of JavaScript; however, if you want to get a springboard in it, you can start
    out by learning jQuery.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前端开发人员的另一个合乎逻辑的步骤是学习JavaScript，如果您还没有学习的话。通过CSS，我们可以通过`hover`和`focus`状态添加交互性，但我们无法进行单击或滑动等操作。这就是JavaScript和jQuery的用武之地。我建议您学习JavaScript的基础知识；但是，如果您想快速入门，可以先学习jQuery。
- en: 'So let''s say we want to do something like display a modal when we click on
    the Learn more >> link:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设我们想要做的事情是在单击“了解更多>>”链接时显示一个模态框：
- en: '![](img/00487.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00487.jpeg)'
- en: 'We could have a modal that shows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以有一个显示模态框：
- en: '![](img/00488.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00488.jpeg)'
- en: 'So we have an animation that will fade in and out. Therefore, it is relatively
    easier to set up animations with jQuery than JavaScript. The idea is to create
    a modal in HTML and CSS as if it has been there always. I created the modal and
    put that HTML at the very bottom of the HTML file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们有一个会淡入淡出的动画。因此，使用jQuery设置动画相对比使用JavaScript更容易。这个想法是在HTML和CSS中创建一个模态框，就好像它一直存在一样。我创建了模态框，并将HTML放在HTML文件的最底部：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then I have a Sass partial file called `modal.scss`, which styles the modal
    and positions it where it''s supposed to be:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我有一个名为`modal.scss`的Sass部分文件，它样式化了模态框并将其定位到它应该在的位置：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `.modal` class is also set to `display: none`, so by default, it''s not
    present. It''s like our drop-down menu; by default, it''s hidden.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`.modal`类也设置为`display: none`，因此默认情况下它是不存在的。就像我们的下拉菜单一样；默认情况下，它是隐藏的。'
- en: 'Here we have some jQuery to open the modal:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些jQuery来打开模态框：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This basically watches for a click on the link with a class of `learn-more`,
    then fade in the element with the class of `modal-learn-more`. If we go back to
    the HTML, we''ll see that we have the `modal-learn-more` class on the outermost
    parent `div` of the modal:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这会监视具有`learn-more`类的链接的单击，然后淡入具有`modal-learn-more`类的元素。如果我们回到HTML，我们会看到我们在模态框的最外层父`div`上有`modal-learn-more`类：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is readable and a very small amount of jQuery. The same thing goes if
    we want to tell the modal that we want to close it when we click on the close
    link:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可读性很强的一小部分jQuery。如果我们想要告诉模态框我们要在单击关闭链接时关闭它，也是同样的操作。
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We''re basically saying when you click on the close modal, we''re going to
    have `modal-learn-more` fade out. jQuery handles the animation of fading in and
    fading out through predefined methods that they have created. Selecting the `div`
    that we want to fade out and selecting the item or the element that we want to
    click on is very easy in jQuery. To learn more about jQuery, I recommend checking
    out the jQuery books in the Packt library, particularly *jQuery for Designers:
    Beginner''s Guide*.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '基本上我们是在说当你单击关闭模态框时，我们将使`modal-learn-more`淡出。jQuery通过它们创建的预定义方法来处理淡入和淡出的动画。在jQuery中非常容易选择我们要淡出的`div`和我们要单击的项目或元素。要了解更多关于jQuery的信息，我建议查看Packt图书馆中的jQuery书籍，特别是*jQuery
    for Designers: Beginner''s Guide*。'
- en: Sass and jQuery are the next logical steps going forward. Sass takes CSS authoring
    to the next level, and jQuery will give you the ability to add functionality and
    deeper interaction to your website. Not to mention that it will round you out
    as a front end developer. In the next section, I'm going to wrap up by recapping
    everything we've discussed and point out a few good resources you can use to get
    more information.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Sass和jQuery是接下来的逻辑步骤。Sass将CSS编写提升到了一个新的水平，而jQuery将为您的网站添加功能和更深入的交互能力。更不用说它将使您成为一个全面的前端开发人员。在下一节中，我将通过总结我们讨论过的所有内容，并指出一些可以获取更多信息的好资源来结束。
- en: Conclusion and links
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论和链接
- en: Thank you for reading *Mastering CSS*. I truly enjoyed putting this book together.
    We covered a lot of ground, so I'm going to do a recap of the things we've learned
    and point you in the direction of where you can get more information on the topics.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读《精通CSS》。我真的很享受整理这本书。我们涵盖了很多内容，所以我将对我们学到的东西进行总结，并指引你获取更多关于这些主题的信息的方向。
- en: The box model and block versus inline elements
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒模型和块级与内联元素
- en: 'We started this book by reviewing the basics, such as the box model, and the
    difference between block and inline elements. A great place to learn more about
    these two important, fundamental topics is on Sitepoint''s A to Z CSS screencasts.
    For block vs inline elements: [https://www.sitepoint.com/atoz-css-screencast-display/](https://www.sitepoint.com/atoz-css-screencast-display/)
    and for the box model [https://www.sitepoint.com/atoz-css-screencast-box-model/](https://www.sitepoint.com/atoz-css-screencast-box-model/).
    Here you can view some really helpful box models and display videos.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从回顾基础知识开始这本书，比如盒模型，以及块级和内联元素之间的区别。学习更多关于这两个重要的基础知识的好地方是Sitepoint的A到Z CSS视频。关于块级与内联元素：[https://www.sitepoint.com/atoz-css-screencast-display/](https://www.sitepoint.com/atoz-css-screencast-display/)，关于盒模型：[https://www.sitepoint.com/atoz-css-screencast-box-model/](https://www.sitepoint.com/atoz-css-screencast-box-model/)。在这里，你可以观看一些非常有帮助的盒模型和显示视频。
- en: Floats
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮动
- en: 'We also talked a lot about floats and how to use them to create a multicolumn
    layout, as we did on our home page:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了很多关于浮动以及如何使用它们来创建多列布局，就像我们在主页上做的那样：
- en: '![](img/00489.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00489.jpeg)'
- en: We talked about the problems created by floats, such as collapse, and other
    content flowing around the float. We also discussed different ways, such as using
    the `clear-fix`, to avoid these problems. To learn more about floats, I'm going
    to point you right back to Sitepoint's A to Z CSS, and the short six-minute video
    ([https://www.sitepoint.com/atoz-css-screencast-float-and-clear/](https://www.sitepoint.com/atoz-css-screencast-float-and-clear/))
    that covers the basics of floats and how to get used to their quirks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了浮动带来的问题，比如塌陷，以及其他内容围绕浮动流动。我们还讨论了不同的方法，比如使用`clear-fix`，来避免这些问题。要了解更多关于浮动的知识，我将直接指向Sitepoint的A到Z
    CSS，以及短短六分钟的视频（[https://www.sitepoint.com/atoz-css-screencast-float-and-clear/](https://www.sitepoint.com/atoz-css-screencast-float-and-clear/)），它涵盖了浮动的基础知识以及如何适应它们的怪癖。
- en: Modular CSS
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化CSS
- en: Next you learned how to create modular CSS. We didn't want to style one piece
    of our site and then redo all those styles again if we felt like styling another
    similar piece of our site. We wanted to be able to reuse the CSS we had already
    created by employing modular techniques. I emphasized this when we built our buttons
    using modular classes. To learn more about modular CSS, you can get smacked over
    at **SMACSS** (**Scalable and modular architecture for CSS**); refer to the [smacss.com](http://smacss.com)
    website.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你学会了如何创建模块化的CSS。我们不想为网站的一个部分设置样式，然后如果我们想为网站的另一个类似的部分设置样式，就重新设置所有这些样式。我们希望能够通过采用模块化技术来重用我们已经创建的CSS。当我们使用模块化类构建我们的按钮时，我强调了这一点。要了解更多关于模块化CSS的知识，你可以在**SMACSS**（**可扩展和模块化的CSS架构**）上找到更多信息；请参阅[smacss.com](http://smacss.com)网站。
- en: CSS3
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3
- en: We ended up using a lot of CSS3 at this point for our buttons. We used a lot
    of hover effects throughout the site. On the movies page, we added a hover effect
    to one of the movie images. If you want to learn more about CSS3, there's a great
    book in the Packt library called *Designing Next Generation Web Projects with
    CSS3* by *Sandro Paganotti*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们最终使用了大量的CSS3来制作我们的按钮。我们在整个网站上使用了很多悬停效果。在电影页面上，我们为其中一部电影的图片添加了一个悬停效果。如果你想了解更多关于CSS3的知识，Packt图书馆中有一本很棒的书，名为《使用CSS3设计下一代Web项目》（Designing
    Next Generation Web Projects with CSS3），作者是Sandro Paganotti。
- en: Also, you might want to check out *CSS3 for Web Designers*, *second edition*
    by *Dan Cederholm*, available through [abookapart.com](http://abookapart.com).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可能想看看丹·塞德霍姆（Dan Cederholm）的《网页设计的CSS3》，第二版，可以通过[abookapart.com](http://abookapart.com)获取。
- en: Creating the navigation
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建导航
- en: 'We went on to build one heck of navigation that was in a fixed position to
    the top with our content scrolled underneath it. It had a nice drop-down menu
    that animated downward nicely using CSS animations:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续构建了一个固定在顶部的导航，内容在其下滚动。它有一个漂亮的下拉菜单，使用CSS动画向下精美地展开：
- en: '![](img/00490.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00490.jpeg)'
- en: 'We also had our shark animate upon browser refresh; we made it look like it
    was swimming, and that was a lot of fun. I''m proud of an article I wrote on CSS
    animations: [http://www.richfinelli.com/css-animations-arent-that-tough/](http://www.richfinelli.com/css-animations-arent-that-tough/).
    In this article, I get into all the animation properties in detail and slowly
    progress to creating a rather complex animation:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还让我们的鲨鱼在浏览器刷新时动起来；我们让它看起来像在游泳，这非常有趣。我为我在CSS动画上写的一篇文章感到自豪：[http://www.richfinelli.com/css-animations-arent-that-tough/](http://www.richfinelli.com/css-animations-arent-that-tough/)。在这篇文章中，我详细介绍了所有的动画属性，并逐渐进展到创建一个相当复杂的动画：
- en: '![](img/00491.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00491.jpeg)'
- en: 'I find myself constantly referring to the **Mozilla Developer Network** (**MDN**)
    website for a quick reference on animation properties. I think MDN is a very reliable
    and deep resource for all things web:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现自己经常参考**Mozilla开发者网络**（**MDN**）网站，快速查阅动画属性。我认为MDN是一个非常可靠和深入的网络资源。
- en: '![](img/00492.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00492.jpeg)'
- en: Making the site responsive
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使网站响应式
- en: 'We did a great job in making our site responsive, especially when we completely
    transformed our menu into a small screen to accommodate mobile devices:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在使我们的网站响应式方面做得很好，特别是当我们完全将我们的菜单转换成小屏幕以适应移动设备时：
- en: '![](img/00493.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00493.jpeg)'
- en: In my opinion, the best place to learn more about responsive web design is from
    the man who invented it himself-Ethan Marcotte. Check out the ground breaking
    book that started it all – *Responsive Web Design.* The second edition of the
    book was released at the end of 2014.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，学习更多关于响应式网页设计的最佳地方就是从发明它的人那里学习-Ethan Marcotte。看看那本开创性的书- *Responsive Web
    Design.* 该书的第二版于2014年底发布。
- en: Web fonts
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络字体
- en: In [Chapter 7](part0158.html#4MLOS0-a72d261cc09f412988422c8a08f12cd5), *Web
    Fonts*, we talked about web fonts and icon fonts. We learned how a good font can
    really make a site look great. Back to the [abookapart.com](https://abookapart.com/)
    website, there is a very good book you can use to learn how to set and pair type
    phases. It's called *On Web Typography* by *Jason Santa Maria*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0158.html#4MLOS0-a72d261cc09f412988422c8a08f12cd5)中，*Web Fonts*，我们谈到了网络字体和图标字体。我们了解到一个好的字体确实可以让网站看起来很棒。回到[abookapart.com](https://abookapart.com/)网站，有一本非常好的书，你可以用来学习如何设置和配对字体。它叫做*On
    Web Typography*，作者是*Jason Santa Maria*。
- en: HiDPI devices
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HiDPI设备
- en: Finally, in [Chapter 8](part0176.html#57R300-a72d261cc09f412988422c8a08f12cd5),
    *Workflow for HiDPI Devices*, we got our site "retina ready" by learning what
    we needed to do with images in order to make them look crisp on double density
    displays such as the iPad Retina. We looked at a number of approaches to account
    for Retina. One of the things I'm most excited about in web development is SVG.
    It really solves some of the glaring problems of Retina. Chris Coyier of CSS tricks
    ([https://css-tricks.com](https://css-tricks.com/)) has written a few great articles
    that sum up SVG and how to use it, including the one titled – Using SVG.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在[第8章](part0176.html#57R300-a72d261cc09f412988422c8a08f12cd5)中，*Workflow
    for HiDPI Devices*，我们通过学习如何处理图像，使它们在iPad Retina等双倍密度显示屏上看起来清晰，使我们的网站“retina ready”。我们研究了许多应对Retina的方法。在网页开发中，我最激动的事情之一就是SVG。它真的解决了一些Retina的明显问题。CSS技巧的Chris
    Coyier（[https://css-tricks.com](https://css-tricks.com/)）写了一些关于SVG以及如何使用它的很棒的文章，包括一篇标题为-
    Using SVG的文章。
- en: Also for more information on the `srcset` attribute I wrote two articles on
    that topic. One on the W descriptor and `sizes` attribute ([http://www.richfinelli.com/srcset-part-2/](http://www.richfinelli.com/srcset-part-2/))
    and another on the X descriptor ([http://www.richfinelli.com/srcset-part-1/](http://www.richfinelli.com/srcset-part-1/)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，关于`srcset`属性的更多信息，我写了两篇文章。一篇是关于W描述符和`sizes`属性的（[http://www.richfinelli.com/srcset-part-2/](http://www.richfinelli.com/srcset-part-2/)），另一篇是关于X描述符的（[http://www.richfinelli.com/srcset-part-1/](http://www.richfinelli.com/srcset-part-1/)）。
- en: Flexbox
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flexbox
- en: Flexbox is so much fun! We converted our 3 column float-based layout to a flexbox-based
    layout and built a new section, our product listing, using flexbox. For more information
    on flexbox I recommend checking out Wes Bos' video course, *What the Flexbox!
    at* flexbox.io or for a quick and comprehensive reference to all flexbox properties
    check out *CSS Tricks' A Complete Guide to Flexbox* at [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox太有趣了！我们将基于浮动的3列布局转换为基于flexbox的布局，并使用flexbox构建了一个新的部分，我们的产品列表。关于flexbox的更多信息，我建议查看Wes
    Bos的视频课程，*What the Flexbox! at* flexbox.io，或者快速全面地参考所有flexbox属性，请查看*CSS技巧的A Complete
    Guide to Flexbox*，网址为[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)。
- en: 'Final tidbit of advice: Audio Podcasts are terrific'
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的建议：音频播客非常棒
- en: If you're like me and have a strong desire to learn and a long drive to work,
    audio podcasts can be a great resource. Two of my favorite podcasts on front end
    development are Shoptalk ([http://shoptalkshow.com/](http://shoptalkshow.com/))
    and Syntax ([https://syntax.fm/](https://syntax.fm/)). Both are very fun and informative.
    Listening to podcasts on my way to work is my way of staying up to date in what's
    happening in web development and what's new out there to learn.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和我一样，渴望学习并且要长时间开车上班，音频播客可以是一个很好的资源。我最喜欢的前端开发播客是Shoptalk ([http://shoptalkshow.com/](http://shoptalkshow.com/))和Syntax
    ([https://syntax.fm/](https://syntax.fm/))。两者都非常有趣和富有信息。在上班的路上听播客是我保持了解网页开发动态和学习新知识的方式。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In the end, I think we created one heck of a little site here, learning a lot
    about CSS and web development. So once again thanks for reading. I really did
    have a lot of fun putting it together. I wish you much success and hope that you
    continue to hone your CSS skills.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我认为我们在这里创建了一个非常棒的小网站，学到了很多关于CSS和网页开发的知识。再次感谢阅读。我真的很享受把它放在一起的过程。祝你们成功，并希望你们继续磨练你们的CSS技能。
