- en: Digging Deeper with SVG Authoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入挖掘SVG创作
- en: So far, in this book, you've been exposed to most of the basic SVG features
    and elements. With just the tools you've experienced so far, you could start to
    do some real tasks with SVG. That said, SVG has a lot more to offer. This chapter
    will start to look at more advanced SVG tools. Some of these techniques will play
    an important role in doing dynamic SVG animations and visualizations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，你已经接触到了大部分基本的SVG功能和元素。只用到目前为止你所体验过的工具，你就可以开始使用SVG做一些真正的任务了。也就是说，SVG还有很多其他功能。本章将开始介绍更高级的SVG工具。其中一些技术将在进行动态SVG动画和可视化方面发挥重要作用。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Transformations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换
- en: Clipping and masking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 裁剪和遮罩
- en: Importing content into SVG
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将内容导入SVG
- en: Filter effects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滤镜效果
- en: Serving SVG on the web
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网络上提供SVG
- en: All of these, along with the tools you've already learned about, will give you
    a strong SVG foundation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些，以及你已经学到的工具，将为你打下坚实的SVG基础。
- en: Transformations
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: Transformations in SVG allow you to manipulate an SVG element in a variety of
    ways, including scaling, rotating, skewing, and translating (which looks like
    moving the element, but isn't exactly that). Using transformations allows you
    to manipulate the SVG without changing its intrinsic values (for example, height,
    width, *x*, and *y*) which is important when you're manipulating elements in a
    dynamic way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SVG中的变换允许你以各种方式操纵SVG元素，包括缩放、旋转、倾斜和平移（看起来像是移动元素，但并不完全是）。使用变换允许你操纵SVG而不改变其固有值（例如高度、宽度、*x*和*y*），这在以动态方式操纵元素时很重要。
- en: This section will introduce you to the common transformation functions one by
    one, with examples of each.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将逐一介绍常见的变换函数，并附上每个函数的示例。
- en: translate
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平移
- en: The `translate` transform moves the SVG element by the specified `x` and `y`
    coordinates. A translation changes the *origin* of the element's coordinate system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate`变换通过指定的`x`和`y`坐标移动SVG元素。平移改变了元素坐标系的*原点*。'
- en: The `y` coordinate is an optional argument and is assumed to be equivalent to
    the `x` argument if it's not provided.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供`y`坐标，它是一个可选参数，假定与提供的`x`参数相等。
- en: The following sample shows three equivalent circles. The first circle is not
    transformed in any way. The second is transformed with a single argument (`10`),
    which moves it by `10` on the `x` axis and `10` on the `y` axis. The third is
    translated by `"75"` pixels on the `x` plane and `0` pixels on the `y` plane.
    The underlying element has equivalent metrics in each case but they display differently.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了三个等效的圆。第一个圆没有以任何方式进行变换。第二个圆通过单个参数（`10`）进行了变换，它在*x*轴和*y*轴上分别移动了`10`。第三个在*x*平面上平移了`"75"`像素，在*y*平面上没有平移。在每种情况下，底层元素具有等效的度量，但它们显示方式不同。
- en: '*Why not just move the elements*, you might ask. For one thing, this is useful
    in dynamic SVG as you don''t have to track the original position of the element
    if you move the element around. You can simply reset the element to its original
    state by removing the transformation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可能会问，为什么不直接移动元素*。首先，在动态SVG中，这是有用的，因为如果你移动元素，你不必跟踪元素的原始位置。你可以通过移除变换来简单地将元素重置为其原始状态：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see the output in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下面的截图中看到输出：
- en: '![](img/17e444b7-49eb-4edd-abdd-c2bd1ac9ca57.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17e444b7-49eb-4edd-abdd-c2bd1ac9ca57.png)'
- en: scale
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放
- en: The `scale` transform scales the SVG element by the specified `x` and `y` coordinates.
    The unit is a **factor**, so passing in two would *double* the size of the element.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale`变换通过指定的`x`和`y`坐标对SVG元素进行缩放。单位是**因子**，因此传入两个将会使元素的尺寸*加倍*。'
- en: As with `translate`, the `y` coordinate is optional and is assumed to be equivalent
    to the `x` argument if it's not provided.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与`translate`一样，`y`坐标是可选的，如果没有提供，它被假定为与提供的`x`参数相等。
- en: If you've done CSS transforms and scaled an element, you might be surprised
    by the way `scale` works. Even if you haven't done CSS you might be surprised.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做过CSS变换并缩放了一个元素，你可能会对`scale`的工作方式感到惊讶。即使你没有做过CSS，你也可能会感到惊讶。
- en: 'Scaling in SVG is from the *origin point* of the coordinate system. See the
    following example, showing three separate boxes. One is not scaled at all. The
    next two rectangles are scaled by `1.25` on both axes and then by `2` on the *x*
    axis and then not scaled on the *y* axis:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVG中，缩放是从坐标系的*原点*开始的。请看下面的例子，显示了三个单独的方框。一个根本没有缩放。接下来的两个矩形在两个轴上都缩放了`1.25`倍，然后在*x*轴上缩放了`2`倍，而在*y*轴上没有缩放：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see in the following screenshot, the result is that not only are
    the dimensions of the element scaled, the distance from the origin of the coordinate
    system is also scaled. The first element is adjusted in both directions along
    with both the `x` and `y` planes. The second element is shifted along the `x`
    axis to the right:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在下面的截图中所看到的，结果是元素的尺寸不仅被缩放，而且与坐标系原点的距离也被缩放了。第一个元素在两个方向上都进行了调整，沿着*x*和*y*平面。第二个元素沿着*x*轴向右移动：
- en: '![](img/89065f89-d182-4119-a5c8-cfb864fdf250.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89065f89-d182-4119-a5c8-cfb864fdf250.png)'
- en: 'Compare that to the following code, which shows the way that CSS scaling works.
    Using the same scaling factors in CSS produces a totally different result. Instead
    of scaling from the origin of the SVG document, CSS scales out from the center
    point of the element itself. The syntax might look similar but the results are
    different:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与下面的代码相比，显示了CSS缩放的工作方式。在CSS中使用相同的缩放因子会产生完全不同的结果。CSS不是从SVG文档的原点进行缩放，而是从元素本身的中心点进行缩放。语法可能看起来相似，但结果是不同的：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result can be seen in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在下面的截图中看到：
- en: '![](img/cb5c86a8-aee2-44ea-8dd8-d8001f4282bd.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb5c86a8-aee2-44ea-8dd8-d8001f4282bd.png)'
- en: If you want to produce a similar effect with SVG, there's an interesting trick
    you can use. This trick is also useful to illustrate the way that the `transform`
    attribute can accept multiple transform functions. You're not limited to just
    the one.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在SVG中产生类似的效果，有一个有趣的技巧可以使用。这个技巧也可以用来说明`transform`属性可以接受多个变换函数。您不仅限于一个。
- en: So, how does it work? As I mentioned, the point of origin for the CSS transformation
    is the *center of the box being transformed*. This technique replicates that same
    point of origin in SVG.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，它是如何工作的呢？正如我所提到的，CSS变换的原点是*被变换的盒子的中心*。这种技术在SVG中复制了相同的原点。
- en: To do this, you need to do a trick where you shift the point of origin for the
    element to a new point of origin that matches the CSS point of origin. Here's
    how this works. In this case, our rectangles are at `(100, 100)` in the coordinate
    system and are `100` pixels on a side. The center of the box is therefore at `(150,
    150)`. Translating the element by `(150,150)` sets the point of origin for these
    elements to the equivalent of the CSS point of origin.  Remember that the CSS
    point of origin is the center of the box (which was `(150,150)` before the transformation)
    and that translating an element actually *changes* its point of origin.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要做一个技巧，即将元素的原点移动到一个新的原点，使其与CSS原点匹配。这是它的工作原理。在这种情况下，我们的矩形在坐标系中的位置是`(100,
    100)`，边长为`100`像素。因此，盒子的中心点位于`(150, 150)`。通过将元素平移`(150,150)`，将这些元素的原点设置为等同于CSS原点的位置。请记住，CSS原点是盒子的中心点（在变换之前是`(150,150)`），平移元素实际上*改变*了它的原点。
- en: 'Following the translation, we apply the scale. This happens at the new point
    of origin at `(150, 150)` (again, equivalent to what would be the CSS point of
    origin) and expands the squares by `1.25` and `2`, respectively. Finally, we transform
    the element *back* to its *original* point of origin `(0,0)` and, because they
    were manipulated at the CSS equivalent point of origin `(150, 150)`, the scaled
    elements are now centered appropriately:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在平移之后，我们应用了缩放。这发生在新的原点`(150,150)`处（再次等同于CSS原点），并将正方形分别扩大了`1.25`和`2`。最后，我们将元素*返回*到其*原始*原点`(0,0)`，因为它们是在CSS等效原点`(150,150)`处进行操作的，所以缩放后的元素现在被适当地居中了：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following illustration shows how this works step by step:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图逐步展示了这是如何工作的：
- en: The first frame shows the starting position. The `100` pixel rectangles are
    placed at `(100,100)` and their point of origin is `(0,0)`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一帧显示了起始位置。`100`像素的矩形放置在`(100,100)`，它们的原点是`(0,0)`。
- en: They are then translated by `(150,150)`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它们被平移`(150,150)`。
- en: They are then transformed, from the new point of origin, `(150,150)`, by `1.25`
    and `(2,1)`, respectively.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它们从新的原点`(150,150)`处进行了变换，分别为`1.25`和`(2,1)`。
- en: 'They''re translated back to `(0,0)` while still maintaining the new scale.
    Their actual point of origin at this point is `(0,0)` but it renders as if it
    had the CSS point of origin, `(150,150)`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们被平移到`(0,0)`，同时保持新的缩放。此时它们的实际原点是`(0,0)`，但它呈现出来好像是CSS原点`(150,150)`：
- en: '![](img/2fe40745-aac9-42d7-a491-1d7f86f3c218.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fe40745-aac9-42d7-a491-1d7f86f3c218.png)'
- en: rotate
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转
- en: 'The `rotate` transform rotates the element by a number of degrees. This transform
    takes three arguments. The first is the number of degrees. The second and third
    arguments are `x` and `y` coordinates that define the point of origin for the
    rotation. If there is no point of origin for the element, the origin point of
    the viewport is used. This can be seen in the following two code samples, where
    nine rectangles are drawn on the SVG element. The first is not transformed. The
    next eight are rotated incrementally by ten degrees each:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate`变换通过一定角度旋转元素。这个变换有三个参数。第一个是角度数。第二个和第三个参数是定义旋转原点的`x`和`y`坐标。如果元素没有旋转原点，则使用视口的原点。这可以在以下两个代码示例中看到，其中在SVG元素上绘制了九个矩形。第一个没有被变换。接下来的八个依次旋转了十度：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see in the following screenshot of the rendered code, they `arc`
    across the entire canvas with the `(0,0)` point of the viewport at the origin
    of the rotation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在渲染代码的下面截图中所见，它们在整个画布上`arc`，并且视口的`(0,0)`点位于旋转的原点：
- en: '![](img/fcce9649-bd12-4c9b-aec6-7911ea408214.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcce9649-bd12-4c9b-aec6-7911ea408214.png)'
- en: 'Compare that to the following, which changes the rotation point to the middle
    of the viewport along with the `x` axis and the top of the viewport on the `y`
    axis:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相比，下面的代码将旋转点更改为视口的中心点，以及`x`轴上的顶部和`y`轴上的顶部：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, when this code is rendered in a browser, the same elements
    with the same angle of rotation `arc` across the top right-hand quarter of the
    viewport. *The squares radiate out from the new point of origin*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，当这段代码在浏览器中渲染时，相同角度的旋转`arc`在视口的右上角四分之一中。*正方形从新的原点辐射出来*：
- en: '![](img/7bf754e3-4767-4f4e-8711-0a3ed2e81633.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bf754e3-4767-4f4e-8711-0a3ed2e81633.png)'
- en: 'As with scaling, if you want to rotate around the center point of the element,
    you can use the same translation trick you learned about in that section. In the
    following code sample, the rectangles are translated by the equivalent of their
    center point `(100,100)`, rotated by `10` degrees, and then translated back to
    their original point of origin:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与缩放一样，如果您想要围绕元素的中心点旋转，您可以使用在该部分学到的相同平移技巧。在下面的代码示例中，矩形被平移了相当于它们的中心点`(100,100)`，旋转了`10`度，然后又被平移到了它们的原始原点：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This produces the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下输出：
- en: '![](img/559236ef-62a0-4117-ae8d-bed164d60639.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559236ef-62a0-4117-ae8d-bed164d60639.png)'
- en: skew
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 倾斜
- en: 'The `skew` transforms skew the element by an angle along the specified axis.
    Like `­rotate` and `scale`, `skew` is based on the current origin point. The following
    code sample shows two sets of elements. One is skewed along the `x` axis. The
    other is skewed along the `y` axis. For each set of elements, there is a transform
    that just focuses on the `skew` and then there is another `skew` transform by
    the same amount that also includes the translation technique:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`skew`变换通过指定的轴沿角度倾斜元素。与`rotate`和`scale`一样，`skew`基于当前原点。以下代码示例显示了两组元素。一组沿着`x`轴倾斜，另一组沿着`y`轴倾斜。对于每组元素，有一个变换专注于`skew`，然后还有另一个相同量的`skew`变换，也包括平移技术：'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can see the output of this code in the following screenshot. The blue square
    shows the original position and then the two skewed elements are arrayed on top
    of it to show the difference between skewing based on the original origin point
    and using the translation technique to change the point of origin to the center
    of the element:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下截图中看到此代码的输出。蓝色正方形显示了原始位置，然后两个倾斜的元素排列在其上，以显示基于原始原点的倾斜和使用平移技术改变原点到元素中心的差异：
- en: '![](img/b0ad4118-aa8d-4415-9869-b479a6e51977.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0ad4118-aa8d-4415-9869-b479a6e51977.png)'
- en: There is another option to transform elements. You can use what's called a *transformation
    matrix*. Matrix transformations are powerful (they can represent any of the other
    transformation functions) but also complicated and they rely heavily on math.
    Since not everyone thinks math is fun, matrix transformations aren't as common
    as the other transformation functions. For that reason, I'm not going to cover
    them here. Realistically, you can do anything you need to do with the ones you've
    already learned.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种选项可以变换元素。你可以使用所谓的*变换矩阵*。矩阵变换很强大（它们可以表示任何其他变换函数），但也很复杂，它们严重依赖数学。由于并非每个人都认为数学很有趣，矩阵变换并不像其他变换函数那样常见。因此，我不打算在这里涵盖它们。实际上，你可以用已经学到的方法做任何你需要做的事情。
- en: Clipping and masking
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 裁剪和遮罩
- en: Clipping and masking allow you to subtract portions of elements in an SVG document.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 裁剪和遮罩允许你在SVG文档中减去元素的部分。
- en: Clipping paths, implemented with the `clipPath` element, use any combination
    of paths, text elements, and basic shapes to serve as the outline of a simple
    mask. This means that everything on the inside of the `clipPath` element's outline
    is visible and everything on the outside is cropped out. Every pixel in `clipPath`
    is either on or off.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 剪切路径，使用`clipPath`元素实现，可以使用路径、文本元素和基本形状的任意组合作为简单蒙版的轮廓。这意味着`clipPath`元素轮廓内部的所有内容都是可见的，而外部的所有内容都被裁剪掉。`clipPath`中的每个像素要么是打开的，要么是关闭的。
- en: Masks, implemented with the `mask` element, can contain graphics, text, and
    basic shapes to serve as a semi-transparent mask. With a mask, each pixel value
    indicates the degree of opacity and can range from being fully transparent to
    fully opaque.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 遮罩，使用`mask`元素实现，可以包含图形、文本和基本形状，作为半透明的遮罩。使用遮罩，每个像素值表示不透明度的程度，可以从完全透明到完全不透明。
- en: Clipping
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 裁剪
- en: The `clipPath` element in SVG allows you to cut a shape out of another shape.
    Clipping uses the geometry of the shape to define the area that's cut out. It
    doesn't take into account anything other than the shape, so attributes such as `stroke`
    and `fill` don't change the area being cut out.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SVG中的`clipPath`元素允许你从另一个形状中裁剪出一个形状。裁剪使用形状的几何图形来定义被裁剪的区域。它不考虑除形状之外的任何东西，因此`stroke`和`fill`等属性不会改变被裁剪的区域。
- en: The following code sample shows a very simple, but very useful, pattern for
    using the `clipPath` element. The basic effect is to cut out one half of a complicated
    element (the star we drew in [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml),
    *Getting Started with Authoring SVG*) in order to lay it on top of another instance
    of that same star creating a bisected star design in red and black. While you
    could create two halves of the star and place them next to each other, mixing
    and matching instances of the same element is much more flexible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例显示了一个非常简单但非常有用的`clipPath`元素的使用模式。基本效果是切掉一个复杂元素的一半（我们在[第2章](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml)中绘制的星星，*开始使用SVG进行创作*），以便将其放在另一个相同星星的实例上，创建一个红色和黑色的分割星星设计。虽然你可以创建两个星星的一半并将它们放在一起，但混合和匹配相同元素的实例更加灵活。
- en: Let's take a look at how this works.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的。
- en: 'First, in the `defs` section, we create `clipPath` element itself. Any children
    of the `clipPath` will be bundled together to create the clipping pattern that
    we''ll use later. In this case, it''s a simple rectangle that covers half of the
    canvas. It has an ID of `"box"`. Following that, we create a reusable instance
    of the star we created in [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml),
    *Getting Started with Authoring SVG*. We give that an ID of `"star"`. Outside
    of the `defs` section, we put it all together. With two instances of the `use`
    element, which allows you to swap in elements defined elsewhere, we link to the
    star''s `polygon` and insert it twice into the document, once with a red fill
    and once with a black fill. Note that the user element uses a fragment identifier
    to reference the polygon. `"#star"` is a valid, relative URL pointing to a specific
    `id` on this page. The second variation has a `clip-path` attribute that links
    to our box, `clipPath`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`defs`部分，我们创建`clipPath`元素本身。`clipPath`的任何子元素都将捆绑在一起，以创建稍后将使用的裁剪模式。在这种情况下，它是一个简单的矩形，覆盖了画布的一半。它的ID是`"box"`。接下来，我们创建了一个星星的可重用实例，我们在[第2章](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml)中创建了它，*开始使用SVG进行创作*。我们给它一个ID为`"star"`。在`defs`部分之外，我们把它全部放在一起。使用两个`use`元素的实例，它允许你交换在其他地方定义的元素，我们链接到星星的`polygon`，并将其两次插入文档中，一次填充为红色，一次填充为黑色。请注意，用户元素使用片段标识符来引用多边形。`"#star"`是一个有效的相对URL，指向本页上特定`id`。第二个变体具有一个`clip-path`属性，它链接到我们的`box`，`clipPath`：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of that code can be seen in the following screenshot. The red instance
    of the star is exposed as the left half of the black star, which is clipped out
    by the square defined in the `clipPath` element:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码的输出可以在以下截图中看到。红色的星星实例暴露为黑色星星的左半部分，该部分被“clipPath”元素中定义的正方形剪切掉：
- en: '![](img/97c81615-98f0-4dd4-84a6-f5f6c2dbf40f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97c81615-98f0-4dd4-84a6-f5f6c2dbf40f.png)'
- en: Masking
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遮罩
- en: Masking, in contrast to clipping, takes account of attributes beyond the simple
    shape of the element being cut out. As was mentioned, you leverage the full range
    of transparent, semi-transparent, or fully opaque pixels. This allows for interesting
    effects.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 遮罩与裁剪相反，考虑了除了元素简单形状之外的属性。正如前面提到的，您可以利用全透明、半透明或完全不透明的像素。这可以产生有趣的效果。
- en: The following example shows how multiple masks can be used together. In this
    example, we make heavy use of the `defs` section and then compose an image using
    different reusable elements.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何一起使用多个遮罩。在此示例中，我们大量使用“defs”部分，然后使用不同的可重用元素组合图像。
- en: For starters, we create two gradients. One is a linear gradient that has five
    steps, mostly black, which creates a very intense band of white in the middle
    of the gradient. The second is a radial gradient, which has a central area of
    black surrounded by a very large circle of white. Using these for a mask means
    that each of the pixels in these gradients lands on a continuum from fully opaque
    (black pixels) to fully transparent (white pixels) and variable transparency in
    the middle.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建两个渐变。一个是线性渐变，有五个步骤，大部分是黑色，中间创建了一个非常强烈的白色带。第二个是径向渐变，中心区域是黑色，周围是一个非常大的白色圆圈。将这些用作遮罩意味着这些渐变中的每个像素都落在从完全不透明（黑色像素）到完全透明（白色像素）和中间可变透明度的连续范围上。
- en: 'Take a look at these gradients by themselves:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 单独看这些渐变：
- en: '![](img/61079b70-717a-40af-882b-da2b9e524d40.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61079b70-717a-40af-882b-da2b9e524d40.png)'
- en: We then create a `text` element that says Mastering SVG and bring in a `pattern`
    element, which you'll recognize from [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml),
    *Getting Started with Authoring SVG*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个写着“精通SVG”的`text`元素，并引入一个`pattern`元素，您将从[第2章](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml)中认识到它，*开始使用SVG进行创作*。
- en: 'In the body of the SVG element, we link to the text elements, using fragment
    identifiers (`#mastering-SVG`) pointing to the IDs of the `text` elements in the
    `defs` section, and apply the two masks to them with the `mask` attribute with
    a `url` value pointing to the fragment identifier of the `mask` attribute. Take
    a look at how the masks affect the text elements by themselves:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVG元素的主体中，我们链接到文本元素，使用片段标识符（`#mastering-SVG`）指向`defs`部分中`text`元素的ID，并使用`mask`属性将两个遮罩应用于它们，`mask`属性的`url`值指向`mask`属性的片段标识符。单独看看这些遮罩如何影响文本元素：
- en: '![](img/a10117ff-c916-432c-81d7-3214ecb82327.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a10117ff-c916-432c-81d7-3214ecb82327.png)'
- en: 'Putting it all together, we stack the two text elements on top of each other,
    and add a patterned box behind the text boxes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容放在一起，我们将两个文本元素叠放在一起，并在文本框后面添加一个带图案的框：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Running it in a browser produces the following output. As you can see, the
    areas of yellow and the areas of red that are visible in the two text elements
    blend together. There are areas of fully opaque color in the center and edges
    blended with areas of semi-transparent color, where the background pattern shows
    through, in between:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行后，我们得到以下输出。您可以看到两个文本元素中可见的黄色区域和红色区域混合在一起。中心和边缘有完全不透明的颜色区域，与半透明颜色区域混合，其中背景图案透过，位于两者之间：
- en: '**![](img/e27e4130-72de-4c50-9397-e6b4e4a0e322.png)**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/e27e4130-72de-4c50-9397-e6b4e4a0e322.png)**'
- en: This section just touches on the possibilities of masking and clipping. You'll
    continue to see examples of these powerful techniques throughout this rest of
    the book.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本节只是简单介绍了遮罩和裁剪的可能性。在本书的其余部分中，您将继续看到这些强大技术的示例。
- en: Importing images into SVG
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像导入SVG
- en: In addition to creating images wholesale in SVG, it's also possible to pull
    other images into an SVG document.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在SVG中批量创建图像之外，还可以将其他图像引入SVG文档中。
- en: 'There are a couple of ways to do this. One way is to use the SVG `image` element
    and import the image in a way that will be familiar to you if you''ve used the
    HTML `img` element. In this example, we use the `image` element. It takes a `href`
    attribute, which acts like an `img src` (as seen in HTML) and it has `height`
    and `width` attributes. Unlike the HTML `img` element, it also accepts an `x`
    and `y` position:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以做到这一点。一种方法是使用SVG“image”元素，并以一种您熟悉的方式导入图像，如果您使用过HTML“img”元素，这种方式对您来说将是熟悉的。在此示例中，我们使用“image”元素。它采用`href`属性，类似于HTML中的`img
    src`，并且具有`height`和`width`属性。与HTML“img”元素不同，它还接受`x`和`y`位置：
- en: In the context of an HTML document, the HTML `spec` actually defines `IMAGE`
    as a synonym of `img`. It only exists in the context of inline SVG.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML文档的上下文中，HTML“spec”实际上将“IMAGE”定义为“img”的同义词。它只存在于内联SVG的上下文中。
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Rendered in the browser, we get the full photographic image with an SVG text
    element serving as a caption:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，我们得到了完整的照片图像，SVG文本元素作为标题：
- en: '![](img/49ae51e3-8f84-4773-9162-3a230f6603d6.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49ae51e3-8f84-4773-9162-3a230f6603d6.png)'
- en: You can also use the `image` element to import in other SVG images. There are
    certain restrictions with that technique that limit the usefulness of the imported
    SVG element. They are basically treated like static images so things such as further
    importing images won't work;  you can't import other images inside the imported
    SVG image. Only the *first *referenced image will be imported. To use the full
    power of an imported SVG image, you should use the `use` element and point to
    an external URL. With this technique, you can also target specific fragments of
    the imported document. This technique would allow you to create a symbol library
    and import the symbols into your SVG document by reference.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`image`元素来导入其他SVG图像。该技术有一定的限制，限制了导入的SVG元素的实用性。它们基本上被视为静态图像，因此诸如进一步导入图像之类的事情是行不通的；你不能在导入的SVG图像内导入其他图像。只有*第一个*引用的图像会被导入。要使用导入的SVG图像的全部功能，你应该使用`use`元素并指向外部URL。通过这种技术，你还可以针对导入文档的特定片段。这种技术可以让你创建一个符号库，并通过引用将符号导入到你的SVG文档中。
- en: 'In this simple example, we show how using the `use` element and referencing
    a fragment of an included document imports the image properly. `#image` points
    to the `id` element of a  specific element in the  imported file, `svg-with-import.svg`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我们展示了如何使用`use`元素并引用包含文档的片段来正确导入图像。`#image`指向`svg-with-import.svg`中特定元素的`id`元素：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The blank space at the top of this document shows where the image is failing
    to load:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文档顶部的空白处显示了图像加载失败的位置：
- en: '![](img/026b2f03-f121-4ed6-9f52-f270fdf0c1d9.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/026b2f03-f121-4ed6-9f52-f270fdf0c1d9.png)'
- en: 'To get this example to work in Versions of Internet Explorer less than 8, you
    need to use a polyfill script called `svg4everybody` ([https://github.com/jonathantneal/svg4everybody](https://github.com/jonathantneal/svg4everybody)).
    Insert it into your document, call it when you need to use some SVG, and it just
    works. `svg4everybody` also polyfills the experience in Safari 6 and Edge 12\.
    How to fix your page is shown in the following code sample. You include the file
    and then call the `svg4everybody()` script:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这个示例在低于8版本的Internet Explorer中工作，你需要使用一个叫做`svg4everybody`的polyfill脚本（[https://github.com/jonathantneal/svg4everybody](https://github.com/jonathantneal/svg4everybody)）。将它插入到你的文档中，在需要使用SVG时调用它，它就可以工作。`svg4everybody`还可以在Safari
    6和Edge 12中填充体验。如何修复你的页面在下面的代码示例中显示。你包含文件，然后调用`svg4everybody()`脚本：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Filters
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滤镜
- en: Filters allow you to apply a variety of effects to elements or groups of elements.
    Filters allow you to blur images, apply lighting effects, and many other advanced
    image manipulation techniques. If you've ever used Adobe Photoshop or other graphics
    manipulation programs, these filters are just like the filters you've seen in
    that environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 滤镜允许你对元素或元素组应用各种效果。滤镜允许你模糊图像，应用照明效果，以及许多其他高级图像处理技术。如果你曾经使用过Adobe Photoshop或其他图形处理程序，这些滤镜就像你在那个环境中看到的滤镜一样。
- en: 'Filters are implemented in the `defs` section of the SVG document and are grouped
    as part of a `filter` element. They are referenced the same way that `mask` and
    `clipPath` elements are, via a fragment URL. The following example shows the common
    Gaussian blur filter applied to a circle:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 滤镜是在SVG文档的`defs`部分中实现的，并作为`filter`元素的一部分进行分组。它们的引用方式与`mask`和`clipPath`元素相同，通过片段URL。以下示例显示了应用于圆的常见高斯模糊滤镜：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Rendered in a browser, you can see the blurred circle on the right:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，你可以看到右侧的模糊圆圈：
- en: '![](img/5dc536ec-18c1-480a-b2ee-c4e4f7c6d03f.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dc536ec-18c1-480a-b2ee-c4e4f7c6d03f.png)'
- en: I'm not going to go through filters in detail in this book. There are a lot
    of them out there; there are varying (sometimes confusing) levels of browser support
    and they can be very complicated to explain. I did want to show you one so that
    you can see the basic pattern and this one is as straightforward as they come.
    *All* of the other filters follow the same general pattern. A `filter` or series
    of filters are grouped in the `defs` section and referenced with an `id` element.
    Just know that simple pattern and you're ready to experiment with them or to incorporate
    them into your projects.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算在本书中详细介绍滤镜。有很多滤镜；浏览器支持的级别有所不同（有时令人困惑），并且解释起来可能非常复杂。我想向你展示一个，这样你就可以看到基本模式，这个是最简单的。*所有*其他滤镜都遵循相同的一般模式。一个`filter`或一系列滤镜被分组在`defs`部分，并通过`id`元素进行引用。只要知道这个简单的模式，你就可以准备好尝试它们，或者将它们纳入你的项目中。
- en: Serving SVG on the web
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网络上提供SVG
- en: 'One final note about SVG before we move into more details in the following
    chapters about the way that SVG interacts with the wider universe of web technology:
    if you''re going to serve SVG on the web, you need to ensure that it''s served
    with the correct content type. Browsers expect SVG to be served with the `"image/svg+xml"` media
    type. If you run into problems with SVG images not displaying and you can verify
    that they exist on the server, it''s a good bet to check the headers (using the
    Network tab of your browser debugger of choice) to see if they''re being served
    correctly. If they''re not (for example, if they''re `text/xml`), then you need
    to set the media type properly. This section outlines how to set the proper media
    type in common web servers.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入更多关于SVG与web技术更广泛的交互方式的细节章节之前，关于SVG的最后一点说明：如果你要在网络上提供SVG，你需要确保它以正确的内容类型提供。浏览器期望以`"image/svg+xml"`媒体类型提供SVG。如果你遇到SVG图像不显示的问题，并且你可以验证它们存在于服务器上，最好检查头部（使用你选择的浏览器调试器的网络选项卡）以查看它们是否被正确提供。如果没有（例如，如果它们是`text/xml`），那么你需要正确设置媒体类型。本节概述了如何在常见的web服务器中设置正确的媒体类型。
- en: Apache
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache
- en: 'Adding the correct media type in Apache is as simple as adding the following
    line to your `.htaccess` file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache中添加正确的媒体类型就像在你的`.htaccess`文件中添加以下行一样简单：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: nginx
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nginx
- en: 'Adding the correct media type in nginx requires you to have the following entry
    in your `mime.types` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在nginx中添加正确的媒体类型需要你在你的`mime.types`文件中有以下条目：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: IIS
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IIS
- en: 'Adding the correct media type in IIS can happen in two ways. You can add the
    media type using the IIS manager ([https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753281(v=ws.10)](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753281(v=ws.10)))
    or you can add the following entries to `web.config`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在IIS中添加正确的媒体类型有两种方式。您可以使用IIS管理器（[https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753281(v=ws.10)](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753281(v=ws.10))）添加媒体类型，或者您可以将以下条目添加到`web.config`中：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about a large number of more advanced SVG features.
    You learned about multiple transformations, which allow you to manipulate SVG
    elements without changing their underlying structure. This opens up a number of
    possibilities that we'll continue to examine throughout this book.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了许多更高级的SVG功能。您了解了多重变换，这使您能够在不改变SVG元素的基本结构的情况下操作它们。这为我们在本书中将继续探讨的许多可能性打开了大门。
- en: You also learned about clipping and masking, which allow you to manipulate images
    by subtracting portions of them using complicated drawings. This includes the
    ability to use variable opacity to manipulate images.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您还了解了裁剪和遮罩，这使您能够通过复杂的图形减去图像的部分。这包括使用可变不透明度来操作图像的能力。
- en: Additionally, you learned about implementing a basic SVG filter and about serving
    SVG files on the web in common web servers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还了解了实现基本SVG滤镜以及在常见Web服务器上提供SVG文件的方法。
- en: In [Chapter 4](35befb3f-3d4c-45e5-b79d-e08554579075.xhtml), *Using SVG in HTML*,
    you'll learn some details about using SVG within the context of an HTML document,
    which is where the real power of SVG is exposed for the entire world to see.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](35befb3f-3d4c-45e5-b79d-e08554579075.xhtml)中，*在HTML中使用SVG*，您将了解有关在HTML文档中使用SVG的一些细节，这是SVG真正展现其力量供全世界看到的地方。
