- en: Building Your Own Website
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的网站
- en: 'The fun part has finally come. We''re going to start implementing our website
    from A to Z. I will explain thoroughly through each step. Here''s the list of
    what is going to be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的部分终于来了。我们将从头到尾开始实施我们的网站。我将逐步解释每个步骤。以下是本章将涵盖的内容列表：
- en: Installation of HTML Boilerplate
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装HTML样板
- en: Setting up our project with images, fonts, and normalize.css
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图像、字体和normalize.css设置我们的项目
- en: Creating our header and stylising it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的页眉并美化它
- en: Creating our hero section and learn about the positioning in CSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的主要部分并学习CSS中的定位
- en: Creating our Blog section
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的博客部分
- en: Adding an about section
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加关于部分
- en: Creating a Partner section
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建合作伙伴部分
- en: Creating a footer section
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页脚部分
- en: First, let's see the design we're going to implement. If you can remember, we
    saw a little preview back in [Chapter 4](e6d6711e-b61a-421f-b883-5a1d4f2da13b.xhtml),
    *Responsive Versus Adaptive Design*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看我们将要实施的设计。如果您还记得，我们在[第4章](e6d6711e-b61a-421f-b883-5a1d4f2da13b.xhtml)中看到了一个小预览，*响应式与自适应设计*。
- en: Our design
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的设计
- en: 'Our home page will contain the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主页将包括以下内容：
- en: 'Header: We will learn how to create and stylize a navigation section, with
    a logo and a menu on the right-hand side.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页眉：我们将学习如何创建和美化一个导航部分，带有标志和右侧菜单。
- en: A hero Image:  In web design, it describes a front banner image, usually a big
    image.  We'll learn how to create a full-width background image with a big title.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要图像：在网页设计中，它描述了一个前端横幅图像，通常是一个大图像。我们将学习如何创建一个带有大标题的全宽背景图像。
- en: 'A preview of the `Blog` with six `blog` posts: We''ll learn how to display
    three responsive columns with images and content.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带有六篇博客文章的`Blog`预览：我们将学习如何显示带有图像和内容的三个响应式列。
- en: 'An ABOUT US section: We will learn how to add a gradient to an image.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于我们部分：我们将学习如何向图像添加渐变。
- en: 'A PARTNERS section: We will learn how to center content on the page.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合作伙伴部分：我们将学习如何在页面上居中内容。
- en: 'A footer: Basically the same thing as the header, but at the bottom.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页脚：基本上与页眉相同，但在底部。
- en: You can check the image of the home page in full size in the resources files
    I provided, in `Resources` | `Screens`. There is also the `Sketch` source file
    of the project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我提供的资源文件中的`Resources` | `Screens`中查看主页的完整尺寸图像。项目还包括`Sketch`源文件。
- en: I strongly recommend you to install Sketch or Figma if you're not using one
    of these design tools yet. The Sketch app is commonly used for web design projects
    and can be downloaded at [http://sketchapp.com](http://sketchapp.com). It has
    a free trial period of 14 days. Figma is similar to Sketch and can be used without
    a trial.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您安装Sketch或Figma，如果您还没有使用这些设计工具之一。Sketch应用程序通常用于Web设计项目，可以在[http://sketchapp.com](http://sketchapp.com)下载。它有14天的免费试用期。Figma类似于Sketch，可以在没有试用期的情况下使用。
- en: 'This is what our design looks like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的设计长什么样子：
- en: '![](img/950045cf-145c-433e-8386-f5f70342876b.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/950045cf-145c-433e-8386-f5f70342876b.png)'
- en: Our home page design
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主页设计
- en: Without further ado, let's get started!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们开始吧！
- en: Installing HTML Boilerplate
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装HTML样板
- en: We're going to start a fresh, so let's create a new file for this project. What
    I like to do when I start a project is download an HTML Boilerplate. HTML5 Boilerplate
    is a frontend template, created to help you build fast, robust, and adaptable
    web apps or sites. You basically download one package, and it contains all the
    files you need to start a project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从头开始，因此让我们为这个项目创建一个新文件。当我开始一个项目时，我喜欢下载一个HTML样板。HTML5样板是一个前端模板，旨在帮助您构建快速、强大和适应性强的Web应用程序或站点。您基本上只需下载一个包，它包含了开始项目所需的所有文件。
- en: 'Let''s go to [https://html5boilerplate.com/](https://html5boilerplate.com/)
    to download the latest version of the template:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去[https://html5boilerplate.com/](https://html5boilerplate.com/)下载模板的最新版本：
- en: '![](img/bf458b1b-e3c9-418b-9b43-fb32cdfdaee0.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf458b1b-e3c9-418b-9b43-fb32cdfdaee0.png)'
- en: Click on Download v6.0.1 or higher.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单击下载v6.0.1或更高版本。
- en: 'Let''s have a look at what''s inside our package:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的包里有什么：
- en: '![](img/c25985c3-e6d4-42c4-9592-77cd698dd7ab.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c25985c3-e6d4-42c4-9592-77cd698dd7ab.png)'
- en: 'There are plenty of files in the folder. What we can see is that it contains
    all the essential files a website needs to work properly:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹中有很多文件。我们可以看到，它包含了网站正常运行所需的所有基本文件：
- en: '`index.html`: Our home page, the page where the user will land upon going to
    your website'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：我们的主页，用户访问网站时会首先看到的页面'
- en: 'The `css` folder: A folder for all our CSS files'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css`文件夹：存放所有CSS文件的文件夹'
- en: 'The `img` folder: A folder for all our images'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img`文件夹：存放所有图像的文件夹'
- en: 'The `js` folder: A folder for all our JS files'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js`文件夹：存放所有JS文件的文件夹'
- en: '`favicon.ico`: An icon that shows up at the left corner of a tab of a browser
    that indicates to the user that they''re on your website, usually your logo'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favicon.ico`：显示在浏览器标签左上角的图标，向用户指示他们正在访问您的网站，通常是您的标志'
- en: '`404.html`: An HTML page for users who landed on an incorrect URL'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`404.html`：一个用于错误URL的用户的HTML页面'
- en: The rest of the files are not so important for us to understand at the moment;
    we will review them in an upcoming chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其他文件对我们目前来说并不那么重要；我们将在即将到来的章节中进行审查。
- en: Let's rename our folder to make it our own, for example,  `Web Project`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将文件夹重命名为我们自己的名字，例如`Web项目`。
- en: Editing index.html
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑index.html
- en: Let's now open our folder in Atom; click on Menu | Open… | and select our `Web
    Project` folder.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在Atom中打开我们的文件夹；单击菜单|打开… |并选择我们的`Web项目`文件夹。
- en: 'Select `index.html` from the left panel. You can see the HTML document and
    what it contains:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧面板选择`index.html`。您可以看到HTML文档及其内容：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll now review each part of this HTML file so you understand each part of
    the code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将逐个审查此HTML文件的每个部分，以便您了解代码的每个部分：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here you will put the title of our website; for this exercise, let's put `Racing
    Club - Events & Tickets`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将放置我们网站的标题；在这个练习中，让我们把标题设为“赛车俱乐部-活动和门票”。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This section is the description of the page, It will be useful for SEO and will
    appear on a search result after the title.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分是页面的描述，对于SEO很有用，并且会在标题之后出现在搜索结果中。
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will tell the browser how to behave for desktop and mobile view. You can
    leave it as it is.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉浏览器如何在桌面和移动视图中行为。你可以保持原样。
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We learned in the previous chapter that there are three different ways to use
    CSS in our HTML page. We used the second method in our exercise, but the best
    way to use CSS is to put it into an external file, like so. You can leave it as
    it is.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中学到，在我们的HTML页面中使用CSS有三种不同的方法。我们在练习中使用了第二种方法，但是使用CSS的最佳方式是将其放入一个外部文件中，就像这样。你可以保持原样。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is basically to advise users with Internet Explorer 9 or lower to update
    their internet browser. You don't need to change the code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是为了建议使用Internet Explorer 9或更低版本的用户更新他们的互联网浏览器。你不需要改变这段代码。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is our content. We'll edit this part of the HTML to add element and content
    in our HTML page. You can remove the `<p>` element since we don't need it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的内容。我们将编辑HTML的这部分来在我们的HTML页面中添加元素和内容。你可以删除`<p>`元素，因为我们不需要它。
- en: 'The following code contains a list of the JavaScript plugins that are linked
    to our page:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码包含了链接到我们页面的JavaScript插件的列表：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The plugins are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 插件如下：
- en: '`modernizr`: Detects our user''s browser and changes the website''s behavior
    accordingly.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modernizr`：检测用户的浏览器并相应地改变网站的行为。'
- en: '`Jquery`: We will use this framework to create interaction and animation in
    our next chapter.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Jquery`：我们将在下一章中使用这个框架来创建交互和动画。'
- en: '`Plugin.js`: Contains all the other plugins that we will need.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plugin.js`：包含我们需要的所有其他插件。'
- en: '`Main.js`: Contains all the JS code we will create.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main.js`：包含我们将创建的所有JS代码。'
- en: '`Google Analytics`: An analytics plugin for analyzing users and to help understand
    how your website is performing. We''ll go through this in [Chapter 10](f2acf30e-85be-47a2-ab01-8b7225eb1b8a.xhtml),
    *Optimizing and Launching Our* *Website.*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Google Analytics`：用于分析用户并帮助了解你的网站表现的分析插件。我们将在[第10章](f2acf30e-85be-47a2-ab01-8b7225eb1b8a.xhtml)，*优化和发布我们的网站*中介绍这个。'
- en: Let's start editing our web page!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编辑我们的网页！
- en: Creating our web page
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的网页
- en: Now that everything is set up, let's get started with putting together our images
    folder and installing our fonts.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备好了，让我们开始整理我们的图片文件夹并安装我们的字体。
- en: Images folder
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片文件夹
- en: I have prepared a folder with all the images that you'll need to do this exercise.
    Those images can be found in `Resources` | `Image Web project`. You can simply
    copy all the images and assets to the `img` folder in our new project folder.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经准备了一个包含所有你需要的图片的文件夹来进行这个练习。这些图片可以在`Resources` | `Image Web project`中找到。你可以简单地将所有图片和资源复制到我们新项目文件夹中的`img`文件夹中。
- en: Installing our font
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装我们的字体
- en: If you have a second look at the website, you can see that we're using custom
    fonts, which means that we're not using web *safe* fonts. Web-safe fonts are the
    fonts pre-installed on every device. They appear on all operating systems. This
    collection of fonts is used by Windows, Mac, Google, Linux, Unix, and so on.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再看一下网站，你会发现我们正在使用自定义字体，这意味着我们没有使用网页*安全*字体。网页安全字体是预装在每台设备上的字体。它们出现在所有操作系统上。这些字体集合被Windows、Mac、Google、Linux、Unix等使用。
- en: 'There may be a few more, but this is a list of the common web-safe fonts:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有一些，但这是常见的网页安全字体列表：
- en: Arial
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arial
- en: Helvetica
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helvetica
- en: Times New Roman
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Times New Roman
- en: Courier New
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Courier New
- en: Courier
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Courier
- en: Verdana
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Verdana
- en: Georgia
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Georgia
- en: Comic Sans MS
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Comic Sans MS
- en: Trebuchet MS
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Trebuchet MS
- en: Arial Black
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arial Black
- en: Impact
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Impact
- en: Not super appealing; let's be honest.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 不是很吸引人；坦率地说。
- en: 'But, with CSS3, we can now add our own custom fonts, by using `@font-face`.
    Let''s see how we can add this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有了CSS3，我们现在可以通过使用`@font-face`来添加自定义字体。让我们看看如何添加这个：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For this exercise, I have provided a zip file called `fonts.zip` to make it
    easier for you. You can unzip this file and move the folder fonts to our `Web
    Project` folder. Let''s see what''s in this folder:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个练习，我提供了一个名为`fonts.zip`的压缩文件，以便让你更容易。你可以解压这个文件，然后将`fonts`文件夹移动到我们的`Web Project`文件夹中。让我们看看这个文件夹里有什么：
- en: '![](img/1b09f29a-51b1-449f-8c81-deb3334a918d.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b09f29a-51b1-449f-8c81-deb3334a918d.png)'
- en: It contains the font files needed and ready to use for the web.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含了网页所需的字体文件，并且可以直接使用。
- en: To use a custom font on the web, we need to generate or convert this font to
    a webfont beforehand. You can use the website [fontsquirrel.com](http://fontsquirrel.com)
    to generate web fonts from your own fonts.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要在网页上使用自定义字体，我们需要事先生成或转换这个字体为网页字体。你可以使用网站[fontsquirrel.com](http://fontsquirrel.com)从你自己的字体生成网页字体。
- en: 'There is also a CSS file that uses the `@font-face` property:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个使用`@font-face`属性的CSS文件：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So, let''s link this CSS file to our HTML file. And in our `index.html`, let''s
    add the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们将这个CSS文件链接到我们的HTML文件中。在我们的`index.html`中，让我们添加以下内容：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Great, we have now linked our fonts to our HTML page. Let's now add our second
    font, which is a Google font.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们现在已经将我们的字体链接到我们的HTML页面。现在让我们添加我们的第二个字体，这是一个谷歌字体。
- en: Importing Google Font
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入谷歌字体
- en: Google, since 2010, has provided a platform for users to discover fonts and
    use them freely. There are over 800 font families available through Google Font's
    main website, and we'll use one of them in this exercise.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 自2010年以来，谷歌为用户提供了一个发现字体并免费使用的平台。谷歌字体的主网站上提供了800多种字体系列，我们将在这个练习中使用其中的一种。
- en: 'Google made it very easy to import a font. The following are the steps to incorporate
    a font on our website:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌让导入字体变得非常容易。以下是在我们的网站上引入字体的步骤：
- en: Go to the Google Font website ([https://fonts.google.com/](https://fonts.google.com/)).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往谷歌字体网站（[https://fonts.google.com/](https://fonts.google.com/)）。
- en: Search for our font, Roboto, and click on the corresponding font ([https://fonts.google.com/specimen/Roboto](https://fonts.google.com/specimen/Roboto)).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索我们的字体，Roboto，并点击相应的字体（[https://fonts.google.com/specimen/Roboto](https://fonts.google.com/specimen/Roboto)）。
- en: Click on SELECT THIS FONT.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择这个字体。
- en: Click on the little popup at the bottom and switch to the CUSTOMIZE tab.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击底部的小弹出窗口，切换到自定义选项卡。
- en: We want to have regular and bold.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望有常规和粗体。
- en: 'Switch back to the EMBED tab and copy the code displayed:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回EMBED选项卡并复制显示的代码：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Copy and paste this code just before our previous CSS link:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前的CSS链接之前粘贴此代码：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You have now your Google Font installed!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已安装了Google字体！
- en: 'Now, to use our Google Font, simply paste the CSS property on the element we
    want to stylize:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要使用我们的Google字体，只需在我们要样式化的元素上粘贴CSS属性：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's go to our CSS file, located in `css` | `main.css`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去我们的CSS文件，位于`css` | `main.css`。
- en: 'Find the section with the following comment:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 找到以下注释的部分：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, write:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，写：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will apply the font-family property to the `<body>` element, which is the
    main element of our HTML page, so it will be applied to all elements inside `<body>`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将将font-family属性应用于`<body>`元素，这是我们HTML页面的主要元素，因此它将应用于`<body>`内的所有元素。
- en: Adding normalize.css
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加normalize.css
- en: You probably noticed another `css` file when looking for the `main.css`. What
    is `normalize.css` and why should we integrate this with our HTML?
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当查找`main.css`时，您可能会注意到另一个`css`文件。`normalize.css`是什么，为什么我们应该将其与我们的HTML集成？
- en: As we saw earlier, every browser does not render the same. With `normalize.css`,
    all browsers will render elements more consistently and in line with modern standards.
    We simply need to add it to our other `css` files and it will do the job. Cool,
    isn't it?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，每个浏览器的渲染方式都不相同。使用`normalize.css`，所有浏览器将更一致地渲染元素，并符合现代标准。我们只需要将其添加到我们的其他`css`文件中，它就会起作用。很酷，不是吗？
- en: The header
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标题
- en: Let's start implementing our header. Best practice is to first do the HTML and
    then finish with the CSS. Let's have a look at our design first.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实施我们的标题。最佳做法是先做HTML，然后再完成CSS。让我们先看看我们的设计。
- en: As you can see, our header has a transparent background, with a logo and main
    menu on the left-hand side, and a secondary menu on the right-hand side.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的标题具有透明背景，左侧有标志和主菜单，右侧有次级菜单。
- en: 'First, create a `<header>` tag in our HTML document:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的HTML文档中创建一个`<header>`标签：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a menu
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建菜单
- en: To create our menu, we need to create a list. In HTML, to create a list you
    have to use the tag `<ul>`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的菜单，我们需要创建一个列表。在HTML中，要创建列表，您必须使用标签`<ul>`。
- en: '`<ul>` stands for unordered list; it needs to have a list tag inside `<li>`.
    You can use it as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ul>`代表无序列表；它需要在`<li>`内部有一个列表标签。您可以按以下方式使用它：'
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our list should end up looking like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的列表应该最终看起来像这样：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Inserting links
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入链接
- en: 'To make the menu work, we need to add links to our list; otherwise, it will
    go nowhere. To add a link, you have to use the tag `<a>`. To make each `<li>`
    element clickable as a link, we need to add the `<a>` tag inside the `<li>` tag,
    as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使菜单工作，我们需要向我们的列表添加链接；否则，它将无法工作。要添加链接，您必须使用标签`<a>`。为了使每个`<li>`元素可点击为链接，我们需要在`<li>`标签内添加`<a>`标签，如下所示：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we need to specify where the link goes. For that, we need to add the attribute
    `href`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要指定链接的位置。为此，我们需要添加属性`href`：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If the `href` attribute is not present, the `<a>` tag won't act as a hyperlink.
    The value of `href` can be an absolute link to another website or a relative link
    to a file on the same domain. It's basically the same behavior as the `src` attribute
    we saw earlier.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在`href`属性，则`<a>`标签将不起作用。`href`的值可以是指向另一个网站的绝对链接，也可以是指向同一域上的文件的相对链接。这基本上与我们之前看到的`src`属性的行为相同。
- en: 'In the end, our menu should look like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的菜单应该看起来像这样：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Lastly, let''s add a class to our `<ul>` tag so we can specify the style later
    on with `css`, like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们给我们的`<ul>`标签添加一个类，这样我们以后可以用`css`指定样式，就像这样：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Adding a logo
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标志
- en: In addition to our navigation, we also have a logo on the left-hand side. I
    have provided some assets you can use for this exercise in the `Resources` folder
    (`Exercise 2` | `Assets`).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们的导航，我们还在左侧放置了一个标志。我在`资源`文件夹（`练习2` | `资产`）中提供了一些您可以在此练习中使用的资产。
- en: Simply copy and paste the `logo.png` and `logo@2x.png` files into your `img`
    folder on your `Web Project`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将`logo.png`和`logo@2x.png`文件复制并粘贴到您的`Web项目`的`img`文件夹中。
- en: '`logo@2x.png` is simply the retina version of the image, which means it has
    double the pixel density of the normal image. It''s a good practice to name your
    retina image with the suffix `@2x`.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`logo@2x.png`只是图像的视网膜版本，这意味着它的像素密度是普通图像的两倍。将视网膜图像命名为后缀`@2x`是一个很好的做法。'
- en: 'Now we''ll simply add an image before our menu, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将简单地在我们的菜单之前添加一个图像，如下所示：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Perhaps you have noticed that we only put `logo.png` and there is no use of
    the `logo@2x.png`. To be able to use our retina version image only on retina devices,
    we''ll have to use the attribute `srcset`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 也许您已经注意到我们只放置了`logo.png`，并没有使用`logo@2x.png`。为了能够仅在视网膜设备上使用我们的视网膜版本图像，我们将不得不使用属性`srcset`：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`srcset` attribute is pretty simple to use. For each asset, add the density
    at the end to specify which screen density it should be used. In this example,
    we''ll put `img/logo@2x.png 2x`. You can also specify at which screen width it
    should appear, but let''s keep it simple for this example.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`srcset`属性非常简单易用。对于每个资产，添加密度以指定应该使用哪个屏幕密度。在这个例子中，我们将放置`img/logo@2x.png 2x`。您还可以指定它应该出现在哪个屏幕宽度，但让我们在这个例子中保持简单。'
- en: 'One web design good practice is to make the logo link to the homepage. To do
    so, we need to put the `img` tag inside a tag:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网页设计的良好实践是使标志链接到主页。为此，我们需要将`img`标签放在标签内：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To make sure the link is landing on the website''s homepage, we need to change
    the `href` attribute `"#"` to `"/"` so it will go to the root of the folder:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保链接指向网站的主页，我们需要将`href`属性`"#"`更改为`"/"`，这样它将转到文件夹的根目录：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Lastly, let''s put a class `"logo"` so we can target this element later:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们放一个类`"logo"`，这样我们以后可以定位这个元素：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Right-hand side menu
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 右侧菜单
- en: 'The last part of the menu is the right-hand side menu with the `Login` and
    `Facebook` like buttons. There are many ways to do it, but I suggest using another
    list such as the previous one we created:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单的最后一部分是右侧的菜单，有`登录`和`Facebook`喜欢按钮。有很多方法可以做到这一点，但我建议使用另一个列表，就像我们之前创建的那个：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We'll add the class `"right-nav"` and add 2 `<li>`, as shown in the preceding
    code.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加类`"right-nav"`并添加2个`<li>`，就像前面的代码中所示。
- en: Adding a Facebook like button
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Facebook喜欢按钮
- en: 'To add the `Facebook` like button, we first need to create the button. To do
    so, we need to go to the Facebook Developer''s website to get the information.
    I have the link handy for you: [https://developers.facebook.com/docs/plugins/like-button](https://developers.facebook.com/docs/plugins/like-button%23).
    On this page, you''ll find the means to customize your button, as shown in the
    following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`Facebook`的喜欢按钮，我们首先需要创建按钮。为此，我们需要去Facebook开发者网站获取信息。我已经为你准备好了链接：[https://developers.facebook.com/docs/plugins/like-button](https://developers.facebook.com/docs/plugins/like-button%23)。在这个页面上，你会找到自定义按钮的方法，就像下面的截图所示：
- en: '![](img/bf44dc43-7b50-49ae-8c75-14fcbda4b6ea.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf44dc43-7b50-49ae-8c75-14fcbda4b6ea.png)'
- en: 'Once done, click on Get Code and select the tab IFrame:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击获取代码，并选择IFrame选项卡：
- en: '![](img/9005f3a1-a6a7-420d-a54b-3a472259ee62.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9005f3a1-a6a7-420d-a54b-3a472259ee62.png)'
- en: We can copy this piece of code into our website in our second `<li>` tag.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这段代码复制到我们网站的第二个`<li>`标签中。
- en: 'We''re going to customize the button a bit; change the default value of the
    attribute height to `20px`. You should end up with code like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将稍微定制一下按钮；将属性高度的默认值更改为`20px`。你应该最终得到这样的代码：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We have now our menu in HTML; let's add some styling with CSS to make it look
    better.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在HTML中有了我们的菜单；让我们用CSS添加一些样式，使它看起来更好。
- en: Styling our header
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的页眉添加样式
- en: At the moment, our header is looking very boring. But, no worries, we'll add
    some magic with CSS and make it prettier.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻，我们的页眉看起来非常无聊。但是，别担心，我们将用CSS添加一些魔法，让它变得更漂亮。
- en: '![](img/fe352669-a5d5-460c-b020-77d9cc704624.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe352669-a5d5-460c-b020-77d9cc704624.png)'
- en: 'We saw earlier that CSS can be written in three different ways:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到CSS可以用三种不同的方式编写：
- en: Inside an HTML Tag with a `style` attribute
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在带有`style`属性的HTML标签中
- en: Inside our `<head>` section in a HTML document with the tag `<style>`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在HTML文档的`<head>`部分中，带有`style`属性的HTML标签
- en: CSS code can also be put into an external file
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS代码也可以放在外部文件中
- en: For our own project, we're going to use the third way, as commonly used in the
    web in general, because the CSS can be changed without changing the HTML file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们自己的项目，我们将使用网页中普遍使用的第三种方式，因为CSS可以在不更改HTML文件的情况下进行更改。
- en: 'Let''s create our CSS file that will be used for our general styling. In Atom,
    click File | New File, and save the file with File | Save As. Choose the folder
    `css` and name this file `styles.css`. We have to link this file as we did with
    the `font.css` file we created earlier:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个CSS文件，用于一般的样式。在Atom中，点击文件|新建文件，并将文件保存为文件|另存为。选择`css`文件夹，并将此文件命名为`styles.css`。我们必须像之前创建的`font.css`文件一样链接这个文件：
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we have our `styles.css`, we can get started. But I usually like to
    view both HTML and CSS at the same time. It''s easy to do so; select your `styles.css`,
    then go to View | Panes | Split Right. You now have the file open on two different
    panes. You can close the one on the left:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`styles.css`，我们可以开始了。但我通常喜欢同时查看HTML和CSS。这很容易做到；选择你的`styles.css`，然后转到查看|窗格|右侧拆分。现在你有两个不同窗格中打开的文件。你可以关闭左边的那个：
- en: '![](img/1d1d2304-cd7a-4047-915c-146f2ebf62fd.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d1d2304-cd7a-4047-915c-146f2ebf62fd.png)'
- en: The view split in two in Atom.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Atom中的两个视图拆分。
- en: 'First, we need to target the `header` tag. The `header` tag has no class, but
    we can target an HTML tag with just this tag. In CSS it will be:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定位`header`标签。`header`标签没有类，但我们可以只用这个标签来定位HTML标签。在CSS中，它将是：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will basically target every `<header>` tag in the HTML, so you need to
    be careful about it:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将基本上定位HTML中的每个`<header>`标签，所以你需要小心：
- en: '![](img/39e89a00-64cf-4ca0-9a81-7ef5df63d514.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39e89a00-64cf-4ca0-9a81-7ef5df63d514.png)'
- en: If we take a look closely at our design, we can notice that the header takes
    the full width of the web page, has a height of *70px*, and has a gradient grey
    to a transparent background that lets the image appear behind it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看一下我们的设计，我们会发现页眉占据了整个网页的宽度，高度为*70px*，并且有一个从灰色到透明的渐变背景，让图像出现在其后。
- en: 'To do so we have the CSS property `width`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们有CSS属性`width`：
- en: '[PRE32]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can now add the background gradient. For that, we have the CSS property
    `background-image: linear-gradient`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们可以添加背景渐变。为此，我们有CSS属性`background-image: linear-gradient`：'
- en: '[PRE33]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: To create a gradient with CSS, I often use a generator ([http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/))
    that creates the final code for me.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用CSS创建渐变，我经常使用一个生成器（[http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)），它会为我创建最终的代码。
- en: I also sometimes use the CSS tool provided by Sketch or Photoshop to copy the
    CSS property straight from the design.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时也会使用Sketch或Photoshop提供的CSS工具，直接从设计中复制CSS属性。
- en: 'For this exercise, you can just copy the code I provided:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你可以直接复制我提供的代码：
- en: '[PRE34]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Save both CSS and HTML files and open `index.html` on your browser:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 保存CSS和HTML文件，并在浏览器中打开`index.html`：
- en: '![](img/02519181-8ff7-4219-b23f-6b7046aff2c6.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02519181-8ff7-4219-b23f-6b7046aff2c6.png)'
- en: 'We now have our container, but we still need to stylize our menu. Let''s first
    target our list by its class, `main-nav`. If you remember, to call a class, we
    need to add a dot before the name of the class, like this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了容器，但我们仍然需要为我们的菜单添加样式。让我们首先通过它的类`main-nav`来定位我们的列表。如果你记得，要调用一个类，我们需要在类名前面加一个点，就像这样：
- en: '[PRE35]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now we want to specifically target every `<li>` inside the `<ul>`. To do so,
    we simply have to add `li` after, as we saw in the chapter earlier:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要具体地定位`<ul>`内的每个`<li>`。为了做到这一点，我们只需要在后面添加`li`，就像我们在之前的章节中看到的那样：
- en: '[PRE36]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s first remove the list styling, which is a circle by default. To do that,
    we need to use the CSS property `list-style-type`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先移除列表的样式，它默认是一个圆圈。为了做到这一点，我们需要使用CSS属性`list-style-type`：
- en: '[PRE37]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Let's put `none`, so it will remove all styling in the `li` tag.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们放置`none`，这样它将移除`li`标签中的所有样式。
- en: 'We also have to display the list horizontally instead of vertically. To make
    this happen, we need to use the CSS property `display: inline-block`.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还需要将列表水平显示而不是垂直显示。为了实现这一点，我们需要使用CSS属性 `display: inline-block`。'
- en: 'The CSS property `display: inline-block` will display the list as inline but
    with the ability to set width and height as a block element:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'CSS属性`display: inline-block` 将以内联方式显示列表，但具有设置宽度和高度的块元素的能力：'
- en: '[PRE38]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s save our work and check to see what we have so far:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存我们的工作并检查一下我们目前的进展：
- en: '![](img/1156431d-ae9c-4916-93d2-51a192fe0ed0.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1156431d-ae9c-4916-93d2-51a192fe0ed0.png)'
- en: 'Our goal now is to put the menu right next to the logo. For that, we''ll need
    to make the logo float. As we saw earlier in the CSS chapter, we''ll use the CSS
    property `float: left;` on the logo:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '我们现在的目标是将菜单放在标志旁边。为此，我们需要使标志浮动。正如我们之前在CSS章节中看到的，我们将在标志上使用CSS属性`float: left;`：'
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We now need to display the menu correctly. We''ll first add a height to our
    `main-nav` :'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要正确显示菜单。我们首先给我们的`main-nav`添加一个高度：
- en: '[PRE40]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We also need to make the menu float so the right-hand menu can come on top:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使菜单浮动，以便右侧菜单可以显示在上方：
- en: '[PRE41]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Since all `<ul>` tags have some padding and margin by default, we need to overwrite
    that:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有`<ul>`标签默认具有一些填充和边距，我们需要覆盖它：
- en: '[PRE42]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![](img/f0a6ea9d-540d-4224-bcea-f678c3f80d5d.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0a6ea9d-540d-4224-bcea-f678c3f80d5d.png)'
- en: 'The problem is that we have the menu side by side with the logo, so we need
    to add some padding to the menu:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是我们的菜单与标志并排，所以我们需要为菜单添加一些填充：
- en: '[PRE43]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'But now we have two properties that are overlapping since padding includes
    all paddings such as padding-left. This will still work but it''s bad CSS. To
    write it properly, we can combine and modify the paddings with just one CSS property:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们有两个重叠的属性，因为填充包括所有填充，如填充左侧。这仍然有效，但这是不好的CSS。为了正确编写它，我们可以使用一个CSS属性来组合和修改填充：
- en: '![](img/8e3fbf8f-74db-4d02-be1f-90061813f75a.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e3fbf8f-74db-4d02-be1f-90061813f75a.png)'
- en: This image explains how you can change different paddings with just one property.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片解释了如何使用一个属性改变不同的填充。
- en: 'For our exercise, we will do the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的练习，我们将执行以下操作：
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Our next goal is to make our menu vertically aligned with the logo. To do so,
    we can use a little CSS hack by using line-height, which is used normally to change
    the space between lines on a paragraph. By setting the `line-height` to the height
    of the menu, we''ll make the menu vertically aligned:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个目标是使我们的菜单与标志垂直对齐。为此，我们可以使用一点CSS技巧，通过使用行高，通常用于改变段落中行之间的间距。通过将`line-height`设置为菜单的高度，我们将使菜单垂直对齐：
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now let''s customize the font to the one we installed earlier. Let me show
    you the final CSS so that I can explain line by line what, exactly, it means:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们自定义字体为我们之前安装的字体。让我展示最终的CSS，这样我就可以逐行解释它的含义：
- en: '[PRE46]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'First we need to target the `<a>` tag in our `.main-nav` class. Inside our
    bracket, we''ll have the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定位`.main-nav`类中的`<a>`标签。在括号内，我们将有以下内容：
- en: '`color: white;` will specify the color of the text. You can set this color
    with a HEX code or with the 140 native color CSS support ([https://www.w3schools.com/cssref/css_colors.asp](https://www.w3schools.com/cssref/css_colors.asp)).'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`color: white;` 将指定文本的颜色。您可以使用HEX代码或140种本地颜色CSS支持来设置这种颜色（[https://www.w3schools.com/cssref/css_colors.asp](https://www.w3schools.com/cssref/css_colors.asp)）。'
- en: '`text-decoration: none;` will suppress all decoration on the text. Here we
    want to suppress the underline on every link.'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`text-decoration: none;` 将取消文本上的所有装饰。这里我们想要取消每个链接上的下划线。'
- en: '`font-family: ''built_titling'', Helvetica, sans-serif;` is to specify the
    font we want to display. The following font name will serve if the first one couldn''t
    load.'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`font-family: ''built_titling'', Helvetica, sans-serif;` 用于指定我们想要显示的字体。如果第一个字体无法加载，将使用以下字体名称。'
- en: '`font-weight: 200;` is the level of bold of the font.'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`font-weight: 200;` 是字体的粗细级别。'
- en: '`font-size: 20px;` will be the size of the font in pixels.'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`font-size: 20px;` 将是以像素为单位的字体大小。'
- en: '`letter-spacing:` will indicate the spacing between each character.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`letter-spacing:` 将指示每个字符之间的间距。'
- en: '`padding:` it''s inside-padding as we learned earlier.'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`padding:` 这是我们之前学过的内部填充。'
- en: 'We''re almost done. Let''s save and have a look:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快要完成了。让我们保存并查看一下：
- en: '![](img/02519181-8ff7-4219-b23f-6b7046aff2c6.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02519181-8ff7-4219-b23f-6b7046aff2c6.png)'
- en: We have only the right-hand part to finish, let's get this done!
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只剩下右侧部分要完成，让我们完成它！
- en: 'For this part, we''ll need to make it float on the right. Let''s first target
    this class:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这部分，我们需要使它向右浮动。让我们首先定位这个类：
- en: '[PRE47]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This right nav will follow almost the same properties as the left nav; we''ll
    only change the float to right:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这个右侧导航将几乎与左侧导航具有相同的属性；我们只会将浮动更改为右侧：
- en: '[PRE48]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As you will see, we'll use a lot of copy/paste for coding as a lot of elements
    will use the same properties.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将看到的，我们将在编码中使用大量的复制/粘贴，因为很多元素将使用相同的属性。
- en: But what if we have a lot of selectors that use the same CSS properties? Do
    we have to copy/paste all of them? A good practice in coding is always to simplify
    our code so that it takes less time to load.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们有很多选择器使用相同的CSS属性怎么办？我们需要复制/粘贴所有吗？在编码中的一个好习惯是始终简化我们的代码，以便加载时间更短。
- en: 'In CSS, we can call on multiple selectors and put the same CC properties. To
    do so, we need to separate them with a comma `,`. For our `left-nav` and `right-nav`
    for example, we can do the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，我们可以调用多个选择器并放置相同的CSS属性。为此，我们需要用逗号`,`分隔它们。例如，对于我们的`left-nav`和`right-nav`，我们可以这样做：
- en: '[PRE49]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This will have the same effect as the code we wrote before. And because we
    call `.right-nav` and put the property `float: right;` after, it overwrites the
    previous property, which was `float: left;`. This is a good practice to have when
    coding in CSS.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '这将产生与我们之前编写的代码相同的效果。因为我们调用了`.right-nav`并在之后添加了`float: right;`属性，它会覆盖之前的属性，即`float:
    left;`。这是在CSS中编码时的一个好习惯。'
- en: 'Let''s make the rest of the code with this good practice in mind:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在编写代码时遵循这个好习惯：
- en: '[PRE50]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We now have our header. Let''s save it and have a final look:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的标题。让我们保存它并最后看一下：
- en: '![](img/1ac77da7-5344-4f43-ae36-20f144fc0bcd.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ac77da7-5344-4f43-ae36-20f144fc0bcd.png)'
- en: Fantastic! Lastly, to make our code clean and easy to read, I'll advise putting
    some comments at the beginning and at the end of each section of your code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！最后，为了使我们的代码清晰易读，我建议在代码的每个部分的开头和结尾添加一些注释。
- en: 'This will be the final CSS code for our `HEADER` section:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们`HEADER`部分的最终CSS代码：
- en: '[PRE51]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Adding the hero section
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加英雄部分
- en: After implementing our header, we can now go the next step, which is the hero
    Section. The hero section is, in web design, usually composed with a big image,
    a title, a description, and a **Call to Action** (**CTA**). It serves as an overview
    of the website because it's the first thing the visitor will see.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现我们的标题后，我们现在可以进行下一步，即英雄部分。在网页设计中，英雄部分通常由一个大图像、一个标题、一个描述和一个**行动号召**（**CTA**）组成。它作为网站的概览，因为这是访问者将看到的第一件事情。
- en: 'In our design, we have the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设计中，我们有以下内容：
- en: '![](img/e6c90e0c-69d4-40a2-9121-0600b314cb60.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6c90e0c-69d4-40a2-9121-0600b314cb60.png)'
- en: 'It''s quite simple. It''s composed of a background image, with a gradient overlay
    and some text with a button on the left. If we try to mark out the outline of
    each block, we could have something like this:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。它由一个背景图像、一个渐变叠加和一些文本以及左侧的按钮组成。如果我们试图勾勒出每个块的轮廓，我们可能会得到这样的东西：
- en: '![](img/7f2a1d36-1804-40bc-9f62-55a221471807.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f2a1d36-1804-40bc-9f62-55a221471807.png)'
- en: 'Maybe this can help you visualize what we''re trying to do in HTML/CSS. Let''s
    start with the HTML:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这可以帮助你想象我们在HTML/CSS中要做的事情。让我们从HTML开始：
- en: 'We can start first by creating a section (purple) that will hold everything:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先创建一个将包含所有内容的部分（紫色）：
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We'll add an `id` so it's easier to call upon it later.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个`id`，这样以后调用它会更容易。
- en: 'We now have to create a `container` (fuschia) that will contain all the elements
    inside but also be centered horizontally. For that, we''ll create a `div` with
    the class `container`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个包含所有元素但也水平居中的`container`（紫红色）。为此，我们将创建一个带有`container`类的`div`：
- en: '[PRE53]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Inside we''ll have a block that will contain the title, description, and button,
    which will be left aligned. We can call it `"hero-text"`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 里面我们将有一个块，其中将包含标题、描述和按钮，这些将左对齐。我们可以称之为`"hero-text"`：
- en: '[PRE54]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, let''s add the content inside:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在里面添加内容：
- en: '[PRE55]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As you might have seen, we didn''t add the image in the HTML, because we want
    to add it with CSS. Adding images with CSS allows more flexibility and customization.
    In this case, we want to make it full screen and to cover the background. First,
    let''s call our `#hero` div:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，我们没有在HTML中添加图像，因为我们想用CSS添加它。使用CSS添加图像可以提供更多的灵活性和定制。在这种情况下，我们希望使其全屏并覆盖背景。首先，让我们调用我们的`#hero`
    div：
- en: '[PRE56]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Let''s add the following styling:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加以下样式：
- en: '[PRE57]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Here are some explanations:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些解释：
- en: We first need to set the size of the block. As we want it to be full screen,
    we have to make the width 100 percent and the height 700px, as the dimension is
    the design.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要设置块的大小。因为我们希望它是全屏的，所以我们必须将宽度设为100％，高度设为700px，因为这是设计的尺寸。
- en: With CSS5, we have the ability to add multiple backgrounds. For that, we need
    to separate them with a comma, as shown previously.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSS5，我们有能力添加多个背景。为此，我们需要用逗号分隔它们，就像之前展示的那样。
- en: We use `background-repeat` to make the background not repeat indefinitely as
    per default.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`background-repeat`来使背景不像默认情况下那样无限重复。
- en: '`background-size: cover;` will make the background image stretch following
    the size of the block, here the full screen.'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`background-size: cover;` 将使背景图像根据块的大小（这里是全屏）进行拉伸。'
- en: '`background-position: center;` will always put the background in the center,
    even when resizing.'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`background-position: center;` 将始终将背景放在中心，即使在调整大小时也是如此。'
- en: 'Let''s save our files and see what we get:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们保存我们的文件并看看我们得到了什么：
- en: '![](img/f5fc3b00-ff4e-4029-bab8-03450731a6e8.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5fc3b00-ff4e-4029-bab8-03450731a6e8.png)'
- en: We have our image and gradient; let's now move into our content.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有我们的图片和渐变；现在让我们进入我们的内容。
- en: 'As we said earlier, we need our content to be centered. As you may have spotted,
    our design follows a grid:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，我们需要我们的内容居中。正如你可能已经注意到的，我们的设计遵循一个网格：
- en: '![](img/8c7e7e11-1dc3-4940-a58a-06c2674cb445.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c7e7e11-1dc3-4940-a58a-06c2674cb445.png)'
- en: 'We need to create this container, which has a width of 940px and is centered
    horizontally. For that it''s very simple, all we''ll need to do is:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建这个容器，它的宽度为940px，并且在水平方向上居中。非常简单，我们需要做的就是：
- en: '[PRE58]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Here are some notes:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些注释：
- en: '`max-width: 940px:`: we don''t want the container to be more than `940px`,
    but it can be less than that depending on screen size.'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`max-width: 940px:`：我们不希望容器超过`940px`，但它可以根据屏幕尺寸而小于这个值。'
- en: '`margin: 0 auto;` is a simple way to horizontally center a block element.'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`margin: 0 auto;` 是水平居中块级元素的简单方法。'
- en: 'The next step will be to stylise the content. But, first, we need to analyze
    the design before jumping into the code. When looking at the design, we can see
    that:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是对内容进行样式化。但是，首先，我们需要在跳入代码之前分析设计。观察设计时，我们可以看到：
- en: The hero content needs to be vertically centered from the hero section
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英雄内容需要从英雄部分垂直居中
- en: The hero content needs to be aligned on the left and have a width of 50 percent
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英雄内容需要左对齐，并且宽度为50％
- en: CSS flexbox
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS flexbox
- en: 'To make that happen, we''ll use the new CSS property `display: flex`. CSS flexbox
    is very practical because it allows you to position element very easily. Centering,
    ordering, and aligning is made very easy with flexbox. If you can handle this
    new property, I guarantee you''ll be a killer in CSS.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '为了实现这一点，我们将使用新的CSS属性`display: flex`。CSS flexbox非常实用，因为它可以让你非常容易地定位元素。使用flexbox可以非常轻松地实现居中、排序和对齐。如果你能掌握这个新属性，我保证你会成为CSS方面的高手。'
- en: 'In our case, we want our `.container` to be centered vertically. To do that,
    we''ll target the class and add these properties:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们希望我们的`.container`在垂直方向上居中。为了做到这一点，我们将针对这个类并添加这些属性：
- en: '[PRE59]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'By adding `#hero` before `.container`, we''re targeting only elements with
    the class `.container` inside `#hero`. We don''t want all `.container` to have
    the same properties:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`.container`之前添加`#hero`，我们只针对`#hero`内部的`.container`元素。我们不希望所有`.container`具有相同的属性：
- en: '`display: flex;` has to be set on the parent element.'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`display: flex;`必须设置在父元素上。'
- en: '`align-items: center;` will vertically align and center all elements inside
    this element. Magic!'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`align-items: center;`将垂直对齐并居中此元素内的所有元素。神奇！'
- en: The `height` needs to be set so you can align the elements in the middle.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要设置`height`以便您可以将元素垂直对齐。
- en: CSS flexbox has very powerful properties. We could have done the entire website
    with flexbox properties, but for you to learn all the possibilities, we had to
    go through all the steps.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: CSS flexbox具有非常强大的属性。我们可以使用flexbox属性来完成整个网站，但为了让您了解所有可能性，我们必须经历所有步骤。
- en: 'Let''s continue with our text styling:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行文本样式设置：
- en: '[PRE60]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We set this width because we don''t want the text to go all the way to the
    right, so we set the max-width to half of the `.container` ''s `max-width`. Continue
    to follow our design:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置这个宽度，因为我们不希望文本一直延伸到右边，所以我们将最大宽度设置为`.container`的`max-width`的一半。继续遵循我们的设计：
- en: '[PRE61]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, we have our title:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有我们的标题：
- en: '[PRE62]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Lastly, we have our button:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们的按钮：
- en: '[PRE63]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We use `display: inline-block;` so we can use the button as an inline element
    but with the characteristic of a block element (width and height). `border` and
    `outline` are set to `none` by default. Every button has a `border` and `outline`.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用`display: inline-block;`，这样我们就可以将按钮用作内联元素，但具有块元素（宽度和高度）的特性。默认情况下，`border`和`outline`都设置为`none`。每个按钮都有一个`border`和`outline`。'
- en: 'Let''s see what we have:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们有什么：
- en: '![](img/f1a91dad-7393-4be9-91a8-3edca345130b.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1a91dad-7393-4be9-91a8-3edca345130b.png)'
- en: The website is looking great, but we have some annoying margins at the top.
    To fix this, we need to use the CSS property `"position"`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 网站看起来很棒，但顶部有一些讨厌的边距。为了解决这个问题，我们需要使用CSS属性“position”。
- en: Positioning in CSS
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS中的定位
- en: 'In CSS, there are five different position values:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，有五种不同的定位值：
- en: Static
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态
- en: Relative
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对的
- en: Fixed
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定的
- en: Absolute
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对
- en: Sticky
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粘性
- en: Position static
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态位置
- en: They all have different usages. All HTML elements are positioned static by default.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都有不同的用途。所有HTML元素默认都是静态定位的。
- en: Position relative
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相对定位
- en: An element with the position relative is positioned relatively to its normal
    position. You adjust the positioning by changing its left, top, right, or bottom
    position.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 具有相对位置的元素相对于其正常位置进行定位。您可以通过更改其左、上、右或下位置来调整定位。
- en: 'For example:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE64]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Check the following diagram for better understanding:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下图表以更好地理解：
- en: '![](img/b852641e-891e-4059-9f3a-d24f9c0bdd94.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b852641e-891e-4059-9f3a-d24f9c0bdd94.png)'
- en: Position absolute
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绝对位置
- en: An element with the position absolute will be positioned next to its nearest
    positioned parent, which means any element with a position that expects position
    static. If this element has no parent, it will be positioned to the viewport itself.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 具有绝对位置的元素将被放置在其最近的定位父元素旁边，这意味着任何期望静态位置的位置元素。如果此元素没有父元素，则将定位到视口本身。
- en: A positioned absolute element will be placed over the parent element.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对定位的元素将放置在父元素之上。
- en: '![](img/3f0a049e-1171-4be2-8eee-9ee152b22e6d.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f0a049e-1171-4be2-8eee-9ee152b22e6d.png)'
- en: Position fixed
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定位置
- en: 'An element with the position fixed will act as a position absolute but only
    with the viewport itself. It will stay in the same position even if the page is
    scrolled:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 具有固定位置的元素将作为绝对位置，但仅在视口本身上。即使页面滚动，它也将保持在相同的位置：
- en: '![](img/8e21ca28-321e-4146-bffc-735c2f73e563.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e21ca28-321e-4146-bffc-735c2f73e563.png)'
- en: Position sticky
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粘性位置
- en: An element with the position sticky is positioned based on the user's scroll
    position.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 具有粘性位置的元素是基于用户的滚动位置进行定位的。
- en: It's not fully supported in every browser, however, so we will not use it in
    this exercise.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个浏览器中并不完全支持，因此我们在这个练习中不会使用它。
- en: Now that we understand the usage of a position in CSS, we need to make the header
    superimposed on to the hero section. To do that, we need to make the header position
    absolute. As the header has no parent element, it will be positioned on the viewport
    itself.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了CSS中位置的用法，我们需要使标题叠加到英雄部分。为此，我们需要使标题位置绝对。由于标题没有父元素，它将定位在视口本身上。
- en: 'Let''s go back to the header section and add the position: absolute property:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们回到标题部分并添加`position: absolute`属性：'
- en: '[PRE65]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Let''s save and see what we have:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并看看我们有什么：
- en: '![](img/5887efb0-00d0-4303-9696-aba69f8e6807.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5887efb0-00d0-4303-9696-aba69f8e6807.png)'
- en: We have now our first section and header well implemented. Let's continue to
    the next section.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了我们的第一部分和标题的良好实现。让我们继续到下一部分。
- en: Blog section
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 博客部分
- en: 'First, as we always do (and you need to get into this habit), we need to analyze
    the design and see how is it composed:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，就像我们总是做的一样（你需要养成这个习惯），我们需要分析设计并看看它是如何组成的：
- en: '![](img/d7b7385e-9f60-4fe8-88ff-66f9d87d9628.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7b7385e-9f60-4fe8-88ff-66f9d87d9628.png)'
- en: As we can see, the Blog section is composed of a header and six Blog posts.
    There are two rows of three posts each, with an equal width of one-third.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，博客部分由标题和六篇博客文章组成。每行有三篇文章，宽度均为三分之一。
- en: 'We know how to design this with a `float` and the `display: inline-block` properties.
    Let''s try to build it with CSS flexbox.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '我们知道如何用`float`和`display: inline-block`属性来设计这个。让我们尝试用CSS flexbox来构建它。'
- en: 'Let''s first add the HTML:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加HTML：
- en: '[PRE66]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Here are some explanations:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些解释：
- en: We need to create another `section id "blog"`
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建另一个`section id "blog"`
- en: We need to reuse the class `container` to have a container that follows the
    same width
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要重用类`container`来拥有一个遵循相同宽度的容器
- en: We add an `<h2>` since it's not as important as the hero title
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个`<h2>`，因为它不像主标题那么重要
- en: We add a `<b>` tag to make the word Blog bold
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个`<b>`标签来使单词Blog加粗
- en: 'Let''s add our `blog` posts section now:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加我们的`blog`帖子部分：
- en: '[PRE67]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Here is what we did:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们做的事情：
- en: We added a `div` with the class `"blog-posts"` that contains all the Blog posts.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个带有类`"blog-posts"`的`div`，其中包含了所有的博客帖子。
- en: Inside, we create a div with the class `"blog-post"`, which will be a single
    blog post.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部，我们创建了一个带有类`"blog-post"`的`div`，它将是一个单独的博客帖子。
- en: Inside this `div`, we added the image with the `img` tag and `srcset` we learned
    earlier.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`div`里，我们添加了一个带有`img`标签和我们之前学到的`srcset`的图片。
- en: We also added a p tag with a class `"blog-post-date"` for the Blog post date.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还为博客帖子日期添加了一个带有类`"blog-post-date"`的p标签。
- en: We added a `<h3>` without class because it's the only `h3` element, so we can
    target it easily with CSS.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了一个没有类的`<h3>`，因为它是唯一的`h3`元素，所以我们可以很容易地用CSS来定位它。
- en: Lastly, we added the `description` text with a link inside.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们添加了带有链接的`description`文本。
- en: This represents a single Blog post, so to make six of them, we simply need to
    duplicate the `blog` post element six times.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表一个单独的博客帖子，所以要创建六个，我们只需要复制`blog`帖子元素六次。
- en: 'Let''s also add another `div` to make our Show More button:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也添加另一个`div`来制作我们的“显示更多”按钮：
- en: '[PRE68]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In the end, you should have something like this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你应该有这样的东西：
- en: '[PRE69]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Let''s head to the CSS now! We will style the title first:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转到CSS！我们将首先为标题添加样式：
- en: '[PRE70]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'For the `blog-posts` container, we''ll do as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`blog-posts`容器，我们将按照以下方式进行：
- en: '[PRE71]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '`.blog-posts` is the parent element and `.blog-post` is the child element.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`.blog-posts`是父元素，`.blog-post`是子元素。'
- en: 'Here is some information regarding `.blog-posts`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`.blog-posts`的一些信息：
- en: '`display: flex;` always needs to be added to the parent element.'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`display: flex;`总是需要添加到父元素。'
- en: '`flex-direction: row;` will direct the child elements as a row. You can put
    it as a column if you want.'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`flex-direction: row;`将把子元素定向为一行。如果你想的话，你也可以把它放在一列上。'
- en: '`flex-wrap: wrap;` will make the child elements wrap onto multiple lines, from
    top to bottom. By default, it will try to fit every element on to one line.'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`flex-wrap: wrap;`将使子元素换行，从上到下。默认情况下，它会尝试将每个元素放在一行上。'
- en: '`margin-top: 50px;` adds a bit of margin on the top.'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`margin-top: 50px;`在顶部添加了一点边距。'
- en: 'Here is some information regarding `.blog-post`:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`.blog-post`的一些信息：
- en: '`width: 33.33%;` sets the width as one-third of the total width'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`width: 33.33%;`将宽度设置为总宽度的三分之一'
- en: '`padding: 0 5px;` adds some padding on the right and left sides'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`padding: 0 5px;`在右侧和左侧添加一些填充'
- en: '`box-sizing: border-box;`: as we saw earlier, this makes the padding and margin
    properties apply inside the box instead of outside'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`box-sizing: border-box;`: 正如我们之前看到的，这使得填充和边距属性应用在盒子内部而不是外部'
- en: 'So far, we have the right layout:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了正确的布局：
- en: '![](img/3db24515-d18f-4681-9653-3abe48a7f65c.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3db24515-d18f-4681-9653-3abe48a7f65c.png)'
- en: 'Let''s style the content inside a Blog post:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为博客帖子内部的内容添加样式：
- en: '[PRE72]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We use `width: 100%;` as we want our images to take `100%` of the `width`.
    The rest is pretty basic CSS, just to follow the design:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用`width: 100%;`因为我们希望我们的图片占据整个宽度。其余的都是相当基本的CSS，只是为了遵循设计：'
- en: '[PRE73]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Here''s what we end up with:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们最终得到的东西：
- en: '![](img/a1977518-badb-4ddc-bda9-d4834385a659.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1977518-badb-4ddc-bda9-d4834385a659.png)'
- en: 'It''s looking quite similar to me now. The last part is the Show More button.
    A simple hack would be to add a `text-align: center` to the parent element so
    it will make the button aligned in the middle:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '现在看起来很相似了。最后一部分是“显示更多”按钮。一个简单的方法是在父元素中添加`text-align: center`，这样它就会使按钮在中间对齐：'
- en: '[PRE74]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'For the last touch, I''ll add some margins at the bottom to add a bit of white
    space:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，我会在底部添加一些边距，增加一些空白：
- en: '[PRE75]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Our CSS for the `blog` section:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的博客部分的CSS：
- en: '[PRE76]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Creating the ABOUT US section
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建关于我们部分
- en: 'This section is not very complex. Let''s check out the design:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分并不是很复杂。让我们来看看设计：
- en: '![](img/590a2346-7a37-48e2-9527-1231bbdbe7d1.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](img/590a2346-7a37-48e2-9527-1231bbdbe7d1.png)'
- en: 'If we use our block analyzer, we can have something such as this:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用我们的块分析器，我们可以得到这样的东西：
- en: '![](img/c9cc4042-4633-4ec2-8229-6d62a1f3fe41.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9cc4042-4633-4ec2-8229-6d62a1f3fe41.png)'
- en: 'What we need to do:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的事情：
- en: Make the content vertically centered
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使内容垂直居中
- en: Align the text on the left
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文本对齐到左边
- en: Have a background image covering the entire section
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个覆盖整个部分的背景图片
- en: The best way to align elements vertically is, as we saw earlier, to use CSS
    flexbox.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，垂直对齐元素的最佳方法是使用CSS flexbox。
- en: 'Let''s create our HTML. After our `blog` section, we''re going to add our `about-us`
    section:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的HTML。在我们的`blog`部分之后，我们将添加我们的`about-us`部分：
- en: '[PRE77]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Inside this section, as usual, we''re going to add our `container`:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分里，和往常一样，我们要添加我们的`container`：
- en: '[PRE78]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'And inside our container, we''ll create our two blocks that will contain our
    big title and our description:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的容器里，我们将创建两个块，用来包含我们的大标题和描述：
- en: '[PRE79]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Let''s save and jump into our CSS file:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并跳转到我们的CSS文件：
- en: 'First, target our about section ID:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，定位我们的关于部分ID：
- en: '[PRE80]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Add the background image for our section:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的部分添加背景图片：
- en: '[PRE81]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: We use the same CSS properties that we used previously in our hero section.
    Some padding is added, to remain similar to the design. We set the color at the
    parent level so we don't have to set the color in each child element.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了之前在我们的主标题部分使用的相同的CSS属性。添加了一些填充，以保持与设计的一致性。我们在父级设置了颜色，这样我们就不必在每个子元素中设置颜色。
- en: 'Set flexbox in the `container`:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`container`中设置flexbox：
- en: '[PRE82]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '`align-items: top;` will align the text from the `top`, as in the design.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`align-items: top;`将使文本从顶部对齐，就像设计中的一样。'
- en: 'We now have to set the `width` of the block inside the container; otherwise,
    the flexbox will not work:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须设置容器内块的`width`；否则，flexbox将无法工作：
- en: '[PRE83]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Let''s save and check the design:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并检查设计：
- en: '![](img/4fbee7a3-9aa9-4eb7-905e-af77a48b2a09.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fbee7a3-9aa9-4eb7-905e-af77a48b2a09.png)'
- en: So far, so good; we're heading the right way. Let's add some styles for our
    title and description.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好；我们正在朝着正确的方向前进。让我们为我们的标题和描述添加一些样式。
- en: 'Add styling to our heading:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的标题添加样式：
- en: '[PRE84]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '`margin: 0` had to be added by default, as every `h` title has a margin following
    the size of the text. Let''s check again:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`margin: 0`必须默认添加，因为每个`h`标题都有一个跟随文本大小的边距。让我们再次检查：'
- en: '![](img/40546356-f808-41e7-9ec9-e100554383f0.png)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40546356-f808-41e7-9ec9-e100554383f0.png)'
- en: 'We''re pretty close, but we still need to be more precise in our implementation:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经非常接近了，但我们仍然需要在实现上更加精确：
- en: '![](img/89732d20-6250-465c-919e-bc09d4db7cf7.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89732d20-6250-465c-919e-bc09d4db7cf7.png)'
- en: We can see in our design that we have a few line breaks and a red line at the
    bottom of the title.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在我们的设计中，标题底部有几个换行和一条红线。
- en: 'To do that, we''ll need to add some break lines with HTML. To add a break line
    with HTML, we can use the tag `<br />` in any text block. So in our title, we''ll
    add a `<br />` tag after `The` and `love`:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要在HTML中添加一些换行。要在HTML中添加换行，我们可以在任何文本块中使用标签`<br />`。所以在我们的标题中，我们会在`The`和`love`后面添加一个`<br
    />`标签：
- en: '[PRE85]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Now, to add the red line, we can create a `<div>` and customize it to be the
    shape and colors we want. But it will add something useless in the HTML.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要添加红线，我们可以创建一个`<div>`并自定义它为我们想要的形状和颜色。但这将在HTML中添加一些无用的东西。
- en: 'A better way to do it is to use the `::before/:: after` selector in CSS. This
    selector can add some text before or after an HTML element.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '更好的方法是在CSS中使用`::before/:: after`选择器。此选择器可以在HTML元素之前或之后添加一些文本。'
- en: It's primarily used to add extra text after a paragraph, but we'll use it to
    add this red line.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 它主要用于在段落后添加额外的文本，但我们将用它来添加这条红线。
- en: 'To do so, we have to select the `h3` element and add `::after`:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们必须选择`h3`元素并添加`::after`：
- en: '[PRE86]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'For every `::after` or `::before` selection, we need to add the CSS property
    `content`:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个`::after`或`::before`选择，我们需要添加CSS属性`content`：
- en: '[PRE87]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'We''ll leave the value blank as we don''t want any text. Continue:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把值留空，因为我们不想要任何文本。继续：
- en: '[PRE88]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'What we did:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做了什么：
- en: We set the `display` as `block` as it's inline by default
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`display`设置为`block`，因为默认情况下它是内联的
- en: We added the red background and the dimension
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了红色背景和尺寸
- en: We added a margin to have some space between the text and the red line
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了一些边距，以便文本和红线之间有一些空间
- en: 'We''re almost set. We have a final touch to add to the title of our description:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了。我们还需要为描述的标题添加最后的修饰：
- en: '[PRE89]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '![](img/c33e957c-a5da-4558-bf22-394ca63ceaef.png)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c33e957c-a5da-4558-bf22-394ca63ceaef.png)'
- en: 'The final CSS code for the `ABOUT US` section is as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们部分的最终CSS代码如下：
- en: '[PRE90]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Adding the Partner section
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加合作伙伴部分
- en: Let's go through this section efficiently, as we did with the last one.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像上一个部分一样高效地进行这一部分。
- en: 'Look at the following:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下内容：
- en: '![](img/ddb03355-ba38-4afb-9fb4-328fa7f85701.png)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddb03355-ba38-4afb-9fb4-328fa7f85701.png)'
- en: This section contains only a title, two images, text, and a button. We'll need
    to create a block inside our usual container (as shown in orange).
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分仅包含一个标题、两个图像、文本和一个按钮。我们需要在我们通常的容器内创建一个块（如橙色所示）。
- en: 'HTML:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE91]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Start with our `section` tag and `id`, which we name `partners`:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的`section`标签和`id`开始，我们将其命名为`partners`：
- en: '[PRE92]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'As usual, we''ll need our div `"container"` to maintain our structure:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们需要我们的`div "container"`来维护我们的结构：
- en: '[PRE93]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Inside, we create another container, `"partners-container"`:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，我们创建另一个容器，`"partners-container"`：
- en: '[PRE94]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Inside our `"partners-container"` `div` we do the following:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`"partners-container"` `div`内部，我们执行以下操作：
- en: We put our title into an `h2`
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将我们的标题放入`h2`中
- en: We also created another div `"partners-inner"` to hold our two partners images
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还创建了另一个`"partners-inner"` div来容纳我们的两个合作伙伴图像
- en: Inside this `partner-inners div`, we have our single partner `div` with an image
    and a text each
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个`partner-inners div`内部，我们有我们的单个合作伙伴`div`，每个都有一个图像和一个文本
- en: We also added a button, outside of `partners-inner` but inside `"partners-container"`
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还添加了一个按钮，放在`partners-inner`之外，但在`"partners-container"`内
- en: 'Our CSS will look like this:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的CSS将如下所示：
- en: '[PRE95]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Here are some explanation of the code:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的一些解释：
- en: The background is `black;` since in the design, we have a black background
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 背景是`black;`，因为在设计中，我们有一个黑色背景
- en: We can put the `color:white;` in the parent element so all elements inside will
    have the same property
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在父元素中放置`color:white;`，这样所有内部元素都将具有相同的属性
- en: We can do the same for `text-align:center;`
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以对`text-align:center;`做同样的事情
- en: We also added some padding to the top and bottom
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还在顶部和底部添加了一些填充
- en: '[PRE96]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'We added a `max-width` and `margin: 0 auto;` to center our `partners-container`.
    To align anything with the `margin: auto` method, you always need to define a
    width to the element:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '我们添加了`max-width`和`margin: 0 auto;`来使我们的`partners-container`居中。要使用`margin: auto`方法对齐任何内容，您总是需要为元素定义一个宽度：'
- en: '[PRE97]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Also, add the following CSS:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 还要添加以下CSS：
- en: '[PRE98]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: To be able to use `display:flex;`, we'll need to set the `width` for the child
    elements.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用`display:flex;`，我们需要为子元素设置`width`。
- en: 'You''re done for the PARTNERS section; let''s save it and take a look:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: PARTNERS部分完成了；让我们保存并查看一下：
- en: '![](img/6c92deaa-26fe-4ed7-bad4-31f10c32850f.png)'
  id: totrans-491
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c92deaa-26fe-4ed7-bad4-31f10c32850f.png)'
- en: 'Our final CSS code for the PARTNERS section is as follows:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们PARTNERS部分的最终CSS代码如下：
- en: '[PRE99]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: All done! Let's move to the final step, the footer!
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 全部完成了！让我们进入最后一步，页脚！
- en: Adding the footer section
  id: totrans-495
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加页脚部分
- en: In this section, we will be working on the footer section.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将致力于页脚部分。
- en: '![](img/2de61400-8d29-459c-875c-1dd4f8879cf3.png)'
  id: totrans-497
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2de61400-8d29-459c-875c-1dd4f8879cf3.png)'
- en: 'The footer is basically the same as the header, so to facilitate the coding,
    we will simply copy and paste the code from our header and change a few things:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚基本上与页眉相同，因此为了简化编码，我们将简单地复制并粘贴来自我们页眉的代码，并更改一些内容：
- en: '[PRE100]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Here are the things that we need to change:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们需要更改的内容：
- en: Change the `<header>` tag to a `<footer>` tag
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`<header>`标签更改为`<footer>`标签
- en: Add a `.container` `div` inside our footer as it follows the grid
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的页脚内添加一个`.container` `div`，如下所示
- en: Change our logo image to `"logo-footer.png"`
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的标志图片更改为“logo-footer.png”。
- en: 'This is the final HTML:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的HTML：
- en: '[PRE101]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Let''s jump to the CSS. We''re first going to target our `footer`:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳到CSS。我们首先要定位我们的`footer`：
- en: '[PRE102]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: We're calling the `footer` without any dot or `#` because we're calling the
    tag by itself. It also means that every other `footer` tag will be selected. So,
    we need to make sure that we'll only select the tag `footer` for the `footer`
    element.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`footer`而不带任何点或`#`，因为我们单独调用标签。这也意味着将选择每个其他`footer`标签。因此，我们需要确保只选择`footer`元素的标签。
- en: We add a background black like it is in the design but also add a `color:white`
    at the parent level. We're lazy, we don't want to add every time.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个黑色的背景，就像设计中一样，但也在父级别添加了`color:white`。我们很懒，不想每次都添加。
- en: '[PRE103]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: This is getting interesting; we now have targeted the `.container` inside the
    `footer` and changed its property to `flex`, so we can display those elements
    inline.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 这变得很有趣；我们现在已经针对`footer`内的`.container`进行了定位，并将其属性更改为`flex`，这样我们就可以将这些元素显示为内联。
- en: We're not going to specify the width for each child element because we want
    them to take as much space as they would naturally take.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会为每个子元素指定宽度，因为我们希望它们占据自然的空间。
- en: 'For the final touch, we''ll add some padding to the logo to align it with the
    menu:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，我们将为标志添加一些填充以使其与菜单对齐：
- en: '[PRE104]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'We also took some styling from the `header` and copied it here:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还从`header`中获取了一些样式，并将其复制到这里：
- en: '![](img/d49c8bbc-ac34-49c2-8bb0-5092d4b47df9.png)'
  id: totrans-516
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d49c8bbc-ac34-49c2-8bb0-5092d4b47df9.png)'
- en: We have our footer done now!
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了我们的页脚！
- en: 'Here''s the final CSS code:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最终的CSS代码：
- en: '[PRE105]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Summary
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To summarize what we've done so far: We've created one web page from scratch
    also used HTML Boilerplate to kick-start our project. We've learned plenty of
    CSS techniques, and in particular about CSS flexbox, which can be very useful
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，我们所做的总结：我们从头开始创建了一个网页，还使用了HTML Boilerplate来启动我们的项目。我们学到了很多CSS技巧，特别是关于CSS
    flexbox，这可能非常有用。
- en: For the next chapter, we'll tackle the responsive side of the CSS and also add
    some interactivity to our website. Let's jump into it!
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将解决CSS的响应式方面，并为我们的网站添加一些交互性。让我们开始吧！
