- en: Adding Interaction and Dynamic Content
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加交互和动态内容
- en: I find this part of building a website to be the most fun and enjoyable. Adding
    interaction and dynamic content will bring life to our website and add a personal
    touch to it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现网站构建的这一部分是最有趣和令人愉快的。添加交互和动态内容将为我们的网站带来生机，并为其增添个人风格。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Start by learning the basics of **pseudo-class** in CSS, with a few examples
    of hover and active states
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先学习CSS中**伪类**的基础知识，以及一些悬停和激活状态的示例
- en: Learn how to create a CSS animation from scratch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何从头开始创建CSS动画
- en: Add some dynamic content by connecting to an API and importing some content
    to display on our website
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接到API并导入一些内容来添加一些动态内容以在我们的网站上显示
- en: Let's get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: CSS pseudo-classes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS伪类
- en: A pseudo-class is used to define a special state of an element. For example,
    when you hover or when you click on a button, a state can be activated.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 伪类用于定义元素的特殊状态。例如，当您悬停或单击按钮时，可以激活一个状态。
- en: 'We''re going to learn two easy pseudo-classes for the moment, the most common
    ones. You can easily add and activate other pseudo-classes when you know how to
    use them:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习两个简单的伪类，最常见的伪类。当您知道如何使用它们时，您可以轻松地添加和激活其他伪类：
- en: '![](img/86da0197-77e2-406d-9e26-e0d8fed74f45.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86da0197-77e2-406d-9e26-e0d8fed74f45.png)'
- en: Different pseudo-classes
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的伪类
- en: The two pseudo-classes are `hover` and `active`. The `hover` state is used when
    you hover over an element with the mouse. It's useful to show that the element
    is clickable. The `active` state, on the other hand, is used when you click on
    an element.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个伪类是`hover`和`active`。当您用鼠标悬停在元素上时，将使用`hover`状态。这对于显示元素是可点击的很有用。另一方面，当您单击元素时，将使用`active`状态。
- en: 'To use these pseudo-classes, you simply have to call them with a colon `:`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些伪类，您只需用冒号`:`调用它们：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For the first example, we'll add some styling when hovering over the links in
    the menu. We want to add an underline to the link when hovering it. To do that,
    it will be better for us to be able to target every single `<a>` with a class.
    But if we look at our HTML, we have many different classes for each navigation.
    What we'll do is add a common class to each `nav` so we can call it with CSS easily.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个示例，当悬停在菜单中的链接上时，我们将添加一些样式。我们希望在悬停时为链接添加下划线。为了做到这一点，最好能够轻松地用CSS来定位每一个`<a>`。但是，如果我们查看我们的HTML，我们会发现每个导航都有许多不同的类。我们要做的是为每个`nav`添加一个共同的类，这样我们就可以轻松地用CSS来调用它。
- en: 'We have the class `.main-nav` and `.right-nav` on the header and footer. What
    we''ll do is add a common class `.nav` to each of those classes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在标题和页脚上有类`.main-nav`和`.right-nav`。我们要做的是为这些类中的每一个添加一个共同的类`.nav`：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we have to target the link inside the `nav`. The link is the element `<a>`
    as we saw earlier. To target it, we will call in CSS as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须定位`nav`内的链接。链接是元素`<a>`，正如我们之前所看到的。为了定位它，我们将在CSS中调用如下：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will target every `<a>` in every `<li>` that is a child of every `.nav`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将定位每个`.nav`的每个`.li`的每个子元素中的每个`<a>`。
- en: 'Let''s add the pseudo-class `:hover `:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加伪类`:hover`：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To add an underline under a link, we can use the CSS property `text-decoration:underline;`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在链接下方添加下划线，我们可以使用CSS属性`text-decoration:underline;`：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now let's add some styling for the button as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们也为按钮添加一些样式。
- en: 'For every button, we have the class `.btn-primary`, so, with the same process
    as before, we''ll add the pseudo-class `hover`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个按钮，我们都有类`.btn-primary`，所以，与之前的过程相同，我们将添加伪类`hover`：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'What we did here is to change the background color of the button when hovering
    over it. Let''s now add an `active` state:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是在悬停在按钮上时改变按钮的背景颜色。现在让我们添加一个`active`状态：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will add an inner-shadow to the button when clicking on it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在单击按钮时向按钮添加内阴影。
- en: 'To add an extra touch, we can add a `transition` to make the action smoother.
    Don''t forget, a `transition` has to be added in the normal state, not on the
    pseudo-classes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加一些额外的效果，我们可以添加一个`transition`来使动作更加平滑。不要忘记，`transition`必须添加在正常状态下，而不是在伪类上：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Voila! Pretty easy. There are plenty of pseudo-classes in CSS. We'll go through
    some more but you can already have a play around. Here's a list of pseudo-classes
    in CSS: [https://www.w3schools.com/css/css_pseudo_classes.asp](https://www.w3schools.com/css/css_pseudo_classes.asp).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大功告成！相当容易。CSS中有很多伪类。我们将继续学习更多，但您现在可以尝试一下。以下是CSS中的伪类列表：[https://www.w3schools.com/css/css_pseudo_classes.asp](https://www.w3schools.com/css/css_pseudo_classes.asp)。
- en: The next step is to build a sticky navigation! We'll combine some jQuery and
    CSS and build a navigation that sticks to the top when the user scrolls the page.
    Exciting times!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是构建一个固定导航！我们将结合一些jQuery和CSS来构建一个导航，当用户滚动页面时，它将固定在顶部。令人兴奋的时刻！
- en: Sticky navigation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定导航
- en: 'What we want to do is make the navigation stick to the top when we scroll passed
    the Blog section, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的是在滚动到博客部分时使导航固定在顶部，如下面的截图所示：
- en: '![](img/b28f0318-d69f-4438-a1a8-666bd83e7478.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b28f0318-d69f-4438-a1a8-666bd83e7478.png)'
- en: The sticky navigation we want to build.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要构建的固定导航。
- en: 'To make this happen, we''ll add an extra class with jQuery on the header. This
    extra class will make the navigation stick to the top and make the navigation
    background dark. Let''s first create this extra class:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将在标题上添加一个额外的类。这个额外的类将使导航固定在顶部，并使导航背景变暗。让我们首先创建这个额外的类：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to be careful here as we didn't separate the class with space, which
    means it's when the header has also the class `sticky`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要小心，因为我们没有用空格分隔类，这意味着当标题也有类`sticky`时。
- en: 'To this class, we will add the following properties:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个类，我们将添加以下属性：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s break that down:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下：
- en: 'We use `position: fixed;` as we want to make the navigation stick to the top.
    `position: fixed` will position the element relative to the browser window.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '我们使用`position: fixed;`，因为我们希望使导航固定在顶部。`position: fixed`将使元素相对于浏览器窗口定位。'
- en: '`top: 0;` tells us it will stick to the top.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top: 0;`告诉我们它会固定在顶部。'
- en: '`background-color:` sets a solid background color.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background-color:` 设置了一个纯色背景。'
- en: '`background-image: none;` removes the gradient.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background-image: none;`移除了渐变。'
- en: '![](img/67776c8d-fb7a-41ee-b957-0ecda1ee39d5.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67776c8d-fb7a-41ee-b957-0ecda1ee39d5.png)'
- en: Sticky header on the Blog section
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 博客部分的粘性页眉
- en: We have our CSS class `.sticky` ready to go. Now we have to create our jQuery
    function to make this happen.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有我们的CSS类`.sticky`准备就绪。现在我们需要创建我们的jQuery函数来实现这一点。
- en: 'JS Plugin: Waypoints'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JS插件：Waypoints
- en: 'We''re going to use a plugin that triggers an action when scrolled to an element.
    The plugin is called *Waypoints* and can be downloaded from this link: [http://imakewebthings.com/waypoints/](http://imakewebthings.com/waypoints/):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个插件，当滚动到一个元素时触发一个动作。该插件称为*Waypoints*，可以从此链接下载：[http://imakewebthings.com/waypoints/](http://imakewebthings.com/waypoints/)：
- en: '![](img/328c157e-24c0-4de0-ba00-c3ced86c96de.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/328c157e-24c0-4de0-ba00-c3ced86c96de.png)'
- en: Waypoints website.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Waypoints网站。
- en: Simply click on the Download button to download the files. In the files that
    you have downloaded, only one file will be necessary. Go to the `lib` folder and
    look for `jquery.waypoints.min`. Copy this file and paste it to our `Web Project`
    folder, specifically in our `js` | `vendor` folder.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 只需点击“下载”按钮即可下载文件。在您下载的文件中，只有一个文件是必需的。转到`lib`文件夹，找到`jquery.waypoints.min`。复制此文件并粘贴到我们的`Web
    Project`文件夹中，具体来说是在我们的`js` | `vendor`文件夹中。
- en: 'Once pasted, we need to link it to our HTML page. To do so, go to our HTML
    file before the closing tag `</body>`. You''ll see a bunch of scripts that were
    already linked previously for our jQuery file. Before the last file `main.js`,
    simply add the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 粘贴后，我们需要将其链接到我们的HTML页面。为此，请转到我们的HTML文件，位于结束标签`</body>`之前。您会看到一堆脚本已经链接到我们的jQuery文件之前。在最后一个文件`main.js`之前，只需添加以下内容：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`main.js` should be the last file in the list because it contains all our personal
    JS functions and needs to read by the browser last.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.js`应该是列表中的最后一个文件，因为它包含了所有我们个人的JS函数，并且需要在浏览器最后读取。'
- en: Every plugin has a different way to be used. The best way is to read the document
    provided by the author of the plugin. Here, I'll explain to you the easiest way
    to use this plugin.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插件都有不同的使用方式。最好的方法是阅读插件作者提供的文档。在这里，我将向您解释使用此插件的最简单方法。
- en: 'To use `.waypoint` with jQuery, we can call it with the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`.waypoint`与jQuery，我们可以使用以下方式调用它：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here are some explanations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些解释：
- en: '`elementToTrigger` will be the element we want the plugin to watch and trigger
    the action when the user scroll passes the element. In this case, it will be `#blog`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elementToTrigger`将是我们希望插件监视并在用户滚动通过该元素时触发动作的元素。在这种情况下，它将是`#blog`。'
- en: '`direction`: this argument will serve to detect whether the user is scrolling
    down or up the page.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`direction`：此参数将用于检测用户是向下滚动还是向上滚动页面。'
- en: 'Let''s head to our `main.js` and create our own `JS code`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到我们的`main.js`并创建我们自己的`JS代码`：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now what we want is to do an action when the user scrolls `down` and scrolls
    past the Blog section, but also do another action when the user scrolls up and
    leaves the blog section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要的是，当用户向下滚动并滚过博客部分时执行一个动作，但当用户向上滚动并离开博客部分时执行另一个动作。
- en: 'To do that, we''ll need to use a condition, as we saw earlier:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要使用一个条件，就像我们之前看到的那样：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`direction == ''down''` means the direction of the scroll is equal to `down`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`direction == ''down''`表示滚动的方向等于`down`。'
- en: 'Now what we want to do is to add the class `sticky` when the user scrolls `down` and
    passes the blog section, and remove the same class when the latter leaves it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做的是在用户向下滚动并经过博客部分时添加类`sticky`，并在后者离开时删除相同的类：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s save and see how it works:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并看看它是如何工作的：
- en: '![](img/8529c335-dcb1-4bb9-96fc-7ba7885837ea.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8529c335-dcb1-4bb9-96fc-7ba7885837ea.png)'
- en: Our sticky header.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的粘性页眉。
- en: It works perfectly, but the header appears instantly, with no animation whatsoever.
    Let's try to make it a bit smoother. To add a bit a transition, we'll use, in
    this example, CSS animation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它工作得很好，但是页眉会立即出现，没有任何动画。让我们尝试使其更加流畅。为了添加一些过渡效果，在这个例子中，我们将使用CSS动画。
- en: CSS animation
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画
- en: CSS animation allows for the creation of animation without JS or Flash, with
    keyframes and every CSS property. It offers more advantages than a simple transition.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: CSS动画允许创建动画而无需JS或Flash，具有关键帧和每个CSS属性。它比简单的过渡提供了更多的优势。
- en: 'To create a CSS animation, you need to create a keyframe:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建CSS动画，您需要创建一个关键帧：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`from` means at the start of the animation, while `to` means at the end of
    the animation.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`表示动画开始时，而`to`表示动画结束时。'
- en: 'You can also be more precise with the timeframe by setting the percentage:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过设置百分比来更精确地设置时间段：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To trigger the animation, you need to call it in the specific div with the
    CSS properties:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发动画，您需要在具有CSS属性的特定div中调用它：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For our header navigation, the keyframe would be:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的页眉导航，关键帧将是：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`transform:` is a new type of position in CSS that allows you to move an element
    in a 2D or 3D environment. With `translateY`, we''re moving the element in the
    *Y-axis*. Also, we named the keyframes `sticky-animation`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform:` 是CSS中的一种新的位置类型，允许您在2D或3D环境中移动元素。使用`translateY`，我们在*Y轴*上移动元素。此外，我们将关键帧命名为`sticky-animation`：'
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The last part will be to call the animation in the class `.sticky`, with a duration
    of `0.3s`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分将是在类`.sticky`中调用动画，持续时间为`0.3s`。
- en: We now have a sticky navigation that works perfectly, with a cool animation!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个完美运行的粘性导航，带有一个很酷的动画！
- en: Adding a dynamic Instagram feed
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个动态的Instagram动态
- en: The end goal here is to be able to implement your own Instagram feed by connecting
    to the Instagram API and pulling out information from them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最终目标是能够通过连接到Instagram API并从中提取信息来实现自己的Instagram动态。
- en: From a design point of view, we want to show a feed of our latest photo from
    Instagram after our footer, with a hover effect of opacity when you move your
    mouse over it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从设计的角度来看，我们希望在页脚之后展示我们最新的Instagram照片动态，当您将鼠标悬停在上面时，会有一个不透明度的悬停效果。
- en: 'It should look something like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该看起来像这样：
- en: '![](img/111a176c-e0b0-4f01-8413-308386d17435.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/111a176c-e0b0-4f01-8413-308386d17435.png)'
- en: The final design of our Instagram feed
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Instagram供稿的最终设计
- en: 'To achieve that, first, we need to have an Instagram account. If you already
    have one, you can use your own. Otherwise, I''ve created an account for the exercise:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，首先我们需要有一个Instagram账户。如果你已经有一个，你可以使用你自己的。否则，我已经为这个练习创建了一个账户：
- en: '![](img/103d30e4-70b8-4740-9611-7a8a0c205485.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/103d30e4-70b8-4740-9611-7a8a0c205485.png)'
- en: Our awesome Instagram feed
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很棒的Instagram供稿
- en: Installing Instafeed.js
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Instafeed.js
- en: 'I have, beforehand, uploaded a couple of images of racing. The next step is
    to install a plugin called `Instafeed.js`. Let''s go to the website to download
    it: [http://instafeedjs.com/](http://instafeedjs.com/):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '我之前上传了一些赛车的图片。下一步是安装一个名为`Instafeed.js`的插件。让我们去网站下载它：[http://instafeedjs.com/](http://instafeedjs.com/):'
- en: '![](img/69057812-1aea-4399-8528-ebb349eb1390.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69057812-1aea-4399-8528-ebb349eb1390.png)'
- en: Instafeed.js home page
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Instafeed.js主页
- en: Right click on download and click on Save link As.... Place the file in the
    `vendor` folder, located in the `js` folder in our `Web Project`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击下载，然后点击另存为....将文件放在我们`Web项目`中`js`文件夹中的`vendor`文件夹中。
- en: For each plugin, the installation is quite similar each time. All the installation
    process is generally detailed on the website itself. Let's have a look at Instafeed's
    documentation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个插件，安装过程每次都相当相似。所有的安装过程通常都在网站上详细说明。让我们来看看Instafeed的文档。
- en: 'Setting up `Instafeed.js` is pretty straight-forward. Just download the script
    and include it in your HTML:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`Instafeed.js`非常简单。只需下载脚本并将其包含在HTML中：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'First, we need to call the `js` file we initially placed in our `vendor` folder:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要调用最初放在我们的`vendor`文件夹中的`js`文件：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Place it after the Waypoints plugin we previously installed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将其放在我们之前安装的Waypoints插件之后。
- en: Now, if we look thoroughly at the documents, we can find the section we need.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们仔细查看文档，我们可以找到我们需要的部分。
- en: Getting images from your user account
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从你的用户账户获取图片
- en: 'To fetch images specifically from your account, set the `get` and `userId`
    options:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要从你的账户中获取特定的图片，设置`get`和`userId`选项：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The next step is to find the userID and TokenAccess. If you don't want to create
    an Instagram account and want to use the one I created beforehand, you can go
    straight to the section titled Displaying the feed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是找到userID和TokenAccess。如果你不想创建Instagram账户，想要使用我之前创建的账户，你可以直接转到标题为显示供稿的部分。
- en: Finding our userID and TokenAccess
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找我们的userID和TokenAccess
- en: 'The information we need to find is the `userID` and the `accessToken`. To get
    the `userID`, we need our Instagram username. Instagram didn''t really make it
    easy to find our `userID`. Fortunately, there are plenty of people who created
    an easy way to find it. You can easily find a way by googling *How to find Instagram
    userID*, but we''ll go straight to the point. Just head to this website [https://codeofaninja.com/tools/find-instagram-user-id](https://codeofaninja.com/tools/find-instagram-user-id) and
    fill the input with your Instagram username:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要找到的信息是`userID`和`accessToken`。要获得`userID`，我们需要我们的Instagram用户名。Instagram并没有真的让我们很容易地找到我们的`userID`。幸运的是，有很多人创建了一个简单的方法来找到它。你可以很容易地通过谷歌搜索*如何找到Instagram
    userID*来找到一个方法，但我们会直奔主题。只需转到这个网站[https://codeofaninja.com/tools/find-instagram-user-id](https://codeofaninja.com/tools/find-instagram-user-id)并填写你的Instagram用户名：
- en: '![](img/dd4522c2-2b9a-4fd7-9b3f-1487c63fbd57.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd4522c2-2b9a-4fd7-9b3f-1487c63fbd57.png)'
- en: The Find Instagram User ID website
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 查找Instagram用户ID网站
- en: 'After clicking on Find Instagram ID, you''ll get something like this with your
    `User ID`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 点击查找Instagram ID后，你会得到类似这样的东西，带有你的`User ID`：
- en: '![](img/63341f47-27a1-457a-b4a0-a0e75dcfd810.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63341f47-27a1-457a-b4a0-a0e75dcfd810.png)'
- en: Our userID
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的userID
- en: 'Now let''s head to our `main.js` and copy/paste the example of code showed
    in the `instafeedjs` documentation. After our `Sticky Nav` code, paste the code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转到我们的`main.js`并复制/粘贴`instafeedjs`文档中显示的代码示例。在我们的`Sticky Nav`代码之后，粘贴代码：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Just copy and paste the `userID` we got from the website, replacing `''YOUR_USER_ID''`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 只需复制并粘贴我们从网站上得到的`userID`，替换`'YOUR_USER_ID'`：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It's not done; we still need our access token. This will be a bit more complicated.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 还没有完成；我们仍然需要我们的访问令牌。这会有点复杂。
- en: Getting our access token
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取我们的访问令牌
- en: Instagram didn't really make it easy to find the access token either. Usually,
    it would take quite a bit of time to generate our access token, but we'll use
    a tool to help us get it. Let's head to[ http://instagram.pixelunion.net/ ](http://instagram.pixelunion.net/)and
    click on Generate Access Token.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Instagram并没有真的让我们很容易地找到访问令牌。通常，生成我们的访问令牌需要相当长的时间，但我们将使用一个工具来帮助我们获得它。让我们前往[ http://instagram.pixelunion.net/ ](http://instagram.pixelunion.net/)并点击生成访问令牌。
- en: 'This site will generate for us a token access with one click, the only thing
    we need is to authorize the website to access our account:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站将为我们生成一个令牌访问，我们唯一需要的是授权网站访问我们的账户：
- en: '![](img/1baba778-4ddc-4eed-8c19-3f2eb1bdc5c8.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1baba778-4ddc-4eed-8c19-3f2eb1bdc5c8.png)'
- en: The Pixel Union website
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Pixel Union网站
- en: 'Click on Generate Token Access; it should direct you to the Instagram *Authorization*
    page:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 点击生成令牌访问；它应该将你引导到Instagram的*授权*页面：
- en: '![](img/9aa1cc17-8077-40e1-bf09-63719a929924.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aa1cc17-8077-40e1-bf09-63719a929924.png)'
- en: Instagram Authorization page
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Instagram授权页面
- en: 'Once done, you can copy paste the code provided by them:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以复制粘贴他们提供的代码：
- en: '![](img/2e518079-ff7c-4f09-b513-e0d55640ef05.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e518079-ff7c-4f09-b513-e0d55640ef05.png)'
- en: Pixel Union Access Token Code
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Pixel Union访问令牌代码
- en: 'Let''s copy/paste the last piece of the puzzle in our `main.js` code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们复制/粘贴最后一块拼图到我们的`main.js`代码中：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save the `main.js`. The next step is to fill the HTML with photos of our Instagram
    feed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`main.js`。下一步是用我们的Instagram供稿的照片填充HTML。
- en: Displaying the feed
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示供稿
- en: How does the Instafeed plugin work to display our feed? It will look for the `<div
    id="instafeed"></div>` and fill it with linked thumbnails.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Instafeed插件是如何工作来显示我们的供稿的？它会寻找`<div id="instafeed"></div>`并用链接的缩略图填充它。
- en: 'Let''s head to the end of our HTML file, after our `<footer>` tag, and add `<div
    id="instafeed"></div>`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到我们的HTML文件的末尾，在我们的`<footer>`标签之后，添加`<div id="instafeed"></div>`：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s save and see how it looks:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并看看它的样子：
- en: '![](img/5d38ae13-b37a-4adb-8f9b-336775bb1c74.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d38ae13-b37a-4adb-8f9b-336775bb1c74.png)'
- en: Our Instagram feed indeed appears, but we can't leave it like this. Let's customize
    our feed and add a bit of CSS to make it pretty.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Instagram feed确实出现了，但我们不能就这样离开它。让我们自定义我们的feed并添加一些CSS使其漂亮。
- en: 'The first thing we''re going to do is to get larger images from our feed. By
    default, Instafeed gets the smallest size of thumbnails from Instagram. To get bigger
    thumbnails, we can read the documentation, and find the following information:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是从我们的feed中获取更大的图片。默认情况下，Instafeed从Instagram获取缩略图的最小尺寸。要获取更大的缩略图，我们可以阅读文档，并找到以下信息：
- en: 'In the s*tandard option* provided by Instafeed, we can see that we have the
    option to choose between three types of resolution from the thumbnails with the
    attribute `resolution`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在Instafeed提供的标准选项中，我们可以看到我们可以使用`resolution`属性从缩略图中选择三种分辨率类型：
- en: '![](img/f95961e0-e496-4a84-90e7-cfb10813641b.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f95961e0-e496-4a84-90e7-cfb10813641b.png)'
- en: Instafeed documentation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Instafeed文档。
- en: 'Let''s choose the largest one. To add this option, we simply need to add an
    attribute to our JavaScript function:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择最大的那个。要添加此选项，我们只需要在我们的JavaScript函数中添加一个属性：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: So, after `accessToken`, we can add the attribute `resolution`. Be sure to add
    a comma after the end of the attribute `accessToken` to mention that this is not
    the last property. The last attribute doesn't need a comma at the end.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在`accessToken`之后，我们可以添加`resolution`属性。确保在`accessToken`属性的末尾添加逗号，以表明这不是最后一个属性。最后一个属性在末尾不需要逗号。
- en: 'Save and see what we have:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并查看我们有什么：
- en: '![](img/53822b42-389d-4e7c-a62e-d13369bc3b69.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53822b42-389d-4e7c-a62e-d13369bc3b69.png)'
- en: Website work in progress
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 网站工作正在进行中
- en: 'Great, now it needs a bit of CSS to make this pretty. Before heading to the
    CSS, we need to check what HTML Instafeed generates for us, so we are able to
    call it in CSS. If you remember, we can inspect the HTML of an element in Google
    Chrome. We just have to right-click on it and click on Inspect:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在它需要一些CSS来使其漂亮。在转到CSS之前，我们需要检查Instafeed为我们生成了什么HTML，以便我们能够在CSS中调用它。如果您记得，我们可以在Google
    Chrome中检查元素的HTML。我们只需右键单击它，然后单击检查：
- en: '![](img/716951d8-a88f-4fda-a829-ca8d1847ba7a.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/716951d8-a88f-4fda-a829-ca8d1847ba7a.png)'
- en: Our Google Chrome inspector
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Google Chrome检查器
- en: We can see that Instafeed generates a `<a>` tag with an `<img>` inside. Pretty
    straightforward.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到Instafeed生成了一个带有`<img>`的`<a>`标签。非常简单直接。
- en: 'Knowing that, let''s go to our `styles.css` file, and write, after our `footer`
    section:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 知道了这一点，让我们去我们的`styles.css`文件，并在我们的`footer`部分之后写入：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To explain, we use:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释，我们使用：
- en: '`width: 100%;` because #instafeed is our container that holds everything. We
    want it to take the full width.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width: 100%;`因为#instafeed是包含所有内容的容器。我们希望它占满整个宽度。'
- en: '`display: flex;` because we want to display the thumbnails horizontally side
    by side.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display: flex;`因为我们希望水平并排显示缩略图。'
- en: '`justify-content: center;` to place the content in the center.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`justify-content: center;`将内容放置在中心。'
- en: '`overflow: hidden;` because we don''t want the page to extend horizontally.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overflow: hidden;`因为我们不希望页面水平扩展。'
- en: '`background: black;` because by default the background is white.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background: black;`因为默认情况下背景是白色的。'
- en: 'And, last, but not the least, the most important one:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是：
- en: '`flex-grow: 1;`: The remaining space in the `container` will be distributed
    equally to all children if all items have flex-grow set to `1`. If one of the
    children has a value of 2 or more, the remaining space or more would take up twice
    as much space as the others.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex-grow: 1;`：如果所有项目的`flex-grow`都设置为`1`，则`container`中的剩余空间将均匀分配给所有子项目。如果其中一个子项目的值为2或更高，则剩余空间或更多空间将占用其他空间的两倍。'
- en: 'Let''s see how it looks now:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看现在的样子：
- en: '![](img/0ab28e1b-91d8-460a-b17e-3cbef084e816.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ab28e1b-91d8-460a-b17e-3cbef084e816.png)'
- en: Website work in progress
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 网站工作正在进行中
- en: 'Now, the last part is to add that opacity effect when hovering it. We''ll play
    with opacity and pseudo-class `:hover` we learned just earlier:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后一部分是在悬停时添加不透明度效果。我们将使用我们之前学到的不透明度和伪类`:hover`来进行操作：
- en: '[PRE29]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Again, you only need to add the value you want to change in the pseudo-class;
    here, it is the opacity.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您只需要在伪类中添加您想要更改的值；在这里，它是不透明度。
- en: 'Let''s also add some `transition`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也添加一些`transition`：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s save it and see:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并查看：
- en: '![](img/6e50d18a-46a5-42a1-910d-5ce37ba55f3a.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e50d18a-46a5-42a1-910d-5ce37ba55f3a.png)'
- en: Website work in progress
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 网站工作正在进行中
- en: 'Perfect, we did a great job so far. But if you''re a perfectionist, as I am,
    you''ll notice that on mobiles and tablets, the images are quite big. Let''s add
    some quick responsive CSS and we can wrap this up:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，到目前为止我们做得很好。但是如果您像我一样是一个完美主义者，您会注意到在手机和平板电脑上，图像相当大。让我们添加一些快速响应式CSS，然后我们就可以结束了：
- en: '[PRE31]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'What I did here is to change the image size on each breakpoint:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里做的是在每个断点上更改图像大小：
- en: '![](img/066c4830-e2c7-4cf8-8bdf-7b9df1898300.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/066c4830-e2c7-4cf8-8bdf-7b9df1898300.png)'
- en: Tablet and mobile view of our Instagram Feed
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 平板电脑和手机视图中的Instagram Feed
- en: We're now done with the interaction and dynamic content of our website.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了网站的交互和动态内容。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Obviously, there are plenty of things you can do and add to your website. This
    has just been a little preview of what can be achieved very quickly. Again, your
    imagination and determination will be the only limit. Here''s what we''ve covered
    in this chapter:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您可以在您的网站上做很多事情和添加很多东西。这只是一个可以非常快速实现的小预览。再次强调，您的想象力和决心将是唯一的限制。这是我们在本章中涵盖的内容：
- en: We've learned the CSS pseudo-class and how it can help with different animation.
    We've learned how to create animation with CSS `@keyframe`. We can now target
    elements with JQuery and add different functions to it. We've learned how to connect
    to an API and display information by using a plugin
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了CSS伪类以及它如何帮助不同的动画。我们已经学会了如何使用CSS的`@keyframe`来创建动画。我们现在可以用JQuery来定位元素并为其添加不同的功能。我们已经学会了如何连接到API并使用插件显示信息。
- en: A lot of exciting stuff in this chapter! In the next chapter, we will cover
    how to optimize our website and publish it!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容非常精彩！在下一章中，我们将学习如何优化我们的网站并发布它！
