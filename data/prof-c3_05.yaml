- en: Chapter 5. Using Background Images in CSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。在CSS中使用背景图像
- en: Background images are on almost all pages. This chapter will describe how to
    craft an optimal website with images displayed correctly on the wide spectrum
    of modern devices including mobile phones and tablets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有页面上都有背景图像。本章将描述如何在现代设备的广泛范围上正确显示图像，包括手机和平板电脑。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Usage of background images
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用背景图像
- en: How to set proper position for background images
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为背景图像设置正确的位置
- en: How to set the size of a background position
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置背景位置的大小
- en: Images on retina and mobile devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视网膜和移动设备上的图像
- en: CSS backgrounds
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS背景
- en: CSS backgrounds are very useful in modern web browsers. When should you use
    a background and when should you use the `img` tag? It's a simple question—every
    image that is an element of content should be inserted into the `img` tag and
    every image that is an element of a layout should be moved to the CSS background.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: CSS背景在现代Web浏览器中非常有用。何时应该使用背景，何时应该使用`img`标签？这是一个简单的问题 - 每个作为内容元素的图像都应插入到`img`标签中，每个作为布局元素的图像都应移动到CSS背景中。
- en: In this chapter, we will try to always use the same image to illustrate how
    each property and value is working. This image will be a bordered circle that
    will definitely show the correct aspect ratio (if it is bad, it will look more
    like ellipsis), and with the border, you can check how the repeating of images
    will work. The width and height of the image are equal to 90 pixels.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试始终使用相同的图像来说明每个属性和值的工作原理。这个图像将是一个有边框的圆，肯定会显示正确的纵横比（如果它不好，它看起来更像省略号），并且有了边框，您可以检查图像的重复工作。图像的宽度和高度都等于90像素。
- en: '![CSS backgrounds](img/00056.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![CSS背景](img/00056.jpeg)'
- en: Repeating of background
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景重复
- en: 'There are many options available when working with a background. The first
    is image repeat. The default value is to repeat an image in both the *x* and *y*
    axes. So when you set, for example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理背景时有许多可用选项。第一个是图像重复。默认值是在*x*和*y*轴上重复图像。因此，当您设置，例如：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our SASS example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的SASS示例：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Compiled CSS:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的CSS：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For all containers, the border is red so as to allow a better view of the scope
    of the container.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有容器，边框都是红色的，以便更好地查看容器的范围。
- en: 'HTML:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code will bring us the following view:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将给我们带来以下视图：
- en: '![Repeating of background](img/00057.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![背景重复](img/00057.jpeg)'
- en: 'For all containers, the border is red so as to allow a better view of the scope
    of the container. It means that the image is repeated in the background in both
    *x* and *y* axes. Let''s add the following code and check how it will compile
    and what impact on our view we will see:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有容器，边框都是红色的，以便更好地查看容器的范围。这意味着图像在背景中在*x*和*y*轴上重复。让我们添加以下代码并检查它将如何编译以及对我们的视图会产生什么影响：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compiled CSS:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的CSS：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Another option that we can use and the behavior of `background-repeat`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`background-repeat`的另一个选项和行为：
- en: '`- repeat-x`: This will repeat background *x* axis![Repeating of background](img/00058.jpeg)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- repeat-x`：这将重复背景*x*轴![背景重复](img/00058.jpeg)'
- en: '`- repeat-y`: This will repeat background *y* axis![Repeating of background](img/00059.jpeg)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- repeat-y：这将重复背景*y*轴![背景重复](img/00059.jpeg)'
- en: '`- no-repeat`: This will not repeat the background![Repeating of background](img/00060.jpeg)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- no-repeat`：这将不会重复背景![背景重复](img/00060.jpeg)'
- en: Background size
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景大小
- en: 'With new CSS features, you can set the background size. Size can be set as
    follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的CSS功能，可以设置背景大小。大小可以设置如下：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s get the previous HTML code and append the new SASS code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们获取先前的HTML代码并附加新的SASS代码：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Compiled CSS:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的CSS：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of this code will be as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的输出将如下所示：
- en: '![Background size](img/00061.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![背景大小](img/00061.jpeg)'
- en: 'If we want to set the full width of the container for an image and automatically
    count its height to maintain the aspect ratio of image, perform the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要为图像设置容器的完整宽度，并自动计算其高度以保持图像的纵横比，执行以下操作：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Background size](img/00062.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![背景大小](img/00062.jpeg)'
- en: 'We can, of course, change the `fill` option from the *x* axis to the *y* axis.
    Let''s change the `100%` value to `height` and `auto` for `width`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以将`fill`选项从*x*轴更改为*y*轴。让我们将`100%`的值更改为`height`，将`width`更改为`auto`：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Compiled to:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Background size](img/00063.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![背景大小](img/00063.jpeg)'
- en: 'The `contain` value will change its width and height to contain the container.
    With this option, the aspect ratio will be maintained:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`contain`值将更改其宽度和高度以包含容器。使用此选项，纵横比将得到保持：'
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `cover` value will change its width and height to cover the container.
    With this option, the aspect ratio will be maintained:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`cover`值将更改其宽度和高度以覆盖容器。使用此选项，纵横比将得到保持：'
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Background position
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景位置
- en: 'In most designs, you will need to set the position of the background in a box.
    The background position can be set with CSS as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数设计中，您将需要设置背景在框中的位置。可以使用CSS设置背景位置如下：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Background position](img/00064.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![背景位置](img/00064.jpeg)'
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Background position](img/00065.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![背景位置](img/00065.jpeg)'
- en: 'If you want to center the position of the background in both axes perform the
    following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使背景在两个轴上居中，执行以下操作：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Background position](img/00066.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![背景位置](img/00066.jpeg)'
- en: 'If you want to align the background to bottom right perform the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将背景对齐到右下角，请执行以下操作：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Background position](img/00067.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![背景位置](img/00067.jpeg)'
- en: 'To set the background offset in pixels perform the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置背景偏移量（以像素为单位），请执行以下操作：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Background position](img/00068.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![背景位置](img/00068.jpeg)'
- en: Multiple backgrounds
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重背景
- en: Back in the days, using multiple backgrounds was related to adding new DOM elements
    with separate backgrounds. All these elements would be positioned absolutely in
    a relative container. Nowadays, we can use multiple backgrounds in one container
    using CSS without any additional HTML code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，使用多个背景与添加具有单独背景的新DOM元素相关联。所有这些元素将绝对定位在相对容器中。如今，我们可以在一个容器中使用CSS使用多个背景，而无需任何额外的HTML代码。
- en: 'Let''s use the same HTML code and same image and let''s position this image
    in a container in the following positions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的HTML代码和相同的图像，然后将这个图像定位在容器中的以下位置：
- en: top left
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部左侧
- en: top center
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部中心
- en: top right
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部右侧
- en: left center
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧中心
- en: center center
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中心中心
- en: right center
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧中心
- en: bottom left
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部左侧
- en: bottom center
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部中心
- en: bottom right
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部右侧
- en: 'CSS code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s describe it in SASS:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在SASS中描述它：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The final view will be as shown in the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最终视图将如下所示：
- en: '![Multiple backgrounds](img/00069.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![多重背景](img/00069.jpeg)'
- en: How to create and use sprites
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建和使用精灵
- en: 'What is a sprite? A sprite is an image with images in short. But how can you
    use it in your code and why should you use it in your CSS? Because it can make
    your website faster and it is rather simple to create. Let''s check the following
    image:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是精灵？精灵是一种带有图像的图像。但是你如何在你的代码中使用它，为什么应该在你的CSS中使用它？因为它可以使你的网站更快，而且创建起来相当简单。让我们来看看下面的图片：
- en: '![How to create and use sprites](img/00070.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建和使用精灵](img/00070.jpeg)'
- en: This is a basic sprite with set offsets in the *x* and *y* axes. So how can
    we extract **IMG 3** from this big image?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个具有在*x*和*y*轴上设置偏移的基本精灵。那么我们如何从这个大图像中提取**IMG 3**？
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Compiled CSS:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To understand the sprite grid better, let''s get the object with the name **IMG
    6**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解精灵网格，让我们拿着名为**IMG 6**的对象：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Compiled:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Okay. But creating sprites is pretty boring and time-consuming. How can this
    process be automatized? It''s pretty easy with Compass. All we need to do is to
    gather all the images in a folder with the name `newsprite`. The best format for
    sprites is PNG to keep the proper transparency. Let''s assume that we have the
    following three PNG files in this folder:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。但是创建精灵非常无聊和耗时。这个过程如何自动化？使用Compass非常容易。我们只需要将所有图像收集到一个名为`newsprite`的文件夹中。精灵的最佳格式是PNG，以保持适当的透明度。假设我们在这个文件夹中有以下三个PNG文件：
- en: '`circle-blue.png`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle-blue.png`'
- en: '`circle-red.png`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle-red.png`'
- en: '`circle-white.png`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle-white.png`'
- en: 'The images will be as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图像将如下所示：
- en: '![How to create and use sprites](img/00071.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建和使用精灵](img/00071.jpeg)'
- en: 'Now we will need to add a little change into our automatizer:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要对我们的自动化工具进行一些改变：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We changed the following line, which defines the destination for images:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们改变了以下定义图像目标的行：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we need to add a code to the run sprite creator in `compass`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`compass`中添加一个代码来运行精灵创建器：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the first line of the preceding code, we are importing the `compass` library.
    In the second line, we are mapping our images as `sprites`. In the third line,
    we are importing a folder with `sprites`. The value in brackets gives dimensions
    in classes in compiled CSS code. Now let''s analyze the compiled CSS:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码的第一行，我们正在导入`compass`库。在第二行，我们正在将我们的图像映射为`sprites`。在第三行，我们正在导入一个带有`sprites`的文件夹。括号中的值在编译后的CSS代码中给出了类的尺寸。现在让我们分析编译后的CSS：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see, the generated code is related to the files structure and names,
    for example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，生成的代码与文件结构和名称相关，例如：
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Where:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '`newsprite`: This is a folder/sprite name'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newsprite`: 这是一个文件夹/精灵名称'
- en: '`circle-white`: This is file name'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle-white`: 这是文件名'
- en: 'Compass is prefixing the generated sprite image, for example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Compass正在为生成的精灵图像添加前缀，例如：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And the generated file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 和生成的文件：
- en: '![How to create and use sprites](img/00072.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建和使用精灵](img/00072.jpeg)'
- en: 'Now let''s change the code a little bit and let''s use sprite-map. Firstly,
    we will need to create HTML code to finally see the effect in browser:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们稍微改变一下代码，让我们使用sprite-map。首先，我们需要创建HTML代码，最终在浏览器中看到效果：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then in SASS file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在SASS文件中：
- en: '[PRE32]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Generated CSS:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS：
- en: '[PRE33]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding code, we are not adding all classes with their dimensions
    like we did previously. This is important when you do not want to add a lot of
    unused code. Now we are only using the part of `sprite` that is needed. Let''s
    analyze it a little deeper:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们没有像之前那样添加所有带有它们尺寸的类。当你不想添加很多未使用的代码时，这一点很重要。现在我们只使用了需要的`sprite`部分。让我们深入分析一下：
- en: '[PRE34]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This line of code defines our image (which was `@import "newsprite/*.png"`).
    The second parameter defines the spacing between images in `sprite` (`$spacing:
    2px`); in this case it is `2px`. And the last parameter is defining the `layout`
    style. In this case, the images in `sprite` will look like the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '这行代码定义了我们的图像（即`@import "newsprite/*.png"`）。第二个参数定义了`sprite`中图像之间的间距（`$spacing:
    2px`）；在这种情况下是`2px`。最后一个参数定义了`layout`样式。在这种情况下，`sprite`中的图像将如下所示：'
- en: '![How to create and use sprites](img/00073.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建和使用精灵](img/00073.jpeg)'
- en: 'With this parameter, we can use the following values:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个参数，我们可以使用以下值：
- en: '**Vertical**: Elements of sprite will be placed in one vertical line'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直**：精灵的元素将放置在一个垂直线上'
- en: '**Horizontal**: Elements of sprite will be placed in a horizontal line'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平**：精灵的元素将放置在一条水平线上'
- en: '**Diagonal**: Elements of sprite will be placed in a diagonal line'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对角线**：精灵的元素将放置在对角线上'
- en: '**Smart**: Elements will be adjusted to get at as small an area as it is possible'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能**：元素将被调整为尽可能小的区域'
- en: 'Let''s analyze the next part of the code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析代码的下一部分：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the first line of the preceding code, we are getting the `$circle` variable,
    which is defined as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码的第一行，我们得到了`$circle`变量，其定义如下：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This line adds the background image. The second line is getting the position
    of the image with name `circle-red` defined in the `$circle` variable (sprite).
    The last line includes the width and height of `circle-red` in this class.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行添加了背景图像。第二行是获取名为`circle-red`的图像在`$circle`变量（sprite）中的位置。最后一行包括了这个类中`circle-red`的宽度和高度。
- en: 'In the browser, we can see the following view:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，我们可以看到以下视图：
- en: '![How to create and use sprites](img/00074.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建和使用sprites](img/00074.jpeg)'
- en: Usage of base64
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: base64的用法
- en: This is a technique strictly connected with page load optimization and minification
    of requests sent to the server. Conceptually, optimization was related with making
    count requests as small as possible. So let's assume that we have 10 image backgrounds,
    which we need to load on a page. The first request is for CSS and the next 10
    requests to the server are for images. But how can we make it work in one request?
    We can use `base64` coding.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种与页面加载优化和请求最小化紧密相关的技术。从概念上讲，优化与尽可能减少请求数量有关。所以让我们假设我们有10个需要在页面上加载的图像背景。第一个请求是用于CSS，接下来的10个请求发送到服务器是用于图像。但是我们怎样才能在一个请求中完成呢？我们可以使用`base64`编码。
- en: 'Let''s observe at how it looks in theory:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从理论上看一下它是什么样子的：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is the main method in which we encode the image. Finally, it looks like
    the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们对图像进行编码的主要方法。最终，它看起来像这样：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Hey! But how can I change my image to encoded data? This is an excellent question
    at a great time. Open your terminal and try to do it with the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿！但是我怎么把我的图像改成编码数据呢？这是一个很好的问题。打开你的终端，尝试使用以下命令：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: After this operation, all you need to do is to copy the output file content
    to `<encode data>` from the previous command.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个操作后，你需要做的就是将输出文件内容从前一个命令的`<encode data>`复制过来。
- en: Retina problems
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视网膜问题
- en: Retina is the high-resolution display. The only problem with this display is
    how to double the device width and height and then squeeze it into the keeping
    container. This sounds easy. The easiest way is to move as many elements as can
    be moved to fonts and HTML elements/pseudoelements. But how can we deal with background
    images in CSS?
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 视网膜是高分辨率显示器。这种显示器唯一的问题是如何将设备的宽度和高度加倍，然后压缩到保持容器中。这听起来很容易。最简单的方法是将尽可能多的元素移动到字体和HTML元素/伪元素中。但我们如何处理CSS中的背景图像呢？
- en: Let's start with the basics. For a normal screen, we need the image with standard
    dimensions. The image width and height are equal to 90 pixels.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基础知识开始。对于普通屏幕，我们需要具有标准尺寸的图像。图像的宽度和高度都等于90像素。
- en: 'HTML:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'HTML:'
- en: '[PRE40]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'SASS:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Complied CSS:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In case we want to display this image properly on the retina display, we need
    to change a code. This change is related with the density of the retina display.
    The pixel ratio in the retina display is equal to `2`. All we need to change is
    the width and height of the element and adjust the background image in this box:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要在视网膜显示器上正确显示这个图像，我们需要改变一下代码。这个改变与视网膜显示器的密度有关。视网膜显示器的像素比是等于`2`的。我们需要改变的只是元素的宽度和高度，并调整这个框中的背景图像：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Compiled CSS:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now `.element` is ready to display on the retina display with the correct quality.
    But it will be two times smaller than needed. All we need to do in this case is
    to start with a bigger resolution of the image—it should be two times bigger.
    For example, the design is prepared for the browser, and in the browser, the main
    wrapper width should be 1000px; so you should ask the designer to design the width
    of this wrapper equal to 200px. In bigger designs, you are cutting slices, which
    will be needed on the retina display. Then you should cut images for standard
    density. You can leave only the retina images but it can affect performance because
    bigger images will always be downloaded in the browser. To omit this problem,
    it is good to add a proper media query. In the described example, we are globally
    adding a normal version of the file (`img/circle-blue.png`) in the case of the
    retina display, which is recognized by the media query so that a two times bigger
    image will be loaded (`img/circle-blue@2x.png`).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`.element`已经准备好在视网膜显示器上以正确的质量显示。但它会比需要的大小小两倍。在这种情况下，我们需要做的就是从更大的分辨率的图像开始。例如，设计是为浏览器准备的，在浏览器中，主包装器的宽度应该是1000像素；所以你应该要求设计师将这个包装器的宽度设计为200像素。在更大的设计中，你正在切割需要在视网膜显示器上需要的切片。然后你应该为标准密度切割图像。你可以只留下视网膜图像，但这可能会影响性能，因为更大的图像将始终在浏览器中下载。为了避免这个问题，最好添加一个适当的媒体查询。在描述的例子中，我们在视网膜显示器的情况下全局添加文件的普通版本（`img/circle-blue.png`），这是由媒体查询识别的，因此将加载两倍大的图像（`img/circle-blue@2x.png`）。
- en: '[PRE45]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Compiled CSS:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE46]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Take the following part of the code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是代码的一部分：
- en: '[PRE47]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This part of code can be swapped with the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分代码可以与以下内容交换：
- en: '[PRE48]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The image in this case will adjust to the width and height of the box into which
    the background is added.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，图像将调整到添加背景的框的宽度和高度。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you gained a basic knowledge about background images. You also
    learned how to position background images, set their sizes, and how to resolve
    the main performance problems with `sprites` and `base64` encoding.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你获得了关于背景图像的基本知识。你还学会了如何定位背景图像，设置它们的大小，以及如何通过`sprites`和`base64`编码解决主要性能问题。
- en: In the next chapter, you will gain basic knowledge about the styling of forms.
    You will also gain in-depth knowledge about treating inputs with CSS code.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将获得关于表单样式的基本知识。你还将深入了解如何用CSS代码处理输入。
