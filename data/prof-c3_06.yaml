- en: Chapter 6. Styling Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。样式化表单
- en: Styling forms is one of the most challenging tasks, especially when the form
    needs to be created as desktop and mobile. Why?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 样式化表单是最具挑战性的任务之一，特别是当表单需要在桌面和移动设备上创建时。为什么？
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to create a good structure for easy styling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为简单样式创建良好的结构
- en: Using form selectors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用表单选择器
- en: How to style forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何样式化表单
- en: What is possible and what not with CSS in forms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中CSS的可能和不可能
- en: Forms – the most known issues
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单-最常见的问题
- en: Do you know any frontend developer who hasn't built any form in HTML/CSS? Do
    you know any of them who like to do this work? Yeah… It's not simple to adjust
    it, but you need to learn to understand what you can do with HTML/CSS and where
    you need to use JavaScript code to make it easier or even possible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你认识任何一个没有在HTML/CSS中构建过任何表单的前端开发人员吗？你认识任何一个喜欢做这项工作的人吗？是的...调整它并不简单，但你需要学会理解你可以用HTML/CSS做什么，以及在哪里需要使用JavaScript代码来使其更容易甚至可能。
- en: 'The most known restrictions are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的限制如下：
- en: Usage of pseudoelements `:before` and `:after` is not allowed because the input
    has no content (`:before` and `:after` appear before or after the content)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为输入框没有内容，所以不能使用伪元素`:before`和`:after`（`：before`和`：after`出现在内容之前或之后）
- en: Usage of global input styles is not good because of lots of types of inputs
    (text, password, submit)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局输入样式的使用并不好，因为有很多类型的输入（文本、密码、提交）
- en: Styling of displayed elements in the selected box is not possible at all (sometimes
    it is easier to use some JavaScript plugin to enable additional structure, which
    is easier for styling)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所选框中显示元素的样式化根本不可能（有时更容易使用一些JavaScript插件来启用额外的结构，这样更容易进行样式化）
- en: Forms – enable superpowers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单-启用超级功能
- en: As mentioned previously, in the input, there is no way to use `:before` and
    `:after` pseudoelements. But a quick trick to do that, which will be better described
    in the following sections, is to wrap it in some other elements. It always helps
    to keep some label and input groups and additionally allows to append the `:before`
    and `:after` pseudoelements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在输入框中，无法使用`：before`和`：after`伪元素。但是有一个快速的技巧可以做到这一点，这将在接下来的章节中更好地描述，那就是将其包装在其他元素中。这总是有助于保持一些标签和输入组，并另外允许附加`：before`和`：after`伪元素。
- en: 'For example, take the following bare HTML form code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，采用以下简单的HTML表单代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now you just need to add wrapping elements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你只需要添加包装元素：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Where is the difference? It is easy to see it. The first form output is as
    follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么不同？很容易看出来。第一个表单输出如下：
- en: '![Forms – enable superpowers](img/00075.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![表单-启用超级功能](img/00075.jpeg)'
- en: 'The second form is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个表单如下：
- en: '![Forms – enable superpowers](img/00076.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![表单-启用超级功能](img/00076.jpeg)'
- en: How to style simple input
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何样式化简单输入
- en: 'Styling input is based on the selectors `<input> <select> <textarea>`. But
    there is a problem with `<input>` types. It will gather all types:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 输入样式基于选择器`<input> <select> <textarea>`。但是`<input>`类型存在问题。它将收集所有类型：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For password input:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于密码输入：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's gather these inputs into one mostly appeared on websites' login form.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些输入整合到一个在网站上最常见的登录表单中。
- en: 'HTML code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代码：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In a browser, it will appear like the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，它将如下所示：
- en: '![How to style simple input](img/00077.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何样式简单输入](img/00077.jpeg)'
- en: 'Let''s change the structure a little bit with wrapping divs:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微改变结构，用包装的div：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we have a base code to start styling:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个基本代码来开始样式化：
- en: '![How to style simple input](img/00078.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![如何样式简单输入](img/00078.jpeg)'
- en: 'Now we can start creating styles:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始创建样式：
- en: 'SASS:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Generated CSS:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, after getting knowledge about proper selectors and adding basic CSS, our
    form looks like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在了解了正确的选择器并添加了基本的CSS之后，我们的表单看起来像这样：
- en: '![How to style simple input](img/00079.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![如何样式简单输入](img/00079.jpeg)'
- en: 'Let''s look at the **Submit** button. We need to remove its border. In this
    iteration, let''s add some pseudoelements. Let''s update our SASS code as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看**提交**按钮。我们需要去掉它的边框。在这个迭代中，让我们添加一些伪元素。让我们更新我们的SASS代码如下：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Generated CSS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的CSS：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The resulting output is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出如下：
- en: '![How to style simple input](img/00080.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![如何样式简单输入](img/00080.jpeg)'
- en: As we can see, we omitted the problem with `:before` and `:after` pseudoelements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们忽略了`：before`和`：after`伪元素的问题。
- en: Don't forget about placeholders
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要忘记占位符
- en: 'With HTML5, we have a support in all browsers'' placeholder attribute. It gives
    us an opportunity to add a description of the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTML5，我们在所有浏览器中都支持占位符属性。它为我们提供了一个机会来添加以下描述：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Compiled CSS:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The resulting output is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出如下：
- en: '![Don''t forget about placeholders](img/00081.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![不要忘记占位符](img/00081.jpeg)'
- en: Complex form based on input[type="text"] and labels
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于input[type="text"]和标签的复杂表单
- en: 'So let''s start with the styling of complex and elastic forms. Let''s assume
    that we need to create a form with labels and inputs, where labels are always
    on the left and inputs are resizing. Let''s bring the HTML structure:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们从复杂和弹性表单的样式开始。假设我们需要创建一个带有标签和输入的表单，其中标签始终位于左侧，输入正在调整大小。让我们来看HTML结构：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code will look like the following in a browser:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，上述代码将如下所示：
- en: '![Complex form based on input[type="text"] and labels](img/00082.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![基于input[type="text"]和标签的复杂表单](img/00082.jpeg)'
- en: 'As you can see, it now behaves almost like it should but its inputs are not
    in 100% of width. When you change it to 100%, the label will be moved over the
    input. So what we can do is to wrap the input in an additional `div` and use a
    trick with padding and position absolute/relative. Let''s change our HTML code
    into first `fieldset`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它现在几乎表现得像应该的样子，但它的输入宽度不是100%。当你将其改为100%时，标签将移动到输入框上。所以我们可以做的是将输入框包装在另一个`div`中，并使用填充和绝对/相对位置的技巧。让我们将我们的HTML代码改为首个`fieldset`：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After this change in the first `fieldset` only, you will see how the code behaves
    with and without an additional `inputKeeper` `div`. Let''s use the following SASS
    code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个`fieldset`中进行这个改变后，您将看到代码在有或没有额外的`inputKeeper` `div`的情况下的行为。让我们使用以下SASS代码：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Compiled CSS:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now what you can see in the browser is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您在浏览器中看到的是：
- en: '![Complex form based on input[type="text"] and labels](img/00083.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![基于input[type="text"]和标签的复杂表单](img/00083.jpeg)'
- en: 'And on a bigger screen, you will see the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在更大的屏幕上，您将看到以下内容：
- en: '![Complex form based on input[type="text"] and labels](img/00084.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![基于input[type="text"]和标签的复杂表单](img/00084.jpeg)'
- en: 'As we can see, position absolute for label without an additional wrapper caused
    the problem with overlaying the label over the input. An additional wrapper gives
    us an opportunity to add a padding. In place of this padding, we can push a label
    with position absolute. After appending wrappers to the second section, it should
    look in the browser like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，对于没有额外包装的标签，绝对位置会导致标签覆盖输入的问题。额外的包装给了我们一个机会来添加填充。在这个填充的位置，我们可以使用绝对位置推动标签。在将包装器附加到第二部分之后，它应该在浏览器中看起来如下：
- en: '![Complex form based on input[type="text"] and labels](img/00085.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![基于input[type="text"]和标签的复杂表单](img/00085.jpeg)'
- en: How to style textarea
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何样式化文本区域
- en: 'Styling of `textarea` is pretty simple and very comparable to the styling of
    text input. One of the differences is the opportunity to resize `textarea`. This
    is same as the `input[type="text"]` textarea which can have a placeholder so that
    you can add a styling for it. Let''s prepare simple HTML code for short investigation
    about textarea:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`textarea`的样式化非常简单，非常类似于文本输入的样式化。其中一个区别是可以调整`textarea`的机会。这与`input[type="text"]`文本框相同，可以有一个占位符，因此您可以为其添加样式。让我们准备一个简单的HTML代码，以便对`textarea`进行简短的调查：'
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now in the browser, you will see the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中，您将看到以下内容：
- en: '![How to style textarea](img/00086.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何样式化文本区域](img/00086.jpeg)'
- en: Remember not to add any space or end of line in between the opening and closing
    tags because it will be treated as a content of `textarea`. This will cause a
    problem with the placeholder.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在开放和关闭标签之间不要添加任何空格或行尾，因为它将被视为`textarea`的内容。这将导致占位符出现问题。
- en: 'And SASS code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 和SASS代码：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compiled CSS:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the browser, you will see the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，您将看到以下内容：
- en: '![How to style textarea](img/00087.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![如何样式化文本区域](img/00087.jpeg)'
- en: 'As values of property resize, you can use the following ones:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作为调整大小属性的值，您可以使用以下值：
- en: '`none`: This disables resizement in both axes'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none`：这将在两个轴上禁用调整大小'
- en: '`vertical`: This enables vertical resizement and blocks horizontal resizement'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vertical`：这将启用垂直调整大小并阻止水平调整大小'
- en: '`horizontal`: This enables horizontal resizement and blocks vertical resizement'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`horizontal`：这将启用水平调整大小并阻止垂直调整大小'
- en: '`both`: This enables resizement in both axes'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`both`：这将在两个轴上启用调整大小'
- en: Styling of select (drop down)
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择框的样式化（下拉菜单）
- en: 'Hell yeah… the styling of `select` (drop down) is not as simple as it should
    be. In most cases, you will need to use some JavaScript plugin to make it easier.
    But what can you do with the simple CSS/HTML code? Let''s get the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该样式化`select`（下拉菜单）并不像应该那样简单。在大多数情况下，您需要使用一些JavaScript插件来使其更容易。但是您可以用简单的CSS/HTML代码做些什么呢？让我们看看以下代码：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding code will generate an unstyled select box like the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将生成一个未经样式化的选择框，如下所示：
- en: '![Styling of select (drop down)](img/00088.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![选择框的样式化（下拉菜单）](img/00088.jpeg)'
- en: 'And after focus action, it gives the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在焦点动作之后，它会产生以下输出：
- en: '![Styling of select (drop down)](img/00089.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![选择框的样式化（下拉菜单）](img/00089.jpeg)'
- en: 'What can we do with it now? Let''s try to add more flavor. Firstly, let''s
    wrap it into additional elements:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能做些什么呢？让我们尝试添加更多的风味。首先，让我们将其包装到额外的元素中：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now let''s add an SASS code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一个SASS代码：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Compiled CSS:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Styling of select (drop down)](img/00090.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![选择框的样式化（下拉菜单）](img/00090.jpeg)'
- en: As you can see, this approach is pretty tricky. We made select a little bit
    wider than the container to move the native controls out. Then we added an overflow
    hidden to container. Additionally, we added the after element to add a triangle.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这种方法相当棘手。我们使选择框比容器宽一点，以将原生控件移出。然后我们向容器添加了溢出隐藏。此外，我们添加了after元素以添加一个三角形。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you gained knowledge about styling forms. It's pretty tricky
    to deal with all of them but as you can see there is always some solution (for
    example, with additional wrappers) to do that. I recommend you to create a simple
    framework with which you can deal with forms. It makes you fully prepared to style
    forms.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了如何样式化表单。处理所有这些表单确实有些棘手，但正如您所看到的，总会有一些解决方案（例如，使用额外的包装器）。我建议您创建一个简单的框架，以便您可以处理表单。这使您完全准备好样式化表单。
- en: In the next chapter, we will try to resolve the most repeatable classic problems
    with CSS, such as the centering of elements, dealing with display types and many
    more. It will be a show of old school and new school methodologies possible with
    new CSS features.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将尝试解决CSS中最常见的问题，例如元素居中、处理显示类型等。这将展示旧学校和新学校方法与新的CSS功能可能性。
