- en: Chapter 7. Resolving Classic Problems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 解决经典问题
- en: As a frontend developer, you are always dealing with classic CSS problems. The
    most known and repeatable issues are centering elements in both axes and opacity.
    With current CSS, you can do it pretty simple, but you need to have a foundation
    to know how to do it. Knowledge about fallbacks of previous versions of browsers
    can be used in some other further techniques. That's why they are added to this
    chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前端开发人员，您总是在处理经典的CSS问题。最常见和重复的问题是在两个轴上居中元素和不透明度。使用当前的CSS，您可以做得非常简单，但您需要有基础知识才能知道如何做。关于浏览器先前版本的回退的知识可以在一些其他进阶技术中使用。这就是为什么它们被添加到这一章节中。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn how to center elements in both axes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在两个轴上居中元素
- en: Learn how to deal with opacity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何处理不透明度
- en: Gather both the preceding tricks and create an effect similar to the trendy
    lightbox effect
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇集前面的技巧，并创建类似于时尚灯箱效果的效果
- en: Centering elements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 居中元素
- en: 'Centering elements is an aspect known since the first CSS versions. There were
    always some element/elements on a page that needed to be centered vertically or
    horizontally in some container or in a browser. The easiest way to center some
    elements was to append the element into a table element and add to it vertical
    align and horizontal align attributes in HTML:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 居中元素是自第一个CSS版本以来就已知的一个方面。页面上总是有一些需要在某个容器或浏览器中垂直或水平居中的元素/元素。居中一些元素的最简单方法是将元素附加到表元素中，并在HTML中添加垂直对齐和水平对齐属性：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'But how can we do this in modern CSS? There are two kinds of centering:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在现代CSS中我们该如何做到这一点呢？有两种居中方式：
- en: Horizontal
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平
- en: Vertical
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直
- en: Let's resolve this problem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决这个问题。
- en: Inline elements – horizontal centering
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联元素-水平居中
- en: 'Let''s assume that we have a text that we need to center. It is very simple.
    We just need to add `text-align: center` and that''s it. In the example that we
    will implement, the background for our container is set to `red` and the element''s
    background is set to `white` to see how it works.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '假设我们有一段文本需要居中。这很简单。我们只需要添加`text-align: center`就可以了。在我们将要实现的示例中，我们将容器的背景设置为`red`，元素的背景设置为`white`以查看它是如何工作的。'
- en: 'Let''s start with this HTML code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这段HTML代码开始：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And SASS code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 和SASS代码：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'CSS:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What we will see in browser is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中我们将看到以下内容：
- en: '![Inline elements – horizontal centering](img/00091.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![内联元素-水平居中](img/00091.jpeg)'
- en: 'To center the box, as mentioned previously, we need to add `text-align: center`
    to the container:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '要使框居中，如前面提到的，我们需要在容器中添加`text-align: center`：'
- en: 'SASS:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now in the browser, we can see the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中，我们可以看到以下内容：
- en: '![Inline elements – horizontal centering](img/00092.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![内联元素-水平居中](img/00092.jpeg)'
- en: 'Let''s assume that we have both block elements and we want to adjust them as
    in the preceding example. What do we need to do? We need to change the display
    type to `inline` or `inline-block`. Let''s change the HTML code a little bit:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个块元素，我们想要调整它们如前面的例子那样。我们需要做什么？我们需要将显示类型更改为`inline`或`inline-block`。让我们稍微改变HTML代码：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now with the SASS code added previously, our example will behave similar to
    the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在加入之前添加的SASS代码，我们的示例将表现得与以下屏幕截图类似：
- en: '![Inline elements – horizontal centering](img/00093.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![内联元素-水平居中](img/00093.jpeg)'
- en: 'As we can see in the preceding screenshot, the block element is taking the
    full possible weight. What we need to do is to modify the SASS code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，块元素占据了全部可能的宽度。我们需要做的是修改SASS代码：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'CSS:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now in the browser, we can see the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中，我们可以看到以下内容：
- en: '![Inline elements – horizontal centering](img/00094.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![内联元素-水平居中](img/00094.jpeg)'
- en: Block elements – centering in both axes
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块元素-在两个轴上居中
- en: 'Let''s start with the code from the previous chapter, which will be the base
    for our CSS styling. This is the element in `container`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从前一章的代码开始，这将是我们CSS样式的基础。这是`container`中的元素：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The SASS code with colors is added for better visibility of the problems:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了带颜色的SASS代码以更好地显示问题：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'CSS:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the starting point, our code in the browser will like the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在起始点，我们在浏览器中的代码将如下所示：
- en: '![Block elements – centering in both axes](img/00095.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![块元素-在两个轴上居中](img/00095.jpeg)'
- en: 'As we can see in the preceding screenshot, our container with `Centered` content
    is now on the left side of black container. Let''s assume that this is the container
    for the page that needs to be centered and stuck to the top of the page:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们的带有`居中`内容的容器现在位于黑色容器的左侧。假设这是需要居中并粘贴到页面顶部的页面容器：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Compiled:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编译：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The most important line is the one in bold. This makes our container centered,
    as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一行是加粗的那一行。这使我们的容器居中，如下面的屏幕截图所示：
- en: '![Block elements – centering in both axes](img/00096.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![块元素-在两个轴上居中](img/00096.jpeg)'
- en: 'So what can we do to center it in both axes? The old school way, with the known
    width and height of the element, is to add the container relative position to
    the element absolute position. The element needs to be moved from the top and
    left by 50%. Then we need to shift the element with a half of the known height
    to the top and left side using negative margins:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们该怎么做才能使它在两个轴上居中呢？用已知元素的宽度和高度的老式方法是将容器的相对位置添加到元素的绝对位置。元素需要从顶部和左侧移动50%。然后我们需要使用负边距将元素向上和向左移动已知高度的一半：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'CSS:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will be as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Block elements – centering in both axes](img/00097.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![块元素-在两个轴上居中](img/00097.jpeg)'
- en: As you can see in the preceding screenshot, the element is centered in both
    axes. The biggest issue is the static width and height of the element. Yes, of
    course, there is a way to add a JavaScript code to achieve it, but it's better
    to use native CSS functions. So let's try to make it with the `transform` property.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的截图中所看到的，该元素在两个轴上都居中。最大的问题是元素的静态宽度和高度。是的，当然，有一种方法可以添加JavaScript代码来实现它，但最好使用原生CSS函数。所以让我们尝试使用`transform`属性来实现它。
- en: Using transform in centering
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用transform进行居中
- en: 'In the previous section, we have been trying to resolve the problem of centering
    elements. Let''s extend it with the transform declaration. We will dig deeper
    into transform in the next chapter to understand how it works with rotation and
    scale, but for this chapter, we need to add the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们一直在尝试解决居中元素的问题。让我们用transform声明来扩展它。我们将在下一章中深入了解transform，以了解它如何与旋转和缩放一起工作，但是对于本章，我们需要添加以下代码：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The last line in the preceding code is making the same effect as it did in the
    previous section, defining the negative left and top margins. The best feature
    of this code is that we can add it everywhere without knowledge of the width and
    height. In the next chapter, we will learn about flexbox, which can be used for
    the centering of elements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，最后一行产生了与上一节中相同的效果，定义了负左和上边距。这段代码的最佳特点是我们可以在任何地方添加它，而不需要知道宽度和高度。在下一章中，我们将学习flexbox，它可以用于元素的居中。
- en: Dealing with opacity
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理不透明度
- en: 'Opacity occurs in projects very often. For example, when you are creating some
    model windows on a page or lightbox-like gallery. It is used on the layer added
    under the main window (overlay element), which, in most cases, has added an `onclick`
    event listener in JavaScript, which hides the window upon clicking. How can you
    create this effect? How was it done in the past? Let''s start with a simple HTML
    code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不透明度在项目中经常出现。例如，当您在页面上创建一些模型窗口或类似灯箱的画廊时。它通常用于在主窗口下添加的图层（覆盖元素），在大多数情况下，该图层在JavaScript中添加了`onclick`事件监听器，点击时隐藏窗口。您如何创建这种效果？过去是如何做到的？让我们从一个简单的HTML代码开始：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'SASS:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compiled:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now it will look like the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它将看起来像下面这样：
- en: '![Dealing with opacity](img/00098.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![处理不透明度](img/00098.jpeg)'
- en: 'What we need to do is to add a layer with opacity over the actually visible
    container. Let''s append this code after the currently added code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是在当前可见容器之上添加一个带有不透明度的图层。让我们在当前添加的代码之后追加这段代码：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'What we need to do now is to change the container position to `fixed` and change
    the position of the element to `absolute`. Let''s add a little bit more code to
    add more styling for better visibility of effects of our work:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的是将容器位置更改为`fixed`，并将元素位置更改为`absolute`。让我们添加一些代码来增加更多的样式，以便更好地看到我们工作的效果：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Compiled:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the browser, we will see the white centered block on a black container as
    follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，我们将看到白色的居中块在黑色容器上，如下所示：
- en: '![Dealing with opacity](img/00099.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![处理不透明度](img/00099.jpeg)'
- en: The preceding code is going to be the base in the next section, where we will
    see the differences between `opacity` and `rgba`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将成为下一节的基础，我们将看到`opacity`和`rgba`之间的差异。
- en: Opacity versus RGBA – differences and where can we use them
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不透明度与RGBA-差异及其使用场景
- en: 'Let''s try to make the .`window_container` element added previously into the
    HTML/SASS structure be transparent. The easiest way to do it is add `opacity`:
    `.5`. So let''s try to add the following code to our current SASS code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将先前添加到HTML/SASS结构中的`.window_container`元素设置为透明。最简单的方法是添加`opacity`：`.5`。所以让我们尝试将以下代码添加到我们当前的SASS代码中：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'CSS:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The effect in browser will be as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果将如下截图所示：
- en: '![Opacity versus RGBA – differences and where can we use them](img/00100.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![不透明度与RGBA-差异及其使用场景](img/00100.jpeg)'
- en: 'As we can see in the preceding screenshot, opacity is inherited by the element
    inside our `.window_container`. It''s not the way we want to have it, so we have
    to change the CSS (SASS) or HTML code. If we want to change the HTML code, we
    can do it this way:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，不透明度被`.window_container`内的元素继承。这不是我们想要的方式，所以我们必须更改CSS（SASS）或HTML代码。如果我们想更改HTML代码，可以这样做：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And the SASS code will be changed in the window description. We will change
    only the position to `fixed`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: SASS代码将在窗口描述中更改。我们只会将位置更改为`fixed`：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The effect in the browser will be as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果将如下所示：
- en: '![Opacity versus RGBA – differences and where can we use them](img/00101.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![不透明度与RGBA-差异及其使用场景](img/00101.jpeg)'
- en: 'As we can see in the preceding screenshot, in the browser, the effect is achieved
    but our HTML structure is a little bit confusing. We have parallely added two
    elements into the HTML code, which are related to one element. So let''s get back
    to the code from the beginning of our chapter where `.window` is in the `.window_container`.
    This is the place where we will use `rgba`. Be sure that the HTML code responsible
    for the window looks like the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，在浏览器中，已经实现了效果，但是我们的HTML结构有点混乱。我们已经同时将两个元素添加到了与一个元素相关的HTML代码中。所以让我们回到我们章节开头的代码，其中`.window`在`.window_container`中。这是我们将使用`rgba`的地方。确保负责窗口的HTML代码如下所示：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'What we need to do is to change the definition of the background color of the
    `window_container` and append our `rgba`. As we know, we can define colors of
    elements in few ways:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是更改`window_container`的背景颜色定义，并追加我们的`rgba`。正如我们所知，我们可以以几种方式定义元素的颜色：
- en: Adding color names (`black`, `white`, `red`, ...)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加颜色名称（`black`，`white`，`red`，...）
- en: Hex colors definition (`#ff00ff`, `#fff` ...)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十六进制颜色定义（`#ff00ff`，`#fff`，...）
- en: RGB (`rgb(0,0,0)`, `rgb(255,255,255)` ) based on R(ed)G(reen)B(lue)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于RGB（`rgb(0,0,0)`，`rgb(255,255,255)`）的颜色
- en: HSL (`hsl(100, 90%, 50%)`) based on H(ue) S(aturation) L(ightness)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于HSL（`hsl(100, 90%, 50%)`）的颜色
- en: RGBA (`rgb(0,0,0, .4)`, `rgb(255,255,255, .7)`) based on R(ed)G(reen)B(lue)
    + alpha channel
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RGBA（`rgb(0,0,0, .4)`, `rgb(255,255,255, .7)`）基于红绿蓝+ alpha通道
- en: HSLA (`hsl(100, 90%, 50%, .8)`) based on H(ue) S(aturation) L(ightness) + alpha
    channel
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HSLA（`hsl(100, 90%, 50%, .8)`）基于色调、饱和度、亮度+ alpha通道
- en: 'In our case, we will use `rgba`. The final SASS code for `window_container`
    is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将使用`rgba`。`window_container`的最终SASS代码如下：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Compiled:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 编译：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see, the `opacity` declaration is removed. Color is defined as RGBA.
    The rest of code is the same. The code in the browser will look like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`opacity`声明被移除了。颜色定义为RGBA。其余代码保持不变。在浏览器中的代码如下所示：
- en: '![Opacity versus RGBA – differences and where can we use them](img/00102.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![不透明度与RGBA的差异以及它们可以在哪里使用](img/00102.jpeg)'
- en: Opacity in the past – fallback for old IE versions
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过去的不透明度 - 用于旧IE版本的回退
- en: Fallback for old browsers was done in a similar way as it was when you wanted
    to use border radius—you needed to use images. How was it finally done? When the
    graphics were cut in graphic software, the overlay was cut as a small transparent
    image, for example, PNG 1px per 1px. Then it was added as a background and repeated
    in *x* and *y* axes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于旧浏览器的回退方式与当您想要使用边框半径时的方式类似 - 您需要使用图像。最终是如何完成的呢？当图形在图形软件中被裁剪时，覆盖层被裁剪为一个小的透明图像，例如，PNG
    1像素x1像素。然后将其添加为背景，并在*x*和*y*轴上重复。
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you gained knowledge about the most known, classic issues
    in CSS: centering and opacity. You resolved this problem and gained knowledge
    about the pros and cons of the solutions. Additionally, you learned how the opacity
    problem was resolved in old browsers.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了CSS中最常见的经典问题：居中和不透明度。您解决了这个问题，并了解了解决方案的利弊。此外，您还了解了如何在旧浏览器中解决不透明度问题。
- en: In the next chapter, you will learn about modern CSS aspects like flexbox gradients,
    shadows, transforms, and data attributes. You will also learn about some tricks
    that you can apply to your code using this feature. Let's move on to the next
    chapter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关现代CSS方面的知识，如flexbox渐变、阴影、变换和数据属性。您还将学习一些可以应用到您的代码中的技巧。让我们继续下一章。
