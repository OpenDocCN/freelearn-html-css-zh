- en: Chapter 4. Enhancing the Blog Appearance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。增强博客外观
- en: '*In the previous chapter, we constructed the blog markup from the header section
    to the footer section using HTML5 elements. The blog, however, is currently faceless.
    If you opened the blog in a browser, you will just see it bare; we have not yet
    written the styles that add up to its appearance.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在前一章中，我们使用HTML5元素从标题部分到页脚部分构建了博客标记。然而，博客目前还是没有样式的。如果你在浏览器中打开博客，你只会看到它是空的；我们还没有编写样式来完善它的外观。*'
- en: '*Throughout the course of this chapter, we will focus on decorating the blog
    with CSS and JavaScript. We will be using CSS3 to add the blog styles. CSS3 brings
    a number of new CSS properties, such as `border-radius`, `box-shadow`, and `box-sizing`,
    that allow us to decorate websites without the need to add images and extra markup.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章的过程中，我们将专注于使用CSS和JavaScript装饰博客。我们将使用CSS3来添加博客样式。CSS3带来了许多新的CSS属性，如`border-radius`、`box-shadow`和`box-sizing`，使我们能够装饰网站而无需添加图片和额外的标记。*'
- en: '*However, the CSS properties, as mentioned previously, are applicable only
    within the latest browser versions. Internet Explorer 6 to 8 are not able to recognize
    those CSS properties, and won''t be able to output the result in the browsers.
    So, as an addition, we will also utilize a number of polyfills to make our blog
    presentable in the old Internet Explorer.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*然而，如前所述，CSS属性仅适用于最新的浏览器版本。Internet Explorer 6到8无法识别这些CSS属性，并且无法在浏览器中输出结果。因此，作为补充，我们还将利用一些polyfill来使我们的博客在旧版Internet
    Explorer中呈现出色。*'
- en: '*It''s going to be an adventurous chapter. Let''s go.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*这将是一个充满冒险的章节。让我们开始吧。*'
- en: 'In this chapter, we shall cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Looking into CSS3 properties and CSS libraries, which we are going to use in
    the blog
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究CSS3属性和CSS库，我们将在博客中使用
- en: Compile and minify style sheets and JavaScripts with Koala
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Koala编译和压缩样式表和JavaScript
- en: Compose the blog style rules with the mobile-first approach
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用移动优先的方法撰写博客样式规则
- en: Optimize the blog for desktop
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化博客以适应桌面
- en: Patch the blog in Internet Explorer with polyfills
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用polyfill在Internet Explorer中修复博客
- en: Using CSS3
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS3
- en: CSS3 ships with long-awaited properties, `border-radius` and `box-shadow`, that
    simplify old and tedious methods that were used to present rounded corner and
    drop shadow in HTML. On top of that, it also brings a new type of pseudo-element
    that enables us to style the placeholder text shown in input fields through the
    HTML5 `placeholder` attribute.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3配备了期待已久的属性，`border-radius`和`box-shadow`，简化了在HTML中呈现圆角和阴影的旧方法。除此之外，它还带来了一种新类型的伪元素，使我们能够通过HTML5的`placeholder`属性来样式化输入字段中显示的占位文本。
- en: Let's take a look at how they work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们是如何工作的。
- en: Creating rounded corners with CSS3
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS3创建圆角
- en: Back in the 90s, creating a rounded corner was complicated. Adding a pile of
    HTML markup, slicing out images, and formulating multiple line style of rules
    is inevitable, as presented in the post by Ben Ogle at [http://benogle.com/2009/04/29/css-round-corners.html](http://benogle.com/2009/04/29/css-round-corners.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回到90年代，创建圆角是很复杂的。添加大量的HTML标记，切割图像，并制定多行样式规则是不可避免的，正如Ben Ogle在[http://benogle.com/2009/04/29/css-round-corners.html](http://benogle.com/2009/04/29/css-round-corners.html)的文章中所述。
- en: 'CSS3 makes it much simpler to create rounded corners with the `border-radius`
    property, and the following is an example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3使得使用`border-radius`属性创建圆角变得更加简单，以下是一个例子：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding style rule will round the box corner (read the *A word on CSS
    Box Model* section in [Chapter 1](part0016.xhtml#aid-F8902 "Chapter 1. Responsive
    Web Design"), *Responsive Web Design*) each for `30px`, as shown in the following
    figure:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述样式规则将使盒子的角变圆（阅读[第1章](part0016.xhtml#aid-F8902 "第1章。响应式网页设计")中的*关于CSS盒模型的一些话*部分，*响应式网页设计*），每个角为`30px`，如下图所示：
- en: '![Creating rounded corners with CSS3](img/image00254.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS3创建圆角](img/image00254.jpeg)'
- en: 'Furthermore, we can also round only to specific corners. The following code
    snippet, for example, will round only the top-right corner:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以只将特定的角进行圆角处理。例如，以下代码片段将只圆角处理右上角：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating drop shadow
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建阴影
- en: 'Much the same as creating rounded corners, using images was unavoidable to
    create shadow effects in the website in the past. Now, adding a drop shadow has
    been made easy with the introduction of the `box-shadow` property. The `box-shadow`
    property consists of five parameters (or values):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建圆角类似，过去在网站中创建阴影效果时不可避免地需要使用图片。现在，通过引入`box-shadow`属性，添加阴影效果变得更加容易。`box-shadow`属性由五个参数（或值）组成：
- en: The first parameter specifies where the shadow takes place. This parameter is
    optional. Set the value to `inset` to let the shadow appear inside the box or
    leave it empty to display the shadow outside.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数指定了阴影的位置。这个参数是可选的。将值设置为`inset`，让阴影出现在盒子内部，或者留空以在外部显示阴影。
- en: The second parameter specifies the **shadow vertical** and **horizontal distance**
    from the box.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数指定了盒子的**阴影垂直**和**水平距离**。
- en: The third parameter specifies the **shadow blur** that fades the shadow; a bigger
    number will produce a bigger but faded shadow.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数指定了**阴影模糊**，使阴影变淡；数字越大，产生的阴影就越大但也更加淡化。
- en: The fourth parameter specifies the **shadow expansion**; this value is slightly
    contradicted to the shadow blur value. This value will enlarge yet also intensify
    the shadow depth.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个参数指定了**阴影扩展**；这个值与阴影模糊值略有矛盾。这个值会放大，同时也加强阴影的深度。
- en: The last parameter specifies the color. The color can be in any web-compatible
    color format, including Hex, RGB, RGBA, and HSL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数指定了颜色。颜色可以是任何网络兼容的颜色格式，包括Hex、RGB、RGBA和HSL。
- en: 'Carrying on the preceding example, we can add up `box-shadow`, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 延续前面的例子，我们可以添加`box-shadow`，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code will output the shadow, as shown in the following figure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将输出阴影，如下图所示：
- en: '![Creating drop shadow](img/image00255.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS3创建阴影](img/image00255.jpeg)'
- en: 'Add `inset` at the beginning if you want to show the shadow inside the box,
    as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在框内显示阴影，请在开头添加`inset`，如下：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The CSS3 `box-shadow` property can be applied in many creative ways, and the
    following is an example by Paul Underwood, for your inspiration:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3的`box-shadow`属性可以以许多创造性的方式应用，以下是Paul Underwood的一个示例，供您参考：
- en: '[http://www.paulund.co.uk/creating-different-css3-box-shadows-effects](http://www.paulund.co.uk/creating-different-css3-box-shadows-effects)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.paulund.co.uk/creating-different-css3-box-shadows-effects](http://www.paulund.co.uk/creating-different-css3-box-shadows-effects)'
- en: CSS3 browser supports and the use of vendor prefix
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3浏览器支持和厂商前缀的使用
- en: Both the `border-radius` and `box-shadow` properties have been well-implemented
    in many browsers. Technically, if we would cater only to the latest browser versions,
    we do not need to include the so-called vendor prefix.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`border-radius`和`box-shadow`属性在许多浏览器中得到了很好的实现。从技术上讲，如果我们只针对最新的浏览器版本，就不需要包括所谓的厂商前缀。'
- en: 'Yet, if we intend to enable these two properties, `border-radius` and `box-shadow`,
    back in the earliest browser versions, where they were still marked as experimental
    by the browser vendors such as Safari 3, Chrome 4, and Firefox 3, adding the vendor
    prefix is required. Each browser has its prefix as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们打算在最早期的浏览器版本中启用这两个属性`border-radius`和`box-shadow`，在这些浏览器版本中，如Safari 3、Chrome
    4和Firefox 3，它们仍然被浏览器供应商标记为实验性的，需要添加厂商前缀。每个浏览器的前缀如下：
- en: '`-webkit-`: This is the Webkit-based browsers prefix, which currently includes
    Safari, Chrome, and Opera.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-webkit-`：这是基于WebKit的浏览器前缀，目前包括Safari、Chrome和Opera。'
- en: '`-moz-`: This is the Mozilla Firefox prefix.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-moz-`：这是Mozilla Firefox的前缀。'
- en: '`-ms-`: This is the Internet Explorer prefix. But Internet Explorer has been
    supporting `border-radius` and `box-shadow` since Internet Explorer 9 without
    the need to add this prefix.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-`：这是Internet Explorer的前缀。但自Internet Explorer 9以来，Internet Explorer已经支持`border-radius`和`box-shadow`，无需添加此前缀。'
- en: 'Let''s carry on our previous examples (again). With the addition of the vendor
    prefix to cater to the earliest versions of Chrome, Safari, and Firefox, the code
    would be as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们之前的例子（再次）。通过添加厂商前缀以适应Chrome、Safari和Firefox的最早版本，代码如下：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code may turn out to be a bit longer; still it is preferable over having
    to cope with complicated markups and multiple style rules.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可能会变得有点长；但这仍然比应对复杂的标记和多个样式规则要好。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Chrome and its new browser engine, Blink**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chrome及其新的浏览器引擎Blink**'
- en: Chrome decided to fork Webkit and built its own browser engine on top of it,
    named Blink ([http://www.chromium.org/blink](http://www.chromium.org/blink)).
    Opera, which previously discarded its initial engine (Presto) for Webkit, follows
    along the Chrome movement. Blink eliminates the use of the vendor prefix, so we
    would not find `-blink-` prefix or such like. In Chrome's latest versions, instead
    of using the vendor prefix, Chrome disables experimental features by default.
    Yet, we can enable it through the options in the `chrome://flags` page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome决定分叉WebKit，并在其上构建自己的浏览器引擎，名为Blink（[http://www.chromium.org/blink](http://www.chromium.org/blink)）。Opera之前放弃了其初始引擎（Presto）以使用WebKit，现在也跟随Chrome的动向。Blink取消了厂商前缀的使用，因此我们不会找到`-blink-`前缀或类似的前缀。在Chrome的最新版本中，Chrome默认禁用实验性功能。但是，我们可以通过`chrome://flags`页面中的选项来启用它。
- en: Customizing to placeholder text styles
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义占位符文本样式
- en: With the addition of HTML5, the placeholder attribute brings the question of
    how to customize the placeholder text. By default, browsers display the placeholder
    text with a light gray color. How do we change, for example, the color or the
    font size?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 随着HTML5的加入，占位符属性带来了如何自定义占位符文本的问题。默认情况下，浏览器以浅灰色显示占位符文本。例如，我们如何更改颜色或字体大小？
- en: At the time of writing this, each browser has its own way in this regard. WebKit-based
    browsers, such as Safari, Chrome, and Opera, use `::-webkit-input-placeholder`.
    Internet Explorer 10 uses `:-ms-input-placeholder`. Firefox 4 to 18, on the other
    hand, use `pseudo-class`, `:-moz-placeholder`, but it has then been replaced with
    the pseudo-element `::-moz-placeholder` (notice the double colons) since Firefox
    19 to keep up with the standard.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，每个浏览器在这方面都有自己的方式。基于WebKit的浏览器，如Safari、Chrome和Opera，使用`::-webkit-input-placeholder`。而Internet
    Explorer 10使用`:-ms-input-placeholder`。另一方面，Firefox 4到18使用`伪类` `:-moz-placeholder`，但自Firefox
    19以来已被伪元素`::-moz-placeholder`（注意双冒号）所取代，以符合标准。
- en: 'These selectors cannot be used in tandem within a single style rule. So, the
    following code snippet will not work:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选择器不能在单个样式规则中同时使用。因此，以下代码片段将不起作用：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'They have to be declared in a single style rule declaration, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它们必须在单个样式规则声明中声明，如下：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is definitely inefficient; we added extra lines only to achieve the same
    output. There isn't another viable option at the moment. The standard for styling
    the placeholder is still in discussion (see the CSSWG discussion at [http://wiki.csswg.org/ideas/placeholder-styling](http://wiki.csswg.org/ideas/placeholder-styling)
    and [http://wiki.csswg.org/spec/css4-ui#more-selectors](http://wiki.csswg.org/spec/css4-ui#more-selectors)
    for more details).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是低效的；我们只是为了达到相同的输出而添加了额外的行。目前还没有其他可行的选择。对于样式化占位符的标准仍在讨论中（请参阅[http://wiki.csswg.org/ideas/placeholder-styling](http://wiki.csswg.org/ideas/placeholder-styling)和[http://wiki.csswg.org/spec/css4-ui#more-selectors](http://wiki.csswg.org/spec/css4-ui#more-selectors)中的CSSWG讨论了解更多细节）。
- en: Using CSS libraries
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS库
- en: The underlying thing that distinguishes between a CSS library and a CSS framework
    is the problem it addresses. For example, a CSS framework, such as Blueprint ([http://www.blueprintcss.org/](http://www.blueprintcss.org/)),
    is designed as a foundation or starting point of a new website. It generally ships
    with various pieces of libraries to encompass many circumstances. A CSS library,
    on the other hand, addresses a very specific thing. Generally, a CSS library is
    also not tied down to a particular framework. `Animate.css` ([http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/))
    and `Hover.css` ([http://ianlunn.github.io/Hover/](http://ianlunn.github.io/Hover/))
    are two perfect examples in this regard. Both of them are CSS libraries. They
    can be used along with any framework.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 区分CSS库和CSS框架的基本事情是它所解决的问题。例如，CSS框架，如Blueprint ([http://www.blueprintcss.org/](http://www.blueprintcss.org/))，旨在作为新网站的基础或起点。它通常附带各种库的组件，以涵盖许多情况。另一方面，CSS库解决的是非常具体的问题。一般来说，CSS库也不受限于特定的框架。`Animate.css`
    ([http://daneden.github.io/animate.css/](http://daneden.github.io/animate.css/))
    和 `Hover.css` ([http://ianlunn.github.io/Hover/](http://ianlunn.github.io/Hover/))
    就是两个完美的例子。它们都是CSS库。它们可以与任何框架一起使用。
- en: Herein, we will integrate two CSS libraries into the blog, namely `Normalize`
    ([http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/))
    and `Formalize` ([http://formalize.me/](http://formalize.me/)). These CSS libraries
    will standardize basic element styles across different browsers and minimize styling
    errors that may unexpectedly occur.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将把两个CSS库整合到博客中，即`Normalize` ([http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/))
    和 `Formalize` ([http://formalize.me/](http://formalize.me/))。这些CSS库将标准化不同浏览器中的基本元素样式，并最小化可能意外发生的样式错误。
- en: Working with Koala
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Koala
- en: Once we have explored all the things that we are going to include in this project,
    let's set up the tool to put them together. In [Chapter 1](part0016.xhtml#aid-F8902
    "Chapter 1. Responsive Web Design"), *Responsive Web Design*, we have installed
    Koala. Koala is a free and open source development tool that ships with many features.
    In this first project, we will use Koala to compile style sheets and JavaScripts
    into a single file, as well as minify the codes to result in a smaller file size.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们探索了这个项目中要包含的所有内容，让我们设置工具将它们整合在一起。在[第1章](part0016.xhtml#aid-F8902 "第1章。响应式网页设计")中，*响应式网页设计*，我们已经安装了Koala。Koala是一个免费的开源开发工具，具有许多功能。在这个第一个项目中，我们将使用Koala来将样式表和JavaScript编译成一个文件，并将代码压缩以得到更小的文件大小。
- en: 'There will be about five style sheets that we are going to include in the blog.
    If we load all these style sheets separately, the browsers will have to pull off
    five HTTP requests, as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在博客中包含大约五个样式表。如果我们分别加载所有这些样式表，浏览器将不得不发出五个HTTP请求，如下面的截图所示：
- en: '![Working with Koala](img/image00256.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![使用Koala工作](img/image00256.jpeg)'
- en: As shown in the preceding screenshot, the browser performs five HTTP requests
    to load all the style sheets, which have a size of 24.4 KB in total and require
    around 228 ms in total to load.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，浏览器执行了五个HTTP请求来加载所有样式表，总共大小为24.4 KB，需要大约228毫秒来加载。
- en: Combining these style sheets into a single file and squishing the codes therein
    will speed up the page-load performance. The style sheet can also become significantly
    smaller, which eventually will also save bandwidth consumption.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些样式表合并成一个文件并压缩其中的代码将加快页面加载速度。样式表也会变得显著更小，最终也会节省带宽消耗。
- en: 'As shown in the following screenshot, the browser only performs one HTTP request;
    the style sheet size is reduced to 13.5KB, and takes only 111 ms to load. The
    page loads about 50 percent faster in comparison with the preceding example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如下面的截图所示，浏览器只执行了一个HTTP请求；样式表大小减小到13.5KB，加载时间只需111毫秒。与前面的例子相比，页面加载速度提高了约50%：
- en: '![Working with Koala](img/image00257.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![使用Koala工作](img/image00257.jpeg)'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practices to speed up website performance:**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**加快网站性能的最佳实践：**'
- en: Head over to YSlow! performance rules ([https://developer.yahoo.com/performance/rules.html](https://developer.yahoo.com/performance/rules.html))
    or Google PageSpeed Insight rules ([https://developers.google.com/speed/docs/insights/rules](https://developers.google.com/speed/docs/insights/rules))
    for further steps to make a website load faster, aside from combining style sheets
    and JavaScripts.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前往YSlow！性能规则 ([https://developer.yahoo.com/performance/rules.html](https://developer.yahoo.com/performance/rules.html))
    或 Google PageSpeed Insight规则 ([https://developers.google.com/speed/docs/insights/rules](https://developers.google.com/speed/docs/insights/rules))，了解除了合并样式表和JavaScript之外，使网站加载更快的进一步步骤。
- en: Time for action – integrating project directory into Koala and combining the
    style sheets
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 将项目目录整合到Koala并合并样式表
- en: 'In this section, we will integrate the configured Koala to compile and output
    the style sheets, by performing the following steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将整合配置好的Koala来编译和输出样式表，执行以下步骤：
- en: Create a new style sheet in the `css` folder named `main.css`. This is the prime
    style sheet, where we will compose our own style rules for the blog.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`css`文件夹中创建一个名为`main.css`的新样式表。这是主要的样式表，我们将在其中为博客编写自己的样式规则。
- en: Create a new style sheet named `style.css`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`style.css`的新样式表。
- en: Download `normalize.css` ([http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/)),
    and put it in the `css` folder of the project directory.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`normalize.css` ([http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/))，并将其放入项目目录的`css`文件夹中。
- en: Download `formalize.css` ([http://formalize.me/](http://formalize.me/)), and
    also put it in the `css` folder of the project directory.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载`formalize.css` ([http://formalize.me/](http://formalize.me/))，并将其放入项目目录的`css`文件夹中。
- en: Open `style.css` in Sublime Text.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Sublime Text中打开`style.css`。
- en: 'Import the supporting style sheets using the `@import` rule in the following
    order, as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@import`规则按以下顺序导入支持的样式表，如下所示：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Launch Koala. Then, drag-and-drop the project directory into the Koala sidebar.
    Koala will show and list recognizable files, as shown in the following screenshot:![Time
    for action – integrating project directory into Koala and combining the style
    sheets](img/image00258.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Koala。然后，将项目目录拖放到Koala侧边栏中。Koala将显示并列出可识别的文件，如下截图所示：![行动时间-将项目目录整合到Koala中并合并样式表](img/image00258.jpeg)
- en: Select `style.css` and tick **Auto Compile** to compile `style.css` automatically
    whenever Koala detects a change in it. Have a look at the following screenshot:![Time
    for action – integrating project directory into Koala and combining the style
    sheets](img/image00259.jpeg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`style.css`并选中**自动编译**，以便在Koala检测到其中的更改时自动编译`style.css`。查看以下截图：![行动时间-将项目目录整合到Koala中并合并样式表](img/image00259.jpeg)
- en: Select the **Combine Import** option to let Koala combine the content within
    the style sheets (the content that was included in `style.css`) with the `@import`
    rule. Take a look at the following screenshot:![Time for action – integrating
    project directory into Koala and combining the style sheets](img/image00260.jpeg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**合并导入**选项，让Koala将样式表中的内容（包括`style.css`中包含的内容）与`@import`规则合并。查看以下截图：![行动时间-将项目目录整合到Koala中并合并样式表](img/image00260.jpeg)
- en: Set **Output Style:** to **compress**. Take a look at the following screenshot:![Time
    for action – integrating project directory into Koala and combining the style
    sheets](img/image00261.jpeg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**输出样式**设置为**压缩**。查看以下截图：![行动时间-将项目目录整合到Koala中并合并样式表](img/image00261.jpeg)
- en: This will compress the style rules into a single line, which eventually will
    make the `style.css` file size smaller.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把样式规则压缩成一行，最终会使`style.css`文件大小变小。
- en: Click on the **Compile** button. Take a look at the following screenshot:![Time
    for action – integrating project directory into Koala and combining the style
    sheets](img/image00262.jpeg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**编译**按钮。查看以下截图：![行动时间-将项目目录整合到Koala中并合并样式表](img/image00262.jpeg)
- en: This will compile `style.css` and generate a new file named `style.min.css`
    as the output.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译`style.css`并生成一个名为`style.min.css`的新文件作为输出。
- en: 'Open `index.html` and link `style.min.css`. using the following code:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`并链接`style.min.css`，使用以下代码：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*What just happened?*'
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We have just integrated the project directory within Koala. We have also created
    two new style sheets, namely, `main.css` and `style.css`. We have also put together
    five style sheets, including `main.css`, in the `style.css` file using the `@import`
    rule. We combined these files and generated a new style sheet named `style.min.css`,
    which can be found inline with `style.css`, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在Koala中整合了项目目录。我们还创建了两个新的样式表，分别是`main.css`和`style.css`。我们还使用`@import`规则将五个样式表，包括`main.css`，合并到了`style.css`文件中。我们合并了这些文件，并生成了一个名为`style.min.css`的新样式表，它可以在`style.css`中找到，如下截图所示：
- en: '![What just happened?](img/image00263.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00263.jpeg)'
- en: Finally, we link the minified style sheet, `style.min.css`, in `index.html`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在`index.html`中链接了压缩后的样式表`style.min.css`。
- en: Have a go hero – renaming the output
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄试试看-重命名输出
- en: 'The `style.min.css` name is the default name set by Koala; it inserts the suffix,
    `min`, to every minified output. Though it is the most popular naming convention
    for minified web source files, style sheets, and JavaScript, Koala allows you
    to rename the output to match your personal liking. To do so, click on the edit
    icon that is highlighted with a circle in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`style.min.css`是Koala设置的默认名称；它会在每个压缩输出中插入后缀`min`。虽然这是压缩的Web源文件、样式表和JavaScript最流行的命名约定，但Koala允许您重命名输出以匹配您的个人喜好。要这样做，请单击以下截图中用圆圈标出的编辑图标：'
- en: '![Have a go hero – renaming the output](img/image00264.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![英雄试试看-重命名输出](img/image00264.jpeg)'
- en: 'The following are a few alternative naming ideas you can try:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些您可以尝试的替代命名想法：
- en: '`style-min.css` (with dash)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style-min.css`（带有破折号）'
- en: '`styles.min.css` (with the `s`)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles.min.css`（带有`s`）'
- en: '`blog.css` (refers to the website name)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blog.css`（指的是网站名称）'
- en: However, don't forget to change the name specified in the `<link>` element that
    refers to the style sheet as well if you decided to rename the output other than
    `style.min.css` as we managed in the preceding steps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您决定重命名输出而不是像我们在前面的步骤中那样管理`style.min.css`，请不要忘记更改`<link>`元素中指向样式表的名称。
- en: Pop quiz – website performance rules
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验-网站性能规则
- en: Q1\. Which of the following rules is not the one to improve website performance?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 以下哪条规则不是用于改善网站性能的规则？
- en: Minifying resources such as CSS and JavaScript.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压缩资源，如CSS和JavaScript。
- en: Compressing image files.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压缩图像文件。
- en: Leveraging browser cache.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用浏览器缓存。
- en: Using CSS shorthand properties.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSS简写属性。
- en: Using CDN to deliver web resources.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CDN传递Web资源。
- en: Thinking mobile first
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先考虑移动端
- en: Before we get our hands on the code, let's talk about the mobile-first approach
    that will drive our decision on writing part of the blog style rules.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们动手编写代码之前，让我们谈谈移动优先的方法，这将驱动我们在写部分博客样式规则时的决定。
- en: Mobile-first is one of the buzzwords in the web design community. Mobile-first
    is a new way of thinking on building websites of today, which also guides the
    pattern to build websites that are optimized for mobile use. As mentioned in [Chapter
    1](part0016.xhtml#aid-F8902 "Chapter 1. Responsive Web Design"), *Responsive Web
    Design*, mobile users are growing and desktop is no longer the main platform where
    users can access the web.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先是Web设计社区中的热词之一。移动优先是一种新的思维方式，用于构建今天的网站，也指导着构建针对移动使用优化的网站的模式。正如[第1章](part0016.xhtml#aid-F8902
    "第1章.响应式Web设计")中所述，*响应式Web设计*，移动用户正在增加，桌面不再是用户访问Web的主要平台。
- en: The mobile-first concept drives us to think and prioritize mobile use on building
    the website blocks, including how we compose style rules and media queries. In
    addition, adopting mobile-first thinking, as Brad Frost demonstrated in his blog
    post ([http://bradfrostweb.com/blog/post/7-habits-of-highly-effective-media-queries/](http://bradfrostweb.com/blog/post/7-habits-of-highly-effective-media-queries/)),
    allows producing leaner codes than the other way around (desktop to mobile). Herein,
    we will first optimize and address the blog for mobile and then enhance to the
    desktop version afterwards.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先的概念驱使我们在构建网站块时考虑和优先考虑移动使用，包括我们如何组合样式规则和媒体查询。此外，采用移动优先思维，正如Brad Frost在他的博客文章中所展示的（[http://bradfrostweb.com/blog/post/7-habits-of-highly-effective-media-queries/](http://bradfrostweb.com/blog/post/7-habits-of-highly-effective-media-queries/)），允许生成比另一种方式（从桌面到移动）更精简的代码。在这里，我们将首先优化和处理移动端的博客，然后再增强到桌面版本。
- en: 'Mobile-first is beyond the capacity of this book. The following are some of
    my recommendation sources to dig into this topic further:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 移动优先不在本书的范围之内。以下是一些我推荐的进一步了解这个主题的来源：
- en: Mobile First by Luke Wroblewski ([http://www.abookapart.com/products/mobile-first](http://www.abookapart.com/products/mobile-first))
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Luke Wroblewski的《Mobile First》（[http://www.abookapart.com/products/mobile-first](http://www.abookapart.com/products/mobile-first)）
- en: Mobile First Responsive Web Design by Brad Frost ([http://bradfrostweb.com/blog/web/mobile-first-responsive-web-design/](http://bradfrostweb.com/blog/web/mobile-first-responsive-web-design/))
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brad Frost的《Mobile First Responsive Web Design》（[http://bradfrostweb.com/blog/web/mobile-first-responsive-web-design/](http://bradfrostweb.com/blog/web/mobile-first-responsive-web-design/)）
- en: Building a Better Responsive Website by Jeremy Girard ([http://www.smashingmagazine.com/2013/03/05/building-a-better-responsive-website/](http://www.smashingmagazine.com/2013/03/05/building-a-better-responsive-website/))
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jeremy Girard的《Building a Better Responsive Website》（[http://www.smashingmagazine.com/2013/03/05/building-a-better-responsive-website/](http://www.smashingmagazine.com/2013/03/05/building-a-better-responsive-website/)）
- en: Composing the blog styles
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合博客样式
- en: In the preceding sections, we added third-party styles that lay down the blog
    appearance fundamentals. Starting in this section, we are going to compose our
    own style rules for the blog. We will begin from the header then go down to the
    footer.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们添加了第三方样式，奠定了博客外观的基础。从本节开始，我们将为博客编写自己的样式规则。我们将从页眉开始，然后逐步到页脚。
- en: Time for action – composing the base style rules
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动-组合基本样式规则
- en: In this section, we are going to write blog base styles. These style rules encompass
    the content font family, the font size, and a number of elements therein in general.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将编写博客的基本样式。这些样式规则包括内容字体系列，字体大小，以及其中的许多元素。
- en: First of all, it is my personal opinion that using the default system font such
    as Arial and Times is so boring.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我个人认为使用默认系统字体如Arial和Times非常无聊。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Due to the browser support and font license restriction, we were only able to
    use fonts that were installed in the user's operating system. Consequently, for
    more than a decade, we're stuck to a very limited choice of fonts we can use on
    the Web, and many websites use the same set of fonts, such as Arial, Times, and
    even Comic Sans. So, yes, these are boring fonts.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浏览器支持和字体许可限制，我们只能使用用户操作系统中安装的字体。因此，十多年来，我们在网页上只能使用非常有限的字体选择，许多网站使用相同的一组字体，如Arial，Times，甚至Comic
    Sans。所以，是的，这些都是无聊的字体。
- en: Today, with the advancement in `@font-face` specification, as well as the license
    of font usage on the Web, we are now able to use fonts on the website outside
    the font selection of the user's computer. There are also now larger collections
    of fonts that we can embed on the Web for free, such as the ones that we can find
    in Google Font ([http://www.google.com/fonts](http://www.google.com/fonts)), Open
    Font Library ([http://openfontlibrary.org/](http://openfontlibrary.org/)), Font
    Squirrel ([http://www.fontsquirrel.com](http://www.fontsquirrel.com)), Fonts for
    Web ([http://fontsforweb.com/](http://fontsforweb.com/)), and Adobe Edge Web Font
    ([https://edgewebfonts.adobe.com/](https://edgewebfonts.adobe.com/)).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，随着`@font-face`规范的进步，以及在网页上使用字体的许可，我们现在能够在网站上使用用户计算机字体选择之外的字体。现在也有更大的免费字体集合可以嵌入到网页中，比如我们可以在Google
    Font（[http://www.google.com/fonts](http://www.google.com/fonts)）、Open Font Library（[http://openfontlibrary.org/](http://openfontlibrary.org/)）、Font
    Squirrel（[http://www.fontsquirrel.com](http://www.fontsquirrel.com)）、Fonts for
    Web（[http://fontsforweb.com/](http://fontsforweb.com/)）和Adobe Edge Web Font（[https://edgewebfonts.adobe.com/](https://edgewebfonts.adobe.com/)）中找到的字体。
- en: I really encourage web designers to explore more the possibility of, and build,
    a more enriched website using the custom fonts on their websites.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的鼓励网页设计师更多地探索使用自定义字体在他们的网站上构建更丰富的网站的可能性。
- en: 'Perform the following steps to compose the base style rules:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来组合基本样式规则：
- en: To make our blog look more refreshing, we will use a couple of custom fonts
    from the Google Font library. Google Font has made it easy for us to use fonts
    on the Web. Google has taken care of the hassle of writing the syntax, as well
    as ensuring that the font formats are compatible in all major browsers.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的博客看起来更加清新，我们将从Google Font库中使用一些自定义字体。Google Font让我们能够在网页上使用字体变得更加容易。Google已经解决了编写语法的麻烦，同时确保字体格式在所有主要浏览器中兼容。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Speaking of which, refer to the Paul Irish post, *Bulletproof @font-face syntax*
    ([http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/](http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/)),
    for further help on composing CSS3 `@font-face` syntax that works across all browsers.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，可以参考Paul Irish的文章，“Bulletproof @font-face syntax”（[http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/](http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/)），以获取有关在所有浏览器中工作的CSS3
    `@font-face` 语法的进一步帮助。
- en: 'In addition, we won''t be befuddled with the font license, as Google Font is
    completely free. All we have to do is add a special style sheet as explained in
    this page [https://developers.google.com/fonts/docs/getting_started#Quick_Start](https://developers.google.com/fonts/docs/getting_started#Quick_Start).
    In our case, add the following link before the prime style sheet link:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们不会被字体许可证所困扰，因为Google字体是完全免费的。我们所要做的就是按照此页面中的说明添加一个特殊的样式表[https://developers.google.com/fonts/docs/getting_started#Quick_Start](https://developers.google.com/fonts/docs/getting_started#Quick_Start)。在我们的情况下，在主要样式表链接之前添加以下链接：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Upon doing so, we will be able to use the Droid Serif font family, along with
    Varela Round; see these font specimens and characters in the following web pages:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做后，我们将能够使用Droid Serif字体系列，以及Varela Round；请在以下网页中查看这些字体样本和字符：
- en: Droid Serif ([http://www.google.com/fonts/specimen/Droid+Serif](http://www.google.com/fonts/specimen/Droid+Serif))
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Droid Serif（[http://www.google.com/fonts/specimen/Droid+Serif](http://www.google.com/fonts/specimen/Droid+Serif)）
- en: Varela Round ([http://www.google.com/fonts/specimen/Varela+Round](http://www.google.com/fonts/specimen/Varela+Round))
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Varela Round（[http://www.google.com/fonts/specimen/Varela+Round](http://www.google.com/fonts/specimen/Varela+Round)）
- en: 'Set the entire element box sizing to `border-box`. Add the following line (as
    well as the other lines in the next steps) in `main.css`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整个元素框大小设置为`border-box`。在`main.css`中添加以下行（以及下一步中的其他行）：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We are going to set the blog main font, that is, the font that applies to the
    entire content of the blog. Herein, we will use Droid Serif of Google Font. Add
    the following style rules after the list of `@import` style sheet:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将设置博客的主要字体，即适用于博客整个内容的字体。在这里，我们将使用Google字体的Droid Serif。在`@import`样式表列表之后添加以下样式规则：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are going to apply a different font family for the headings (`h1`, `h2`,
    `h3`, `h4`, `h5`, and `h6`) in order to set it apart from the body content. Herein,
    we will apply the second custom font family that we brought from the Google Font
    collection, Varela Round.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为标题（`h1`，`h2`，`h3`，`h4`，`h5`和`h6`）应用不同的字体系列，以使其与正文内容区分开来。在这里，我们将应用从Google字体收集中带来的第二个自定义字体系列，Varela
    Round。
- en: 'Add the following line to apply Varela Round to the headings:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到标题应用Varela Round：
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The browsers, by default, set the headings' weight to `bold` or `600`. However,
    Varela Round only ships with normal font weight, which equates to `400`. So, as
    shown in the preceding code snippet, we have also set the `font-weight` to `400`
    to prevent the so-called *faux-bold*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，浏览器将标题的粗细设置为`bold`或`600`。然而，Varela Round只有普通字重，相当于`400`。因此，如前面的代码片段所示，我们还将`font-weight`设置为`400`，以防止所谓的*faux-bold*。
- en: Refer to the A List Apart article, *Say No to Faux Bold* ([http://alistapart.com/article/say-no-to-faux-bold](http://alistapart.com/article/say-no-to-faux-bold))
    for further information about faux-bold.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有关faux-bold的更多信息，请参阅A List Apart文章*Say No to Faux Bold*（[http://alistapart.com/article/say-no-to-faux-bold](http://alistapart.com/article/say-no-to-faux-bold)）。
- en: In this step, we will also customize the default anchor tag or link styles.
    It's my personal preference to remove the underline of the default link style.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，我们还将自定义默认的锚标签或链接样式。我个人偏好去掉默认链接样式的下划线。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even Google removes the underline of its search result ([http://www.theverge.com/2014/3/13/5503894/google-removes-underlined-links-site-redesign](http://www.theverge.com/2014/3/13/5503894/google-removes-underlined-links-site-redesign)).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 即使Google也删除了其搜索结果的下划线（[http://www.theverge.com/2014/3/13/5503894/google-removes-underlined-links-site-redesign](http://www.theverge.com/2014/3/13/5503894/google-removes-underlined-links-site-redesign)）。
- en: 'Furthermore, we also change the link color to `#3498db`. It''s blue, but subtler
    than the blue color applied as the default link style, as shown in the following
    screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将链接颜色更改为`#3498db`。它是蓝色的，但比默认链接样式中应用的蓝色更为柔和，如下面的截图所示：
- en: '![Time for action – composing the base style rules](img/image00265.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-撰写基本样式规则](img/image00265.jpeg)'
- en: 'Add the following lines to change the default link color:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行以更改默认链接颜色：
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will set the color of the link to hover state, as well. This color appears
    when the mouse cursor is over the link. Herein, we set the link hover color to
    `#2a84bf`, the darker version of the color we set in step 4\. Have a look at the
    following screenshot:![Time for action – composing the base style rules](img/image00266.jpeg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将设置链接的悬停状态颜色。当鼠标光标悬停在链接上时，将显示这种颜色。在这里，我们将链接悬停颜色设置为`#2a84bf`，这是我们在第4步中设置的颜色的较暗版本。请看下面的截图：![行动时间-撰写基本样式规则](img/image00266.jpeg)
- en: 'Add the following line to set the color of the link when it is in hover state,
    as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行以设置链接在悬停状态时的颜色，如下所示：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Make the image fluid with the following style rules, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下样式规则使图像具有流体性，如下所示：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In addition, these style rules will prevent the image from exceeding its container
    when the actual image width is larger than the container.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些样式规则将防止图像在实际图像宽度大于容器时超出容器。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to A List Apart article *Fluid Images* ([http://alistapart.com/article/fluid-images](http://alistapart.com/article/fluid-images))
    for further detail on fluid images.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有关流体图像的更多详细信息，请参阅A List Apart文章*Fluid Images*（[http://alistapart.com/article/fluid-images](http://alistapart.com/article/fluid-images)）。
- en: '*What just happened?*'
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We have just added style rules that address some elements in the blog, namely,
    the headings, the link, and the image. At this stage, there isn''t a significant
    difference yet that appears in the blog, except the font family change in the
    content and the headings, as well as the link color. Have a look at the following
    screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了一些样式规则，用于处理博客中的一些元素，即标题、链接和图像。在这个阶段，除了内容和标题中的字体系列更改以及链接颜色之外，博客中还没有出现明显的差异。请看下面的截图：
- en: '![What just happened?](img/image00267.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00267.jpeg)'
- en: Have a go hero – customizing the link color
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-自定义链接颜色
- en: Please note that the link color, `#2a84bf`, is my personal selection. There
    are a number of considerations when choosing a color, such as the brand, the audience,
    and the content. The link doesn't have to be `#2a84bf`. The link color in the
    Starbucks website ([http://www.starbucks.co.id/about-us/pressroom](http://www.starbucks.co.id/about-us/pressroom)),
    for example, is green, which refers to its brand identity.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，链接颜色`#2a84bf`是我个人的选择。在选择颜色时有许多考虑因素，例如品牌、受众和内容。链接不一定要是`#2a84bf`。例如，星巴克网站（[http://www.starbucks.co.id/about-us/pressroom](http://www.starbucks.co.id/about-us/pressroom)）中的链接颜色是绿色，这与其品牌身份有关。
- en: 'So, don''t be afraid to explore and try new colors. The following are a few
    color ideas:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不要害怕探索和尝试新的颜色。以下是一些颜色想法：
- en: '![Have a go hero – customizing the link color](img/image00268.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![尝试一下英雄-自定义链接颜色](img/image00268.jpeg)'
- en: Next, we will compose the blog header and navigation style rules. The style
    rules will mostly be applied through the element's classes. So, before proceeding,
    please refer to [Chapter 2](part0020.xhtml#aid-J2B81 "Chapter 2. Web Development
    Tools"), *Web Development Tools*, to see the class names and ID that we added
    in the elements.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将组合博客标题和导航样式规则。样式规则将主要通过元素的类应用。因此，在继续之前，请参考[第2章](part0020.xhtml#aid-J2B81
    "第2章。网页开发工具")*网页开发工具*，查看我们在元素中添加的类名和ID。
- en: Time for action – enhancing the header and the navigation appearance with CSS
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用CSS增强标题和导航外观
- en: 'The steps are as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: Open `main.css`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`main.css`。
- en: 'Add some whitespace surrounding the header with `padding`, and also set the
    header color to `#333`, as follows:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`padding`在标题周围添加一些空白，并将标题颜色设置为`#333`，如下所示：
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To make the logo look prominent, we will set it with Varela Round font, which
    is the same font family we used for the headings. We also make it bigger and transform
    the letters all to uppercase, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使标志看起来突出，我们将使用Varela Round字体，这是我们用于标题的相同字体系列。我们还会使它变大，并将所有字母转换为大写，如下所示：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The logo link color currently is `#2a84bf`, which is the common color we set
    for links `<a>`. This color does not suit well with the background color. Let''s
    change the color to white instead, as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标志链接颜色目前为`#2a84bf`，这是我们为链接`<a>`设置的常用颜色。这种颜色与背景颜色不搭配。让我们将颜色改为白色，如下所示：
- en: '[PRE18]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Set the search input styles, as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置搜索输入样式，如下所示：
- en: '[PRE19]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'These style rules set the input color, border color, and the background colors.
    It turns the input into something as shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式规则设置了输入颜色、边框颜色和背景颜色。它将输入变成了如下所示的东西：
- en: '![Time for action – enhancing the header and the navigation appearance with
    CSS](img/image00269.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用CSS增强标题和导航外观](img/image00269.jpeg)'
- en: 'As you can see in the preceding screenshot, the placeholder text is barely
    readable as the color blends with the input background color. So, let''s make
    the text color a bit darker, as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，占位文本几乎无法阅读，因为颜色与输入背景颜色融为一体。因此，让我们将文本颜色变得更深一些，如下所示：
- en: '[PRE20]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you use OS X or Ubuntu, you will see the glowing color that highlights the
    input when it is currently targeted, as shown in the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用OS X或Ubuntu，您将看到突出显示当前目标时输入的发光颜色，如下面的屏幕截图所示：
- en: '![Time for action – enhancing the header and the navigation appearance with
    CSS](img/image00270.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用CSS增强标题和导航外观](img/image00270.jpeg)'
- en: In OS X, the glowing color is blue. In Ubuntu, it will be orange.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X中，发光颜色是蓝色。在Ubuntu中，它将是橙色。
- en: 'I would like to remove this glowing effect. The glowing effect is technically
    shown through `box-shadow`. So, to remove this effect, we simply set the input
    `box-shadow` to `none`, as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我想要去掉这种发光效果。发光效果在技术上通过`box-shadow`显示。因此，为了去除这种效果，我们只需将输入的`box-shadow`设置为`none`，如下所示：
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: It's worth noting that the glowing effect is part of the **User Experience**
    (**UX**) design, telling the users that they are currently within the input field.
    This UX design is particularly helpful if the users were only able to navigate
    the website with a keyboard.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，发光效果是**用户体验**（**UX**）设计的一部分，告诉用户他们当前正在输入字段中。如果用户只能用键盘浏览网站，这种UX设计尤其有帮助。
- en: 'So, we will have to create an effect that brings a similar UX as a replacement.
    Herein, we will replace the glowing effect that we removed by lightening the input
    background color. The following is the complete code of this step:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，我们将不得不创建一种效果，以带来类似的用户体验作为替代。在这里，我们将通过使输入背景颜色变浅来替换我们去除的发光效果。以下是此步骤的完整代码：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The input background color becomes lighter when it is in focus, as shown in
    the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如下面的屏幕截图所示，当焦点在输入时，输入背景颜色会变浅：
- en: '![Time for action – enhancing the header and the navigation appearance with
    CSS](img/image00271.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用CSS增强标题和导航外观](img/image00271.jpeg)'
- en: 'We will write the style for the navigation. First, align the menu to the center,
    and add some whitespace at the top and the bottom of the navigation with the margin.
    Have a look at the following code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为导航编写样式。首先，将菜单对齐到中心，并在导航的顶部和底部添加一些空白，使用`margin`。看一下以下代码：
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remove the left-hand side padding of `<ul>`, as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`<ul>`的左侧填充，如下所示：
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add some whitespace between the menus with a margin, and remove the list bullet,
    as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单之间添加一些空白，并删除列表符号，如下所示：
- en: '[PRE25]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Customize the menu color and font, as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义菜单颜色和字体，如下所示：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*What just happened?*'
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have just decorated the header and the navigation. Corresponding to the mobile-first
    way of thinking, which we discussed earlier in this section, we first aim the
    styles to optimize the blog presentation in mobile.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚装饰了标题和导航。与我们在本节前面讨论的以移动设备为先的思维方式相对应，我们首先将样式定位到优化博客在移动设备上的呈现。
- en: 'Activate the Chrome mobile emulator, and you will see that the blog is optimized
    for a smaller screen size already; the logo and the menu, as shown in the following
    screenshot, are aligned to the center rather than aligned to the left:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 激活Chrome移动模拟器，您会发现博客已经针对较小的屏幕尺寸进行了优化；标志和菜单，如下截图所示，与其左对齐相比，已对齐到中心：
- en: '![What just happened?](img/image00272.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00272.jpeg)'
- en: Have a go hero – customizing the header
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-自定义页眉
- en: 'The blog header is given a dark color, `#333`. I truly understand that this
    color may look boring to some of you. Hence, freely customize the color as well
    as the style of the logo and the search input field. Some ideas are as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 博客页眉给予了深色，`#333`。我完全理解这种颜色可能对你们中的一些人来说很无聊。因此，可以自由定制颜色以及标志和搜索输入字段的样式。以下是一些想法：
- en: Use CSS3 gradients or image for the header background
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS3渐变或图像作为页眉背景
- en: Replace the logo with an image through the CSS image replacement method
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CSS图像替换方法用图像替换标志
- en: Reduce the search input border radius, change the background color, and adjust
    the placeholder text color
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少搜索输入边框半径，更改背景颜色，并调整占位符文本颜色
- en: Having managed the blog header as well as the navigation, we proceed to the
    blog content section. The content section includes the blog post items, and the
    blog pagination.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理了博客页眉和导航之后，我们继续处理博客内容部分。内容部分包括博客文章项目和博客分页。
- en: Time for action – enhancing the content section appearance with CSS
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用CSS增强内容部分的外观
- en: 'Perform the following steps to style the blog content:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来设置博客内容的样式：
- en: Add whitespace on all sides of the content section with `padding` and `margin`,
    as follows
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容部分的所有四周添加空白，使用`padding`和`margin`，如下所示
- en: '[PRE27]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Separate each blog post with some whitespace and borderline, as follows:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一些空白和边框来分隔每篇博客文章，如下所示：
- en: '[PRE28]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Align the title to the center, adjust the title font size a little, and change
    the color with the following style rules:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题对齐到中心，稍微调整标题字体大小，并使用以下样式规则更改颜色：
- en: '[PRE29]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Below the title, we have `post-meta`, which consists of the post author name
    and the post publishing date. Similar to the title, we also adjust the font size
    and the whitespace, and change the font color, as follows:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题下面，我们有`post-meta`，其中包括文章作者姓名和文章发布日期。与标题类似，我们还调整字体大小和空白，并更改字体颜色，如下所示：
- en: '[PRE30]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The post thumbnail, as you can see in the following screenshot, looks small
    and squished due to the margin on all its sides:![Time for action – enhancing
    the content section appearance with CSS](img/image00273.jpeg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您在下面的截图中所看到的，由于所有边缘的margin，文章缩略图看起来又小又挤：![行动时间-使用CSS增强内容部分的外观](img/image00273.jpeg)
- en: 'Let''s remove these margins, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们移除这些margin，如下所示：
- en: '[PRE31]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Some of the images, as shown in the following screenshot, have a caption:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，一些图片有标题：
- en: '![Time for action – enhancing the content section appearance with CSS](img/image00274.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-使用CSS增强内容部分的外观](img/image00274.jpeg)'
- en: 'Let''s style it to make it look distinctive from the rest of the content and
    also show that it is an image caption. Add the following lines of code to style
    the caption:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们对其进行样式设置，使其看起来与其他内容有所不同，并且显示它是一个图片标题。添加以下代码来设置标题的样式：
- en: '[PRE32]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Adjust the post excerpt font size, color, and line height, as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整文章摘录的字体大小、颜色和行高，如下所示：
- en: '[PRE33]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Starting in this step, we will write the style of the blog pagination. First,
    let''s make some adjustments to the font size, the font family, the whitespace,
    the position, and the alignment, as shown in the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这一步开始，我们将编写博客分页的样式。首先，让我们对字体大小、字体系列、空白、位置和对齐进行一些调整，如下所示：
- en: '[PRE34]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Decorate the pagination link with rounded corner borders, as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将分页链接装饰成圆角边框，如下所示：
- en: '[PRE35]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Specify the link decoration when the mouse cursor hovers over the links, as
    follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当鼠标悬停在链接上时指定链接的装饰，如下所示：
- en: '[PRE36]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, place the page number indicator at the top of the pagination links
    with the following style rules:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下样式规则将页面编号指示器放置在分页链接的顶部：
- en: '[PRE37]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '*What just happened?*'
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We just styled the blog content section—including the page navigation (pagination),
    and the following screenshot shows how the content section looks:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚对博客内容部分进行了样式设置，包括页面导航（分页），以下截图显示了内容部分的外观：
- en: '![What just happened?](img/image00275.jpeg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00275.jpeg)'
- en: Have a go hero – improving the content section
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-改进内容部分
- en: Most of the style rules we applied in the content section are decorative. It's
    something that you don't have to follow forcefully. Feel free to improve the styles
    to follow your personal taste.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在内容部分应用的大多数样式规则都是装饰性的。这不是您必须强制遵循的东西。请随意改进样式以符合您的个人品味。
- en: 'You can perform the following modifications:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以进行以下修改：
- en: Customize the post title font family and the colors
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义文章标题字体系列和颜色
- en: Apply border colors or rounded corners for the post image
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为文章图片应用边框颜色或圆角
- en: Change the pagination border colors, or make the background more colorful
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改分页边框颜色，或使背景更加丰富多彩
- en: Next, we will style the footer, the last section of the blog.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为博客的最后一部分-页脚进行样式设置。
- en: Time for action – enhancing the footer section appearance with CSS
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用CSS增强页脚部分的外观
- en: 'Perform the following steps to enhance the footer style:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来增强页脚的样式：
- en: 'Adjust the footer font, color, and the margin, as follows:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整页脚字体、颜色和margin，如下所示：
- en: '[PRE38]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The footer contains social media links. Let''s adjust the styles that encompass
    the margin, padding, alignment, colors, and whitespace, as follows:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页脚包含社交媒体链接。让我们调整包括margin、padding、对齐、颜色和空白的样式，如下所示：
- en: '[PRE39]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Set the margin-top out of the copyright container.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将margin-top设置为版权容器之外。
- en: '[PRE40]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Align the footer content to the center, as follows:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页脚内容对齐到中心，如下所示：
- en: '[PRE41]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*What just happened?*'
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We have just styled the footer section, and the following screenshot shows
    how the blog footer will look:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为页脚部分添加了样式规则，下面的截图显示了博客页脚的外观：
- en: '![What just happened?](img/image00276.jpeg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00276.jpeg)'
- en: Optimize the blog for desktop
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化博客以适应桌面
- en: 'The blog is currently optimized for mobile, or narrow viewport size. If you
    view it in a larger viewport size, you will find that some elements are misplaced
    or are not properly aligned. The blog logo and the navigation, for example, are
    currently aligned to the center, as you can see in the following screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 目前博客已经针对移动端或窄视口大小进行了优化。如果你在更大的视口大小下查看，你会发现一些元素位置不正确或未正确对齐。例如，博客标志和导航目前对齐到中间，如下截图所示：
- en: '![Optimize the blog for desktop](img/image00277.jpeg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![优化博客以适应桌面](img/image00277.jpeg)'
- en: As per our blueprint that we have shown you in [Chapter 3](part0027.xhtml#aid-PNV61
    "Chapter 3. Constructing a Simple Responsive Blog with Responsive.gs"), *Constructing
    a Simple Responsive Blog with Responsive.gs*, the logo should align to the left-hand
    side and each menu link should be displayed inline. In the upcoming steps, we
    will fix these through Media Queries; we will optimize the blog for desktop view.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在[第3章](part0027.xhtml#aid-PNV61 "第3章。使用Responsive.gs构建简单响应式博客")中展示的蓝图，*使用Responsive.gs构建简单响应式博客*，标志应该对齐到左侧，每个菜单链接应该内联显示。在接下来的步骤中，我们将通过媒体查询来修复这些问题；我们将优化博客以适应桌面视图。
- en: Time for action – composing style rules for desktop
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-为桌面编写样式规则
- en: 'Perform the following steps to compose style rules for desktop:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤为桌面编写样式规则：
- en: Open `responsive.css` in Sublime Text.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Sublime Text中打开`responsive.css`。
- en: 'Add the following media query:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下媒体查询：
- en: '[PRE42]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We will add all the style rules in the following steps within this media query.
    This media query specification will apply the style rules within the viewport
    width starting from 640 px and up.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的步骤中添加所有的样式规则到这个媒体查询中。这个媒体查询规定将应用样式规则在视口宽度从640像素及以上的范围内。
- en: 'Align the blog logo to the left-hand side, as follows:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将博客标志对齐到左侧，如下所示：
- en: '[PRE43]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Display the list item of the navigation menu, post meta, and social media inline,
    as follows:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导航菜单、文章元数据和社交媒体的列表项内联显示，如下所示：
- en: '[PRE44]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Increase the post title size, as follows:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加文章标题的大小，如下所示：
- en: '[PRE45]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Also, display the blog pagination links inline, as follows:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，将博客分页链接内联显示，如下所示：
- en: '[PRE46]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Put the pagination page indicator in its initial position—inline with the blog
    pagination link, as follows:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将分页页码指示器放在初始位置——与博客分页链接一起，如下所示：
- en: '[PRE47]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Align the social media links in the footer to the left and the copyright notice
    to the right, as follows:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页脚中的社交媒体链接对齐到左侧，版权声明对齐到右侧，如下所示：
- en: '[PRE48]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '*What just happened?*'
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We have just added style rules that address the blog for the desktop view.
    If you are now viewing the blog in the viewport width that is larger than 640
    px, you should find that the elements in the blog such as the logo and the navigation
    menu are in their common position, as shown in the following screenshot:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了适用于桌面视图的样式规则。如果你现在在大于640像素的视口宽度下查看博客，你应该会发现博客中的元素，如标志和导航菜单，处于它们通常的位置，如下截图所示：
- en: '![What just happened?](img/image00278.jpeg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00278.jpeg)'
- en: Making Internet Explorer more capable with polyfills
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用polyfills使Internet Explorer更强大
- en: 'With the use of glorious CSS3 and HTML5 features, comes a consequence: the
    layout failed and is broken in the old Internet Explorer, as you can see in the
    following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 使用辉煌的CSS3和HTML5功能会带来一个后果：布局在旧的Internet Explorer中失败并且破碎，如下截图所示：
- en: '![Making Internet Explorer more capable with polyfills](img/image00279.jpeg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![使用polyfills使Internet Explorer更强大](img/image00279.jpeg)'
- en: If you are okay with it, you can skip this section and head over to the next
    project immediately. However, if you feel adventurous, let's proceed to this section
    and fix those bugs.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此满意，可以跳过这一部分，立即转到下一个项目。然而，如果你感到有冒险精神，让我们继续这一部分并修复这些错误。
- en: Time for action – patch Internet Explorer with polyfills
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用polyfills修补Internet Explorer
- en: 'Perform the steps to patch Internet Explorer with polyfills:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 执行修补Internet Explorer的步骤：
- en: We have a number of polyfills in the scripts folder namely `html5shiv.js`, `respond.js`,
    and `placeholder.js`. Let's combine these scripts into a single file.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在scripts文件夹中有一些polyfills，分别是`html5shiv.js`，`respond.js`和`placeholder.js`。让我们将这些脚本合并成一个文件。
- en: First, create a new JavaScript file named `polyfills.js` that will hold the
    content of those polyfill scripts.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`polyfills.js`的新JavaScript文件，用于保存这些polyfill脚本的内容。
- en: Open `polyfills.js` in Sublime Text.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Sublime Text中打开`polyfills.js`。
- en: 'Add the following lines to import the polyfill scripts:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行来导入polyfill脚本：
- en: '[PRE49]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `@koala-prepend` directive is the Koala proprietary directive to import
    JavaScript files. Read more about it in the Koala documentation page at [https://github.com/oklai/koala/wiki/JS-CSS-minify-and-combine](https://github.com/oklai/koala/wiki/JS-CSS-minify-and-combine).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`@koala-prepend`指令是Koala专有的导入JavaScript文件的指令。在Koala文档页面[https://github.com/oklai/koala/wiki/JS-CSS-minify-and-combine](https://github.com/oklai/koala/wiki/JS-CSS-minify-and-combine)中了解更多信息。'
- en: In Koala, select `polyfills.js`, and click on the **Compile** button, as shown
    in the following screenshot:![Time for action – patch Internet Explorer with polyfills](img/image00280.jpeg)
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Koala中，选择`polyfills.js`，并点击**Compile**按钮，如下截图所示：![行动时间-使用polyfills修补Internet
    Explorer](img/image00280.jpeg)
- en: By this step, Koala will have generated the minified file named `polyfills.min.js`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一步，Koala将生成名为`polyfills.min.js`的压缩文件。
- en: 'Open `index.html`, and link `polyfills.js` before `</head>`, as follows:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中，在`</head>`之前链接`polyfills.js`，如下所示：
- en: '[PRE50]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since this script is only needed in Internet Explorer 8 and below, we encapsulate
    them with the Internet Explorer Conditional Comment, `<!--[if lt IE 9]>`, as you
    can see in the preceding code snippet.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个脚本只在Internet Explorer 8及以下版本中需要，我们用Internet Explorer条件注释`<!--[if lt IE 9]>`将它们封装起来，如你在前面的代码片段中所见。
- en: Refer to the QuirksMode article for further information about Internet Explorer
    Conditional Comments at [http://www.quirksmode.org/css/condcom.html](http://www.quirksmode.org/css/condcom.html).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Internet Explorer条件注释的更多信息，请参考QuirksMode文章[http://www.quirksmode.org/css/condcom.html](http://www.quirksmode.org/css/condcom.html)。
- en: '*What just happened?*'
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: 'We just applied polyfills in the blog to patch Internet Explorer rendering
    issues with HTML5 and Media Queries. These polyfills work out-of-the-box. Refresh
    Internet Explorer, and voila! Have a look at the following screenshot:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在博客中应用了polyfills来修复Internet Explorer在HTML5和媒体查询中的渲染问题。这些polyfills可以立即使用。刷新Internet
    Explorer，就完成了！请看下面的屏幕截图：
- en: '![What just happened?](img/image00281.jpeg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: 发生了什么？
- en: The style rules are applied, the layout is in position, and the placeholder
    text is there.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 样式规则已经应用，布局已经就位，占位文本也在那里。
- en: Have a go hero – polish the blog for Internet Explorer
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来吧英雄-为Internet Explorer完善博客
- en: 'We will end this project. But, as you can see from the preceding screenshot,
    there are still many things to address to make the blog appearance in the old
    Internet Explorer as good as in the latest browsers. For example:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将结束这个项目。但是，正如您从前面的屏幕截图中所看到的，仍然有许多问题需要解决，以使博客在旧版Internet Explorer中的外观与最新浏览器一样好。例如：
- en: Referring to the preceding screenshot, the placeholder text is currently aligned
    to the top. You can fix it and make it align vertically to the center.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考前面的屏幕截图，占位文本目前是对齐到顶部的。您可以修复它，使其垂直居中对齐。
- en: You can also apply a polyfill named CSS3Pie ([http://css3pie.com/](http://css3pie.com/))
    that brings the CSS3 border radius in Internet Explorer to make the search input
    field rounded as it is in the latest browser versions.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以应用一个名为CSS3Pie的polyfill（[http://css3pie.com/](http://css3pie.com/)），它可以在Internet
    Explorer中实现CSS3边框半径，使搜索输入字段的外观与最新的浏览器版本一样圆角。
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We completed the first project; we have built a simple, responsive blog using
    Responsive.gs. The end result of the blog may not be that enticing for you. It
    is also far from polished, particularly in the old Internet Explorer; as mentioned,
    there are still many things to address in that regard. Still, I hope you can take
    something useful from the process, the techniques, and the codes therein.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了第一个项目；我们使用Responsive.gs构建了一个简单的响应式博客。博客的最终结果可能对您来说并不那么吸引人。特别是在旧版Internet
    Explorer中，它也远非完美；正如前面提到的，仍然有许多问题需要解决。不过，我希望您能从这个过程中获得一些有用的东西，包括其中的技术和代码。
- en: To summarize, here is what we have done in this chapter, enhanced and polished
    the blog with CSS3, used Koala to combine and minimize style sheets and JavaScript
    files, and applied polyfills to patch Internet Explorer issues with HTML5 and
    CSS3.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在本章中，我们已经增强和完善了博客的CSS3，使用Koala来合并和最小化样式表和JavaScript文件，并应用了polyfills来修复Internet
    Explorer在HTML5和CSS3中的问题。
- en: In the next chapter, we will start the second project. We are going to explore
    another framework to build a more extensive and responsive website.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始第二个项目。我们将探索另一个框架，以构建一个更广泛和响应式的网站。
