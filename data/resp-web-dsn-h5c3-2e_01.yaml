- en: Chapter 1. The Essentials of Responsive Web Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 响应式网页设计的基本要素
- en: Only a few years ago, websites could be built at a fixed width, with the expectation
    that all end users would get a fairly consistent experience. This fixed width
    (typically 960px wide or thereabouts) wasn't too wide for laptop screens, and
    users with large resolution monitors merely had an abundance of margin either
    side.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅几年前，网站可以以固定宽度构建，预期所有最终用户都会获得相当一致的体验。这个固定宽度（通常为960像素宽或周围）对于笔记本电脑屏幕来说并不太宽，而具有大分辨率显示器的用户只是在两侧有大量的边距。
- en: But in 2007, Apple's iPhone ushered in the first truly usable phone browsing
    experience, and the way people access and interact with the Web changed forever.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在2007年，苹果的iPhone引领了第一个真正可用的手机浏览体验，人们访问和互动网络的方式永远改变了。
- en: 'In the first edition of this book, it was noted that:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的第一版中，曾经指出过：
- en: '*"in the 12 months from July 2010 to July 2011, global mobile browser use had
    risen from 2.86 to 7.02 percent."*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在2010年7月至2011年7月的12个月内，全球移动浏览器使用率从2.86％上升到7.02％。”
- en: In mid-2015, the same statistics system ([gs.statcounter.com](http://gs.statcounter.com))
    reported that this figure had risen to 33.47%. By way of comparison, North America's
    mobile figure is at 25.86%.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年中期，同一统计系统（[gs.statcounter.com](http://gs.statcounter.com)）报告称，这一数字已上升至33.47％。作为对比，北美的移动设备占比为25.86％。
- en: By any metric, mobile device usage is rising ever upwards, while at the other
    end of the scale, 27 and 30 inch displays are now also commonplace. There is now
    a greater difference between the smallest and the largest screens browsing the
    Web than ever before.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 无论从任何角度来看，移动设备的使用量都在不断增加，而与此同时，27英寸和30英寸的显示器现在也很常见。现在，浏览网络的最小屏幕和最大屏幕之间的差异比以往任何时候都要大。
- en: Thankfully, there is a solution to this ever-expanding browser and device landscape.
    A responsive web design, built with HTML5 and CSS3, allows a website to 'just
    work' across multiple devices and screens. It enables the layout and capabilities
    of a website to respond to their environment (screen size, input type, device/browser
    capabilities).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，对于不断扩大的浏览器和设备环境，有一个解决方案。使用HTML5和CSS3构建的响应式网页设计可以使网站在多个设备和屏幕上“只需工作”。它使网站的布局和功能能够响应其环境（屏幕大小，输入类型，设备/浏览器功能）。
- en: Furthermore, a responsive web design, built with HTML5 and CSS3, can be implemented
    without the need for server based/back-end solutions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用HTML5和CSS3构建的响应式网页设计可以在无需基于服务器的后端解决方案的情况下实现。
- en: Beginning our quest
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始我们的探索
- en: Whether you're new to responsive web design, HTML5, or CSS3, or already well
    versed, I'm hoping this first chapter will serve one of two purposes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是响应式网页设计，HTML5还是CSS3的新手，还是已经很熟练，我希望这一章能够达到两个目的中的一个。
- en: If you're already using HTML5 and CSS3 in your responsive web designs, this
    first chapter should serve as a quick and basic refresher. Alternatively, if you're
    a newcomer, think of it as a 'boot camp' of sorts, covering the essentials so
    we're all on the same page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在响应式网页设计中使用HTML5和CSS3，这一章应该作为一个快速和基本的复习。或者，如果您是新手，可以将其视为一种基本的“训练营”，涵盖基本要素，以便我们都在同一页面上。
- en: By the end of this first chapter, we will have covered everything you need to
    author a fully responsive web page.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将涵盖您需要编写完全响应式网页的所有内容。
- en: You might be wondering why the other nine chapters are here. By the end of this
    chapter, that should be apparent too.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道其他九章为什么在这里。在本章结束时，这一点也应该显而易见。
- en: 'Here''s what we will cover in this first chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的内容：
- en: Defining responsive web design
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义响应式网页设计
- en: How to set browser support levels
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置浏览器支持级别
- en: A brief discussion on tooling and text editors
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于工具和文本编辑器的简要讨论
- en: 'Our first responsive example: a simple HTML5 page'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的第一个响应式示例：一个简单的HTML5页面
- en: The importance of the viewport `meta` tag
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视口“meta”标签的重要性
- en: How to make images scale to their container
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使图像按比例缩放到其容器
- en: Writing CSS3 media queries to create design breakpoints
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写CSS3媒体查询以创建设计断点
- en: The shortfalls in our basic example
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们基本示例的不足之处
- en: Why our journey has only just begun
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们的旅程才刚刚开始
- en: Defining responsive web design
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义响应式网页设计
- en: The term, "responsive web design" was coined by Ethan Marcotte in 2010\. In
    his seminal *A List Apart* article ([http://www.alistapart.com/articles/responsive-web-design/](http://www.alistapart.com/articles/responsive-web-design/)),
    he consolidated three existing techniques (flexible grid layout, flexible images/media,
    and media queries) into one unified approach and named it responsive web design.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“响应式网页设计”是由Ethan Marcotte于2010年创造的。在他的开创性的*A List Apart*文章中（[http://www.alistapart.com/articles/responsive-web-design/](http://www.alistapart.com/articles/responsive-web-design/)），他将三种现有技术（灵活的网格布局，灵活的图像/媒体和媒体查询）整合成一种统一的方法，并将其命名为响应式网页设计。
- en: Responsive web design in a nutshell
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简而言之，响应式网页设计
- en: Responsive web design is the presentation of web content in the most relevant
    format for the viewport and device accessing it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网页设计是以最相关的格式呈现网页内容，以适应视口和访问设备。
- en: In its infancy, it was typical for a responsive design to be built starting
    with the 'desktop', fixed-width design. Content was then reflowed, or removed
    so that the design worked on smaller screens. However, processes evolved and it
    became apparent that everything from design, to content and development, worked
    much better when working in the opposite direction; starting with smaller screens
    and working up.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在其初期，典型的响应式设计是从“桌面”固定宽度设计开始构建的。然后，内容被重新排列或删除，以使设计在较小的屏幕上工作。然而，流程发展并且变得明显，从设计到内容和开发，一切都在相反的方向工作得更好；从较小的屏幕开始，逐渐扩展。
- en: Before we get into this, there are a couple of subjects I'd like to address
    before we continue; browser support and text editors/tooling.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我想在继续之前讨论一些主题；浏览器支持和文本编辑器/工具。
- en: Setting browser support levels
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置浏览器支持级别
- en: The popularity and ubiquity of responsive web design makes it an easier sell
    to clients and stakeholders than ever before. Most people have some idea what
    responsive web design is about. The notion of a single codebase that will just
    work across all devices is a compelling offering.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网页设计的普及和普遍性使其比以往更容易向客户和利益相关者推销。大多数人对响应式网页设计有一些了解。一个单一的代码库可以在所有设备上完美运行的概念是一个令人信服的提议。
- en: One question that almost always comes up when starting a responsive design project
    is that of browser support. With so many browser and device variants, it's not
    always pragmatic to support every single browser permutation fully. Perhaps time
    is a limiting factor, perhaps money. Perhaps both.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始响应式设计项目时，几乎总会出现一个问题，那就是浏览器支持的问题。由于浏览器和设备的变种如此之多，支持每一个浏览器的变种并不总是切实可行。也许时间是一个限制因素，也许是金钱。也许两者都是。
- en: Typically, the older the browser, the greater the work and code required to
    gain feature or aesthetic parity with modern browsers. Therefore, it may make
    more sense to have a leaner, and therefore faster, codebase by tiering the experience
    and only providing enhanced visuals and capabilities for more capable browsers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，浏览器越老，为了与现代浏览器获得功能或美学上的平等，需要的工作和代码就越多。因此，通过分层体验并仅为更有能力的浏览器提供增强的视觉和功能，可能更有意义，也更快。
- en: In the previous edition of this book, some time was spent covering how to cater
    for very old desktop-only browsers. In this edition, we will not.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的上一版中，花了一些时间来介绍如何为非常老的仅限桌面浏览器提供支持。在这一版中，我们将不再介绍。
- en: As I write this in mid-2015, Internet Explorer 6, 7, and 8 are all but gone.
    Even IE 9 only has a 2.45% worldwide share of the browser market (IE 10 is only
    1.94% while IE 11 is rising nicely at 11.68%). If you have no alternative but
    to develop for Internet Explorer 8 and below, you have my sympathies and I'm afraid
    I must be upfront and advise you that there won't be a terrific amount you can
    use in this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在2015年中写这篇文章时，Internet Explorer 6、7和8几乎已经消失。即使IE 9在全球浏览器市场上的份额只有2.45%（IE 10只有1.94%，而IE
    11正在稳步上升）。如果你别无选择，只能为Internet Explorer 8及以下版本开发，我对你表示同情，但我必须坦率地告诉你，这本书中你可以使用的内容将不会太多。
- en: For everyone else, you owe it to your client/paymaster to explain why developing
    for ailing browsers might be a mistake and investing development time and resource
    primarily for modern browsers and platforms makes good fiscal sense in every respect.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他人来说，你应该向你的客户/资助者解释为什么为不景气的浏览器开发可能是一个错误，并且在各个方面，主要为现代浏览器和平台投入开发时间和资源是明智的财务决策。
- en: Ultimately however, the only statistics that really matter are yours. In all
    but extreme cases, the sites we build should at least be functional in every common
    browser. Beyond basic functionality, for any web project it makes sense to decide,
    in advance, what platforms you want to fully enhance the experience for, and which
    you are happy to concede visual/functional anomalies to.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，真正重要的统计数据只有你自己的。除了极端情况外，我们构建的网站应该至少在每个常见的浏览器中都是功能性的。除了基本功能外，对于任何网络项目来说，提前决定你想要完全增强体验的平台，以及你愿意让视觉/功能异常的平台。
- en: You'll also find that practically, starting with the simplest 'base level' experience
    and enhancing (an approach known as **progressive enhancement**) is easier than
    coming at the problem from the opposite direction—building the ultimate experience
    first then attempting to provide fall backs for less capable platforms (an approach
    known as **graceful degradation**).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会发现，从最简单的“基本水平”体验开始，并增强（一种被称为**渐进增强**的方法）比从相反的方向解决问题更容易——首先构建最终体验，然后尝试为能力较弱的平台提供后备（一种被称为**优雅降级**的方法）。
- en: To exemplify why knowing this in advance matters, consider that if you were
    unlucky enough to have 25% of your website visitors using Internet Explorer 9
    (for example), you'd need to consider what features that browser supports and
    tailor your solution accordingly. The same caution would be required if large
    amounts of your users are visiting with older mobile phone platforms such as Android
    2\. What you can consider a 'base' experience will vary depending upon the project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明为什么提前知道这一点很重要，考虑一下，如果你不幸有25%的网站访问者使用Internet Explorer 9（例如），你需要考虑该浏览器支持哪些功能，并相应地调整你的解决方案。如果大量用户使用旧的移动电话平台，比如Android
    2，同样需要谨慎。你可以考虑一个“基本”体验，这将取决于项目。
- en: 'If suitable data isn''t available, I apply a simple and crude piece of logic
    to determine whether I should spend time developing a particular platform/browser
    version: if the cost of developing and supporting browser X is more than the revenue/benefit
    created by the users on browser X; don''t develop specific solutions for browser
    X.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有合适的数据，我会应用一个简单而粗糙的逻辑来确定是否应该花时间开发特定的平台/浏览器版本：如果开发和支持浏览器X的成本超过了浏览器X上的用户创造的收入/收益；不要为浏览器X开发特定的解决方案。
- en: It's rarely a question of whether you could 'fix' an older platform/version.
    It's a question of whether you should.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这很少是一个你是否能够“修复”旧平台/版本的问题。问题是你是否应该。
- en: When considering which platforms and browser versions support which features,
    if you aren't already, become familiar the [http://caniuse.com](http://caniuse.com)
    website. It provides a simple interface for establishing what browser support
    there is for the features we will be looking at throughout.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑哪些平台和浏览器版本支持哪些功能时，如果你还没有，要熟悉[http://caniuse.com](http://caniuse.com)网站。它提供了一个简单的界面，用于确定我们将在整个过程中查看的功能的浏览器支持情况。
- en: '![Setting browser support levels](img/B03777_01_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![设置浏览器支持级别](img/B03777_01_01.jpg)'
- en: A brief note on tooling and text editors
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于工具和文本编辑器的简短说明。
- en: It makes no difference what text editor or IDE system you use to build your
    responsive web designs. If the simplest of text editors allows you to write your
    HTML, CSS, and JavaScript efficiently, that's absolutely fine. Similarly there
    are no requisite pieces of tooling that are essential to get a responsive web
    design out of the door. All you actually need is something that enables you to
    write HTML, CSS, and JavaScript. Whether your preference is Sublime Text, Vim,
    Coda, Visual Studio, or Notepad - it matters little. Just use what works best
    for you.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用什么文本编辑器或IDE系统来构建响应式网页设计并不重要。如果最简单的文本编辑器可以让你高效地编写HTML、CSS和JavaScript，那就完全没问题。同样，并没有必需的工具是必不可少的，以便让响应式网页设计顺利进行。你实际上只需要一些能让你编写HTML、CSS和JavaScript的东西。无论你偏好Sublime
    Text、Vim、Coda、Visual Studio还是记事本 - 都无关紧要。只需使用最适合你的工具。
- en: However, be aware that there are more tools available now (often free) to negate
    many of the manual and time-intensive tasks of building web sites than ever before.
    For example, CSS processors (Sass, LESS, Stylus, PostCSS) can help with code organization,
    variables, color manipulations, and arithmetic. Tools like PostCSS can also automate
    horrible and thankless jobs like CSS vendor prefixing. Furthermore, 'Linting'
    and validation tools can check your HTML, JavaScript, and CSS code against standards
    as you work, eliminating many time wasting typos or syntax errors.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在有更多的工具（通常是免费的）可以消除建站过程中许多手动和耗时的任务。例如，CSS处理器（Sass、LESS、Stylus、PostCSS）可以帮助组织代码、变量、颜色处理和算术。像PostCSS这样的工具还可以自动完成可怕且无趣的工作，比如CSS供应商前缀。此外，“Linting”和验证工具可以在你工作时检查你的HTML、JavaScript和CSS代码是否符合标准，消除许多浪费时间的拼写错误或语法错误。
- en: New tools come out constantly and they are continually improving. Therefore,
    whilst some relevant and beneficial tools will be mentioned by name as we go,
    be aware that something better may be just around the corner. Hence we won't be
    relying on anything other than standards based HTML and CSS in our examples. You
    should however, use whatever tools you can to produce your front-end code as quickly
    and reliably as possible.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 新的工具不断涌现，并且它们不断改进。因此，虽然我们会在进行中提到一些相关和有益的工具，但要知道可能会有更好的东西即将出现。因此，在我们的示例中，我们不会依赖于除基于标准的HTML和CSS之外的任何东西。然而，你应该尽可能使用任何工具来快速可靠地生成你的前端代码。
- en: Our first responsive example
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个响应式示例
- en: In the first paragraph I promised that by the end of this chapter you would
    know all you needed to build a fully responsive web page. So far I've just been
    talking around the issue at hand. It's time to walk the walk.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一段中，我承诺到本章结束时，你将知道构建完全响应式网页所需的一切。到目前为止，我只是在围绕手头的问题进行讨论。是时候付诸行动了。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Code samples**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码示例**'
- en: You can download all the code samples from this book by visiting [rwd.education/download.zip](http://rwd.education/download.zip)
    or via GitHub at [https://github.com/benfrain/rwd](https://github.com/benfrain/rwd).
    It's worth knowing that where individual examples are built up throughout a chapter,
    only the final version of the example is provided in the code download. For example,
    if you download the code samples for [Chapter 2](ch02.html "Chapter 2. Media Queries
    – Supporting Differing Viewports"), *Media Queries – Supporting Differing Viewports*,
    the examples will be in the state they are at by the end of [Chapter 2](ch02.html
    "Chapter 2. Media Queries – Supporting Differing Viewports"), *Media Queries –
    Supporting Differing Viewports*. No intermediate states are provided other than
    in the text.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[rwd.education/download.zip](http://rwd.education/download.zip)或通过GitHub
    [https://github.com/benfrain/rwd](https://github.com/benfrain/rwd)来下载本书中的所有代码示例。值得知道的是，在整个章节中构建的个别示例中，代码下载只提供了示例的最终版本。例如，如果你下载了[第二章](ch02.html
    "第二章.媒体查询-支持不同的视口"), *媒体查询-支持不同的视口*的代码示例，这些示例将是在[第二章](ch02.html "第二章.媒体查询-支持不同的视口"),
    *媒体查询-支持不同的视口*结束时的状态。除了文本中提供的中间状态外，不提供其他中间状态。
- en: Our basic HTML file
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的基本HTML文件
- en: We will start with a simple HTML5 structure. Don't worry at this point what
    each of the lines do (especially the content of the `<head>`, we will cover that
    in detail in [Chapter 4](ch04.html "Chapter 4. HTML5 for Responsive Web Designs"),
    *HTML5 for Responsive Web Designs*).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的HTML5结构开始。现在不用担心每一行都做了什么（特别是`<head>`的内容，我们将在[第四章](ch04.html "第四章.响应式网页设计的HTML5")中详细介绍，*响应式网页设计的HTML5*）。
- en: For now, simply concentrate on the elements inside the `<body>` tag. I'm pretty
    sure nothing there will look too unusual; a few div's, a graphic for a logo, an
    image (a tasty looking scone), a paragraph or two of text and a list of items.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，只需专注于`<body>`标签内的元素。我相当确定那里没有什么看起来太不寻常的东西；一些div，一个用于标志的图形，一张图片（看起来很美味的烤饼），一两段文字和一列项目的列表。
- en: Here's an abridged version of the code. For brevity I have removed the paragraphs
    of text in the code below as we only need to concern ourselves with the structure.
    However, you should know that it's a recipe and description of how to make scones;
    quintessentially British cakes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的摘要版本。为了简洁起见，我已经在下面的代码中删除了段落文字，因为我们只需要关注结构。但是，你应该知道这是一个食谱，描述了如何制作司康饼；典型的英式蛋糕。
- en: If you want to see the full HTML file, you can download it from the [rwd.education](http://rwd.education)
    website.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看完整的HTML文件，可以从[rwd.education](http://rwd.education)网站下载。
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By default, web pages are flexible. If you were to open the example page, even
    as it is at this point (with no media queries present), and resize the browser
    window you'll see the text reflows as needed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，网页是灵活的。如果你打开示例页面，即使在这一点上（没有媒体查询的情况下），调整浏览器窗口大小，你会看到文本会根据需要重新排列。
- en: 'What about on different devices? With no CSS whatsoever, this is how that renders
    on an iPhone:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的设备上呢？没有任何CSS的情况下，在iPhone上的呈现如下：
- en: '![Our basic HTML file](img/B03777_01_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![我们的基本HTML文件](img/B03777_01_02.jpg)'
- en: As you can see, it's rendering like a 'normal' web page would on an iPhone.
    The reason for that is that iOS renders web pages at 980px wide by default and
    shrinks them down into the viewport.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它在iPhone上呈现得像一个“正常”的网页。原因是iOS默认将网页呈现为980px宽，并将其缩小到视口中。
- en: The viewable area of a browser is known technically as the **viewport**. The
    viewport is seldom equivalent to the screen size of a device, especially in instances
    where a user can resize a browser window.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器的可视区域在技术上被称为**viewport**。视口很少等同于设备的屏幕尺寸，特别是在用户可以调整浏览器窗口大小的情况下。
- en: Therefore, from now on, we will generally use this more accurate term when we
    are referring to the available space for our web page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从现在开始，当我们提到网页的可用空间时，我们通常会使用这个更准确的术语。
- en: 'We can fix that prior problem easily by adding this snippet in the `<head>`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`<head>`中添加以下片段来轻松解决之前的问题：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This viewport `meta` tag is a non-standard (but de facto standard) way of telling
    the browser how to render the page. In this case, our viewport `meta` tag is effectively
    saying "make the content render at the width of the device". In fact, it''s probably
    easier to just show you the effect this line has on applicable devices:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个viewport `meta`标签是一种非标准（但事实上的标准）的告诉浏览器如何呈现页面的方式。在这种情况下，我们的viewport `meta`标签实际上是在说“使内容以设备的宽度呈现”。实际上，最好的办法可能是直接向您展示这一行对适用设备的影响：
- en: '![Our basic HTML file](img/B03777_01_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![我们的基本HTML文件](img/B03777_01_03.jpg)'
- en: Great! The text is now rendering and flowing at a more 'native' size. Let's
    move on.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在文本以更“原生”的大小呈现和流动了。让我们继续。
- en: We will cover the `meta` tag and its various settings and permutations (and
    the standards based version of the same functionality) in [Chapter 2](ch02.html
    "Chapter 2. Media Queries – Supporting Differing Viewports"), *Media Queries –
    Supporting Differing Viewports*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](ch02.html "第2章。媒体查询-支持不同的视口")中介绍`meta`标签及其各种设置和变体（以及相同功能的基于标准的版本），*媒体查询-支持不同的视口*。
- en: Taming images
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 驯服图片
- en: They say a picture is worth a thousand words. All this writing about scones
    in our sample page and there's no image of the beauties. I'm going to add in an
    image of a scone near the top of the page; a sort of 'hero' image to entice users
    to read the page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 他们说一张图片胜过千言万语。在我们的示例页面中写了这么多关于烤饼干的内容，却没有展示这些美味的图片。我要在页面顶部添加一张烤饼干的图片；一种“英雄”图片，吸引用户阅读页面。
- en: '![Taming images](img/B03777_01_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![驯服图片](img/B03777_01_04.jpg)'
- en: Oh! That nice big image (2000px wide) is forcing our page to render more than
    a little wonky. We need to fix that. We could add a fixed width to the image via
    CSS but the problem there is that we want the image to scale to different screen
    sizes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 哦！那张漂亮的大图片（宽度为2000px）强制我们的页面呈现得有点乱。我们需要解决这个问题。我们可以通过CSS为图片添加固定宽度，但问题在于我们希望图片能够根据不同的屏幕尺寸进行缩放。
- en: For example, our example iPhone is 320px wide so we could set a width of 320px
    to that image but then what happens if a user rotates the screen? The 320px wide
    viewport is now 480px wide. Thankfully it's pretty easy to achieve fluid images
    that will scale to the available width of their container with a single line of
    CSS.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的iPhone示例宽度为320px，所以我们可以将该图片的宽度设置为320px，但是如果用户旋转屏幕会发生什么呢？320px宽的视口现在变成了480px宽。幸运的是，通过一行CSS代码很容易实现图片的流动，使其可以根据容器的可用宽度进行缩放。
- en: I'm going to create the `css/styles.css` CSS file now that's linked in the head
    of the HTML page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在要创建`css/styles.css` CSS文件，并将其链接到HTML页面的头部。
- en: 'Here is the first thing I''m adding. Ordinarily I''d be setting a few other
    defaults, and we''ll discuss those defaults in later chapters, but for our purposes
    I''m happy to open with just this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我要添加的第一件事。通常我会设置一些其他默认值，我们将在后面的章节中讨论这些默认值，但是为了我们的目的，我很乐意只用这个来开始：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now when the page is refreshed we see something more akin to what we might expect.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当页面刷新后，我们看到的更接近我们预期的东西。
- en: '![Taming images](img/B03777_01_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![驯服图片](img/B03777_01_05.jpg)'
- en: All this `max-width` based rule does is stipulate that all images should be
    a maximum of 100% of their width (in that they should expand to 100% of their
    size and no more). Where a containing element (such as the `body` or a `div` it
    sits within) is less than the intrinsic width of the image, it will simply scale
    up to the maximum available space.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基于`max-width`的规则的作用只是规定所有的图片的宽度最大为100%（即它们应该扩展到100%的大小，不再更大）。如果包含元素（如`body`或者它所在的`div`）的宽度小于图片的固有宽度，图片将简单地缩放到最大可用空间。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Why not simply width: 100%?**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么不简单地使用width: 100%？**'
- en: 'To make images fluid you could also use the more widely used width property.
    For example, `width: 100%` but this has a different effect. When a property of
    `width` is used then the image will be displayed at that width, regardless of
    its own inherent size. The result in our example would be the logo (also an image)
    stretching to fill 100% of its container. With a container far wider than the
    image (as is the case with our logo) this leads a massively oversized image.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '要使图片流动，您也可以使用更常用的width属性。例如，`width: 100%`，但这会产生不同的效果。当使用`width`属性时，图片将以该宽度显示，而不考虑其固有大小。在我们的示例中，结果将是logo（也是一张图片）拉伸以填满其容器的100%。对于比图片（如我们的logo）宽得多的容器，这会导致图片过大。'
- en: Excellent. Everything is now laid out as expected. No matter the viewport size,
    nothing is overflowing the page horizontally.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了。现在一切都按预期布局。无论视口大小如何，都没有内容横向溢出页面。
- en: 'However, if we look at the page in larger viewports, the basic styles start
    to get both literally and figuratively stretched. Take a look at the example page
    at a size around 1400px:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们在更大的视口中查看页面，基本样式开始变得字面上和比喻上都被拉伸了。看一下大约在1400px大小的示例页面：
- en: '![Taming images](img/B03777_01_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![驯服图片](img/B03777_01_06.jpg)'
- en: Oh dear! In fact, even around 600px wide it's starting to suffer. Around this
    point it would be handy if we could rearrange a few things. Maybe resize the image
    and position it off to one side. Perhaps alter some font sizes and background
    colors of elements.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，天哪！事实上，即使在大约600px宽的时候，它开始受到影响。在这一点上，如果我们能重新安排一些东西就会很方便。也许调整一下图片的大小并将其放在一边。也许改变一些字体大小和元素的背景颜色。
- en: Thankfully, we can achieve all this functionality quite easily by employing
    CSS media queries to bend things to our will.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以通过使用CSS媒体查询来轻松实现所有这些功能，以使事情按照我们的意愿进行弯曲。
- en: Enter media queries
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入媒体查询
- en: As we have established, somewhere beyond the 600px wide point, our current layout
    starts to look stretched. Let's use CSS3 media queries to adjust the layout depending
    upon the screen width. Media queries allow us to apply certain CSS rules based
    upon a number of conditions (screen width and height for example).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经确定的那样，在600px宽的某个点之后，我们当前的布局开始显得拉伸。让我们使用CSS3媒体查询根据屏幕宽度调整布局。媒体查询允许我们根据一些条件（例如屏幕宽度和高度）应用特定的CSS规则。
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Don''t set breakpoints to popular device widths**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要将断点设置为流行的设备宽度**'
- en: '''Breakpoint'' is the term used to define the point in which a responsive design
    should change significantly.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “断点”是用来定义响应式设计应该显著改变的点。
- en: When people first started making use of media queries it was common to see breakpoints
    in designs built specifically around the popular devices of the day. At the time
    it was typically iPhone (320px x 480px) and iPad (768px x 1024px) that defined
    these 'breakpoints'.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们开始使用媒体查询时，常见的做法是在设计中设置特定于当时流行设备的断点。当时通常是iPhone（320px x 480px）和iPad（768px
    x 1024px）定义了这些“断点”。
- en: That practice was a bad choice then, and it would be an even worse one now.
    The problem is that by doing that we are catering a design to a specific screen
    size. We want a responsive design—something that is agnostic of the screen size
    viewing it; not something that only looks at its best at specific sizes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那种做法当时是一个糟糕的选择，现在甚至更糟。问题在于，通过这样做，我们是在为特定的屏幕尺寸定制设计。我们需要一个响应式设计——不管查看它的屏幕尺寸是多大，它都能够适应；而不是只在特定尺寸下才能看起来最好。
- en: Therefore, let the content and the design itself determine where a breakpoint
    is relevant. Maybe your initial layout starts to look wrong at 500px wide and
    greater, perhaps 800px. Your own project design should determine when a breakpoint
    is needed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让内容和设计本身决定断点的相关性。也许你的初始布局在500px宽及以上开始看起来不对，也许是800px。你自己的项目设计应该决定何时需要断点。
- en: We will cover the entire gamut of CSS media queries in [Chapter 2](ch02.html
    "Chapter 2. Media Queries – Supporting Differing Viewports"), *Media Queries –
    Supporting Differing Viewports*, inventively titled **Media Queries**.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](ch02.html "第2章。媒体查询-支持不同的视口")中涵盖整个CSS媒体查询范围，*媒体查询-支持不同的视口*，巧妙地命名为**媒体查询**。
- en: 'However, for the purpose of whipping our basic example into shape, we will
    concentrate on just one type of media query; a minimum width media query. CSS
    rules within this type of media query only get applied if the viewport is a minimum
    defined width. The exact minimum width can be specified using a raft of different
    length units including percent, em, rem, and px. In CSS, a minimum width media
    query is written like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了将我们的基本示例整理成形，我们将集中讨论一种媒体查询类型；最小宽度媒体查询。在这种类型的媒体查询中，只有在视口达到最小定义宽度时，才会应用其中的CSS规则。可以使用一系列不同的长度单位来指定确切的最小宽度，包括百分比、em、rem和px。在CSS中，最小宽度媒体查询的写法如下：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `@media` directive tells the browser we are starting a media query, the
    `screen` part (declaring ''screen'' is technically not needed in this situation
    but we will deal with that in detail in the next chapter) tells the browser these
    rules should be applied to all screen types and the `and (min-width: 50em)` tells
    the browser that the rules should be limited to all viewports above 50em of size.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`@media`指令告诉浏览器我们正在开始一个媒体查询，`screen`部分（在这种情况下，声明“屏幕”在技术上并不需要，但我们将在下一章中详细处理这个问题）告诉浏览器这些规则应该适用于所有屏幕类型，`and
    (min-width: 50em)`告诉浏览器这些规则应该限制在所有大于50em大小的视口上。'
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'I believe it was Bryan Rieger ([http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu](http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu))
    who first wrote that:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信是Bryan Rieger ([http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu](http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu))首先写道：
- en: '*"The absence of support for media queries is in fact the first media query."*'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"对媒体查询的支持的缺失实际上是第一个媒体查询。"*'
- en: What he meant by that is that the first rules we write, outside of a media query
    should be our 'base' rules which we then enhance for more capable devices.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 他的意思是，我们写的第一条规则，除了媒体查询之外，应该是我们的“基本”规则，然后我们可以为更有能力的设备增强这些规则。
- en: For now, simply be aware that this approach re-enforces our smallest screen
    first mentality and allows us to progressively layer on detail as and when the
    design necessitates it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只需意识到这种方法首先强调我们最小的屏幕，并允许我们根据设计的需要逐步添加细节。
- en: Amending the example for a larger screen
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改示例以适应更大的屏幕
- en: We've already established that our design is starting to suffer at around 600px/37.5rem
    width.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定我们的设计在大约600px/37.5rem宽度时开始受到影响。
- en: Therefore, let's mix things up a little by way of a simple example of how we
    can lay things out differently at different viewport sizes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们通过一个简单的示例来混合一下，展示在不同的视口尺寸下如何布局不同的内容。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Almost all browsers have a default text size of 16px so you can easily convert
    widths to rems by dividing the px value by 16\. We will discuss why you might
    want to do this in [Chapter 2](ch02.html "Chapter 2. Media Queries – Supporting
    Differing Viewports"), *Media Queries – Supporting Differing Viewports*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的浏览器都有一个默认的文本大小为16px，所以你可以通过将px值除以16来轻松地将宽度转换为rems。我们将在[第2章](ch02.html "第2章。媒体查询-支持不同的视口")中讨论为什么你可能想要这样做，*媒体查询-支持不同的视口*。
- en: First off, we will stop that main 'hero' image getting too big and keep it over
    on the right. Then the intro text can sit to the left.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将阻止主要的“英雄”图像变得过大，并将其保持在右侧。然后介绍文本可以位于左侧。
- en: We will then have the main portion of text, the 'method' that describes how
    to make the scones, on the left below with a small boxed out section detailing
    the ingredients over on the right.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将有主要的文本部分，描述如何制作烤饼的“方法”，位于左侧，下面有一个小的方框部分，详细介绍右侧的配料。
- en: 'All these changes can be achieved relatively simply by encapsulating these
    specific styles within a media query. Here''s what things look like with the relevant
    styles added:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些变化都可以通过在媒体查询中封装这些特定样式来相对简单地实现。以下是添加相关样式后的情况：
- en: '![Amending the example for a larger screen](img/B03777_01_07.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![修改示例以适应更大的屏幕](img/B03777_01_07.jpg)'
- en: It still looks essentially the same as it did before on smaller screens but
    adjusts to the new layout as soon as the viewport is 50rem or wider.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在较小的屏幕上，它看起来基本上与以前一样，但一旦视口达到50rem或更宽，它就会调整到新的布局。
- en: 'Here are the layout styles that were added:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是添加的布局样式：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That wasn''t too bad was it? With only minimal code we have built a page that
    responds to the viewport size and offers a preferable layout as needed. By adding
    just a few more styles things look even easier on the eye. With those in place,
    our basic responsive page now looks like this on an iPhone:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不太糟糕，是吗？只需很少的代码，我们就建立了一个可以根据视口大小做出响应并在需要时提供更合适布局的页面。通过添加更多的样式，页面看起来甚至更加舒适。有了这些，我们基本的响应式页面现在在iPhone上看起来是这样的：
- en: '![Amending the example for a larger screen](img/B03777_01_08.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![修改示例以适应更大的屏幕](img/B03777_01_08.jpg)'
- en: 'And like this above 50rem width:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上面的50rem宽度一样：
- en: '![Amending the example for a larger screen](img/B03777_01_09.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![修改示例以适应更大的屏幕](img/B03777_01_09.jpg)'
- en: These further visual embellishments don't add to the understanding of what's
    happening responsively, hence I have omitted them here but if you'd like to view
    the relevant code, download the chapter code at [http://rwd.education](http://rwd.education)
    or [https://github.com/benfrain/rwd](https://github.com/benfrain/rwd).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这些进一步的视觉装饰并没有增加对响应式发生的理解，因此我在这里省略了它们，但如果你想查看相关代码，请在[http://rwd.education](http://rwd.education)或[https://github.com/benfrain/rwd](https://github.com/benfrain/rwd)下载本章代码。
- en: This has been a very basic example but it has encapsulated the essential methodology
    of building out a responsive web design.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个非常基本的示例，但它已经包含了构建响应式网页设计的基本方法论。
- en: To reiterate the essential things we have covered; start with 'base' styles,
    styles that can work on any device. Then layer enhancements on progressively as
    the viewport size and/or capabilities increase.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 重申我们所涵盖的基本要点；从“基础”样式开始，这些样式可以在任何设备上使用。然后随着视口大小和/或功能的增加逐渐添加增强功能。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the full specifications for CSS Media Queries (Level 3) here:
    [http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到CSS媒体查询（Level 3）的完整规范：[http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/)
- en: 'There is also a working draft for CSS Media Queries (Level 4) here: [http://dev.w3.org/csswg/mediaqueries-4/](http://dev.w3.org/csswg/mediaqueries-4/)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个CSS媒体查询（Level 4）的工作草案：[http://dev.w3.org/csswg/mediaqueries-4/](http://dev.w3.org/csswg/mediaqueries-4/)
- en: The shortcomings of our example
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们示例的不足之处
- en: In this chapter we've covered all the essential component parts of a basic responsive
    HTML5 and CSS3 powered web page.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了基本响应式HTML5和CSS3驱动的网页的所有基本组成部分。
- en: But you and I both know that this basic responsive example is rarely the limit
    of what we're tasked with building. Nor should it reflect the limit of what we
    are capable of building.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 但你我都知道，这个基本的响应式示例很少是我们要构建的限制。也不应该反映我们能够构建的限制。
- en: What about if we want our page to respond to different light conditions? What
    about changing the size of links when people use different pointing devices (a
    finger rather than a mouse for example)? What about being able to animate and
    move visual elements simply, using nothing but CSS?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望我们的页面对不同的光照条件做出响应怎么办？当人们使用不同的指向设备（例如手指而不是鼠标）时，链接的大小会发生变化怎么办？如果我们想要简单地使用CSS来实现动画和移动视觉元素呢？
- en: Then there's the markup. How do go about marking up pages with more semantic
    elements; article, section, menu, and the like, or make forms with built in validation
    (no JavaScript needed)? And what if we want to change the visual order of elements
    at different viewports?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是标记。我们如何使用更多语义元素来标记页面；文章、部分、菜单等，或者制作具有内置验证的表单（无需JavaScript）？如果我们想要在不同的视口上更改元素的视觉顺序呢？
- en: Let's not forget images. We have fluid images in this example but if people
    visit this page on a mobile phone, they will need to download a large graphic
    (2000px wide no less) that will only be shown on their phone at a fraction of
    that size. That will make the page considerably slower to load than needed. Surely
    there's a better way?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了图片。在这个示例中，我们有流体图片，但如果人们在手机上访问这个页面，他们将需要下载一个大的图形（宽度为2000像素），而这个图形只会以其中的一小部分显示在他们的手机上。这将使页面加载速度比必要的慢得多。肯定有更好的办法吧？
- en: And what about logos and icons? We've used a PNG in this example, but we could
    easily use **scalable vector graphics** (**SVGs**) to enjoy graphics with resolution
    independence. That way they will look pin-sharp, regardless of the resolution
    of the viewing screen.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 那么标志和图标呢？在这个示例中，我们使用了PNG，但我们可以轻松地使用**可伸缩矢量图形**（**SVG**）来享受具有分辨率独立性的图形。这样它们看起来会非常清晰，无论查看屏幕的分辨率如何。
- en: Hopefully you have time to stick around, as these are the very questions we
    will answer in the coming chapters.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你有时间留下来，因为这些正是我们将在接下来的章节中回答的问题。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Well done, you now know and understand the essential elements needed to create
    a fully responsive web page. However, as we have just discovered, there are plenty
    of places where things could be improved.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好，现在你知道并理解了创建完全响应式网页所需的基本要素。然而，正如我们刚刚发现的，有很多地方可以改进。
- en: But that's fine. We don't just want the ability to make competent responsive
    web designs, we want to be able to create 'best of breed' experiences. So let's
    press on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但这没关系。我们不只是想要能够制作称职的响应式网页设计，我们还想要能够创造“最佳体验”。所以让我们继续努力吧。
- en: First up, we will wrap our heads around all that Level 3 and Level 4 CSS Media
    Queries have to offer. We have already seen how a web page can respond to viewport
    width but there's so much more we can do right now—and a lot more fun stuff coming
    to your browser soon. Let's go and take a look.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将深入了解所有三级和四级CSS媒体查询所提供的内容。我们已经看到网页如何响应视口宽度，但现在我们可以做的远不止这些，而且很快会有更多有趣的东西出现在你的浏览器中。让我们去看一看。
