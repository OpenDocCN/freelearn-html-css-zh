- en: Chapter 6. Stunning Aesthetics with CSS3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用CSS3创建令人惊叹的美学效果
- en: The aesthetically focused features of CSS3 are so useful in responsive design
    because using CSS3 lets us replace images in many situations. This saves you time,
    makes your code more maintainable and flexible and results in less page 'weight'
    for the end user. Those benefits would be useful even on a typical fixed-width
    desktop design but it's even more important with a responsive design as using
    CSS in these situations makes it trivial to create different aesthetic effects
    at different viewports.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3的美学特性在响应式设计中非常有用，因为使用CSS3可以在许多情况下替换图像。这可以节省时间，使您的代码更易维护和灵活，并且减少了最终用户的页面“重量”。即使在典型的固定宽度桌面设计中，这些好处也是有用的，但在响应式设计中更加重要，因为在这些情况下使用CSS可以轻松地在不同的视口上创建不同的美学效果。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: How to create text shadows with CSS3
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS3创建文本阴影
- en: How to create box shadows with CSS3
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS3创建框阴影
- en: How to make gradient backgrounds with CSS3
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS3创建渐变背景
- en: How to use multiple backgrounds with CSS3
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS3创建多个背景
- en: Using CSS3 background gradients to make patterns
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS3背景渐变创建图案
- en: How to implement high-resolution background images with media queries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用媒体查询实现高分辨率背景图像
- en: How to use CSS filters (and their performance implications)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS滤镜（以及它们的性能影响）
- en: Let's dig in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Vendor prefixes**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**供应商前缀**'
- en: When implementing experimental CSS, just remember to add relevant vendor prefixes
    via a tool, rather than by hand. This ensures the broadest cross-browser compatibility
    and also negates you adding in prefixes that are no longer required. I'm mentioning
    Autoprefixer ([https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer))
    in most chapters as, at the time of writing, I think it's the best tool for the
    job.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现实验性的CSS时，只需记住通过工具添加相关的供应商前缀，而不是手动添加。这可以确保最广泛的跨浏览器兼容性，并且也可以避免添加不再需要的前缀。在大多数章节中，我都提到了Autoprefixer（[https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer)），因为在撰写本文时，我认为它是最好的工具。
- en: Text shadows with CSS3
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS3创建文本阴影
- en: 'One of the most widely implemented CSS3 features is `text-shadow`. Like `@font-face`,
    it had a previous life but was dropped in CSS 2.1\. Thankfully it''s back and
    widely supported (for all modern browsers and Internet Explorer 9 onwards). Let''s
    look at the basic syntax:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3中最广泛实现的功能之一是`text-shadow`。与`@font-face`一样，它曾经存在过，但在CSS 2.1中被删除了。幸运的是，它现在又回来了，并得到了广泛支持（适用于所有现代浏览器和Internet
    Explorer 9及以上版本）。让我们来看一下基本的语法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Remember, the values in shorthand rules always go right and then down (or think
    of it as clockwise if you prefer). Therefore, the first value is the amount of
    shadow to the right, the second is the amount down, the third value is the amount
    of blur (the distance the shadow travels before fading to nothing), and the final
    value is the color.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，简写规则中的值总是向右和向下排列（或者如果您喜欢，可以认为是顺时针）。因此，第一个值是阴影向右的量，第二个是向下的量，第三个值是模糊的量（阴影在消失之前移动的距离），最后一个值是颜色。
- en: 'Shadows to the left and above can be achieved using negative values. For example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用负值来实现左侧和上方的阴影。例如：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The color value doesn''t need to be defined as a HEX value. It can just as
    easily be HSL(A) or RGB(A):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色值不需要定义为十六进制值。它同样可以是HSL(A)或RGB(A)：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, keep in mind that the browser must then also support HSL/RGB color
    modes along with `text-shadow` in order to render the effect.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，浏览器必须同时支持HSL/RGB颜色模式和`text-shadow`才能呈现效果。
- en: You can also set the shadow values in any other valid CSS length units such
    as em, rem, ch, rem, and so on. Personally, I rarely use em or rem units for `text-shadow`
    values. As the values are always really low, using 1px or 2px generally looks
    good across all viewports.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用任何其他有效的CSS长度单位来设置阴影值，例如em、rem、ch、rem等。就个人而言，我很少使用em或rem单位来设置`text-shadow`值。因为这些值总是非常低，使用1px或2px通常在所有视口上看起来都不错。
- en: 'Thanks to media queries, we can easily remove text shadows at different viewport
    sizes too. The key here is the none value:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于媒体查询，我们还可以轻松地在不同的视口尺寸下移除文本阴影。关键在于none值：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'As an aside, it''s worth knowing that in CSS, where a value starts with a zero,
    such as 0.14s, there is no need to write the leading zero: .14s is exactly the
    same.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，值得知道的是，在CSS中，如果一个值以零开头，比如0.14s，就不需要写前导零：.14s和0.14s是完全相同的。
- en: Omitting the blur value when not needed
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不需要时省略模糊值
- en: 'If there is no blur to be added to a `text-shadow` the value can be omitted
    from the declaration, for example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`text-shadow`不需要添加模糊，可以从声明中省略该值，例如：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That is perfectly valid. The browser assumes that the first two values are for
    the offsets if no third value is declared.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完全有效的。如果没有声明第三个值，浏览器会假定前两个值是偏移量。
- en: Multiple text shadows
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个文本阴影
- en: 'It''s possible to add multiple text shadows by comma separating two or more
    shadows. For example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过逗号分隔两个或多个阴影来添加多个文本阴影。例如：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also, as CSS is forgiving of whitespace, you can lay out the values like this
    if it helps with readability:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于CSS对空白字符宽容，如果有助于可读性，您可以像这样布置值：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can read the W3C specification for the `text-shadow` property at [http://www.w3.org/TR/css3-text/](http://www.w3.org/TR/css3-text/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.w3.org/TR/css3-text/](http://www.w3.org/TR/css3-text/)上阅读`text-shadow`属性的W3C规范。
- en: Box shadows
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框阴影
- en: 'Box shadows allow you to create a box-shaped shadow around the outside or inside
    of the element it is applied to. Once text shadows are understood, box shadows
    are a piece of cake; principally, they follow the same syntax: horizontal offset,
    vertical offset, blur, spread (we will get to spread in a moment), and color.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 框阴影允许您在应用到元素的外部或内部创建一个框形阴影。一旦了解了文本阴影，框阴影就很简单了；基本上，它们遵循相同的语法：水平偏移、垂直偏移、模糊、扩展（我们稍后会讨论扩展），以及颜色。
- en: 'Only two of the possible four length values are required (in the absence of
    the last two, the value of color defines the shadow color and a value of zero
    is used for the blur radius). Let''s look at a simple example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要四个可能的长度值中的两个（在没有最后两个的情况下，颜色的值定义阴影颜色，模糊半径使用零值）。让我们看一个简单的例子：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The default `box-shadow` is set on the outside of the element. Another optional
    keyword, `inset` allows the `box-shadow` to be applied inside the element.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的box-shadow设置在元素的外部。另一个可选的关键字，inset，允许在元素内部应用box-shadow。
- en: An inset shadow
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部阴影
- en: 'The `box-shadow` property can also be used to create an `inset` shadow. The
    syntax is identical to a normal box shadow except that the value starts with the
    keyword `inset`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: box-shadow属性也可以用来创建内部阴影。语法与普通的盒子阴影相同，只是值以关键字inset开头：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Everything functions as before but the `inset` part of the declaration instructs
    the browser to set the effect on the inside. If you look at `example_06-01` you''ll
    see an example of each type:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都像以前一样运作，但声明的“inset”部分指示浏览器在内部设置效果。如果你看example_06-01，你会看到每种类型的例子：
- en: '![An inset shadow](img/3777_06_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![内部阴影](img/3777_06_01.jpg)'
- en: Multiple shadows
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个阴影
- en: 'Like `text-shadow`, you can apply multiple `box-shadow`. Separate the `box-shadow`
    with a comma and they are applied bottom to top (last to first) as they are listed.
    Remind yourself of the order by thinking that the declaration nearest to the top
    in the rule (in the code) appears nearest to the ''top'' of the order when displayed
    in the browser. As with `text-shadow`, you may find it useful to use whitespace
    to visually stack the different `box-shadow`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 像text-shadow一样，您可以应用多个box-shadow。用逗号分隔box-shadow，它们按照从底部到顶部（最后到第一个）的顺序应用，如它们在列表中列出的那样。通过想到规则（在代码中）中最接近顶部的声明在浏览器中显示时出现在顺序的“顶部”，来提醒自己顺序。与text-shadow一样，您可能会发现使用空格在视觉上堆叠不同的box-shadow很有用：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Stacking longer, multiple values, one under the other in the code, has an added
    benefit when using version control systems; it makes it easy to spot differences
    when you 'diff' two versions of a file. That's the primary reason I stack groups
    of selectors one under the other too.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中堆叠更长的、多个值，一个在另一个下面，当使用版本控制系统时有一个额外的好处；它使得在“diff”两个文件版本时更容易发现差异。这就是我将选择器组堆叠在一起的主要原因。
- en: Understanding spread
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解扩展
- en: I'll be honest, for literally years I didn't truly understand what the spread
    value of a `box-shadow` actually did. I don't think the name 'spread' is useful.
    Think of it more as an offset. Let me explain.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，多年来我并没有真正理解box-shadow的扩展值到底是做什么的。我认为“扩展”这个名字并不有用。把它想象成一个偏移更有帮助。让我解释一下。
- en: 'Look at the box on the left in `example_06-02`. This has a standard `box-shadow`
    applied. The one on the right has a negative spread value applied. It''s set with
    the fourth value. Here is the relevant code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 看看example_06-02中左边的盒子。这是应用了标准的box-shadow。右边的盒子应用了负的扩展值。它是用第四个值设置的。这是相关的代码：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the effect of each (element with spread value on the right):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个效果（右边带有扩展值的元素）：
- en: '![Understanding spread](img/3777_06_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![理解扩展](img/3777_06_02.jpg)'
- en: The spread value lets you extend or contract the shadow in all directions by
    the amount specified. In this example, a negative value is pulling the shadow
    back in all directions. The result being that we see the shadow at the bottom,
    only instead of seeing the blur 'leak' out on all sides (as the blur is being
    counter-balanced by the negative spread value).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展值允许您按指定的数量在所有方向上扩展或收缩阴影。在这个例子中，负值将阴影向后拉。结果是我们只在底部看到阴影，而不是在所有方向看到模糊“泄漏”出来（因为负的扩展值正在抵消模糊）。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the W3C specification for the `box-shadow` property at [http://www.w3.org/TR/css3-background/](http://www.w3.org/TR/css3-background/).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.w3.org/TR/css3-background/](http://www.w3.org/TR/css3-background/)阅读box-shadow属性的W3C规范。
- en: Background gradients
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景渐变
- en: In days gone by, to achieve a background gradient on an element, it was necessary
    to tile a thin graphical slice of the gradient. As graphics resources go, it's
    quite an economical trade-off. An image, only a pixel or two wide, isn't going
    to break the bandwidth bank and on a single site it can be used on multiple elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的日子里，要在元素上实现背景渐变，需要平铺一个薄的渐变图形切片。作为图形资源，这是一个相当经济的权衡。一张只有一两个像素宽的图像不会耗尽带宽，在单个站点上可以用于多个元素。
- en: However, if we need to tweak the gradient it still requires round-trips to the
    graphics editor. Plus, occasionally, content might 'break out' of the gradient
    background, extending beyond the images' fixed size limitations. This problem
    is compounded with a responsive design, as sections of a page may increase at
    different viewports.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们需要调整渐变，仍然需要往返到图形编辑器。而且，偶尔，内容可能会“突破”渐变背景，超出图像的固定大小限制。这个问题在响应式设计中更加严重，因为页面的部分可能在不同的视口上增加。
- en: With a CSS `background-image` gradient however, things are far more flexible.
    As part of the CSS Image Values and Replaced Content Module Level 3, CSS enables
    us to create linear and radial background gradients. Let's look how we can define
    them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用CSS背景图像渐变，事情要灵活得多。作为CSS图像值和替换内容模块3级的一部分，CSS使我们能够创建线性和径向背景渐变。让我们看看如何定义它们。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The specification for CSS Image Values and Replaced Content Module Level 3 can
    be found at [http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CSS图像值和替换内容模块3级的规范可以在[http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/)找到。
- en: The linear-gradient notation
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性渐变符号
- en: 'The `linear-gradient` notation, in its simplest form, looks like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 线性渐变符号，在其最简单的形式中，看起来像这样：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will create a linear gradient that starts at red (the gradient starts from
    the top by default) and fades to blue.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个线性渐变，从红色开始（默认从顶部开始）到蓝色。
- en: Specifying gradient direction
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定渐变方向
- en: 'Now, if you want to specify a direction for the gradient, there are a couple
    of ways. The gradient will always begin in the opposite direction to where you
    are sending it. However, when no direction is set, a gradient will always default
    to a top to bottom direction. For example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您想为梯度指定一个方向，有几种方法。梯度将始终从您发送它的相反方向开始。但是，当没有设置方向时，梯度将始终默认为从上到下的方向。例如：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this instance, the gradient heads to the top right. It starts red in the
    bottom-left corner and fades to blue at the top right.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，梯度朝右上方。它从左下角开始是红色，逐渐变为右上角的蓝色。
- en: 'If you''re more mathematically minded, you may believe it would be comparable
    to write the gradient like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢数学，你可能会认为写梯度会像这样：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, keep in mind that on a rectangular box, a gradient that heads 'to top
    right' (always the top right of the element it's applied to) will end in a slightly
    different position than `45deg` (always 45 degrees from its starting point).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请记住，在矩形框上，一个梯度向'右上方'（始终是应用于的元素的右上方）的梯度将以与`45deg`（始终是从其起始点开始的45度）略有不同的位置结束。
- en: 'It''s worth knowing you can also start gradients before they are visible within
    a box. For example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 值得知道的是，您还可以在盒子内部可见之前开始梯度。例如：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This would render a gradient as if it had started before it is even visible
    inside the box.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现一个梯度，就好像它在盒子内部甚至在可见之前就开始了。
- en: We've actually used a color stop in that last example to define a place where
    a color should begin and end so let's look at those more fully.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在上一个例子中，我们使用了一个颜色停止来定义颜色应该开始和结束的位置，所以让我们更全面地看一下。
- en: Color stops
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色停止
- en: 'Perhaps the handiest thing about background gradients is color stops. They
    provide the means to set which color is used at which point in a gradient. With
    color stops you can specify something as complex as you are likely to need. Consider
    this example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 背景梯度最方便的地方可能是颜色停止。它们提供了在梯度中设置哪种颜色在哪一点使用的方法。使用颜色停止，您可以指定您可能需要的复杂性。考虑这个例子：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here''s how that `linear-gradient` renders:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`linear-gradient`的呈现方式：
- en: '![Color stops](img/3777_06_03.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![颜色停止](img/3777_06_03.jpg)'
- en: In this example (`example_06-03`), a direction has not been specified so the
    default top to bottom direction applies.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子（`example_06-03`）中，没有指定方向，因此默认的从上到下的方向适用。
- en: Color stops inside a gradient are written comma separated and defined by giving
    first the color, and then the position of the stop. It's generally advisable not
    to mix units in one notation but you can. You can have as many color stops as
    you like and colors can be written as a keyword, HEX, RGBA, or HSLA value.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度内的颜色停止以逗号分隔，并通过给出首先颜色，然后停止的位置来定义。通常建议不要在一个符号中混合使用单位，但您可以。您可以拥有尽可能多的颜色停止，并且颜色可以写为关键字、HEX、RGBA或HSLA值。
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that there have been a number of different background gradient syntaxes
    over the years so this is one area that is particularly difficult to write fallbacks
    for by hand. At the risk of sounding like a broken record (kids, if you don't
    know what a 'record' is, ask mom or dad), make your life easier with a tool such
    as Autoprefixer. This lets you write the current W3C standard syntax (as detailed
    earlier) and it will automatically create the prior versions for you.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，多年来已经有许多不同的背景梯度语法，因此这是一个特别难以手工编写回退的领域。冒着听起来像是一张破碎的唱片的风险（孩子们，如果你不知道'唱片'是什么，请问爸爸妈妈），使用诸如Autoprefixer之类的工具可以让您的生活更轻松。这样，您可以编写当前的W3C标准语法（如前面详细介绍的）并自动为您创建之前的版本。
- en: Read the W3C specification for linear background gradients at [http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读W3C规范，了解线性背景梯度[http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/)。
- en: Adding fallback for older browsers
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为旧版浏览器添加回退
- en: 'As a simple fallback for older browsers that don''t support background gradients,
    just define a solid background color first. That way older browsers will at least
    render a solid background if they don''t understand the gradient that''s defined
    afterwards. For example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旧版浏览器的简单回退，只需首先定义一个纯色背景。这样，旧版浏览器将至少在不理解后面定义的梯度时呈现一个纯色背景。例如：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Radial background gradients
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 径向背景梯度
- en: It's equally simple to create a radial gradient in CSS. These typically begin
    from a central point and spread out smoothly in an elliptical or circular shape.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中创建径向梯度同样简单。这些通常从一个中心点开始，并以椭圆或圆形平滑地扩展开来。
- en: 'Here''s the syntax for a radial background gradient (you can play with it in
    `example_06-04`):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是径向背景梯度的语法（您可以在`example_06-04`中进行操作）：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Breakdown of the radial-gradient syntax
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 径向梯度语法的分解
- en: 'After specifying the property (`background:`) we begin the `radial-gradient`
    notation. To start with, before the first comma, we define the shape or size of
    the gradient and the position. We have used 12rem circle for the shape and size
    above but consider some other examples:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定属性（`background:`）之后，我们开始`radial-gradient`符号。首先，在第一个逗号之前，我们定义梯度的形状或大小和位置。我们上面使用了12rem圆形来定义形状和大小，但考虑一些其他例子：
- en: '`5em` would be a circle 5em in size. It''s possible to omit the ''circle''
    part if giving just a size.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5em`将是一个尺寸为5em的圆。如果只给出尺寸，可以省略''circle''部分。'
- en: '`circle` would be a circle the full size of the container (the size of a radial
    gradient defaults to ''farthest corner'' if omitted—more on sizing keywords shortly)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle`将是容器的完整尺寸的圆形（如果省略，则径向梯度的大小默认为''最远的角'' - 关于尺寸关键字的更多信息）'
- en: '`40px 30px` would be a ellipse as if drawn inside a box 40px wide by 30px tall'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`40px 30px`将是一个椭圆，就像在一个40px宽，30px高的框内绘制一样'
- en: '`ellipse` would create an ellipse shape that would fit within the element'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ellipse`将创建一个椭圆形状，适合元素内'
- en: 'Next, after the size and/or shape, we define the position. The default position
    is center but let''s look at some other possibilities and how they can be defined:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在尺寸和/或形状之后，我们定义位置。默认位置是中心，但让我们看看其他可能性以及它们如何定义：
- en: '**at top right** starts the radial gradient from the top right'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在右上方** 从右上方开始径向渐变'
- en: '**at right 100px top 20px** starts the gradient 100px from the right edge and
    20px from the top edge'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在右侧 100px 顶部 20px** 从右侧边缘 100px 和顶部边缘 20px 开始渐变'
- en: '**at center left** starts it halfway down the left side of the element'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在左侧中心** 从元素的左侧中间开始'
- en: We end our size, shape, and position 'parameters' with a comma and then define
    any color stops; which work in exactly the same manner as they do with `linear-gradient`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以逗号结束我们的大小、形状和位置 '参数'，然后定义任何颜色停止；它们的工作方式与 `linear-gradient` 完全相同。
- en: 'To simplify the notation: size, shape, and position before the first comma,
    then as many color stops as needed after it (with each stop separated with commas).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化表示：在第一个逗号之前是大小、形状和位置，然后在其后是尽可能多的颜色停止（每个停止之间用逗号分隔）。
- en: Handy 'extent' keywords for responsive sizing
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式尺寸的方便 'extent' 关键字
- en: 'For responsive work, you may find it advantageous to size gradients proportionally
    rather than using fixed pixel dimensions. That way you know you are covered (both
    literally and figuratively) when the size of elements change. There are some handy
    sizing keywords that can be applied to gradients. You would write them like this,
    in place of any size value:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于响应式工作，您可能会发现按比例调整渐变的大小比使用固定像素尺寸更有优势。这样，当元素的大小发生变化时，您就知道自己已经覆盖到了（从字面上和比喻上）。有一些方便的尺寸关键字可以应用于渐变。您可以像这样写它们，而不是使用任何尺寸值：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is what each of them does:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它们各自的作用：
- en: '`closest-side`: The shape meets the side of the box nearest to the center (in
    the case of circles), or meets both the horizontal and vertical sides that are
    closest to the center (in the case of ellipses)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closest-side`: 形状与盒子最靠近中心的边相遇（对于圆形），或者与最靠近中心的水平和垂直边相遇（对于椭圆）。'
- en: '`closest-corner`: The shape meets exactly the closest corner of the box from
    its center'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closest-corner`: 形状与盒子的最近角完全相遇'
- en: '`farthest-side`: The opposite of `closest-side`, in that rather than the shape
    meeting the nearest size, it''s sized to meet the one farthest from its center
    (or both the furthest vertical and horizontal side in the case of an ellipse)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`farthest-side`: 与 `closest-side` 相反，不是形状与最近的边相遇，而是大小与离其中心最远的边相遇（或在椭圆的情况下，与最远的垂直和水平边相遇）。'
- en: '`farthest-corner`: The shape expands to the farthest corner of the box from
    the center'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`farthest-corner`: 形状扩展到盒子的中心到最远角'
- en: '`cover`: Identical to `farthest-corner`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover`: 与 `farthest-corner` 相同'
- en: '`contain`: Identical to `closest-side`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contain`: 与 `closest-side` 相同'
- en: Read the W3C specification for radial background gradients at [http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 W3C 规范，了解径向背景渐变 [http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/)。
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**The cheat''s way to perfect CSS3 linear and radial gradients**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**完美的 CSS3 线性和径向渐变的快捷方法**'
- en: If defining gradients by hand seems like hard work, there are some great online
    gradient generators. My personal favorite is [http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/).
    It uses a graphics editor style GUI, allowing you to pick your colors, stops,
    gradient style (linear and radial gradients are supported), and even the color
    space (HEX, RGB(A), HSL(A)) you'd like the final gradient in. There are also loads
    of preset gradients to use as starting points. If that wasn't enough, it even
    gives you optional code for fixing up Internet Explorer 9 to show the gradient
    and a fallback flat color for older browsers. Still not convinced? How about the
    ability to generate a CSS gradient based on upon the gradient values in an existing
    image? Thought that might swing it for you.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果手动定义渐变看起来很费力，那么有一些很棒的在线渐变生成器。我个人最喜欢的是 [http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)。它使用图形编辑器风格的
    GUI，允许您选择颜色、停止、渐变样式（支持线性和径向渐变），甚至是您想要最终渐变的颜色空间（HEX、RGB(A)、HSL(A)）。还有很多预设的渐变可用作起点。如果这还不够，它甚至为您提供了可选的代码，用于修复
    Internet Explorer 9 以显示渐变和为旧版浏览器提供备用的纯色。还不确定？那么您是否能够根据现有图像中的渐变值生成 CSS 渐变？我想这可能会说服您。
- en: Repeating gradients
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复渐变
- en: 'CSS3 also gives us the ability to create repeating background gradients. Let''s
    take a look at how it''s done:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 还赋予了我们创建重复背景渐变的能力。让我们看看它是如何完成的：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here''s how that looks (don''t look for long, may cause nausea):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子（不要看太久，可能会引起恶心）：
- en: '![Repeating gradients](img/3777_06_04.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![重复渐变](img/3777_06_04.jpg)'
- en: Firstly, prefix the `linear-gradient` or `radial-gradient` with repeating, then
    it follows the same syntax as a normal gradient. Here I've used pixel distances
    between the black, orange, and red colors (0px, 5px, and 10px respectively) but
    you could also choose to use percentages. For best results, it's recommended to
    stick to the same measurement units (such as pixels or percentages) within a gradient.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，用重复前缀 `linear-gradient` 或 `radial-gradient`，然后它遵循与正常渐变相同的语法。在这里，我使用了黑色、橙色和红色之间的像素距离（分别为
    0px、5px 和 10px），但您也可以选择使用百分比。为了获得最佳效果，建议在渐变中使用相同的测量单位（如像素或百分比）。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Read the W3C information on repeating gradients at [http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 W3C 关于重复渐变的信息 [http://www.w3.org/TR/css3-images/](http://www.w3.org/TR/css3-images/)。
- en: There's one more way of using background gradients I'd like to share with you.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种使用背景渐变的方法我想和你分享。
- en: Background gradient patterns
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景渐变图案
- en: 'Although I''ve often used subtle linear gradients in designs, I''ve found less
    practical use for radial gradients and repeating gradients. However, clever folks
    out there have harnessed the power of gradients to create background gradient
    patterns. Let''s look at an example from CSS Ninja, Lea Verou''s collection of
    CSS3 background patterns, available at [http://lea.verou.me/css3patterns/](http://lea.verou.me/css3patterns/):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我经常在设计中使用微妙的线性渐变，但对于径向渐变和重复渐变的实际用途较少。然而，聪明的人们已经利用渐变的力量来创建背景渐变图案。让我们看一个来自CSS忍者Lea
    Verou的CSS3背景图案集合的例子，可在[http://lea.verou.me/css3patterns/](http://lea.verou.me/css3patterns/)上找到。
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here''s what that gives us in the browser, a `carbon-fibre` background effect:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器中得到的效果，一个`carbon-fibre`背景效果：
- en: '![Background gradient patterns](img/3777_06_05.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![背景渐变图案](img/3777_06_05.jpg)'
- en: How about that? Just a few lines of CSS3 and we have an easily editable, responsive,
    and scalable background pattern.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么样？只需几行CSS3代码，我们就有了一个易于编辑、响应式和可伸缩的背景图案。
- en: Tip
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You might find it useful to add `background-repeat: no-repeat` at the end of
    the rule to better understand how it works.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '您可能会发现在规则的末尾添加`background-repeat: no-repeat`会更好地理解它的工作原理。'
- en: 'As ever, thanks to media queries, different declarations can be used for different
    responsive scenarios. For example, although a gradient pattern might work well
    at smaller viewports, it might be better to go with a plain background at larger
    ones:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，借助媒体查询，可以针对不同的响应式场景使用不同的声明。例如，尽管渐变图案在较小的视口上可能效果很好，但在较大的视口上最好使用纯色背景：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can view this example at `example_06-05`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`example_06-05`中查看此示例。
- en: Multiple background images
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重背景图像
- en: Although a little out of fashion at the moment, it used to be a fairly common
    design requirement to build a page with a different background image at the top
    of the page than at the bottom. Or perhaps to use different background images
    for the top and bottom of a content section within a page. Back in the day, with
    CSS2.1, achieving the effect typically required additional markup (one element
    for the header background and another for the footer background).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在有点过时，但过去构建页面时通常需要在页面顶部和底部使用不同的背景图像，或者在页面内的内容部分使用不同的背景图像。在CSS2.1时代，通常需要额外的标记（一个用于页眉背景，另一个用于页脚背景）来实现这种效果。
- en: With CSS3 you can stack as many background images as you need on an element.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS3，您可以在元素上堆叠尽可能多的背景图像。
- en: 'Here''s the syntax:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是语法：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As with the stacking order of multiple shadows, the image listed first appears
    nearest to the top in the browser. You can also add a general color for the background
    in the same declaration if you wish, like this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 与多个阴影的堆叠顺序一样，首先列出的图像在浏览器中最靠近顶部。如果愿意，您还可以在同一声明中添加背景的一般颜色，如下所示：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Specify the color last and this will show below every image specified above.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后指定颜色，这将显示在上面指定的每个图像下面。
- en: Tip
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When specifying multiple background elements, you don't have to stack the different
    images on different lines; I just find it easier to read code when written this
    way.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定多个背景元素时，您不必将不同的图像堆叠在不同的行上；我只是发现这种写法更容易阅读代码。
- en: Browsers that don't understand the multiple backgrounds rule (such as Internet
    Explorer 8 and below) will ignore the rule altogether, so you may wish to declare
    a 'normal' background property immediately before a CSS3 multiple background rule
    as a fallback for really old browsers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 不理解多重背景规则的浏览器（如Internet Explorer 8及更低版本）将完全忽略该规则，因此您可能希望在CSS3多重背景规则之前立即声明一个“正常”的背景属性，作为非常老的浏览器的后备。
- en: With the multiple background images, as long as you're using PNG files with
    transparency, any partially transparent background images that sit on top of another
    will show through below. However, background images don't have to sit on top of
    one another, nor do they all have to be the same size.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个背景图像时，只要使用带有透明度的PNG文件，任何部分透明的背景图像都会显示在另一个背景图像下面。但是，背景图像不必彼此叠放，也不必都是相同的尺寸。
- en: Background size
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景大小
- en: 'To set different sizes for each image, use the `background-size` property.
    When multiple images have been used, the syntax works like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要为每个图像设置不同的尺寸，请使用`background-size`属性。当使用多个图像时，语法如下：
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The size values (first width, then height) for each image are declared, separated
    by commas, in the order they are listed in the background property. As in the
    example above, you can use percentage or pixel values for each image alongside
    the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图像的尺寸值（首先是宽度，然后是高度）都是按照在背景属性中列出的顺序，用逗号分隔声明的。与上面的示例一样，您可以在每个图像旁边使用百分比或像素值，以及以下内容：
- en: '`auto`: Which sets the element at its native size'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto`：将元素设置为其本机大小'
- en: '`cover`: Which expands the image, preserving its aspect ratio, to cover the
    area of the element'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover`：将图像扩展，保持其纵横比，以覆盖元素的区域'
- en: '`contain`: Which expands the image to fit its longest side within the element
    while preserving the aspect ratio'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contain`：将图像扩展到元素内适应其最长的一侧，同时保持纵横比'
- en: Background position
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景位置
- en: If you have different background images, at different sizes, the next thing
    you'll want is the ability to position them differently. Thankfully, the `background-position`
    property facilitates that too.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有不同尺寸的不同背景图像，接下来您会希望能够以不同的方式定位它们。幸运的是，`background-position`属性也可以实现这一点。
- en: Let's put all this background image capability together, alongside some of the
    responsive units we have looked at in previous chapters.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有这些背景图像功能与我们在之前章节中看到的一些响应式单位放在一起。
- en: 'Let''s create a simple space scene, made with a single element and three background
    images, set at three different sizes, and positioned in three different ways:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的太空场景，由一个单一元素和三个背景图像组成，设置为三种不同的尺寸，并以三种不同的方式定位：
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You''ll see something like this in the browser:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在浏览器中看到类似于这样的东西：
- en: '![Background position](img/3777_06_06.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![背景位置](img/3777_06_06.jpg)'
- en: We have the stars image at the bottom, then the moon on top, and finally an
    image of the Rosetta space probe on top. View this for yourself in `example_06-06`.
    Notice that if you adjust the browser window, the responsive length units work
    well (`vmax`, `vh`, and `vw`) and retain proportion, while pixel based ones do
    not.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在底部有星星图片，然后是顶部的月亮，最后是顶部的罗塞塔空间探测器的图片。您可以在`example_06-06`中自行查看。请注意，如果调整浏览器窗口，响应式长度单位（`vmax`，`vh`和`vw`）可以很好地工作，并保持比例，而基于像素的单位则不行。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Where no `background-position` is declared, the default position of top left
    is applied.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有声明`background-position`，则会应用默认位置为左上角。
- en: Background shorthand
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景简写
- en: There is a shorthand method of combining the different background properties
    together. You can read the specification for it at [http://www.w3.org/TR/css3-background/](http://www.w3.org/TR/css3-background/).
    However, my experience so far has been that it produces erratic results. Therefore,
    I recommend the longhand method and declare the multiple images first, then the
    size, and then the position.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种简写方法可以将不同的背景属性组合在一起。您可以在[http://www.w3.org/TR/css3-background/](http://www.w3.org/TR/css3-background/)的规范中阅读它。然而，到目前为止，我的经验是它会产生不稳定的结果。因此，我建议使用长格式方法，先声明多个图像，然后是大小，然后是位置。
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Read the W3C documentation on multiple background elements at [http://www.w3.org/TR/css3-background/](http://www.w3.org/TR/css3-background/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读W3C关于多个背景元素的文档，网址为[http://www.w3.org/TR/css3-background/](http://www.w3.org/TR/css3-background/)。
- en: High-resolution background images
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高分辨率背景图片
- en: Thanks to media queries, we have the ability to load in different background
    images, not just at different viewport sizes but also different viewport resolutions.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于媒体查询，我们可以加载不同的背景图片，不仅在不同的视口大小，还在不同的视口分辨率下。
- en: 'For example, here is the official way of specifying a background image for
    a ''normal'' and a high DPI screen. You can find this in `example_06-07`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是为'普通'和高DPI屏幕指定背景图片的官方方式。您可以在`example_06-07`中找到这个：
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The media query is written exactly as it is with width, height, or any of the
    other capability tests. In this example, we are defining the minimum resolution
    that `bg@1_5x.jpg` should use as 1.5dppx (device pixels per CSS pixel). We could
    also use **dpi** (**dots per inch**) or **dpcm** (**dots per centimeter**) units
    if preferable. However, despite the poorer support, I find dppx the easiest unit
    to think about; as 2dppx is twice the resolution, 3dppx would be three times the
    resolution. Thinking about that in dpi is trickier. 'Standard' resolution would
    be 96dpi, twice that resolution would be 192dpi and so on.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询的编写方式与宽度、高度或其他能力测试一样。在这个例子中，我们定义了`bg@1_5x.jpg`应该使用的最小分辨率为1.5dppx（每个CSS像素的设备像素）。如果需要的话，我们也可以使用**dpi**（每英寸点数）或**dpcm**（每厘米点数）单位。然而，尽管支持较差，我发现dppx是最容易理解的单位；因为2dppx是两倍的分辨率，3dppx将是三倍的分辨率。在dpi中考虑这一点就比较棘手。'标准'分辨率将是96dpi，两倍分辨率将是192dpi，依此类推。
- en: Support for the 'dppx' unit isn't great right now (check your target browsers
    at [http://caniuse.com/](http://caniuse.com/)) so to get this working everywhere
    smoothly, you'll need to write a few versions of the media query resolution or,
    as ever, rely on a tool to do the prefixing for you.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 目前对于'dppx'单位的支持并不是很好（在[http://caniuse.com/](http://caniuse.com/)上检查您的目标浏览器），因此为了使其在各处都能平稳运行，您需要编写几个版本的媒体查询分辨率，或者像往常一样，依赖工具来为您添加前缀。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**A brief note on performance**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于性能的简短说明**'
- en: Just remember that large images can potentially slow down the feel of your site
    and lead to a poor experience for users. While a background image won't block
    the rendering of the page (you'll still see the rest of the site drawn to the
    page while you wait for the background image), it will add to the total weight
    of the page, which is important if users are paying for data.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，大图像可能会减慢您网站的速度，并导致用户体验不佳。虽然背景图片不会阻止页面的渲染（在等待背景图片时，您仍然会看到页面的其余部分被绘制到页面上），但它会增加页面的总重量，这对于用户支付数据来说很重要。
- en: CSS filters
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS滤镜
- en: 'There is a glaring problem with `box-shadow`. As the name implies, it is limited
    to the rectangular CSS box shape of the element it is applied to. Here''s a screen
    grab of a triangle shape made with CSS (you can view the code in `example_06-08`)
    with a box shadow applied:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-shadow`存在一个明显的问题。正如其名称所暗示的那样，它仅限于应用于元素的矩形CSS框形状。这是一个使用CSS制作的三角形形状的屏幕截图（您可以在`example_06-08`中查看代码），应用了一个框阴影：'
- en: '![CSS filters](img/3777_06_07.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![CSS filters](img/3777_06_07.jpg)'
- en: Not exactly what I was hoping for. Thankfully, we can overcome this issue with
    CSS filters, part of the Filter Effects Module Level 1 ([http://www.w3.org/TR/filter-effects/](http://www.w3.org/TR/filter-effects/)).
    They are not as widely supported as `box-shadow`, but work great with a progressive
    enhancement approach. If a browser doesn't understand what to do with the filter
    it simply ignores it. For supporting browsers, the fancy effects are rendered.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 并不完全是我所希望的。幸运的是，我们可以通过CSS滤镜来解决这个问题，这是Filter Effects Module Level 1的一部分（[http://www.w3.org/TR/filter-effects/](http://www.w3.org/TR/filter-effects/)）。它们的支持并不像`box-shadow`那样广泛，但在渐进增强的方法中效果很好。如果浏览器不理解如何处理滤镜，它就会简单地忽略它。对于支持滤镜的浏览器，这些花哨的效果会被渲染出来。
- en: 'Here is that same element with a CSS `drop-shadow` filter applied instead of
    a `box-shadow`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相同的元素，应用了CSS `drop-shadow`滤镜，而不是`box-shadow`：
- en: '![CSS filters](img/3777_06_08.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![CSS filters](img/3777_06_08.jpg)'
- en: 'Here is the format for CSS filters:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS滤镜的格式：
- en: '[PRE27]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After the `filter` property we specify the filter we want to use, `drop-shadow`
    in this example, and then pass in the arguments for the filter. The `drop-shadow`
    follows a similar syntax to `box-shadow` so this one is easy; x and y offset,
    blur, then spread radius (both optional), and finally color (also optional, although
    I recommend specifying a color for consistency).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在`filter`属性之后，我们指定要使用的滤镜，在这个例子中是`drop-shadow`，然后传入滤镜的参数。`drop-shadow`遵循与`box-shadow`类似的语法，因此这很容易；x和y偏移量，模糊度，然后是扩散半径（都是可选的），最后是颜色（同样是可选的，尽管我建议为了一致性而指定颜色）。
- en: Tip
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: CSS filters are actually based upon SVG filters which have a wider support.
    We'll look at the SVG based equivalent in [Chapter 7](ch07.html "Chapter 7. Using
    SVGs for Resolution Independence"), *Using SVGs for Resolution Independence*.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: CSS滤镜实际上是基于具有更广泛支持的SVG滤镜的。我们将在[第7章](ch07.html "第7章。使用SVG实现分辨率独立性")中看到基于SVG的等效物，*使用SVG实现分辨率独立性*。
- en: Available CSS filters
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的CSS滤镜
- en: There are a few filters to choose from. We will look at each. While images of
    most of the filters follow, readers reading a hard copy of this book (with monochrome
    images) may struggle to notice the differences. If you're in that situation, remember
    you can still view the various filters in the browser by opening `example_06-08`.
    I'm going to list each out now with a suitable value specified. As you might imagine,
    more of a value means more of the filter applied. Where images are used, the image
    is shown after the relevant code.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个滤镜可供选择。我们将逐一查看。虽然大多数滤镜的图像随后会出现，但阅读本书的读者（使用单色图像的硬拷贝）可能会难以注意到差异。如果你处于这种情况，请记住你仍然可以通过打开`example_06-08`在浏览器中查看各种滤镜。我现在将列出每一个适当的值。正如你所想象的那样，更多的值意味着更多的滤镜应用。在使用图像的地方，相关代码之后会显示图像。
- en: '`filter: url (''./img/filters.svg#filterRed'')`: Lets you specify an SVG filter
    to use.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: url (''./img/filters.svg#filterRed'')`: 让你指定要使用的SVG滤镜。'
- en: '`filter: blur(3px)`: Use a single length value (but not as a percentage).![Available
    CSS filters](img/3777_06_09.jpg)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: blur(3px)`: 使用单个长度值（但不是百分比）。![可用的CSS滤镜](img/3777_06_09.jpg)'
- en: '`filter: brightness(2)`: Use a value from 0 to 1 or 0% to 100%. 0/0% is black,
    1/100% is ''normal,'' and anything beyond brightens the element further.![Available
    CSS filters](img/3777_06_10.jpg)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: brightness(2)`: 使用从0到1或0%到100%的值。0/0%是黑色，1/100%是''正常''，而任何超过这个值的都会使元素更亮。![可用的CSS滤镜](img/3777_06_10.jpg)'
- en: '`filter: contrast(2)`: Use a value from 0 to 1 or 0% to 100%. 0/0% is black,
    1/100% is ''normal,'' and anything beyond raises the color contrast.![Available
    CSS filters](img/3777_06_11.jpg)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: contrast(2)`: 使用从0到1或0%到100%的值。0/0%是黑色，1/100%是''正常''，而任何超过这个值的都会提高颜色对比度。![可用的CSS滤镜](img/3777_06_11.jpg)'
- en: '`filter: drop-shadow(4px 4px 6px #333)`: We looked at `drop-shadow` in detail
    earlier.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: drop-shadow(4px 4px 6px #333)`: 我们之前详细讨论过`drop-shadow`。'
- en: '`filter: grayscale(.8)`: Use a value from 0 to 1, or 0% to 100% to apply varying
    amounts of grayscale to the element. A value of 0 would be no grayscale while
    a value of 1 would be fully grayscale.![Available CSS filters](img/3777_06_12.jpg)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: grayscale(.8)`: 使用从0到1的值，或者0%到100%的值来对元素应用不同程度的灰度。0的值将没有灰度，而1的值将完全是灰度。![可用的CSS滤镜](img/3777_06_12.jpg)'
- en: '`filter: hue-rotate(25deg)`: Use a value between 0 and 360 degrees to adjust
    the colors around the color wheel.![Available CSS filters](img/3777_06_13.jpg)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: hue-rotate(25deg)`: 使用从0到360度的值来调整颜色在色轮周围的颜色。![可用的CSS滤镜](img/3777_06_13.jpg)'
- en: '`filter: invert(75%)`: Use a value from 0 to 1, or 0% to 100% to define the
    amount the element has its colors inverted.![Available CSS filters](img/3777_06_14.jpg)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: invert(75%)`: 使用从0到1的值，或者0%到100%的值来定义元素颜色反转的程度。![可用的CSS滤镜](img/3777_06_14.jpg)'
- en: '`filter: opacity(50%)`: Use a value from 0 to 1, or 0% to 100% to alter the
    opacity of the element. This is similar to the `opacity` property you will already
    be familiar with. However, filters, as we shall see, can be combined and this
    allows opacity to be combined with other filters in one go.![Available CSS filters](img/3777_06_15.jpg)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: opacity(50%)`: 使用从0到1的值，或者0%到100%的值来改变元素的不透明度。这类似于你已经熟悉的`不透明度`属性。然而，正如我们将看到的那样，滤镜可以组合，这允许不透明度与其他滤镜一起组合。![可用的CSS滤镜](img/3777_06_15.jpg)'
- en: '`filter: saturate(15%)`: Use a value from 0 to 1, or 0% to 100% to de-saturate
    an image and anything above 1/100% to add extra saturation.![Available CSS filters](img/3777_06_16.jpg)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: saturate(15%)`: 使用从0到1的值，或者0%到100%的值来去饱和图像，超过1/100%则增加额外的饱和度。![可用的CSS滤镜](img/3777_06_16.jpg)'
- en: '`filter: sepia(.75)`: Use a value from 0 to 1, or 0% to 100% to make the element
    appear with a more sepia color. 0/0% leaves the element ''as is'' while anything
    above that applies greater amounts of sepia up to a maximum of 1/100%.![Available
    CSS filters](img/3777_06_17.jpg)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter: sepia(.75)`: 使用从0到1的值，或者0%到100%的值使元素呈现出更多的深褐色。0/0%使元素保持原样，而任何超过这个值的都会应用更多的深褐色，最多为1/100%。![可用的CSS滤镜](img/3777_06_17.jpg)'
- en: Combining CSS filters
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合CSS滤镜
- en: 'You can also combine filters easily; simply space separate them. For example,
    here is how you would apply `opacity`, `blur`, and `sepia` filters at once:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以轻松地组合滤镜；只需用空格分隔它们。例如，这是如何一次应用`不透明度`，`模糊`和`深褐色`滤镜的：
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: Apart from `hue-rotate`, when using filters, negative values are not
    allowed.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：除了`hue-rotate`之外，使用滤镜时，不允许使用负值。
- en: I think you'll agree, CSS filters offer some pretty powerful effects. They are
    also effects we can transition and transform from situation to situation. We'll
    look at how to do that in [Chapter 8](ch08.html "Chapter 8. Transitions, Transformations,
    and Animations"), *Transitions, Transformations, and Animations*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你会同意，CSS滤镜提供了一些非常强大的效果。这些也是我们可以从一种情况过渡到另一种情况的效果。我们将在[第8章](ch08.html "第8章。过渡，转换和动画")中看到如何做到这一点，*过渡，转换和动画*。
- en: However, before you go crazy with these new toys, we need to have a grown up
    conversation about performance.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在你对这些新玩具感到兴奋之前，我们需要就性能进行一次成熟的对话。
- en: A warning on CSS performance
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于CSS性能的警告
- en: 'When it comes to CSS performance, I would like you to remember this one thing:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈到CSS性能时，我希望你记住一件事：
- en: '|   | *"Architecture is outside the braces, performance is inside."* |   |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '|   | *"建筑在括号外，性能在括号内。"* |   |'
- en: '|   | --*Ben Frain* |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Ben Frain* |'
- en: 'Let me expand on my little maxim:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我扩展一下我的小格言：
- en: As far as I am able to prove, worrying about whether a CSS selector (the part
    outside the curly braces), is fast or slow is pointless. I set out to prove this
    at [http://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/](http://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 就我所能证明的，担心CSS选择器（大括号外的部分）是快还是慢是毫无意义的。我在[http://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/](http://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/)中试图证明这一点。
- en: However, one thing that really can grind a page to a halt, CSS wise, is 'expensive'
    properties (the parts inside the curly braces). When we use the term 'expensive',
    in relation to certain styles, it simply means it costs the browser a lot of overhead.
    It's something that the browser finds overly taxing to do.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，从CSS的角度来看，真正会使页面停滞不前的一件事是“昂贵”的属性（大括号内的部分）。当我们在某些样式方面使用术语“昂贵”时，它简单地意味着它给浏览器带来了很多开销。这是浏览器发现过于繁重的事情。
- en: It's possible to take a common sense guess about what will likely cause the
    browser extra work. It's basically anything it would have to compute before it
    can paint things to the screen. For example, compare a standard div with a flat
    solid background, against a semi-opaque image, on top of a background made up
    of multiple gradients, with rounded corners and a `drop-shadow`. The latter is
    more expensive; it will result in far more computational work for the browser
    and subsequently cause more overhead.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据常识猜测什么可能会导致浏览器额外工作。基本上，任何在绘制屏幕之前必须计算的东西。例如，比较一个具有纯色背景的标准div和一个半透明图像，放在由多个渐变组成的背景之上，带有圆角和`drop-shadow`。后者更昂贵；它将导致浏览器进行更多的计算工作，随后会导致更多的开销。
- en: Therefore, when you apply effects like filters, do so judiciously and, if possible,
    test whether the page speed suffers on the lowest powered devices you are hoping
    to support. At the least, switch on development tool features such as continuous
    page repainting in Chrome and toggle any affects you think may cause problems.
    This will provide you with data (in the form of a millisecond reading of how long
    the current viewport is taking to paint) to make a more educated decision on which
    effects to apply. The lower the figure, the faster the page will perform (although
    be aware that browsers/platforms vary so, as ever, test on real devices where
    possible).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您应用滤镜等效果时，请谨慎行事，并在可能的情况下测试页面速度是否在您希望支持的最低功率设备上受到影响。至少，在Chrome中打开开发工具功能，如连续页面重绘，并切换任何可能会导致问题的效果。这将为您提供数据（以毫秒为单位，显示当前视口绘制所需的时间），以便更明智地决定应用哪些效果。数字越低，页面的性能越快（尽管要注意浏览器/平台会有所不同，因此尽可能在真实设备上进行测试）。
- en: 'For more on this subject I recommend the following resource:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此主题的更多信息，我建议参考以下资源：
- en: '[https://developers.google.com/web/fundamentals/performance/rendering/](https://developers.google.com/web/fundamentals/performance/rendering/)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/web/fundamentals/performance/rendering/](https://developers.google.com/web/fundamentals/performance/rendering/)'
- en: '![A warning on CSS performance](img/3777_06_18.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![CSS性能警告](img/3777_06_18.jpg)'
- en: A note on CSS masks and clipping
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于CSS蒙版和裁剪的说明
- en: In the near future, CSS will be able to offer masks and clipping as part of
    the CSS Masking Module Level 1\. These features will enable us to clip an image
    with a shape or arbitrary path (specified via SVG or a number of polygon points).
    Sadly, despite the specification being at the more advanced CR stage, as I write
    this, the browser implementations are just too buggy to recommend. However, it's
    a fluid situation so by the time you are reading this, there's every chance the
    implementations will be solid. For the curious, I'll therefore refer you to the
    specification at [http://www.w3.org/TR/css-masking/](http://www.w3.org/TR/css-masking/).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，CSS将能够在CSS蒙版模块1级中提供蒙版和裁剪。这些功能将使我们能够使用形状或任意路径（通过SVG或多边形点的方式指定）裁剪图像。遗憾的是，尽管规范处于更高级的CR阶段，但在我写这篇文章时，浏览器的实现仍然太多bug，无法推荐。但是，这是一个不断变化的情况，因此在您阅读本文时，实现可能已经非常稳定。对于好奇的人，我将向您推荐规范[http://www.w3.org/TR/css-masking/](http://www.w3.org/TR/css-masking/)。
- en: 'I also think Chris Coyier does a great job of explaining where things are at
    support wise in this post:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为克里斯·科耶在这篇文章中很好地解释了支持方面的情况：
- en: '[http://css-tricks.com/clipping-masking-css/](http://css-tricks.com/clipping-masking-css/)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://css-tricks.com/clipping-masking-css/](http://css-tricks.com/clipping-masking-css/)'
- en: 'Finally, a good overview and explanation of what will be possible is offered
    by Sara Soueidan in this post:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，萨拉·苏艾丹在这篇文章中提供了一个关于未来可能实现的概述和解释：
- en: '[http://alistapart.com/article/css-shapes-101](http://alistapart.com/article/css-shapes-101)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://alistapart.com/article/css-shapes-101](http://alistapart.com/article/css-shapes-101)'
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we've looked at a selection of the most useful CSS features
    for creating lightweight aesthetics in responsive web designs. CSS3's background
    gradients curb our reliance on images for background effects. We have even considered
    how they can be used to create infinitely repeating background patterns. We've
    also learned how to use text-shadows to create simple text enhancements andbox-shadows
    to add shadows to the outside and inside of elements. We've also looked at CSS
    filters. They allow us to achieve even more impressive visual effects with CSS
    alone and can be combined for truly impressive results.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经研究了一些最有用的CSS功能，用于在响应式网页设计中创建轻量级的美学效果。CSS3的背景渐变减少了我们对背景效果图像的依赖。我们甚至考虑了它们如何用于创建无限重复的背景图案。我们还学习了如何使用文本阴影来创建简单的文本增强和使用盒子阴影来为元素的外部和内部添加阴影。我们还研究了CSS滤镜。它们使我们能够仅使用CSS实现更令人印象深刻的视觉效果，并且可以组合以获得真正令人印象深刻的结果。
- en: In the next chapter we're going to turn our attention to creating and using
    SVGs as they are more simply called. While it's a very mature technology, it is
    only in the current climate of responsive, and high-performing websites that it
    has really come of age.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把注意力转向创建和使用SVG（可伸缩矢量图形），它们通常被简称为SVG。虽然这是一种非常成熟的技术，但只有在当前响应式和高性能网站的环境下，它才真正成熟起来。
