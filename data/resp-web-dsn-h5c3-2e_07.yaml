- en: Chapter 7. Using SVGs for Resolution Independence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用SVG实现分辨率独立性
- en: Entire books have, are being, and will be written about SVG (an abbreviation
    for scalable vector graphics). SVG is an important technology for responsive web
    design as it provides pin-sharp and future-proof graphical assets for all screen
    resolutions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 整本书都在写关于SVG的内容。SVG是响应式网页设计的重要技术，因为它为所有屏幕分辨率提供了清晰和未来可靠的图形资产。
- en: Images on the web, with formats such as JPEG, GIF, or PNG have their visual
    data saved as set pixels. If you save a graphic in any of those formats with a
    set width and height, and zoom the image to twice its original size or more, their
    limitations can be easily exposed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web上，使用JPEG、GIF或PNG等格式的图像，其视觉数据保存为固定像素。如果您以固定宽度和高度保存图形，并将图像放大到原始大小的两倍或更多，它们的限制很容易暴露出来。
- en: 'Here''s a screen grab of just that. A PNG image I''ve zoomed into in the browser:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在浏览器中放大的PNG图像截图：
- en: '![Using SVGs for Resolution Independence](img/3777_07_08.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用SVG实现分辨率独立性](img/3777_07_08.jpg)'
- en: 'Can you see how the image looks obviously pixelated? Here is the exact same
    image saved as a vector image, in SVG format, and zoomed to a similar level:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到图像明显呈现像素化吗？这是完全相同的图像，保存为矢量图像，以SVG格式，并放大到类似的级别：
- en: '![Using SVGs for Resolution Independence](img/3777_07_09.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![使用SVG实现分辨率独立性](img/3777_07_09.jpg)'
- en: Hopefully the difference is obvious.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 希望差异是显而易见的。
- en: Beyond the smallest graphical assets, where at all possible, using SVG rather
    than JPEG, GIF, or PNG will produce resolution independent graphics that require
    far smaller file sizes compared to bitmap images.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了最小的图形资产外，尽可能使用SVG而不是JPEG、GIF或PNG，将产生分辨率独立的图形，与位图图像相比，文件大小要小得多。
- en: While we will touch upon many aspects of SVG in this chapter, the focus will
    be on how to integrate them into your workflow, while also providing an overview
    of what is possible with SVG.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将在本章涉及SVG的许多方面，但重点将放在如何将它们整合到您的工作流程中，同时还提供SVG的可能性概述。
- en: 'In this chapter we will cover:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: SVG, a brief history, and an anatomy of a basic SVG document
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG，简要历史，以及基本SVG文档的解剖
- en: Creating SVGs with popular image editing packages and services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流行的图像编辑软件和服务创建SVG
- en: Inserting SVGs into a page with `img` and `object` tags
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`img`和`object`标签将SVG插入页面
- en: Inserting SVGs as background images
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将SVG插入为背景图像
- en: Inserting SVGs directly (inline) into HTML
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接（内联）将SVG插入HTML
- en: Re-using SVG symbols
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重用SVG符号
- en: Referencing external SVG symbols
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用外部SVG符号
- en: What capabilities are possible with each insertion method
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每种插入方法可能具有的功能
- en: Animating SVGs with SMIL
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SMIL对SVG进行动画处理
- en: Styling SVGs with an external style sheet
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部样式表对SVG进行样式设置
- en: Styling SVGs with internal styles
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内部样式对SVG进行样式设置
- en: Amending and animating SVGs with CSS
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS修改和动画SVG
- en: Media queries and SVGs
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体查询和SVG
- en: Optimizing SVGs
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化SVG
- en: Using SVGs to define filters for CSS
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SVG定义CSS滤镜
- en: Manipulating SVGs with JavaScript and JavaScript libraries
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript和JavaScript库操纵SVG
- en: Implementation tips
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施提示
- en: Further resources
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多资源
- en: SVG is a dense subject. Which portions of this chapter are most relevant to
    your needs will depend on what you actually need from SVG. Hopefully, I can offer
    a few shortcuts right up front.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SVG是一个复杂的主题。本章的哪些部分与您的需求最相关将取决于您实际需要的SVG。希望我能够提供一些快捷方式。
- en: If you simply want to replace static graphical assets on a website with SVG
    versions, for sharper images and/or smaller file sizes, then look at the shorter
    sections on using SVG as background images and within `img` tags.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只是想用SVG版本替换网站上的静态图形资产，以获得更清晰的图像和/或更小的文件大小，那么请查看使用SVG作为背景图像和在`img`标签中的较短部分。
- en: If you're curious about what applications and services can help you generate
    and manage SVG assets, skip down to the section, *Creating SVGs with popular image
    editing packages and services*, for some useful links and pointers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解哪些应用程序和服务可以帮助您生成和管理SVG资产，请跳转到*使用流行的图像编辑软件和服务创建SVG*部分，获取一些有用的链接和指引。
- en: If you want to understand SVG more fully, or animate and manipulate SVG, you
    had better get yourself comfy and get a double size of your favorite beverage
    as this is quite a long one.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更全面地了解SVG，或者想要对SVG进行动画和操作，最好找个舒服的地方，准备一份您最喜欢的饮料，因为这会是一个相当长的过程。
- en: To begin our journey of understanding, step with me back into 2001.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的理解之旅，请和我一起回到2001年。
- en: A brief history of SVG
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG的简要历史
- en: 'The first release of SVG was in 2001\. That was not a typo. SVG has been ''a
    thing'' since 2001\. While it gained traction along the way, it''s only since
    the advent of high-resolution devices that they have received widespread interest
    and adoption. Here is the introduction to SVGs from the 1.1 specification ([http://www.w3.org/TR/SVG11/intro.html](http://www.w3.org/TR/SVG11/intro.html)):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的首次发布是在2001年。这不是笔误。SVG自2001年以来一直存在。虽然它在发展过程中获得了一些关注，但直到高分辨率设备的出现，它们才受到了广泛的关注和采用。以下是来自1.1规范的SVG介绍（[http://www.w3.org/TR/SVG11/intro.html](http://www.w3.org/TR/SVG11/intro.html)）：
- en: 'SVG is a language for describing two-dimensional graphics in XML [XML10]. SVG
    allows for three types of graphic objects: vector graphic shapes (for example,
    paths consisting of straight lines and curves), images, and text.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SVG是一种用XML描述二维图形的语言[XML10]。SVG允许三种类型的图形对象：矢量图形形状（例如，由直线和曲线组成的路径）、图像和文本。
- en: As the name implies, SVGs allow two-dimensional images to be described in code
    as vector points. This makes them a great candidate for icons, line drawings,
    and charts.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，SVG允许将二维图像描述为矢量点的代码。这使它们成为图标、线条图和图表的理想选择。
- en: As vectors describe relative points, they can scale to any size, without loss
    of fidelity. Furthermore, in terms of data, as SVG are described as vector points,
    it tends to make them tiny, compared to a comparably sized JPEG, GIF, or PNG file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于矢量描述了相对点，它们可以按比例缩放到任何大小，而不会失去保真度。此外，就数据而言，由于SVG被描述为矢量点，与大小相当的JPEG、GIF或PNG文件相比，它们往往很小。
- en: Browser support for SVG is now also very good. Android 2.3 and above, and Internet
    Explorer 9 and above, support them ([http://caniuse.com/#search=svg](http://caniuse.com/#search=svg)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，浏览器对SVG的支持也非常好。Android 2.3及以上版本，以及Internet Explorer 9及以上版本都支持SVG（[http://caniuse.com/#search=svg](http://caniuse.com/#search=svg)）。
- en: The graphic that is a document
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为文档的图形
- en: Ordinarily, if you try and view the code of a graphics file in a text editor
    the resultant text is completely unintelligible.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，如果您尝试在文本编辑器中查看图形文件的代码，生成的文本将完全无法理解。
- en: Where SVG graphics differ is that they are actually described in a markup style
    language. SVG is written in **Extensible Markup Language** (**XML**), a close
    relative of HTML. Although you may not realize it, XML is actually everywhere
    on the Internet. Do you use an RSS reader? That's XML right there. XML is the
    language that wraps up the content of an RSS feed and makes it easily consumable
    to a variety of tools and services.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SVG图形的不同之处在于它们实际上是用一种标记样式语言描述的。SVG是用**可扩展标记语言**（**XML**）编写的，这是HTML的近亲。尽管您可能没有意识到，但XML实际上无处不在于互联网上。您使用RSS阅读器吗？那就是XML。XML是将RSS订阅的内容打包起来，使其可以轻松地被各种工具和服务使用的语言。
- en: So not only can machines read and understand SVG graphics, but we can too.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不仅机器可以读取和理解SVG图形，我们也可以。
- en: 'Let me give you an example. Take a look at this star graphic:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我举个例子。看看这个星形图形：
- en: '![The graphic that is a document](img/3777_07_10.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![作为文档的图形](img/3777_07_10.jpg)'
- en: 'This is an SVG graphic, called `Star.svg` inside `example_07-01`. You can either
    open this example in the browser where it will appear as the star or you can open
    it in a text editor and you can see the code that generates it. Consider this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个名为`Star.svg`的SVG图形，位于`example_07-01`内。您可以在浏览器中打开此示例，它将显示为星形，或者您可以在文本编辑器中打开它，您可以看到生成它的代码。考虑一下：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That is the entirety of the code needed to generate that star as an SVG graphic.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是生成那个星形SVG图形所需的全部代码。
- en: Now, ordinarily, if you've never looked at the code of an SVG graphic before,
    you may be wondering why you would ever want to. If all you want is vector graphics
    displayed on the web, you certainly don't need to. Just find a graphics application
    that will save your vector artwork as an SVG and you're done. We will list a few
    of those packages in the coming pages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通常情况下，如果您以前从未查看过SVG图形的代码，您可能会想知道为什么要这样做。如果您只想在网页上显示矢量图形，那么您确实不需要。只需找到一个可以将矢量艺术作品保存为SVG的图形应用程序，就可以了。我们将在接下来的页面中列出其中一些软件包。
- en: However, although it's certainly common and possible to only work with SVG graphics
    from within a graphics editing application, understanding exactly how an SVG fits
    together and how you can tweak it to your exact will can become very useful if
    you need to start manipulating and animating an SVG.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虽然只在图形编辑应用程序中使用SVG图形是常见且可能的，但如果您需要开始操作和动画化SVG，了解SVG如何拼合以及如何调整它以满足您的需求可能会非常有用。
- en: So, let's take a closer look at that SVG markup and get an appreciation of what
    exactly is going on in there. I'd like to draw your attention to a few key things.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们仔细看看SVG标记，并了解其中到底发生了什么。我想让您注意一些关键事项。
- en: The root SVG element
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根SVG元素
- en: The root SVG element here has attributes for `width`, `height`, and `viewbox`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的根SVG元素具有`width`、`height`和`viewbox`属性。
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each of these plays an important role in how an SVG is displayed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都在如何显示SVG图形中扮演着重要的角色。
- en: Hopefully at this point you understand the term 'viewport'. It's been used in
    most chapters of this book to describe the area of a device through which content
    is viewed. For example, a mobile device might have a 320px by 480px viewport.
    A desktop computer might have a 1920px by 1080px viewport.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望在这一点上，您理解了“视口”这个术语。它在本书的大多数章节中都被用来描述设备上用于查看内容的区域。例如，移动设备可能有一个320像素乘以480像素的视口。台式电脑可能有一个1920像素乘以1080像素的视口。
- en: The `width` and `height` attributes of the SVG effectively create a viewport.
    Through this defined viewport we can peek in to see the shapes defined inside
    the SVG. Just like a web page, the contents of the SVG may be bigger than the
    viewport but that doesn't mean the rest isn't there, it's merely hidden from our
    current view.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的`width`和`height`属性有效地创建了一个视口。通过这个定义的视口，我们可以窥视SVG内部定义的形状。就像网页一样，SVG的内容可能比视口大，但这并不意味着其余部分不存在，它只是隐藏在我们当前的视图之外。
- en: The viewbox on the other hand defines the coordinate system in which all the
    shapes of the SVG are governed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，视图框定义了SVG中所有形状所遵循的坐标系。
- en: You can think of the viewbox values 0 0 198 188 as describing the top left and
    bottom right area of a rectangle. The first two values, known technically as **min-x**
    and **min-y**, describe the top left corner, while the second two, known technically
    as width and height, describe the bottom right corner.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将视图框的值0 0 198 188看作描述矩形的左上角和右下角区域。前两个值，在技术上称为**min-x**和**min-y**，描述了左上角，而后两个值，在技术上称为宽度和高度，描述了右下角。
- en: 'Having the `viewbox` attribute allows you to do things like zoom an image in
    or out. For example, if you halve the width and height in the `viewbox` attribute
    like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`viewbox`属性使您可以执行缩放图像等操作。例如，如果像这样在`viewbox`属性中减半宽度和高度：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The shape will 'zoom' to fill the size of the SVG width and height.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 形状将“缩放”以填充SVG的宽度和高度。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'To really understand the viewbox and SVG coordinate system and the opportunities
    it presents, I recommend this post by Sara Soueidan: [http://sarasoueidan.com/blog/svg-coordinate-systems/](http://sarasoueidan.com/blog/svg-coordinate-systems/)
    and this post by Jakob Jenkov: [http://tutorials.jenkov.com/svg/svg-viewport-view-box.html](http://tutorials.jenkov.com/svg/svg-viewport-view-box.html)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正理解视图框和SVG坐标系统以及它所提供的机会，我建议阅读Sara Soueidan的这篇文章：[http://sarasoueidan.com/blog/svg-coordinate-systems/](http://sarasoueidan.com/blog/svg-coordinate-systems/)
    以及Jakob Jenkov的这篇文章：[http://tutorials.jenkov.com/svg/svg-viewport-view-box.html](http://tutorials.jenkov.com/svg/svg-viewport-view-box.html)
- en: Namespace
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: This SVG has an additional namespace defined for the Sketch graphics program
    that generated it (`xmlns` is short for XML namespace).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个SVG文件为生成它的Sketch图形程序定义了一个额外的命名空间（`xmlns`是XML命名空间的缩写）。
- en: These namespace references tend to only be used by the program that generated
    the SVG, so they are often unneeded when the SVGs are bound for the web. Optimization
    processes for reducing the size of SVGs will often strip them out.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命名空间引用通常只被生成SVG的程序使用，因此当SVG被用于网络时，它们通常是不需要的。用于减小SVG文件大小的优化过程通常会将它们剥离。
- en: The title and desc tags
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标题和描述标签
- en: 'There are `title` and `desc` tags which make an SVG document highly accessible:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有`title`和`desc`标签，使得SVG文档非常易于访问：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These tags can be used to describe the contents of the graphics when they cannot
    be seen. However, when SVG graphics are used for background graphics, these tags
    can be stripped to further reduce file size.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签可以用来描述图形的内容，当它们看不见时。然而，当SVG图形用于背景图形时，这些标签可以被删除以进一步减小文件大小。
- en: The defs tag
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义标签
- en: 'There is an empty `defs` tag in our example code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例代码中有一个空的`defs`标签：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Despite being empty in our example, this is an important element. It is used
    to store definitions of all manner of reusable content such as gradients, symbols,
    paths, and more.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在我们的示例中为空，但这是一个重要的元素。它用于存储各种可重用内容的定义，如渐变、符号、路径等。
- en: The g element
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: g元素
- en: The `g` element is used to group other elements together. For example, if you
    were drawing an SVG of a car, you might group the shapes that make up an entire
    wheel inside a `g` tag.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`g`元素用于将其他元素分组在一起。例如，如果你要绘制一辆汽车的SVG，你可能会将组成整个车轮的形状放在`g`标签内。'
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In our `g` tag we can see the earlier namespace of sketch reused here. This
    will help that graphics application open this graphic again but it serves no further
    purpose should this image be bound elsewhere.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`g`标签中，我们可以看到之前的sketch命名空间在这里被重用。这将帮助图形应用程序再次打开这个图形，但如果这个图像被绑定到其他地方，它就没有进一步的作用了。
- en: SVG shapes
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SVG形状
- en: The innermost node in this example is a polygon.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，最内部的节点是一个多边形。
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: SVGs have a number of readymade shapes available (`path`, `rect`, `circle`,
    `ellipse`, `line`, `polyline`, and `polygon`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: SVG具有许多现成的形状可用（`path`、`rect`、`circle`、`ellipse`、`line`、`polyline`和`polygon`）。
- en: SVG paths
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SVG路径
- en: SVG paths differ from the other shapes of SVG as they are composed of any number
    of connected points (giving you the freedom to create any shape you like).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SVG路径与SVG的其他形状不同，因为它们由任意数量的连接点组成（使你可以自由地创建任何形状）。
- en: So that's the guts of an SVG file, and hopefully now you have a high-level understanding
    of what's going on. While some will relish the opportunity to hand write or edit
    SVG files in code, a great many more would rather generate SVGs with a graphics
    package. Let's consider some of the more popular choices.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是SVG文件的要点，希望现在你对正在发生的事情有了一个高层次的理解。虽然有些人会喜欢手写或编辑SVG文件的代码，但更多的人宁愿用图形软件生成SVG。让我们考虑一些更受欢迎的选择。
- en: Creating SVGs with popular image editing packages and services
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流行的图像编辑软件和服务创建SVG
- en: 'While SVGs can be opened, edited, and written in a text editor, there are plenty
    of applications offering a **graphical user interface** (**GUI**) that make authoring
    complex SVG graphics easier if you come from a graphics editing background. Perhaps
    the most obvious choice is Adobe''s Illustrator (PC/Mac). However, it is expensive
    for casual users so my own preference is Bohemian Coding''s Sketch (Mac only:
    [http://bohemiancoding.com/sketch/](http://bohemiancoding.com/sketch/)). That
    itself isn''t cheap (currently at $99), but it''s still the option I would recommend
    if you use a Mac.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SVG可以在文本编辑器中打开、编辑和编写，但有许多应用程序提供图形用户界面（GUI），使得如果你来自图形编辑背景，编写复杂的SVG图形会更容易。也许最明显的选择是Adobe的Illustrator（PC/Mac）。然而，它对于偶尔使用者来说是昂贵的，所以我个人偏好Bohemian
    Coding的Sketch（仅限Mac：[http://bohemiancoding.com/sketch/](http://bohemiancoding.com/sketch/)）。这本身也不便宜（目前为99美元），但如果你使用Mac，这仍然是我推荐的选择。
- en: If you use Windows/Linux or are looking for a cheaper option, consider the free
    and open-source, Inkscape ([https://inkscape.org/en/](https://inkscape.org/en/)).
    It's by no means the prettiest tool to work with but it is very capable (if you
    want any proof, view the Inkscape gallery at [https://inkscape.org/en/community/gallery/](https://inkscape.org/en/community/gallery/)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows/Linux或者正在寻找更便宜的选择，可以考虑免费开源的Inkscape（[https://inkscape.org/en/](https://inkscape.org/en/)）。它并不是最好看的工具，但它非常有能力（如果你需要任何证明，可以查看Inkscape画廊：[https://inkscape.org/en/community/gallery/](https://inkscape.org/en/community/gallery/)）。
- en: Finally, there are a few online editors. Google has SVG-edit ([http://svg-edit.googlecode.com/svn/branches/stable/editor/svg-editor.html](http://svg-edit.googlecode.com/svn/branches/stable/editor/svg-editor.html)).
    There is also Draw SVG ([http://www.drawsvg.org](http://www.drawsvg.org)), and
    Method Draw, an arguably better looking fork of SVG-edit ([http://editor.method.ac/](http://editor.method.ac/)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一些在线编辑器。Google有SVG-edit ([http://svg-edit.googlecode.com/svn/branches/stable/editor/svg-editor.html](http://svg-edit.googlecode.com/svn/branches/stable/editor/svg-editor.html))。还有Draw
    SVG ([http://www.drawsvg.org](http://www.drawsvg.org))，以及Method Draw，这是SVG-edit的一个外观更好的分支（[http://editor.method.ac/](http://editor.method.ac/)）。
- en: Save time with SVG icon services
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SVG图标服务节省时间
- en: The aforementioned applications all give you the capability to create SVG graphics
    from scratch. However, if it's icons you're after, you can probably save a lot
    of time (and for me, get better results) by downloading SVG versions of icons
    from an online icon service. My personal favorite is [http://icomoon.io/](http://icomoon.io/)
    is also great.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的应用程序都可以让您从头开始创建SVG图形。但是，如果您想要的是图标，您可能可以通过从在线图标服务下载SVG版本来节省大量时间（对我来说，获得更好的结果）。我个人最喜欢的是[http://icomoon.io/](http://icomoon.io/)也很棒。
- en: 'To quickly illustrate the benefits of an online icon service, loading the icomoon.io
    application gives you a searchable library of icons (some free, some paid):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速说明在线图标服务的好处，加载icomoon.io应用程序会为您提供一个可搜索的图标库（一些免费，一些付费）：
- en: '![Save time with SVG icon services](img/3777_07_01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用SVG图标服务节省时间](img/3777_07_01.jpg)'
- en: You select the ones you want and then click download. The resultant file contains
    the icons as SVGs, PNGs, and also SVG symbols for placement in the `defs` element
    (remember the `defs` element is a container element for referenced elements).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择您想要的图标，然后单击下载。生成的文件包含SVG、PNG和SVG符号的图标，用于放置在`defs`元素中（请记住，`defs`元素是用于引用元素的容器元素）。
- en: To see for yourself, open `example_07-02` and you can see the resultant download
    files after I'd chosen five icons from [http://icomoon.io/](http://icomoon.io/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要自己看一下，请打开`example_07-02`，您可以看到我从[http://icomoon.io/](http://icomoon.io/)选择了五个图标后的下载文件。
- en: Inserting SVGs into your web pages
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将SVG插入到您的网页中
- en: There are a number of things that you can do (browser dependent) with SVG images
    that you can't do with normal image formats (JPEG, GIF, PNG). The range of what's
    possible is largely dependent upon the way that the SVG is inserted into the page.
    So, before we get to what we can actually do with SVGs, we'll consider the various
    ways we can actually get them on the page in the first place.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多与SVG图像（与常规图像格式JPEG、GIF、PNG不同）相关的事情（取决于浏览器），您可以做的事情。可能的范围在很大程度上取决于SVG插入到页面的方式。因此，在我们实际可以对SVG做些什么之前，我们将考虑我们实际上可以将它们放在页面上的各种方式。
- en: Using an img tag
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用img标签
- en: 'The most straightforward way to use an SVG graphic is exactly how you would
    insert any image into an HTML document. We just use a good ol'' `img` tag:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SVG图形的最直接方法就是将其插入到HTML文档中的方式。我们只需使用一个好老旧的`img`标签：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This makes the SVG behave more or less like any other image. Not much more to
    say about that.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得SVG的行为几乎与任何其他图像相同。关于这点没有更多要说的。
- en: Using an object tag
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用对象标签
- en: 'The `object` tag is the container recommended by the W3C for holding non-HTML
    content in a web page (the specification for object is at [http://www.w3.org/TR/html5/embedded-content-0.html](http://www.w3.org/TR/html5/embedded-content-0.html)).
    We can make use of it to insert an SVG into our page like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`object`标签是W3C推荐的在网页中保存非HTML内容的容器（object的规范位于[http://www.w3.org/TR/html5/embedded-content-0.html](http://www.w3.org/TR/html5/embedded-content-0.html)）。我们可以利用它来像这样将SVG插入到我们的页面中：'
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Either a `data` or `type` attribute is required, although I would always recommend
    adding both. The `data` attribute is where you link out to the SVG asset in the
    same manner you would link to any other asset. The `type` attribute describes
    the MIME type relevant for the content. In this instance, `image/svg+xml` is the
    MIME (Internet media type) type to indicate the data is SVG. You can also add
    a `width` and `height` attribute too if you want to constrain the size of the
    SVG with this container.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`或`type`属性是必需的，尽管我总是建议两者都添加。`data`属性是您链接到SVG资产的位置，方式与链接到任何其他资产的方式相同。`type`属性描述了与内容相关的MIME类型。在这种情况下，`image/svg+xml`是用于指示数据为SVG的MIME（互联网媒体类型）类型。如果您希望使用此容器限制SVG的大小，还可以添加`width`和`height`属性。'
- en: An SVG inserted into the page via an `object` tag is also accessible with JavaScript
    so that's one reason to insert them this way. However, an additional bonus of
    using the `object` tag is that it provides a simple mechanism for when a browser
    doesn't understand the data type. For example, if that prior `object` element
    was viewed in Internet Explorer 8 (which has no support for SVG), it would simply
    see the message 'Your browser doesn't support SVG'. You can use this space to
    provide a fallback image in an `img` tag. However, be warned that from my cursory
    testing, the browser will always download the fallback image, regardless of whether
    it actually needs it. Therefore, if you want your site to load in the shortest
    possible time (you do, trust me) this might not actually be the best choice.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`object`标签插入到页面中的SVG也可以通过JavaScript访问，这就是以这种方式插入它们的一个原因。但是，使用`object`标签的额外好处是，它为浏览器不理解数据类型时提供了一个简单的机制。例如，如果在不支持SVG的Internet
    Explorer 8中查看先前的`object`元素，它将简单地看到消息“您的浏览器不支持SVG”。您可以使用此空间在`img`标签中提供备用图像。但是，请注意，根据我的粗略测试，浏览器将始终下载备用图像，无论它是否真正需要它。因此，如果您希望您的网站以尽可能短的时间加载（您会的，相信我），这实际上可能不是最佳选择。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to manipulate an SVG inserted via an `object` tag with jQuery, you'll
    need to use the native `.contentDocument` JavaScript property. You can then use
    the jQuery `.attr` to change things like `fill`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用jQuery操作通过`object`标签插入的SVG，您需要使用本机`.contentDocument` JavaScript属性。然后，您可以使用jQuery`.attr`来更改`fill`等内容。
- en: An alternative approach to providing a fallback would be to add a `background-image`
    via the CSS. For example, in our example above, our fallback span has a class
    of `.fallback-info`. We could make use of this in CSS to link to a suitable `background-image`.
    That way the `background-image` will only be downloaded if required.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 提供备用的另一种方法是通过CSS添加`background-image`。例如，在我们上面的示例中，我们的备用span具有`.fallback-info`类。我们可以在CSS中使用它来链接到合适的`background-image`。这样，只有在需要时才会下载`background-image`。
- en: Insert an SVG as a background image
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将SVG作为背景图像插入
- en: 'SVGs can be used as a background image in CSS, much the same way as any other
    image format (PNG, JPG, GIF). There''s nothing special about the way you reference
    them:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: SVG可以像任何其他图像格式（PNG、JPG、GIF）一样在CSS中用作背景图像。在引用它们的方式上没有什么特别之处：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For older browsers that don''t support SVG, you might want to include a ''fallback''
    image in a more widely supported format (typically PNG). Here''s one way to do
    that for Internet Explorer 8 and Android 2, as IE8 doesn''t support SVG or `background-size`,
    and Android 2.3 doesn''t support SVG and requires a vendor prefix for `background-size`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持SVG的旧版浏览器，您可能希望在更广泛支持的格式（通常是PNG）中包含一个“回退”图像。以下是一种在IE8和Android 2中实现的方法，因为IE8不支持SVG或`background-size`，而Android
    2.3不支持SVG并且需要对`background-size`使用供应商前缀：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In CSS, where two equivalent properties are applied, the one further down the
    style sheet will always overrule those above. In CSS, a browser will always disregard
    a property/value pair in a rule it cannot make sense of. Therefore, in this case
    the older browsers get the PNG, as they cannot make use of the SVG or understand
    an un-prefixed `background-size` property, while newer browsers that could actually
    use either, take the bottom one as it supersedes the first.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，如果应用了两个等效的属性，样式表中较低的属性将始终覆盖上面的属性。在CSS中，浏览器总是会忽略它无法理解的规则中的属性/值对。因此，在这种情况下，旧版浏览器会得到PNG，因为它们无法使用SVG或理解未加前缀的`background-size`属性，而实际上可以使用任何一种的新版浏览器会采用下面的规则，因为它覆盖了第一个规则。
- en: 'You can also provide fallbacks with the aid of Modernizr; the JavaScript tool
    for feature testing the browser (Modernizr is discussed more fully in [Chapter
    5](ch05.html "Chapter 5. CSS3 – Selectors, Typography, Color Modes, and New Features"),
    *CSS3 – Selectors, Typography, Color Modes, and New Features*). Modernizr has
    individual tests for some of the different SVG insertion methods, and the next
    version of Modernizr (unreleased at the time of writing) may have something more
    specific for SVG in CSS. For now however, you can do this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以借助Modernizr提供回退；这是用于测试浏览器功能的JavaScript工具（Modernizr在[第5章](ch05.html "第5章。CSS3-选择器、排版、颜色模式和新功能")中有更详细的讨论，“CSS3-选择器、排版、颜色模式和新功能”）。Modernizr对一些不同的SVG插入方法进行了单独测试，而下一个版本的Modernizr（撰写时尚未发布）可能会对CSS中的SVG有更具体的内容。然而，目前您可以这样做：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or invert the logic if preferred:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果更喜欢，可以颠倒逻辑：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When Feature Queries are more fully supported, you could also do this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当功能查询得到更全面的支持时，您也可以这样做：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `@supports` rule works here because `fill` is a SVG property so if the browser
    understands that, it would take the lower rule over the first.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`@supports`规则在这里起作用，因为`fill`是SVG属性，所以如果浏览器理解它，它将采用下面的规则而不是第一个规则。'
- en: If your needs for SVG are primarily static background images, perhaps for icons
    and the like, I highly recommend implementing SVGs as background images. That's
    because there are a number of tools that will automatically create image sprites
    or style sheet assets (which means including the SVGs as data URIs), fallback
    PNG assets, and requisite style sheets from any individual SVGs you create. Using
    SVGs this way is very well supported, the images themselves cache well (so performance
    wise they work very well), and it's simple to implement.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对SVG的需求主要是静态背景图像，比如图标之类的，我强烈建议将SVG作为背景图像实现。这是因为有许多工具可以自动创建图像精灵或样式表资产（这意味着将SVG作为数据URI包含），回退PNG资产以及从您创建的任何单个SVG生成所需的样式表。以这种方式使用SVG得到了很好的支持，图像本身缓存效果很好（因此在性能方面效果很好），而且实现起来很简单。
- en: A brief aside on data URIs
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于数据URI的简要说明
- en: 'If you''re reading that prior section and wondering what on earth a data **Uniform
    Resource Identifier** (**URI**) is, in relation to CSS, it''s a means of including
    what would ordinarily be an external asset, such as an image, within the CSS file
    itself. Therefore, where we might do this to link at an external image file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读前面的部分，并想知道与CSS相关的数据**统一资源标识符**（**URI**）是什么意思，它是一种在CSS文件本身中包含通常是外部资产（如图像）的方法。因此，我们可能会这样链接外部图像文件：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We could simply include the image inside our style sheet with a data URI like
    this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地在样式表中包含图像，使用数据URI，如下所示：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It's not pretty but it provides a way to negate a separate request over the
    network. There are different encoding methods for data URIs and plenty of tools
    available to create data URIs from your assets.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不美观，但它提供了一种消除网络上的单独请求的方法。数据URI有不同的编码方法，还有很多工具可以从您的资产创建数据URI。
- en: If encoding SVGs in this manner, I would suggest avoiding the base64 method
    as it doesn't compress as well as text for SVG content.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以这种方式对SVG进行编码，我建议避免使用base64方法，因为它对SVG内容的压缩效果不如文本好。
- en: Generating image sprites
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成图像精灵
- en: My personal recommendation, tool wise, for generating image sprites or data
    URI assets, is Iconizr ([http://iconizr.com/](http://iconizr.com/)). It gives
    you complete control over how you would like your resultant SVG and fallback PNG
    assets. You can have the SVGs and fallback PNG files output as data URIs or image
    sprites and it even includes the requisite JavaScript snippet for loading the
    correct asset if you opt for data URIs; highly recommended.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人推荐的工具，用于生成图像精灵或数据URI资产，是Iconizr（[http://iconizr.com/](http://iconizr.com/)）。它可以完全控制您希望生成的最终SVG和回退PNG资产。您可以将SVG和回退PNG文件输出为数据URI或图像精灵，甚至包括加载正确资产的必要JavaScript片段，如果您选择数据URI，则强烈推荐使用。
- en: 'Also, if you are wondering whether to choose data URIs or image sprites for
    your projects, I did further research on the pros and cons of data URIs or image
    sprites that you may be interested in should you be facing the same choice: [http://benfrain.com/image-sprites-data-uris-icon-fonts-v-svgs/](http://benfrain.com/image-sprites-data-uris-icon-fonts-v-svgs/)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您在思考是选择数据URI还是图像精灵用于您的项目，我对数据URI或图像精灵的利弊进行了进一步研究，您可能会对此感兴趣，如果您面临同样的选择：[http://benfrain.com/image-sprites-data-uris-icon-fonts-v-svgs/](http://benfrain.com/image-sprites-data-uris-icon-fonts-v-svgs/)
- en: While I'm a big fan of SVGs as background images, if you want to animate them
    dynamically, or inject values into them via JavaScript, then it will be best to
    opt for inserting SVG data 'inline' into the HTML.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我非常喜欢SVG作为背景图像，但如果您想要动态地对其进行动画，或者通过JavaScript将值注入其中，最好选择将SVG数据“内联”插入HTML。
- en: Inserting an SVG inline
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联插入SVG
- en: 'As SVG is merely an XML document, you can insert it directly into the HTML.
    For example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SVG仅仅是一个XML文档，您可以直接将其插入HTML中。例如：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There is no special wrapping element needed, you literally just insert the SVG
    markup inside the HTML markup. It's also worth knowing that if you remove any
    `width` and `height` attributes on the `svg` element, the SVG will scale fluidly
    to fit the containing element.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要特殊的包装元素，您只需在HTML标记中插入SVG标记。还值得知道的是，如果在`svg`元素上删除任何`width`和`height`属性，SVG将会流动地缩放以适应包含元素。
- en: Inserting SVGs into your documents is probably the most versatile in terms of
    SVG features.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档中插入SVG可能是最多功能的SVG特性。
- en: Re-using graphical objects from symbols
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从符号中重复使用图形对象
- en: 'Earlier in the chapter I mentioned that I had picked and downloaded some icons
    from IcoMoon ([http://icomoon.io](http://icomoon.io)). They were icons depicting
    touch gesture: swipe, pinch, drag, and so on. Suppose in a website you are building
    you need to make use of them multiple times. Remember I mentioned that there was
    a version of those icons as SVG symbol definitions? That''s what we will make
    use of now.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我提到我从IcoMoon（[http://icomoon.io](http://icomoon.io)）中挑选并下载了一些图标。它们是描绘触摸手势的图标：滑动、捏、拖动等等。假设在您正在构建的网站中，您需要多次使用它们。请记住，我提到这些图标有SVG符号定义的版本？这就是我们现在要使用的。
- en: 'In `example_07-09` we will insert the various symbol definitions inside the
    `defs` element of an SVG in the page. You''ll notice that on the SVG element,
    an inline style is used: `display:none` and the `height` and `width` attributes
    have both been set to zero (those styles could be set in CSS if you would rather).
    This is so that this SVG takes up no space. We are only using this SVG to house
    symbols of the graphical objects we want to use elsewhere.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`example_07-09`中，我们将在页面的SVG的`defs`元素中插入各种符号定义。您会注意到在SVG元素上使用了内联样式：`display:none`，`height`和`width`属性都被设置为零（如果您愿意，这些样式可以在CSS中设置）。这样做是为了使这个SVG不占用空间。我们只是使用这个SVG来容纳我们想要在其他地方使用的图形对象的符号。
- en: 'So, our markup starts like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的标记从这里开始：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice the `symbol` element inside the `defs` element? This is the element to
    use when we want to define a shape for later reuse.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`defs`元素内的`symbol`元素？这是我们想要定义形状以供以后重用时使用的元素。
- en: 'After the SVG defining all necessary symbols for our work, we have all our
    ''normal'' HTML markup. Then, when we want to make use of one of those symbols,
    we can do this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVG定义了我们工作所需的所有必要符号之后，我们有了所有我们的“正常”HTML标记。然后，当我们想要使用其中一个符号时，我们可以这样做：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'That will display the drag left and right icon:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示拖动左右图标：
- en: '![Re-using graphical objects from symbols](img/3777_07_06.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![从符号中重复使用图形对象](img/3777_07_06.jpg)'
- en: The magic here is the `use` element. As you might have guessed from the name,
    it's used to make use of existing graphical objects that have already been defined
    elsewhere. The mechanism for choosing what to reference is the `xlink` attribute
    that in this case is referencing the symbol ID of the 'drag left and right' icon
    (`#icon-drag-left-right`) we have inline at the beginning of the markup.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的魔法是`use`元素。正如您可能已经从名称中猜到的那样，它用于利用已经在其他地方定义的现有图形对象。选择要引用的机制是`xlink`属性，在这种情况下，它引用了我们在标记开头内联的“拖动左右”图标（`#icon-drag-left-right`）的符号ID。
- en: 'When you re-use a symbol, unless you explicitly set a size (either with attributes
    on the element itself or with CSS) the `use` will be set to width and height 100%.
    So, to re-size our icon we could do this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当您重复使用一个符号时，除非您明确设置了大小（可以通过元素本身的属性或CSS设置），否则`use`将被设置为宽度和高度为100%。因此，要调整我们的图标大小，我们可以这样做：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `use` element can be used to re-use all sorts of SVG content: gradients,
    shapes, symbols, and more.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`use`元素可用于重用各种SVG内容：渐变、形状、符号等等。'
- en: Inline SVGs allow different colors in different contexts
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联SVG允许在不同的上下文中使用不同的颜色
- en: 'With inline SVGs you can also do useful things like change colors based on
    context, and that''s great when you need multiple versions of the same icon in
    different colors:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内联SVG，您还可以做一些有用的事情，比如根据上下文更改颜色，当您需要不同颜色的相同图标的多个版本时，这将非常有用：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Make dual-tone icons that inherit the color of their parent
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使双色图标继承其父元素的颜色
- en: 'With inline SVGs you can also have some fun and create a two-tone effects from
    a single color icon (as long as the SVG is made up of more than one path) with
    the use of `currentColor`, the oldest CSS variable. To do this, inside the SVG
    symbol, set the `fill` of the path you want to be one color as `currentColor`.
    Then use the color value in your CSS to color the element. For the paths in the
    SVG symbol without the fill, set as `currentColor`, they will receive the fill
    value. To exemplify:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内联SVG，您还可以玩得很开心，从单色图标创建双色效果（只要SVG由多个路径组成），并使用`currentColor`，这是最古老的CSS变量。要做到这一点，在SVG符号内部，将要成为一种颜色的路径的`fill`设置为`currentColor`。然后在CSS中使用颜色值对元素进行着色。对于SVG符号中没有填充的路径，设置为`currentColor`，它们将接收填充值。举例说明：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s that same symbol re-used three times, each with different colors and
    sizes:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是同一个符号被重复使用了三次，每次都有不同的颜色和大小：
- en: '![Make dual-tone icons that inherit the color of their parent](img/3777_07_07.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![使双色图标继承其父元素的颜色](img/3777_07_07.jpg)'
- en: Remember you can dig around the code in `example_07-09`. It's also worth knowing
    that the color doesn't have to be set on that element itself, it can be on any
    parent element; the `currentColor` will inherit a value from up the DOM tree to
    the nearest parent with a color value set.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以查看`example_07-09`中的代码。还值得知道的是，颜色不一定要设置在元素本身上，它可以在任何父元素上；`currentColor`将从DOM树上的最近的父元素继承一个值。
- en: There are a lot of positives to using SVG in this way. The only downside being
    that it's necessary to include the same SVG data on every page you want to use
    the icons. Sadly, this is bad for performance, as the assets (the SVG data) isn't
    going to be cached easily. However, there is another option (if you are happy
    to add a script to support Internet Explorer).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用SVG有很多积极的方面。唯一的缺点是需要在每个要使用图标的页面上包含相同的SVG数据。不幸的是，这对性能来说是不好的，因为资产（SVG数据）不容易被缓存。然而，还有另一种选择（如果您愿意添加一个脚本来支持Internet
    Explorer）。
- en: Re-using graphical objects from external sources
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从外部来源重用图形对象
- en: 'Rather than paste in an enormous set of SVG symbols in each page, while still
    using the `use` element, it''s possible to link out to external SVG files and
    grab the portion of the document you want to use. Take a look at `example-07-10`
    and the same three icons as we had in `example_07-09` are put on the page in this
    manner:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 与其在每个页面中粘贴一组巨大的SVG符号，同时仍然使用`use`元素，不如链接到外部SVG文件并获取您想要使用的文档部分。看一下`example-07-10`，和我们在`example_07-09`中的三个图标以这种方式放在页面上：
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The important part to understand is the `href`. We are linking to an external
    SVG file (the `defs.svg` part) and then specifying the ID of the symbol within
    that file we want to use (the `#icon-drag-left-right` part).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解`href`。我们正在链接到外部SVG文件（`defs.svg`部分），然后指定我们想要使用的文件中的符号的ID（`#icon-drag-left-right`部分）。
- en: The benefits of this approach are that the asset is cached by the browser (just
    like any other external image would/could be) and it saves littering our markup
    with an SVG full of symbol definitions. The downside is that, unlike when the
    `defs` are placed inline, any dynamic changes made to the `defs.svg` (for example,
    if a path was being manipulated by JavaScript) won't be updated in the `use` tags.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处是，浏览器会缓存资产（就像任何其他外部图像一样），并且它可以节省我们的标记，不用用充满符号定义的SVG。缺点是，与内联放置`defs`时不同，对`defs.svg`进行的任何动态更改（例如，如果路径被JavaScript操纵）不会在`use`标签中更新。
- en: Sadly, Internet Explorer does not allow referencing symbols from external assets.
    However, there's a polyfill script for IE9-11, called **SVG For Everybody** that
    allows us to use this technique regardless. Head over to [https://github.com/jonathantneal/svg4everybody](https://github.com/jonathantneal/svg4everybody)
    for more information.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Internet Explorer不允许从外部资产引用符号。但是，有一个用于IE9-11的polyfill脚本，名为**SVG For Everybody**，它允许我们无论如何使用这种技术。请访问[https://github.com/jonathantneal/svg4everybody](https://github.com/jonathantneal/svg4everybody)了解更多信息。
- en: When using that piece of JavaScript, you can happily reference external assets
    and the polyfill will insert the SVG data directly into the body of the document
    for Internet Explorer.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用那段JavaScript时，您可以愉快地引用外部资产，polyfill将直接将SVG数据插入到文档的主体中，以支持Internet Explorer。
- en: What you can do with each SVG insertion method (inline, object, background-image,
    and img)
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可以使用每种SVG插入方法（内联、对象、背景图像和img）做什么
- en: 'As mentioned previously, SVGs differ from other graphical assets. They can
    behave differently, depending upon the way they are inserted into a page. As we
    have seen, there are four main ways in which to place SVG onto the page:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，SVG与其他图形资产不同。它们的行为可能会有所不同，取决于它们被插入到页面的方式。正如我们所见，有四种主要的方式可以将SVG放置到页面上：
- en: Inside an `img` tag
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`img`标签内部
- en: Inside an `object` tag
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`object`标签内部
- en: As a background image
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为背景图像
- en: Inline
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联
- en: And depending upon the insertion method, certain capabilities will or will not
    be available to you.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 并且根据插入方法，某些功能将或将不可用。
- en: To understand what should be possible with each insertion method, it might be
    simpler to consider this table.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解每种插入方法应该可能做什么，可能更简单的方法是考虑这个表格。
- en: '![What you can do with each SVG insertion method (inline, object, background-image,
    and img)](img/3777_07_02.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![您可以使用每种SVG插入方法（内联、对象、背景图像和img）做什么](img/3777_07_02.jpg)'
- en: 'Now there are caveats to consider, marked within numbers:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一些需要考虑的注意事项，用数字标记：
- en: '***1**: When using an SVG inside an object you can use an external style sheet
    to style the SVG but you have to link to that style sheet from within the SVG'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***1**：当在对象内部使用SVG时，您可以使用外部样式表来为SVG设置样式，但您必须从SVG内部链接到该样式表'
- en: '***2**: You can use SVGs in an external asset (which is cacheable) but it doesn''t
    work by default in Internet Explorer'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***2**：您可以在外部资产中使用SVG（可缓存），但在Internet Explorer中默认情况下无法工作'
- en: '***3**: A media query inside the styles section of an ''inlined'' SVG works
    on the size of the document it lives in (not the size of the SVG itself)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***3**：''内联''的SVG中样式部分的媒体查询作用于其所在文档的大小（而不是SVG本身的大小）'
- en: Browser schisms
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器分歧
- en: Be aware that browser implementations of SVG also vary. Therefore, just because
    those things should be possible (as indicated above), doesn't mean they actually
    will be in every browser, or that they will behave consistently!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，SVG的浏览器实现也有所不同。因此，仅仅因为上面所示的东西应该是可能的，并不意味着它们实际上在每个浏览器中都会出现，或者它们会表现一致！
- en: For example, the results in the preceding table are based upon the test page
    in `example_07-03`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，上表中的结果是基于“example_07-03”中的测试页面。
- en: The behavior of the test page is comparable in the latest version of Firefox,
    Chrome, and Safari. However, Internet Explorer sometimes does things a little
    differently.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 测试页面的行为在最新版本的Firefox、Chrome和Safari中是可比较的。然而，Internet Explorer有时会做一些不同的事情。
- en: 'For example, in all the SVG capable versions of Internet Explorer (at this
    point, that''s 9, 10, and 11), as we have already seen, it is not possible to
    reference external SVG sources. Furthermore, Internet Explorer applies the styles
    from the external style sheet onto the SVGs regardless of how they have been inserted
    (all the other browsers only apply styles from external style sheets if the SVGs
    have been inserted via an `object` or inline). Internet Explorer also doesn''t
    allow any animation of SVG via CSS; animation of SVG in Internet Explorer has
    to be done via JavaScript. I''ll say that one again for the folks at the back
    in the cheap seats: you cannot animate SVGs in Internet Explorer by any means
    other than JavaScript.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在所有支持SVG的Internet Explorer版本（目前为止，即9、10和11），正如我们已经看到的，不可能引用外部SVG源。此外，Internet
    Explorer会将外部样式表中的样式应用到SVG上，而不管它们是如何插入的（其他浏览器只有在SVG通过“object”或内联方式插入时才应用外部样式表中的样式）。Internet
    Explorer也不允许通过CSS对SVG进行任何动画；在Internet Explorer中，SVG的动画必须通过JavaScript完成。我再说一遍，给后排的人听：除了JavaScript，你无法以任何其他方式在Internet
    Explorer中对SVG进行动画。
- en: Extra SVG capabilities and oddities
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的SVG功能和奇特之处
- en: Let's put aside the foibles of browsers for a moment and consider what some
    of these features in the table actually allow and why you may or may not want
    to make use of them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时抛开浏览器的缺陷，考虑一下表中的一些功能实际上允许什么，以及为什么你可能会或不会想要使用它们。
- en: SVGs will always render as sharp as the viewing device will allow and regardless
    of the manner of insertion. For most practical situations, resolution independence
    is usually reason enough to use SVG. It's then just a question of choosing whichever
    insertion method suits your workflow and the task at hand.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: SVG将始终以查看设备允许的最清晰方式呈现，而不管插入的方式如何。对于大多数实际情况，分辨率独立通常足以使用SVG。然后只是选择适合你的工作流程和任务的插入方法的问题。
- en: However, there are other capabilities and oddities that are worth knowing about
    such as SMIL animation, different ways to link to external style sheets, marking
    internal styles with character data delimiters, amending an SVG with JavaScript,
    and making use of media queries within an SVG. Let's cover those next.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有其他一些值得知道的功能和奇特之处，比如SMIL动画、不同的链接外部样式表的方式、用字符数据分隔符标记内部样式、用JavaScript修改SVG，以及在SVG中使用媒体查询。让我们接下来讨论这些。
- en: SMIL animation
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SMIL动画
- en: SMIL animations ([http://www.w3.org/TR/smil-animation/](http://www.w3.org/TR/smil-animation/))
    are a way to define animations for an SVG within the SVG document itself.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: SMIL动画（[http://www.w3.org/TR/smil-animation/](http://www.w3.org/TR/smil-animation/)）是一种在SVG文档内部定义动画的方法。
- en: SMIL (pronounced 'smile' in case you were wondering) stands for synchronized
    multimedia integration language and was developed as a method of defining animations
    inside an XML document (remember, SVG is XML based).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: SMIL（如果你想知道，发音为“smile”）代表同步多媒体集成语言，是作为在XML文档内定义动画的一种方法而开发的（记住，SVG是基于XML的）。
- en: 'Here''s an example of how to define a SMIL based animation:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个基于SMIL的动画的示例：
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: I've grabbed a section of the earlier SVG we looked at. The `g` is a grouping
    element in SVG, and this one includes both a star shape (the `path` element with
    the `id="star_Path"`) and the SMIL animation within the `animate` element. That
    simple animation tweens the fill color of the star from yellow to green over two
    seconds. What's more, it does that whether the SVG is put on the page in an `img`,
    `object`, `background-image`, or inline (no, honestly, open up `example_07-03`
    in any recent browser other than Internet Explorer to see).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我抓取了我们之前看过的SVG的一部分。`g`是SVG中的分组元素，这个元素包括一个星形（`id="star_Path"`的`path`元素）和`animate`元素内的SMIL动画。这个简单的动画将星星的填充颜色从黄色变为绿色，持续两秒。而且，无论SVG是以`img`、`object`、`background-image`还是内联方式放在页面上（不，真的，除了Internet
    Explorer之外的任何最新浏览器中打开`example_07-03`都可以看到）。
- en: Note
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Tweening**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tweening**'
- en: In case you didn't already know (I didn't), 'tweening' as a term is simply a
    shortening of 'inbetweening' as it merely indicates all the inbetween stages from
    one animation point to another.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不知道（我不知道），“tweening”作为一个术语只是“inbetweening”的缩写，因为它仅仅表示从一个动画点到另一个动画点的所有中间阶段。
- en: Wow! Great, right? Well, it could have been. Despite being a standard for some
    time, it looks like SMILs days are numbered.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！很棒，对吧？嗯，本来可以的。尽管已经成为标准一段时间，看起来SMIL的日子已经不多了。
- en: The end of SMIL
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SMIL的结束
- en: SMIL has no support in Internet Explorer. None. Nada. Zip. Zilch. I could go
    on with other words that amount to very little but I trust you understand there's
    not much support for SMIL in Internet Explorer at this point.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer不支持SMIL。没有。没有。没有。我可以用其他词语来表达，但我相信你明白在这一点上Internet Explorer对SMIL的支持并不多。
- en: 'Worse still (I know, I''m giving you both barrels here) Microsoft have no plans
    to introduce it either. Take a look at the platform status: [https://status.modern.ie/svgsmilanimation?term=SMIL](https://status.modern.ie/svgsmilanimation?term=SMIL)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是（我知道，我在这里给你两个枪口），微软也没有引入它的计划。看看平台状态：[https://status.modern.ie/svgsmilanimation?term=SMIL](https://status.modern.ie/svgsmilanimation?term=SMIL)
- en: 'Plus Chrome have now indicated an intent to deprecate SMIL in the Chrome browser:
    [https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM](https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Chrome现在已经表示了在Chrome浏览器中弃用SMIL的意图：[https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM](https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5o0yiO440LM)
- en: Mic. Dropped.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 麦克风。放下。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you still have a need to use SMIL, Sara Soueidan wrote an excellent, in-depth
    article about SMIL animations at [http://css-tricks.com/guide-svg-animations-smil/](http://css-tricks.com/guide-svg-animations-smil/).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然需要使用SMIL，Sara Soueidan在[http://css-tricks.com/guide-svg-animations-smil/](http://css-tricks.com/guide-svg-animations-smil/)写了一篇关于SMIL动画的优秀而深入的文章。
- en: Thankfully, there are plenty of other ways we can animate SVGs, which we will
    come to shortly. So if you have to support Internet Explorer hang on in there.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有很多其他方法可以使SVG动画，我们很快就会介绍。所以如果你必须支持Internet Explorer，请坚持下去。
- en: Styling an SVG with an external style sheet
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用外部样式表样式化SVG
- en: It's possible to style an SVG with CSS. This can be CSS enclosed in the SVG
    itself, or in the CSS style sheets you would write all your 'normal' CSS in.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用CSS样式化SVG。这可以是SVG本身中的CSS，也可以是CSS样式表中写所有你的“正常”CSS。
- en: Now, if you refer back to our features table from earlier in the chapter, you
    can see that styling SVG with external CSS isn't possible when the SVG is included
    via an `img` tag or as a background-image (apart from Internet Explorer). It's
    only possible when SVGs are inserted via an `object` tag or `inline`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你回到本章前面的特性表，你会发现当SVG通过`img`标签或作为背景图像（除了Internet Explorer）包含时，使用外部CSS样式化SVG是不可能的。只有当SVG通过`object`标签或`inline`插入时才可能。
- en: 'There are two syntaxes for linking to an external style sheet from an SVG.
    The most straightforward way is like this (you would typically add this in the
    `defs` section):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 从SVG链接到外部样式表有两种语法。最直接的方式是这样的（你通常会在`defs`部分中添加这个）：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It''s akin to the way we used to link to style sheets prior to HTML5 (for example,
    note the `type` attribute is no longer necessary in HTML5). However, despite this
    working in many browsers, it isn''t the way the specifications define how external
    style sheets should be linked in SVG ([http://www.w3.org/TR/SVG/styling.html](http://www.w3.org/TR/SVG/styling.html)).
    Here is the correct/official way, actually defined for XML back in 1999 ([http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/](http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/)):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于HTML5之前我们用来链接样式表的方式（例如，注意在HTML5中`type`属性不再是必需的）。然而，尽管这在许多浏览器中有效，但这并不是规范定义外部样式表应该如何在SVG中链接的方式（[http://www.w3.org/TR/SVG/styling.html](http://www.w3.org/TR/SVG/styling.html)）。这是正确/官方的方式，实际上在1999年就为XML定义了（[http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/](http://www.w3.org/1999/06/REC-xml-stylesheet-19990629/)）：
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You need to add that above the opening SVG element in your file. For example:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在文件中的开头SVG元素上方添加。例如：
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Interestingly, the latter syntax is the only one that works in Internet Explorer.
    So, when you need to link out to a style sheet from your SVG, I'd recommend using
    this second syntax for wider support.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，后一种语法是唯一在Internet Explorer中有效的。所以，当你需要从SVG链接到样式表时，我建议使用这种第二种语法以获得更广泛的支持。
- en: You don't have to use an external style sheet; you can use inline styles directly
    in the SVG itself if you would rather.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必使用外部样式表；如果你愿意，你可以直接在SVG本身中使用内联样式。
- en: Styling an SVG with internal styles
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内部样式样式化SVG
- en: 'You can place styles for an SVG within the SVG itself. They should be placed
    within the `defs` element. As SVG is XML based, it''s safest to include the **Character
    Data** (**CDATA**) marker. The CDATA marker simply tells the browser that the
    information within the character data delimited section could possibly be interpreted
    as XML markup but should not be. The syntax is like this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在SVG中放置SVG的样式。它们应该放在`defs`元素内。由于SVG是基于XML的，最安全的做法是包含**Character Data**（**CDATA**）标记。CDATA标记简单地告诉浏览器，字符数据定界部分内的信息可能被解释为XML标记，但不应该。语法是这样的：
- en: '[PRE27]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: SVG properties and values within CSS
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS中的SVG属性和值
- en: 'Notice that `stroke` property in that prior code block. That isn''t a CSS property,
    it''s an SVG property. There are quite a few specific SVG properties you can use
    in styles (regardless of whether they are declared inline or via an external style
    sheet). For example, with an SVG, you don''t specify a `background-color`, instead
    you specify a `fill`. You don''t specify a `border`, you specify a `stroke-width`.
    For the full list of SVG specific properties, take a look at the specification
    here: [http://www.w3.org/TR/SVG/styling.html](http://www.w3.org/TR/SVG/styling.html)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面代码块中的`stroke`属性。那不是CSS属性，而是SVG属性。无论是内联声明还是外部样式表，你都可以使用许多特定的SVG属性。例如，对于SVG，你不指定`background-color`，而是指定`fill`。你不指定`border`，而是指定`stroke-width`。关于SVG特定属性的完整列表，请查看这里的规范：[http://www.w3.org/TR/SVG/styling.html](http://www.w3.org/TR/SVG/styling.html)
- en: With either inline or external CSS, it's possible to do all the 'normal' CSS
    things you would expect; change an elements appearance, animate, transform elements,
    and so on.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内联或外部CSS，可以做所有你期望的“正常”CSS事情；改变元素的外观，动画，转换元素等等。
- en: Animate an SVG with CSS
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用CSS动画SVG
- en: Let's consider a quick example of adding a CSS animation inside an SVG (remember,
    these styles could just as easily be in an external style sheet too).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个快速的示例，向SVG中添加CSS动画（记住，这些样式也可以很容易地放在外部样式表中）。
- en: 'Let''s take the star example we have looked at throughout this chapter and
    make it spin. You can look at the finished example in `example_07-07`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以本章中一直在看的星星示例为例，让它旋转。你可以在`example_07-07`中看到完成的示例：
- en: '[PRE28]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you load that example in the browser, after a 1 second delay, the star will
    spin a full circle over the course of 2 seconds.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中加载这个示例，在1秒延迟后，星星将在2秒内旋转一整圈。
- en: Tip
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Notice how a transform origin of `50% 50%` has been set on the SVG? That's because,
    unlike CSS, the default `transform-origin` of an SVG is not 50% 50% (center in
    both axis), it's actually 0 0 (top left). Without that property set, the star
    would rotate around the top left point.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意SVG上设置了`50% 50%`的变换原点？这是因为，与CSS不同，SVG的默认`transform-origin`不是`50% 50%`（两个轴的中心），实际上是`0
    0`（左上角）。如果不设置这个属性，星星将围绕左上角旋转。
- en: You can get quite far animating SVGs with CSS animations alone (well, assuming
    you don't need to worry about Internet Explorer). However, when you want to add
    interactivity, support Internet Explorer, or synchronize a number of events, it's
    generally best to lean on JavaScript. And the good news is that there are great
    libraries that make animating SVGs really easy. Let's look at an example of that
    now.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用CSS动画就可以对SVG进行相当深入的动画处理（嗯，假设您不需要担心Internet Explorer）。然而，当您想要添加交互性、支持Internet
    Explorer或同步多个事件时，通常最好依赖JavaScript。好消息是，有很多优秀的库可以使对SVG进行动画处理变得非常容易。现在让我们看一个例子。
- en: Animating SVG with JavaScript
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript对SVG进行动画处理
- en: With an SVG inserted into the page via an `object` tag or inline, it's possible
    to manipulate the SVG directly or indirectly with JavaScript.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`object`标签或内联插入到页面中的SVG，可以直接或间接地使用JavaScript来操作SVG。
- en: 'By indirectly, I mean it''s possible with JavaScript to change a class on or
    above the SVG that would cause an CSS animation to start. For example:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 间接地，我指的是可以使用JavaScript在SVG上方或上方更改一个类，从而导致CSS动画开始。例如：
- en: '[PRE29]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: However, it's also possible to animate an SVG via JavaScript directly.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也可以直接通过JavaScript来对SVG进行动画处理。
- en: If animating just one or two things independently, it's probable things would
    be lighter, code wise, by writing the JavaScript by hand. However, if you need
    to animate lots of elements or synchronize the animation of elements as if on
    a timeline, JavaScript libraries can really help. Ultimately, you will need to
    judge whether the weight of including the library in your page can be justified
    for the goal you are trying to achieve.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只需要独立地对一两个元素进行动画处理，可能通过手动编写JavaScript代码来减少代码量。然而，如果需要对许多元素进行动画处理或同步元素的动画处理，就可以使用JavaScript库。最终，您需要判断是否可以为您试图实现的目标来合理地包含库的重量。
- en: My recommendation for animating SVGs via JavaScript is the GreenSock animation
    platform ([http://greensock.com](http://greensock.com)), Velocity.js ([http://julian.com/research/velocity/](http://julian.com/research/velocity/)),
    or Snap.svg ([http://snapsvg.io/](http://snapsvg.io/)). For the next example,
    we'll cover a very simple example using GreenSock.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐使用GreenSock动画平台（[http://greensock.com](http://greensock.com)）、Velocity.js（[http://julian.com/research/velocity/](http://julian.com/research/velocity/)）或Snap.svg（[http://snapsvg.io/](http://snapsvg.io/)）来通过JavaScript对SVG进行动画处理。在下一个示例中，我们将介绍使用GreenSock的一个非常简单的示例。
- en: A simple example of animating an SVG with GreenSock
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GreenSock对SVG进行动画处理的一个简单示例
- en: Suppose we want to make an interface dial, that animates around when we click
    a button from zero to whatever value we input. We want not only the stroke of
    the dial to animate in both length and color, but also the number from zero to
    the value we input. You can view the completed implementation in `example_07-08`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想制作一个界面刻度盘，当我们点击按钮时，它会从零开始动画到我们输入的任意值。我们不仅希望刻度盘的描边在长度和颜色上进行动画处理，还希望数字从零到我们输入的值进行动画处理。您可以在`example_07-08`中查看已完成的实现。
- en: 'So, if we entered a value of 75, and clicked animate, it would fill around
    to look like this:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们输入了75，并点击了动画，它会填充到如下所示：
- en: '![A simple example of animating an SVG with GreenSock](img/3777_07_05.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![使用GreenSock对SVG进行动画处理的简单示例](img/3777_07_05.jpg)'
- en: Instead of listing out the entire JavaScript file (which is heavily commented
    so should make some sense to read in isolation), for brevity's sake, we'll just
    consider the key points.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我们不列出整个JavaScript文件（该文件有很多注释，因此在单独阅读时应该能够理解一些），我们只考虑关键点。
- en: The basic idea is that we have made a circle as an SVG `<path>` (rather than
    a `<circle>` element). As it's a path it means we can animate the path as if it
    were being drawn using the `stroke-dashoffset` technique. There's more info on
    this technique in the boxed out section below but briefly, we use JavaScript to
    measure the length of the path and then use the `stroke-dasharray` attribute to
    specify the length of the rendered part of the line and the length of the gap.
    Then we use `stroke-dashoffset` to change where that `dasharray` starts. This
    means you can effectively start the stroke 'off' the path and animate it in. This
    gives the illusion that the path is being drawn.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思路是我们已经将一个圆作为SVG的`<path>`（而不是`<circle>`元素）制作出来。由于它是一个路径，这意味着我们可以使用`stroke-dashoffset`技术对路径进行动画处理。关于这种技术的更多信息，请参见下面的方框中的部分，简而言之，我们使用JavaScript来测量路径的长度，然后使用`stroke-dasharray`属性来指定线条的渲染部分的长度和间隙的长度。然后我们使用`stroke-dashoffset`来改变`dasharray`的起始位置。这意味着您可以有效地从路径的“外部”开始描边并进行动画处理。这会产生路径正在被绘制的错觉。
- en: If the value to animate the `dasharray` to was a static, known value, this effect
    would be relatively simple to achieve with a CSS animation and a little trial
    and error (more on CSS animations in the next chapter).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将`dasharray`的动画值设置为静态的已知值，可以通过CSS动画和一些试错来相对简单地实现这种效果（关于CSS动画的更多内容将在下一章中介绍）。
- en: 'However, besides a dynamic value, at the same time as we are ''drawing'' the
    line we want to fade in the stroke color from one value to another and visually
    count up to the input value in the text node. This is an animation equivalent
    of patting our heads, rubbing our tummy, and counting backwards from 10,000\.
    GreenSock makes those things trivially easy (the animation part; it won''t rub
    your tummy or pat your head, although it can count back from 10,000 should you
    need to). Here are the lines of JavaScript needed to make GreenSock do all three:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，除了动态值之外，与我们“绘制”线条的同时，我们还希望将描边颜色从一个值淡入到另一个值，并在文本节点中直观地计数到输入值。这相当于同时摸头、搓肚子，并从10,000开始倒数。GreenSock使这些事情变得非常容易（动画部分；它不会搓你的肚子或摸你的头，尽管如果需要，它可以从10,000开始倒数）。以下是使GreenSock执行所有这些操作所需的JavaScript代码行：
- en: '[PRE30]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In essence, with the `TweenLite.to()` function you pass in the thing you want
    to animate, the time over which the animation should occur, and then the values
    you want to change (and what you want them to change to).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，通过`TweenLite.to()`函数，您可以传入要进行动画处理的对象、动画处理应该发生的时间以及要更改的值（以及您希望将其更改为的值）。
- en: The GreenSock site has excellent documentation and support forums so if you
    find yourself needing to synchronize a number of animations at once, be sure to
    clear a day from your diary and familiarize yourself with GreenSock.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: GreenSock网站有出色的文档和支持论坛，因此如果你发现自己需要同时同步多个动画，请确保从你的日程表中抽出一天的时间，熟悉一下GreenSock。
- en: Tip
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In case you haven't come across the SVG 'line drawing' technique before it was
    popularized by Polygon magazine when Vox Media animated a couple of line drawings
    of the Xbox One and Playstation 4 games consoles. You can read the original post
    at [http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit](http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有接触过SVG的“线条绘制”技术，那么它是由Polygon杂志推广的，当Vox Media动画化了Xbox One和Playstation
    4游戏机的几个线条绘制时。你可以在[http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit](http://product.voxmedia.com/2013/11/25/5426880/polygon-feature-design-svg-animations-for-fun-and-profit)上阅读原始帖子。
- en: There's also an excellent and more thorough explanation of the technique by
    Jake Archibald at [http://jakearchibald.com/2013/animated-line-drawing-svg/](http://jakearchibald.com/2013/animated-line-drawing-svg/).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Jake Archibald在[http://jakearchibald.com/2013/animated-line-drawing-svg/](http://jakearchibald.com/2013/animated-line-drawing-svg/)上也有一个关于这种技术的更详细的解释。
- en: Optimising SVGs
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化SVG
- en: As conscientious developers, we want to ensure that assets are as small as possible.
    The easiest way to do this with SVGs is to make use of automation tools that can
    optimize various particulars of SVG documents. Besides obvious economies such
    as removing elements (for example, stripping the title and description elements)
    it's also possible to perform a raft of micro-optimizations that, when added up,
    make for far leaner SVG assets.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 作为尽职的开发人员，我们希望确保资产尽可能小。使用SVG的最简单方法是利用可以优化SVG文档的自动化工具。除了明显的节约，比如删除元素（例如，去除标题和描述元素），还可以执行一系列微小的优化，这些优化加起来可以使SVG资产更加精简。
- en: Presently, for this task I would recommend SVGO ([https://github.com/svg/svgo](https://github.com/svg/svgo)).
    If you have never used SVGO before I would recommend starting with SVGOMG ([https://jakearchibald.github.io/svgomg/](https://jakearchibald.github.io/svgomg/)).
    It's a browser-based version of SVGO that enables you to toggle the various optimization
    plugins and get instant feedback on the file savings.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，对于这个任务，我建议使用SVGO ([https://github.com/svg/svgo](https://github.com/svg/svgo))。如果你以前从未使用过SVGO，我建议从SVGOMG
    ([https://jakearchibald.github.io/svgomg/](https://jakearchibald.github.io/svgomg/))开始。这是SVGO的基于浏览器的版本，它使你可以切换各种优化插件，并即时获得文件节省的反馈。
- en: 'Remember our example star SVG markup from the beginning of the chapter? By
    default, that simple SVG is 489 bytes in size. By passing that through SVGO, it''s
    possible to get the size down to just 218 bytes, and that''s leaving the `viewBox`
    in. That''s a saving of 55.42%. If you''re using a raft of SVG images, these savings
    can really add up. Here''s what the optimized SVG markup looks like:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在本章开头的例子星形SVG标记吗？默认情况下，这个简单的SVG大小为489字节。通过SVGO处理，可以将大小减小到218字节，这还保留了`viewBox`。这是节省了55.42%。如果你使用了大量的SVG图像，这些节省可能会真正累积起来。优化后的SVG标记如下所示：
- en: '[PRE31]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Before you spend too long with SVGO, be aware that such is the popularity of
    SVGO, plenty of other SVG tools also make use of it. For example, the aforementioned
    Iconizr ([http://iconizr.com/](http://iconizr.com/)) tool runs your SVG files
    through SVGO by default anyway, before creating your assets so ensure you aren't
    unnecessarily double-optimizing.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用SVGO之前，要注意SVGO的受欢迎程度，许多其他SVG工具也使用它。例如，前面提到的Iconizr ([http://iconizr.com/](http://iconizr.com/))工具默认情况下会将你的SVG文件通过SVGO运行，然后再创建你的资产，因此请确保你不会不必要地进行双重优化。
- en: Using SVGs as filters
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SVG作为滤镜
- en: 'In [Chapter 6](ch06.html "Chapter 6. Stunning Aesthetics with CSS3"), *Stunning
    Aesthetics with CSS3*, we looked at the CSS filter effects. However, they are
    not currently supported in Internet Explorer 10 or 11\. That can be frustrating
    if you want to enjoy filter effects in those browsers. Luckily, with help from
    SVG, we can create filters that work in Internet Explorer 10 and 11 too but as
    ever, it''s perhaps not as straight forward as you might imagine. For example,
    in `example_07-05`, we have a page with the following markup inside the `body`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。使用CSS3创建令人惊叹的美学效果")中，我们看到了CSS滤镜效果。然而，它们目前不受Internet Explorer
    10或11的支持。如果你想在这些浏览器中享受滤镜效果，这可能会让人沮丧。幸运的是，借助SVG的帮助，我们也可以创建适用于Internet Explorer
    10和11的滤镜，但正如以往一样，这可能并不像你想象的那样简单。例如，在`example_07-05`中，我们有一个页面，其中包含以下标记：
- en: '[PRE32]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'It''s an image of the Queen of England. Ordinarily, it looks like this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这是英国女王的一张图片。通常，它看起来是这样的：
- en: '![Using SVGs as filters](img/3777_07_03.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![使用SVG作为滤镜](img/3777_07_03.jpg)'
- en: 'Now, also in that example folder, is an SVG with a filter defined in the `defs`
    elements. The SVG markup looks like this:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在示例文件夹中还有一个在`defs`元素中定义了滤镜的SVG。SVG标记如下：
- en: '[PRE33]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Within the filter, we are first defining a hue rotation of 90 (using the `feColorMatrix`,
    and then passing that effect, via the `result` attribute, to the next filter (the
    `feGaussianBlur`) with a blur value of 6\. Be aware that I've been deliberately
    heavy handed here. This doesn't produce a nice aesthetic, but it should leave
    you in no doubt that the effect has worked!
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在滤镜中，我们首先定义了一个90度的色相旋转（使用`feColorMatrix`），然后通过`result`属性将该效果传递给下一个滤镜（`feGaussianBlur`），模糊值为6。请注意，我在这里故意做得很重。这不会产生一个好的美学效果，但这应该让你毫无疑问地知道效果已经起作用了！
- en: Now, rather than add that SVG markup to the HTML, we can leave it where it is
    and reference it using the same CSS filter syntax we saw in the last chapter.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以不将SVG标记添加到HTML中，而是将其留在原地，并使用与上一章中看到的相同的CSS滤镜语法来引用它。
- en: '[PRE34]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In most evergreen browsers (Chrome, Safari, Firefox) this is the effect:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数现代浏览器（Chrome，Safari，Firefox）中，这是效果：
- en: '![Using SVGs as filters](img/3777_07_04.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![使用SVG作为滤镜](img/3777_07_04.jpg)'
- en: 'Sadly, this method doesn''t work in IE 10 or 11\. However, there is another
    way to achieve our goal, and that''s using SVGs own image tag to include the image
    within the SVG. Inside `example_07-06`, we have the following markup:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，这种方法在IE 10或11中不起作用。然而，还有另一种实现我们目标的方法，那就是使用SVG自己的图像标签将图像包含在SVG中。在`example_07-06`中，我们有以下标记：
- en: '[PRE35]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The SVG markup here is very similar to the external `filter.svg` filter we used
    in the previous example but `height`, `width`, and `viewbox` attributes have been
    added. In addition, the image we want to apply the filter to is the only content
    in the SVG outside of the `defs` element. To link to the filter, we are using
    the `filter` attribute and passing the ID of the filter we want to use (in this
    case from within the `defs` element above).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的SVG标记与我们在上一个示例中使用的外部`filter.svg`过滤器非常相似，但添加了`height`、`width`和`viewbox`属性。此外，我们要对其应用过滤器的图像是SVG中`defs`元素之外的唯一内容。为了链接到过滤器，我们使用`filter`属性并传递我们想要使用的过滤器的ID（在这种情况下是在上面的`defs`元素中）。
- en: Although this approach is a little more involved, it means you can get the many
    and varied filter effects that SVG affords, even in versions 10 and 11 of Internet
    Explorer.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法有点复杂，但它意味着你可以获得SVG提供的许多不同的滤镜效果，即使在Internet Explorer的10和11版本中也是如此。
- en: A note on media queries inside SVGs
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于SVG中的媒体查询的说明
- en: All browsers that understand SVG should respect the CSS media queries defined
    inside. However, when it comes to media queries inside SVGs there are a few things
    to remember.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 所有理解SVG的浏览器都应该尊重SVG内定义的CSS媒体查询。然而，当涉及到SVG内的媒体查询时，有一些事情需要记住。
- en: 'For example, suppose you insert a media query inside an SVG like this:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你在SVG中插入了一个媒体查询，就像这样：
- en: '[PRE36]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: And that SVG is displayed on the page at a width of 200px while the viewport
    is 1200px wide.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 而SVG在页面上以200px的宽度显示，而视口宽度为1200px。
- en: We might expect the stroke of the star to be violet when the screen is 800px
    and above. After all, that's what we have our media query set to. However, when
    the SVG is placed in the page via an `img` tag, as a background image or inside
    an `object` tag, it is has no knowledge of the outer HTML document. Hence, in
    this situation, `min-width` means the min-width of the SVG itself. So, unless
    the SVG itself was displaying on the page at a width of 800px or more, the stroke
    wouldn't be violet.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能期望星星的描边在屏幕宽度为800px及以上时是紫色的。毕竟，这就是我们设置媒体查询的方式。然而，当SVG通过`img`标签、作为背景图像或嵌入`object`标签放置在页面中时，它对外部HTML文档一无所知。因此，在这种情况下，`min-width`意味着SVG本身的最小宽度。因此，除非SVG本身在页面上以800px或更多的宽度显示，否则描边不会是紫色的。
- en: Conversely, when you insert an SVG inline, it merges, (in a manner of speaking),
    with the outer HTML document. The `min-width` media query here is looking to the
    viewport (as is the HTML) to decide when the media query matches.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当你内联插入SVG时，它会（在某种意义上）与外部HTML文档合并。这里的`min-width`媒体查询是根据视口（就像HTML一样）来决定何时匹配媒体查询。
- en: 'To solve this particular problem and make the same media query behave consistently,
    we could amend our media query to this:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个特定的问题并使相同的媒体查询行为一致，我们可以修改我们的媒体查询为：
- en: '[PRE37]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: That way, regardless of the SVG size or how it is embedded it is looking to
    the device width (effectively the viewport).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，无论SVG的大小或嵌入方式如何，它都会根据设备宽度（实际上是视口）进行调整。
- en: Implementation tips
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施提示
- en: 'We''re almost at the end of the chapter now and there is still so much we could
    talk about regarding SVG. Therefore, at this point I''ll just list a few unrelated
    considerations. They aren''t necessarily worthy of protracted explanations but
    I''ll list them here in note form in case they save you from an hour of Googling:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们几乎到了本章的结尾，还有很多关于SVG的内容可以讨论。因此，这时我只列出一些无关的注意事项。它们不一定值得详细解释，但我会在这里列出它们的笔记形式，以防它们能让你省去一小时的谷歌搜索：
- en: If you have no need to animate your SVGs, opt for an image sprite of your assets
    or a data URI style sheet. It's far easier to provide fallback assets and they
    almost always perform better from a performance perspective.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不需要为SVG添加动画，可以选择使用图像精灵或数据URI样式表。这样更容易提供回退资产，并且从性能的角度来看，它们几乎总是表现更好。
- en: Automate as many steps in the asset creation process as possible; it reduces
    human error and produces predictable results faster.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能自动化资产创建过程中的许多步骤；这样可以减少人为错误，并更快地产生可预测的结果。
- en: To insert static SVGs in a project, try and pick a single delivery mechanism
    and stick to it (image sprite, data URI, or inline). It can become a burden to
    produce some assets one way and some another and maintain the various implementations.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在项目中插入静态SVG，尽量选择一种交付机制并坚持使用（图像精灵、数据URI或内联）。如果以一种方式生成一些资产，以另一种方式生成其他资产，并维护各种实现，这可能会成为负担。
- en: There is no easy 'one size fits all' choice with SVG animation. For occasional
    and simple animations, use CSS. For complex interactive or timeline style animations,
    that will also work in Internet Explorer, lean on a proven library such as Greensock,
    Velocity.js, or Snap.svg.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG动画没有一个简单的“一刀切”的选择。对于偶尔和简单的动画，使用CSS。对于复杂的交互式或时间轴样式的动画，还可以在Internet Explorer中工作，依赖于像Greensock、Velocity.js或Snap.svg这样的成熟库。
- en: Further resources
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步的资源
- en: 'As I mentioned at the start of this chapter, I have neither the space, nor
    the knowledge, to impart all there is to know about SVG. Therefore, I''d like
    to make you aware of the following excellent resources which provide additional
    depth and range on the subject:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本章开头提到的，我既没有空间，也没有知识来传授关于SVG的所有知识。因此，我想让你了解以下优秀的资源，它们提供了关于这个主题的额外深度和范围：
- en: '*SVG Essentials, 2nd Edition* by J. David Eisenberg, Amelia Bellamy-Royds ([http://shop.oreilly.com/product/0636920032335.do](http://shop.oreilly.com/product/0636920032335.do))'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SVG Essentials, 2nd Edition* by J. David Eisenberg, Amelia Bellamy-Royds ([http://shop.oreilly.com/product/0636920032335.do](http://shop.oreilly.com/product/0636920032335.do))'
- en: '*A Guide to SVG Animations (SMIL)* by Sara Soueidan ([http://css-tricks.com/guide-svg-animations-smil/](http://css-tricks.com/guide-svg-animations-smil/))'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Sara Soueidan的《SVG动画指南（SMIL）*（[http://css-tricks.com/guide-svg-animations-smil/](http://css-tricks.com/guide-svg-animations-smil/)）'
- en: '*Media Queries inside SVGs Test* by Jeremie Patonnier ([http://jeremie.patonnier.net/experiences/svg/media-queries/test.html](http://jeremie.patonnier.net/experiences/svg/media-queries/test.html))'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Jeremie Patonnier的《SVG内部媒体查询测试*（[http://jeremie.patonnier.net/experiences/svg/media-queries/test.html](http://jeremie.patonnier.net/experiences/svg/media-queries/test.html)）'
- en: '*An SVG Primer for Today''s Browsers* ([http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html](http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html))'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*今天浏览器的SVG入门*（[http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html](http://www.w3.org/Graphics/SVG/IG/resources/svgprimer.html)）'
- en: '*Understanding SVG Coordinate Systems and Transformations (Part 1)* by Sara
    Soueidan ([http://sarasoueidan.com/blog/svg-coordinate-systems/](http://sarasoueidan.com/blog/svg-coordinate-systems/))'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Sara Soueidan的《理解SVG坐标系和变换（第1部分）*（[http://sarasoueidan.com/blog/svg-coordinate-systems/](http://sarasoueidan.com/blog/svg-coordinate-systems/)）'
- en: '*Hands On: SVG Filter Effects* ([http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm](http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm))'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《SVG滤镜效果实践》*（[http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm](http://ie.microsoft.com/testdrive/graphics/hands-on-css3/hands-on_svg-filter-effects.htm)）'
- en: Full set of SVG tutorials by Jakob Jenkov ([http://tutorials.jenkov.com/svg/index.html](http://tutorials.jenkov.com/svg/index.html))
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jakob Jenkov的完整SVG教程*（[http://tutorials.jenkov.com/svg/index.html](http://tutorials.jenkov.com/svg/index.html)）
- en: Summary
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have covered a lot of the essential information needed to
    start making sense of, and implementing, SVGs in a responsive project. We have
    considered the different graphics applications and online solutions available
    to create SVG assets, then the various insertion methods possible and the capabilities
    each allows, along with the various browser peculiarities to be aware of.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了许多必要的信息，以便开始理解和实施响应式项目中的SVG。我们考虑了不同的图形应用程序和在线解决方案，以创建SVG资产，然后考虑了可能的各种插入方法以及每种方法允许的功能，以及需要注意的各种浏览器特性。
- en: We've also considered how to link to external style sheets and re-use SVG symbols
    from within the same page and when referenced externally. We even looked at how
    we can make filters with SVG that can be referenced and used in CSS for wider
    support than CSS filters.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还考虑了如何链接到外部样式表，并在同一页面内重复使用SVG符号以及在外部引用时。我们甚至研究了如何使用SVG制作可以在CSS中引用和使用的滤镜，以获得比CSS滤镜更广泛的支持。
- en: Finally, we considered how to make use of JavaScript libraries to aid animating
    SVGs and also how to optimize SVGs with the aid of the SVGO tool.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们考虑了如何利用JavaScript库来帮助动画化SVG，以及如何借助SVGO工具优化SVG。
- en: In the next chapter, we'll be looking at CSS transitions, transforms and animations.
    It's also worth reading that chapter in relation to SVG, as many of the syntaxes
    and techniques can be used and applied in SVG documents too. So grab yourself
    a hot beverage (you're worth it) and I'll see you again in a moment.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究CSS过渡、变换和动画。与SVG相关的语法和技术中有许多可以在SVG文档中使用和应用的内容，因此也值得阅读该章节。所以，来杯热饮（你值得拥有），我马上就会再见到你。
