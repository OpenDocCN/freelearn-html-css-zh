- en: Chapter 8. Transitions, Transformations, and Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。过渡，变换和动画
- en: 'Historically, whenever elements needed to be moved or animated around the screen,
    it was the sole domain of JavaScript. Nowadays, CSS can handle the majority of
    motion jobs via three principal agents: CSS transitions, CSS transforms, and CSS
    animations. In fact, only transitions and animations are directly related to motion,
    transforms simply allow us to change elements, but as we shall see, they are often
    integral to successful motion effects.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在历史上，每当需要移动或在屏幕上动画元素时，这完全是JavaScript的专属领域。如今，CSS可以通过三个主要代理来处理大部分运动工作：CSS过渡，CSS变换和CSS动画。实际上，只有过渡和动画与运动直接相关，变换只是允许我们改变元素，但正如我们将看到的那样，它们经常是成功运动效果的不可或缺的部分。
- en: 'To clearly understand what each of these things is responsible for, I will
    offer this, perhaps overly simplistic summary:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清楚地理解每个事物的责任，我将提供这个可能过于简化的总结：
- en: Use a CSS transition when you already have the beginning and end state of the
    things you want to apply motion to, and need a simple way to 'tween' from one
    state to another.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您已经有要应用运动的事物的起始状态和结束状态，并且需要一种简单的方法从一个状态过渡到另一个状态时，请使用CSS过渡。
- en: Use a CSS transform if you need to visually transform an item, without affecting
    the layout of the page.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要在不影响页面布局的情况下在视觉上转换项目，请使用CSS变换。
- en: Use a CSS animation if you want to perform a series of changes to an element
    at various key points over time.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想要在不同的关键点上对元素执行一系列更改，请使用CSS动画。
- en: 'Right, so we had better crack on and get our heads around how we can wield
    all these capabilities. In this chapter, we''ll cover:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们最好继续努力，了解如何运用所有这些能力。在本章中，我们将涵盖：
- en: What CSS3 transitions are and how we can use them
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS3过渡是什么以及我们如何使用它们
- en: How to write a CSS3 transition and its shorthand syntax
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写CSS3过渡及其简写语法
- en: CSS3 transition timing functions (`ease`, `cubic-bezier`, and so on)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS3过渡时间函数（`ease`，`cubic-bezier`等）
- en: Fun transitions for responsive websites
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式网站的有趣过渡效果
- en: What CSS3 transforms are and how we can use them
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS3变换是什么以及我们如何使用它们
- en: Understanding different 2D transforms (`scale`, `rotate`, `skew`, `translate`,
    and so on)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解不同的2D变换（`缩放`，`旋转`，`倾斜`，`平移`等）
- en: Understanding 3D transforms
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解3D变换
- en: How to animate with CSS3 using `keyframes`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`keyframes`和CSS3进行动画
- en: What CSS3 transitions are and how we can use them
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3过渡是什么以及我们如何使用它们
- en: Transitions are the simplest way to create some visual 'effect' between one
    state and another with CSS. Let's consider a simple example, an element that transitions
    from one state to another when hovered over.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡是使用CSS创建一些视觉“效果”的最简单方法，用于在一个状态和另一个状态之间进行过渡。让我们考虑一个简单的例子，当悬停时，一个元素从一个状态过渡到另一个状态。
- en: When styling hyperlinks in CSS, it's common practice to create a hover state;
    an obvious way to make users aware that the item they are hovering over is a link.
    Hover states are of little relevance to the growing number of touch screen devices
    but for mouse users, they're a great and simple interaction between website and
    user. They're also handy for illustrating transitions, so that's what we will
    start with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中为超链接设置样式时，常见做法是创建悬停状态；这是一种明显的方式，可以让用户意识到他们悬停在的项目是一个链接。悬停状态对于越来越多的触摸屏设备来说并不重要，但对于鼠标用户来说，它们是网站和用户之间的一个很好且简单的交互。它们也很方便用于说明过渡效果，这就是我们将要开始的地方。
- en: Traditionally, using only CSS, hover states are an on/off affair. There is one
    set of properties and values on an element as the default, and when a pointer
    is hovered over that element, the properties and values are instantly changed.
    However, CSS3 transitions, as the name implies, allow us to transition between
    one or more properties and values to other properties and values.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，仅使用CSS，悬停状态是一个开/关的事情。元素上有一组默认的属性和值，当指针悬停在该元素上时，属性和值会立即更改。然而，正如其名称所示，CSS3过渡允许我们在一个或多个属性和值之间过渡到其他属性和值。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'A couple of important things to know up front. Firstly, you can''t transition
    from `display: none;`. When something is set to `display: none;` it isn''t actually
    ''painted'' on the screen so has no existing state you can transition from. In
    order to create the effect of something fading in, you would have to transition
    opacity or position values. Secondly, not all properties can be transitioned.
    To ensure you''re not attempting the impossible, here is the list of transitionable
    (I know, it''s not even a word) properties: [http://www.w3.org/TR/css3-transitions/](http://www.w3.org/TR/css3-transitions/)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '首先要知道的是，您不能从`display: none;`进行过渡。当某物设置为`display: none;`时，它实际上没有在屏幕上“绘制”，因此没有现有状态可以进行过渡。为了创建某物淡入的效果，您必须过渡不透明度或位置值。其次，并非所有属性都可以进行过渡。为了确保您不会尝试不可能的事情，这是可过渡的属性列表：[http://www.w3.org/TR/css3-transitions/](http://www.w3.org/TR/css3-transitions/)'
- en: 'If you open up `example_08-01` you''ll see a few links in a `nav`. Here''s
    the relevant markup:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开`example_08-01`，您会看到`nav`中有一些链接。以下是相关的标记：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here''s the relevant CSS:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相关的CSS：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here are the two states, first the default:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是两种状态，首先是默认状态：
- en: '![What CSS3 transitions are and how we can use them](img/3777_08_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3过渡是什么以及我们如何使用它们](img/3777_08_01.jpg)'
- en: 'And then here''s the hover state:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这是悬停状态：
- en: '![What CSS3 transitions are and how we can use them](img/3777_08_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3过渡是什么以及我们如何使用它们](img/3777_08_02.jpg)'
- en: 'In this example, when the link is hovered over, we add a red box-shadow at
    the bottom (I chose a box-shadow as it won''t affect the layout of the link like
    a border might). Ordinarily, hovering over the link snaps from the first state
    (no red line) to the second (red line); it''s an on/off affair. However, this
    line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当链接悬停时，我们在底部添加了一个红色的阴影（我选择了一个阴影，因为它不会像边框一样影响链接的布局）。通常，悬停在链接上会从第一个状态（没有红线）转换到第二个状态（红线）；这是一个开/关的事情。然而，这一行：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adds a transition to the `box-shadow` from the existing state to the hover state
    over 1 second.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将`box-shadow`从现有状态过渡到悬停状态，持续1秒。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You'll notice in the CSS of the preceding example we're using the adjacent sibling
    selector `+`. This means if a selector (an anchor tag in our example) directly
    follows another selector (another anchor tag) then apply the enclosed styles.
    It's useful here as we don't want a left border on the first element.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在前面示例的CSS中，我们使用了相邻兄弟选择器`+`。这意味着如果一个选择器（在我们的示例中是锚点标签）直接跟在另一个选择器（另一个锚点标签）后面，那么应用封闭的样式。这在这里很有用，因为我们不希望第一个元素有左边框。
- en: Note that the transition property is applied in the CSS to the original state
    of the element, not the state the element ends up as. More succinctly, apply the
    transition declaration on the 'from' state, not the 'to' state. This is so that
    different states such as `:active` can also have different styles set and enjoy
    the same transition.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，过渡属性应用于元素的原始状态，而不是元素最终的状态。简而言之，在“from”状态上应用过渡声明，而不是“to”状态。这样不同的状态，比如`:active`，也可以有不同的样式设置，并享受相同的过渡。
- en: The properties of a transition
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡的属性
- en: 'A transition can be declared using up to four properties:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用最多四个属性声明过渡：
- en: '`transition-property`: The name of the CSS property to be transitioned (such
    as `background-color`, `text-shadow`, or `all` to transition every possible property).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition-property`：要过渡的CSS属性的名称（例如`background-color`、`text-shadow`或`all`以过渡每个可能的属性）。'
- en: '`transition-duration`: The length of time over which the transition should
    occur (defined in seconds, for example `.3s`, `2s`, or `1.5s`).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition-duration`：过渡应该发生的时间长度（以秒为单位，例如`.3s`、`2s`或`1.5s`）。'
- en: '`transition-timing-function`: How the transition changes speed during the duration
    (for example `ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`, or `cubic-bezier`).'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition-timing-function`：过渡在持续时间内如何改变速度（例如`ease`、`linear`、`ease-in`、`ease-out`、`ease-in-out`或`cubic-bezier`）。'
- en: '`transition-delay`: An optional value to determine a delay before the transition
    commences. Alternatively, a negative value can be used to commence a transition
    immediately but part way through its transition ''journey''. It''s defined in
    seconds, for example, `.3s`, `1s`, or `2.5s`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition-delay`：确定过渡开始之前的延迟的可选值。或者，可以使用负值立即开始过渡，但在过渡的“旅程”中间。它以秒为单位，例如`.3s`、`1s`或`2.5s`。'
- en: 'Used separately, the various transition properties can be used to create a
    transition like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用，各种过渡属性可以创建这样的过渡：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The transition shorthand property
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡的简写属性
- en: 'We can roll these individual declarations into a single, shorthand version:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些单独的声明合并成一个简写版本：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One important point to note when writing the shorthand version is that the first
    time related value is given is always taken to be the `transition-duration`. The
    second time related value is taken to be the `transition-delay`. The shorthand
    version is the one I tend to favor as I generally only need to define the duration
    of the transition and the properties that should be transitioned.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在写简写版本时要注意的一个重要点是，给出的第一个与时间相关的值总是被视为`transition-duration`。第二个与时间相关的值被视为`transition-delay`。我通常更喜欢简写版本，因为我通常只需要定义过渡的持续时间和应该过渡的属性。
- en: It's a minor point, but only define the property or properties you actually
    need to transition. It's really handy to just set `all` but if you only need to
    transition the opacity, then only define the opacity as the transition property.
    Otherwise you're making the browser work harder than necessary. In most cases
    this isn't a big deal but if you're hoping to have the best performing site possible,
    especially on older devices, then every little helps.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个小问题，但是只定义你实际需要过渡的属性。只设置`all`非常方便，但如果你只需要过渡不透明度，那么只定义不透明度作为过渡属性。否则，你会让浏览器比必要的工作更加艰难。在大多数情况下，这并不是什么大问题，但是如果你希望在老设备上尽可能地提高性能，那么每一点都有帮助。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Transitions are very well supported but, as ever, ensure you have a tool like
    Autoprefixer set up to add any vendor prefixes relevant to the browsers you need
    to support. You can also check which browsers support the various capabilities
    at [caniuse.com](http://caniuse.com).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡非常受支持，但是要确保你有像Autoprefixer这样的工具设置好，以添加任何与你需要支持的浏览器相关的供应商前缀。你也可以在[caniuse.com](http://caniuse.com)上检查哪些浏览器支持各种功能。
- en: '**The short version:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**简写版本：**'
- en: Transitions and 2D transforms work everywhere apart from IE9 and below, 3D transforms
    work everywhere except IE9 and below, Android 2.3 and below, and Safari 3.2 and
    below.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡和2D变换在IE9及以下版本之外都可以工作，3D变换在IE9及以下版本、Android 2.3及以下版本以及Safari 3.2及以下版本之外都可以工作。
- en: Transition different properties over different periods of time
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不同的时间段内过渡不同的属性
- en: 'Where a rule has multiple properties declared you don''t have to transition
    all of them in the same way. Consider this rule:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个规则有多个声明的属性时，你不必以相同的方式过渡所有这些属性。考虑这条规则：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we have specified with the `transition-property` that we'd like to transition
    the `border`, `color`, and `text-shadow`. Then with the `transition-duration`
    declaration, we are stating that the border should transition over 2 seconds,
    the color over 3 seconds, and the text-shadow over 8 seconds. The comma-separated
    durations match the comma-separated order of the transition properties.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经指定了我们希望过渡`border`、`color`和`text-shadow`的`transition-property`。然后在`transition-duration`声明中，我们规定了边框应该在2秒内过渡，颜色在3秒内过渡，文本阴影在8秒内过渡。逗号分隔的持续时间与逗号分隔的过渡属性的顺序相匹配。
- en: Understanding timing functions
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解时间函数
- en: When you declare a transition, the properties, durations, and delays are relatively
    simple to understand. However, understanding what each timing function does can
    be a little trickier. Just what do `ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`,
    and `cubic-bezier` actually do? Each of them is actually a pre-defined cubic-bezier
    curve, essentially the same as an easing function. Or, more simplistically, a
    mathematical description of how the transition should look. It's generally easier
    to visualize these curves so I recommend you head over to [http://cubic-bezier.com/](http://cubic-bezier.com/)
    and [http://easings.net/](http://easings.net/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你声明一个过渡时，属性、持续时间和延迟相对简单理解。然而，理解每个时间函数的作用可能会有点棘手。`ease`、`linear`、`ease-in`、`ease-out`、`ease-in-out`和`cubic-bezier`到底是什么？它们实际上都是预定义的三次贝塞尔曲线，本质上与缓动函数相同。或者更简单地说，这是过渡应该如何呈现的数学描述。通常更容易可视化这些曲线，所以我建议你去[http://cubic-bezier.com/](http://cubic-bezier.com/)和[http://easings.net/](http://easings.net/)看一看。
- en: Both these sites let you compare timing functions and see the difference each
    one makes. Here is a screenshot of [http://easings.net](http://easings.net)—you
    can hover over each line for a demonstration of the easing function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个网站都可以让你比较时间函数，并看到每个时间函数的区别。这是[http://easings.net](http://easings.net)的截图——你可以悬停在每条线上演示缓动函数。
- en: '![Understanding timing functions](img/3777_08_19.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![理解时间函数](img/3777_08_19.jpg)'
- en: However, even if you can write your own cubic-bezier curves blindfolded, the
    likelihood is, for most practical situations, it makes little difference. The
    reason being that, like any enhancement, it's necessary to employ transition effects
    subtly. For 'real world' implementations, transitions that occur over too great
    a period of time tend to make a site feel slow. For example, navigation links
    that take 5 seconds to transition are going to frustrate, rather than wow your
    users. The perception of speed is incredibly important for our users and you and
    I must concentrate on making websites and applications feel as fast as possible.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使你能闭着眼睛写出自己的三次贝塞尔曲线，对于大多数实际情况来说，这可能并没有太大的区别。原因是，像任何增强功能一样，必须谨慎地使用过渡效果。对于“真实世界”的实现，过长的过渡时间会让网站感觉缓慢。例如，需要5秒才能完成过渡的导航链接会让用户感到沮丧，而不是惊叹。速度的感知对我们的用户非常重要，你和我必须集中精力让网站和应用程序尽可能地快。
- en: Therefore, unless there is a compelling reason to do so, using the default transition
    (ease) over a short interval is often best; a maximum of 1 second is my own preference.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除非有充分的理由这样做，通常最好在短时间内使用默认的过渡（ease）；我个人偏好最长1秒。
- en: Fun transitions for responsive websites
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式网站的有趣过渡效果
- en: Did you ever have one of those occasions growing up when one parent was out
    for the day and the other parent said something to the effect of, "OK, while your
    mom/dad are out we're going to put sugar all over your breakfast cereal but you
    have to promise not to tell them when they come back"? I'm certainly guilty of
    that with my little ankle biters. So here's the thing. While no one is looking,
    let's have a bit of fun. I don't recommend this for production, but try adding
    this to your responsive project.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否在成长过程中有过这样的情况，一个父母出门了，另一个父母说了类似这样的话：“好吧，你妈妈/爸爸出门了，我们要在你的早餐麦片上撒满糖，但你要答应他们回来后不告诉他们”？我肯定对我的孩子们做过这样的事。所以这样吧，趁没人注意，让我们玩一点。我不建议在生产中这样做，但是尝试将这个添加到你的响应式项目中。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are using the CSS universal selector `*` to select everything and then
    setting a transition on all properties for 1 second (1s). As we have omitted to
    specify the timing function, ease will be used by default and there will be no
    delay as again, a default of 0 is assumed if an alternative value is not added.
    The effect? Well, try resizing your browser window and most things (links, hover
    states, and the like) behave as you would expect. However, because everything
    transitions, it also includes any rules within media queries, so as the browser
    window is resized, elements sort of flow from one state to the next. Is it essential?
    Absolutely not! Is it fun to watch and play around with? Certainly! Now, remove
    that rule before your mom sees it!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用CSS通用选择器`*`选择所有内容，然后为所有属性设置1秒的过渡时间（1s）。由于我们没有指定时间函数，因此默认情况下将使用ease，并且如果没有添加替代值，则默认为0延迟。效果如何？嗯，尝试调整浏览器窗口大小，大多数东西（链接、悬停状态等）的行为都如你所期望的那样。然而，因为一切都在过渡，这也包括媒体查询中的任何规则，因此随着浏览器窗口的调整，元素会从一种状态流动到另一种状态。这是必要的吗？绝对不是！但是看起来很有趣，可以玩一下！现在，在你妈妈看到之前，删除这条规则！
- en: CSS3 2D transforms
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3 2D变换
- en: 'Despite sounding similar, CSS transforms are entirely different to CSS transitions.
    Think of it like this: transitions smooth the change from one state to another,
    while transforms are defining what the element will actually become. My own (admittedly
    childish) way of remembering the difference is like this: imagine a transformer
    robot such as Optimus Prime. When he has changed into a truck he has transformed.
    However, the period between robot and truck is a transition (he''s transitioning
    from one state to another).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管听起来相似，但CSS变换与CSS过渡完全不同。可以这样理解：过渡使元素从一种状态平滑地转换到另一种状态，而变换则定义了元素实际上会变成什么样。我自己（虽然有点幼稚）记住这个区别的方式是这样的：想象一个变形金刚机器人，比如大黄蜂。当他变成卡车时，他已经变形了。然而，从机器人到卡车的过程是一个过渡（他正在从一种状态过渡到另一种状态）。
- en: Obviously, if you have no idea who or what Optimus Prime even is, feel free
    to mentally discard the last few sentences. Hopefully all will become clear momentarily.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果你根本不知道奥普蒂默斯·普莱姆是谁或是什么，可以随意忽略最后几句。希望一切很快就会变得清晰起来。
- en: 'There are two groups of CSS3 transforms available: 2D and 3D. 2D variants are
    far more widely implemented, browser wise, and certainly easier to write so let''s
    look at those first. The CSS3 2D Transforms Module allows us to use the following
    transforms:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有两组可用的CSS3变换：2D和3D。 2D变体在浏览器方面得到了更广泛的实现，并且肯定更容易编写，所以让我们首先看看这些。 CSS3 2D变换模块允许我们使用以下变换：
- en: '`scale`: Used to scale an element (larger or smaller)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`缩放`：用于缩放元素（放大或缩小）'
- en: '`translate`: Move an element on the screen (up, down, left, and right)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`平移`：在屏幕上移动元素（上，下，左和右）'
- en: '`rotate`: Rotate the element by a specified amount (defined in degrees)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rotate`：按指定的角度旋转元素'
- en: '`skew`: Used to skew an element with its x and y co-ordinates'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`倾斜`：用于倾斜具有其x和y坐标的元素'
- en: '`matrix`: Allows you to move and shape transformations with pixel precision'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`矩阵`：允许您以像素精度移动和形状变换'
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's important to remember that transforms occur outside of the document flow.
    Any element that is transformed will not affect the position of an element nearby
    that is not being transformed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，变换发生在文档流之外。 任何被转换的元素都不会影响附近未被转换的元素的位置。
- en: Let's try out the various 2D transitions. You can test each of these out by
    opening `example_08-02` in the browser. There's a transition applied to all of
    the transforms so you get a better idea of what's happening.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试各种2D转换。 您可以通过在浏览器中打开`example_08-02`来测试这些转换中的每一个。 对所有变换应用了过渡，因此您可以更好地了解发生了什么。
- en: Scale
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放
- en: 'Here''s the syntax for `scale`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`scale`的语法：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Hovering over the ''scale'' link in our example produces this effect:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中悬停在“缩放”链接上会产生这种效果：
- en: '![Scale](img/3777_08_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![缩放](img/3777_08_03.jpg)'
- en: We've told the browser that when this element is hovered over, we want the element
    to scale to 1.4 times its original value.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉浏览器，当悬停在此元素上时，我们希望元素的比例放大到原始值的1.4倍。
- en: 'Besides the values we''ve already used to enlarge elements, by using values
    below 1, we can shrink elements; the following will shrink the element to half
    its size:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已经用来放大元素的值之外，通过使用小于1的值，我们可以缩小元素； 以下将使元素缩小到其一半大小：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Translate
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译
- en: 'Here''s the syntax for `translate`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`translate`的语法：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s the effect that rule has in our example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的示例中该规则的效果：
- en: '![Translate](img/3777_08_06.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![翻译](img/3777_08_06.jpg)'
- en: The `translate` property tells the browser to move an element by an amount,
    defined in either pixels or percentages. The first value is the *x* axis and the
    second value is the *y* axis. Positive values given within parentheses move the
    element right or down; negative values move it left or up.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate`属性告诉浏览器按指定的像素或百分比移动元素。 第一个值是*x*轴，第二个值是*y*轴。 括号中给出的正值将使元素向右或向下移动；
    负值将使其向左或向上移动。'
- en: If you only pass one value then it is applied to the *x* axis. If you want to
    specify just one axis to translate an element you can also use `translateX` or
    `translateY`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只传递一个值，则应用于*x*轴。 如果要指定一个轴来平移元素，还可以使用`translateX`或`translateY`。
- en: Using translate to center absolutely positioned elements
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用translate将绝对定位的元素居中
- en: The `translate` provides a really useful way to center absolutely positioned
    elements within a relatively positioned container. You can view this example at
    `example_08-03`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate`提供了一种非常有用的方法，可以在相对定位的容器内居中绝对定位的元素。 您可以在`example_08-03`中查看此示例。'
- en: 'Consider this markup:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下标记：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And then this CSS:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是这个CSS：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You've perhaps done something similar to this yourself. When the dimensions
    of the absolutely positioned element are known (200px x 200px in this case) we
    can use negative margins to 'pull' the item back to the center. However, what
    happens when you want to include content and have no way of knowing how tall it
    will be? Transform to the rescue.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能自己做过类似的事情。 当绝对定位元素的尺寸已知（在这种情况下为200px x 200px）时，我们可以使用负边距将项目“拉回”到中心。 但是，当您想要包含内容并且无法知道其高度时会发生什么？
    变换来拯救。
- en: 'Let''s add some random content into the inner box:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在内部框中添加一些随机内容：
- en: '![Using translate to center absolutely positioned elements](img/3777_08_04.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用translate将绝对定位的元素居中](img/3777_08_04.jpg)'
- en: Yes, that problem! Right, let's use `transform` to sort this mess out.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是那个问题！ 好吧，让我们使用`transform`来解决这个问题。
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And here is the result:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Using translate to center absolutely positioned elements](img/3777_08_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![使用translate将绝对定位的元素居中](img/3777_08_05.jpg)'
- en: Here, `top` and `left` are positioning the inner box inside its container so
    that the top left corner of the inner box starts at a point 50% along and 50%
    down the outer. Then the `transform` is working on the inner element and positioning
    it negatively in those axis by half (-50%) of its own width and height. Nice!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`top`和`left`定位内部框在其容器内，使内部框的左上角从外部向下50%处和向右50%处开始。 然后`transform`在内部元素上起作用，并通过其自身宽度和高度的一半（-50%）在这些轴上定位。
    很好！
- en: Rotate
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旋转
- en: 'The `rotate` transform allows you to rotate an element. Here''s the syntax:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate`变换允许您旋转元素。 这是语法：'
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the browser, here''s what happens:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，发生了什么：
- en: '![Rotate](img/3777_08_07.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![旋转](img/3777_08_07.jpg)'
- en: 'The value in parentheses should always be in degrees (for example, 90deg).
    While positive values always apply clockwise, using negative values will rotate
    the element counter-clockwise. You can also go crazy and make elements spin by
    specifying a value like the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的值应始终为度数（例如，90度）。 正值始终顺时针应用，使用负值将使元素逆时针旋转。 您还可以通过指定以下值来使元素旋转：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will rotate the element 10 times in a complete circle. Practical uses for
    this particular value are few and far between but you know, if you ever find yourself
    designing websites for a windmill company, it may come in handy.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使元素在一个完整的圆圈中旋转10次。 对于这个特定值的实际用途很少，但是您知道，如果您发现自己为风车公司设计网站，它可能会派上用场。
- en: Skew
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 倾斜
- en: 'If you''ve spent any time working in Photoshop, you''ll have a good idea what
    `skew` will do. It allows an element to be skewed on either or both of its axes.
    Here''s the code for our example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Photoshop中工作过一段时间，您可能对`skew`会做什么有一个很好的想法。它允许元素在其一个或两个轴上倾斜。这是我们示例的代码：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Setting this on the hover link produces the following effect on hover:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为悬停链接会产生以下悬停效果：
- en: '![Skew](img/3777_08_08.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![倾斜](img/3777_08_08.jpg)'
- en: 'The first value is the `skew` applied to the *x* axis (in our example, 40deg),
    while the second (12deg) is for the *y* axis. Omitting the second value means
    any value will merely be applied to the *x* axis (horizontal). For example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值是应用于*x*轴的`skew`（在我们的示例中为40度），而第二个值（12度）是应用于*y*轴的。省略第二个值意味着任何值仅仅应用于*x*轴（水平）。例如：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Matrix
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵
- en: Did somebody mention a completely over-rated film? No? What's that? You want
    to know about the CSS3 matrix, not the film? Oh, okay.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有人提到了一部被高估的电影吗？没有？什么？你想了解CSS3矩阵，而不是电影？好的。
- en: 'I''m not going to lie. I think the matrix transform syntax looks scary. Here''s
    our example code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会撒谎。我觉得矩阵变换语法看起来很可怕。这是我们的示例代码：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It essentially allows you to combine a number of other transforms (`scale`,
    `rotate`, `skew`, and so on) into a single declaration. The preceding declaration
    results in the following effect in the browser:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上允许您将许多其他变换（`scale`、`rotate`、`skew`等）组合成一个声明。前面的声明会在浏览器中产生以下效果：
- en: '![Matrix](img/3777_08_09.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![矩阵](img/3777_08_09.jpg)'
- en: 'Now, I like a challenge like the best of them (unless, you know, it''s sitting
    through the *Twilight* films) but I''m sure we can agree that syntax is a bit
    testing. For me, things got worse when I looked at the specification and realized
    that it involved mathematics knowledge beyond my rudimentary level to fully understand:
    [http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我喜欢挑战，就像其他人一样（除非，你知道，是坐在*暮光之城*电影里），但我相信我们可以一致同意这个语法有点考验。对我来说，当我看规范并意识到它涉及超出我基本水平的数学知识时，情况变得更糟：[http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you find yourself doing work with animations in JavaScript without the help
    of an animation library, you'll probably need to become a little more acquainted
    with the matrix. It's the syntax all the other transforms get computed into so
    if you're grabbing the current state of an animation with JavaScript, it will
    be the matrix value you will need to inspect and understand.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现自己在JavaScript中进行动画工作而没有动画库的帮助，您可能需要更加熟悉矩阵。它是所有其他变换计算出的语法，因此如果您使用JavaScript获取动画的当前状态，您需要检查和理解的将是矩阵值。
- en: Matrix transformations for cheats and dunces
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作弊者和蠢蛋的矩阵变换
- en: I'm not a mathematician by any stretch of the imagination, so when faced with
    the need to create a matrix-based transformation, I cheat. If your mathematical
    skills are also found wanting, I'd suggest heading over to [http://www.useragentman.com/matrix/](http://www.useragentman.com/matrix/).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我绝对不是数学家，所以当需要创建基于矩阵的变换时，我会作弊。如果您的数学技能也不足，我建议您前往[http://www.useragentman.com/matrix/](http://www.useragentman.com/matrix/)。
- en: The Matrix Construction Set website allows you to drag and drop the element
    exactly where you want it and then includes good ol' copy and paste code(including
    vendor-prefixes) for your CSS file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Matrix Construction Set网站允许您将元素拖放到您想要的位置，然后在CSS文件中包括好的复制和粘贴代码（包括供应商前缀）。
- en: The transform-origin property
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: transform-origin属性
- en: 'Notice how with CSS, the default transform origin (the point at which the browser
    uses as the center for the transform) is in the middle: 50% along the *x* axis
    and 50% along the *y* axis of the element. This differs from SVG which defaults
    to top left (or 0 0).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用CSS时，默认的变换原点（浏览器用作变换中心的点）位于中间：元素的*x*轴和*y*轴上分别为50%。这与SVG不同，后者默认为左上角（或0
    0）。
- en: Using the `transform-origin` property we can amend the point from which transforms
    originate.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`transform-origin`属性，我们可以修改变换的起始点。
- en: 'Consider our earlier matrix transform. The default `transform-origin` is ''50%
    50%'' (the center of the element). The Firefox developer tools show how the `transform`
    is applied:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们之前的矩阵变换。默认的`transform-origin`是'50% 50%'（元素的中心）。Firefox开发者工具显示了`transform`是如何应用的：
- en: '![The transform-origin property](img/3777_08_10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![transform-origin属性](img/3777_08_10.jpg)'
- en: 'Now, if we adjust the `transform-origin` like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们像这样调整`transform-origin`：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then you can see the effect this has:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以看到这样的效果：
- en: '![The transform-origin property](img/3777_08_11.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![transform-origin属性](img/3777_08_11.jpg)'
- en: The first value is the horizontal offset and the second value is the vertical
    offset. You can use keywords. For example, left is equal to 0% horizontal, right
    is equal to 100% horizontal, top is equal to 0% vertical, and bottom is equal
    to 100% vertical. Alternatively, you can use a length, using any of the CSS length
    units.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值是水平偏移，第二个值是垂直偏移。您可以使用关键字。例如，left等于0%水平，right等于100%水平，top等于0%垂直，bottom等于100%垂直。或者，您可以使用长度，使用任何CSS长度单位。
- en: If you use a percentage for the `transform-origin` values, then the horizontal/vertical
    offset is relative to the height/width of the elements bounding box.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在`transform-origin`值中使用百分比，则水平/垂直偏移是相对于元素边界框的高度/宽度的。
- en: If you use a length, then the values are measured from the top-left corner of
    the elements bounding box.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用长度，则值是从元素边界框的左上角开始测量的。
- en: Full information on the `transform-origin` property can be found at [http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`transform-origin`属性的完整信息可以在[http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)找到。
- en: That covers the essentials of 2D transforms. They are far more widely implemented
    than their 3D brethren and provide a far better means to move elements around
    the screen than older methods such as absolute positioning.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了2D变换的基本知识。它们比它们的3D兄弟更广泛地实现，并提供了一个比旧方法（如绝对定位）更好的移动元素在屏幕上的方法。
- en: Read the full specification on CSS3 2D Transforms Module Level 3 at [http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读CSS3 2D Transforms Module Level 3的完整规范，请访问[http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)。
- en: Tip
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For more on the benefits of moving element with `transform`, here's a great
    post by Paul Irish ([http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/](http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/))
    that provides some good data.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用`transform`移动元素的好处，请参阅Paul Irish的一篇很棒的文章（[http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/](http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/)），其中提供了一些很好的数据。
- en: 'And, for a fantastic overview of how browsers actually deal with transitions
    and animations, and why transforms can be so effective, I highly recommend the
    following blog post: [http://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/](http://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，关于浏览器如何处理过渡和动画，以及变换为何如此有效的概述，我强烈推荐阅读以下博客文章：[http://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/](http://blogs.adobe.com/webplatform/2014/03/18/css-animations-and-transitions-performance/)
- en: CSS3 3D transformations
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3 3D transformations
- en: Let's look at our first example. An element that flips when we hover over it.
    I've used hover here to invoke the change as it's simple for the sake of illustration,
    however the flipping action could just as easily be initiated with a class change
    (via JavaScript) or when an element received focus.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的第一个示例。当我们悬停在元素上时翻转的元素。我在这里使用悬停来调用更改，因为这对于说明来说很简单，然而翻转动作也可以通过类更改（通过JavaScript）或当元素获得焦点时轻松地启动。
- en: We will have two of these elements; a horizontal flipping element and a vertical
    flipping element. You can view the final example at `example_08-04`. Images fail
    to fully convey this technique but the idea is that the element flips from the
    green 'face' to the red 'face' and gives the illusion of doing so through 3D space
    with the aid of perspective. Here's a grab partway through the transition from
    green to red which hopefully conveys some of the effect.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有两个这样的元素；一个是水平翻转元素，一个是垂直翻转元素。您可以在`example_08-04`中查看最终示例。图片无法完全传达这种技术，但想法是元素从绿色“面”翻转到红色“面”，并在透视的帮助下产生在3D空间中进行翻转的错觉。这是从绿色到红色过渡的一部分效果。
- en: '![CSS3 3D transformations](img/3777_08_12.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3 3D transformations](img/3777_08_12.jpg)'
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's also worth knowing that while positioning an element absolutely with top/left/bottom/right
    values operates pixel by pixel, a transform can interpolate at sub-pixel positions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 值得知道的是，虽然使用top/left/bottom/right值绝对定位元素是以像素为单位的，但变换可以在亚像素位置进行插值。
- en: 'Here''s the markup for the flipping element:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是翻转元素的标记：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The only difference with the horizontal one, markup wise is the `flipper-horizontal`
    class instead of `flipper-vertical`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 水平翻转元素的唯一区别是标记上的`flipper-horizontal`类，而不是`flipper-vertical`。
- en: As the majority of the styles relate to aesthetics, we'll merely look at the
    essential ingredients in our styles to make the flipping effect possible. Refer
    to the full style sheet in the example for the aesthetic styles.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数样式与美学有关，我们只会看一下样式中使翻转效果成为可能的基本要素。有关美学样式，请参考示例中的完整样式表。
- en: First of all, we need to set some perspective for the `.flipper-object` to flip
    within. For that we use the `perspective` property. This takes a length attempting
    to simulate the distance from the viewer's screen to the edge of the elements
    3D space.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为`.flipper-object`设置一些透视，以便在其中进行翻转。为此，我们使用`perspective`属性。这需要一个长度，试图模拟观看者屏幕到元素3D空间边缘的距离。
- en: If you set a low number like 20px for the perspective value, the 3D space of
    the element will extend right out to only 20px from your screen; the result being
    a very pronounced 3D effect. Setting a high number on the other hand, will mean
    the edge of that imaginary 3D space will be further away, and therefore produce
    a less pronounced 3D effect.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您设置了一个低值，比如20px作为透视值，元素的3D空间将延伸到距离屏幕仅20px的地方；结果是非常明显的3D效果。另一方面，设置一个高值将意味着那个想象的3D空间的边缘将更远，因此产生一个不太明显的3D效果。
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are positioning the outer element relatively to create a context for the
    `flipper-object` to be positioned within:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将相对定位外部元素，以创建`flipper-object`在其中定位的上下文：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Besides positioning the `.flipper-object` absolutely at the top left of its
    closest relatively positioned parent (the default position for absolutely positioned
    elements), we have set a transition for the transform. The key thing here, 3D
    wise, though is the `transform-styles: preserve-3d`. This tells the browser that
    when we transform this element, we want any children elements to preserve the
    3D effect.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '除了将`.flipper-object`绝对定位在其最近的相对定位的父元素的左上角（绝对定位元素的默认位置）之外，我们还为变换设置了一个过渡。在3D方面，关键的是`transform-styles:
    preserve-3d`。这告诉浏览器，当我们变换这个元素时，我们希望任何子元素都保持3D效果。'
- en: If we didn't set `preserve-3d` on the `.flipper-object`, we would never get
    to see the back (the red part) of the flipping element. You can read the specification
    for this property at [http://www.w3.org/TR/2009/WD-css3-3d-transforms-20090320/](http://www.w3.org/TR/2009/WD-css3-3d-transforms-20090320/).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有在`.flipper-object`上设置`preserve-3d`，我们将永远看不到翻转元素的背面（红色部分）。您可以在[http://www.w3.org/TR/2009/WD-css3-3d-transforms-20090320/](http://www.w3.org/TR/2009/WD-css3-3d-transforms-20090320/)上阅读此属性的规范。
- en: 'Each ''panel'' in our flipping element needs positioning at the top of its
    container but we also want to make sure that if rotated, we don''t see the ''rear''
    of it (otherwise we would never see the green panel as it sits ''behind'' the
    red one). To do that we use the b`ackface-visibility` property. We set this to
    hidden so that the back face of the element is, you guessed it, hidden:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们翻转元素中的每个“面板”都需要定位在其容器的顶部，但我们也希望确保如果旋转了，我们不会看到它的“后面”（否则我们永远看不到绿色面板，因为它位于红色面板的“后面”）。为此，我们使用`backface-visibility`属性。我们将其设置为隐藏，以便元素的背面被隐藏：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'I''ve found that `backface-visibility` actually has a few surprising side effects
    in some browsers. It''s particularly useful for improving the performance of fixed
    position elements on older Android devices. For more on this and why it does what
    it does, take a look at this post: [http://benfrain.com/easy-css-fix-fixed-positioning-android-2-2-2-3/](http://benfrain.com/easy-css-fix-fixed-positioning-android-2-2-2-3/)
    and this one: [http://benfrain.com/improving-css-performance-fixed-position-elements/](http://benfrain.com/improving-css-performance-fixed-position-elements/)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现`backface-visibility`在一些浏览器中实际上有一些令人惊讶的副作用。它特别适用于改善旧版Android设备上固定位置元素的性能。有关更多信息以及它为什么会产生这种效果，请查看这篇文章：[http://benfrain.com/easy-css-fix-fixed-positioning-android-2-2-2-3/](http://benfrain.com/easy-css-fix-fixed-positioning-android-2-2-2-3/)和这篇文章：[http://benfrain.com/improving-css-performance-fixed-position-elements/](http://benfrain.com/improving-css-performance-fixed-position-elements/)
- en: 'Next we want to make our back panel flipped by default (so that when we flip
    the whole thing it will actually be in the correct position). To do that we apply
    a `rotate` transform:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们希望默认情况下翻转我们的后面板（这样当我们翻转整个东西时，它实际上会处于正确的位置）。为此，我们应用了`rotate`变换：
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now everything is in place, now all we want to do is flip the entire inner
    element when the outer one is hovered over:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都就绪，我们要做的就是在悬停在外部元素上时翻转整个内部元素：
- en: '[PRE24]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you can imagine there are a bazillion (by the way, that''s definitely not
    a real amount, I just checked) ways you can use these principals. If you''re wondering
    what a fancy navigation effect, or off-canvas menu, might look like with a spot
    of perspective, I highly recommend paying Codrops a visit: [http://tympanus.net/Development/PerspectivePageViewNavigation/index.html](http://tympanus.net/Development/PerspectivePageViewNavigation/index.html).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以想象有无数种方式可以使用这些原则。如果您想知道带有一点透视效果的花哨导航效果或离屏菜单可能会是什么样子，我强烈建议您访问Codrops：[http://tympanus.net/Development/PerspectivePageViewNavigation/index.html](http://tympanus.net/Development/PerspectivePageViewNavigation/index.html)。
- en: Tip
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Read about the latest W3C developments on CSS Transforms Module Level 1 at [http://dev.w3.org/csswg/css-transforms/](http://dev.w3.org/csswg/css-transforms/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读有关CSS Transforms Module Level 1的最新W3C发展情况：[http://dev.w3.org/csswg/css-transforms/](http://dev.w3.org/csswg/css-transforms/)。
- en: The transform3d property
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: transform3d属性
- en: In addition to using perspective, I've also found great utility in the `transform3d`
    value. With a single property and value, this allows you to move an element in
    the X (left/right), Y (up/down), and Z (forwards/backwards) axis. Let's amend
    our last example and make use of the `translate3d` transform. You can view this
    example at `example_08-06`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用透视，我还发现`transform3d`值非常有用。通过单个属性和值，这允许您在X（左/右）、Y（上/下）和Z（前/后）轴上移动元素。让我们修改我们的最后一个示例，利用`translate3d`变换。您可以在`example_08-06`中查看此示例。
- en: 'Besides setting the elements in with a little padding, the only changes from
    our previous example can be seen here:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用一点填充设置元素外，我们的上一个示例的唯一变化可以在这里看到：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We're still applying a transform but this time, in addition to our rotate we
    have also added a `translate3d`. The syntax for the comma-separated 'arguments'
    you can pass into `translate3d` are *x* axis movement, *y* axis movement, and
    *z* axis movement.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然应用变换，但这次，除了我们的旋转之外，我们还添加了`translate3d`。您可以传递给`translate3d`的逗号分隔的“参数”的语法是*x*轴移动、*y*轴移动和*z*轴移动。
- en: In our two examples I'm not moving the element in the *x* or *y* axis (left
    to right, and up and down) instead I'm moving towards or further away from you
    as you look at it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的两个示例中，我没有在*x*或*y*轴（左右和上下）移动元素，而是向您移动或远离您。
- en: If you look at the top example you will see it flip behind the bottom button
    and end 120px closer to the screen (minus values effectively pull it backwards
    towards you).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看顶部示例，您会看到它在底部按钮后面翻转，并最终离屏幕更近120像素（负值实际上将其向您拉回）。
- en: '![The transform3d property](img/3777_08_12.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![transform3d属性](img/3777_08_12.jpg)'
- en: On the other hand, the bottom button flips around horizontally and ends with
    the button 120px further away from you.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，底部按钮水平翻转，最终距离您120像素。
- en: '![The transform3d property](img/3777_08_13.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![transform3d属性](img/3777_08_13.jpg)'
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can read the specification for `translate3d` at [http://www.w3.org/TR/css3-3d-transforms/](http://www.w3.org/TR/css3-3d-transforms/).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.w3.org/TR/css3-3d-transforms/](http://www.w3.org/TR/css3-3d-transforms/)阅读`translate3d`的规范。
- en: Use transforms with progressive enhancement
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用渐进增强的转换
- en: The area I have found the greatest utility for `transform3d` is in sliding panels
    on and off the screen, particularly 'off-canvas' navigation patterns. If you open
    `example_08-07` you'll see I have created a basic, progressively enhanced off-canvas
    pattern.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现`transform3d`最有用的地方是在屏幕上滑动面板，特别是“离屏”导航模式。如果你打开`example_08-07`，你会看到我创建了一个基本的、逐步增强的离屏模式。
- en: Whenever you create interaction with JavaScript and modern CSS features like
    transforms it makes sense to try and consider things from the lowest possible
    device you want to support. What about the two people that don't have JavaScript
    (yes, those guys) or if there is a problem with the JavaScript loading or executing?
    What if somebody's device doesn't support transform (Opera Mini for example)?
    Don't worry, it's possible, with a little effort, to ensure a working interface
    for every eventuality.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您使用JavaScript和现代CSS功能（如变换）创建交互时，考虑从您想要支持的最低可能设备的角度是有意义的。那么那两个没有JavaScript的人怎么办（是的，那些家伙），或者如果JavaScript加载或执行时出现问题怎么办？如果某人的设备不支持变换（例如Opera
    Mini）怎么办？别担心，通过一点努力，可以确保每种情况下都有一个可用的界面。
- en: 'When building these kind of interface patterns I find it most useful to start
    with the lowest set of features and enhance from there. So, first establish what
    someone sees if they don''t have JavaScript available. After all, it''s no use
    parking a menu off-screen if the method for displaying the menu relies upon JavaScript.
    In this case, we are relying upon markup to place the navigation area in the normal
    document flow. Worst case, whatever the viewport width, they can merely scroll
    down the page and click a link:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建这种界面模式时，我发现从最低级别的功能开始，并从那里进行增强是最有用的。因此，首先确定如果没有JavaScript可用，某人会看到什么。毕竟，如果显示菜单的方法依赖于JavaScript，将菜单停放在屏幕外是没有用的。在这种情况下，我们依赖于标记来将导航区域放在正常的文档流中。最坏的情况是，无论视口宽度如何，他们只需滚动页面并点击链接即可：
- en: '![Use transforms with progressive enhancement](img/3777_08_15.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐进增强的变换](img/3777_08_15.jpg)'
- en: If JavaScript is available, for smaller screens we 'pull' the menu off to the
    left. When the menu button is clicked, we add a class onto the `body` tag (with
    JavaScript) and use this class as a hook to move the navigation back into view
    with CSS.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果JavaScript可用，对于较小的屏幕，我们将菜单“拉”到左侧。当单击菜单按钮时，我们在`body`标签上添加一个类（使用JavaScript），并使用这个类作为钩子，通过CSS将导航移回视图中。
- en: '![Use transforms with progressive enhancement](img/3777_08_16.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐进增强的变换](img/3777_08_16.jpg)'
- en: For larger viewports we hide the menu button and merely position the navigation
    to the left and move the main content over to accommodate.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的视口，我们隐藏菜单按钮，仅将导航定位到左侧，并移动主要内容以适应。
- en: '![Use transforms with progressive enhancement](img/3777_08_17.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![使用渐进增强的变换](img/3777_08_17.jpg)'
- en: We then progressively enhance the navigation show/hide effect. This is where
    a tool like Modernizr really earns its place; adding classes to the HTML tag we
    can use as styling hooks (Modernizr is discussed in greater detail in [Chapter
    5](ch05.html "Chapter 5. CSS3 – Selectors, Typography, Color Modes, and New Features"),
    *CSS3 – Selectors, Typography, Color Modes, and New Features*).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们逐步增强导航显示/隐藏效果。这就是像Modernizr这样的工具真正发挥作用的地方；通过向HTML标签添加类，我们可以用作样式钩子（Modernizr在[第5章](ch05.html
    "第5章.CSS3 – 选择器、排版、颜色模式和新功能")中有更详细的讨论，“CSS3 – 选择器、排版、颜色模式和新功能”）。
- en: 'First, for browsers that only support translate transforms (old Android for
    example), a simple `translateX`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于只支持translate变换的浏览器（例如旧版Android），简单的`translateX`：
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For browsers that support `translate3d` we use `translate3d` instead. This
    will perform far better, where supported, thanks to being offloaded to the graphics
    processors on most devices:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持`translate3d`的浏览器，我们使用`translate3d`。在支持的情况下，这将表现得更好，因为大多数设备上的图形处理器会卸载它：
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Embracing a progressive enhancement approach ensures the widest possible audience
    will get a workable experience from your design. Remember, your users don't need
    visual parity but they might appreciate capability parity.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 采用渐进增强方法可以确保尽可能广泛的受众能够从您的设计中获得可用的体验。记住，用户不需要视觉一致性，但他们可能会欣赏功能一致性。
- en: Animating with CSS3
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS3进行动画制作
- en: If you've worked with applications like Flash, Final Cut Pro or After Effects,
    you'll have an instant advantage when working with CSS3 animations. CSS3 employs
    animation keyframing conventions found in timeline-based applications.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用过Flash、Final Cut Pro或After Effects等应用程序，那么在使用CSS3动画时，你会立即获得优势。CSS3采用了时间轴应用程序中找到的动画关键帧约定。
- en: Animations are widely implemented; supported in Firefox 5+, Chrome, Safari 4+,
    Android (all versions), iOS (all versions), and Internet Explorer 10+. There are
    two components to a CSS3 animation; firstly a `keyframes` declaration and then
    employing that `keyframes` declaration in an `animation` property. Let's take
    a look.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 动画广泛实现；在Firefox 5+、Chrome、Safari 4+、Android（所有版本）、iOS（所有版本）和Internet Explorer
    10+中都受支持。CSS3动画有两个组成部分；首先是`keyframes`声明，然后在`animation`属性中使用该`keyframes`声明。让我们来看看。
- en: In a previous example, we made a simple flip effect on elements that combined
    transforms and transitions. Let's bring together all the techniques we have learned
    in this chapter and add an animation to that previous example. In this next example,
    `example_08-05`, let's add a pulsing animation effect once the element has flipped.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们对结合变换和过渡的元素进行了简单的翻转效果。让我们将本章学到的所有技术结合起来，并为之前的示例添加动画。在下一个示例中，`example_08-05`，让我们在元素翻转后添加一个脉动动画效果。
- en: 'Firstly we will create a `keyframes` at-rule:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个`keyframes` at-rule：
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, after writing at `@keyframes` to define a new `keyframes` at-rule
    we name this particular animation (pulse in this instance).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在编写`@keyframes`来定义新的`keyframes` at-rule后，我们为这个特定的动画命名（在这种情况下是pulse）。
- en: It's generally best to use a name that represents what the animation does, not
    where you intend to use the animation, as a single `@keyframes` rule can be used
    as many times as you need throughout a project.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好使用代表动画功能的名称，而不是你打算在哪里使用动画的名称，因为单个`@keyframes`规则可以在项目中使用多次。
- en: 'We have used a single keyframe selector here: 100%. However, you can set as
    many keyframe selectors (defined as percentage points) as you like within a `keyframes`
    rule. Think of these as points along a timeline. For example, at 10%, make the
    background blue, at 30% make the background purple, at 60%, make the element semi-opaque.
    On and on as you need. There is also the keyword from which is equivalent to 0%
    and to which is equivalent to100%. You can use them like this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个单一的关键帧选择器：100%。但是，在`keyframes`规则中，您可以设置尽可能多的关键帧选择器（定义为百分比点）。将这些想象成时间轴上的点。例如，在10%处，使背景变蓝，在30%处，使背景变紫，在60%处，使元素半透明。您需要多少就设置多少。还有关键字from，相当于0%，to，相当于100%。您可以这样使用它们：
- en: '[PRE29]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Be warned, however, that WebKit browsers (iOS, Safari) don't always play happily
    with from and to values (preferring 0% and 100%) so I'd recommend sticking with
    percentage keyframe selectors.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 但是要注意，WebKit浏览器（iOS，Safari）并不总是对from和to值（更喜欢0%和100%）很友好，所以我建议坚持使用百分比关键帧选择器。
- en: 'You''ll notice here that we haven''t bothered to define a starting point. That''s
    because the starting point is the state each of those properties is already at.
    Here''s the part of the specification that explains that: [http://www.w3.org/TR/css3-animations/](http://www.w3.org/TR/css3-animations/)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您会注意到我们没有费心定义起点。那是因为起点是每个属性已经处于的状态。这是规范的一部分，解释了这一点：[http://www.w3.org/TR/css3-animations/](http://www.w3.org/TR/css3-animations/)
- en: Note
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If a `0%` or `from` keyframe is not specified, then the user agent constructs
    a `0%` keyframe using the computed values of the properties being animated. If
    a `100%` or `to` keyframe is not specified, then the user agent constructs a `100%`
    keyframe using the computed values of the properties being animated. If a keyframe
    selector specifies negative percentage values or values higher than `100%`, then
    the keyframe will be ignored.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定`0%`或`from`关键帧，则用户代理将使用正在动画化的属性的计算值构造`0%`关键帧。如果未指定`100%`或`to`关键帧，则用户代理将使用正在动画化的属性的计算值构造`100%`关键帧。如果关键帧选择器指定负百分比值或高于`100%`的值，则将忽略该关键帧。
- en: 'In this `keyframes` at-rule we''ve added a text-shadow and box-shadow at 100%.
    We can then expect the `keyframes`, when applied to an element to animate the
    text-shadow and box-shadow to the defined amount. But how long does the animation
    last? How do we make it repeat, reverse, and other eventualities I hope to have
    the answer for? This is how we actually apply a `keyframes` animation:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`keyframes` at-rule中，我们在100%处添加了text-shadow和box-shadow。然后，我们可以期望`keyframes`应用到元素时，将文本阴影和框阴影动画到定义的程度。但是动画持续多久？我们如何使其重复，反转，以及其他可能性，我希望有答案？这就是我们实际应用`keyframes`动画的方法：
- en: '[PRE30]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `animation` property here is being used as a shorthand for a number of animation
    related properties. In this example, we are actually declaring (in order), the
    name of the `keyframes` declaration to use (pulse), the `animation-duration` (1
    second), the delay before the animation begins (1 second, to allow time for our
    button to first flip), the amount of times the animation will run (infinitely),
    the direction of the animation (alternate, so it animates first one way and then
    back the other) and that we want the `animation-fill-mode` to retain the values
    that are defined in the `keyframes` whether going forwards or backwards (both).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`animation`属性被用作多个与动画相关的属性的速记。在这个例子中，我们实际上是按顺序声明了要使用的`keyframes`声明的名称（pulse），`animation-duration`（1秒），动画开始前的延迟（1秒，以便我们的按钮首先翻转的时间），动画将运行的次数（无限次），动画的方向（交替，所以它先沿着一条路线动画，然后返回另一条路线），以及我们希望`animation-fill-mode`保留在`keyframes`中定义的值，无论是向前还是向后（两者都是）。
- en: 'The shorthand property can actually accept all seven animation properties.
    In addition to those used in the preceding example, it''s also possible to specify
    `animation-play-state`. This can be set to running or paused to effectively play
    and pause an animation. Of course, you don''t need to use the shorthand property;
    sometimes it can make more sense (and help when you revisit the code in the future)
    to set each property separately. Below are the individual properties and where
    appropriate, alternate values separated with the pipe symbol:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 速记属性实际上可以接受所有七个动画属性。除了前面示例中使用的属性之外，还可以指定`animation-play-state`。这可以设置为running或paused，以有效地播放和暂停动画。当然，您不需要使用速记属性；有时分别设置每个属性可能更有意义（并且在将来重新访问代码时可能会有所帮助）。以下是各个属性以及在适当的情况下，用管道符号分隔的备用值：
- en: '[PRE31]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the full definition for each of these animation properties at [http://www.w3.org/TR/css3-animations/](http://www.w3.org/TR/css3-animations/).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.w3.org/TR/css3-animations/](http://www.w3.org/TR/css3-animations/)上阅读每个这些动画属性的完整定义。
- en: 'As mentioned previously, it''s simple to reuse a declared `keyframes` on other
    elements and with completely different settings:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，可以简单地在其他元素上重用已声明的`keyframes`，并且具有完全不同的设置：
- en: '[PRE32]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here the `pulse` animation would run over 2 seconds and uses an ease-in-out-back
    timing function (defined as a cubic-bezier curve). It runs five times in both
    directions. This declaration has been applied to the vertically flipping element
    in the example file.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`pulse`动画将持续2秒，并使用ease-in-out-back时间函数（定义为三次贝塞尔曲线）。它在两个方向上各运行五次。这个声明已经应用到示例文件中垂直翻转的元素上。
- en: This is just one very simple example of using CSS animations. As virtually anything
    can be key-framed, the possibilities are pretty endless. Read about the latest
    developments on CSS3 animations at [http://dev.w3.org/csswg/css3-animations/](http://dev.w3.org/csswg/css3-animations/).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是使用CSS动画的一个非常简单的例子。几乎任何东西都可以成为关键帧，可能性非常广泛。阅读有关CSS3动画的最新发展，访问[http://dev.w3.org/csswg/css3-animations/](http://dev.w3.org/csswg/css3-animations/)。
- en: The animation-fill-mode property
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: animation-fill-mode属性
- en: The `animation-fill-mode` property is worthy of a special mention. Consider
    an animation that starts with a yellow background and animates to a red background
    over 3 seconds. You can view this in `example_08-08`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-fill-mode`属性值得特别一提。考虑一个动画，从黄色背景开始，经过3秒动画到红色背景。你可以在`example_08-08`中查看。'
- en: 'We apply the animation like this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样应用动画：
- en: '[PRE33]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'However, once the animation completes, the background of the `div` will return
    to nothing. That''s because by default ''what happens outside of animations, stays
    outside of animations''! In order to override this behavior, we have the `animation-fill-mode`
    property. In this instance we could apply this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦动画完成，`div`的背景将返回到原来的状态。这是因为默认情况下，“动画之外发生的事情，留在动画之外”！为了覆盖这种行为，我们有`animation-fill-mode`属性。在这种情况下，我们可以应用这样的属性：
- en: '[PRE34]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This makes the item retain any values that have been applied at the animation
    end. In our case, the `div` would retain the red background color that the animation
    ended on. More on the `animation-fill-mode property` here: [http://www.w3.org/TR/css3-animations/#animation-fill-mode-property](http://www.w3.org/TR/css3-animations/#animation-fill-mode-property)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得项目保留了动画结束时应用的任何值。在我们的例子中，`div`将保留动画结束时的红色背景颜色。有关`animation-fill-mode`属性的更多信息，请参阅：[http://www.w3.org/TR/css3-animations/#animation-fill-mode-property](http://www.w3.org/TR/css3-animations/#animation-fill-mode-property)
- en: '![The animation-fill-mode property](img/3777_08_18.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![animation-fill-mode属性](img/3777_08_18.jpg)'
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: It would be entirely possible to fill multiple books covering the possibilities
    of CSS transforms, transitions, and animations. However, hopefully, by dipping
    your toe in the water with this chapter you'll be able to pick up the basics and
    run with them. Ultimately, by embracing these newer features and techniques of
    CSS, the aim is to make a responsive design even leaner and richer than ever by
    using CSS, rather than JavaScript, for some of the fancier aesthetic enhancements.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 填写多本书来覆盖CSS变换、过渡和动画的可能性是完全可能的。然而，希望通过本章的涉水，你能够掌握基础知识并运用它们。最终，通过拥抱CSS的这些新特性和技术，目标是使响应式设计比以往更加精简且丰富，而不是使用JavaScript来实现一些更花哨的美学增强。
- en: In this chapter we've learned what CSS3 transitions are and how to write them.
    We've got a handle on timing functions like ease and linear, and then used them
    to create simple but fun effects. We then learned all about 2D transforms such
    as `scale` and `skew` and then how to use them in tandem with transitions. We
    also looked briefly at 3D transformations before learning all about the power
    and relative simplicity of CSS animations. You'd better believe our CSS3 muscles
    are growing!
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了CSS3过渡是什么以及如何编写它们。我们掌握了像ease和linear这样的时间函数，然后使用它们创建简单但有趣的效果。然后我们学习了所有关于`scale`和`skew`这样的2D变换，以及如何与过渡一起使用它们。我们还简要介绍了3D变换，然后学习了CSS动画的强大和相对简单。你最好相信我们的CSS3技能正在增长！
- en: However, if there's one area of site design that I always avoid where possible,
    it's making forms. I don't know why, I've just always found making them a tedious
    and largely frustrating task. Imagine my joy when I learned that HTML5 and CSS3
    can make the whole form building, styling, and even validating (yes, validating!),
    process easier than ever before. I was quite joyous. As joyous as you can be about
    building web forms that is. In the next chapter I'd like to share this knowledge
    with you.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果有一个网站设计领域，我尽量避免的，那就是制作表单。我不知道为什么，我总是觉得制作它们是一项乏味且令人沮丧的任务。当我得知HTML5和CSS3可以比以往更容易地构建、样式化甚至验证（是的，验证！）整个表单过程时，我感到非常高兴。在下一章中，我想与你分享这些知识。
