- en: Chapter 9. Conquer Forms with HTML5 and CSS3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用HTML5和CSS3征服表单
- en: Before HTML5, adding things such as date pickers, placeholder text, and range
    sliders into forms has always needed JavaScript. Similarly, there has been no
    easy way to tell users what we expect them to input into certain input fields,
    for example, whether we want users to input telephone numbers, e-mail addresses,
    or URLs. The good news is that HTML5 largely solves these common problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5之前，添加诸如日期选择器、占位文本和范围滑块到表单中总是需要JavaScript。同样，我们无法轻松地告诉用户我们希望他们在某些输入字段中输入什么，例如，我们是希望用户输入电话号码、电子邮件地址还是URL。好消息是，HTML5在很大程度上解决了这些常见问题。
- en: We have two main aims in this chapter. Firstly, to understand HTML5 form features
    and secondly, to understand how we can lay out forms more simply for multiple
    devices with the latest CSS features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章有两个主要目标。首先，了解HTML5表单功能，其次，了解如何使用最新的CSS功能为多个设备更简单地布局表单。
- en: 'In this chapter, we will learn how to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何：
- en: Easily add placeholder text into relevant form input fields
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松地在相关的表单输入字段中添加占位文本
- en: Disable auto-completion of form fields where necessary
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在必要时禁用表单字段的自动完成
- en: Set certain fields to be required before submission
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交之前设置某些字段为必填项
- en: Specify different input types such as e-mail, telephone number, and URL
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定不同的输入类型，如电子邮件、电话号码和URL
- en: Create number range sliders for easy value selection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了方便选择数值，创建数字范围滑块
- en: Place date and color pickers into a form
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日期和颜色选择器放入表单中
- en: Learn how we can use a regular expression to define an allowed form value
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用正则表达式来定义允许的表单值
- en: How to style forms using Flexbox
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Flexbox样式化表单
- en: HTML5 forms
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5表单
- en: I think the easiest way to get to grips with HTML5 forms is to work our way
    through an example form. From the finest of daytime TV examples, I have one I
    made earlier. A minor introduction is needed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为理解HTML5表单的最简单方法是通过一个示例表单逐步进行。从最好的日间电视示例中，我有一个之前制作的。需要一个小的介绍。
- en: 'Two facts: firstly, I love films. Secondly, I''m very opinionated on what is
    a good film and what is not.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 两个事实：首先，我喜欢电影。其次，我对什么是一部好电影，什么不是有很强烈的意见。
- en: Every year, when the Oscar nominations are announced, I can't help feeling the
    wrong films have got 'the nod' from the Academy. Therefore, we will start with
    an HTML5 form that enables fellow cinephiles to vent their frustrations at the
    continual travesties of the Oscar nominations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每年奥斯卡提名公布时，我总是忍不住觉得奥斯卡学院选错了电影。因此，我们将从一个HTML5表单开始，让影迷们发泄对奥斯卡提名持续不公的不满。
- en: It's made up of a few `fieldset` elements, within which we are including a raft
    of the HTML5 form input types and attributes. Besides standard form input fields
    and text areas, we have a number spinner, a range slider, and placeholder text
    for many of the fields.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它由几个`fieldset`元素组成，在其中我们包括了大量的HTML5表单输入类型和属性。除了标准的表单输入字段和文本区域，我们还有一个数字微调器、一个范围滑块，以及许多字段的占位文本。
- en: 'Here''s how it looks with no styles applied in Chrome:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中没有应用样式的情况下是这样的：
- en: '![HTML5 forms](img/B03777_09_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5表单](img/B03777_09_01.jpg)'
- en: 'If we ''focus'' on the first field and start inputting text, the placeholder
    text is removed. If we blur focus without entering anything (by clicking outside
    of the input box again) the placeholder text re-appears. If we submit the form
    (without entering anything), the following happens:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们“聚焦”在第一个字段上并开始输入文本，占位文本将被移除。如果我们在不输入任何内容的情况下失去焦点（再次点击输入框外部），占位文本将重新出现。如果我们提交表单（没有输入任何内容），则会发生以下情况：
- en: '![HTML5 forms](img/B03777_09_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5表单](img/B03777_09_02.jpg)'
- en: The great news is that all these user interface elements, including the aforementioned
    slider, placeholder text, and spinner, and the input validation, are all being
    handled natively by the browser via HTML5, and no JavaScript. Now, the form validation
    isn't entirely cross browser compatible, but we will get to that shortly. First
    of all, let's get a handle on all the new capabilities of HTML5 that relate to
    forms and make all this possible. Once we understand all the mechanics, we can
    get to work styling it up.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 令人振奋的消息是，所有这些用户界面元素，包括前面提到的滑块、占位文本和微调器，以及输入验证，都是由浏览器通过HTML5原生处理的，而无需JavaScript。现在，表单验证并不完全跨浏览器兼容，但我们很快就会解决这个问题。首先，让我们了解所有与表单相关的HTML5的新功能，以及使所有这些成为可能的机制。一旦我们了解了所有的机制，我们就可以开始着手进行样式设计。
- en: Understanding the component parts of HTML5 forms
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解HTML5表单的组成部分
- en: 'There''s a lot going on in our HTML5 powered form, so let''s break it down.
    The three sections of the form are each wrapped in a `fieldset` with a legend:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的HTML5动力表单中有很多内容，让我们来分解一下。表单的三个部分都包裹在一个带有标题的`fieldset`中：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see from the previous code snippet that each input element of the form
    is also wrapped in a `div` with a label associated with each input (we could have
    wrapped the input with the label element if we wanted to too). So far, so normal.
    However, within this first input we've just stumbled upon our first HTML5 form
    feature. After common attributes of ID, name, and type, we have `placeholder`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中可以看到，表单的每个输入元素也都包裹在一个带有与每个输入相关联的标签的`div`中（如果我们也想的话，我们也可以用标签元素包装输入）。到目前为止，一切都很正常。然而，在这个第一个输入中，我们刚刚遇到了我们的第一个HTML5表单功能。在常见的ID、名称和类型属性之后，我们有`placeholder`。
- en: placeholder
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 占位文本
- en: 'The `placeholder` attribute looks like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`placeholder`属性看起来是这样的：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Placeholder text within form fields is such a common requirement that the folks
    creating HTML5 decided it should be a standard feature of HTML. Simply include
    the `placeholder` attribute within your input and the value will be displayed
    by default until the field gains focus. When it loses focus, if a value has not
    been entered it will re-display the placeholder text.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表单字段内的占位文本是一个如此常见的需求，以至于创建HTML5的人们决定它应该成为HTML的一个标准特性。只需在输入中包含`placeholder`属性，该值将默认显示，直到字段获得焦点。当失去焦点时，如果没有输入值，它将重新显示占位文本。
- en: Styling the placeholder text
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样式化占位文本
- en: You can style the `placeholder` attribute with the `:placeholder-shown` pseudo
    selector. Be aware that this selector has been through a number of iterations
    so ensure you have the prefixer tool set up to provide the fallback selectors
    for already implemented versions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`:placeholder-shown`伪选择器样式化`placeholder`属性。请注意，此选择器经历了许多迭代，因此请确保您已设置前缀工具，以提供已实现版本的回退选择器。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After the `placeholder` attribute, in the previous code snippet, the next HTML5
    form feature is the `required` attribute.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码片段中的`placeholder`属性之后，下一个HTML5表单功能是`required`属性。
- en: required
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 必需的
- en: 'The `required` attribute looks like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`required`属性看起来像这样：'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In supporting HTML5 capable browsers, by adding the Boolean (meaning you simply
    include the attribute or not) attribute `required` within the `input` element,
    it indicates that a value is required. If the form is submitted without the field
    containing the requisite information, a warning message should be displayed. The
    message displayed is specific (both in content and styling) to both the browser
    and the input type used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持HTML5的浏览器中，通过在`input`元素内添加布尔值（意味着您只需包含属性或不包含属性），可以指示需要输入值的`required`属性。如果在不包含必要信息的字段提交表单，则应显示警告消息。显示的消息对于使用的浏览器和输入类型都是特定的（在内容和样式上）。
- en: 'We''ve already seen what the `required` field browser message looks like in
    Chrome. The following screenshot shows the same message in Firefox:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了`required`字段在Chrome中的浏览器消息是什么样子。以下截图显示了Firefox中相同的消息：
- en: '![required](img/B03777_09_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![必需的](img/B03777_09_03.jpg)'
- en: The `required` value can be used alongside many input types to ensure a value
    is entered. Notable exceptions are the `range`, `color`, `button`, and `hidden`
    input types as they almost always have a default value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`required`值可以与许多输入类型一起使用，以确保输入值。需要注意的例外是`range`、`color`、`button`和`hidden`输入类型，因为它们几乎总是具有默认值。'
- en: autofocus
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动聚焦
- en: 'The HTML5 `autofocus` attribute allows a form to have a field already focused,
    ready for user input. The following code is an example of an `input` field wrapped
    in a `div` with the `autofocus` attribute added at the end:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5的`autofocus`属性允许表单已经聚焦在一个字段上，准备好接受用户输入。以下代码是一个在`div`中添加了`autofocus`属性的`input`字段的示例：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Be careful when using this attribute. Cross browser confusion can reign if multiple
    fields have the `autofocus` attribute added. For example, if multiple fields have
    `autofocus` added, in Safari, the last field with the `autofocus` attributed is
    focused on page load. However, Firefox and Chrome do the opposite with the first
    `autofocus` field selected.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此属性时要小心。如果多个字段都添加了`autofocus`属性，则可能会在多个浏览器中引起混乱。例如，如果多个字段都添加了`autofocus`，在Safari中，具有`autofocus`属性的最后一个字段在页面加载时会聚焦。然而，Firefox和Chrome在第一个`autofocus`字段被选中时会做相反的操作。
- en: It's also worth considering that some users use the spacebar to quickly skip
    down the content of a web page once it's loaded. On a page where a form has an
    autofocused input field, it prevents this capability; instead it adds a space
    into the focused input field. It's easy to see how that could be a source of frustration
    for users.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得考虑的是，一些用户在加载网页后会使用空格键快速跳过内容。在一个具有自动聚焦输入字段的表单页面上，它会阻止这种功能；相反，它会在聚焦的输入字段中添加一个空格。很容易看出这可能会成为用户的挫折之源。
- en: If using the `autofocus` attribute, be certain it's only used once in a form
    and be sure you understand the implications for those who scroll with the spacebar.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`autofocus`属性，请确保它在表单中只使用一次，并确保您了解使用空格键滚动的用户的影响。
- en: autocomplete
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动完成
- en: 'By default, most browsers aid user input by auto-completing the value of form
    fields where possible. While the user can turn this preference on and off within
    the browser, we can now also indicate to the browser when we don''t want a form
    or field to allow auto-completion. This is useful not just for sensitive data
    (bank account numbers for example) but also if you want to ensure users pay attention
    and enter something by hand. For example, for many forms I complete, if a telephone
    number is required, I enter a ''spoof'' telephone number. I know I''m not the
    only one that does that (doesn''t everyone?) but I can ensure that users don''t
    enter an autocompleted spoof number by setting the `autocomplete` attribute to
    off on the relevant input field. The following is a code example of a field with
    the `autocomplete` attribute set to `off`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，大多数浏览器通过自动填充表单字段的值来帮助用户输入。虽然用户可以在浏览器中打开或关闭此偏好设置，但现在我们还可以指示浏览器在我们不希望表单或字段允许自动完成时。这不仅对于敏感数据（例如银行账号）有用，而且还可以确保用户注意并手动输入内容。例如，对于我填写的许多表单，如果需要电话号码，我会输入一个“欺骗”电话号码。我知道我不是唯一这样做的人（难道不是每个人都这样吗？），但我可以通过在相关输入字段上将`autocomplete`属性设置为关闭来确保用户不输入自动完成的欺骗号码。以下是一个将`autocomplete`属性设置为`off`的字段的代码示例：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also set entire forms (but not fieldsets) to not autocomplete by using
    the attribute on the form itself. The following is a code example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在表单本身上使用属性来设置整个表单（但不是字段集）不自动完成。以下是一个代码示例：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: List and the associated datalist element
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表和相关的datalist元素
- en: 'This `list` attribute and the associated `datalist` element allow a number
    of selections to be presented to a user once they start entering a value in the
    field. The following is a code example of the `list` attribute in use with an
    associated `datalist`, all wrapped in a `div`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此`list`属性和相关的`datalist`元素允许在用户开始输入字段中的值后向用户呈现多个选择。以下是一个使用`list`属性的代码示例，其中包含一个相关的`datalist`，全部包装在一个`div`中：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The value given in the `list` attribute (`awards`) refers to the ID of the `datalist`.
    Doing this associates the `datalist` with the input field. Although wrapping the
    options with a `<select>` element isn't strictly necessary, it helps when applying
    polyfills for browsers that haven't implemented the feature.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list`属性（`awards`）中给出的值是`datalist`的ID。这样做可以将`datalist`与输入字段关联起来。虽然在`<select>`元素中包装选项并不是严格必要的，但在为尚未实现该功能的浏览器应用polyfill时会有所帮助。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Amazingly, in mid-2015, the `datalist` element still isn't supported natively
    in iOS, Safari, or Android 4.4 and below ([http://caniuse.com/](http://caniuse.com/))
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，到2015年中期，iOS、Safari或Android 4.4及以下仍然不支持`datalist`元素（[http://caniuse.com/](http://caniuse.com/)）
- en: You can read the specification for `datalist` at [http://www.w3.org/TR/html5/forms.html](http://www.w3.org/TR/html5/forms.html).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.w3.org/TR/html5/forms.html](http://www.w3.org/TR/html5/forms.html)上阅读`datalist`的规范。
- en: 'While the `input` field seems to be just a normal text input field, when typing
    in the field, a selection box appears below it (in supporting browsers) with matching
    results from the `datalist`. In the following screenshot, we can see the list
    in action (Firefox). In this instance, as `B` is present in all options within
    the `datalist`, all the values are shown for the user to select from:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`input`字段似乎只是一个普通的文本输入字段，但在输入字段时，支持的浏览器下方会出现一个选择框，其中包含来自`datalist`的匹配结果。在下面的截图中，我们可以看到列表的效果（Firefox）。在这种情况下，由于`B`在`datalist`中的所有选项中都存在，所有值都会显示给用户选择：
- en: '![List and the associated datalist element](img/B03777_09_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![列表和相关的datalist元素](img/B03777_09_04.jpg)'
- en: 'However, when typing `D` instead, only the matching suggestions appear as shown
    in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当输入`D`时，只有匹配的建议会出现，如下面的截图所示：
- en: '![List and the associated datalist element](img/B03777_09_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![列表和相关的datalist元素](img/B03777_09_05.jpg)'
- en: The `list` and `datalist` don't prevent a user entering different text in the
    input box but they do provide another great way of adding common functionality
    and user enhancement through HTML5 markup alone.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`和`datalist`不会阻止用户在输入框中输入不同的文本，但它们确实提供了另一种通过HTML5标记添加常见功能和用户增强的好方法。'
- en: HTML5 input types
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5输入类型
- en: HTML5 adds a number of extra input types, which amongst other things, enable
    us to limit the data that users input without the need for extraneous JavaScript
    code. The most comforting thing about these new input types is that by default,
    where browsers don't support the feature, they degrade to a standard text input
    box. Furthermore, there are great polyfills available to bring older browsers
    up to speed, which we will look at shortly. In the meantime, let's look at these
    new HTML5 input types and the benefits they provide.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5添加了许多额外的输入类型，其中包括其他功能，使我们能够限制用户输入的数据，而无需额外的JavaScript代码。这些新输入类型最令人欣慰的是，默认情况下，如果浏览器不支持该功能，它们会退化为标准的文本输入框。此外，还有很多很好的polyfill可用于使旧版浏览器跟上步伐，我们很快会看到。与此同时，让我们来看看这些新的HTML5输入类型以及它们提供的好处。
- en: email
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: email
- en: 'You can set an input to the `email` type like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像这样将输入设置为`email`类型：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Supporting browsers will expect a user input that matches the syntax of an
    e-mail address. In the following code example `type="email"` is used alongside
    `required` and `placeholder`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的浏览器将期望用户输入与电子邮件地址的语法匹配。在下面的代码示例中，`type="email"`与`required`和`placeholder`一起使用：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When used in conjunction with required, submitting a non-conforming input will
    generate a warning message:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当与required一起使用时，提交不符合规范的输入将生成警告消息：
- en: '![email](img/B03777_09_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![email](img/B03777_09_06.jpg)'
- en: 'Furthermore, many touch screen devices (for example, Android, iPhone, and so
    on) change the input display based upon this input type. The following screenshot
    shows how an input `type="email"` screen looks on the iPad. Notice the `@` symbol
    for been added to the software keyboard for easy email address completion:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多触摸屏设备（例如Android、iPhone等）会根据此输入类型改变输入显示。下面的截图显示了iPad上`type="email"`的输入屏幕的外观。请注意，软键盘已添加`@`符号，以便轻松完成电子邮件地址：
- en: '![email](img/B03777_09_07.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![email](img/B03777_09_07.jpg)'
- en: number
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字
- en: 'You can set an input field to a type of number like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像这样将输入字段设置为数字类型：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A supporting browser expects a number to be entered here. Supporting browsers
    also provide what''s called **spinner controls**. These are tiny pieces of user
    interface that allow users to easily click up or down to alter the value input.
    The following is a code example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的浏览器期望在此输入数字。支持的浏览器还提供所谓的**微调控件**。这些是微小的用户界面元素，允许用户轻松点击上下来改变输入的值。以下是一个代码示例：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the following screenshot shows how it looks in a supporting browser (Chrome):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在支持的浏览器（Chrome）中的外观截图：
- en: '![number](img/B03777_09_08.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![number](img/B03777_09_08.jpg)'
- en: Implementation of what happens if you don't enter a number varies. For example,
    Chrome and Firefox do nothing until the form is submitted, at which point they
    pop up a warning above the field. Safari on the other hand, simply does nothing,
    and merely lets the form be submitted. Internet Explorer 11 simply empties the
    field as soon as focus leaves it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不输入数字，不同浏览器的实现方式也不同。例如，Chrome和Firefox在表单提交之前不会做任何操作，然后在字段上方弹出警告。另一方面，Safari什么也不做，只是让表单被提交。Internet
    Explorer 11在焦点离开字段时会清空字段。
- en: min and max ranges
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小和最大范围
- en: 'You''ll notice in the previous code example, we have also set a minimum and
    maximum allowed range, similar to the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，我们还设置了允许的最小和最大范围，类似于以下代码：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Numbers outside of this range (should) get special treatment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 超出此范围的数字（应该）会得到特殊处理。
- en: You probably won't be surprised to learn that browser implementation of `min`
    and `max` ranges is varied. For example, Internet Explorer 11, Chrome, and Firefox,
    display a warning while Safari does nothing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不会感到惊讶，浏览器对`min`和`max`范围的实现是各不相同的。例如，Internet Explorer 11、Chrome和Firefox会显示警告，而Safari则什么也不做。
- en: Changing the step increments
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改步进增量
- en: 'You can alter the step increments (granularity) for the spinner controls of
    various input types with the use of the `step` attribute. For example, to step
    10 units at a time:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`step`属性来改变各种输入类型的微调控件的步进增量（粒度）。例如，每次步进10个单位：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: url
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: url
- en: 'You can set an input field to expect a URL like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置输入字段期望输入URL，如下所示：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you might expect, the `url` input type is for URL values. Similar to the
    `tel` and `email` input types; it behaves almost identically to a standard text
    input. However, some browsers add specific information to the warning message
    provided when submitted with incorrect values. The following is a code example
    including the `placeholder` attribute:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，`url`输入类型用于URL值。与`tel`和`email`输入类型类似；它的行为几乎与标准文本输入完全相同。但是，一些浏览器在提交不正确的值时会向警告消息中添加特定信息。以下是包括`placeholder`属性的代码示例：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows what happens when an incorrectly entered URL
    field is submitted in Chrome:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在Chrome中提交不正确输入的URL字段时会发生什么：
- en: '![url](img/B03777_09_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![url](img/B03777_09_09.jpg)'
- en: 'Like `type="email"`, touch screen devices often amend the input display based
    upon this input type. The following screenshot shows how an input `type="url"`
    screen looks on the iPad:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与`type="email"`一样，触摸屏设备通常根据此输入类型修改输入显示。以下截图显示了iPad上`type="url"`屏幕的外观：
- en: '![url](img/B03777_09_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![url](img/B03777_09_10.jpg)'
- en: Notice the *.com* key? Because we've used a URL input type they are presented
    by the device for easy URL completion (on iOS, if you're not going to a .com site
    you can press and hold for a few other popular top level domains).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到*.com*键了吗？因为我们使用了URL输入类型，设备会为易于URL完成而呈现它们（在iOS上，如果您不是要去.com网站，您可以长按一下以获得其他几个流行的顶级域名）。
- en: tel
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tel
- en: 'Set an input field to expect a telephone number like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 设置输入字段以期望电话号码，如下所示：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s a more complete example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个更完整的示例：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Although, a number format is expected on many browsers, even modern evergreen
    ones such as Internet Explorer 11, Chrome, and Firefox, it merely behaves like
    a text input field. When an incorrect value is input, they fail to provide a suitable
    warning message when the field loses focus or on form submission.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在许多浏览器上期望数字格式，甚至是现代的evergreen浏览器，如Internet Explorer 11、Chrome和Firefox，它们仅仅表现得像文本输入字段。当输入不正确的值时，它们在字段失去焦点或表单提交时未能提供合适的警告消息。
- en: 'However, better news is that, like the `email` and `url` input types, touch
    screen devices often thoughtfully accommodate this kind of input with an amended
    input display for easy completion; here''s the `tel` input when accessed with
    an iPad (running iOS 8.2):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更好的消息是，与`email`和`url`输入类型一样，触摸屏设备通常会贴心地适应这种输入，通过修改输入显示来方便完成；这是在iPad上访问`tel`输入时的外观（运行iOS
    8.2）：
- en: '![tel](img/B03777_09_11.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![tel](img/B03777_09_11.jpg)'
- en: Notice the lack of alphabet characters in the keyboard area? This makes it much
    faster for users to enter a value in the correct format.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意键盘区域中缺少字母字符？这使用户更快地以正确格式输入值。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Quick tip**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速提示**'
- en: 'If the default blue color of telephone numbers in iOS Safari annoys you when
    you use a `tel` input, you can amend it with the following selector:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在iOS Safari中使用`tel`输入时默认的蓝色电话号码颜色让您感到不适，您可以使用以下选择器进行修改：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: search
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: search
- en: 'You can set an input as a search type like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将输入设置为搜索类型，如下所示：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `search` input type works like a standard text input. Here''s an example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`search`输入类型的工作方式类似于标准文本输入。以下是一个例子：'
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'However, software keyboards (such as those found on mobile devices) often provided
    a more tailored keyboard. Here''s the iOS 8.2 keyboard that appears when a `search`
    input type gets focus:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，软件键盘（如移动设备上的键盘）通常提供更贴心的键盘。这是当`search`输入类型获得焦点时出现的iOS 8.2键盘：
- en: '![search](img/B03777_09_12.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![search](img/B03777_09_12.jpg)'
- en: pattern
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pattern
- en: 'You can set an input to expect a certain pattern input like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置输入以期望某种模式输入，如下所示：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `pattern` attribute allows you to specify, via a regular expression, the
    syntax of data that should be allowed in a given input field.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`pattern`属性允许您通过正则表达式指定应在给定输入字段中允许的数据的语法。'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Learn about regular expressions**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**了解正则表达式**'
- en: 'If you''ve never encountered regular expressions before, I''d suggest starting
    here: [http://en.wikipedia.org/wiki/Regular_expressions](http://en.wikipedia.org/wiki/Regular_expressions)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未遇到过正则表达式，我建议从这里开始：[http://en.wikipedia.org/wiki/Regular_expressions](http://en.wikipedia.org/wiki/Regular_expressions)
- en: Regular expressions are used across many programming languages as a means of
    matching possible strings. While the format is intimidating at first, they are
    incredibly powerful and flexible. For example, you could build a regular expression
    to match a password format, or select a certain style CSS class naming pattern.
    To help build up your own regex pattern and get a visual understanding of how
    they work, I'd recommend starting with a browser based tool like [http://www.regexr.com/](http://www.regexr.com/).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式在许多编程语言中被用作匹配可能的字符串的手段。虽然一开始格式可能令人生畏，但它们非常强大和灵活。例如，您可以构建一个正则表达式来匹配密码格式，或选择某种样式的CSS类命名模式。为了帮助您构建自己的正则表达式模式并直观地了解它们的工作原理，我建议从像[http://www.regexr.com/](http://www.regexr.com/)这样的基于浏览器的工具开始。
- en: 'The following code is an example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个例子：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Such is my commitment to this book, I searched the Internet for approximately
    458 seconds to find a regular expression that would match a first and last name
    syntax. By entering the regular expression value within the `pattern` attribute,
    it makes supporting browsers expect a matching input syntax. Then, when used in
    conjunction with the `required` attribute, incorrect entries get the following
    treatment in supporting browsers. In this instance, I tried submitting the form
    without providing a last name.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这本书的承诺如此之深，我在互联网上搜索了大约458秒，找到了一个可以匹配名字和姓氏语法的正则表达式。通过在`pattern`属性中输入正则表达式值，支持的浏览器会期望匹配的输入语法。然后，当与`required`属性一起使用时，支持的浏览器会对不正确的输入进行以下处理。在这种情况下，我尝试在没有提供姓氏的情况下提交表单。
- en: Again, browsers do things differently. Internet Explorer 11 requests that the
    field is entered correctly, Safari, Firefox, and Chrome do nothing (they just
    behave like a standard text input).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，浏览器的行为不同。Internet Explorer 11要求正确输入字段，Safari、Firefox和Chrome什么也不做（它们只是像标准文本输入一样行为）。
- en: color
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色
- en: 'Want to set an input field to receive a hexadecimal color value? You can do
    this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 想要设置一个输入字段接收十六进制颜色值？您可以这样做：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `color` input type invokes a color picker in supporting browsers (currently
    just Chrome and Firefox), allowing users to select a color value in a hexadecimal
    value. The following code is an example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`color`输入类型在支持的浏览器中调用颜色选择器（目前仅限Chrome和Firefox），允许用户选择十六进制颜色值。以下代码是一个例子：'
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Date and time inputs
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间输入
- en: The thinking behind the new `date` and `time` input types is to provide a consistent
    user experience for choosing dates and times. If you've ever bought tickets to
    an event online, chances are that you have used a date picker of one sort or another.
    This functionality is almost always provided via JavaScript (typically jQuery
    UI library) but the hope is to make this common necessity possible merely with
    HTML5 markup.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`date`和`time`输入类型的思路是为选择日期和时间提供一致的用户体验。如果你曾经在网上购买活动门票，很可能使用过某种日期选择器。这种功能几乎总是通过JavaScript（通常是jQuery
    UI库）提供的，但希望能够仅通过HTML5标记实现这种常见需求。
- en: date
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期
- en: 'The following code is an example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个例子：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Similar to the `color` input type, native browser support is thin on the ground,
    defaulting on most browsers to a standard text input box. Chrome and Opera are
    the only two of the modern browsers to have implemented this functionality. That's
    not surprising as they both use the same engine (known as **Blink** in case you
    were interested).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 与`color`输入类型类似，原生浏览器支持非常有限，在大多数浏览器上默认为标准文本输入框。Chrome和Opera是唯一实现此功能的现代浏览器。这并不奇怪，因为它们都使用相同的引擎（如果您感兴趣，它被称为**Blink**）。
- en: '![date](img/B03777_09_13.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![日期](img/B03777_09_13.jpg)'
- en: There are a variety of different `date` and `time` related input types available.
    What follows is a brief overview of the others.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种不同的与`date`和`time`相关的输入类型可用。以下是其他类型的简要概述。
- en: month
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 月份
- en: 'The following code is an example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个例子：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The interface allows the user to select a single month and provides the input
    as a year and month for example 2012-06\. The following screenshot shows how it
    looks in the browser:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 该界面允许用户选择单个月份，并提供年份和月份的输入，例如2012-06。以下截图显示了它在浏览器中的外观：
- en: '![month](img/B03777_09_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![月份](img/B03777_09_13.jpg)'
- en: week
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 周
- en: 'The following code is an example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个例子：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When the `week` input type is used, the picker allows the user to select a single
    week within a year and provides the input in the 2012-W47 format.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`week`输入类型时，选择器允许用户在一年中选择单个星期，并以2012-W47格式提供输入。
- en: 'The following screenshot shows how it looks in the browser:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了它在浏览器中的外观：
- en: '![week](img/B03777_09_14.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![周](img/B03777_09_14.jpg)'
- en: time
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间
- en: 'The following code is an example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个例子：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `time` input type allows a value in the 24-hour format, for example 23:50.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`time`输入类型允许使用24小时制的值，例如23:50。'
- en: It displays in supporting browsers with spinner controls but only allows relevant
    time values.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 它在支持的浏览器中显示为微调控件，但仅允许相关的时间值。
- en: range
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围
- en: 'The `range` input type creates a slider interface element. Here''s an example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`range`输入类型创建了一个滑块界面元素。以下是一个例子：'
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And the following screenshot shows how it looks in Firefox:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了它在Firefox中的外观：
- en: '![range](img/B03777_09_15.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![范围](img/B03777_09_15.jpg)'
- en: The default range is from 0 to 100\. However, by specifying a `min` and `max`
    value in our example we have limited it to between 1 and 10.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 默认范围是从0到100。但是，在我们的示例中指定了`min`和`max`值，将其限制在1到10之间。
- en: 'One big problem I''ve encountered with the `range` input type is that the current
    value is never displayed to the user. Although the range slider is only intended
    for vague number selections, I''ve often wanted to display the value as it changes.
    Currently, there is no way to do this using HTML5\. However, if you absolutely
    must display the current value of the slider, it can be achieved easily with some
    simple JavaScript. Amend the previous example to the following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我在使用`range`输入类型时遇到的一个大问题是，当前值从不显示给用户。尽管范围滑块仅用于模糊的数字选择，但我经常希望在值发生变化时显示值。目前，使用HTML5没有办法做到这一点。但是，如果您绝对必须显示滑块的当前值，可以通过一些简单的JavaScript轻松实现。将前面的示例修改为以下代码：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We''ve added two things, an `onchange` attribute and also a `span` element
    with the ID of range. Now, we''ll add the following tiny piece of JavaScript:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了两个东西，一个是`onchange`属性，另一个是ID为range的`span`元素。现在，我们将添加以下简短的JavaScript代码：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: All this does is get the current value of the range slider and display it in
    the element with an ID of range (our `span` tag). You can then use whatever CSS
    you deem appropriate to change the appearance of the value.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是获取范围滑块的当前值，并在具有ID为range的元素中显示它（我们的`span`标记）。然后，您可以使用任何您认为合适的CSS来更改值的外观。
- en: There are a few other form related features that are new in HTML5\. You can
    read the full specification at [http://www.w3.org/TR/html5/forms.html](http://www.w3.org/TR/html5/forms.html).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5中还有一些其他与表单相关的新功能。您可以在[http://www.w3.org/TR/html5/forms.html](http://www.w3.org/TR/html5/forms.html)阅读完整规范。
- en: How to polyfill non-supporting browsers
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何为不支持的浏览器提供polyfill
- en: 'All this HTML5 form malarkey is all well and good. There seems however, to
    be two things that put a serious dent in our ability to use them: disparity between
    how supporting browsers implement the features, and how to deal with browsers
    that don''t support the features at all.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些HTML5表单的花哨都很好。然而，似乎有两件事严重影响了我们使用它们的能力：支持浏览器实现功能的差异，以及如何处理根本不支持这些功能的浏览器。
- en: If you need to support some of these features in older or non-supporting browsers
    then consider Webshims Lib, which you can download at [http://afarkas.github.com/webshim/demos/](http://afarkas.github.com/webshim/demos/).
    It is a polyfill library written by Alexander Farkas that can load form polyfills
    to make non-supporting browsers handle HTML5 based form features.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在较旧或不支持的浏览器中支持某些功能，请考虑使用Webshims Lib，您可以在[http://afarkas.github.com/webshim/demos/](http://afarkas.github.com/webshim/demos/)下载。这是由Alexander
    Farkas编写的一个polyfill库，可以加载表单polyfills以使不支持HTML5表单功能的浏览器处理。
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Exercise caution with polyfills**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**小心使用polyfills**'
- en: Whenever you reach for a polyfill script remember to consider carefully. While
    they can be very handy, they add weight to your project. For example, Webshims
    also requires jQuery so there's yet another dependency needed if you weren't using
    jQuery before. Unless polyfilling older browsers is essential, I steer clear.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您使用polyfill脚本时，请务必仔细考虑。虽然它们非常方便，但会增加项目的负担。例如，Webshims还需要jQuery，因此如果您以前没有使用jQuery，则需要另一个依赖项。除非在较旧的浏览器中使用polyfill是必不可少的，否则我会避免使用。
- en: The handy thing about Webshims is that it only adds polyfills as needed. If
    being viewed by a browser that supports these HTML5 features natively it adds
    very little. Older browsers, although they need to load more code (as they are
    less capable by default), get a similar user experience, albeit with the relevant
    functionality created with the help of JavaScript.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Webshims的方便之处在于它只在需要时添加polyfills。如果被支持这些HTML5功能的浏览器查看，它几乎不会添加任何内容。老旧的浏览器虽然需要加载更多代码（因为它们默认情况下功能较弱），但用户体验类似，尽管相关功能是通过JavaScript创建的。
- en: 'But it isn''t just older browsers that benefit. As we''ve seen, many modern
    browsers haven''t implemented the HTML5 form features fully. Employing Webshims
    lib to the page also fills any gaps in their capability. For example, Safari doesn''t
    offer any warning when a HTML5 form is submitted with required fields empty. No
    feedback is given to the user as to what the problem is: hardly ideal. With Webshims
    lib added to the page, the following happens in the aforementioned scenario.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 但受益的不仅仅是较旧的浏览器。正如我们所见，许多现代浏览器并没有完全实现HTML5表单功能。将Webshims lib应用到页面上也可以填补它们功能上的任何空白。例如，Safari在提交带有必填字段为空的HTML5表单时不提供任何警告。用户不会得到有关问题的任何反馈：这几乎不理想。将Webshims
    lib添加到页面后，在上述情况下会发生以下情况。
- en: So when Firefox isn't able to provide a spinner for a `type="number"` attribute,
    Webshims lib provides a suitable, jQuery powered, fallback. In short, it's a great
    tool, so let's get this beautiful little package installed and hooked up and then
    we can carry on writing forms with HTML5, safe in the knowledge that all users
    will see what they need to use our form (except those two people using IE6 with
    JavaScript turned off—you know who you are—now pack it in!).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当Firefox无法为`type="number"`属性提供微调器时，Webshims lib提供了一个合适的、由jQuery支持的替代方案。简而言之，这是一个很棒的工具，所以让我们安装并连接这个美丽的小包，然后我们可以继续使用HTML5编写表单，放心地知道所有用户都将看到他们需要使用我们的表单（除了那两个使用IE6并关闭了JavaScript的人——你们知道自己是谁——现在停止吧！）。
- en: First download Webshims lib ([http://github.com/aFarkas/webshim/downloads](http://github.com/aFarkas/webshim/downloads))
    and extract the package. Now copy the `js-webshim` folder to a relevant section
    of your web page. For simplicity, for this example I've copied it into the website
    root.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 首先下载Webshims lib（[http://github.com/aFarkas/webshim/downloads](http://github.com/aFarkas/webshim/downloads)）并提取包。现在将`js-webshim`文件夹复制到网页的相关部分。为了简单起见，我将其复制到了网站根目录。
- en: 'Now add the following code into the section of your page:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到页面的相应部分：
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s go through this a section at a time. Firstly, we link to a local copy
    of the jQuery library (get the latest version at [www.jquery.com](http://www.jquery.com))
    and the Webshim script:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步来。首先，我们链接到本地的jQuery库（在[www.jquery.com](http://www.jquery.com)获取最新版本）和Webshim脚本：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, I''m telling the script to load all needed polyfills:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我告诉脚本加载所有需要的polyfills：
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: And that's all there is to it. Now, missing functionality is automatically added
    by the relevant polyfill. Excellent!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在，相关的polyfill会自动添加缺失的功能。太棒了！
- en: Styling HTML5 forms with CSS3
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用CSS3样式化HTML5表单
- en: Our form is now fully functional across browsers so now we need to make it a
    little more appealing across different viewport sizes. Now, I don't consider myself
    a designer, but by applying some of the techniques we've learned throughout the
    previous chapters, I still think we can improve the aesthetics of our form.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单现在在各种浏览器上都可以正常使用，现在我们需要使其在不同的视口尺寸下更具吸引力。现在，我不认为自己是一个设计师，但通过应用我们在前几章学到的一些技巧，我仍然认为我们可以改善表单的美观度。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can view the styled form at `example_09-02`, and remember, if you don't
    already have the example code, you can grab it at [http://rwd.education](http://rwd.education).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`example_09-02`中查看样式化的表单，并且请记住，如果您还没有示例代码，可以在[http://rwd.education](http://rwd.education)获取它。
- en: 'In this example, I''ve also included two versions of the style sheet: `styles.css`
    is the version that includes vendor prefixes (added via Autoprefixer) and `styles-unprefixed.css`
    is the CSS as written. The latter is probably easier to look at if you want to
    see how anything is being applied.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我还包括了两个版本的样式表：`styles.css`是包含供应商前缀的版本（通过Autoprefixer添加），`styles-unprefixed.css`是原始的CSS。如果您想查看如何应用任何内容，后者可能更容易查看。
- en: 'Here''s how the form looks in a small viewport with some basic styling applied:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在小视口中应用了一些基本样式后，表单的外观如下：
- en: '![Styling HTML5 forms with CSS3](img/B03777_09_18.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![用CSS3样式化HTML5表单](img/B03777_09_18.jpg)'
- en: 'And here it is at a larger viewport:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在较大的视口中是这样的：
- en: '![Styling HTML5 forms with CSS3](img/B03777_09_17.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![用CSS3样式化HTML5表单](img/B03777_09_17.jpg)'
- en: If you look at the CSS you'll see many of the techniques we've looked at throughout
    previous chapters applied. For example, Flexbox ([Chapter 3](ch03.html "Chapter 3. Fluid
    Layouts and Responsive Images"), *Fluid Layouts and Responsive Images*) has been
    used to create uniform spacing and flexibility for elements; transforms and transitions
    ([Chapter 8](ch08.html "Chapter 8. Transitions, Transformations, and Animations"),
    *Transitions, Transformations, and Animations*) so that the focused input fields
    grow and the ready/submit button flips vertically when it gains focus. Box-shadows
    and gradients ([Chapter 6](ch06.html "Chapter 6. Stunning Aesthetics with CSS3"),
    *Stunning Aesthetics with CSS3*) are used to emphasize different areas of the
    form. Media queries ([Chapter 2](ch02.html "Chapter 2. Media Queries – Supporting
    Differing Viewports"), *Media Queries – Supporting Differing Viewports*) are being
    used to switch the Flexbox direction for different viewport sizes and CSS Level
    3 selectors ([Chapter 5](ch05.html "Chapter 5. CSS3 – Selectors, Typography, Color
    Modes, and New Features"), *CSS3 – Selectors, Typography, Color Modes, and New
    Features*) are being used for selector negation.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下CSS，你会看到我们在之前的章节中学到的许多技巧。例如，Flexbox（[第3章](ch03.html "第3章.流动布局和响应式图片")，*流动布局和响应式图片*）已被用于创建元素的统一间距和灵活性；变换和过渡（[第8章](ch08.html
    "第8章.过渡、变换和动画")，*过渡、变换和动画*）使得焦点输入字段增大，准备/提交按钮在获得焦点时垂直翻转。盒阴影和渐变（[第6章](ch06.html
    "第6章.CSS3的惊人美学")，*CSS3的惊人美学*）被用来强调表单的不同区域。媒体查询（[第2章](ch02.html "第2章.媒体查询-支持不同的视口")，*媒体查询-支持不同的视口*）被用于在不同的视口尺寸下切换Flexbox方向，CSS
    Level 3选择器（[第5章](ch05.html "第5章.CSS3-选择器、排版、颜色模式和新特性")，*CSS3-选择器、排版、颜色模式和新特性*）被用于选择器否定。
- en: We won't go over those techniques in detail here again. Instead, we will focus
    on a couple of peculiarities. Firstly, how to visually indicate required fields
    (and for bonus points indicate a value has been entered) and secondly, how to
    create a 'fill' effect when a field gets user focus.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会再详细介绍这些技术。相反，我们将专注于一些特殊之处。首先，如何在视觉上指示必填字段（并且额外加分指示已输入值），其次，如何在字段获得用户焦点时创建“填充”效果。
- en: Indicating required fields
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指示必填字段
- en: 'We can indicate required input fields to a user using CSS alone. For example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以仅使用CSS向用户指示必填输入字段。例如：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'With that selector we could add a border or outline to the required fields
    or add a `background-image` inside the field. Basically the sky''s the limit!
    We could also use a specific selector to target an input field that is required,
    only when it gains focus. For example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过该选择器，我们可以为必填字段添加边框或轮廓，或在字段内部添加`background-image`。基本上没有限制！我们还可以使用特定的选择器来仅在输入字段获得焦点时，针对必填的输入字段进行定位。例如：
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: However, that would apply styles to the input box itself. What if we want to
    amend styles on the associated `label` element? I've decided I'd like to indicate
    required fields with a little asterisk symbol to the side of the label. But this
    presents a problem. Generally, CSS only lets us affect a change on elements if
    they are children of an element, the element itself, or a general or adjacent
    sibling of an element that receives 'state' (when I say state I'm talking about
    `hover`, `focus`, `active`, `checked`, and so on). In the following examples I'm
    using `:hover` but that would obviously be problematic for touch based devices.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这将会应用样式到输入框本身。如果我们想要修改相关的`label`元素上的样式怎么办？我决定我想在标签旁边用一个小星号符号来表示必填字段。但这带来了一个问题。通常，CSS只允许我们在元素的子元素、元素本身或者元素的一般或相邻兄弟元素上进行更改（当我说状态时，我指的是`hover`、`focus`、`active`、`checked`等）。在下面的例子中，我使用了`:hover`，但这对基于触摸的设备显然是有问题的。
- en: '[PRE37]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: With the preceding selector, styles are applied to `item-child` when item is
    hovered over.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的选择器，当悬停在项目上时，样式将应用到`item-child`。
- en: '[PRE38]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: With this selector, when the item is hovered over, styles are applied to `item-general-sibling`
    if it is at the same DOM level as item and follows it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个选择器，当悬停在项目上时，样式将应用到`item-general-sibling`，如果它与项目在同一DOM级别，并跟随在其后。
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here, when the item is hovered over, styles are applied to `item-adjacent-sibling`
    if it is the adjacent sibling element of item (straight after it in the DOM).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当悬停在项目上时，样式将应用到`item-adjacent-sibling`，如果它是项目的相邻兄弟元素（在DOM中紧跟在它后面）。
- en: 'So, back to our issue. If we have a form with labels and fields like this,
    with the label above the input (to give us the requisite basic layout), it leaves
    us a little stuck:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，回到我们的问题。如果我们有一个带有标签和字段的表单，标签在输入框上方（以便给我们所需的基本布局），这让我们有点困扰：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In this situation, using just CSS, there is no way to change the style of the
    label based upon whether the input is required or not (as it comes after the label
    in the markup). We could switch the order of those two elements in the markup
    but then we would end up with the label underneath the input.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，仅使用CSS，没有办法根据输入是否必填来更改标签的样式（因为它在标记中位于标签之后）。我们可以在标记中切换这两个元素的顺序，但那样我们会得到标签在输入框下面的结果。
- en: 'However, Flexbox gives us the ability to visually reverse the order of elements
    (read all about that in [Chapter 3](ch03.html "Chapter 3. Fluid Layouts and Responsive
    Images"), *Fluid Layouts and Responsive Images*, if you haven''t already) with
    ease. That allows us to use this markup:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Flexbox让我们能够轻松地在元素的视觉顺序上进行反转（如果你还没有阅读过，请在[第3章](ch03.html "第3章.流动布局和响应式图片")中了解更多相关内容，*流动布局和响应式图片*）。这使我们可以使用以下标记：
- en: '[PRE41]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And then simply apply `flex-direction: row-reverse` or `flex-direction: column-reverse`
    to the parent. These declarations reverse the visual order of their child elements,
    allowing the desired aesthetic of the label above (smaller viewports), or to the
    left (larger viewports) of the input. Now we can get on with actually providing
    some indication of required fields and when they have received input.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '然后只需将`flex-direction: row-reverse`或`flex-direction: column-reverse`应用于父元素。这些声明可以颠倒子元素的视觉顺序，使标签在输入框上方（较小的视口）或左侧（较大的视口）显示所需的美学效果。现在我们可以开始实际提供一些必填字段的指示以及它们何时接收到输入。'
- en: Thanks to our revised markup, the adjacent sibling selector now makes this possible.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们修改过的标记，相邻兄弟选择器现在使这成为可能。
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This selector essentially says, for every label that follows an input with
    a `required` attribute, apply the enclosed rules. Here is the CSS for that section:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器基本上是说，对于跟随具有`required`属性的输入的每个标签，应用封闭的规则。以下是该部分的CSS：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Then, if you focus on a required input and enter a relevant value, the asterisk
    changes color to green. It's a subtle but helpful touch.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果你专注于必填输入并输入相关值，星号的颜色会变成绿色。这是一个细微但有用的触摸。
- en: Note
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are more selectors (both implemented and being specified) alongside all
    the ones we have already looked at. For the most up to date list, take a look
    at the latest editors draft of the Selectors Level 4 specification: [http://dev.w3.org/csswg/selectors-4/](http://dev.w3.org/csswg/selectors-4/)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已经看过的所有选择器之外，还有更多的选择器（已实现和正在指定）。要获取最新的列表，请查看Selectors Level 4规范的最新编辑草案：[http://dev.w3.org/csswg/selectors-4/](http://dev.w3.org/csswg/selectors-4/)
- en: Creating a background fill effect
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建背景填充效果
- en: Back in [Chapter 6](ch06.html "Chapter 6. Stunning Aesthetics with CSS3"), *Stunning
    Aesthetics with CSS3*, we learned how to generate linear and radial gradients
    as background-images. Sadly, it isn't possible to transition between two background-images
    (which makes sense as the browser effectively rasterizes the declaration into
    an image). However, we can transition between values of associated properties
    like `background-position` and `background-size`. We'll use this factor to create
    a fill effect when an `input` or `textarea` receives focus.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。使用CSS3创建令人惊叹的美学")中，*使用CSS3创建令人惊叹的美学*，我们学习了如何生成线性和径向渐变作为背景图像。遗憾的是，无法在两个背景图像之间进行过渡（这是有道理的，因为浏览器实际上将声明光栅化为图像）。但是，我们可以在关联属性的值之间进行过渡，例如`background-position`和`background-size`。我们将利用这一因素，在`input`或`textarea`获得焦点时创建填充效果。
- en: 'Here are the properties and values added to the input:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是添加到输入的属性和值：
- en: '[PRE44]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the first rule, a solid white radial gradient is being generated but positioned
    offset out of view. The background color that sits behind (the HEX value after
    the `radial-gradient`) is not offset and so provides a default color. When the
    input gains focus, the background position on the `radial-gradient` is set back
    to the default and because we have a transition on the background-image set, we
    get a nice transition between the two. The result being the appearance that the
    input is 'filled' with a different color when it gains focus.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个规则中，正在生成一个实心白色径向渐变，但位置偏移不在视图之外。`radial-gradient`之后的HEX值是背后的背景颜色，因此提供了默认颜色。当输入获得焦点时，`radial-gradient`的背景位置被设置回默认值，因为我们在设置了背景图像的过渡，所以我们得到了两者之间的漂亮过渡。结果是当输入获得焦点时，出现输入被不同颜色“填充”的外观。
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Different browsers each have their own proprietary selectors and capabilities
    when it comes to styling parts of the native UI. For a handy list of lots of the
    specific selectors, Aurelius Wendelken compiled an impressive list. I made my
    own copy of it (or 'fork' in Git version control speak) for prosperity, which
    you can find at [https://gist.github.com/benfrain/403d3d3a8e2b6198e395](https://gist.github.com/benfrain/403d3d3a8e2b6198e395)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的浏览器在样式化本机UI的部分时都有自己的专有选择器和功能。Aurelius Wendelken编制了一个令人印象深刻的选择器列表。我制作了自己的副本（或者在Git版本控制中称为“分支”），你可以在[https://gist.github.com/benfrain/403d3d3a8e2b6198e395](https://gist.github.com/benfrain/403d3d3a8e2b6198e395)找到。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to use a host of new HTML5 form attributes.
    They enable us to make forms more usable than ever before and the data they capture
    more relevant. Furthermore, we can future-proof this new markup when needed with
    JavaScript polyfill scripts so that all users experience similar form features,
    regardless of the capability of their browser.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用一系列新的HTML5表单属性。它们使我们能够使表单比以往任何时候都更易于使用，并且捕获的数据更相关。此外，我们可以在需要时使用JavaScript
    polyfill脚本来未来化这个新的标记，以便所有用户无论其浏览器的能力如何，都能体验相似的表单功能。
- en: We're nearing the end of our responsive HTML5 and CSS3 journey. While we have
    covered an enormous amount in our time together, I'm conscious I'll never manage
    to impart all the information for every eventuality you'll encounter. Therefore,
    in the last chapter I'd like to take a higher level look at approaching a responsive
    web design and try and relate some solid best practices for getting your next/first
    responsive project off on the right footing.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束我们的响应式HTML5和CSS3之旅。虽然我们在一起的时间里涵盖了大量内容，但我意识到我永远无法传授你们遇到的每种情况的所有信息。因此，在最后一章中，我想以更高层次的方式来看待响应式网页设计，并尝试提供一些确切的最佳实践，以便让你的下一个/第一个响应式项目有一个良好的开端。
