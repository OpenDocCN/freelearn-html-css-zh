- en: Chapter 10. Approaching a Responsive Web Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。接近响应式网页设计
- en: In my favorite stories and films, there's usually a scene where a mentor passes
    on valuable advice and some magical items to the hero. You know those items will
    prove useful; you just don't know when or how.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我最喜欢的故事和电影中，通常会有一幕导师传授宝贵建议和一些神奇物品给英雄。你知道这些物品会很有用；只是不知道何时或如何使用。
- en: Well, I'd like to assume the role of the mentor in this final chapter (plus
    my hair has waned, and I don't have the looks for the hero role). I would like
    you, my fine apprentice, to spare me just a few more moments of your time while
    I offer up some final words of advice before you set forth on your responsive
    quest.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我想在最后一章中扮演导师的角色（再加上我的头发已经变少，我也没有英雄的外表）。我希望你，我的优秀学徒，在你踏上响应式之旅之前，能再给我一点时间，让我在你出发之前提供一些最后的建议。
- en: 'This chapter will be half philosophical musings and guidance, and half grab-bag
    of unrelated tips and techniques. I hope at some point in your responsive adventures,
    these tips will prove useful. Here''s what we''ll cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将是一半哲学思考和指导，一半无关的技巧和技术。我希望在你的响应式冒险中，这些技巧会在某个时候证明有用。以下是我们将要涵盖的内容：
- en: Getting designs in the browser and on real devices as soon as possible
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽快在浏览器和真实设备上获取设计
- en: Letting the design dictate the breakpoints
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让设计决定断点
- en: Embracing progressive enhancement
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥抱渐进增强
- en: Defining a browser support matrix
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义浏览器支持矩阵
- en: Progressive enhancement in practice
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐进增强的实践
- en: Linking CSS breakpoints to JavaScript
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS断点链接到JavaScript
- en: Avoiding CSS frameworks in production
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在生产中使用CSS框架
- en: Developing pragmatic solutions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发务实的解决方案
- en: Writing the simplest possible code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写尽可能简单的代码
- en: Hiding, showing, and loading content across viewports
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视口之间隐藏、显示和加载内容
- en: Letting CSS do the (visual) heavy lifting
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让CSS承担（视觉）重任
- en: Using validators and linting tools
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用验证器和linting工具
- en: Analyzing and testing web page performance ([webpagetest.org](http://webpagetest.org))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析和测试网页性能（[webpagetest.org](http://webpagetest.org)）
- en: Embracing faster and more effective techniques
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用更快更有效的技术
- en: Keeping an eye out for the next 'big' things
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 留意下一个“大”事物
- en: Get designs in the browser as soon as possible
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尽快在浏览器中获取设计
- en: 'The more responsive design work I have done, the more important I have found
    it to get designs up and running in a browser environment as soon as possible.
    If you are a designer as well as a developer, that simplifies matters. As soon
    as you have enough of a feel, visually, for what you need, you can get it prototyped
    in a browser and develop the idea further in a browser environment. This approach
    can be embraced more fully by letting go of high-fidelity full-page mock-ups altogether.
    Instead, consider things like Style Tiles—positioned between a moodboard and full
    mockup. The introduction to Style Tiles ([http://styletil.es/](http://styletil.es/))
    describes them as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我做的响应式设计工作越多，我发现尽快在浏览器环境中启动和运行设计变得越来越重要。如果你既是设计师又是开发人员，那就简化了事情。一旦你对自己需要什么有了足够的视觉感觉，你就可以在浏览器中创建原型，并在浏览器环境中进一步发展这个想法。通过完全放弃高保真度的全页面模拟，可以更全面地采用这种方法。相反，考虑一些像样式瓷砖这样的东西——介于心情板和完整模拟之间。样式瓷砖的介绍（[http://styletil.es/](http://styletil.es/)）将它们描述为：
- en: '*"Style Tiles are a design deliverable consisting of fonts, colors and interface
    elements that communicate the essence of a visual brand for the web."*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “样式瓷砖是一种设计成果，包括字体、颜色和界面元素，用于传达网页视觉品牌的本质。”
- en: I've found graphical deliverables of this nature can be useful for presenting
    and communicating look and feel between stakeholders without resorting to the
    endless rounds of composites.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现这种图形成果可以用于在利益相关者之间呈现和传达外观和感觉，而不必诉诸无休止的合成。
- en: Let the design dictate the breakpoints
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让设计决定断点
- en: I'd like to reiterate a point made in previous chapters. Let the design define
    where breakpoints should be set. With a design in the browser, it makes this process
    far easier. You should always start amending the design from the smallest screen
    sizes upwards, so as the viewport size increases, you can see how far your design
    works before you need to introduce a breakpoint.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我想重申前几章提到的一点。让设计定义断点应该设置在哪里。有了浏览器中的设计，这个过程会变得更容易。你应该始终从最小的屏幕尺寸开始修改设计，然后随着视口尺寸的增加，你可以看到在需要引入断点之前设计能够工作到什么程度。
- en: 'You''ll also find that coding the design will be easier this way. Write the
    CSS for the smallest viewport first and then add any changes to different elements
    within media queries afterwards. For example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会发现以这种方式编写设计会更容易。首先为最小的视口编写CSS，然后在媒体查询中添加对不同元素的任何更改。例如：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: View and use the design on real devices
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在真实设备上查看并使用设计
- en: If you can, start to build up a 'device lab' of older devices (phones/tablets)
    to view your work on. Having a number of varied devices is hugely beneficial.
    Not only does it let you feel how a design actually works across different devices,
    it also exposes layout/rendering peculiarities earlier in the process. After all,
    no one enjoys believing they have finished on a project to be told it doesn't
    work properly in a certain environment. Test early, test often! It need not cost
    the earth. For example, you can pick up older phone and tablet models on eBay,
    or buy them from friends/relatives as they upgrade.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以的话，开始建立一个旧设备（手机/平板电脑）的“设备实验室”来查看你的工作。拥有多种不同的设备非常有益。它不仅可以让你感受设计在不同设备上的实际效果，还可以在过程的早期暴露布局/渲染的特殊性。毕竟，没有人喜欢相信他们在某个环境中完成了项目，结果被告知它在那里无法正常工作。早期测试，经常测试！这并不需要花费很多钱。例如，你可以在eBay上购买旧手机和平板电脑，或者从朋友/亲戚那里购买，因为他们在升级时会卖掉旧设备。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Use tools such as BrowserSync to synchronize your work**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用诸如BrowserSync之类的工具来同步你的工作**'
- en: 'One of the biggest time-saving tools I''ve used lately is **BrowserSync**.
    Once configured, as you save your work, any changes to things like CSS are injected
    into the browser without you needing to constantly refresh your screen. If that
    wasn''t good enough, any other browser windows on devices you have on the same
    WiFi refresh too. This saves having to pick up each of your testing devices and
    clicking refresh with each change. It even synchronizes scrolling and clicks too.
    Highly recommended: [http://browsersync.io/](http://browsersync.io/)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我使用的最大的省时工具之一是**BrowserSync**。一旦配置好，当你保存你的工作时，诸如CSS之类的任何更改都会被注入到浏览器中，而你无需不断地刷新屏幕。如果这还不够好，你在同一WiFi上的其他设备上的任何其他浏览器窗口也会刷新。这样就不用每次更改都要拿起每个测试设备并点击刷新了。它甚至还同步滚动和点击。强烈推荐：[http://browsersync.io/](http://browsersync.io/)
- en: Embracing progressive enhancement
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥抱渐进增强
- en: In previous chapters, we have considered briefly the notion of progressive enhancement.
    It's an approach to development that I have found so useful in practice I think
    it bears repeating. The fundamental idea with progressive enhancement is that
    you begin all your front-end code (HTML, CSS, JavaScript) with the lowest common
    denominator in mind. Then, you progressively enhance the code for more capable
    devices and browsers. That may seem simplistic and it is, but if you are used
    to working the other way around; designing the optimum experience and then figuring
    out a way of making that thing work on lesser devices/browsers, you'll find progressive
    enhancement an easier approach.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们简要考虑了渐进增强的概念。这是一种我在实践中发现非常有用的开发方法，我认为值得重复。渐进增强的基本思想是，你从最低公共分母开始考虑所有你的前端代码（HTML、CSS、JavaScript）。然后，你逐渐增强代码以适应更有能力的设备和浏览器。这可能看起来很简单，而且确实如此，但如果你习惯了以相反的方式工作；设计最佳体验，然后想出一种方法使那个东西在较差的设备/浏览器上运行，你会发现渐进增强是一种更容易的方法。
- en: Imagine a low powered, poorly featured device. No JavaScript, no Flexbox support,
    no CSS3/CSS4 support. In that instance what can you do to provide a usable experience?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下一台性能低下、功能差的设备。没有JavaScript，没有Flexbox支持，没有CSS3/CSS4支持。在这种情况下，你能做些什么来提供可用的体验？
- en: Most importantly, you should write meaningful HTML5 markup that accurately describes
    the content. This is an easier task if you're building text and content-based
    websites. In that instance, concentrate on using elements such as `main`, `header`,
    `footer`, `article`, `section`, and `aside` correctly. Not only will it help you
    discern different sections of your code, it will also provide greater accessibility
    for your users at no extra cost.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，你应该编写有意义的HTML5标记，准确描述内容。如果你正在构建基于文本和内容的网站，这将是一项更容易的任务。在这种情况下，专注于正确使用`main`、`header`、`footer`、`article`、`section`和`aside`等元素。这不仅有助于你区分代码的不同部分，还将为你的用户提供更大的无障碍性，而且没有额外的成本。
- en: If you're building something like a web-based application or visual UI components
    (carousels, tabs, accordions, and the like) you'll need to think about how to
    distil the visual pattern down into accessible markup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建类似基于Web的应用程序或视觉UI组件（轮播、选项卡、手风琴等），你需要考虑如何将视觉模式提炼成可访问的标记。
- en: The reason good markup is so crucial is that it provides a base level experience
    for all users. The more you can achieve with HTML, the less you have to do in
    CSS and JavaScript to support older browsers. And nobody, and I really mean nobody,
    likes writing the code to support older browsers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 良好标记的原因是它为所有用户提供了基本水平的体验。你在HTML中能实现的越多，你就越不需要在CSS和JavaScript中为了支持旧浏览器而做更多的工作。而且没有人，我真的是指没有人，喜欢编写支持旧浏览器的代码。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For further reading and great practical examples on the subject, I would recommend
    the following two articles. They provide great insight into how fairly complex
    interactions can be handled with the constructs of HTML and CSS:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题的更多阅读和实用示例，我推荐以下两篇文章。它们提供了关于如何使用HTML和CSS的结构处理相当复杂的交互的深刻见解：
- en: '[http://www.cssmojo.com/how-to-style-a-carousel/](http://www.cssmojo.com/how-to-style-a-carousel/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.cssmojo.com/how-to-style-a-carousel/](http://www.cssmojo.com/how-to-style-a-carousel/)'
- en: '[http://www.cssmojo.com/use-radio-buttons-for-single-option/](http://www.cssmojo.com/use-radio-buttons-for-single-option/)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.cssmojo.com/use-radio-buttons-for-single-option/](http://www.cssmojo.com/use-radio-buttons-for-single-option/)'
- en: It's by no means a simple feat to start thinking in this manner. It is however,
    an approach that is likely to serve you well in your quest to do as little as
    possible to support ailing browsers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式开始思考绝不是一件简单的事情。然而，这种方法很可能会在你努力尽量少地支持不佳的浏览器时为你提供帮助。
- en: Now, about those browsers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，谈谈那些浏览器。
- en: Defining a browser support matrix
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义浏览器支持矩阵
- en: Knowing the browsers and devices a web project needs to support up front can
    be crucial to developing a successful responsive web design. We've already considered
    why progressive enhancement is so useful in this respect; if done correctly, it
    means that the vast majority of your site will be functional on even the oldest
    browsers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 提前了解一个Web项目需要支持的浏览器和设备可能对开发成功的响应式Web设计至关重要。我们已经考虑过为什么渐进增强在这方面如此有用；如果做得正确，这意味着你的网站的绝大部分甚至在最老的浏览器上也是功能性的。
- en: However, there may also be times when you need to start your experience with
    a higher set of prerequisites. Perhaps you are working on a project where JavaScript
    is essential, not an uncommon scenario. In that instance, you can still progressively
    enhance. Instead, you are merely enhancing from a different start point.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也可能有时候你需要从更高的先决条件开始你的体验。也许你正在开发一个JavaScript是必不可少的项目，这并不罕见。在这种情况下，你仍然可以逐渐增强。只是，你只是从不同的起点开始增强。
- en: Whatever your starting point, the key thing is establishing what it is. Then,
    and only then, can you define and agree upon what visual and functional experiences
    the different browsers and devices that you intend to support will get.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的起点是什么，关键是要确定它是什么。然后，只有在这之后，你才能定义并达成对你打算支持的不同浏览器和设备的视觉和功能体验的一致意见。
- en: Functional parity, not aesthetic parity
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能平等，而不是美学平等
- en: It's both unrealistic and undesirable to try and get any website looking and
    working the same in every browser. Besides quirks specific to certain browsers,
    there are essential functional considerations. For example, we have to consider
    things like touch targets for buttons and links on touch screens that aren't relevant
    on mouse-based devices.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 试图让任何网站在每个浏览器中看起来和工作起来都一样是不现实也不可取的。除了特定于某些浏览器的怪异行为外，还有一些基本的功能考虑。例如，我们必须考虑触摸屏上的按钮和链接的触摸目标，这在基于鼠标的设备上是不相关的。
- en: Therefore, some part of your role as a responsive web developer is educating
    whoever you are answerable to (boss, client, shareholders) that 'supporting older
    browsers' does not mean 'looks the same in older browsers'. The line I tend to
    run with is that all browsers in the support matrix will get task parity, not
    visual parity. This means that if you have a checkout to build, all users will
    be able to get through the checkout and purchase goods. There may visual and interaction
    flourishes afforded to the users of more modern browsers, but the core task will
    be achievable by all.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为响应式网页开发人员，你的一部分工作是教育你需要向之人（老板、客户、股东）解释“支持旧版浏览器”并不意味着“在旧版浏览器中看起来一样”。我通常会说的一句话是，支持矩阵中的所有浏览器将获得任务平等，而不是视觉平等。这意味着如果你需要构建一个结账页面，所有用户都能通过结账并购买商品。对于使用更现代浏览器的用户可能会有视觉和交互效果，但所有用户都能完成核心任务。
- en: Choosing the browsers to support
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择要支持的浏览器
- en: Typically, when we talk about which browsers to support, we're talking about
    how far back we need to look. Here are a couple of possibilities to consider,
    depending upon the situation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们讨论要支持哪些浏览器时，我们在讨论需要往回看多远。根据情况，有几种可能性需要考虑。
- en: 'If it''s an existing website, look at visitor statistics (Google Analytics
    or similar). Armed with some figures you can likely do some rough calculations.
    For example: if cost of supporting browser X is less than the value produced by
    supporting browser X, then support browser X!'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是现有网站，查看访客统计数据（谷歌分析或类似工具）。有了一些数据，你可能可以进行一些粗略的计算。例如：如果支持浏览器X的成本小于支持浏览器X产生的价值，那就支持浏览器X！
- en: Also, consider that if there are browsers in the statistics that represent less
    than 10% of users, look further back and consider trends. How has usage changed
    over the last 3, 6, and 12 months? If it's currently 6% and that value has halved
    over the last 12 months you have a more compelling argument to consider ruling
    that browser out for specific enhancements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，要考虑统计数据中占比不到10%的浏览器，要进一步考虑趋势。过去3、6和12个月的使用情况发生了什么变化？如果目前占比为6%，并且这个值在过去12个月内减少了一半，你就有更有力的理由考虑排除该浏览器进行特定增强。
- en: If it's a new project and statistics are unavailable, I usually opt for a 'previous
    two' policy. This would be the current version plus the previous two versions
    of each browser. For example, if Internet Explorer 12 was the current version,
    look to offer your enhancements for that version plus IE10 and IE11 (the previous
    two). This choice is easier with the 'evergreen' browsers, the term given to browsers
    that continually update on a rapid release cycle (Firefox and Chrome for example).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是一个新项目并且没有统计数据，我通常会选择“前两个”策略。这将是当前版本加上每个浏览器的前两个版本。例如，如果Internet Explorer 12是当前版本，那就考虑为该版本以及IE10和IE11（前两个版本）提供增强。这个选择在“常青”浏览器上更容易，这个术语用于不断更新的浏览器，比如Firefox和Chrome。
- en: Tiering the user experience
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户体验分层
- en: At this point, let's assume shareholders are educated and on board. Let's also
    assume you have a clear set of browsers that you would like to add enhanced experiences
    for. We can now set about tiering the experience. I like to keep things simple,
    so where possible I opt to define a simple 'base' tier and a more 'enhanced' tier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，让我们假设股东已经接受教育并且同意。让我们也假设你已经明确了想要为其添加增强体验的浏览器。现在我们可以开始对体验进行分层。我喜欢保持简单，所以在可能的情况下，我选择定义一个简单的“基础”层和一个更“增强”的层。
- en: The base experience being the minimal viable version of the site and the enhanced
    version being the most fully-featured and aesthetically pleasing version. You
    might need to accommodate more granularity in your tiers, for example, forking
    the experience in relation to browser features; support for Flexbox or support
    for `translate3d` for example. Regardless of how the tiers are defined, ensure
    you define them and what you expect to deliver with each. Then you can actually
    go about coding those tiers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基础体验是站点的最小可行版本，而增强版本是最完整功能和美学上令人满意的版本。你可能需要在你的层中提供更多细化，例如根据浏览器功能分叉体验；例如对Flexbox的支持或对`translate3d`的支持。无论层是如何定义的，确保你定义它们以及你期望用每个层交付的内容。然后你可以着手编写这些层。
- en: Practically delivering experience tiers
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际交付体验层
- en: Right now, Modernizr facilitates the most robust manner to enhance and fork
    experiences based upon device capabilities. While it means adding a JavaScript
    dependency to your project, I think it is worthwhile.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Modernizr提供了最强大的方式来根据设备能力增强和分叉体验。虽然这意味着在项目中添加一个JavaScript依赖，但我认为这是值得的。
- en: Remember, that when writing CSS, the code outside of media queries and without
    selectors that require classes added by Modernizr should make up our 'base' experience.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当编写CSS时，不在媒体查询之外的代码，也不需要Modernizr添加类的选择器应该构成我们的“基础”体验。
- en: Then thanks to Modernizr, we can layer on ever more enhanced experiences based
    upon the browser capabilities. If you refer back to `example_08-07` you can see
    this mind-set and code pattern applied to an off-canvas menu pattern.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，借助Modernizr，我们可以根据浏览器的能力提供更多增强的体验。如果你回头看`example_08-07`，你会看到这种思维方式和代码模式应用到了侧栏菜单模式。
- en: Linking CSS breakpoints to JavaScript
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将CSS断点链接到JavaScript
- en: Typically, with something web-based involving any sort of interaction, JavaScript
    will be involved. When you're developing a responsive project, it's likely you
    will want to do different things at different viewport sizes. Not just in CSS
    but also in JavaScript.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，涉及任何交互的基于Web的东西都会涉及JavaScript。当你开发一个响应式项目时，你可能会希望在不同的视口大小下做不同的事情。不仅在CSS中，还有在JavaScript中。
- en: Let's suppose we want to invoke a certain JavaScript function when we reach
    a certain breakpoint in the CSS (remember that 'breakpoint' is the term used to
    define the point in which a responsive design should change significantly). Let's
    suppose that breakpoint is 47.5rem (with a 16px root font size that would equate
    to 760px) and we only want to run the function at that size. The obvious solution
    would be to simply measure the screen width and invoke the function if the value
    matched the same value you had decided for your CSS breakpoint.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想在CSS中达到某个断点时调用某个JavaScript函数（记住，“断点”是用来定义响应式设计应该显著改变的点）。假设该断点是47.5rem（带有16px根字体大小，相当于760px），我们只想在那个大小运行函数。显而易见的解决方案是简单地测量屏幕宽度，并在值匹配您为CSS断点决定的相同值时调用函数。
- en: JavaScript will always return the value of widths as pixels rather than REM
    values so that's the first complication. However, even if we set the breakpoints
    in CSS as pixel values, it would still mean two places to update and change those
    values when we are changing viewport sizes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript始终会返回宽度的像素值，而不是REM值，所以这是第一个复杂的问题。然而，即使我们在CSS中将断点设置为像素值，这仍意味着在更改视口大小时需要更新和更改这些值的两个地方。
- en: 'Thankfully, there is a better way. I first came across this technique on Jeremy
    Keith''s website: [http://adactio.com/journal/5429/](http://adactio.com/journal/5429/)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种更好的方法。我第一次接触到这种技术是在Jeremy Keith的网站上：[http://adactio.com/journal/5429/](http://adactio.com/journal/5429/)
- en: You can find the full code for this at `example_10-01`. However, the basic idea
    is that in CSS we insert something that can be easily read and understood by JavaScript.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`example_10-01`中找到这个完整的代码。然而，基本思想是在CSS中插入一些可以被JavaScript轻松读取和理解的东西。
- en: 'Consider this in the CSS:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中考虑这一点：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For each breakpoint that we want to communicate to JavaScript, we use the `after`
    pseudo element (you could use before too, either is just as good) and set the
    content of that pseudo element to be the name of our breakpoint. In our preceding
    example, I am using `Splus` for small screens and above, `Mplus` for medium screens
    and above, and `Lplus` for large screens and above. You can use whatever name
    makes sense to you and change the value whenever it makes sense to you (different
    orientations, different heights, different widths, and so on).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们想要传达给JavaScript的每个断点，我们使用`after`伪元素（您也可以使用before，两者都一样好），并将该伪元素的内容设置为我们断点的名称。在我们之前的例子中，我使用`Splus`表示小屏幕及以上，`Mplus`表示中等屏幕及以上，`Lplus`表示大屏幕及以上。您可以使用任何对您有意义的名称，并在有意义的时候更改值（不同的方向，不同的高度，不同的宽度等）。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `::before` and `::after` pseudo elements are inserted into the DOM as shadow
    DOM elements. The `::before` pseudo element is inserted as the first child of
    its parent, and `::after` gets inserted as the last child. You can confirm this
    point in the developer tools of your browser.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`::before`和`::after`伪元素被插入到DOM中作为阴影DOM元素。`::before`伪元素被插入为其父元素的第一个子元素，而`::after`被插入为最后一个子元素。您可以在浏览器的开发者工具中确认这一点。'
- en: With that CSS set, we can browse the DOM tree and see our `::after` pseudo element.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个CSS设置，我们可以浏览DOM树并看到我们的`::after`伪元素。
- en: '![Linking CSS breakpoints to JavaScript](img/B03777_10_01.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![将CSS断点链接到JavaScript](img/B03777_10_01.jpg)'
- en: 'Then in our JavaScript, we can read this value. Firstly, we assign the value
    to a variable:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在我们的JavaScript中，我们可以读取这个值。首先，我们将这个值赋给一个变量：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And then once we have it we can do something with it. To prove this concept
    I have made a simple self-invoking function (self-invoking simply means it is
    executed as soon as the browser parses it) that alerts a different message on
    page load depending upon the viewport size:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后一旦我们有了它，我们可以对它做些什么。为了证明这个概念，我做了一个简单的自调用函数（自调用意味着它在浏览器解析时立即执行），根据视口大小在页面加载时警报不同的消息：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I'd hope you do something a little more interesting than alert a message in
    your projects but I think you will find great benefit in approaching the problem
    this way. You'll never be in danger of your CSS media queries and your width dependent
    JavaScript functions getting out of sync again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你在项目中做一些更有趣的事情，而不仅仅是警报一条消息，但我认为以这种方式解决问题会带来很大的好处。你再也不会担心你的CSS媒体查询和宽度相关的JavaScript函数再次不同步了。
- en: Avoid CSS frameworks in production
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免在生产中使用CSS框架
- en: There are a plethora of free frameworks available that aim to aid in the rapid
    prototyping and building of responsive websites. The two most common examples
    being Bootstrap ([http://getbootstrap.com/](http://getbootstrap.com/)) and Foundation
    ([http://foundation.zurb.com/](http://foundation.zurb.com/)). While they are great
    projects, particularly for learning how to build responsive visual patterns, I
    think they should be avoided in production.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的免费框架可用，旨在帮助快速原型设计和构建响应式网站。最常见的两个例子是Bootstrap ([http://getbootstrap.com/](http://getbootstrap.com/))和Foundation
    ([http://foundation.zurb.com/](http://foundation.zurb.com/))。虽然它们是很棒的项目，特别适合学习如何构建响应式视觉模式，但我认为它们在生产中应该避免使用。
- en: I've spoken to plenty of developers who start all projects with one of these
    frameworks and then amend them to fit their needs. This approach can be incredibly
    advantageous for rapid prototyping (for example, to illustrate some interaction
    to clients) but I think it's the wrong thing to do for projects you intend to
    take through to production.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经和许多开发者交谈过，他们在所有项目中都使用这些框架之一，并对其进行修改以适应他们的需求。这种方法对于快速原型设计可能非常有利（例如，向客户说明某些交互），但我认为对于你打算推向生产的项目来说，这是错误的做法。
- en: Firstly, from a technical perspective, it's likely that starting with a framework
    will result in your project having more code than it actually needs. Secondly,
    from an aesthetic perspective, due to the popularity of these frameworks, it's
    likely your project will end up looking very similar to countless others.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从技术角度来看，使用框架很可能会导致项目代码比实际需要的更多。其次，从美学角度来看，由于这些框架的流行，你的项目很可能会看起来与无数其他项目非常相似。
- en: Finally, if you only copy and paste code into your project and tweak it to your
    needs, you'll be unlikely to fully appreciate what's going on 'under the hood'.
    It's only by defining and solving the problems you have that you can master the
    code you place into your projects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你只是将代码复制粘贴到你的项目中，并根据自己的需求进行调整，你很可能无法完全理解“底层”发生了什么。只有通过定义和解决你所面临的问题，你才能掌握你放入项目中的代码。
- en: Coding pragmatic solutions
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写务实的解决方案
- en: 'When it comes to front-end web development, ''ivory towered idealism'' is a
    particular bugbear of mine. While we should always endeavor try to do things ''the
    right way'', pragmatism must always win out. Let me give you an example (the finished
    code is `example_10-02`). Suppose we have a button to style that opens an off-canvas
    menu. Our natural inclination might be to mark it up something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端网页开发中，“象牙塔式的理想主义”是我特别讨厌的一个问题。虽然我们应该始终努力以“正确的方式”去做事，但务实主义必须始终占上风。让我举个例子（完成的代码是`example_10-02`）。假设我们有一个按钮来打开一个侧边菜单。我们的自然倾向可能是这样标记它：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Nice and simple. It's a button so we have used the `button` element. We have
    used two different HTML classes on the button, one will be a hook for CSS styling
    (`menu-toggle`), and the other as a JavaScript hook (`js-activate-off-canvas-menu`).
    In addition, we are using the `aria-label` attribute (ARIA is covered in more
    detail in [Chapter 4](ch04.html "Chapter 4. HTML5 for Responsive Web Designs"),
    *HTML5 for Responsive Web Designs*) to communicate to screen readers the meaning
    of the character inside the `span`. In this example, we have used the HTML entity
    `&#9776`; which is the Unicode character 'Trigram for Heaven'. It's used here
    merely because it looks like the 'Hamburger icon' often used to symbolize a menu.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 简单明了。这是一个按钮，所以我们使用了`button`元素。我们在按钮上使用了两个不同的HTML类，一个用于CSS样式（`menu-toggle`），另一个作为JavaScript钩子（`js-activate-off-canvas-menu`）。此外，我们使用了`aria-label`属性（ARIA在[第4章](ch04.html
    "第4章. 适应性Web设计的HTML5")中有更详细的介绍，“适应性Web设计的HTML5”）来向屏幕阅读器传达`span`内字符的含义。在这个例子中，我们使用了HTML实体`&#9776`;
    这是Unicode字符“天卦”。这里使用它仅仅是因为它看起来像经常用来表示菜单的“汉堡图标”。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you''d like some solid advice on when and how to use the `aria-label` attribute
    I thoroughly recommend the following post on the Opera developer site by Heydon
    Pickering: [https://dev.opera.com/articles/ux-accessibility-aria-label/](https://dev.opera.com/articles/ux-accessibility-aria-label/)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想得到关于何时以及如何使用`aria-label`属性的可靠建议，我强烈推荐Opera开发者网站上Heydon Pickering的以下文章：[https://dev.opera.com/articles/ux-accessibility-aria-label/](https://dev.opera.com/articles/ux-accessibility-aria-label/)
- en: 'At this point, we seem to be in good shape. Semantic, highly accessible markup
    and classes to separate concerns. Great. Let''s add some styling:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们似乎处于良好状态。语义化，高度可访问的标记和用于分离关注点的类。太好了。让我们添加一些样式：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open this up in Firefox and this is what we see:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中打开这个，我们看到：
- en: '![Coding pragmatic solutions](img/B03777_10_02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![编写务实的解决方案](img/B03777_10_02.jpg)'
- en: Not exactly what we were hoping for. In this case, the browser has decided we've
    gone too far; Firefox simply won't allow us to use a button element as a Flex
    container. This is a very real conflict for a developer. Do we choose the right
    element or the right aesthetic? Given that ideally, we would like to have the
    menu 'hamburger icon' on the left and the word 'menu' on the right.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是我们所希望的。在这种情况下，浏览器已经决定我们走得太远了；Firefox根本不允许我们将按钮元素用作Flex容器。这对开发人员来说是一个非常真实的冲突。我们是选择正确的元素还是正确的美学？鉴于理想情况下，我们希望菜单的“汉堡图标”在左边，单词“菜单”在右边。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can see in the prior code we have used the `appearance` property. It''s
    used to remove the browsers default styling for form elements, and has had a potted
    history. It was specified by the W3C for some time and then later dropped, leaving
    behind vendor-prefixed versions of the property in both Mozilla and WebKit browsers.
    Thankfully, it''s now back on the standards track: [http://dev.w3.org/csswg/css-ui-4/#appearance-switching](http://dev.w3.org/csswg/css-ui-4/#appearance-switching)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到在之前的代码中我们使用了`appearance`属性。它用于移除表单元素的浏览器默认样式，并且它有一个悠久的历史。它曾经被W3C规定了一段时间，然后后来被取消，留下了Mozilla和WebKit浏览器中的供应商前缀版本的属性。幸运的是，它现在又回到了标准轨道上：[http://dev.w3.org/csswg/css-ui-4/#appearance-switching](http://dev.w3.org/csswg/css-ui-4/#appearance-switching)
- en: When a link becomes a button
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当链接变成按钮时
- en: 'I won''t lie. Given this conundrum, I usually opt for the latter. Then I try
    and make up for the fact I''ll be using the wrong element by choosing the next
    best element and changing the ARIA role where possible. In this case, while our
    menu button is certainly not a link (after all, it doesn''t take the user anywhere),
    it''s an `a` tag that I will be using. I''ve decided it''s the next best thing—more
    like a button than any other element. And by using a link we can achieve the desired
    aesthetic. Here''s the markup I''d go with. Note the added ARIA role on the `a`
    tag to indicate its role as a button (and not a link which is the default) to
    assistive technology:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会撒谎。鉴于这个困境，我通常选择后者。然后我尽量弥补我使用错误元素的事实，选择次优元素并在可能的情况下更改ARIA角色。在这种情况下，虽然我们的菜单按钮显然不是一个链接（毕竟，它并没有把用户带到任何地方），但我将使用`a`标签。我决定这是次优选择——比其他任何元素更像一个按钮。通过使用链接，我们可以实现期望的美学。这是我会使用的标记。请注意，在`a`标签上添加的ARIA角色，以指示它作为按钮的角色（而不是默认的链接）对辅助技术进行辅助：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It''s not perfect but it''s a pragmatic solution. Here''s the two (`button`
    element on the left, `a` tag on the right) next to each other in Firefox (version
    39.0a2 if you''re curious):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不完美，但这是一个务实的解决方案。这是在Firefox中（如果你感兴趣，版本是39.0a2）左边是`button`元素，右边是`a`标签：
- en: '![When a link becomes a button](img/B03777_10_03.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![当链接变成按钮时](img/B03777_10_03.jpg)'
- en: Of course, for this simplistic example, we could change the display from flex
    to block and play around with the padding until our desired aesthetic was achieved.
    Or, we could keep the `button` element and nest another semantically meaningless
    element (`span`) and make that a Flex container. There are trade-offs whichever
    approach you favor.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于这个简单的例子，我们可以将显示从flex改为block，并调整填充，直到达到我们想要的美学效果。或者，我们可以保留`button`元素，并嵌套另一个语义上没有意义的元素（`span`），并将其设置为Flex容器。无论你选择哪种方法，都会有权衡。
- en: Ultimately, it's up to us to markup documents as sensibly as possible. At one
    end of the scale, there are developers that only markup with divs and spans to
    ensure no unwanted styles from the browser. The cost being no inherent meaning
    from their elements and in turn, no 'free' accessibility. At the other end of
    the scale are markup purists, who will only ever markup content in what they consider
    to be the correct element, regardless of how 'off' the visuals might end up as
    a result. There is a middle ground. I feel that's the sensible and most productive
    place to be.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们需要尽可能合理地标记文档。在一端，有一些开发者只使用div和span进行标记，以确保浏览器不会产生不需要的样式。这样做的代价是元素没有固有的含义，因此也没有“免费”的可访问性。在另一端是标记纯粹主义者，他们只会使用他们认为正确的元素来标记内容，而不管视觉上可能会出现多大的偏差。中间有一个折中的地方，我觉得那是最明智和最有效的地方。
- en: Use the simplest code possible
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尽可能使用最简单的代码
- en: 'It''s easy to get drunk on the power that new techniques afford us. With this
    in mind, aim to solve your responsive problems in the simplest manner possible.
    For example, if you need to style the fifth item in a list of items and you have
    access to the markup, don''t use an `nth-child` selector like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 沉迷于新技术带来的力量是很容易的。因此，要设法以最简单的方式解决响应式问题。例如，如果你需要为项目列表中的第五个项目设置样式，并且可以访问标记，不要像这样使用`nth-child`选择器：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you have access to the markup, make life easier by adding an HTML class
    to the item:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以访问标记，通过为项目添加HTML类来简化生活：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And then style the item with that simple class:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用这个简单的类来为项目设置样式：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Not only is this easier to understand, it gets you wider support for free (older
    versions of Internet Explorer don't support `nth-child` selectors).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅更容易理解，而且可以免费获得更广泛的支持（较旧版本的Internet Explorer不支持`nth-child`选择器）。
- en: Hiding, showing, and loading content across viewports
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同的视口上隐藏、显示和加载内容
- en: 'One of the commonly touted maxims regarding responsive web design is: if you
    don''t have something on the screen at smaller viewports, you shouldn''t have
    it there at larger ones either.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 关于响应式网页设计的一个常见格言是：如果在较小的视口上屏幕上没有某些内容，那么在较大的视口上也不应该有。
- en: This means users should be able to accomplish all the same goals (buy a product,
    read an article, accomplish an interface task) at every viewport size. This is
    common sense. After all, as users ourselves, we've all felt the frustration of
    going to a website to accomplish a goal and being unable to, simply because we're
    using a smaller screen.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着用户应该能够在每个视口大小下实现相同的目标（购买产品，阅读文章，完成界面任务）。这是常识。毕竟，作为用户，我们都曾因为使用较小的屏幕而无法在网站上实现目标而感到沮丧。
- en: 'It also means that as screen real estate is more plentiful, we shouldn''t feel
    compelled to add extra things just to fill the space (widgets, adverts, or links
    for example). If the user could live without those extras at smaller screen sizes,
    they''ll manage just fine at bigger ones. Displaying extra content at larger viewport
    sizes also means that either the content was there at smaller viewports and was
    merely hidden (typically using `display: none;` in CSS) or it''s being loaded
    in at a particular viewport size (with the help of JavaScript). Succinctly: either
    the content is loaded but not viewable, or it''s viewable yet probably superfluous.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '这也意味着随着屏幕空间更加充裕，我们不应该感到有必要添加额外的东西来填充空间（例如小部件、广告或链接）。如果用户在较小的屏幕尺寸下可以不使用这些额外内容，他们在更大的屏幕上也会很好地完成任务。在较大的视口尺寸下显示额外内容也意味着要么在较小的视口尺寸下已经存在内容，只是被隐藏了（通常使用CSS中的`display:
    none;`），要么在特定的视口尺寸下加载内容（借助JavaScript的帮助）。简而言之：要么内容已经加载但不可见，要么内容可见但可能是多余的。'
- en: In broad terms I think the above maxim is sound advice. If nothing else, it
    makes designers and developers question more thoroughly the content they display
    on screen. However, as ever in web design, there are always going to be exceptions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我认为上面的格言是一个明智的建议。至少，它让设计师和开发人员更加彻底地质疑他们在屏幕上显示的内容。然而，在网页设计中，总会有例外情况。
- en: As far as possible, I resist loading in new markup for different viewports but
    occasionally it's a necessity. I've worked on complex user interfaces that rightfully
    required different markup and designs at wider viewports.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能地，我会避免为不同的视口加载新的标记，但偶尔这是必要的。我曾经在复杂的用户界面上工作，这些界面在较宽的视口上需要不同的标记和设计。
- en: In this instance, JavaScript was used to replace one area of markup with another.
    It wasn't the ideal scenario but it was the most pragmatic. If, for whatever reason,
    the JavaScript failed, users got the smallest screen layout. They could accomplish
    all the same goals, just the layout was sub-optimal for achieving the task at
    hand.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，JavaScript被用来用另一种标记替换一部分标记。这并不是理想的情况，但却是最务实的。如果由于某种原因JavaScript失败，用户将得到最小的屏幕布局。他们可以实现相同的目标，只是布局对于完成手头的任务来说不是最佳的。
- en: 'These are the kind of choices you will likely face as you code more and more
    complex responsive web designs, and you''ll need to use your own judgment as to
    what the best choice is in any given scenario. However, it''s not a cardinal sin
    if you toggle the visibility of the odd bit of markup with `display: none` to
    achieve your goal.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '这些是您在编写越来越复杂的响应式网页设计时可能会面临的选择，您需要根据具体情况自行判断最佳选择是什么。但是，如果您使用`display: none`来切换标记的可见性以实现目标，这并不是一个致命的错误。'
- en: Let CSS do the (visual) heavy lifting
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让CSS来（视觉上）承担重任
- en: It's a fact that JavaScript provides a level of interactivity on webpages that
    simply cannot be achieved with CSS alone. However, where possible, when it comes
    to visuals, we should still do all the heavy lifting with CSS. In practicality,
    this means not animating menus in, out, on and off, with JavaScript alone (I'm
    looking at you jQuery `show` and `hide` methods). Instead, use JavaScript to perform
    simple class changes on the relevant section of the markup. Then let that class
    change trigger the menu being shown/animated in CSS.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，JavaScript提供了网页上无法仅通过CSS实现的交互水平。然而，在可能的情况下，在视觉方面，我们仍然应该使用CSS来承担所有繁重的工作。在实际操作中，这意味着不要仅使用JavaScript来动画显示菜单（我在看你jQuery
    `show`和`hide`方法）。而是使用JavaScript对标记的相关部分进行简单的类更改。然后让该类更改触发CSS中显示/动画的菜单。
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'For the best performance, when toggling classes in the HTML, ensure you add
    a class as close as possible to the item you want to effect. For example, if you
    want a pop-up box to appear over another element, add the class on the closest
    shared parent element. This will ensure that, for the sake of optimal performance,
    only that particular section of the page is made ''dirty'' and the browser shouldn''t
    have to paint vast areas of the page again. For a great, free, course on performance,
    take a look at Paul Lewis''s ''Browser Rendering Optimization'' course: [https://www.udacity.com/course/browser-rendering-optimization--ud860](https://www.udacity.com/course/browser-rendering-optimization--ud860)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳性能，在HTML中切换类时，请确保尽可能接近要影响的项目添加类。例如，如果您希望弹出框出现在另一个元素上方，请在最接近的共享父元素上添加类。这将确保为了获得最佳性能，只有页面的特定部分被标记为“脏”，浏览器不应该再次绘制页面的大片区域。要了解有关性能的出色免费课程，请查看Paul
    Lewis的“浏览器渲染优化”课程：[https://www.udacity.com/course/browser-rendering-optimization--ud860](https://www.udacity.com/course/browser-rendering-optimization--ud860)
- en: Validators and linting tools
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证器和linting工具
- en: Generally speaking, writing HTML and CSS is pretty forgiving. You can nest the
    odd thing incorrectly, miss the occasional quotation mark or self-closing tag
    and not always notice a problem. Despite this, on an almost weekly basis I manage
    to befuddle myself with incorrect markup. Sometimes it's a slip-up like accidentally
    typing an errant character. Other times it's school-boy errors like nesting a
    `div` inside a `span` (invalid markup as a `span` is an inline element and a `div`
    is a block level element—leading to unpredictable results). Thankfully, there
    are great tools to help out. At worst, if you're encountering a weird issue, head
    over to [http://validator.w3.org/](http://validator.w3.org/) and paste your markup
    in there. It will point out all errors along with line numbers, helping you to
    easily fix things up.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，编写HTML和CSS相当宽容。您可以偶尔错误地嵌套一些内容，错过偶尔的引号或自闭合标记，并不总是注意到问题。尽管如此，几乎每周我都会用不正确的标记使自己困惑。有时是像意外输入错误字符这样的失误。其他时候是像将`div`嵌套在`span`中这样的低级错误（将`span`嵌入块级元素`div`是无效的标记，导致结果不可预测）。幸运的是，有很好的工具可以帮助解决问题。最坏的情况下，如果遇到奇怪的问题，请转到[http://validator.w3.org/](http://validator.w3.org/)并将您的标记粘贴在那里。它将指出所有错误以及行号，帮助您轻松解决问题。
- en: '![Validators and linting tools](img/B03777_10_04.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![验证器和linting工具](img/B03777_10_04.jpg)'
- en: 'Better still, install and configure ''linting'' tools for your HTML, CSS, and
    JavaScript. Or, choose a text editor with some degree of sanity-checking built
    in. Then problem areas are flagged up in your code as you go. Here''s an example
    of a simple spelling error in CSS flagged up by Microsoft''s ''Code'' editor:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，安装和配置HTML、CSS和JavaScript的“linting”工具。或者选择一个带有一定程度的合理检查的文本编辑器。然后，随着您的代码的进行，问题区域会在您的代码中标记出来。以下是Microsoft的“Code”编辑器中标记出的CSS中的简单拼写错误的示例：
- en: '![Validators and linting tools](img/B03777_10_06.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![验证器和linting工具](img/B03777_10_06.jpg)'
- en: Like a clown, I've clumsily typed `widthh` instead of `width`. The editor has
    spotted this fact and pointed out the error of my ways and offered some sensible
    alternatives. Embrace these tools where possible. There are better uses of your
    time than tracking down simple syntax errors in your code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 就像小丑一样，我笨拙地输入了`widthh`而不是`width`。编辑器已经发现了这个错误，并指出了我的错误，并提供了一些明智的替代方案。在可能的情况下，接受这些工具。您的时间有更好的用途，而不是在代码中追踪简单的语法错误。
- en: Performance
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Considering the performance of your responsive web designs is as important as
    the aesthetics. However, performance presents something of a moving target. For
    example, browsers update and improve the way they handle assets, new techniques
    are discovered that supersede existing 'best practices', technologies eventually
    get enough browser support that they become viable for widespread adoption. The
    list goes on.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑响应式网页设计的性能与美学一样重要。然而，性能呈现出一种不断变化的目标。例如，浏览器更新和改进了它们处理资产的方式，发现了超越现有“最佳实践”的新技术，技术最终得到了足够的浏览器支持，从而变得适合广泛采用。列表还在继续。
- en: 'There are however, some basic implementation details that are pretty solid
    (well, until HTTP2 is common place, more of which shortly). These are:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些基本的实施细节是相当稳固的（好吧，直到HTTP2普及，很快就会有更多）。这些是：
- en: Minimize the number of assets (for example, don't load 15 JavaScript files if
    you concatenate them into one).
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽量减少资产数量（例如，如果可以将它们合并为一个文件，则不要加载15个JavaScript文件）。
- en: Minimize the page weight (if you can compress images to a fraction of their
    original size you should).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽量减少页面权重（如果可以将图像压缩到原始大小的一小部分，则应该这样做）。
- en: Defer non-essential assets (if you can put off loading CSS and JavaScript until
    the page has rendered it can greatly increase the perceived load time).
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推迟非必要的资产（如果可以推迟加载CSS和JavaScript直到页面呈现，可以大大增加感知加载时间）。
- en: Ensure the page is usable as soon as possible (usually a by-product of doing
    all the preceding steps).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保页面尽快可用（通常是完成所有前面步骤的副产品）。
- en: 'There are a number of great tools available to measure and optimize performance
    too. My personal favorite being [http://webpagetest.org/](http://webpagetest.org/).
    At its simplest, you pick a URL and click on **START TEST**. It will show you
    a complete analysis of the page but even more usefully, it shows a ''filmstrip''
    view of the page as it has loaded, allowing you to concentrate on getting the
    rendered page complete sooner. Here''s an example of the filmstrip view of the
    BBC home page:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多很棒的工具可用于测量和优化性能。我个人最喜欢的是[http://webpagetest.org/](http://webpagetest.org/)。在最简单的情况下，您选择一个URL并单击**开始测试**。它会向您显示页面的完整分析，但更有用的是，它会显示页面加载时的“电影带”视图，让您可以集中精力更早地完成呈现页面。这是BBC主页的电影带视图的一个例子：
- en: '![Performance](img/B03777_10_05.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![性能](img/B03777_10_05.jpg)'
- en: Whenever trying to optimize performance, ensure you take measurements before
    you begin (otherwise, you have no idea how effective your performance work has
    been). Then make amendments, test, and repeat.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试优化性能时，确保在开始之前进行测量（否则，您不知道您的性能工作有多有效）。然后进行修改，测试和重复。
- en: The next big things
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一个大事件
- en: One of the things that make front-end web development interesting, is that things
    change rapidly. There is always something new to learn and the web community is
    always figuring out better, faster, and more effective ways of solving problems.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使前端Web开发变得有趣的一件事是，事物变化迅速。总是有新东西要学习，网络社区总是在找到更好、更快和更有效地解决问题的方法。
- en: For example, three years before writing this edition of the book responsive
    images (`srcset` and the `picture` element that are detailed in [Chapter 3](ch03.html
    "Chapter 3. Fluid Layouts and Responsive Images"), *Fluid Layouts and Responsive
    Images*) simply didn't exist. Back then, we had to use clever third party workarounds
    to serve up more appropriate images to different viewport sizes. Now that common
    need has been rationalized into a W3C standard we can all now use and enjoy.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在撰写本书的这一版之前的三年，响应式图像（`srcset`和`picture`元素在[第3章](ch03.html "第3章。流式布局和响应式图像")中详细介绍）根本不存在。那时，我们不得不使用巧妙的第三方解决方案来为不同的视口尺寸提供更合适的图像。现在，这种常见的需求已经合理化为W3C标准，我们现在都可以使用和享受。
- en: Similarly, not long ago, Flexbox was just a twinkle in a specification writer's
    eyes. Even when the specification evolved it was still difficult to implement
    until Andrey Sitnik and those clever folks at Evil Martians ([https://evilmartians.com/](https://evilmartians.com/))
    created Autoprefixer and we are subsequently able to use it cross-browser with
    relative ease.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，不久之前，Flexbox只是规范作者眼中的一个闪烁。即使规范发展了，实现起来仍然很困难，直到Andrey Sitnik和那些聪明的Evil Martians的人们([https://evilmartians.com/](https://evilmartians.com/))创建了Autoprefixer，我们随后能够相对轻松地跨浏览器使用它。
- en: The future holds yet more exciting capabilities for us to understand and implement.
    We've already mentioned Service Workers in [Chapter 4](ch04.html "Chapter 4. HTML5
    for Responsive Web Designs"), *HTML5 for Responsive Web Designs*, for example
    ([http://www.w3.org/TR/service-workers/](http://www.w3.org/TR/service-workers/));
    a better way to create offline capable web-based applications.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 未来还将有更多令人兴奋的能力供我们理解和实施。例如，我们已经在[第4章](ch04.html "第4章。响应式Web设计的HTML5")中提到了服务工作者，*响应式Web设计的HTML5*，例如([http://www.w3.org/TR/service-workers/](http://www.w3.org/TR/service-workers/));
    这是创建离线可用的基于Web的应用程序的更好方法。
- en: There is also 'Web Components' a collection of standards made up of Shadow DOM
    ([http://w3c.github.io/webcomponents/spec/shadow/](http://w3c.github.io/webcomponents/spec/shadow/)),
    Custom Elements ([http://w3c.github.io/webcomponents/spec/custom/](http://w3c.github.io/webcomponents/spec/custom/))
    and HTML Imports ([http://w3c.github.io/webcomponents/spec/imports/](http://w3c.github.io/webcomponents/spec/imports/))
    that will allow us to create entirely bespoke and re-usable components.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 还有“Web组件”，由Shadow DOM([http://w3c.github.io/webcomponents/spec/shadow/](http://w3c.github.io/webcomponents/spec/shadow/))、自定义元素([http://w3c.github.io/webcomponents/spec/custom/](http://w3c.github.io/webcomponents/spec/custom/))和HTML导入([http://w3c.github.io/webcomponents/spec/imports/](http://w3c.github.io/webcomponents/spec/imports/))等标准组成，这将使我们能够创建完全定制和可重用的组件。
- en: Then there are the other forthcoming enhancements such as CSS Level 4 Selectors
    ([http://dev.w3.org/csswg/selectors-4/](http://dev.w3.org/csswg/selectors-4/))
    and CSS Level 4 Media Queries, which we covered in some detail in [Chapter 2](ch02.html
    "Chapter 2. Media Queries – Supporting Differing Viewports"), *Media Queries –
    Supporting Differing Viewports*.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有其他即将推出的增强功能，例如CSS Level 4选择器([http://dev.w3.org/csswg/selectors-4/](http://dev.w3.org/csswg/selectors-4/))和CSS
    Level 4媒体查询，我们在[第2章](ch02.html "第2章。媒体查询-支持不同的视口")中有详细介绍，*媒体查询-支持不同的视口*。
- en: Finally, another big change looming on the horizon is HTTP2\. It promises to
    make many of our current best practices, bad practices. For a good in-depth primer
    I'd suggest reading *http2 explained* by Daniel Stenberg (it's a free PDF). Alternatively,
    for a lighter summary, read Matt Wilcox's excellent post, *HTTP2 for front-end
    web developers* ([https://mattwilcox.net/web-development/http2-for-front-end-web-developers](https://mattwilcox.net/web-development/http2-for-front-end-web-developers)).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即将到来的另一个重大变化是HTTP2。它承诺使我们当前的许多最佳实践变成坏实践。对于一个深入的入门指南，我建议阅读Daniel Stenberg的*http2
    explained*（这是一个免费的PDF）。或者，对于一个更轻松的摘要，阅读Matt Wilcox的优秀文章*HTTP2 for front-end web
    developers*([https://mattwilcox.net/web-development/http2-for-front-end-web-developers](https://mattwilcox.net/web-development/http2-for-front-end-web-developers))。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we reach the end of our time together, your humble author hopes to have related
    all the techniques and tools you'll need to start building your next website or
    web application responsively.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们共同度过的时光即将结束之际，你们谦卑的作者希望已经介绍了你们开始构建下一个网站或网络应用所需的所有技术和工具。
- en: It's my conviction that by approaching web projects with a little forethought
    and by making a few modifications to existing workflows, practices, and techniques,
    it's possible to create responsive web designs that provide fast, flexible, and
    maintainable websites that can look incredible regardless of the device used to
    visit them.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信，通过事先考虑并对现有工作流程、实践和技术进行一些修改，我们可以创建出快速、灵活、易于维护的响应式网页设计，无论使用何种设备访问，都能呈现出令人难以置信的效果。
- en: We've covered a wealth of information in our time together; techniques, technologies,
    performance optimizations, specifications, workflow, tooling, and more. I wouldn't
    expect anybody to take it all in in one read. Therefore, next time you need to
    remember this or that syntax, or refresh your mind about one of the responsive
    related subjects we've covered, I hope you'll dip back in to these pages. I'll
    be right here waiting for you.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一起的时间里涵盖了大量的信息；技术、技术优化、规格、工作流程、工具等等。我不指望任何人一次阅读就能全部掌握。因此，下次当你需要记住这个或那个语法，或者想要复习我们涵盖的响应式相关主题之一时，我希望你能再次翻阅这些页面。我会在这里等着你。
- en: Until then, I wish you good fortunes in your responsive web design quests.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之前，祝你在响应式网页设计的探索中好运。
- en: See you again sometime.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 希望能再次见到你。
