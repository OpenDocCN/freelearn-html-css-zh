- en: Chapter 1. Introducing the World of Web App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍网络应用程序的世界
- en: Web application development has reached the next level with HTML5 and WebSockets.
    The revolutionary enhancements in web development technologies have equipped developers
    with modern tools and techniques. Using WebSockets they can create web applications
    which can send data not only from the client side but from the server side as
    well. Web applications with real-time data transfer can be created with a lot
    lower use of bandwidth. WebSockets by complementing HTML5 enhanced feature can
    make future applications powerful. Let's talk about the basics of the Web before
    understanding WebSockets in detail.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5和WebSockets使网络应用程序开发达到了新的水平。网络开发技术的革命性改进为开发人员提供了现代工具和技术。使用WebSockets，他们可以创建不仅可以从客户端发送数据，还可以从服务器端发送数据的网络应用程序。使用实时数据传输的网络应用程序可以以更低的带宽使用率创建。通过补充HTML5增强功能，WebSockets可以使未来的应用程序更加强大。在深入了解WebSockets之前，让我们先了解网络的基础知识。
- en: What is the Web?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是网络？
- en: 'The foundation of the Web was laid in the late eighties. The Web works on interlinked
    hypertext documents that we can access using the Internet. A browser plays a vital
    role in reading and converting these hypertext documents into a readable and more
    meaningful format, which we call web pages. HTML5 is the hypertext document which
    the browser reads and renders for us. The browser not only reads and renders but
    also creates a **Document Object Model** (**DOM**) for us so that we can read
    and manipulate the structure easily. Dynamic manipulation of the DOM can be achieved
    by the JavaScript language, which is a standard scripting language for HTML. A
    server plays a vital role in the functioning of the Web. We mainly consider the
    Web to be divided into two parts: client and server. Client is considered to be
    the browser whereas server is the one who gives client the data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 网络的基础是在八十年代末奠定的。网络是通过互联的超文本文档工作的，我们可以使用互联网访问它们。浏览器在阅读和转换这些超文本文档成为可读和更有意义的格式方面发挥着至关重要的作用，我们称之为网页。HTML5是浏览器读取和呈现给我们的超文本文档。浏览器不仅读取和呈现，还为我们创建了**文档对象模型**（**DOM**），以便我们可以轻松地阅读和操作结构。DOM的动态操作可以通过JavaScript语言实现，这是HTML的标准脚本语言。服务器在网络的运作中起着至关重要的作用。我们主要认为网络分为两部分：客户端和服务器。客户端被认为是浏览器，而服务器是给客户端提供数据的一方。
- en: 'Let''s see how the Web works:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看网络是如何工作的：
- en: Browser requests a URL from server.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器从服务器请求URL。
- en: Server checks and returns the HTML file.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器检查并返回HTML文件。
- en: Browser engine draws the page.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器引擎绘制页面。
- en: In a nutshell, this is how the Web works. Browsers and servers are the most
    important entities of the Web. Browsers have engines that read HTML files and
    render web applications in the way HTML files are described. Different browsers
    such as Blink, Trident, Gecko, WebKit, and so on, have different engines to render
    the HTML of a page. Now servers are the one who are storing all the data and providing
    the same on user request.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这就是网络的工作原理。浏览器和服务器是网络中最重要的实体。浏览器有引擎来读取HTML文件，并以HTML文件描述的方式呈现网络应用程序。不同的浏览器，如Blink、Trident、Gecko、WebKit等，有不同的引擎来呈现页面的HTML。现在服务器是存储所有数据并在用户请求时提供数据的一方。
- en: Web applications
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络应用程序
- en: In the beginning of the Web, pages were static. They only used to show content
    with minimal interactivity and functionality. But with the advancement in the
    standards of the Web along with the evolution of computers, efficient browsers,
    enhanced tools and libraries, creating web applications has now become very easy,
    and a lot of functionalities can be added very quickly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络的早期，页面是静态的。它们只用于显示最少的交互和功能性内容。但随着网络标准的进步，计算机的发展，高效的浏览器，增强的工具和库，创建网络应用程序现在变得非常容易，许多功能可以很快地添加进去。
- en: Here is a simple definition of web applications—any application that runs on
    a browser is a web application. There are many web applications that we use in
    our daily routine to check mails, read news, watch videos, and so on. Web applications
    run in your browser and do not require much of your computer resources.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的网络应用程序定义 - 任何在浏览器上运行的应用程序都是网络应用程序。我们在日常生活中使用许多网络应用程序来检查邮件，阅读新闻，观看视频等。网络应用程序在您的浏览器中运行，不需要太多的计算机资源。
- en: The Web is growing at a very high rate. Many companies are building their applications
    on the Web. The first and most important benefit is that it is independent of
    the operating system. You can run it on Windows, Mac, or Linux and it works the
    same, because the work is mainly done by the browsers and they are available for
    most operating systems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网络正在以非常快的速度增长。许多公司正在网络上构建他们的应用程序。第一个和最重要的好处是它独立于操作系统。您可以在Windows、Mac或Linux上运行它，它的工作方式是相同的，因为工作主要由浏览器完成，并且它们适用于大多数操作系统。
- en: 'Here are some of the examples of web applications:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些网络应用程序的示例：
- en: Gmail
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gmail
- en: Dropbox
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dropbox
- en: Flickr
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flickr
- en: Facebook
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook
- en: Where does WebSockets fit?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets的作用是什么？
- en: As we have seen some examples of web applications, now the question here is
    where does WebSockets fit in these applications or any web application? Let us
    first understand something about application behavior; let us take an example
    of **Gmail**, which is basically a mailing client. The work of a mailing client
    is to fetch mails and display them. This sounds simple, but the problem arises
    when someone sends you a mail and you want that mail to be displayed right away.
    To implement such a functionality there are different ways, such as polling and
    long-polling, which are not efficient. So WebSockets solves the problem here by
    providing a server push facility. WebSockets provides functionality to push from
    both the client and server side, which makes it stand out.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些Web应用程序的例子，现在问题是WebSockets在这些应用程序或任何Web应用程序中的位置在哪里？让我们首先了解一些应用程序行为；让我们以Gmail为例，它基本上是一个邮件客户端。邮件客户端的工作是获取邮件并显示它们。这听起来很简单，但当有人给你发送一封邮件，你希望立即显示该邮件时，问题就出现了。为了实现这样的功能，有不同的方式，如轮询和长轮询，这些方式都不高效。因此，WebSockets通过提供服务器推送功能来解决这个问题。WebSockets提供了从客户端和服务器端推送的功能，这使它脱颖而出。
- en: 'WebSockets comes with some good features and great benefits over other methods
    of communication. Some of the features and benefits of WebSockets are:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets具有一些良好的特性和优点，超过了其他通信方法。WebSockets的一些特性和优点包括：
- en: Full-duplex communication
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全双工通信
- en: Low bandwidth consumption
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低带宽消耗
- en: Security
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Low latency
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低延迟
- en: Works over **Transmission Control Protocol** (**TCP**) (although it needs HTTP
    for initial handshake)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在传输控制协议（TCP）上运行（尽管它需要HTTP进行初始握手）
- en: Supported by almost all the web browsers and web servers including mobile browsers
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎所有的网络浏览器和服务器都支持，包括移动浏览器
- en: We can treat WebSockets as a feature which enhances the experience of web applications.
    And with HTML5-enhanced features, we can create a dynamic and real-time application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将WebSockets视为增强Web应用体验的功能。借助HTML5增强的功能，我们可以创建动态和实时的应用程序。
- en: WebSockets over other methods
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets相对于其他方法
- en: 'There are different ways of implementing data communication between a client
    and server. **Flash**, **Comet**, **PusherApp**, and so on provide us with the
    features needed to implement the data communication which WebSockets provides.
    Then the question arises that why should we go with WebSockets? There are many
    reasons for picking WebSockets over other methods, some of which are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方式来实现客户端和服务器之间的数据通信。Flash，Comet，PusherApp等都提供了WebSockets所需的功能。那么问题来了，为什么我们要选择WebSockets呢？有很多原因可以选择WebSockets而不是其他方法，其中一些原因如下：
- en: In comparison to other means of data communication, WebSockets exhibits low
    latency, which decreases from nearly 150 ms to 50 ms.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他数据通信方式相比，WebSockets表现出低延迟，从近150毫秒减少到50毫秒。
- en: WebSockets is a lightweight connection and uses low bandwidth.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSockets是一种轻量级连接，使用带宽较低。
- en: It requires lesser developer effort in terms of learning and implementation
    in different technologies.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在学习和实施不同技术方面，需要更少的开发人员工作量。
- en: Ease of compilation when different technologies are used.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用不同技术时编译更容易。
- en: Code maintenance becomes easy with WebSockets.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebSockets可以轻松进行代码维护。
- en: WebSockets offers full-duplex connection support without much overhead.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSockets提供了全双工连接支持，而没有太多的开销。
- en: Modern browsers
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代浏览器
- en: Modern browsers are equipped with advanced features to support web applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器配备了先进的功能，以支持Web应用程序。
- en: Web applications have a lot of different features, and to support those features,
    we need browsers—not just ordinary but modern browsers. For a modern browser to
    support the advanced features provided by HTML5, it has to implement the HTML5
    standard, because it has the latest features and functionalities. There are some
    versions of browsers that do not support HTML5 majorly because they have not implemented
    the HTML5 standards, either because they were developed earlier or they choose
    not to.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序具有许多不同的功能，为了支持这些功能，我们需要的不仅仅是普通的浏览器，而是现代浏览器。为了支持HTML5提供的高级功能，现代浏览器必须实现HTML5标准，因为它具有最新的功能和功能。有一些浏览器的版本不支持HTML5，主要是因为它们没有实现HTML5标准，要么是因为它们是早期开发的，要么是因为它们选择不支持。
- en: 'Some of the advantages of modern browsers are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器的一些优势如下：
- en: Good performance
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的性能
- en: Good security
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的安全性
- en: Lesser issues
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题更少
- en: Faster page loading
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面加载更快
- en: Experimental **Application Programming Interface** or **API**
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验性的应用程序编程接口或API
- en: Support for latest features
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持最新的功能
- en: Access to native resources
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问本机资源
- en: HTML
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML
- en: HTML is a markup language which is used by browsers to render a webpage. It
    is the standard fixed by the **World Wide Web** (**W3**). This standard has some
    defined elements which different browsers implements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: HTML是一种标记语言，用于浏览器呈现网页。这是由万维网联盟（W3）制定的标准。这个标准有一些定义的元素，不同的浏览器实现了这些元素。
- en: HTML5 – the modern Web standard
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5-现代Web标准
- en: 'After eight years working on the HTML5 standard, W3 finalized the standard
    on October 28, 2014\. This standard is going to be revolutionary for the future
    of the Web. The enhancements done to the HTML standard are revolutionary. Let
    us go through the main features of HTML5, which makes it a great standard for
    the Web:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在八年的HTML5标准制定工作之后，W3于2014年10月28日最终确定了这一标准。这个标准将对未来的网络产生革命性的影响。对HTML标准的增强是革命性的。让我们来看看HTML5的主要特性，使其成为Web的一个伟大标准：
- en: Media – audio/video
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体-音频/视频
- en: One of the big features introduced in the HTML5 standard is media playback.
    We can now play audio/video directly using the browser. Earlier we used to use
    some plugins in order to play audio and video, which added another layer onto
    our web application. For example, **YouTube** used Flash player to play videos,
    but now we can play the videos directly. This feature has been a bigger advantage
    for applications which are completely built using HTML.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5标准引入的一个重要功能是媒体播放。现在我们可以直接使用浏览器播放音频/视频。以前，我们需要使用一些插件来播放音频和视频，这为我们的网络应用程序增加了另一层。例如，YouTube使用Flash播放器播放视频，但现在我们可以直接播放视频。这个功能对完全使用HTML构建的应用程序来说是一个更大的优势。
- en: Along with playback of audio and video, we can also capture audio and video
    resources of the device. Accessing the camera and microphone can be done using
    the `getUserMedia()` API, but it is still not available to all browsers because
    it is an experimental feature; it is, however, a feature that is greatly needed.
    This API not only gives access to the desktop computer, but also to the camera
    and microphone in mobile and tablet devices. This is another feature which will
    remove the dependency on different plugins for media access and capturing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了播放音频和视频之外，我们还可以捕获设备的音频和视频资源。可以使用`getUserMedia()` API来访问摄像头和麦克风，但由于它是一个实验性功能，因此并不是所有浏览器都支持它；但这是一个非常需要的功能。这个API不仅可以访问台式电脑，还可以访问移动设备和平板电脑上的摄像头和麦克风。这是另一个将消除对媒体访问和捕获的不同插件的依赖的功能。
- en: Canvas
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Canvas
- en: Canvas gives you per pixel access for manipulation at runtime. So you can draw
    shapes, render graphs, color them, manipulate them, and even manipulate bitmap
    images per pixel, along with many more features. The canvas feature gives us an
    upper hand in drawing and making web applications just like Microsoft Paint (formerly
    Microsoft Paintbrush) or Adobe Photoshop.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Canvas允许您在运行时以每个像素的方式进行操作。因此，您可以绘制形状，渲染图形，着色，操作它们，甚至以每个像素操作位图图像，以及许多其他功能。Canvas功能使我们在绘制和制作网络应用程序方面具有优势，就像Microsoft
    Paint（以前的Microsoft Paintbrush）或Adobe Photoshop一样。
- en: The canvas element has a different set of methods to create drawings using lines,
    circles, boxes, text, graphics, and so on. JavaScript is used to draw in the canvas
    container.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Canvas元素具有一组不同的方法，可以使用线条、圆圈、框、文本、图形等来创建绘图。JavaScript用于在画布容器中绘制。
- en: Form elements
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单元素
- en: 'There are many enhancements in form elements which help us create a great experience
    for the users and are easy to manage from the developers'' perspective. Validation
    was a big problem earlier; we had to write our own code for it, but now it is
    a part of the elements. There are some enhancements which are made keeping mobile
    devices in mind, such as field type keyboard—for example, a dedicated keyboard
    for numeric fields. Some of the new elements are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表单元素中有许多增强功能，可以帮助我们为用户创建出色的体验，并且从开发人员的角度来看易于管理。验证以前是一个大问题；我们不得不为此编写自己的代码，但现在它是元素的一部分。有一些增强功能是为移动设备而设计的，例如字段类型键盘，例如专门用于数字字段的键盘。一些新元素包括：
- en: '**Input**: The following are the input types:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Input**：以下是输入类型：'
- en: '`type="email"`: A field with inbuilt email validator'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type="email"`：具有内置电子邮件验证器的字段'
- en: '`type="url"`: A field with inbuilt URL validator'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type="url"`：具有内置URL验证器的字段'
- en: '`type="number"`: A field with inbuilt number input restriction and validator'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type="number"`：具有内置数字输入限制和验证器的字段'
- en: '`type="range"`: A range slider with max and min function'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type="range"`：具有最大和最小功能的范围滑块'
- en: '**Datalist**: It specifies a predefined list of options for list control.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Datalist**：它指定了列表控件的预定义选项列表。'
- en: '**Keygen**: This element provides secure data submission using the public/private
    key method. From the security point of view, it is an excellent enhancement.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Keygen**：该元素使用公钥/私钥方法提供安全数据提交。从安全性的角度来看，这是一个很好的增强功能。'
- en: '**Output**: This element helps in showing the output value during form filling.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Output**：这个元素有助于在填写表单时显示输出值。'
- en: Semantics
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义
- en: Semantics are elements which have a meaning. Every developer wants to code in
    a language that is easy to understand and implement. Semantics is what makes it
    easier to read and understand the code because it defines the meaning of that
    piece of element or tag. Some examples of semantic elements are `<audio>`, `<video>`,
    `<form>`, and `<table>`. Examples of non-semantic elements include `<div>` and
    `<span>`. We can see from the examples that non-semantic elements don't tell us
    about the content, while semantic elements tell us clearly about the content.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 语义是具有含义的元素。每个开发人员都希望用易于理解和实现的语言编码。语义是使代码更易于阅读和理解的因素，因为它定义了该元素或标记的含义。语义元素的一些示例包括`<audio>`、`<video>`、`<form>`和`<table>`。非语义元素的示例包括`<div>`和`<span>`。从这些示例中我们可以看出，非语义元素并没有告诉我们有关内容，而语义元素清楚地告诉我们有关内容。
- en: 'Some of the new semantics in HTML5 are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5中的一些新语义如下：
- en: '`<section>`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<section>`'
- en: '`<nav>`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<nav>`'
- en: '`<article>`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<article>`'
- en: '`<aside>`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<aside>`'
- en: '`<hgroup>`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<hgroup>`'
- en: '`<header>`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<header>`'
- en: '`<footer>`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<footer>`'
- en: The addition of these new elements will help in making the code more readable
    and meaningful. And now let me introduce you to custom elements. Yes, now we can
    make our own custom elements using JavaScript, either by creating them from scratch
    or extending the default set of DOM elements by adding new behaviors to them.
    This way we can create different sets of reusable web components and use them
    across our web application. This feature adds meaning to the code and is a big
    advantage for large-scale applications to make reusable web components.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新元素的添加将有助于使代码更易读和有意义。现在让我向您介绍自定义元素。是的，现在我们可以使用JavaScript制作自己的自定义元素，可以从头开始创建它们，也可以通过向DOM元素的默认集合添加新行为来扩展它们。这样，我们可以创建不同的可重用网络组件集，并在整个网络应用程序中使用它们。这个功能为代码增加了意义，并且对于大型应用程序来说，制作可重用的网络组件是一个巨大的优势。
- en: Mobile first
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先移动
- en: 'HTML5 and CSS3 standards are made keeping mobile devices in mind. There are
    many enhancements that optimize the code for mobile/tablet devices. Mobiles have
    evolved to an extent where they have become a part of our daily lives. We have
    started browsing the Internet more on mobile/tablet devices. And HTML5 has given
    a lot of power to the Web to match up to the modern Web requirements. HTML5 and
    CSS3 have some excellent features which can deliver the same content for all devices:
    desktop, mobile, and tablets. Some of the important features include the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5和CSS3标准是为移动设备而制定的。有许多增强功能可以优化移动/平板设备的代码。手机已经发展到一个程度，已经成为我们日常生活的一部分。我们已经开始更多地在移动/平板设备上浏览互联网。HTML5已经赋予Web很多力量，以满足现代Web的需求。HTML5和CSS3具有一些出色的功能，可以为所有设备提供相同的内容：台式机、移动设备和平板电脑。一些重要的功能包括以下内容：
- en: '**Viewport**: This helps in adjusting the view of webpages based on devices.
    We can set a different scale level and so on.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视口**：这有助于根据设备调整网页的视图。我们可以设置不同的缩放级别等。'
- en: '**Media queries**: CSS as per the screen size; isn''t it a brilliant feature?
    Now by using media queries the CSS styling can be changed at runtime. Responsive
    web design is a very important feature of modern Web. We need the content to be
    displayed as per the screen size, and it should adapt and show appropriate content
    eliminating the not so important content from the page for smaller size devices.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体查询**：根据屏幕大小的CSS；这不是一个很棒的功能吗？现在通过使用媒体查询，CSS样式可以在运行时更改。响应式网页设计是现代Web的一个非常重要的特性。我们需要根据屏幕大小显示内容，并且它应该适应并显示适当的内容，消除页面上对于较小设备来说不那么重要的内容。'
- en: '**Touch events**: These are vital events for mobile/tablet devices. **Swipe**
    is one of the important events that is now a part of HTML5 DOM.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸事件**：这些对于移动/平板设备非常重要。**滑动**是现在HTML5 DOM的重要事件之一。'
- en: Offline storage
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离线存储
- en: The world is emerging with different technologies and we widely use online and
    web services in order to create an effective work space and a web world that will
    cater to our professional and personal needs. There are scenarios where you need
    websites to be accessible offline, that is, without an active internet connection
    on your device. This can be achieved using the offline storage functionality.
    Once you have opened a webpage, it is possible to put the data in cache so that
    next time you open it or for some reason your connection is lost, you can still
    open and use it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 世界正在不断涌现出不同的技术，我们广泛使用在线和网络服务，以创建一个有效的工作空间和一个满足我们专业和个人需求的网络世界。有些情况下，您需要网站在离线状态下也能访问，即在设备上没有活动的互联网连接。这可以通过使用离线存储功能来实现。一旦您打开了一个网页，就可以将数据放入缓存，这样下次您打开它，或者由于某种原因您的连接丢失，您仍然可以打开并使用它。
- en: The offline system is quite important when the data needs to be stored locally
    for the user. Mainly when it comes to reloading or restoring the pages if the
    system is in offline mode.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据需要本地存储时，离线系统非常重要，特别是当系统处于离线模式时需要重新加载或恢复页面时。
- en: So, whenever we open a URL, it basically hits the server and then the server
    returns the requested file. Then, the browser renders the file which was given
    by the server. Now in case we are offline, the browser will take control, and
    instead of hitting the server to get the file, it loads the files from its local
    copy which was cached when we opened it earlier. There is also an API which tells
    us that we are online or offline. It is very helpful in case of mobile/tablet
    devices where the connectivity can be lost at any point of time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每当我们打开一个URL时，它基本上会访问服务器，然后服务器返回请求的文件。然后，浏览器呈现服务器提供的文件。现在，如果我们处于离线状态，浏览器将接管控制，而不是访问服务器获取文件，它会从先前打开时缓存的本地副本中加载文件。还有一个API可以告诉我们是在线还是离线。在移动/平板设备的情况下，这非常有帮助，因为连接可能随时丢失。
- en: Geolocation
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理定位
- en: There are many applications which use geolocation, such as Twitter, Facebook,
    Foursquare, Google Maps, and so on. The introduction of this feature as a part
    of HTML5 has made it easier for developers to get the location of their device.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多应用程序使用地理定位，如Twitter、Facebook、Foursquare、Google Maps等。将此功能作为HTML5的一部分引入，使开发人员更容易获取其设备的位置。
- en: Mobile and tablet devices have **Global Positioning System** (**GPS**), and
    using this API, the hardware of the device can be accessed. Let's take an example
    of an application where you want to find nearby hotels. Using GPS, your location
    can be detected and a corresponding list of nearby hotels can be provided. This
    feature has reduced the effort of developers in implementing features related
    to geolocation. And yes, it is a feature which needs users' permission to work.
    A prompt is given to the user to allow the web application to access their location
    details.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 移动和平板设备具有**全球定位系统**（**GPS**），并且可以使用此API访问设备的硬件。让我们以一个应用程序为例，您想要找到附近的酒店。使用GPS，可以检测到您的位置，并提供附近酒店的相应列表。这个功能减少了开发人员在实现与地理定位相关的功能方面的工作。是的，这是一个需要用户许可才能工作的功能。用户会收到提示，允许Web应用程序访问他们的位置详情。
- en: Drag and drop
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拖放
- en: Drag and drop is a feature which was always there but could only be implemented
    using some plugins. The good news is that now it is a part of HTML5 standard.
    By leveraging this feature, a lot of new controls can be defined, as we also have
    the custom semantics feature which we can use to define our own custom controls.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 拖放是一个一直存在的功能，但只能使用一些插件来实现。好消息是现在它是HTML5标准的一部分。通过利用这个功能，可以定义许多新的控件，因为我们还有自定义语义功能，可以用来定义我们自己的自定义控件。
- en: 'Web applications use a lot of different controls or widgets to display the
    data in a more user-friendly way. For large-scale applications where lists and
    grids are the most important controls to display the data, drag and drop plays
    a very important role. Controls that show calendars or the timeline of a project
    need the drag-and-drop feature to make it more usable. Some of the basic interactions
    are:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序使用许多不同的控件或小部件以更加用户友好的方式显示数据。对于大规模应用程序，列表和网格是显示数据最重要的控件，拖放起着非常重要的作用。显示日历或项目时间表的控件需要拖放功能，以使其更易用。一些基本的交互包括：
- en: Rearranging items in a list
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表中重新排列项目
- en: Moving items from one list to another
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个列表中移动项目到另一个列表
- en: Rearranging layouts
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排列布局
- en: Dragging items around the canvas
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在画布上拖动项目
- en: Dragging a file from the computer to the browser
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从计算机拖动文件到浏览器
- en: There are many good examples of drag-and-drop features. Different companies
    have implemented and made their own component library, which implements the drag-and-drop
    feature. Some examples are Sencha, jQueryUI, KineticJS, Kendo UI, and so on.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多很好的拖放功能的例子。不同的公司已经实现并制作了自己的组件库，其中实现了拖放功能。一些例子包括Sencha、jQueryUI、KineticJS、Kendo
    UI等。
- en: Web workers
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web workers
- en: Web workers are just JavaScript running in background. JavaScript is mainly
    used to manipulate the HTML of a webpage at runtime and uses only one main thread.
    Web workers have made it possible to run a piece of JavaScript code in the background
    without affecting the current process. Normally, whenever we run a process in
    JavaScript, it runs in a queue fashion, which means that one process is executed
    at a time. It blocks the whole UI for some time and you can't click on buttons
    as well. This has had a huge impact on the application performance. That is one
    of the reasons why bigger web applications hesitate in choosing HTML, but web
    workers will surely change this.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Web workers只是在后台运行的JavaScript。JavaScript主要用于在运行时操作网页的HTML，并且只使用一个主线程。Web workers使得在后台运行一段JavaScript代码而不影响当前进程成为可能。通常，每当我们在JavaScript中运行一个进程时，它以队列方式运行，这意味着一次只执行一个进程。它会在一段时间内阻塞整个UI，你也无法点击按钮。这对应用程序的性能产生了巨大影响。这也是为什么更大的网络应用程序在选择HTML时犹豫不决的原因之一，但是Web
    workers肯定会改变这一点。
- en: JavaScript
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: HTML pages are static; to make them dynamic and interactive, JavaScript is used.
    JavaScript is called the language of the Web. It is based on **ECMAScript**, and
    every browser runs JavaScript. All the interactivity from the clicking of a button,
    navigation to pages, calling services, and so on is done by JavaScript.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: HTML页面是静态的；为了使它们动态和交互，使用JavaScript。JavaScript被称为Web的语言。它基于**ECMAScript**，每个浏览器都运行JavaScript。从点击按钮、导航到页面、调用服务等所有交互都是由JavaScript完成的。
- en: 'There are many frameworks built using JavaScript to make scripting easier to
    use: one of the majorly used frameworks is jQuery. It gives a user the flexibility
    to use DOM events, features, and API in a readable and meaningful way.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多使用JavaScript构建的框架，以使脚本编写更加容易：其中一个主要使用的框架是jQuery。它为用户提供了以可读和有意义的方式使用DOM事件、功能和API的灵活性。
- en: Modern servers
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代服务器
- en: JavaScript is improving at a quick rate. Most developers are now using JavaScript
    for client-side handling. Introduction of the **Node.js** server has changed the
    scope of work of developers. Earlier, developers used different servers, and for
    that, they had to learn lot of different languages. Node.js removed that gap and
    gave developers a platform where they could build a server which is JavaScript
    based.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript正在快速改进。大多数开发人员现在都在使用JavaScript进行客户端处理。**Node.js**服务器的引入改变了开发人员的工作范围。以前，开发人员使用不同的服务器，为此他们不得不学习许多不同的语言。Node.js消除了这一差距，并为开发人员提供了一个基于JavaScript的构建服务器的平台。
- en: JavaScript servers built on the Node.js platform are quite simple to use and
    increase productivity as well. Developers can make a server and run it in very
    less time. Creating a server in Node.js is very easy and has many features, such
    as real-time data transfer using different packages available. There are many
    frameworks which are built for Node.js, such as **Express.js**, which helps in
    speeding up the development process.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 建立在Node.js平台上的JavaScript服务器非常简单易用，也提高了生产力。开发人员可以在很短的时间内创建一个服务器并运行它。在Node.js中创建服务器非常容易，并且具有许多功能，例如使用不同的可用包进行实时数据传输。有许多为Node.js构建的框架，例如**Express.js**，它有助于加快开发过程。
- en: Node.js is free platform and provides a lot of different packages which can
    be distributed freely. The **Node** **Package Manager** (**NPM**) manages the
    dependencies for an application. It also is a version manager.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是免费平台，并提供许多可以自由分发的不同包。**Node** **Package Manager** (**NPM**)管理应用程序的依赖关系。它也是一个版本管理器。
- en: WebSockets
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebSockets
- en: With the growth in web applications, the need for real-time data which supports
    full-duplex communication has also increased. Real-time communication is always
    hard to implement, and people used Flash for the same. The reason Flash-like plugins
    are used is because this feature was missing in HTML standard. So whenever we
    wanted to implement such mechanisms in HTML, we used the polling mechanism, which
    is a very costly process in terms of performance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络应用程序的增长，对支持全双工通信的实时数据的需求也在增加。实时通信一直很难实现，人们过去使用Flash来实现这一点。之所以使用类似Flash的插件，是因为这一功能在HTML标准中缺失。所以每当我们想在HTML中实现这样的机制时，我们使用轮询机制，这在性能方面是非常昂贵的过程。
- en: HTML5 comes prepared for all the required features needs for a good web application.
    WebSockets is a part of HTML5 standard and the WebSocket API is fully available
    to be utilized.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5已经准备好了所有需要的功能，以满足良好的网络应用程序的需求。WebSockets是HTML5标准的一部分，WebSocket API完全可供利用。
- en: WebSockets gives a full-duplex communication between the client and server,
    which basically allows data transfer easily and on need basis, unlike the polling
    mechanism where we keep hitting the server on an interval to check for changes.
    WebSockets can send data from the server or client side—basically a connection
    bridge is opened which allows data transfer from both sides. WebSockets has eliminated
    the use of third-party plugins giving HTML developers the ability to implement
    it directly using the WebSockets API.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets为客户端和服务器之间提供了全双工通信，基本上允许数据在需要时轻松传输，而不像轮询机制那样在间隔上不断向服务器发送请求以检查变化。WebSockets可以从服务器或客户端发送数据，基本上打开了一个连接桥，允许双方进行数据传输。WebSockets已经消除了使用第三方插件的需求，使HTML开发人员能够直接使用WebSockets
    API进行实现。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have seen what the important elements of modern Web are in this chapter,
    and the enhanced features HTML5 standard has brought to us. We have been introduced
    to WebSockets, and in the next chapter, we will see the implementation of WebSockets
    from both the client and server side.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了现代Web的重要元素，以及HTML5标准带给我们的增强功能。我们已经介绍了WebSockets，在下一章中，我们将看到WebSockets在客户端和服务器端的实现。
