- en: Chapter 2. Getting Started with WebSockets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用WebSockets入门
- en: Client server communication is one of the most important parts of any web application.
    Data communication between the server and client has to be smooth and fast so
    that the user can have an excellent experience. If we look into the traditional
    methods of server communication, we will find that those methods were limited
    and were not really the best solutions. These methods have been used by people
    for a long period of time and made HTML the second choice for data communication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端服务器通信是任何Web应用程序中最重要的部分之一。 服务器和客户端之间的数据通信必须平稳快速，以便用户可以获得出色的体验。 如果我们研究传统的服务器通信方法，我们会发现这些方法是有限的，而且并不是真正的最佳解决方案。
    这些方法已经被人们使用了很长一段时间，并且使HTML成为数据通信的第二选择。
- en: Why WebSockets?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用WebSockets？
- en: 'The answer to why we need WebSockets lies in the question—what are the problems
    with the other methods of communication? Some of the methods used for server communication
    are request/response, polling, and long-polling, which have been explained as
    follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要WebSockets的答案在于这个问题——其他通信方法存在什么问题？ 用于服务器通信的一些方法是请求/响应，轮询和长轮询，已经解释如下：
- en: 'Request/Response: This is a commonly used mechanisms in which the client requests
    the server and gets a response. This process is driven by some interaction like
    the click of a button on the webpage to refresh the whole page. When AJAX came
    into the picture, it made the webpages dynamic and helped in loading some part
    of the webpage without loading the whole page.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求/响应：这是一种常用的机制，其中客户端请求服务器并获得响应。 这个过程是由一些交互驱动的，比如网页上按钮的点击来刷新整个页面。 当AJAX出现时，它使网页动态化，并帮助加载网页的某些部分而不加载整个页面。
- en: 'Polling: There are scenarios where we need the data to be reflected without
    user interaction, such as the score of a football match. In polling, the data
    is fetched after a period of time and it keeps hitting the server, regardless
    of whether the data has changed or not. This causes unnecessary calls to the server,
    opening a connection and then closing it every time.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮询：有些情况下，我们需要在没有用户交互的情况下反映数据，比如足球比赛的比分。 在轮询中，数据在一段时间后被获取，并且它不断地向服务器发送请求，无论数据是否已更改。
    这会导致不必要的对服务器的调用，每次都打开连接然后关闭连接。
- en: 'Long-polling: This is basically a connection kept open for a particular time
    period. This is one of the ways of achieving real-time communication, but it works
    only when you know the time interval.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长轮询：基本上是在特定时间段内保持打开的连接。 这是实现实时通信的一种方式，但仅当您知道时间间隔时才有效。
- en: The problems with these methods lead to the solution, which is WebSockets. It
    solves all the problems faced during the use of the old methods.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的问题导致了解决方案，即WebSockets。 它解决了在使用旧方法时遇到的所有问题。
- en: Importance of WebSockets
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets的重要性
- en: WebSockets comes into the picture to save us from the old heavy methods of server
    communication. WebSockets solved one of the biggest problems of server communication
    by providing a full-duplex two-way communication bridge. It provides both the
    server and client the ability to send data at any point of time, which was not
    provided by any of the old methods. This has not only improved performance but
    also reduced the latency of data. It creates a lightweight connection which we
    can keep open for a long time without sacrificing the performance. It also gives
    us full control to open and close the connection at any point of time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets出现来拯救我们摆脱旧的服务器通信方法。 WebSockets通过提供全双工的双向通信桥解决了服务器通信的最大问题之一。 它为服务器和客户端提供了在任何时间点发送数据的能力，这是任何旧方法都无法提供的。
    这不仅提高了性能，还减少了数据的延迟。 它创建了一个轻量级的连接，我们可以长时间保持连接而不牺牲性能。 它还允许我们在任何时间点完全控制打开和关闭连接。
- en: 'WebSockets comes as a part of HTML5 standard, so we do not need to worry about
    adding some extra plugin to make it work. WebSockets API is fully supported and
    implemented by JavaScript. Almost all modern browsers now support WebSockets;
    this can be checked using the website [http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets)
    which gives the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets是HTML5标准的一部分，因此我们不需要担心添加额外的插件来使其工作。 WebSockets API完全由JavaScript支持和实现。
    几乎所有现代浏览器现在都支持WebSockets； 可以使用网站[http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets)进行检查，该网站给出以下截图：
- en: '![Importance of WebSockets](img/B03854_02_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![WebSockets的重要性](img/B03854_02_01.jpg)'
- en: WebSockets need to be implemented on both the client and server side. On the
    client side, the API is a part of HTML5\. But on the server side, we need to use
    a library that implements WebSockets. There are many—or we can say almost all—servers
    that support WebSockets API libraries now. Node.js, which is a modern JavaScript
    based platform also supports WebSockets based server implementation using different
    packages, which makes it really easy for developers to code both server and client-side
    code without learning another language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets需要在客户端和服务器端都实现。 在客户端，API是HTML5的一部分。 但是在服务器端，我们需要使用实现WebSockets的库。
    现在有许多——或者我们可以说几乎所有——支持WebSockets API库的服务器。 Node.js是一个现代的基于JavaScript的平台，也支持使用不同包实现基于WebSockets的服务器，这使得开发人员可以轻松编写服务器和客户端代码，而无需学习另一种语言。
- en: When to use?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用？
- en: WebSockets being a very powerful way of communication between the client and
    server, it is really useful for applications which need a lot of server interaction.
    As WebSockets gives us the benefit of real-time communication, applications that
    require real-time data transfer, like chatting applications, can leverage WebSockets.
    It is not only used for real-time communication but also for scenarios where we
    need only the server to push the data to the client.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets作为客户端和服务器之间非常强大的通信方式，对于需要大量服务器交互的应用程序非常有用。 由于WebSockets使我们能够实现实时通信的好处，因此需要实时数据传输的应用程序，如聊天应用程序，可以利用WebSockets。
    它不仅用于实时通信，还用于只需要服务器向客户端推送数据的情况。
- en: The decision to use WebSockets can be made when we know the exact purpose of
    its usage. We should not use WebSockets when we just have to create a website
    with static pages and hardly any interaction. We should use WebSockets where the
    communication is higher in terms of data passing between the client and server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们知道其使用目的时，可以决定使用WebSockets。当我们只需创建一个具有静态页面和几乎没有交互的网站时，不应使用WebSockets。我们应该在客户端和服务器之间的数据传递方面使用WebSockets。
- en: There are many applications like stock applications where the data keeps updating
    in real time. Collaborative applications need real-time data sharing, such as
    a game of chess or a Ping-Pong game. WebSockets is majorly utilized in real-time
    gaming web applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多应用程序，如股票应用程序，其中数据保持实时更新。协作应用程序需要实时数据共享，例如国际象棋游戏或乒乓球游戏。WebSockets主要用于实时游戏Web应用程序。
- en: How it works?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: 'WebSockets communicates using the TCP layer. The connection is established
    over HTTP and is basically a handshake mechanism between the client and server.
    After the handshake, the connection is upgraded to TCP. Let''s see how it works
    through this flow diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets使用TCP层进行通信。连接是通过HTTP建立的，基本上是客户端和服务器之间的握手机制。握手后，连接升级为TCP。让我们通过这个流程图看看它是如何工作的：
- en: '![How it works?](img/B03854_02_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的？](img/B03854_02_02.jpg)'
- en: 'The following steps will take you through the flow shown in the preceding diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将带您完成前面图表中显示的流程：
- en: 'The first step is the HTTP call that is initiated from the client side; the
    header of the HTTP call looks like this:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是从客户端发起的HTTP调用；HTTP调用的标头如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `Host` is the name of the server that we are hitting.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，`Host`是我们正在访问的服务器的名称。
- en: '`Upgrade` shows that it is an upgrade call for, in this case, WebSockets. Connection
    defines that it is an upgrade call.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “升级”显示这是一个升级调用，这种情况下是WebSockets。连接定义了这是一个升级调用。
- en: '`Sec-Websocket-Key` is a randomly generated key which is further used to authenticate
    the response. It is the authentication key of the handshake.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sec-Websocket-Key`是一个随机生成的密钥，用于验证响应。这是握手的认证密钥。'
- en: '`Origin` is also another important parameter which shows where the call originated
    from; on the server side, it is used to check the requester''s authenticity.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Origin`也是另一个重要的参数，显示调用的来源；在服务器端，它用于检查请求者的真实性。'
- en: 'Once the server checks the authenticity a response is sent back, which looks
    like this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦服务器检查了真实性，就会发送回复，看起来像这样：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `Sec-WebSocket-Accept` has a key which is decoded and checked with the
    key sent for confirmation that the response is coming to the right originator.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，`Sec-WebSocket-Accept`有一个密钥，解码并与发送的密钥进行检查，以确认响应是否来自正确的发起者。
- en: So, once the connection is open, the client and server can send the data to
    each other.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，一旦连接打开，客户端和服务器就可以彼此发送数据。
- en: The data is sent in the form of small packets using TCP protocol. These calls
    are not HTTP so they are not visible directly under the Network tab of Developer
    Tools of a browser.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据以小数据包的形式使用TCP协议发送。这些调用不是HTTP，因此在浏览器的开发者工具的网络选项卡下不会直接显示。
- en: WebSocket API
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket API
- en: 'WebSockets standard is defined by W3\. The API interface for WebSockets looks
    like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets标准由W3定义。WebSockets的API接口如下所示：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see from the interface the types of ready states, networking events,
    and types of messages that WebSockets API provides.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从接口中看到WebSockets API提供的准备状态、网络事件和消息类型。
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，直接将文件发送到您的电子邮件。
- en: Ready states
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备状态
- en: 'Following are the ready states:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是准备状态：
- en: '**CONNECTING**: The connection has not yet been established.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CONNECTING**：连接尚未建立。'
- en: '**OPEN**: The WebSockets connection is established and communication is possible.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OPEN**：WebSockets连接已建立，可以进行通信。'
- en: '**CLOSING**: The connection is going through the closing handshake or the `close()`
    method has been invoked.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CLOSING**：连接正在进行关闭握手或已调用`close()`方法。'
- en: '**CLOSED**: The connection has been closed or could not be opened.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CLOSED**：连接已关闭或无法打开。'
- en: Events
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'Following are the events triggered:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是触发的事件：
- en: '**onopen**: Triggered when the connection is opened.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onopen**：当连接打开时触发。'
- en: '**onclose**: Triggered when the connection is closed.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onclose**：当连接关闭时触发。'
- en: '**onerror**: Triggered when an error is encountered.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onerror**：遇到错误时触发。'
- en: '**onmessage**: Triggered when a message is received from the server.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**onmessage**：当从服务器接收到消息时触发。'
- en: Echo Test
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回声测试
- en: Let us start with the **Echo Test** application. Go to the URL [https://www.websocket.org/echo.html](https://www.websocket.org/echo.html).
    Here you can see a readymade **Echo** server which we can hit and then receive
    a message. It just gives you a server; when you send a message to this server
    it will send the same message in return. Go ahead and play with your Echo application.
    After this, we will see how to write our own client code to hit this Echo server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从**回声测试**应用程序开始。转到URL [https://www.websocket.org/echo.html](https://www.websocket.org/echo.html)。在这里，您可以看到一个现成的**回声**服务器，我们可以访问，然后接收消息。它只是为您提供一个服务器；当您向该服务器发送消息时，它将返回相同的消息。继续玩您的回声应用程序。之后，我们将看到如何编写我们自己的客户端代码来访问这个回声服务器。
- en: '![Echo Test](img/B03854_02_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![回声测试](img/B03854_02_03.jpg)'
- en: The WebSockets client app
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets客户端应用
- en: 'Let us start with writing client-side code in JavaScript. We will be hitting
    the same Echo server for now. Let''s get started with our client-side code. Here
    is how the client code will look:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从JavaScript中编写客户端代码开始。我们现在将暂时使用相同的Echo服务器。让我们开始编写我们的客户端代码。以下是客户端代码的样子：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we run this code, we will get this output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这段代码，将得到以下输出：
- en: '![The WebSockets client app](img/B03854_02_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![WebSockets客户端应用程序](img/B03854_02_04.jpg)'
- en: 'This is a pretty straightforward code; developers with a little experience
    in JavaScript can also understand it. Let''s go through the code and understand
    what is happening. The sequence here is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的代码；有一点JavaScript经验的开发人员也可以理解。让我们来看看代码并理解发生了什么。这里的顺序如下：
- en: We open the connection with the server.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们与服务器建立连接。
- en: If it is successful, then we send the message to the server.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功，我们就向服务器发送消息。
- en: Once we receive the message from the server, we display it.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们从服务器接收到消息，我们就会显示它。
- en: Then, we close the connection.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们关闭连接。
- en: Let's talk about the important phases that we need to take care of whenever
    we are going to create any application using WebSockets.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈使用WebSockets创建任何应用程序时需要注意的重要阶段。
- en: Instantiation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化
- en: 'We can create an instance of a WebSockets object just like we create the instance
    of any other class. Here is how we can do it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像创建任何其他类的实例一样创建WebSockets对象的实例。以下是我们可以这样做的方法：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is only one important parameter that we need to pass, and that is the
    URI of the server. You will notice that we have used the **ws://** URL schema,
    which basically defines which protocol should be used for the communication. There
    is another URL schema, that is, **wss://**, which is used in case we want to use
    the secure communication, just like we have HTTPS for a secure connection.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要传递一个重要的参数，那就是服务器的URI。您会注意到我们使用了**ws://** URL模式，这基本上定义了通信应该使用哪种协议。还有另一个URL模式，即**wss://**，用于在我们想要使用安全通信时使用，就像我们有HTTPS用于安全连接一样。
- en: Adding events
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加事件
- en: 'We can add event handlers to a WebSockets object that are triggered in case
    of any event. There are four main events which we need to add handlers to and
    these are:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向WebSockets对象添加事件处理程序，在任何事件发生时触发。有四个主要事件需要添加处理程序，它们是：
- en: 'When we create an instance of the WebSockets object, we get the open event
    triggered, which tells us that the connection is now open. Here is how we have
    added the event:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们创建WebSockets对象的实例时，将触发打开事件，告诉我们连接现在已经打开。以下是我们添加事件的方式：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the connection is closed, the `onClose` method is called:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当连接关闭时，将调用`onClose`方法：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When we receive a message from a server, the `onmessage` event is triggered
    and we can handle it and get the data from it using the data property of the event:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们从服务器接收到消息时，将触发`onmessage`事件，我们可以处理它并使用事件的数据属性获取数据：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Sometimes we face some errors during connection because the server is down
    or some configuration issue has occurred, or due to other reasons. Due to these
    different possible reasons, we can get an error which is captured and given to
    the client in the `onerror` event handler:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时我们在连接过程中会遇到一些错误，因为服务器宕机或发生了一些配置问题，或者由于其他原因。由于这些不同的可能原因，我们可能会收到一个错误，该错误将在`onerror`事件处理程序中捕获并提供给客户端：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Sending messages
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送消息
- en: 'We can send not only strings but also objects, blobs, and array buffers as
    well to the server and vice versa. The send method is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以发送字符串，还可以发送对象、blob和数组缓冲区到服务器，反之亦然。发送方法如下：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is one of the important methods because we use it to send data to the server.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的方法，因为我们用它向服务器发送数据。
- en: Receiving messages
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接收消息
- en: 'Receiving data is also simple as we have already placed a handler for the event.
    So here we will get the data under the data property of the event object. In this
    scenario, we have added some styling and added that to the HTML page so that we
    can just have a visually attractive message, which we can see from the output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接收数据也很简单，因为我们已经为事件添加了处理程序。在这里，我们将在事件对象的数据属性下获取数据。在这种情况下，我们添加了一些样式并将其添加到HTML页面中，以便我们可以看到一个视觉上吸引人的消息，这可以从输出中看到：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Closing the connection
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭连接
- en: 'Connections also need to be closed; the best practice is to close the connection
    when we are done using it. Similarly we want the connection to the server to be
    closed once we receive the message. We have to make sure that we close the connection
    before exiting the application. We just simply have to call the `close()` method
    of the WebSocket object to close the open connection.The method to close the connection
    is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 连接也需要关闭；最佳实践是在使用完连接后关闭连接。同样，我们希望在接收到消息后关闭与服务器的连接。我们必须确保在退出应用程序之前关闭连接。我们只需调用WebSocket对象的`close()`方法即可关闭打开的连接。关闭连接的方法如下：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The WebSocket server
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket服务器
- en: We have seen how the client works and how we can send the data to the server
    and receive it from server. Now we will see how we can make our own server code
    handle the messages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了客户端的工作方式以及如何向服务器发送数据并从服务器接收数据。现在我们将看看如何让我们自己的服务器代码处理消息。
- en: Using modern web technology, we will explore the implementation of the WebSocket
    server using Node.js. Node.js is a very friendly, lightweight, and easy-to-use
    platform. So let's see how we can make our own WebSockets server.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用现代Web技术，我们将探索使用Node.js创建WebSocket服务器的实现。Node.js是一个非常友好、轻量级且易于使用的平台。让我们看看如何创建我们自己的WebSockets服务器。
- en: The Node.js server
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js服务器
- en: The Node.js server gives us a lot of flexibility to create our own server. There
    are many library packages available via NPM. We will be using a library created
    by Einar Otto Stangvik which basically handles general mechanisms, such as upgrading
    the HTTP protocol and others. It is a very robust, clean, and lightweight library.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js服务器为我们提供了很大的灵活性来创建我们自己的服务器。有许多通过NPM可用的库包。我们将使用Einar Otto Stangvik创建的库，它基本上处理一般机制，比如升级HTTP协议等。这是一个非常健壮、干净和轻量级的库。
- en: 'Now, to set up the server you must have Node.js installed on your machine.
    If you don''t have it installed, then go ahead and check out the website of Node.js
    ([https://nodejs.org/](https://nodejs.org/)), read the documentation, and install
    it. Refer to the following steps to install WebSocket server:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要设置服务器，您必须在您的计算机上安装Node.js。如果您还没有安装，那就去查看Node.js的网站（[https://nodejs.org/](https://nodejs.org/)），阅读文档，并安装它。参考以下步骤安装WebSocket服务器：
- en: Create a new project in Node.js using NPM. You just need to run the `npm init`
    command. Follow the instructions that come after it.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Node.js中使用NPM创建一个新项目。您只需要运行`npm init`命令。按照随后的说明操作。
- en: This will create a `package.json` file which will have all the information of
    the project and related packages. This is very useful for version and package
    controlling. Here is how the Node.js command prompt will look after firing the
    `npm init` command:![The Node.js server](img/B03854_02_05.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个`package.json`文件，其中包含项目和相关包的所有信息。这对于版本和包的控制非常有用。这是`npm init`命令执行后Node.js命令提示符的样子：![Node.js服务器](img/B03854_02_05.jpg)
- en: Once done, we need to set up the WebSockets package using the `npm install ws`
    command. This command will install the necessary libraries for the WebSocket connection,
    which will look like the following:![The Node.js server](img/B03854_02_06.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们需要使用`npm install ws`命令设置WebSockets包。这个命令将安装WebSocket连接所需的库，看起来会像这样：![Node.js服务器](img/B03854_02_06.jpg)
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible that you may get some error related to Python. Please ignore
    it. This library has some other features which require Python to be installed,
    but the features we are utilizing are not related to Python, so we can ignore
    it. This error will not affect our development process and our code will work
    fine.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现与Python相关的错误。请忽略它。这个库有一些其他功能需要安装Python，但我们正在使用的功能与Python无关，所以我们可以忽略它。这个错误不会影响我们的开发过程，我们的代码将正常工作。
- en: 'Now we are ready to code. First, we will create our server JavaScript file
    named `server.js`, which will be our main server file. Please note that it should
    be created within the same folder wherein we have run the previous command `npm
    init`. The server code will look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备编码。首先，我们将创建我们的服务器JavaScript文件，命名为`server.js`，这将是我们的主服务器文件。请注意，它应该在我们之前运行`npm
    init`命令的同一个文件夹中创建。服务器代码将如下所示：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is a very simple server. Let''s go through the code step by step:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的服务器。让我们逐步了解代码：
- en: 'Here we are just creating an instance of WebSocketServer and defining on which
    port it should listen. Sometimes port `8080` is not available so you may get an
    error. Don''t worry; you can simply change it by doing the following:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们只是创建了一个WebSocketServer实例，并定义了它应该监听的端口。有时端口`8080`不可用，所以您可能会收到错误。不用担心；您可以通过以下方式简单地更改它：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once we have the instance we have to add the connection listener, which is
    triggered if the connection is established:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了实例，我们就需要添加连接监听器，如果连接建立，它就会被触发：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the connection is established, we need to add the listener for that particular
    WebSockets connection instance. This instance can be used for many purposes like
    sending messages:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦连接建立，我们需要为特定的WebSockets连接实例添加监听器。这个实例可以用于许多目的，比如发送消息：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then comes the message sending part. As we are creating an Echo server, we
    just need to send the message we received back. So we are using the same message
    and sending it through the WebSockets instance:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后是消息发送部分。因为我们正在创建一个Echo服务器，所以我们只需要将收到的消息发送回去。所以我们使用相同的消息，并通过WebSockets实例发送它：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once we write the code it is time to test it. We need to start our Node.js
    server which we can do using the following command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们编写了代码，就该是测试的时候了。我们需要启动我们的Node.js服务器，可以使用以下命令来完成：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the server is started, we just have to change a single line from the client
    side code, which we developed earlier in the chapter—the server URI that we were
    hitting. Earlier, we were hitting the [www.websocket.org](http://www.websocket.org)
    website, but now we have to hit the server we have made. We just replace the URI
    from `ws://demo.websocket.org` to `ws://localhost:8080` and we are good to go.
    We can run our client application file the same way we did in our last client
    application and see the result:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦服务器启动，我们只需要从客户端代码中更改一行——我们在本章前面开发的服务器URI。之前，我们访问的是[www.websocket.org](http://www.websocket.org)网站，但现在我们需要访问我们自己的服务器。我们只需将URI从`ws://demo.websocket.org`更改为`ws://localhost:8080`，然后就可以运行我们的客户端应用程序文件，就像我们在上一个客户端应用程序中做的那样，并查看结果：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![The Node.js server](img/B03854_02_07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Node.js服务器](img/B03854_02_07.jpg)'
- en: The result will be same as the previous one.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将与之前的相同。
- en: Congratulations! You have just made your first WebSockets Echo application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚创建了您的第一个WebSockets Echo应用程序。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to write client and server side code. We
    understood how Node.js can be used as a server for WebSockets and how we can leverage
    it to create a small server so quickly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何编写客户端和服务器端代码。我们了解了如何将Node.js用作WebSockets服务器，以及如何利用它快速创建一个小型服务器。
- en: In the next chapter, we will be making a simple application where we will see
    how WebSockets can be used.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将制作一个简单的应用程序，看看WebSockets如何被使用。
