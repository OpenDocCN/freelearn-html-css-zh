- en: Chapter 5. WebSockets for Mobile and Tablet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。移动和平板电脑的WebSockets
- en: WebSockets work great on the Web and have a good performance. We have seen how
    easy and powerful WebSockets are to implement on the web. With the growth of mobile
    phones, the need for applications to shift from desktop to mobile has become very
    important. In this chapter, we will focus on how WebSocket behaves and its implementation
    on mobile and tablets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: WebSockets在Web上运行良好并且性能良好。我们已经看到了在Web上实现WebSockets是多么简单和强大。随着手机的增长，应用程序从桌面转移到移动设备的需求变得非常重要。在本章中，我们将重点关注WebSocket的行为以及在移动设备和平板电脑上的实现。
- en: Mobile devices and the WebSocket
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动设备和WebSocket
- en: 'The whole world is moving to mobile devices; then why shouldn''t we? Mobiles
    have become very powerful and they can do what a computer can do. Similarly, browsers
    have become very powerful and they have also started adopting HTML5\. Not only
    browsers, even application support has increased. Lots of applications are available
    with lots of features. And here, WebSockets plays an important role: whenever
    there is a need for real-time data transfer, WebSockets are there to help us out.
    Let''s see a few instances where WebSockets can be helpful:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 整个世界都在转向移动设备；那么我们为什么不呢？手机已经变得非常强大，它们可以做电脑能做的事情。同样，浏览器也变得非常强大，它们也开始采用HTML5。不仅仅是浏览器，甚至应用程序的支持也增加了。有很多应用程序提供了很多功能。在这里，WebSockets扮演了一个重要的角色：每当需要实时数据传输时，WebSockets都可以帮助我们。让我们看一些WebSockets可以帮助的情况：
- en: Chatting applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天应用程序
- en: Video conferencing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频会议
- en: Gaming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏
- en: Dashboard with real-time data update
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有实时数据更新的仪表板
- en: Stock application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 股票应用
- en: Sports score applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 体育比分应用程序
- en: Real-time data updates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据更新
- en: Now all these applications can be made on the Web and the same is compatible
    with browsers, thanks to modern browsers that support HTML5.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些应用程序都可以在Web上制作，并且与浏览器兼容，这要归功于支持HTML5的现代浏览器。
- en: 'To implement WebSockets on mobile, there are some libraries available that
    can be used. The need is to provide a consistent way of implementing WebSockets
    in different backend technologies. There are some libraries which provide these:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在移动设备上实现WebSockets，有一些可用的库可以使用。需要提供一种一致的方式来在不同的后端技术中实现WebSockets。有一些库提供了这些功能：
- en: Pusher
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推动者
- en: Socket.IO
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Socket.IO
- en: Pusher
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推动者
- en: Pusher is a famous library which helps you to make real-time applications. You
    can find it at [http://www.pusher.com](http://www.pusher.com). It is a set of
    libraries built to be integrated with different applications which are built on
    different servers, such as Ruby on Rails, Python, PHP, and Node. Not only on the
    server side, they also provide support for JavaScript-based applications along
    with iOS and Android devices as well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Pusher是一个著名的库，可帮助您制作实时应用程序。您可以在[http://www.pusher.com](http://www.pusher.com)找到它。这是一组构建的库，可与不同服务器上构建的不同应用程序集成，例如Ruby
    on Rails、Python、PHP和Node。它不仅在服务器端提供支持，还为基于JavaScript的应用程序以及iOS和Android设备提供支持。
- en: Pusher is an event-based API and implements a publisher/subscriber mechanism.
    Here, subscriber is the server and publisher is the client. Subscriber subscribes
    to the events and publisher triggers those events which the subscriber listens
    to. To achieve this functionality, publisher and subscriber implement WebSockets
    internally, which basically provides a real-time experience.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Pusher是一个基于事件的API，并实现了发布者/订阅者机制。在这里，订阅者是服务器，发布者是客户端。订阅者订阅事件，发布者触发订阅者监听的事件。为了实现这个功能，发布者和订阅者在内部实现了WebSockets，这基本上提供了实时体验。
- en: Another big advantage of the Pusher API is that it has a fallback mechanism
    where when WebSockets is not available, for instance, in some older browser versions,
    then it uses other technologies such as Flash internally to send the data across.
    This gives an upper hand to this library so that we don't need to have a different
    implementation for different browsers and devices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Pusher API的另一个重大优势是它具有备用机制，当WebSockets不可用时，例如在一些较旧的浏览器版本中，然后它在内部使用Flash等其他技术来发送数据。这使得该库具有优势，因此我们不需要为不同的浏览器和设备编写不同的实现。
- en: Socket.IO
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Socket.IO
- en: Socket.IO is another library completely based on JavaScript. Not only the client
    side, it completely supports the Node.js server as well. This library provides
    high performance real-time data transfer and it uses WebSockets under the hood.
    You can make all kinds of real-time collaborative applications using this API.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Socket.IO是另一个完全基于JavaScript的库。它不仅支持客户端，还完全支持Node.js服务器。该库提供高性能的实时数据传输，并在内部使用WebSockets。您可以使用此API制作各种实时协作应用程序。
- en: Running server on mobile
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在移动设备上运行服务器
- en: 'Till now we were working on a local server and application, but to run the
    application on a mobile, we need to shift our client application code to a server
    in such a way that it will cater to the application from a server URL. For this
    we will take a simple example: basically, we are going to change an application
    we have already created. In [Chapter 2](ch02.html "Chapter 2. Getting Started
    with WebSockets"), *Getting Started with WebSockets*, we developed an application
    for Echo test, which basically returns whatever we send to the server. Now let''s
    see how it will work on a mobile phone.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在本地服务器和应用程序上工作，但是要在移动设备上运行应用程序，我们需要将客户端应用程序代码转移到服务器，以便以服务器URL为应用程序提供服务。为此，我们将举一个简单的例子：基本上，我们将要更改一个我们已经创建的应用程序。在[第2章](ch02.html
    "第2章。开始使用WebSockets")中，*开始使用WebSockets*，我们为Echo测试开发了一个应用程序，它基本上返回我们发送到服务器的任何内容。现在让我们看看它在手机上的运行方式。
- en: 'Firstly, we will change the server code so that it caters to the client code.
    Here are the changes we will make on the server side:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更改服务器代码，以满足客户端代码。以下是我们将在服务器端进行的更改：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we have not done anything specific to the mobile; we have just created
    another server which provides us with the main client files. We have used an `Express.js`
    server here, which is helpful in delivering the content through the server. You
    can read more about an Express.js server and how it works on the Internet. Here,
    our main focus is just to create a server that will listen on a particular port.
    So when anyone hits that particular URL, we will get the client application running
    on the browser.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些设置完成，您就可以开始了。只需在您的移动设备上打开Chrome浏览器，打开服务器URL `http://localhost:3000`，看到魔法。您将看到与我们在桌面上看到的相同的输出。
- en: 'To install Express.js server, we just need to run the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Chrome浏览器，转到`chrome://inspect`。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This package needs to be installed in the same directory as of the our `server.js`
    file. This is important because our server will run and use this package and if
    not found then server may not work the way we want and throw an error.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件包需要安装在与我们的`server.js`文件相同的目录中。这很重要，因为我们的服务器将运行并使用这个软件包，如果找不到它，服务器可能无法按我们想要的方式工作并抛出错误。
- en: Here, we are listening on the `3000` port, so whenever we open `http://localhost:3000`,
    it will open the specified file. We have defined the file under the `public` folder,
    `index.html`. So, the first file that will be opened for us is the `index.html`
    file and we will see its contents. Just like we have done in the earlier chapters,
    we are doing the same coding for the client side code as well and there is literally
    no change in it. Only the location of the file has changed and nothing else.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们监听`3000`端口，所以每当我们打开`http://localhost:3000`时，它将打开指定的文件。我们已经在`public`文件夹下定义了文件，`index.html`。因此，我们将打开的第一个文件是`index.html`文件，我们将看到它的内容。就像我们在之前的章节中所做的那样，我们也在客户端代码中做了同样的编码，几乎没有任何变化。只是文件的位置已经改变了，没有别的。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如您所见，应用程序的输出没有任何变化。它与我们在桌面上看到的完全相同。
- en: Make sure that the all the client code and its related libraries will go in
    the `public` folder because we are picking it from public folder, if not properly
    placed error may occur.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更改完成，您可以启动服务器并在浏览器中检查它是否工作。由于您监听`3000`端口，只需在浏览器中运行`http://localhost:3000`，确保应用程序正常运行。
- en: Once the changes are made you can start the server and check it in the browser
    to see whether it is working or not. As you listen on the `3000` port, just run
    `http://localhost:3000` in your browser and make sure the application is running
    fine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Express.js服务器，我们只需要运行以下命令：
- en: Local server on mobile
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保所有客户端代码及其相关库都放在`public`文件夹中，因为我们是从公共文件夹中提取它，如果没有正确放置，可能会出现错误。
- en: 'Once the changes are done, we need to run the local server on our mobile phone.
    This seems difficult but actually it is not. Google Chrome provides us with a
    great feature through which we can use our local server on mobile browsers as
    well. Here are the steps we need to implement to run a local server on mobile:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更改完成后，我们需要在手机上运行本地服务器。这似乎很困难，但实际上并不是。谷歌Chrome为我们提供了一个很棒的功能，通过它我们可以在移动浏览器上使用本地服务器。以下是我们需要实施的在移动设备上运行本地服务器的步骤：
- en: Start USB debugging in your mobile/tablet device.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意
- en: Connect your device using USB to your computer.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: Open the Chrome browser and go to `chrome://inspect`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用USB将您的设备连接到计算机。
- en: This will inspect the connected devices.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的移动/平板设备上启用USB调试。
- en: 'Now the main setting we need to consider is **Port forwarding**. We are using
    two different ports: `3000` for the client and `9001` for the WebSocket server.
    Just make sure you add both of them in the **Port forwarding settings**.![Local
    server on mobile](img/B03854_05_01.jpg)'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要考虑的主要设置是**端口转发**。我们使用两个不同的端口：`3000`用于客户端，`9001`用于WebSocket服务器。只需确保将它们都添加到**端口转发设置**中。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are still facing problems in setting up your mobile device, then visit
    [https://developer.chrome.com/devtools/docs/remote-debugging](https://developer.chrome.com/devtools/docs/remote-debugging).
    You will get all the details on how to set up your mobile device.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们没有针对移动设备做任何特定的事情；我们只是创建了另一个服务器，为我们提供主要的客户端文件。我们在这里使用了`Express.js`服务器，它有助于通过服务器提供内容。您可以在互联网上阅读更多关于`Express.js`服务器及其工作原理的信息。在这里，我们的主要重点只是创建一个将监听特定端口的服务器。因此，当有人访问该特定URL时，我们将在浏览器上运行客户端应用程序。
- en: Once these settings are done, you are good to go. Just open the Chrome browser
    in your mobile device and open the server URL `http://localhost:3000` and see
    the magic. You will see the same output as we seen on the desktop.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将检查连接的设备。
- en: We are able to achieve this output behavior in a very simple fashion just because
    of HTML5, as HTML5 shows consistent behavior in almost all browsers and it is
    being adopted by most browsers. This gives us the benefit of making our application
    using HTML5 WebSockets and having it run almost everywhere. The one thing we need
    to make sure while building an application is that it has responsive design, as
    mobile devices have different resolutions and different screen sizes. This is
    a major problem that needs to be taken care of while creating an application.
    But thanks to HTML5, we have media queries which give us a feature to handle such
    scenarios easily.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTML5的原因，我们能够以非常简单的方式实现这种输出行为，因为HTML5在几乎所有浏览器中都表现一致，并且大多数浏览器都在采用它。这使我们能够使用HTML5
    WebSockets制作应用程序，并使其几乎在任何地方运行。在构建应用程序时，我们需要确保具有响应式设计，因为移动设备具有不同的分辨率和不同的屏幕尺寸。这是在创建应用程序时需要注意的一个主要问题。但多亏了HTML5，我们有了媒体查询，可以轻松处理这种情况。
- en: Mobile output
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手机输出
- en: As you can see, there is no change in the output of the application. It is exactly
    the same as we have seen on desktop.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![移动设备上的本地服务器](img/B03854_05_01.jpg)'
- en: '![Mobile output](img/B03854_05_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![手机输出](img/B03854_05_02.jpg)'
- en: Browser support
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果您在设置移动设备时仍然遇到问题，请访问[https://developer.chrome.com/devtools/docs/remote-debugging](https://developer.chrome.com/devtools/docs/remote-debugging)。您将获得有关如何设置移动设备的所有详细信息。
- en: HTML5 is being adopted by almost all browsers even in mobile and tablet devices.
    This gives us an upper hand while using a WebSocket application in almost all
    modern browsers. To check which mobile browsers are supported, visit [http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets),
    which gives us a list of all the browsers that support WebSockets.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5已经被几乎所有浏览器采用，甚至在移动和平板设备上也是如此。这使得我们在几乎所有现代浏览器中使用WebSocket应用程序时具有优势。要检查哪些移动浏览器受支持，请访问[http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets)，这将为我们提供支持WebSockets的所有浏览器的列表。
- en: Do it yourself
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自己动手
- en: 'It''s time to do it yourself: creating an application for a mobile device is
    as easy as it is for the desktop. Now let''s transform some of our applications
    for mobile.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候自己动手了：为移动设备创建应用程序与为桌面设备创建应用程序一样容易。现在让我们将一些应用程序转换为移动设备。
- en: Scenario 1
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景1
- en: As we have developed a presentation sharing and drawing application, we will
    now make them available for mobile as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经开发了一个演示共享和绘图应用程序，现在我们也将它们提供给移动设备。
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'This is a very easy task: as we know, we just have to change the server so
    that it provides the client application and we are good. The reason that we don''t
    have to change anything else is that the libraries we have used for the application
    are so well-written that they can adapt to the mobile view as well. Just try it
    out.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的任务：正如我们所知，我们只需更改服务器以提供客户端应用程序，然后就可以了。我们不必改变其他任何东西的原因是，我们用于应用程序的库编写得非常好，它们也可以适应移动视图。试试看。
- en: 'Here is how it will look when you open the presentation sharing application
    on mobile:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在移动设备上打开演示共享应用程序时，它将是这个样子：
- en: '![Scenario 1](img/B03854_05_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![情景1](img/B03854_05_03.jpg)'
- en: Scenario 2
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景2
- en: The server is going to be the same, but you can play around with the client
    application interface to make it responsive as per the device screen size, which
    can be achieved using **Bootstrap**-like libraries. And for real-time data transfer,
    you can use the Socket.IO API which is really easy to use and implement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将保持不变，但您可以通过使用类似**Bootstrap**的库来调整客户端应用程序界面，使其根据设备屏幕大小进行响应。对于实时数据传输，您可以使用非常易于使用和实现的Socket.IO
    API。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Create a chat application for desktop and mobile**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**为桌面和移动创建一个聊天应用程序**'
- en: For this, you need to create a server which just takes a message and broadcasts
    it to all. And the client will be simple so that it just sends a message to the
    server. It is pretty simple and straightforward, but the catch is that you need
    to make it for desktop as well as mobile.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您需要创建一个服务器，它只接收消息并将其广播给所有人。客户端将非常简单，以便它只向服务器发送消息。这很简单直接，但关键是您需要为桌面和移动设备制作它。
- en: 'Please see the following image for reference:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下图片。
- en: '![Scenario 2](img/B03854_05_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![情景2](img/B03854_05_04.jpg)'
- en: Scenario 3
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景3
- en: Make a question game in which you can ask a question, just by entering the question
    and its options using a user interface. The other person will get the question
    and answer it. As soon as it is answered, you will receive it right away.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个问题游戏，您可以通过使用用户界面输入问题和选项来提问。其他人将收到问题并回答。一旦回答，您将立即收到答案。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Just like a chat application, you can use the same Socket.IO API to send the
    data. The rest is all easy—as soon as user answers the question, you can send
    it using the API.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就像聊天应用程序一样，您可以使用相同的Socket.IO API来发送数据。其余的都很容易——只要用户回答问题，您就可以使用API发送它。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have seen in this chapter how easy it is to code in HTML5 utilizing its features
    to provide a device-independent application. WebSockets support is available in
    almost all modern browsers, and this has made our life easy in terms of developing
    consistent applications—we don't have to write different code for different devices.
    We have also seen how Node.js provides flexibility and great support for different
    devices. In this chapter, we have explored different mobile applications and some
    APIs which help us in implementing WebSockets, along with how to set up a local
    server to run applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了在HTML5中编码是多么容易，利用其特性提供设备无关的应用程序。几乎所有现代浏览器都支持WebSockets，这使得我们在开发一致的应用程序方面变得更加容易——我们不必为不同的设备编写不同的代码。我们还看到了Node.js如何为不同的设备提供灵活性和良好的支持。在本章中，我们探讨了不同的移动应用程序和一些API，这些API有助于我们实现WebSockets，以及如何设置本地服务器来运行应用程序。
- en: In the next chapter, we will see how to enhance the HTML5 web application development
    using modern tools.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用现代工具增强HTML5 Web应用程序开发。
