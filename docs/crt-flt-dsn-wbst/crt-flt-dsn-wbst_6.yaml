- en: Chapter 6. Creating Your Own Flat UI Kit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。创建您自己的Flat UI套件
- en: In this last chapter, we'll learn how you can create your own personal Flat
    UI kit. We will cover all phases of the process, from designing to developing
    and exporting your assets. These are the most important elements that you need
    to bear in mind while creating your own pack. We will also explain how to ensure
    ease of use for you or anyone else by documenting every element and usage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们将学习如何创建自己的个人Flat UI套件。我们将涵盖整个过程的所有阶段，从设计到开发和导出您的资产。这些是您在创建自己的套件时需要牢记的最重要的元素。我们还将解释如何通过记录每个元素和用法来确保您或其他人的使用便捷。
- en: Designing your components
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计您的组件
- en: To create your own Flat UI pack, the first step is to define which elements
    you should create. Your objective is to create and gather a pack of elements to
    reuse in future projects, so you should look for basic interface elements that
    are common to most projects. Elements such as buttons, form controls such as radio
    buttons and checkboxes, form content areas such as text fields and text areas,
    title style, and sizes such as `<h1>`, `<h2>`, and `<h3>`, once designed, thought
    of, and developed, can be reused in several projects. Often, a web designer finds
    himself or herself reusing old HTML and CSS code, so creating your own personal
    pack is great in order to make your workflow easier and quicker.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自己的Flat UI包，第一步是定义您应该创建哪些元素。您的目标是创建并收集一组元素以便将来在项目中重复使用，因此您应该寻找大多数项目中常见的基本界面元素。例如按钮、表单控件（如单选按钮和复选框）、表单内容区域（如文本字段和文本区域）、标题样式和大小（如`<h1>`、`<h2>`和`<h3>`）一旦设计、思考和开发完成，就可以在多个项目中重复使用。通常，网页设计师发现自己在重复使用旧的HTML和CSS代码，因此创建自己的个人包对于使工作流程更加轻松和快速非常有帮助。
- en: The first phase of creating your own Flat UI pack is to design your elements.
    There are several designs online for UI packs, web elements, and even great icon
    packs that you can use as an inspiration for your own work. A simple search on
    [dribbble.com](http://dribbble.com) will help you find great elements that you
    can use as inspiration, or even some freebies that you can use as a foundation
    to create your own designs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 创建您自己的Flat UI包的第一阶段是设计您的元素。有几种在线设计可供UI包、网页元素，甚至很棒的图标包，您可以将其用作自己工作的灵感。在[dribbble.com](http://dribbble.com)上简单搜索将帮助您找到可以用作灵感的优秀元素，甚至一些免费赠品，您可以将其用作创建自己设计的基础。
- en: 'The following screenshot shows an example of a Flat UI pack by Alexandre Crenn
    at [http://dribbble.com/shots/1020321-FREE-Pack-UI-PSD](http://dribbble.com/shots/1020321-FREE-Pack-UI-PSD):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Alexandre Crenn在[dribbble.com/shots/1020321-FREE-Pack-UI-PSD](http://dribbble.com/shots/1020321-FREE-Pack-UI-PSD)上的Flat
    UI包的示例：
- en: '![Designing your components](img/0048OS_06_04.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![设计您的组件](img/0048OS_06_04.jpg)'
- en: To create your pack, define what elements you want to include and design. Make
    a list of the elements you need most and that you will be working on, and then
    start designing them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您的包，定义您想要包含和设计的元素。列出您最需要的元素，并开始设计它们。
- en: 'As an example, let''s do an exercise and create one of those elements for your
    personal pack. Let''s create a button, as it''s one of the most used and more
    visually impactful elements of them all, by executing the following steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们做一个练习，为您的个人包创建其中一个元素。让我们创建一个按钮，因为它是所有元素中最常用和最具视觉冲击力的元素之一，执行以下步骤：
- en: Open Photoshop and create a new 320 by 95 px document.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Photoshop并创建一个新的320 x 95像素文档。
- en: Using the rounded rectangle tool, create a rectangle with 8 px of radius and
    `#2ecc71` as the background color. The output will be similar to what is shown
    in the following screenshot:![Designing your components](img/0048OS_06_01.jpg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用圆角矩形工具，创建一个半径为8像素、背景颜色为`#2ecc71`的矩形。输出将类似于下图所示：![设计您的组件](img/0048OS_06_01.jpg)
- en: Let's create a more interesting flat button this time and give it some depth.
    Duplicate this layer, change its color to `#27ae60`, and move it 5 px down. Make
    sure that this second rectangle is under the first one that we've created in the
    layer order. This makes the second rectangle appear as a side of the button along
    with its shadow. Only by making this slight change, you'll be able to see that
    we have a depth effect in the button, as shown in the following screenshot:![Designing
    your components](img/0048OS_06_02.jpg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次让我们创建一个更有趣的平面按钮，并赋予它一些深度。复制此图层，将其颜色更改为`#27ae60`，并向下移动5像素。确保这第二个矩形在图层顺序中位于我们创建的第一个矩形下方。这使得第二个矩形与其阴影一起出现在按钮的一侧。仅通过进行这种轻微的更改，您就能看到我们在按钮中产生了深度效果，如下图所示：![设计您的组件](img/0048OS_06_02.jpg)
- en: To finish designing our button, let's create a text field with `CLICK HERE`
    written on it. Use type face Lato, font style white, and set the size as 20 pt.
    Now, create a drop shadow layer style in the text layer with 1 px of distance
    and 1 px of size, color black with 33 percent opacity.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成设计我们的按钮，让我们创建一个文本字段，上面写着“点击这里”。使用Lato字体，白色字体样式，将大小设置为20 pt。现在，在文本图层中创建一个带有1像素距离和1像素大小的投影层样式，颜色为黑色，不透明度为33%。
- en: Now, our new flat button is complete, as shown in the following screenshot:![Designing
    your components](img/0048OS_06_03.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的新平面按钮已经完成，如下截图所示：![设计您的组件](img/0048OS_06_03.jpg)
- en: As you can see, we used a drop shadow in the text and a 3D depth effect in this
    flat button. You might be wondering about this, as I had previously spoken against
    the use of such effects. The truth is that you can use a drop shadow and even
    a 3D object, such as the one used in the preceding image, as long as you're able
    to use them wisely and in a subtle way. This button, even with a drop shadow and
    depth, still looks flat, and looks definitely more appealing with this kind of
    characteristics. However, it is, in essence, still a flat button, and not a direct
    representation of a physical button. Also, the drop shadow is very subtle in the
    text, just enough to pop the text a bit. As with everything, don't be too harsh
    with the rules; try to experiment with the style and see what works best. However,
    to achieve minimalism, you need to be able to focus on the essentials and design
    clean elements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在文本中使用了阴影和3D深度效果，这是一个扁平按钮。您可能会对此感到疑惑，因为我之前曾反对使用这样的效果。事实是，只要您能明智地使用它们并以微妙的方式使用它们，您可以使用阴影甚至3D对象，就像在前面的图像中使用的那样。这个按钮，即使有阴影和深度，看起来仍然是扁平的，并且具有这种特征肯定更具吸引力。然而，本质上，它仍然是一个扁平按钮，而不是一个直接代表物理按钮的按钮。此外，文本中的阴影非常微妙，只是足够突出文本。与一切一样，不要对规则太苛刻；尝试用样式进行实验，看看哪种效果最好。然而，要实现极简主义，您需要能够专注于基本要素并设计干净的元素。
- en: Now that we have designed our button, we are ready to translate this into code.
    As this button can be entirely created in HTML and CSS, thanks to CSS3 border-radius
    and text-shadow features, we don't need to do any image exporting. However, in
    a different element, say a radio button or a checkbox, we would need to prepare
    those images. So, we move on to the next step, that is, exporting images and coding
    your elements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设计好了我们的按钮，我们准备将其转化为代码。由于这个按钮可以完全由HTML和CSS创建，多亏了CSS3的border-radius和text-shadow功能，我们不需要做任何图像导出。然而，在不同的元素中，比如单选按钮或复选框，我们需要准备这些图像。因此，我们继续进行下一步，即导出图像并编写您的元素代码。
- en: Exporting and coding
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出和编码
- en: 'As I said before, this step is where you would export and prepare any images
    needed for your pack. There are a few different ways of dealing with images. Be
    it an icon or a background, you should try to optimize your images as best as
    possible. A great way to reduce the size of images and speed up the loading of
    a page is by using CSS Sprites. Sprites were originally used for video games where
    a single image file would have several frames of an animation, which were then
    loaded, and changing the coordinates of the image shown would create the animation,
    just like in a traditional animation. The following screenshot shows Super Mario
    Bros. 3 Sprite Sheets:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说，这一步是您需要为您的包导出和准备任何图像的步骤。处理图像有几种不同的方法。无论是图标还是背景，您都应该尽量优化您的图像。减小图像大小并加快页面加载速度的一个很好的方法是使用CSS
    Sprites。Sprites最初是用于视频游戏，其中单个图像文件会有几个动画帧，然后加载这些帧，并改变图像的坐标来创建动画，就像传统动画一样。以下截图显示了超级马里奥兄弟3的Sprite表：
- en: '![Exporting and coding](img/0048OS_06_05.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![导出和编码](img/0048OS_06_05.jpg)'
- en: 'This same technique is used for web and interface designs, by creating buttons,
    icons, and several states, and including them in just a single image, and then
    using CSS to show only the portion that we need for a certain element. There are
    programs and online applications that can be very helpful to create the CSS code
    for those Sprites, which is a lot quicker than calculating them and creating all
    the CSS code manually. Online applications such as Sprite Cow ([http://www.spritecow.com/](http://www.spritecow.com/))
    and software such as Sprite Right ([http://spriterightapp.com/](http://spriterightapp.com/))
    are extremely helpful to create CSS Sprites, and you should definitely take a
    look at them and try using sprites in your next big project. For now, let''s go
    back to our button. The following screenshot shows sprites from Amazon.com:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术也用于Web和界面设计，通过创建按钮、图标和几种状态，并将它们包含在一个单一的图像中，然后使用CSS仅显示我们需要的部分来实现。有一些程序和在线应用程序可以帮助创建这些Sprites的CSS代码，这比手动计算和创建所有CSS代码要快得多。在线应用程序，如Sprite
    Cow ([http://www.spritecow.com/](http://www.spritecow.com/))和Sprite Right ([http://spriterightapp.com/](http://spriterightapp.com/))等软件非常有助于创建CSS
    Sprites，您应该一定要看看它们，并尝试在下一个大型项目中使用Sprites。现在，让我们回到我们的按钮。以下截图显示了来自Amazon.com的Sprites：
- en: '![Exporting and coding](img/0048OS_06_06.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![导出和编码](img/0048OS_06_06.jpg)'
- en: 'Since our button is made up of only code, we can go directly into development
    without the need to export any image for this element. So let''s jump straight
    to our code editor and perform the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的按钮只由代码组成，我们可以直接进行开发，而无需为此元素导出任何图像。因此，让我们直接跳转到我们的代码编辑器，并执行以下步骤：
- en: 'Let''s first create the HTML code for our button. We''ll need to create a simple
    HTML page just to host the button. Create a new HTML file named `button.html`
    with the following code as reference:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先为我们的按钮创建HTML代码。我们需要创建一个简单的HTML页面来承载按钮。创建一个名为`button.html`的新HTML文件，其中包含以下代码作为参考：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, you can see that our button is effectively a `<button>` element, with
    the class `class="nbtn"`. It is good to use small names for classes as they are
    small and easy to recognize and write. While developing your pack, you want to
    think as much as you can about how you can reuse your CSS. So for instance, while
    creating a button, if you want to create several colors of the same button, you
    should create a class `btn` and then a class for each color, such as red, blue,
    and so on. This way, the `btn` class would have only the CSS for the sizing and
    appearance, and you would define the color in a separate class. This means that
    you'd be reusing the class `btn` for every kind of color, making it easier to
    customize and change it for future usage. A red button would then look like `<button
    class=tbtn redred class=then look l>`. It's just a matter of thinking of how you
    can mix different classes for different objectives when creating your CSS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们的按钮实际上是一个`<button>`元素，带有类`class="nbtn"`。对于类，使用小的名称是很好的，因为它们小而易于识别和书写。在开发您的包时，您希望尽可能考虑如何重用您的CSS。因此，例如，当创建按钮时，如果您想创建相同按钮的几种颜色，您应该创建一个类`btn`，然后为每种颜色创建一个类，如红色、蓝色等。这样，`btn`类将只有用于大小和外观的CSS，您可以在单独的类中定义颜色。这意味着您可以重用`btn`类来定制和更改它以供将来使用。然后，红色按钮看起来会像`<button
    class=tbtn redred class=then look l>`。这只是一种思考如何在创建CSS时混合不同类以实现不同目标的方法。
- en: 'Let''s get back to our button. Now that we created our HTML file, if you open
    the file in a browser, you''ll see our button completely unstyled, with the default
    browser look. So, with the HTML file created, it''s time for us to style this
    element with CSS. First of all, we want to use a custom font for this, so include
    this line in the `<head>` element of your HTML file: `<link href=''http://fonts.googleapis.com/css?family=Lato:700''
    rel=''stylesheet'' type=''text/css''>`. This will load the typeface Lato to be
    used in our button. For the sake of organization, we''ll create our CSS code in
    our header, so create a `<style></style> element inside the <head>`.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到我们的按钮。现在我们创建了我们的HTML文件，如果您在浏览器中打开该文件，您将看到我们的按钮完全没有样式，具有默认的浏览器外观。因此，创建了HTML文件后，现在是时候用CSS样式化这个元素了。首先，我们想为此使用自定义字体，因此请在HTML文件的`<head>`元素中包含以下行：`<link
    href='http://fonts.googleapis.com/css?family=Lato:700' rel='stylesheet' type='text/css'>`。这将加载Lato字体以用于我们的按钮。为了组织起见，我们将在头部创建我们的CSS代码，因此在`<head>`中创建一个`<style></style>`元素。
- en: 'To create the look of a button, the following is the CSS code that we''re going
    to use:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建按钮的外观，我们将使用以下CSS代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, going over the code, we're defining the border-radius as 8 px, and unfortunately,
    due to browser compatibilities, we have to include several browser prefixes to
    make sure that it will work in most browsers. We're not only setting the background
    color to our chosen green, but also setting the color and typeface of the text
    as well as its shadow.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过查看代码，我们将边框半径定义为8像素，不幸的是，由于浏览器的兼容性，我们必须包含几个浏览器前缀，以确保它在大多数浏览器中都能正常工作。我们不仅将背景颜色设置为我们选择的绿色，还设置了文本的颜色和字体以及其阴影。
- en: 'If you refresh your browser now, you''ll see that the design we used previously
    is now completely developed, including the 3D depth. This was done by creating
    a bigger bottom border with `border-bottom: 5px solid #27ae60`. We''ve given the
    border a radius of 5 px and a darker shade of green, creating the illusion of
    depth to the button. The last part, `outline: none`, is also very important as
    it''s the one that deactivates the browser focus outline, which is usually a blue
    glow or a blue border (depending on the browser used). So this way, we make sure
    that our element doesn''t have any other kind of effect applied, other than the
    ones created by us.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果您现在刷新浏览器，您会看到我们之前使用的设计现在已经完全开发完成，包括3D深度。这是通过创建一个更大的底部边框`border-bottom: 5px
    solid #27ae60`来实现的。我们给边框设置了5像素的半径和更深的绿色，从而创造了按钮的深度幻觉。最后一部分`outline: none`也非常重要，因为它是取消浏览器焦点轮廓的部分，通常是蓝色的发光或蓝色的边框（取决于所使用的浏览器）。因此，通过这种方式，我们确保我们的元素没有应用任何其他类型的效果，除了我们创建的效果。'
- en: 'The following shows us how the button looks now with our CSS:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了我们的CSS代码中按钮的外观：
- en: '![Exporting and coding](img/0048OS_06_07.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![导出和编码](img/0048OS_06_07.jpg)'
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A great resource to create your CSS3 code is `css3generator.com`. It lets you
    fine-tune and visualize details such as border radius and box shadows. It is great
    for helping you deal with several browser-specific prefixes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的资源来创建您的CSS3代码是`css3generator.com`。它可以让您微调和可视化诸如边框半径和框阴影之类的细节。它非常适合帮助您处理几个特定于浏览器的前缀。
- en: 'Now, for the different states, our button has the following properties that
    are used in this code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于不同的状态，我们的按钮在此代码中使用了以下属性：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `.btn:hover` class is the rollover effect that occurs when the mouse is
    over the button. What we''re aiming to do is to make it appear as if the button
    is being pressed, so we''re changing the border to a smaller one in order to give
    a sort of shadow to the button, and losing the bigger border-bottom. However,
    since the button needs to go down, we give it a margin-top of 3 px to make it
    look like the button is really being pressed down, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`.btn:hover`类是鼠标悬停在按钮上时发生的悬停效果。我们的目标是使其看起来好像按钮被按下，因此我们将边框改为较小的边框，以给按钮一种阴影效果，并丢失较大的底部边框。然而，由于按钮需要向下移动，我们给它一个3像素的上边距，使其看起来好像按钮真的被按下，如下面的截图所示：'
- en: '![Exporting and coding](img/0048OS_06_08.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![导出和编码](img/0048OS_06_08.jpg)'
- en: 'For the active state, when the button is clicked, we want to make it look like
    it''s been pressed down from its previous state. So, we''re creating an inset
    shadow and changing the padding to make the text go down a couple of pixels, just
    enough to make the user feel like it''s physically going down a bit. While interacting
    with it, you understand the effect it creates and how well it works. The following
    screenshot shows the button in the active state:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于活动状态，当按钮被点击时，我们希望它看起来像是从之前的状态被按下。因此，我们创建了一个内部阴影，并改变了填充，使文本下移了几个像素，刚好让用户感觉它在物理上有点下降。与之交互时，您会理解它产生的效果以及它的良好运行情况。以下截图显示了按钮处于活动状态时的情况：
- en: '![Exporting and coding](img/0048OS_06_09.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![导出和编码](img/0048OS_06_09.jpg)'
- en: This is it for the development of our button! It's ready to be used in your
    pack and in future projects. You can always customize it further and create different
    sizes for it based on the same kind of appearance.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们的按钮开发就完成了！它已经可以在您的包和未来的项目中使用。您还可以进一步自定义它，并根据相同的外观创建不同的尺寸。
- en: Documentation is key
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档至关重要
- en: When you're creating your elements and your scripts, you should document everything.
    Organization and documentation is extremely important so that you can properly
    reuse the elements that you create. Also, if you're working with more people on
    a regular basis, you should make sure that all your classes have understandable
    names. Also, make sure to comment your CSS as well as your HTML in such a way
    that anyone else can just grab and use your code in the future. Sometimes, it
    so happens that bad names for classes are used, and when you're looking for a
    specific class or trying to understand your code, it can be a really daunting
    task without any kind of support or documentation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建元素和脚本时，您应该对所有内容进行文档记录。组织和文档记录非常重要，以便您可以正确地重复使用创建的元素。此外，如果您经常与更多人一起工作，您应该确保所有类都有可理解的名称。还要确保以一种任何其他人都可以随意获取和使用您的代码的方式对CSS和HTML进行注释。有时，类的名称可能不好，当您寻找特定类或尝试理解代码时，如果没有任何支持或文档，这可能是一项非常艰巨的任务。
- en: 'The best way to make sure that all your code is understandable is to use comments.
    In HTML, you can do that by using the enclosing code or text comments as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的所有代码可理解的最佳方法是使用注释。在HTML中，您可以通过使用封闭代码或文本注释来实现：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In CSS, you can also comment code or add your own text as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，您还可以按照以下方式对代码进行注释或添加自己的文本：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These can and should be used as much as possible. Be concise and describe exactly
    what your code does, as in the future, you or anyone else will revisit it and
    will need to get an understanding of the function and objective. You can also
    use comments to timestamp changes and author in order to keep track of the last
    updates on a file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应尽可能多地使用这些。简洁地描述您的代码的功能和目标，因为在将来，您或其他人将重新访问它，并需要了解功能和目标。您还可以使用注释对更改和作者进行时间戳，以便跟踪文件的最新更新。
- en: In the case of bigger and more complex projects, you can create complete `readme`
    files, with textual guides that explain the elements and how to design them. However,
    comments are usually enough for this and are easier as they are placed directly
    in the working files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更大更复杂的项目，您可以创建完整的“readme”文件，其中包含解释元素及其设计方法的文本指南。然而，通常情况下，注释就足够了，并且更容易，因为它们直接放在工作文件中。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the process of creating your own Flat UI pack, from
    element design to development, and also elaborated on how to create documentation
    and comment your work for future use. We created a flat design button in CSS to
    exemplify a process and create one asset of the pack.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了从元素设计到开发的创建自己的扁平化UI包的过程，并详细说明了如何创建文档并对未来使用进行注释。我们使用CSS创建了一个扁平化设计按钮，以示例化一个过程并创建包的一个资产。
- en: This is also the last chapter, and with it, we come to the end of our book.
    Here, we covered all the phases of a web design project in flat design, focusing
    on the specifics of the flat style and how it's so easy and impactful to create
    projects. From planning, sketching, and designing, up until development, you're
    now ready to create your own page, and you just need to go ahead and put this
    in practice, because the more you practice, the better you'll become.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是最后一章，随着它的结束，我们也结束了我们的书。在这里，我们涵盖了扁平化设计项目的所有阶段，重点介绍了扁平化风格的具体特点以及创建项目的简易性和影响力。从规划、草图和设计，一直到开发，您现在已经准备好创建自己的页面，您只需要继续实践，因为练习得越多，您就会变得越好。
