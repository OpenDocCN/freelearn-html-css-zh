- en: Chapter 1. No Sign Up? No Party!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。不注册？不派对！
- en: 'CSS3 has been a big leap forward for forms. Not only are new style possibilities
    available, but new and powerful pseudo-selectors can also now be used to modify
    the appearance of our page, depending on the state of the form or of its fields.
    In this chapter, we will use a party registration form as a test case to show
    how this component can be enhanced by the new CSS specifications. We will also
    pay attention to how we can retain the right behavior for older browsers. We''re
    going to cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3对于表单来说是一个重大的飞跃。不仅有新的样式可能性可用，而且还可以使用新的强大的伪选择器来修改我们页面的外观，这取决于表单或其字段的状态。在本章中，我们将使用一个派对注册表单作为测试案例，展示如何通过新的CSS规范来增强这个组件。我们还将注意如何保持旧浏览器的正确行为。我们将涵盖以下主题：
- en: HTML structure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML结构
- en: The form
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单
- en: Basic styling
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本样式
- en: Marking required fields
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记必填字段
- en: The checked radio buttons trick
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选中的单选按钮技巧
- en: Counting invalid fields
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算无效字段
- en: Balloon styling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气球样式
- en: HTML structure
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML结构
- en: 'Let''s start with some HTML5 code to shape the structure of our project''s
    web page. To do so, create a file, named `index.html`, in a new folder, named
    `no_signup_no_party`, containing the following markup:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些HTML5代码开始，来塑造我们项目网页的结构。为此，在一个名为`no_signup_no_party`的新文件夹中创建一个名为`index.html`的文件，其中包含以下标记：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    through your account at [http://www.packtpub.com](http://www.packtpub.com). If
    you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过您在[http://www.packtpub.com](http://www.packtpub.com)账户中购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: As you can see from the markup, we are taking advantage of the new structure
    offered by HTML5\. Tags such as `<article>`, `<header>`, and `<footer>` enrich
    the page by adding semantic meaning to the content. These tags are rendered exactly
    as `<div>` but are, semantically speaking, better because they explain something
    about their content.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从标记中可以看出，我们正在利用HTML5提供的新结构。诸如`<article>`、`<header>`和`<footer>`之类的标签通过为内容添加语义含义来丰富页面。这些标签在语义上比`<div>`更好，因为它们解释了它们的内容。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information, I suggest you look at the following article: [http://html5doctor.com/lets-talk-about-semantics](http://html5doctor.com/lets-talk-about-semantics)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，建议您查看以下文章：[http://html5doctor.com/lets-talk-about-semantics](http://html5doctor.com/lets-talk-about-semantics)
- en: Flavor text aside, the only section that needs detailed explanation is the `<head>`
    section. Within this tag, we ask the browser to include some external assets that
    will help us along the way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了口味文本之外，唯一需要详细解释的部分是`<head>`部分。在这个标签内，我们要求浏览器包含一些外部资产，这些资产将帮助我们前进。
- en: Reset stylesheet and custom fonts
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重置样式表和自定义字体
- en: First, there is a Reset stylesheet, which is particularly useful for ensuring
    that all the CSS properties that browsers apply by default to HTML elements get
    removed. In this project, we use the one offered freely by Yahoo!, which basically
    sets all the properties to `none` or something equivalent.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一个重置样式表，这对于确保浏览器默认应用于HTML元素的所有CSS属性被移除非常有用。在这个项目中，我们使用了雅虎免费提供的样式表，基本上将所有属性设置为`none`或等效的值。
- en: Next, we ask for another stylesheet. This one is from a Google service called
    Google Web Fonts ([www.google.com/webfonts](http://www.google.com/webfonts)),
    which distributes fonts that can be embedded and used within a web page. Custom
    web fonts are defined with a special `@font-face` property that contains the link
    to the font file the browser has to implement.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要求另一个样式表。这个来自谷歌服务的样式表叫做谷歌网络字体（[www.google.com/webfonts](http://www.google.com/webfonts)），它分发可以嵌入和在网页中使用的字体。自定义网络字体是用特殊的`@font-face`属性定义的，其中包含了浏览器必须实现的字体文件的链接。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Unfortunately, to reach the maximum possible compatibility between browsers,
    more font file formats are required, and so a more complex statement is necessary.
    The following statements help achieve such compatibility:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，为了在浏览器之间达到最大可能的兼容性，需要更多的字体文件格式，因此需要更复杂的语句。以下语句有助于实现这种兼容性：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Google Web Fonts provides us with a stylesheet containing these statements for
    the fonts we choose, saving us all the trouble related to font conversion.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌网络字体为我们提供了一个包含我们选择的字体语句的样式表，为我们节省了所有与字体转换相关的麻烦。
- en: Next, let's create an empty file for our stylesheet under a `css` folder within
    the project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在项目的`css`文件夹下创建一个空的样式表文件。
- en: Last but not least, we need to ensure that even older Internet Explorer browsers
    will be able to handle the new HTML5 tags correctly. `html5shiv` ([html5shiv.googlecode.com](http://html5shiv.googlecode.com))
    is a small JavaScript file that accomplishes exactly this task.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要确保即使是较旧的Internet Explorer浏览器也能正确处理新的HTML5标签。`html5shiv`（[html5shiv.googlecode.com](http://html5shiv.googlecode.com)）是一个小的JavaScript文件，正是完成了这个任务。
- en: Creating the form
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表单
- en: 'Now let''s write the HTML code for the form by adding the following code below
    the `<!--FORM FIELDS-->` mark:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过在`<!--FORM FIELDS-->`标记下面添加以下代码来编写表单的HTML代码：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'HTML5 offers some new attributes that we will explore briefly, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5提供了一些新属性，我们将简要探讨如下：
- en: '`placeholder`: This is used to specify some help text that is displayed within
    the field when empty.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`placeholder`：这用于指定在字段为空时显示的一些帮助文本。'
- en: '`required`: This is used to mark the field as required. It''s a Boolean attribute
    that tells the browser to ensure that the field is not empty before submitting
    the form. This attribute is part of the new form validation features, which basically
    offer a way to specify some input constraints on the client side. Unfortunately,
    each browser handles the display of the error messages contained in the `title`
    attribute in a different way, but we''ll check this later in the chapter.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required`：这用于将字段标记为必填项。这是一个布尔属性，告诉浏览器在提交表单之前确保字段不为空。该属性是新表单验证功能的一部分，基本上提供了一种在客户端指定一些输入约束的方式。不幸的是，每个浏览器以不同的方式处理`title`属性中包含的错误消息的显示，但我们将在本章稍后进行检查。'
- en: '`pattern`: This is a powerful and sometimes complex way of specifying a validation
    pattern. It needs a regular expression as a value. This expression is then checked
    against the data inserted by the user. In case of failure, the message contained
    in the `title` attribute is displayed.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern`：这是一种指定验证模式的强大且有时复杂的方式。它需要一个正则表达式作为值。然后该表达式将与用户插入的数据进行检查。如果失败，将显示`title`属性中包含的消息。'
- en: In the given example, the pattern value is `@[a-zA-Z0-9]+`, which means "one
    or more occurrences (the `+` sign) of glyphs from the ranges `a-z` (all lowercase
    letters), `A-Z` (all uppercase letters), and `0-9` (all digits)".
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的示例中，模式值为`@[a-zA-Z0-9]+`，表示“一个或多个出现（`+`符号）在`a-z`（所有小写字母）、`A-Z`（所有大写字母）和`0-9`（所有数字）范围内的字形”。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More ready-to-use patterns can be found at [http://html5pattern.com/](http://html5pattern.com/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 更多可直接使用的模式可以在[http://html5pattern.com/](http://html5pattern.com/)找到。
- en: Like most of the features introduced by HTML5, even new form attributes such
    as the ones we saw in the code earlier suffer in terms of complete browser compatibility.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就像HTML5引入的大多数功能一样，甚至在代码中看到的新表单属性在完全浏览器兼容性方面也存在问题。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To get a glimpse of the current browser support for these attributes and many
    other HTML5 and CSS3 features, I suggest going to [http://caniuse.com/](http://caniuse.com/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解当前浏览器对这些属性以及许多其他HTML5和CSS3功能的支持情况，建议访问[http://caniuse.com/](http://caniuse.com/)。
- en: Misplaced labels
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 放错位置的标签
- en: 'There''s another oddity in this code: labels are placed after the fields they''re
    linked to. This markup, although uncommon, is still valid and gives us some new
    interesting options to intercept user interaction with the form elements. This
    may sound mysterious, but we''re going to analyze the technique in detail in a
    few pages from now.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中还有另一个奇怪之处：标签放置在它们所链接的字段之后。尽管这种标记不常见，但仍然有效，并为我们提供了一些新的有趣选项来拦截表单元素的用户交互。这可能听起来神秘，但我们将在几页后详细分析这种技术。
- en: 'Let''s add another `fieldset` element below the one we just wrote:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在刚刚编写的`fieldset`元素下面添加另一个`fieldset`元素：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Nothing to highlight here; we've just added two radio button groups. Now, if
    we try to run what we've done up to now in a browser, we are going to face some
    disappointment because the default browser's styles have been removed by the Reset
    stylesheet.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么需要强调的；我们只是添加了两个单选按钮组。现在，如果我们尝试在浏览器中运行到目前为止所做的事情，我们将会感到失望，因为默认的浏览器样式已经被重置样式表移除了。
- en: '![Misplaced labels](img/3264OT_01_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![放错位置的标签](img/3264OT_01_01.jpg)'
- en: Time to add some basic styling!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候添加一些基本样式了！
- en: Basic styling
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本样式
- en: What we need to do is center the form, give the right size to the texts, choose
    a background, and adjust the displacement of labels and fields.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是将表单居中，为文本选择合适的大小，选择一个背景，并调整标签和字段的位移。
- en: 'Let''s start with the background. What we want to achieve is to place an image
    as big as possible to fit the page while keeping its proportions. This simple
    task in the "CSS2 era" would involve some use of JavaScript, such as the well-known
    Redux jQuery plugin ([http://bavotasan.com/2011/full-sizebackground-image-jquery-plugin/](http://bavotasan.com/2011/full-sizebackground-image-jquery-plugin/)).
    With CSS3 it''s just a matter of a few statements:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从背景开始。我们想要实现的是将一张尽可能大的图像放置在页面上，同时保持其比例。在“CSS2时代”，这个简单的任务可能涉及一些JavaScript的使用，比如众所周知的Redux
    jQuery插件（[http://bavotasan.com/2011/full-sizebackground-image-jquery-plugin/](http://bavotasan.com/2011/full-sizebackground-image-jquery-plugin/)）。使用CSS3只需要几个语句：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Basic styling](img/3264OT_01_01.1.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![基本样式](img/3264OT_01_01.1.jpg)'
- en: 'What does the trick here is the `background-size` property, which accepts the
    following values:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是`background-size`属性，它接受以下值：
- en: '`length`: Using this value, we can express the size of the background using
    any units of measurement, for example `background-size: 10px 10px;`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length`：使用此值，我们可以使用任何测量单位来表示背景的大小，例如`background-size: 10px 10px;`。'
- en: '`percentage`: Using this value, we can specify a background size that varies
    with the size of the element, for example `background-size: 10% 10%;`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percentage`：使用此值，我们可以指定随元素大小变化的背景大小，例如`background-size: 10% 10%;`。'
- en: '`cover`: This value scales the image (without stretching it) to cover the whole
    area of the element. This means that part of the image may not be visible because
    it could get bigger than the container.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover`：此值将图像按比例缩放（而不是拉伸），以覆盖整个元素的整个区域。这意味着图像的一部分可能不可见，因为它可能比容器更大。'
- en: '`contain`: This value scales the image (without stretching it) to the maximum
    size available while keeping the whole image within the container. This, obviously,
    could leave some area of the element uncovered.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contain`：此值将图像按比例缩放（而不是拉伸），使其在容器内保持整个图像的最大尺寸。显然，这可能会导致元素的某些区域未被覆盖。'
- en: So, by using `cover`, we ensure that the whole page will be covered by our image,
    but we can do more! If we run all that we've done up to here in a browser, we
    will see that the pixels of our background image become visible if we enlarge
    the window too much. To avoid this, what we can do is to use another background
    image on top of this one. We can use small black dots to hide the pixels of the
    underlying image and achieve a better result.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用`cover`，我们确保整个页面将被我们的图像覆盖，但我们可以做得更多！如果我们在浏览器中运行到目前为止所做的所有工作，我们会发现如果我们将窗口放大太多，背景图像的像素会变得可见。为了避免这种情况，我们可以在这个图像的顶部使用另一个背景图像。我们可以使用小黑点来隐藏底层图像的像素，从而获得更好的效果。
- en: 'The good news is that we can do this without using another element, as CSS3
    allows more than one background on the same element. We can use commas (`,`) to
    separate the backgrounds, keeping in mind that what we declare first will lay
    over the others. So, let''s change the preceding code a bit:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，我们可以在不使用另一个元素的情况下做到这一点，因为CSS3允许在同一元素上使用多个背景。我们可以使用逗号（`,`）来分隔背景，要记住的是我们首先声明的将覆盖其他背景。因此，让我们稍微改变前面的代码：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Basic styling](img/3264OT_01_01.2.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![基本样式](img/3264OT_01_01.2.jpg)'
- en: 'Also, all the other background-related properties act in the same way. If we
    omit one of the values, the previous one is used, so writing `background-repeat:
    repeat` is the same as writing `background-repeat: repeat, repeat` if two background
    images are declared.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，所有其他与背景相关的属性都以相同的方式起作用。如果我们省略一个值，那么将使用前一个值，因此，如果声明了两个背景图像，则写`background-repeat:
    repeat`与写`background-repeat: repeat, repeat`是相同的。'
- en: Defining properties
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义属性
- en: 'Let''s move on and define the rest of the required properties to complete the
    first phase of the project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续定义其余的必需属性，以完成项目的第一阶段：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are just a few things to underline here. First of all, by using some
    floats, we''ve moved all the fields to the right and the labels to the left. Next,
    we''ve defined some distance between the elements. Maybe the most cryptic statement
    is the following one:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只有几件事情需要强调。首先，通过使用一些浮动，我们将所有字段移到右侧，标签移到左侧。接下来，我们定义了一些元素之间的距离。也许最神秘的陈述是以下陈述：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Due to the floating that we just talked about, the first element of each group
    of radio buttons became the rightmost. So, we identify this element by using the
    `selector1 + selector2` selector, which indicates that the specified elements
    must be siblings. This is called an **adjacent sibling selector**, and selects
    all the elements matching the `selector2` selector that directly follows an element
    matching the `selector1` selector. Finally, using `clear:right` we simply state
    that there must be no other floating elements to the right of these radio buttons.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们刚刚谈到的浮动，每组单选按钮的第一个元素变成了最右边的元素。因此，我们使用`selector1 + selector2`选择器来标识这个元素，该选择器表示指定的元素必须是兄弟元素。这被称为**相邻兄弟选择器**，并选择直接跟在匹配`selector1`选择器的元素后面的所有匹配`selector2`选择器的元素。最后，使用`clear:right`，我们简单地声明右侧不能有其他浮动元素。
- en: 'Let''s reload the project in the browser to appreciate the result of our work:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中重新加载项目，以欣赏我们工作的结果：
- en: '![Defining properties](img/3264OT_01_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![定义属性](img/3264OT_01_02.jpg)'
- en: Marking required fields
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记必填字段
- en: 'Let''s look at an easy trick to automatically display an asterisk (*) near
    the labels of required fields. The HTML5 form validation model introduces some
    new and very interesting pseudo-selectors:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的技巧，自动在必填字段的标签旁边显示一个星号(*)。HTML5表单验证模型引入了一些新的和非常有趣的伪选择器：
- en: '`:valid`: It matches only fields that are in a valid state.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:valid`：它仅匹配处于有效状态的字段。'
- en: '`:invalid`: It works in the opposite way, matching only fields with errors.
    This includes empty fields with the `required` attribute set to `true`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:invalid`：它的工作方式相反，仅匹配具有错误的字段。这包括将`required`属性设置为`true`的空字段。'
- en: '`:required`: It matches only fields with the `required` flag, whether they''re
    filled or not.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:required`：它仅匹配带有`required`标志的字段，无论它们是否已填写。'
- en: '`:optional`: It works with all fields the without the `required` flag.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:optional`：它适用于所有没有`required`标志的字段。'
- en: In our case, we need to match all the labels that follow a field that has the
    `required` attribute. Now the HTML5 structure we implemented earlier comes in
    handy because we can take advantage of the `+` selector to accomplish this.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要匹配所有跟随具有`required`属性的字段的标签。现在我们之前实现的HTML5结构派上了用场，因为我们可以利用`+`选择器来实现这一点。
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We added a small variation (`input:required + * + .label:after`) in order to
    intercept the structure of the radio buttons as well.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个小变化（`input:required + * + .label:after`）以拦截单选按钮的结构。
- en: Let's analyze the sentence a bit before moving on. We used the `:after` pseudo-selector
    to get access to the location just after the element with a `label` class. Then,
    with the `content` property, we injected the asterisk within that location.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们分析一下这个句子。我们使用`:after`伪选择器来访问具有`label`类的元素后面的位置。然后，使用`content`属性，我们在该位置内注入了星号。
- en: If we reload the page we can verify that, now, all the labels that belong to
    fields with a `required` flag end with an asterisk. Someone may point out that
    screen readers do not recognize this technique. To find a way around this, we
    can take advantage of the `aria-required` property, part of the WAI-ARIA specification
    ([http://www.w3.org/TR/WCAG20-TECHS/ARIA2](http://www.w3.org/TR/WCAG20-TECHS/ARIA2)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新加载页面，我们可以验证现在所有属于带有`required`标志字段的标签都以星号结尾。有人可能指出屏幕阅读器无法识别这种技术。为了避免这种情况，我们可以利用WAI-ARIA规范的`aria-required`属性（[http://www.w3.org/TR/WCAG20-TECHS/ARIA2](http://www.w3.org/TR/WCAG20-TECHS/ARIA2)）。
- en: '![Marking required fields](img/3264OT_01_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![标记必填字段](img/3264OT_01_03.jpg)'
- en: The checked radio buttons trick
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选中的单选按钮技巧
- en: Now we can concentrate on the radio buttons, but how can we render them in a
    better way? There is a cool technique for this; it takes advantage of the fact
    that you can check a radio button even by clicking on its linked label. What we
    can do is hide the input elements and style the corresponding labels, maybe using
    icons that represent chips and beers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以专注于单选按钮，但是如何以更好的方式呈现它们呢？有一个很酷的技巧；它利用了一个事实，即即使通过单击其链接的标签，也可以选中单选按钮。我们可以隐藏输入元素并样式化相应的标签，也许使用代表薯条和啤酒的图标。
- en: 'Let''s begin by removing the text from the radio button labels and changing
    the cursor appearance when it''s hovering over them:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从单选按钮标签中删除文本并在鼠标悬停在它们上方时改变光标外观开始：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Well done! Now we have to hide the radio buttons. We can achieve this by placing
    a patch with the same color as the background over the radio button. Let''s do
    that:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们必须隐藏单选按钮。我们可以通过在单选按钮上放置与背景相同颜色的补丁来实现这一点。让我们这样做：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If we now try to submit the form either using WebKit-based browsers or Firefox,
    we can appreciate that the validation balloons related to radio buttons are displayed
    correctly on both of them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试使用基于WebKit的浏览器或Firefox提交表单，我们会发现与单选按钮相关的验证气泡在两者上都正确显示。
- en: Displaying icons within radio button labels
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在单选按钮标签中显示图标
- en: Let's move on and work on the radio button labels that, at the moment, are completely
    empty because we moved the text away using the `text-indent` property. What we
    are going to do now is to put a tiny placeholder image within each label, and
    by taking advantage of the CSS3 `~` selector, create a pseudo-star rating system
    with a nice mouse-over effect.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续处理目前完全为空的单选按钮标签，因为我们使用`text-indent`属性将文本移开。我们现在要做的是在每个标签中放置一个微小的占位图像，并利用CSS3的`~`选择器，创建一个带有漂亮鼠标悬停效果的伪星级评分系统。
- en: 'Due to the fact that we have to work with different images (for beers and chips),
    we have to duplicate some statements. Let''s start with the `.beers` labels:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们必须使用不同的图像（用于啤酒和薯条），所以我们必须复制一些语句。让我们从`.beers`标签开始：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `elem1 ~ elem2` selector applies to all the `elem2` labels that are siblings
    of the `elem1` label and that follow it (the `elem2` labels don't have to be adjacent,
    though). This way, we can target all the labels that follow a label that is in
    the hover state (when the mouse is over the element) with the selector `.preferences
    label.beers:hover ~ label.beers`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`elem1 ~ elem2`选择器适用于所有`elem2`标签，它们是`elem1`标签的兄弟标签，并且跟在它后面（尽管`elem2`标签不必是相邻的）。这样，我们可以使用选择器`.preferences
    label.beers:hover ~ label.beers`来定位跟随处于悬停状态的标签的所有标签。'
- en: Using the CSS3 `:checked` pseudo-class selector, we can identify the radio button
    that has been checked, and by applying the same trick that we just discussed,
    we can target all the labels that follow a checked radio button by using `.preferences
    input[type=radio][name=beers]:checked ~ label.beers`. By putting together these
    two selectors and a classic `.preferences label.beers:hover` selector, we are
    now able to change the placeholder image reflecting the user interaction with
    the radio buttons. Now let's add a final cool feature. We have used the `counter-increment`
    property to keep track of the number of selected labels, so we can take advantage
    of this counter and display it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS3的`:checked`伪类选择器，我们可以识别已选中的单选按钮，并通过应用刚讨论的相同技巧，我们可以使用`.preferences input[type=radio][name=beers]:checked
    ~ label.beers`来定位所有跟随已选中单选按钮的标签。通过组合这两个选择器和经典的`.preferences label.beers:hover`选择器，我们现在能够根据用户与单选按钮的交互改变占位图像。现在让我们添加一个最后的很酷的功能。我们已经使用`counter-increment`属性来跟踪所选标签的数量，因此我们可以利用这个计数器并显示它。
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s try the result in a browser:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中尝试一下结果：
- en: '![Displaying icons within radio button labels](img/3264OT_01_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![在单选按钮标签中显示图标](img/3264OT_01_04.jpg)'
- en: 'Now, we have to duplicate the same statements for the `.chips` labels too:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们也必须为`.chips`标签复制相同的语句：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: All of the styling we did in this chapter has one big problem; if the browser
    doesn't support CSS3, it successfully hides both radio buttons and text labels
    but fails to add their image replacements, making everything unusable. There are
    a few ways to prevent this. The one introduced here is to use **media queries**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们所做的所有样式都有一个大问题；如果浏览器不支持CSS3，它会成功隐藏单选按钮和文本标签，但无法添加它们的图像替换，使一切都无法使用。有几种方法可以防止这种情况发生。这里介绍的方法是使用**媒体查询**。
- en: 'Media queries, which will be covered in detail in a later project, basically
    consist of a statement that describes some conditions required to apply some styles.
    Let''s consider the following example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询将在以后的项目中详细介绍，基本上是由描述应用某些样式所需的一些条件的语句组成。让我们考虑以下例子：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this example, the body background is turned into red only if the size of
    the browser window doesn''t exceed `1000px`. Media queries are really useful to
    apply specific styles only to target devices (smartphones, tablets, and so on),
    but they have another interesting property; if a browser supports them, it also
    supports the CSS3 rules we used, so we can place all of the CSS written in this
    and in the previous sections within a media query statement:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，只有当浏览器窗口的大小不超过`1000px`时，才会将body背景变成红色。媒体查询非常有用，可以将特定样式应用于目标设备（智能手机、平板电脑等），但它们还有另一个有趣的特性；如果浏览器支持它们，它也支持我们使用的CSS3规则，因此我们可以将在本节和上一节中编写的所有CSS都放在媒体查询语句中：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this trick, we solved another subtle problem. Trying the project on an
    iPad without this media query statement would have resulted in some problems with
    clicking on the radio buttons. This is because labels do not respond to clicks
    on iOS. By implementing this media query, we force iOS devices to fall back to
    regular radio buttons.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个技巧，我们解决了另一个微妙的问题。在iPad上尝试该项目，如果没有这个媒体查询语句，可能会在单选按钮上点击时出现问题。这是因为iOS上的标签不会响应点击。通过实现这个媒体查询，我们强制iOS设备回退到常规单选按钮。
- en: Counting and displaying invalid fields
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算和显示无效字段
- en: In the previous section, we used some properties without explaining them; they
    are `counter-reset` and `counter-increment`. Plus, we used a function-like command
    called `counter()`. In this section, we'll explain these properties by creating
    a mechanism to display the number of invalid fields. A **counter** is basically
    a variable we can name and whose value can be incremented using `counter-increment`.
    Next, this counter can be displayed by using the `counter(variable name)` declaration
    within a `content` property.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们使用了一些属性而没有解释它们；它们是`counter-reset`和`counter-increment`。此外，我们使用了一个类似函数的命令叫做`counter()`。在本节中，我们将通过创建一个机制来显示无效字段的数量来解释这些属性。**计数器**基本上是一个我们可以命名的变量，其值可以使用`counter-increment`来递增。接下来，这个计数器可以通过在`content`属性中使用`counter(变量名)`声明来显示。
- en: 'Let''s see a small example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个小例子：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Trying this small bit of code results in a `p` element containing the sentence
    **3 elements**:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这小段代码会得到一个包含句子**3个元素**的`p`元素。
- en: '![Counting and displaying invalid fields](img/3264OT_01_04.1.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![计数和显示无效字段](img/3264OT_01_04.1.jpg)'
- en: We can combine these powerful properties with the new form pseudo-selector to
    obtain a way to display valid and invalid fields.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些强大的属性与新的表单伪选择器结合起来，以获得一种显示有效和无效字段的方法。
- en: Implementing the counters
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现计数器
- en: Let's start by creating two counters, `invalid` and `fields`, and resetting
    them at each `fieldset` element because we want to display the invalid fields
    for each `fieldset` element. Then, we increment both counters when we find an
    invalid field and only the `fields` counter when we find a valid field.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建两个计数器`invalid`和`fields`开始，并在每个`fieldset`元素中重置它们，因为我们想要为每个`fieldset`元素显示无效字段。然后，当我们找到一个无效字段时，我们递增两个计数器，当我们找到一个有效字段时，只递增`fields`计数器。
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `:not` pseudo-selector is pretty straightforward. It subtracts the elements
    matching the selector within the parentheses from the elements matching the leftmost
    selector. If this seems a bit confusing, let''s try to read the last selector:
    match all the `input` elements, whose `type` value is *not* `submit` and *not*
    `radio`, that respond to the `:valid` pseudo-selector.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`:not`伪选择器非常直观。它从括号内匹配的元素中减去左侧选择器匹配的元素。如果这看起来有点混乱，让我们试着阅读最后一个选择器：匹配所有`input`元素，其`type`值*不是*`submit`和*不是*`radio`，并响应`:valid`伪选择器。'
- en: 'Almost there! Now that we have the counters, let''s display them using the
    `footer` element we have:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快到了！现在我们有了计数器，让我们使用`footer`元素来显示它们：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `:not([fake])` selector is used like the media query shown earlier. We just
    want to ensure that only the browsers that support the `:valid` and `:invalid`
    pseudo-selectors can interpret this selector.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`:not([fake])`选择器像之前显示的媒体查询一样使用。我们只想确保只有支持`:valid`和`:invalid`伪选择器的浏览器才能解释这个选择器。'
- en: This last addition has some drawbacks, though; mixing presentation with content
    is generally something to avoid.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这最后的添加有一些缺点；通常最好避免将演示与内容混合在一起。
- en: Balloon styling
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 气球样式
- en: 'Each browser actually displays form errors in its own way, and we can''t do
    very much to affect this visualization. The only exceptions are WebKit-based browsers,
    which let us change the appearance of such messages. The following code shows
    how an error balloon is constructed in these browsers:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 每个浏览器实际上以自己的方式显示表单错误，我们无法对此可视化做太多影响。唯一的例外是基于WebKit的浏览器，它们让我们改变这些消息的外观。以下代码显示了在这些浏览器中如何构建错误气球：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We can access all the elements that compose an error message by using the special
    pseudo-classes listed in the preceding code. So, let's begin!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用前面代码中列出的特殊伪类来访问组成错误消息的所有元素。所以，让我们开始吧！
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With `-webkit-transform`, we're applying some transformation to the matched
    elements. In this case, we're moving the arrow, which usually lies on the bottom
    of the balloon, to the left side of it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`-webkit-transform`，我们对匹配的元素应用了一些变换。在这种情况下，我们将箭头从气球底部移动到左侧。
- en: 'The following is a glimpse of how our completed project looks:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们完成的项目的一瞥：
- en: '![Balloon styling](img/3264OT_01_05.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![气球样式](img/3264OT_01_05.jpg)'
- en: Graceful degradation
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优雅降级
- en: As we might expect, this project is not fully supported on all browsers because
    it implements HTML5 and CSS3 features that, of course, aren't included in old
    browsers. Many techniques exist to find a way around this issue; the one we'll
    look at now is called **graceful degradation**. It basically focuses on making
    the core functionalities of the project as widely supported as possible while
    accepting that everything else might be unsupported and thus not displayed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所预期的，这个项目并不完全支持所有浏览器，因为它实现了HTML5和CSS3的特性，当然，这些特性不包括在旧浏览器中。存在许多技术来解决这个问题；我们现在要看的是**优雅降级**。它基本上侧重于使项目的核心功能尽可能得到广泛支持，同时接受其他一切可能不受支持，因此不会显示。
- en: 'Our project is a good example of graceful degradation: when a browser does
    not support a specific property, its effects are simply ignored without affecting
    the basic functionality of the form.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目是优雅降级的一个很好的例子：当浏览器不支持特定属性时，其效果会被简单地忽略，而不会影响表单的基本功能。
- en: 'To prove this, let''s try the project on IE8, which basically has no CSS3 support:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，让我们在IE8上尝试该项目，因为它基本上不支持CSS3：
- en: '![Graceful degradation](img/3264OT_01_06.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![优雅降级](img/3264OT_01_06.jpg)'
- en: To achieve the best possible browser support, we may also want to hide footer
    elements and radio buttons on IE9 because, otherwise, they'll be displayed but
    they won't behave as expected. To do so, we need to add a conditional comment
    in our `index.html` file, just before the end of the `head` section. We'll see
    in the later chapters how conditional comments work, but for now let's say that
    they allow us to specify some markup that needs to be interpreted only by chosen
    browsers.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最佳的浏览器支持，我们可能还需要在IE9上隐藏页脚元素和单选按钮，否则它们会被显示，但行为不如预期。为此，我们需要在`index.html`文件的`head`部分结束前添加一个条件注释。我们将在后面的章节中看到条件注释是如何工作的，但现在让我们说它们允许我们指定一些标记，只有选择的浏览器才能解释。
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this first project, we've explored how CSS3 can enhance our forms with useful
    information derived from the markup and the status of the fields. In the next
    chapter, we'll focus our attention on buttons and how we can mimic real-world
    shapes and behavior without using images by taking full advantage of gradients
    and other CSS3 properties.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个项目中，我们探讨了CSS3如何通过从标记和字段状态中获取的有用信息来增强我们的表单。在下一章中，我们将把注意力集中在按钮上，探讨如何利用渐变和其他CSS3属性充分模拟真实世界的形状和行为，而不使用图像。
