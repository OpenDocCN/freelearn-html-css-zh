- en: Chapter 5. An Image Gallery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。图库
- en: 'Image galleries are nowadays a common component of a website. In this chapter,
    we''ll discover how we can implement a range of transition effects and several
    navigation modes using *only* CSS properties. We''ll start by implementing a basic
    transition effect using a series of images, then we''ll develop a pure CSS structure
    to let the user select his preferred navigation mode and transition effect and,
    finally, we''ll add more complex transition effects. The following is a list of
    the topics we''ll cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 图库现在是网站的常见组件。在本章中，我们将发现如何使用*仅*CSS属性实现一系列过渡效果和几种导航模式。我们将首先实现一个基本的过渡效果，使用一系列图像，然后我们将开发一个纯CSS结构，让用户选择他喜欢的导航模式和过渡效果，最后，我们将添加更复杂的过渡效果。以下是本章将涵盖的主题列表：
- en: A basic gallery HTML structure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本图库HTML结构
- en: Implementing opacity transition
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现不透明度过渡
- en: Implementing slide transition
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现幻灯片过渡
- en: 3D transformations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D变换
- en: Adding the slideshow mode
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加幻灯片模式
- en: Creating previous and next arrow
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建上一个和下一个箭头
- en: CSS preprocessors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS预处理器
- en: Preparing the structure
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备结构
- en: 'As in the previous chapters, we will first define a basic HTML structure on
    which we will build our project. So let''s create a new folder for this project
    with a file named `index.html` containing the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，我们首先定义一个基本的HTML结构，然后在此基础上构建我们的项目。所以让我们为这个项目创建一个新的文件夹，其中包含一个名为`index.html`的文件，其中包含以下代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As in the previous chapters, we are using the Yahoo! Reset CSS stylesheet as
    well as Lea Verou's Prefix Free library. You can copy `prefixfree.js` from the
    previous chapter's example, or download it from [http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，我们使用Yahoo!重置CSS样式表以及Lea Verou的Prefix Free库。您可以从上一章的示例中复制`prefixfree.js`，或者从[http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)下载它。
- en: 'The structure we defined contains a few radio buttons divided into two groups:
    `mode` and `controls`. In this project, we''ll learn how to change the behavior
    of our gallery to reflect the choices made by our users. The default settings,
    the ones we''re going to implement first, concern an opacity transition and a
    bullet-based navigation system.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的结构包含一些单选按钮，分为`mode`和`controls`两组。在这个项目中，我们将学习如何改变我们的图库的行为，以反映我们的用户所做的选择。首先要实现的默认设置涉及不透明度过渡和基于项目符号的导航系统。
- en: Next there are anchors in a quantity equal to the number of images we want to
    display. Then, within a `section` element, we have a `figure` element for each
    image, and an `a` element pointing to the anchors previously defined.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来有与我们想要显示的图像数量相等的锚点。然后，在一个`section`元素内，我们为每个图像有一个`figure`元素，并且有一个指向先前定义的锚点的`a`元素。
- en: What we're going to implement consists of activating a particular image when
    the corresponding `a` element is pressed. To do so, we'll use the already introduced
    `:target` pseudo-selector in conjunction with some other little useful tricks,
    but first we have to spend a little time defining the base CSS structure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要实现的内容是在按下相应的`a`元素时激活特定图像。为此，我们将使用已经介绍的`:target`伪选择器与其他一些小技巧结合使用，但首先我们必须花一点时间定义基本的CSS结构。
- en: Applying the basic CSS
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用基本CSS
- en: 'First of all, we have to center our project in the middle of the browser''s
    viewport and then style the radio buttons a bit. To do this we write a few lines
    of CSS in `application.css`, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须将我们的项目居中在浏览器的视口中，然后稍微设计一下单选按钮。为此，我们在`application.css`中写入几行CSS，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Good! Now let''s assign the corresponding image to each `figure` element:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！现在让我们为每个`figure`元素分配相应的图像：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that in a real-world example, we would probably have inserted these
    images dynamically via a `style` attribute.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在实际示例中，我们可能会通过`style`属性动态插入这些图像。
- en: Now we can test the success of this setup phase using a CSS3-compliant browser.
    At this point we haven't added any behavior to the radio buttons, so we expect
    only to see the image within `#shot5` without any kind of interaction or animation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用符合CSS3标准的浏览器测试此设置阶段的成功。在这一点上，我们还没有为单选按钮添加任何行为，所以我们只期望在`#shot5`中看到图像，而没有任何交互或动画。
- en: '![Applying the basic CSS](img/3264OT_05_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![应用基本CSS](img/3264OT_05_01.jpg)'
- en: Styling the bullets
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化项目符号
- en: Let's start applying some style to the `a` elements. We created the bullets
    first because they are the default representation. Our bullets will be visible
    as a set of hollow, clickable circles below the image as are often found in online
    slideshows. We can use some rounded borders for the circles and apply a `background`
    rule when the element has been clicked upon. To intercept this state, we'll use
    the `:target` pseudo-selector on the corresponding `a` element that we have inserted
    at the top of our page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为`a`元素应用一些样式。我们首先创建了项目符号，因为它们是默认表示。我们的项目符号将显示为一组空心的可点击圆圈，就像在线幻灯片中经常发现的那样。我们可以为这些圆圈使用一些圆角边框，并在元素被点击时应用`background`规则。为了拦截这种状态，我们将在页面顶部插入的相应`a`元素上使用`:target`伪选择器。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We decided to set the bullets to `display:inline-block` in order to benefit
    from the space that this property injects between the elements when some space
    is left between their tags, as we saw in [Chapter 3](ch03.html "Chapter 3. Omni
    Menu"), *Omni Menu*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定将项目符号设置为`display:inline-block`，以便从此属性在元素标签之间留下一些空间时注入的空间中受益，就像我们在[第3章](ch03.html
    "第3章。Omni菜单")中看到的那样，*Omni菜单*。
- en: Next we used the `:target` pseudo-selector in conjunction with the proximity
    one, `~`, to define a rule that matches the bullet that points to the current
    anchor.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`：target`伪选择器与相邻选择器`~`结合使用，定义一个规则，匹配指向当前锚点的项目符号。
- en: 'Now everything is ready and we can start working on our first transition effect:
    opacity.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，我们可以开始处理我们的第一个过渡效果：不透明度。
- en: Implementing opacity transition
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现不透明度过渡
- en: The opacity effect is the simplest, all we have to do is to hide all the elements
    through the property `opacity:0`, except the one that corresponds to the clicked
    bullet. To obtain a nice fading effect, we can then specify a transition period
    between the two states using the `transition` property.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 透明度效果是最简单的，我们只需要通过`opacity:0`属性隐藏所有元素，除了对应于点击的子弹的元素。为了获得一个漂亮的淡出效果，我们可以使用`transition`属性指定两种状态之间的过渡期。
- en: 'A trick we have to implement here is to attach this behavior only when the
    **opacity** radio button is selected in our settings panel. To accomplish this,
    we can place another selector, `#opacity:checked`, before the rule:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在这里实现的一个技巧是，只有在我们的设置面板中选择了**opacity**单选按钮时，才能附加这种行为。为了实现这一点，我们可以在规则之前放置另一个选择器`#opacity:checked`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We basically used the same trick as earlier, plus we added a rule to set `opacity:1`
    to the first image if no bullets are selected. To accomplish this, we used the
    `+` selector to specifically match five sequential `a` elements that aren't `:target`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上使用了与之前相同的技巧，再加上一个规则，如果没有选择任何子弹，则将`opacity:1`设置为第一张图像。为了实现这一点，我们使用`+`选择器来具体匹配五个连续的不是`:target`的`a`元素。
- en: Well done! If we run the project in a browser, we can test the effect and notice
    how this works *only* if the corresponding radio button is selected.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！如果我们在浏览器中运行项目，我们可以测试效果，并注意到这只有在对应的单选按钮被选中时才会起作用。
- en: '![Implementing opacity transition](img/3264OT_05_01_2.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![实现透明度过渡](img/3264OT_05_01_2.jpg)'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: A final note before moving ahead, the selectors we created for this project
    are quite complex and, if used extensively in big applications, may introduce
    performance issues.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前的最后一点，我们为这个项目创建的选择器非常复杂，如果在大型应用程序中广泛使用，可能会引入性能问题。
- en: 'Time to implement a new effect: slide!'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候实现一个新的效果了：滑动！
- en: Implementing slide transition
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现滑动过渡
- en: 'A slide effect is basically a transition where one element moves outside the
    user''s view, sliding in one direction while another moves in. To implement this
    effect, we have to work on two different animations: slide in and slide out. The
    basic idea to make this effect work is similar to the previous one, although slightly
    more complicated. To achieve the slide-in effect, we have to move all the pictures
    outside the section viewport, say `left:-500px` and then, when the corresponding
    bullet is clicked, take the selected picture and move it to the opposite side
    (`left:500px`) using an animation that then moves it to the correct position (`left:0`).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动效果基本上是一个过渡，其中一个元素在用户视图之外移动，向一个方向滑动，而另一个元素在移动。为了实现这种效果，我们必须处理两种不同的动画：滑入和滑出。使这种效果起作用的基本思想与之前的类似，尽管稍微复杂一些。为了实现滑入效果，我们必须将所有图片移出部分视口，比如`left:-500px`，然后，当对应的子弹被点击时，取出选定的图片，并使用一个动画将其移动到相反的一侧（`left:500px`），然后将其移动到正确的位置（`left:0`）。
- en: 'To achieve the slide-out effect, we can then use another animation that starts
    from `left:0px` to `left:-500px`. The following is the complete CSS snippet:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现滑动效果，我们可以使用另一个动画，从`left:0px`到`left:-500px`开始。以下是完整的CSS片段：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We used `overflow:hidden` to hide the images outside the section viewport. The
    `slideout` animation is added to all the elements except the selected one, so
    when an element exits from the selected state, the animation gets activated and
    moves the element to `left:-500px` smoothly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`overflow:hidden`来隐藏部分视口外的图像。`slideout`动画被添加到除选定元素之外的所有元素，因此当一个元素退出选定状态时，动画被激活并将元素平滑地移动到`left:-500px`。
- en: 'The following is a screenshot taken from a CSS3-compliant browser (for example,
    Chrome, Firefox, IE10, and so on):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从支持CSS3的浏览器（例如Chrome，Firefox，IE10等）中截取的屏幕截图：
- en: '![Implementing slide transition](img/3264OT_05_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![实现滑动过渡](img/3264OT_05_02.jpg)'
- en: 'Now we''re ready to code the third transition effect: cube! But first, in order
    to better understand the next step, let''s spend some time introducing the basics
    of 3D transformations.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备编写第三个过渡效果的代码：立方体！但首先，为了更好地理解下一步，让我们花一些时间介绍3D变换的基础知识。
- en: 3D transformations
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D变换
- en: 3D transformations introduce a big leap-forward in designing websites. We can
    now experiment with moving and animating elements such as `div`, `img`, or even
    `video` in a 3D space that benefits from GPU acceleration (for most browsers).
    The first thing we have to deal with once we decide to introduce 3D effects is
    the **perspective**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 3D变换在设计网站方面引入了一个重大飞跃。我们现在可以尝试在3D空间中移动和动画化元素，如`div`、`img`，甚至`video`，这些都受益于GPU加速（对于大多数浏览器）。一旦我们决定引入3D效果，我们必须处理的第一件事是**透视**。
- en: The value we set for the `perspective` property specifies to the browser how
    to render elements with a position on the z axis equal to 0 (or not set). For
    example, `perspective:300px` means that an element with z = 0 (or not set) is
    drawn as if it is 300 px away from the viewport. This, of course, affects the
    way the elements are rendered when rotated.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`perspective`属性设置的值告诉浏览器如何渲染在z轴上位置为0（或未设置）的元素。例如，`perspective:300px`意味着z=0（或未设置）的元素被绘制得好像它离视口有300像素远。当然，这会影响元素在旋转时的渲染方式。
- en: Next comes a useful property whose purpose is to tell the browser to apply 3D
    transformations. This property is called `transform-style` and its value can either
    be `flat` or `preserve-3d`. When the value is `flat`, the elements with transformations
    that affect rotation on the x or y axis do not have perspective, but when the
    value is `preserve-3d` they actually behave like real 3D surfaces. This property
    also applies to all the element's children.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个有用的属性，其目的是告诉浏览器应用3D变换。这个属性叫做`transform-style`，它的值可以是`flat`或`preserve-3d`。当值为`flat`时，具有影响x或y轴旋转的变换的元素没有透视，但当值为`preserve-3d`时，它们实际上表现得像真正的3D表面。这个属性也适用于所有元素的子元素。
- en: Finally come the transformations. Here the property to use is the same as for
    the 2D ones, `transform`, but there are some new keywords that can be chosen as
    a value.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是变换。这里要使用的属性与2D变换相同，是`transform`，但有一些新的关键字可以作为值选择。
- en: The transformation origin is set by default to the center of the element with
    z = 0, but can be adjusted using the `transform-origin` property.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 变换原点默认设置为z = 0的元素中心，但可以使用`transform-origin`属性进行调整。
- en: With these notions in mind, we can start defining the cube effect that basically
    operates like the slide one but, of course, taking advantage of the 3D transform
    mechanism.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念，我们可以开始定义立方体效果，它基本上与滑动效果相同，但当然要利用3D变换机制。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We set `perspective` and `transform-style` to the parent elements of those we
    want to transform. Then we define an origin that is centered on the `figure` elements
    but shifted 250 px away from the viewport.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`perspective`和`transform-style`设置为要进行变换的父元素。然后我们定义一个原点，它位于`figure`元素的中心，但从视口中偏移了250像素。
- en: Then we apply a rotating transformation around the y axis using the same mechanism
    as we did earlier with the `slidein` animation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应用绕y轴旋转的变换，使用与我们之前使用`slidein`动画相同的机制。
- en: 'As a final touch, we tell the browser not to show the pictures when they''re
    rotating opposite to the user''s point of view. This is done with the `backface-visibility:
    hidden` statement.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，我们告诉浏览器在图片旋转到用户视角的相反方向时不显示图片。这是通过`backface-visibility: hidden`语句实现的。'
- en: 'A quick refresh in the browser and the result is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中快速刷新，结果如下：
- en: '![3D transformations](img/3264OT_05_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![3D变换](img/3264OT_05_03.jpg)'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Chrome automatically disables 3D effects if the hardware of the PC running the
    browser doesn't have a GPU. To check if this behavior has been triggered, we can
    write `about:GPU` in the address bar.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行浏览器的PC硬件没有GPU，Chrome会自动禁用3D效果。要检查是否触发了这种行为，可以在地址栏中输入`about:GPU`。
- en: Adding the slideshow mode
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加幻灯片放映模式
- en: 'Now we''re ready to implement the remaining two modes: slideshow and arrows.
    Let''s begin with slideshow. All we have to do here is define an animation for
    each effect (**opacity**, **slidein**, and **cube**) and trigger it, paying attention
    to specifying a different delay (using the `animation-delay` property) to each
    `figure` element.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备实现剩下的两种模式：幻灯片放映和箭头。让我们从幻灯片放映开始。在这里，我们只需为每种效果（**不透明度**、**滑入**和**立方体**）定义一个动画，并触发它，注意为每个`figure`元素指定不同的延迟（使用`animation-delay`属性）。
- en: 'Let''s begin with this last part and define a different delay for each `figure`
    element:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最后一部分开始，为每个`figure`元素定义不同的延迟：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If each animation lasts for 4 seconds (1.5 seconds to animate in, 1 second still,
    and 1.5 seconds to animate out), we need the second `figure` element to start
    after 2.5 seconds, exactly when the first one begins its exit animation. Later
    in this chapter, we'll learn how to make this CSS code adapt to a different number
    of images.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个动画持续4秒（1.5秒用于动画进入，1秒保持不动，1.5秒用于动画退出），我们需要第二个`figure`元素在2.5秒后开始，正好在第一个元素开始退出动画时。在本章后面，我们将学习如何使此CSS代码适应不同数量的图片。
- en: We can then repeat this step for the remaining `figure` elements and come out
    with the previous code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们为剩下的`figure`元素重复这一步骤，并得到之前的代码。
- en: The highlighted part is used to hide the bullets because they are not necessary
    during the slideshow.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮部分用于隐藏子弹，因为在幻灯片放映期间它们是不必要的。
- en: 'Good! Now we have to write the animations. Let''s start with the opacity animation:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！现在我们要写动画。让我们从不透明度动画开始：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have to check that both the **opacity** and **animate** radio buttons are
    checked. Given this state, we can set the animation to `opacity` and choose a
    duration that is the value of the `animation-delay` property of the last `figure`
    element, `#shot5`, (10 seconds) plus its animation time (4 seconds) minus the
    time this animation overlaps the previous one (1.5 seconds).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须检查**不透明度**和**动画**单选按钮是否都被选中。在这种状态下，我们可以将动画设置为`opacity`，并选择持续时间为最后一个`figure`元素`#shot5`的`animation-delay`属性的值（10秒）加上其动画时间（4秒），减去此动画与上一个动画重叠的时间（1.5秒）。
- en: Next we define some keyframes transforming the timing into a percentage (for
    example, 12% of 12.5 seconds = 1.5 seconds).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一些关键帧，将时间转换为百分比（例如，12.5秒的12% = 1.5秒）。
- en: 'We can also easily extend this behavior for the two remaining animations, as
    follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以轻松地将此行为扩展到剩下的两个动画，如下所示：
- en: For the sliding effect, we start with the picture outside the visible area.
    Then we move it until it becomes completely visible. Lastly, after a while, we
    move it again out of the visible area, but from the other side.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于滑动效果，我们从可见区域外开始，然后将其移动直到完全可见。最后，一段时间后，我们再次将其移出可见区域，但是从另一侧。
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For the rotating cube effect we basically do the same, but instead of using
    the `left` property we use the `transform: rotate()` one, and instead of sliding
    in the picture (-500 px, then 0 px, and finally 500 px) we rotate the cube (90
    degrees, then 0 degrees, and finally -90 degrees).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于旋转立方体效果，我们基本上做同样的事情，但是不使用`left`属性，而是使用`transform: rotate()`，而不是将图片滑入（-500像素，然后0像素，最后500像素），我们旋转立方体（90度，然后0度，最后-90度）。'
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Previous and next arrows
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上一页和下一页箭头
- en: 'Ok, here comes the trickiest part: to create the arrows. What we are going
    to do in order to accomplish this task is:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来是最棘手的部分：创建箭头。为了完成这个任务，我们要做的是：
- en: Use CSS to transform each bullet into an arrow sign by changing its shape and
    using a nice background image.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSS将每个子弹转换为箭头符号，改变其形状并使用漂亮的背景图像。
- en: Move all the arrows to the left of the picture, one above the other. In this
    way, the only visible arrow will be the one corresponding to the picture with
    the highest index.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有箭头移动到图片的左侧，依次排列。这样，唯一可见的箭头将是与最高索引图片对应的箭头。
- en: Hide the arrow corresponding to the selected image.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏与所选图片对应的箭头。
- en: Move all the arrows that follow the one corresponding to the selected image
    to the right, one above the other. In this way, on the left side there will remain
    only those arrows that correspond to the pictures with index lower than the selected
    one (for example, if we select picture number three, only the arrows of pictures
    number one and two will stay on the left, with the arrow of picture number two
    on the top of the stack).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有跟随所选图片对应的箭头移动到右侧，一个在另一个上面。这样，左侧将只保留那些对应于所选图片索引低于所选图片的箭头（例如，如果我们选择第三张图片，只有第一张和第二张图片的箭头会留在左侧，第二张图片的箭头会位于堆栈的顶部）。
- en: Pick the arrow that follows the one corresponding to the selected image and
    change its `z-index` value in order to put it on top of the right stack.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择跟随所选图片的箭头，并更改其`z-index`值，以将其放在右侧堆栈的顶部。
- en: 'The following is the corresponding CSS code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的CSS代码：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the result:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了结果：
- en: '![Previous and next arrows](img/3264OT_05_04.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![上一个和下一个箭头](img/3264OT_05_04.jpg)'
- en: CSS preprocessors
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS预处理器
- en: 'In this section, we''ll try to address the biggest issue with this project:
    the whole stylesheet is strictly dependent upon how many images are displayed
    in the gallery. Every effect is tailored around this number, and so adding a new
    image can cause a lot of work in our CSS.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将尝试解决这个项目的最大问题：整个样式表严重依赖于画廊中显示的图片数量。每个效果都围绕着这个数字定制，因此添加新图片可能会在我们的CSS中引起大量工作。
- en: To solve this problem we can use a **CSS preprocessor**, which lets us create
    a file in a language that includes some facilities such as loops and variables,
    and one that can be compiled into a CSS stylesheet.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用**CSS预处理器**，它可以让我们创建一个文件，使用一种包含一些便利设施的语言，比如循环和变量，并且可以编译成CSS样式表。
- en: We'll use Sass for this project. To install it, you need to first install Ruby
    ([http://www.ruby-lang.sorg/en/downloads/](http://www.ruby-lang.sorg/en/downloads/))
    and then type `gem install sass` from a terminal emulator within your project
    directory (depending on your operating system, you may need to use `sudo gem install
    sass` instead).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个项目中使用Sass。要安装它，您需要首先安装Ruby（[http://www.ruby-lang.sorg/en/downloads/](http://www.ruby-lang.sorg/en/downloads/)），然后在项目目录中的终端模拟器中键入`gem
    install sass`（根据您的操作系统，您可能需要使用`sudo gem install sass`）。
- en: Once this installation is complete, due to the fact that SCSS is a *superset*
    of CSS3, we can create an `scss/application.scss` file by duplicating the content
    of `css/application.css`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，由于SCSS是CSS3的*超集*，我们可以通过复制`css/application.css`的内容创建一个`scss/application.scss`文件。
- en: 'Next we can prepend the whole code with a variable to contain the number of
    pictures our gallery currently holds:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以在整个代码前面添加一个变量，以包含我们的画廊当前拥有的图片数量：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now every time in the CSS we encounter a structure like the following one:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当在CSS中遇到类似以下结构的情况时：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can change the code in a way that it generates the right number of selectors
    depending on `$number_of_images`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改变代码，使其根据`$number_of_images`生成正确数量的选择器：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Handling special cases
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理特殊情况
- en: 'There are a few special cases, though, one of them is when we encounter a CSS
    selector that contains a string token repeated the number of times equal to the
    number of images. For example, the following line of CSS:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，还有一些特殊情况，其中之一是当我们遇到一个包含一个字符串令牌重复次数等于图片数量的CSS选择器时。例如，以下一行CSS：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To transform the previous code into its variable-driven version, we have to
    create a function, a small piece of code that returns a string. We can write it
    just above the variable''s declaration, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要将上述代码转换为其变量驱动的版本，我们必须创建一个函数，一个返回字符串的小段代码。我们可以将其写在变量声明的上方，如下所示：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we can define a new variable that contains the string `a:not(:target)`
    repeated the number of times equal to the pictures in our gallery. So the new
    variable section in the `.scss` file will look like the following CSS snippet:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义一个新变量，其中包含字符串`a:not(:target)`重复的次数等于我们画廊中的图片数量。因此，`.scss`文件中的新变量部分将如下所示的CSS片段：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And finally, the previous CSS snippet can be transformed into:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，之前的CSS片段可以转换为：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Another thing we have to take care of is the timing of our animations. We have
    to dynamically calculate the total duration of the animation as well as the percentage
    of the three keyframes (enter animation, still, and exit animation) starting from
    the number of images in our gallery. To do so, we have to define a few extra variables
    just before the end of the `Variables` section of our `application.scss` file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要注意的一件事是我们动画的时机。我们必须动态计算动画的总持续时间以及三个关键帧的百分比（进入动画，静止和退出动画），从我们画廊中的图片数量开始。为此，我们必须在`application.scss`文件的`Variables`部分结束之前定义一些额外的变量：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the previous few lines, we defined the total duration of the animation and
    then we converted the timings of the animation (1.5 seconds to animate in, 1 second
    still, and 1.5 seconds to animate out) into a percentage.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的几行中，我们定义了动画的总持续时间，然后将动画的时间（1.5秒动画进入，1秒静止，1.5秒动画退出）转换为百分比。
- en: 'Last but not least, we have to run through our `.scss` code and transform each
    `animation-duration: 12.5s;` into `animation-duration: $animation_duration;`.
    We also have to change `@keyframes opacity`, `@keyframes slide`, and `@keyframes
    cube` as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '最后但同样重要的是，我们必须遍历我们的`.scss`代码，并将每个`animation-duration: 12.5s;`转换为`animation-duration:
    $animation_duration;`。我们还必须将`@keyframes opacity`，`@keyframes slide`和`@keyframes
    cube`更改为以下内容：'
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete version of the `application.scss` file is available with the sources
    of the project.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`application.scss`文件的完整版本可在项目的源代码中找到。'
- en: 'To compile our `application.scss` file into `application.css`, we can invoke
    the following command using a terminal emulator from the root of the project:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的`application.scss`文件编译成`application.css`，我们可以在项目的根目录中使用终端模拟器调用以下命令：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: By using these simple translating rules, we can transform our CSS into a very
    flexible SCSS. To prove it, we can try to remove a `figure` element from the HTML
    (with its corresponding `a` elements), change `$number_of_images:` to `4`, recompile
    `application.scss`, and notice how the whole project keeps working smoothly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些简单的翻译规则，我们可以将我们的CSS转换成非常灵活的SCSS。为了证明这一点，我们可以尝试从HTML中删除一个`figure`元素（及其相应的`a`元素），将`$number_of_images:`更改为`4`，重新编译`application.scss`，然后注意整个项目如何保持平稳运行。
- en: Support for older browsers
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于旧版浏览器的支持
- en: 'Internet Explorer version 9 or below doesn''t support CSS3 transition, nor
    CSS3 3D transforms, so this project can hardy be emulated on those browsers. We
    can however implement basic picture navigation while hiding all the other options.
    To achieve this, let''s take advantage one more time of the conditional comments
    and substitute `<html>` with the following lines:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 9或更低版本不支持CSS3过渡，也不支持CSS3 3D变换，因此这个项目几乎无法在这些浏览器上模拟。然而，我们可以实现基本的图片导航，同时隐藏所有其他选项。为了实现这一点，让我们再次利用条件注释，并用以下行替换`<html>`：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next we need to add support for Internet Explorer 8 to some CSS3 selectors
    we used during the project. To do so, we have to add a library called Selectivizr
    ([http://selectivizr.com/](http://selectivizr.com/)) that uses JavaScript to support
    most of the new CSS3 selectors. Selectivizr depends on jQuery, so we need to add
    it too. Lastly, we need to use a polyfill to make Internet Explorer 8 support
    the new HTML5 elements. The following is the snippet of code required to insert
    these three libraries, we need to add it just before the end of the `head` section
    in `index.html`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为项目中使用的一些CSS3选择器添加对Internet Explorer 8的支持。为此，我们必须添加一个名为Selectivizr（[http://selectivizr.com/](http://selectivizr.com/)）的库，该库使用JavaScript来支持大多数新的CSS3选择器。Selectivizr依赖于jQuery，所以我们也需要添加它。最后，我们需要使用一个polyfill来使Internet
    Explorer 8支持新的HTML5元素。以下是插入这三个库所需的代码片段，我们需要在`index.html`的`head`部分的末尾之前添加它：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Finally, we can add a few CSS lines to hide everything except the first `figure`
    element when the `.lteie9` class is present. Additionally, we can take advantage
    of Sass in order to trigger `display:block` on the `figure` element corresponding
    to the selected bullet.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以添加一些CSS行来隐藏除第一个`figure`元素之外的所有内容，当`.lteie9`类存在时。此外，我们可以利用Sass来触发所选项目对应的`figure`元素上的`display:block`。
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: CSS3 provides new, simplified methods to create stunning galleries without the
    use of JavaScript. Understandably, these techniques do not work with older non-CSS3-compliant
    browsers but we can detect these browsers and create fallback solutions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3提供了新的简化方法来创建令人惊叹的画廊，而无需使用JavaScript。可以理解的是，这些技术不适用于旧的非CSS3兼容浏览器，但我们可以检测这些浏览器并创建备用解决方案。
- en: In this chapter, we saw how we can create cool interaction mechanisms using
    only CSS3\. Additionally, we discovered a nice way to generate CSS statically
    starting from a more flexible language.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何仅使用CSS3就可以创建出色的交互机制。此外，我们还发现了一种从更灵活的语言静态生成CSS的好方法。
- en: Last but not least, we tried three cool animation effects. These can be easily
    mixed or new ones can be created by, for example, changing `rotateX` with `rotateY`,
    or `left` with `top`. In the next chapter, we'll explore how to obtain interesting
    parallax effects.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，我们尝试了三种很酷的动画效果。这些效果可以很容易地混合使用，或者可以通过例如将`rotateX`更改为`rotateY`，或者将`left`更改为`top`来创建新的效果。在下一章中，我们将探讨如何获得有趣的视差效果。
