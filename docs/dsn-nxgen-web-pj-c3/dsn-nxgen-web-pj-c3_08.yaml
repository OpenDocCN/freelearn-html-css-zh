- en: Chapter 8. Go Go Gauges
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。仪表
- en: 'In web application development, gauges can be useful for showing complicated
    or dynamic data in a visual or intuitive way. In this chapter, we''ll learn how
    to create a fully customizable animated gauge that can respond to real-time changes.
    We''ll also discuss techniques to port this type of widget for support in older
    web browsers. We''ll start by learning about a cool SASS enhancement called **Compass**;
    this is another way to deal with CSS3 experimental prefixes. The following is
    the list of the topics we''ll discuss:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序开发中，仪表可以用于以视觉或直观的方式显示复杂或动态数据。在本章中，我们将学习如何创建一个完全可定制的动画仪表，可以对实时变化做出响应。我们还将讨论将此类小部件移植到旧的Web浏览器中的技术。我们将首先学习一个名为**Compass**的很酷的SASS增强功能；这是处理CSS3实验前缀的另一种方法。以下是我们将讨论的主题列表：
- en: A basic gauge structure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本仪表结构
- en: Using Compass
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Compass
- en: Using rem
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用rem
- en: Moving the arrow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动箭头
- en: Animating the arrow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画化箭头
- en: Dealing with older browsers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理旧的浏览器
- en: A basic gauge structure
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本仪表结构
- en: 'Let''s begin with a new project; as usual we need to create an `index.html`
    file. This time the markup involved is so small and compact that we can add it
    right now:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个新项目开始；像往常一样，我们需要创建一个`index.html`文件。这次所涉及的标记非常小而紧凑，我们现在可以立即添加它：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The gauge widget is identified by the `data-gauge` attribute and defined with
    three other custom data attributes; namely, `data-min`, `data-max`, and `data-percent`,
    which indicate the respective minimum and maximum value of the range and the current
    arrow position expressed in percentage value.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表小部件由`data-gauge`属性标识，并使用其他三个自定义数据属性进行定义；即`data-min`，`data-max`和`data-percent`，它们表示范围的最小和最大值以及以百分比值表示的当前箭头位置。
- en: Within the element marked with the `data-gauge` attribute, we have defined a
    `div` tag that will become the arrow of the gauge.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在标有`data-gauge`属性的元素内，我们定义了一个将成为仪表箭头的`div`标记。
- en: 'To start with the styling phase, we first need to equip ourselves with a framework
    that is easy to use and can give us the opportunity to generate CSS code. We decide
    to go for SASS, the same as we used in [Chapter 5](ch05.html "Chapter 5. An Image
    Gallery"), *An Image Gallery*, so we first need to install Ruby ([http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/))
    and then enter the following from a command-line terminal:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始样式化阶段，我们首先需要装备一个易于使用并且可以为我们提供生成CSS代码的框架。我们决定使用SASS，与我们在[第5章](ch05.html "第5章。图库")中使用的相同，*图库*，因此我们首先需要安装Ruby（[http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/)），然后从命令行终端输入以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You would probably need to execute the following command if you are working
    in Unix/Linux environments:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Unix/Linux环境中工作，可能需要执行以下命令：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing Compass
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Compass
- en: For this project we'll also use Compass, a SASS extension able to add some interesting
    features to our SASS stylesheet.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们还将使用Compass，这是一个SASS扩展，能够为我们的SASS样式表添加一些有趣的功能。
- en: 'To install Compass, we have to just enter `gem install compass` (or `sudo gem
    install compass`) in a terminal window. After the installation procedure is over,
    we have to create a small `config.rb` file in the root folder of our project using
    the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Compass，我们只需在终端窗口中输入`gem install compass`（或`sudo gem install compass`）。安装过程结束后，我们必须在项目的根文件夹中创建一个名为`config.rb`的小文件，其中包含以下代码：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `config.rb` file helps Compass to understand the location of the various
    assets of the project; let''s have a look at these options in detail:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`config.rb`文件帮助Compass了解项目的各种资产的位置；让我们详细了解这些选项：'
- en: '`http_path`: This must be set to the HTTP URL related to the project''s root
    folder'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_path`：这必须设置为与项目根文件夹相关的HTTP URL'
- en: '`css_dir`: This contains the relative path to the folder where the generated
    CSS files should be saved'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css_dir`：这包含了生成的CSS文件应保存的文件夹的相对路径'
- en: '`sass_dir`: This contains the relative path to the folder that contains our
    `.scss` files'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sass_dir`：这包含了包含我们的`.scss`文件的文件夹的相对路径'
- en: '`images_dir`: This contains the relative path to the folder that holds all
    the images of the project'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images_dir`：这包含了项目所有图像的文件夹的相对路径'
- en: '`javascripts_dir`: This is similar to `images_dir`, but for JavaScript files'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javascripts_dir`：与`images_dir`类似，但用于JavaScript文件'
- en: There are other options available; we can decide whether the output CSS should
    be compressed or not, or we can ask Compass to use relative paths instead of absolute
    ones. For a complete list of all the options available, see the documentation
    at [http://compass-style.org/help/tutorials/configuration-reference/](http://compass-style.org/help/tutorials/configuration-reference/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可用的选项；我们可以决定输出的CSS是否应该被压缩，或者我们可以要求Compass使用相对路径而不是绝对路径。有关所有可用选项的完整列表，请参阅[http://compass-style.org/help/tutorials/configuration-reference/](http://compass-style.org/help/tutorials/configuration-reference/)上的文档。
- en: Next, we can create the folder structure we just described, providing our project
    with the `css`, `img`, `js`, and `scss` folders. Lastly, we can create an empty
    `scss/application.scss` file and start discovering the beauty of Compass.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建刚才描述的文件夹结构，为我们的项目提供`css`，`img`，`js`和`scss`文件夹。最后，我们可以创建一个空的`scss/application.scss`文件，并开始发现Compass的美丽。
- en: CSS reset and vendor prefixes
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS重置和供应商前缀
- en: 'We can ask Compass to regenerate the CSS file after each update to its SCSS
    counterpart. To do so, we need to execute the following command from the root
    of our project using a terminal:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以要求Compass在对其SCSS对应文件进行每次更新后重新生成CSS文件。为此，我们需要在项目的根目录中使用终端执行以下命令：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compass provides an alternative to the Yahoo! reset stylesheet we used in our
    previous project. To include this stylesheet, all we have to do is add a SASS
    `include` directive to our `application.scss` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Compass提供了一个替代我们在上一个项目中使用的Yahoo!重置样式表。要包含此样式表，我们只需在`application.scss`文件中添加一个SASS
    `include`指令：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we check `css/application.css`, the following is the result (trimmed):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查`css/application.css`，结果如下（已修剪）：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice also how the generated CSS keeps a reference to the original SCSS; this
    comes in handy when it's a matter of debugging some unexpected behaviors in our
    page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意生成的CSS如何保留对原始SCSS的引用；当需要调试页面中一些意外行为时，这非常方便。
- en: 'The next `@import` directive will take care of the CSS3 experimental vendor
    prefixes. By adding `@import "compass/css3"` on top of the `application.scss`
    file, we ask Compass to provide us with a lot of powerful methods for adding experimental
    prefixes automatically; for example, the following snippet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的“@import”指令将处理CSS3实验性供应商前缀。通过在“application.scss”文件顶部添加“@import "compass/css3"”，我们要求Compass自动为我们提供许多强大的方法来添加实验性前缀；例如，以下代码片段：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Is compiled into the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编译成以下内容：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Equipped with this new knowledge, we can now start deploying the project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 装备了这些新知识，我们现在可以开始部署项目了。
- en: Using rem
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用rem
- en: 'For this project we want to introduce `rem`, a measurement unit that is almost
    equivalent to `em`, but is always relative to the root element of the page. So,
    basically we can define a font size on the `html` element and then all the sizes
    will be related to it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们想引入“rem”，这是一个几乎等同于“em”的测量单位，但始终相对于页面的根元素。因此，基本上我们可以在“html”元素上定义一个字体大小，然后所有的大小都将与之相关：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, `1rem` corresponds to `20px`; the problem of this measurement is that
    some browsers, such as Internet Explorer version 8 or less, don''t actually support
    it. To find a way around this problem, we can use the following two different
    fallback measurement units:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，“1rem”对应“20px”；这种测量的问题在于一些浏览器，比如IE8或更低版本，实际上不支持它。为了解决这个问题，我们可以使用以下两种不同的备用测量单位：
- en: '`em`: The good news is that `em`, if perfectly tuned, works exactly as `rem`;
    the bad news is that this measurement unit is relative to the element''s `font-size`
    property and is not relative to `html`. So, if we decide to pursue this method,
    we then have to take extra care every time we deal with `font-size`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “em”：好消息是，“em”如果完全调整，与“rem”完全相同；坏消息是，这种测量单位是相对于元素的“font-size”属性而不是相对于“html”。因此，如果我们决定采用这种方法，那么每次处理“font-size”时，我们都必须特别小心。
- en: '`px`: We can use a fixed unit pixel size. The downside of this choice is that
    in older browsers, we''re complicating the ability to dynamically change the proportions
    of our widget.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “px”：我们可以使用固定单位像素大小。这种选择的缺点是在旧版浏览器中，我们使得动态改变小部件比例的能力变得更加复杂。
- en: In this project, we will use pixels as our unit of measurement. The reason we
    have decided this is because one of the `rem` benefits is that we can change the
    size of the gauge easily by changing the font-size property with media queries.
    This is only possible where media queries and `rem` are supported.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用像素作为我们的测量单位。我们之所以决定这样做，是因为“rem”的一个好处是我们可以通过媒体查询改变字体大小属性来轻松改变仪表的大小。这仅在支持媒体查询和“rem”的情况下才可能。
- en: 'Now, we have to find a way to address most of the duplication that would emerge
    from having to insert every statement containing a space measurement unit twice
    (`rem` and `px`). We can easily solve this problem by creating a SASS mixin within
    our `application.scss` file as follows (for more info on SASS mixins, we can refer
    to the specifications page at [http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins)):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须找到一种方法来解决大部分重复的问题，即必须两次插入包含空格测量单位的语句（“rem”和“px”）。我们可以通过在我们的“application.scss”文件中创建一个SASS
    mixin来轻松解决这个问题（有关SASS mixin的更多信息，我们可以参考[http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixins)的规范页面）：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So the next time instead of writing the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，下次我们可以写成：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can instead write:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以写成：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition to that, we can also save the `multiplier` coefficient between
    `px` and `rem` in a variable and use it in every call to this function and within
    the `html` declaration; let''s also add this to `application.scss`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还可以将“px”和“rem”之间的“乘数”系数保存在一个变量中，并在每次调用此函数和“html”声明中使用它；让我们也将这个添加到“application.scss”中：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Of course, there are still some cases in which the `@mixin` directive that we
    just created doesn't work, and in such situations we'll have to handle this duality
    manually.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，仍然有一些情况下我们刚刚创建的“@mixin”指令不起作用，这种情况下我们将不得不手动处理这种二重性。
- en: Basic structure of a gauge
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表的基本结构
- en: 'Now we''re ready to develop at least the basic structure of our gauge, which
    includes the rounded borders and the minimum and maximum range labels. The following
    code is what we need to add to `application.scss`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备至少开发我们仪表的基本结构，包括圆角边框和最小和最大范围标签。以下代码是我们需要添加到“application.scss”中的：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With `box-shadow` and `border`, we can't use the `px_and_rem` mixin, so we duplicated
    these properties using `px` first and then `rem`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“box-shadow”和“border”，我们无法使用“px_and_rem”混合，因此我们首先使用“px”，然后使用“rem”复制这些属性。
- en: 'The following screenshot shows the result:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了结果：
- en: '![Basic structure of a gauge](img/3264OT_08_1.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![仪表的基本结构](img/3264OT_08_1.jpg)'
- en: Gauge tick marks
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刻度标记
- en: 'How to handle tick marks? One method would be by using images, but another
    interesting alternative is to benefit from multiple background support and create
    those tick marks out of gradients. For example, to create a vertical mark, we
    can use the following within the `div[data-gauge]` selector:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如何处理刻度标记？一种方法是使用图像，但另一个有趣的选择是利用多重背景支持，并用渐变创建这些刻度标记。例如，要创建一个垂直标记，我们可以在“div[data-gauge]”选择器中使用以下内容：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Basically, we define a very small gradient between transparent and another color
    in order to obtain the tick mark. That's the first step, but we're yet to deal
    with the fact that each tick mark must be defined with a different angle. We can
    solve this problem by introducing a SASS function that takes the number of tick
    marks to print and iterates up to that number while also adjusting the angles
    of each mark. Of course, we also have to take care of experimental vendor prefixes,
    but we can count on Compass for that.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们定义了一个非常小的透明渐变和另一种颜色之间的渐变，以获得刻度线。这是第一步，但我们还没有处理每个刻度线必须用不同的角度来定义这个事实。我们可以通过引入一个SASS函数来解决这个问题，该函数接受要打印的刻度数，并在达到该数字时迭代，同时调整每个标记的角度。当然，我们还必须处理实验性的供应商前缀，但我们可以依靠Compass来处理。
- en: The following is the function. We can create a new file called `scss/_gauge.scss`
    for this and other gauge-related functions; the leading underscore is to tell
    SASS to not create a `.css` file out of this `.scss` file, because it will be
    included in a separate file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个功能。我们可以为此和其他与仪表相关的功能创建一个名为`scss/_gauge.scss`的新文件；前导下划线是告诉SASS不要将这个`.scss`文件创建为`.css`文件，因为它将被包含在一个单独的文件中。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We start with an empty string adding the result of calling the `linear-gradient`
    Compass function, which handles experimental vendor prefixes, with an angle that
    varies based on the current tick mark index.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个空字符串开始，添加调用`linear-gradient` Compass函数的结果，该函数处理基于当前刻度线索引的角度变化。
- en: 'To test this function out, we first need to include `_gauge.scss` in `application.scss`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个功能，我们首先需要在`application.scss`中包含`_gauge.scss`：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we can insert the function call within the `div[data-gauge]` selector
    in `application.scss`, specifying the number of tick marks required:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以在`application.scss`中的`div[data-gauge]`选择器中插入函数调用，指定所需的刻度数：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `background` function is also provided by Compass and it is just another
    mechanism to deal with experimental prefixes. Unfortunately, if we reload the
    projects the results are far from expected:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`background`函数也是由Compass提供的，它只是处理实验性前缀的另一种机制。不幸的是，如果我们重新加载项目，结果与预期相去甚远：'
- en: '![Gauge tick marks](img/3264OT_08_2.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![刻度线](img/3264OT_08_2.jpg)'
- en: Although we can see a total of 11 stripes, they are of the wrong sizes and in
    the wrong position. To resolve this, we will create some functions to set the
    correct values for `background-size` and `background-position`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以看到总共有11条条纹，但它们的大小和位置都是错误的。为了解决这个问题，我们将创建一些函数来设置`background-size`和`background-position`的正确值。
- en: Dealing with background size and position
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理背景大小和位置
- en: 'Let''s start with `background-size`, the easiest. Since we want each of the
    tick marks to be exactly `1rem` in size, we can proceed by creating a function
    that prints **1rem 1rem** as many times as the number of the passed parameter;
    so let''s add the following code to `_gauge.scss`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`background-size`开始，这是最简单的。由于我们希望每个刻度线的大小恰好为`1rem`，我们可以通过创建一个函数，根据传递的参数的数量打印**1rem
    1rem**，来继续进行；因此，让我们将以下代码添加到`_gauge.scss`中：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We already noticed the `append` function; an interesting thing to know about
    it is that the last parameter of this function lets us decide if some letter must
    be used to concatenate the strings being created. One of the available options
    is `comma`, which perfectly suits our needs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注意到了`append`函数；关于它的一个有趣的事情是，这个函数的最后一个参数让我们决定是否使用某个字母来连接正在创建的字符串。其中一个可用的选项是`逗号`，这非常适合我们的需求。
- en: 'Now, we can add a call to this function within the `div[data-gauge]` selector:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`div[data-gauge]`选择器内添加对这个函数的调用：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And the following is the result:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Dealing with background size and position](img/3264OT_08_3.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![处理背景大小和位置](img/3264OT_08_3.jpg)'
- en: 'Now the tick marks are of the right size, but they are displayed one above
    the other and are repeated all across the element. To avoid this behavior, we
    can simply add `background-repeat: no-repeat` just below the previous instruction:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '现在刻度线的大小是正确的，但它们是一个接一个地显示，并且在整个元素上重复。为了避免这种行为，我们可以在上一条指令的下面简单地添加`background-repeat:
    no-repeat`：'
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'On the other hand, to handle the position of the tick marks we need another
    SASS function; this time it''s a little more complex and involves a bit of trigonometry.
    Each gradient must be placed in the function of its angle—x is the cosine of that
    angle and y the sine. The `sin` and `cos` functions are provided by Compass, we
    need just to handle the shift, because they are referred to the center of the
    circle whereas our css property''s origin is in the upper-left corner:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，为了处理刻度线的位置，我们需要另一个SASS函数；这次它更复杂一些，涉及一点三角学。每个渐变必须放在其角度的函数中——x是该角度的余弦，y是正弦。`sin`和`cos`函数由Compass提供，我们只需要处理一下偏移，因为它们是相对于圆的中心，而我们的css属性的原点是在左上角。
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now we can go ahead and add a new line inside the `div[data-gauge]` selector:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续在`div[data-gauge]`选择器内添加一行新代码：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And here''s the much-awaited result:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是期待已久的结果：
- en: '![Dealing with background size and position](img/3264OT_08_4.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![处理背景大小和位置](img/3264OT_08_4.jpg)'
- en: 'The next step is to create a `@mixin` directive to hold these three functions
    together, so we can add the following to `_gauge.scss`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个`@mixin`指令来将这三个函数放在一起，这样我们可以将以下内容添加到`_gauge.scss`中：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And replace what we placed inside `div[data-gauge]` in this chapter with a
    single invocation:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 并用一个单独的调用替换我们在本章中放置在`div[data-gauge]`内的内容：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We''ve also left three additional parameters to define extra values for `background`,
    `background-size` , and `background-position`, so we can, for example, easily
    add a gradient background:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还留下了三个额外的参数来定义`background`、`background-size`和`background-position`的额外值，因此我们可以很容易地添加一个渐变背景：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And following is the screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是屏幕截图：
- en: '![Dealing with background size and position](img/3264OT_08_5.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![处理背景大小和位置](img/3264OT_08_5.jpg)'
- en: Creating the arrow
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建箭头
- en: 'To create an arrow we can start by defining the circular element in the center
    of the gauge that holds the arrow. This is easy and doesn''t introduce anything
    really new; here''s the code that needs to be nested within the `div[data-gauge]`
    selector:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个箭头，我们可以从定义仪表中心的圆形元素开始，该元素容纳箭头。这很容易，也没有真正引入任何新东西；以下是需要嵌套在`div[data-gauge]`选择器内的代码：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The arrow itself is a more serious business; the basic idea is to use a linear
    gradient that adds a color only to half the element starting from its diagonal.
    Then we can rotate the element in order to move the pointed end at its center.
    The following is the code that needs to be placed within `div[data-arrow]`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头本身是一个更严肃的事情；基本思想是使用线性渐变，只在元素的一半开始添加颜色，然后我们可以旋转元素，以便将指向末端移动到其中心。以下是需要放在`div[data-arrow]`内的代码：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To better understand the trick behind this implementation, we can temporarily
    add `border: 1px solid red` within the `&:before` selector to the result and zoom
    a bit:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '为了更好地理解这个实现背后的技巧，我们可以暂时在结果中的`&:before`选择器内添加`border: 1px solid red`，然后放大一点：'
- en: '![Creating the arrow](img/3264OT_08_6.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![创建箭头](img/3264OT_08_6.jpg)'
- en: Moving the arrow
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动箭头
- en: Now we want to position the arrow to the correct angle depending on the `data-percent`
    attribute value. To do so we have to take advantage of the power of SASS. In theory
    the CSS3 specification would allow us to valorize some properties using values
    taken from attributes, but in practice this is only possible while dealing with
    the `content` property, as we saw earlier in this book.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要根据`data-percent`属性值将箭头定位到正确的角度。为了做到这一点，我们必须利用SASS的强大功能。理论上，CSS3规范允许我们使用从属性中获取的值来赋值给一些属性，但实际上，这只有在处理`content`属性时才可能，就像我们在本书中之前看到的那样。
- en: So what we're going to do is create a `@for` loop from `0` to `100` and print
    in each iteration a selector that matches a defined value of the `data-percent`
    attribute. Then we'll set a different `rotate()` property for each of the CSS
    rules.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要做的是创建一个`@for`循环，从`0`到`100`，并在每次迭代中打印一个选择器，该选择器匹配`data-percent`属性的定义值。然后我们将为每个CSS规则设置不同的`rotate()`属性。
- en: 'The following is the code; this time it must be placed within the `div[data-gauge]`
    selector:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码；这次它必须放在`div[data-gauge]`选择器内：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you are too scared about the amount of CSS generated, then you can decide
    to adjust the increment of the gauge, for example, to `10`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对生成的CSS数量感到害怕，那么你可以决定调整仪表的增量，例如，调整为`10`：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And the following is the result:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Moving the arrow](img/3264OT_08_7.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![移动箭头](img/3264OT_08_7.jpg)'
- en: Animating the gauge
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画仪表
- en: 'We can now animate the arrow using CSS transitions. Basically, we have to tell
    the browser that the `transform` property needs to be animated; the necessary
    SASS code is a bit longer than expected because Compass is not yet able to prefix
    the `transition` property and its value ([https://github.com/chriseppstein/compass/issues/289](https://github.com/chriseppstein/compass/issues/289)),
    so we have to do it manually:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用CSS过渡来使箭头动画化。基本上，我们必须告诉浏览器需要对`transform`属性进行动画处理；必要的SASS代码比预期的要长一些，因为Compass尚不能为`transition`属性及其值添加前缀（[https://github.com/chriseppstein/compass/issues/289](https://github.com/chriseppstein/compass/issues/289)），所以我们必须手动完成：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: After we have placed these CSS instructions inside the `div[data-arrow]` selector,
    we'll notice that if we change the `data-percentage` property, for example, by
    using Chrome and its development console, the arrow responds with a smooth animation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将这些CSS指令放在`div[data-arrow]`选择器内时，我们会注意到，如果我们改变`data-percentage`属性，例如，使用Chrome和它的开发控制台，箭头会以平滑的动画做出响应。
- en: Overall indicator
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体指示器
- en: 'Some gauges present a color indicator, usually from green to red, associated
    with the position of the arrow; we can work out a similar result. First of all
    we need to define two new custom data attributes, one that indicates the percentage
    at which the indicator switches from green to orange and the other where the percentage
    switches from orange to red. Here it is:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一些仪表具有颜色指示器，通常从绿色到红色，与箭头的位置相关联；我们可以得出类似的结果。首先，我们需要定义两个新的自定义数据属性，一个指示指示器从绿色切换到橙色的百分比，另一个指示指示器从橙色切换到红色的百分比。在这里：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then we need to specify a default background color, let''s say `green`, within
    `div[data-gauge]`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要在`div[data-gauge]`中指定一个默认的背景颜色，比如说`green`：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, we redefine the background gradient to leave the first 25 percent of
    the circumference transparent; in this way we can display (and control) the underlying
    color, so let''s rewrite the `gauge-background` call:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们重新定义背景渐变，使圆周的前25%透明；这样我们就可以显示（和控制）底层颜色，所以让我们重新编写`gauge-background`调用：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now we can use another Sass loop to change the `background-color` property respecting
    the value defined in the attributes. Since we're going to implement a loop nested
    in the previous loop, we have to be careful not to increase the size of the resulting
    CSS too much.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用另一个Sass循环来改变`background-color`属性，以符合属性中定义的值。由于我们将在前一个循环中嵌套实现一个循环，我们必须小心，不要使生成的CSS的大小增加太多。
- en: To achieve this let's consider only the 10s of the `data-orange-from` and `data-red-from`
    data attributes. What we need to do is basically write a CSS rule that activates
    the red or orange background color if the `data-percentage` property is greater
    than or equal to `data-orange-from` or `data-red-from`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，让我们只考虑`data-orange-from`和`data-red-from`数据属性的十位数。我们需要做的基本上是编写一个CSS规则，如果`data-percentage`属性大于或等于`data-orange-from`或`data-red-from`，则激活红色或橙色背景颜色。
- en: 'The following is the complete loop, including the previous loop we used to
    move the arrow:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的循环，包括我们之前用来移动箭头的循环：
- en: '[PRE35]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And following is the result:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Overall indicator](img/3264OT_08_8.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![整体指示器](img/3264OT_08_8.jpg)'
- en: Reducing the size of the CSS
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减小CSS的大小
- en: We can reduce the size of the generated CSS by asking Compass to not add a comment
    before each rule pointing to the corresponding SASS rule. If we want to do that,
    simply add `line_comments = false` to our `config.rb` file and then stop and relaunch
    `compass watch` in the project's root folder.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过要求Compass不在每个规则之前添加指向相应SASS规则的注释，可以减少生成的CSS的大小。如果我们想要这样做，只需在`config.rb`文件中添加`line_comments
    = false`，然后在项目的根文件夹中停止并重新启动`compass watch`。
- en: Adding some trembling
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些颤动
- en: 'As an additional feature we can add an option to let the arrow tremble a bit
    when it nears 100 percent. We can achieve this behavior by adding a small animation
    if an extra `data-trembling` attribute is present:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个额外的功能，我们可以添加一个选项，让箭头在接近100%时颤动一点。如果存在额外的`data-trembling`属性，我们可以通过添加一个小动画来实现这种行为：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Unfortunately, Compass doesn''t provide CSS3 animation mixins out of the box,
    so we have to install a Compass plugin that can help us with that. In this case,
    the plugin is called **compass-animation** ([https://github.com/ericam/compass-animation](https://github.com/ericam/compass-animation)),
    created by Eric Meyer ([http://eric.andmeyer.com/](http://eric.andmeyer.com/)).
    This is how it''s installed:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Compass没有默认提供CSS3动画mixin，因此我们必须安装一个可以帮助我们的Compass插件。在这种情况下，插件称为**compass-animation**（[https://github.com/ericam/compass-animation](https://github.com/ericam/compass-animation)），由Eric
    Meyer创建（[http://eric.andmeyer.com/](http://eric.andmeyer.com/)）。安装方法如下：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Or as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如下：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And then we have to include the plugin both when calling `compass watch`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在调用`compass watch`时必须同时包含插件：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And in the header of `application.scss`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`application.scss`的头部添加：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Well done! Now we''re ready to define a really simple animation that modifies
    the rotating angle of the arrow causing the trembling effect we''re looking for.
    Let''s add a few lines of code at the end of `application.scss`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在我们准备定义一个非常简单的动画，修改箭头的旋转角度，引起我们寻找的颤动效果。让我们在`application.scss`的末尾添加几行代码：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then we need to add a new rule within `div[data-gauge]` that activates this
    animation if `data-trembling` is present and `data-percentage` starts with `8`
    or `9` or is equal to `100`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要在`div[data-gauge]`内添加一个新规则，如果`data-trembling`存在，并且`data-percentage`以`8`或`9`开头，或者等于`100`，则激活此动画：
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Unfortunately, due to some yet-to-be-resolved bugs in WebKit-based browsers
    that prevent animations from being applied to `before` and `after` pseudo-selectors,
    at the time of writing only Firefox correctly implements this behavior:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，由于WebKit浏览器中一些尚未解决的错误，阻止动画应用于`before`和`after`伪选择器，目前只有Firefox正确实现了这种行为：
- en: '![Adding some trembling](img/3264OT_08_9.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![添加一些颤动](img/3264OT_08_9.jpg)'
- en: Displaying the gauge value
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示仪表值
- en: 'If we make a small edit to our HTML code, we can easily display the current
    gauge value:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对HTML代码进行小修改，就可以轻松显示当前的仪表值：
- en: '[PRE43]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And following is the code to add within the `div[data-gauge]` selector:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要添加到`div[data-gauge]`选择器内的代码：
- en: '[PRE44]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The result:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '![Displaying the gauge value](img/3264OT_08_10.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![显示仪表值](img/3264OT_08_10.jpg)'
- en: Graceful degradation
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优雅降级
- en: 'To keep this widget meaningful also for those browsers that do not support
    background gradients, we have to handle a different representation for the arrow.
    To detect where this feature is missing, we can use Modernizr by creating a custom
    build ([http://modernizr.com/download/](http://modernizr.com/download/)), as we
    saw in the previous chapters that check only for gradient support:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个小部件对那些不支持背景渐变的浏览器也有意义，我们必须处理箭头的不同表示。为了检测缺少此功能的位置，我们可以使用Modernizr创建一个自定义构建（[http://modernizr.com/download/](http://modernizr.com/download/)），就像我们在前几章中只检查渐变支持一样：
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then we can go for a solid background color; the arrow will, of course, become
    a rectangle but we''ll save the meaning of the widget; let''s add this rule at
    the bottom of `application.scss`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以选择一个纯色背景；箭头当然会变成一个矩形，但我们会保留小部件的含义；让我们在`application.scss`的底部添加这条规则：
- en: '[PRE46]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And following is the result:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Graceful degradation](img/3264OT_08_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![优雅降级](img/3264OT_08_11.jpg)'
- en: 'We can go a step forward by using Compass'' ability to translate gradients
    into `Base64`-encoded SVG and use them as fallback background images where native
    gradients are not supported. Unfortunately, this doesn''t work with gradients
    that express an angle using numeric values, such as `23deg`, so we will not be
    able to reproduce tick marks. We can however ask Compass to convert the `radial-gradient`
    property we use for background. The following are the properties we need to add
    inside the `.no-cssgradients div[data-gauge]` rule:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步使用Compass将渐变转换为`Base64`编码的SVG，并在本机不支持渐变的情况下将它们用作回退背景图像。不幸的是，这在使用数值表达角度的渐变（如`23deg`）时不起作用，因此我们将无法重现刻度线。但是，我们可以要求Compass转换我们用于背景的`radial-gradient`属性。以下是我们需要在`.no-cssgradients
    div[data-gauge]`规则内添加的属性：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'And the following is the result, much closer to the original gauge:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果，更接近原始仪表：
- en: '![Graceful degradation](img/3264OT_08_12.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![优雅降级](img/3264OT_08_12.jpg)'
- en: Implementing the gauge in Internet Explorer 8
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Internet Explorer 8中实现仪表
- en: If we want to support Internet Explorer 8, then we need to address the lack
    of both the `border-radius` and `transform` properties.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想支持Internet Explorer 8，那么我们需要解决`border-radius`和`transform`属性的缺失。
- en: 'For `border-radius` we can use a JavaScript-based polyfill such as CSS3 Pie,
    and we can download this polyfill from its website, [http://css3pie.com/](http://css3pie.com/),
    and then copy `PIE.js` in our project''s `js` folder. Next, we can include this
    JavaScript file from `index.html` along with the latest version of jQuery and
    `js/application.js`, an empty file we are going to use in a while:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`border-radius`，我们可以使用基于JavaScript的polyfill，比如CSS3 Pie，我们可以从它的网站[http://css3pie.com/](http://css3pie.com/)下载这个polyfill，然后将`PIE.js`复制到项目的`js`文件夹中。接下来，我们可以在`index.html`中包含这个JavaScript文件，以及最新版本的jQuery和`js/application.js`，这是一个我们一会儿要用到的空文件：
- en: '[PRE48]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Usually CSS3 Pie automatically detects how to enhance a given element by identifying
    the CSS3 properties to emulate. In this case, however, we have used `border-top-left-radius`
    and `border-top-right-radius` whereas CSS3 Pie only supports the general `border-radius`.
    We can find a way around this by adding a special `border-radius` property prefixed
    with `–pie` inside the `div[data-gauge]` rule:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，CSS3 Pie会自动检测如何增强给定元素，通过识别要模拟的CSS3属性。然而，在这种情况下，我们使用了`border-top-left-radius`和`border-top-right-radius`，而CSS3
    Pie只支持通用的`border-radius`。我们可以通过在`div[data-gauge]`规则中添加一个带有`-pie`前缀的特殊`border-radius`属性来解决这个问题：
- en: '[PRE49]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, we have to activate CSS3 Pie by inserting a few lines of JavaScript code
    inside `js/application.js`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过在`js/application.js`中插入几行JavaScript代码来激活CSS3 Pie：
- en: '[PRE50]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'And following is the result:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![Implementing the gauge in Internet Explorer 8](img/3264OT_08_13.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![在Internet Explorer 8中实现仪表](img/3264OT_08_13.jpg)'
- en: Now if we want to activate the arrow rotation, we need to emulate the `transform`
    property. To achieve this behavior, we can use `jquery.transform.js` ([https://github.com/louisremi/jquery.transform.js](https://github.com/louisremi/jquery.transform.js))
    by Louis-Rémi Babé ([http://twitter.com/louis_remi](http://twitter.com/louis_remi)).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要激活箭头旋转，我们需要模拟`transform`属性。为了实现这种行为，我们可以使用Louis-Rémi Babé的`jquery.transform.js`（[https://github.com/louisremi/jquery.transform.js](https://github.com/louisremi/jquery.transform.js)）；Louis-Rémi
    Babé（[http://twitter.com/louis_remi](http://twitter.com/louis_remi)）。
- en: 'After downloading the library, we need to copy `jquery.transform2d.js` into
    the `js` folder of our project. Then we add the necessary `script` element in
    `index.html`. In order to add a different class to the `html` element when the
    browser is Internet Explorer 8, we will use `IE` conditional comments to add a
    different class to the `html` element. The following is the result:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完库之后，我们需要将`jquery.transform2d.js`复制到项目的`js`文件夹中。然后在`index.html`中添加必要的`script`元素。为了在Internet
    Explorer 8浏览器中为`html`元素添加不同的类，我们将使用`IE`条件注释来为`html`元素添加不同的类。结果如下：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`jquery.transform2d.js` adds the ability to trigger the `transform` property
    even on Internet Explorer 8 thereby enhancing the `css` function provided by jQuery;
    the following is an example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`jquery.transform2d.js`使得即使在Internet Explorer 8浏览器上也能触发`transform`属性，从而增强了jQuery提供的`css`功能；以下是一个例子：'
- en: '[PRE52]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'So, we can try to add a few more JavaScript lines of code by calling the preceding
    function; this transforms `js/application.js` as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以尝试通过调用前述函数添加一些JavaScript代码行；这将使`js/application.js`变成如下形式：
- en: '[PRE53]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Unfortunately, the results are not as good as expected:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，结果并不如预期那样好：
- en: '![Implementing the gauge in Internet Explorer 8](img/3264OT_08_14.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![在Internet Explorer 8中实现仪表](img/3264OT_08_14.jpg)'
- en: The problem is that the `div[data-arrow]:before` element is clipped within its
    parent. This can be resolved by drawing a white disk (now a square) under the
    arrow, and resizing `div[data-arrow]` to be as large as the whole widget with
    a transparent background and no borders in order to easily contain the arrow.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于`div[data-arrow]:before`元素被裁剪在其父元素内。这可以通过在箭头下方绘制一个白色圆盘（现在是一个正方形），并将`div[data-arrow]`调整大小为整个小部件，并且背景透明且没有边框，以便容纳箭头。
- en: To do so we can use the `.ie8` class to add some properties only when the browser
    is Internet Explorer 8\. Let's append a few lines of code to `application.scss`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以使用`.ie8`类，仅在浏览器为Internet Explorer 8时添加一些属性。让我们在`application.scss`中添加几行代码。
- en: '[PRE54]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And finally, following is the working result:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是工作结果：
- en: '![Implementing the gauge in Internet Explorer 8](img/3264OT_08_15.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![在Internet Explorer 8中实现仪表](img/3264OT_08_15.jpg)'
- en: Compass and Internet Explorer 10
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Compass和Internet Explorer 10
- en: 'The latest version of Compass at the time of writing (0.12.0) doesn''t add
    the `-ms-` experimental prefix to `linear-gradient` and `radial-gradient`. To
    find a way around this problem and make the gauge work smoothly also on IE10,
    we have to apply some modifications to our `.scss` code. In particular, we need
    to change the `gauge-tick-marks` function inside `_gauge.scss` as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Compass的最新版本（0.12.0）没有为`linear-gradient`和`radial-gradient`添加`-ms-`实验性前缀。为了解决这个问题并使仪表在IE10上顺利工作，我们必须对我们的`.scss`代码进行一些修改。特别是，我们需要按照以下方式修改`_gauge.scss`中的`gauge-tick-marks`函数：
- en: '[PRE55]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We also need to change the `gauge-background` mixin, also inside `_gauge.scss`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`_gauge.scss`中修改`gauge-background` mixin：
- en: '[PRE56]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'And finally we have to add an extra CSS line in `application.scss` inside `:before`
    within `div[data-arrow]`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要在`application.scss`中的`:before`中的`div[data-arrow]`中添加额外的CSS行：
- en: '[PRE57]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'After making these small modifications, we can also appreciate this widget
    using Internet Explorer 10:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这些小修改之后，我们也可以在Internet Explorer 10中欣赏到这个小部件：
- en: '![Compass and Internet Explorer 10](img/3264OT_08_16.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![Compass和Internet Explorer 10](img/3264OT_08_16.jpg)'
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Drawing a gauge can be more difficult than expected; this is more truer if we
    also take care of keeping support for older browsers. In this chapter, we learned
    how to install and work with Compass, create complex CSS using the power of the
    SASS syntax, and deal with graceful degradation and polyfill techniques. In the
    next chapter, we'll create a movie trailer by leveraging the power of CSS animations
    and 3D transforms.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制仪表可能比预期更困难；如果我们还要考虑支持旧版浏览器，情况就更加复杂。在本章中，我们学习了如何安装和使用Compass，利用SASS语法的强大功能创建复杂的CSS，并处理优雅降级和填充技术。在下一章中，我们将利用CSS动画和3D变换的功能创建一个电影预告片。
