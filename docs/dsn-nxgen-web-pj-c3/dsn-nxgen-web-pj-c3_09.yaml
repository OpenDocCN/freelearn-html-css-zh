- en: Chapter 9. Creating an Intro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 创建介绍
- en: The goal of this project is to create an intro, a non-interactive animation
    that uses text and visual effects to present something such as a product, a concept,
    or whatever. This project gives us the opportunity to explore some advanced animation
    and 3D topics and to extend our knowledge of Compass while creating some ad hoc
    functions to handle this complexity.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的目标是创建一个介绍，一个非交互式的动画，使用文本和视觉效果来呈现产品、概念或其他内容。这个项目让我们有机会探索一些高级动画和3D主题，并在创建一些特定函数来处理这种复杂性的同时扩展我们对Compass的了解。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The new flexbox model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的flexbox模型
- en: Creating keyframe animations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建关键帧动画
- en: Concatenate animations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接动画
- en: Animation of CSS 3D properties
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 3D属性的动画
- en: Project description
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目描述
- en: We want to place some elements in a 3D scene and then move through them. To
    do so, we first have to create an HTML structure to hold each of these elements,
    and then we have to find a clever way to obtain the desired effect. But, before
    doing anything else, we have to define the folder structure and initiate the essential
    files of the project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在3D场景中放置一些元素，然后穿过它们。为此，我们首先必须创建一个HTML结构来容纳这些元素，然后我们必须找到一种聪明的方法来获得所需的效果。但是，在做任何其他事情之前，我们必须定义文件夹结构并初始化项目的基本文件。
- en: 'As in the previous project, we''ll use SASS and Compass, so we need to install
    Ruby ([http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/))
    and then enter `gem install compass` (or `sudo gem install compass`) in the terminal
    window. After that, we need a `config.rb` file in the root folder of the project
    containing the Compass configuration:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的项目一样，我们将使用SASS和Compass，因此我们需要安装Ruby ([http://www.ruby-lang.org/en/downloads/](http://www.ruby-lang.org/en/downloads/))，然后在终端窗口中输入`gem
    install compass`（或`sudo gem install compass`）。之后，我们需要在项目的根文件夹中创建一个`config.rb`文件，其中包含Compass配置：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Well done! The next step is to create the folders required by the project, that
    is, `css`, `scss`, `img`, and `js` and to define an empty `scss/application.scss`
    file. We then need to launch `compass watch .` from the project's root folder
    and finally create the main HTML document, `index.html`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！下一步是创建项目所需的文件夹，即`css`、`scss`、`img`和`js`，并定义一个空的`scss/application.scss`文件。然后我们需要从项目的根文件夹启动`compass
    watch .`，最后创建主HTML文档`index.html`。
- en: Creating an HTML structure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建HTML结构
- en: 'What we''re going to create is basically a slideshow where each slide is placed
    in a 3D space and the animation moves from one slide to the other. A basic slide
    structure can be as simple as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的基本上是一个幻灯片放置在3D空间中，动画从一张幻灯片移动到另一张。一个基本的幻灯片结构可以是这样的：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We need two nested `div` tags to define this structure; the first one will cover
    100 percent of the window area, and the second `div` tag will have the necessary
    properties to hold its content in the center of the screen. Plus, we need to set
    up each slide so that they will be piled up one above the other because we need
    them all in the center before we start to move them in the 3D space.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个嵌套的`div`标签来定义这个结构；第一个将覆盖窗口区域的100%，第二个`div`标签将具有必要的属性来将其内容放在屏幕中央。此外，我们需要设置每个幻灯片，使它们在开始在3D空间中移动之前堆叠在彼此上方。
- en: We can use the `flexbox` CSS property to achieve this result. In fact, flexbox
    has properties to define both vertical and horizontal alignment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`flexbox` CSS属性来实现这个结果。事实上，flexbox具有定义垂直和水平对齐的属性。
- en: 'Let''s define a basic HTML structure based on what we have seen so far:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据我们迄今为止所见的内容定义一个基本的HTML结构：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s what the slides would look like without any CSS:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何CSS的幻灯片将是这样的：
- en: '![Creating an HTML structure](img/3264OT_09_1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建HTML结构](img/3264OT_09_1.jpg)'
- en: Creating the slide
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建幻灯片
- en: 'First of all, let''s set each slide''s `position` property to `absolute` and
    `width` and `height` to `100%` by writing a few lines of codes in `scss/application.scss`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将每个幻灯片的`position`属性设置为`absolute`，并通过在`scss/application.scss`中编写几行代码将`width`和`height`设置为`100%`：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Flexbox is pretty handy, thanks to the `box-pack` and `box-align` properties
    that basically set the alignment both on the main flexbox direction (horizontal
    by default, but can be changed with the `box-orient` attribute) and on its perpendicular.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox非常方便，由于`box-pack`和`box-align`属性，它基本上在主Flexbox方向（默认为水平，但可以通过`box-orient`属性更改）和其垂直方向上设置对齐。
- en: Due to the fact that this project currently works only on Chrome and Firefox
    (IE10 seems to have some problems using nested 3D transformations), we're ok with
    these properties; otherwise, we should keep in mind that the old Flexbox syntax
    (the one from 2009 that we're using) is not supported by Internet Explorer 10.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个项目目前只在Chrome和Firefox上运行（IE10似乎在使用嵌套的3D变换时存在一些问题），我们对这些属性感到满意；否则，我们应该记住，旧的Flexbox语法（我们正在使用的2009年的语法）不受Internet
    Explorer 10的支持。
- en: The latest browser from Microsoft includes support only for the newest Flexbox
    implementation, which has a rather different syntax and unfortunately doesn't
    work yet on Gecko-based browsers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的最新浏览器只包括对最新的Flexbox实现的支持，它有一个相当不同的语法，不幸的是，它目前还不能在基于Gecko的浏览器上工作。
- en: In [Chapter 4](ch04.html "Chapter 4. Zooming User Interface"), *Zooming User
    Interface*, we developed a project that also worked pretty well in IE10 although
    we used the unsupported Flexbox syntax. This was because, in that case, we included
    Flexie, a polyfill that simulates the Flexbox behavior when the old Flexbox syntax
    is not supported.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章. 缩放用户界面")*缩放用户界面*中，我们开发了一个项目，尽管使用了不受支持的Flexbox语法，但在IE10中也运行得很好。这是因为在那种情况下，我们包含了Flexie，一个模拟Flexbox行为的polyfill，当旧的Flexbox语法不受支持时。
- en: Let's dive a bit into the details of this new Flexbox syntax and, for the sake
    of completeness, let's add both syntaxes to this project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这种新的Flexbox语法的细节，并为了完整起见，让我们将两种语法都添加到这个项目中。
- en: The new Flexible Box Model
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的弹性盒模型
- en: The new flexible layout model (from here onwards, and throughout this chapter,
    known as Flexbox) is designed, as its previous version, to give the developers
    a new way of aligning elements on a page.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 新的灵活布局模型（从这里开始，以及在本章的整个过程中，被称为Flexbox）旨在像其以前的版本一样，为开发人员提供一种在页面上对齐元素的新方法。
- en: Elements using this new box model can be laid down vertically or horizontally
    and can have their order swapped dynamically, plus they can "flex" their sizes
    and positions to respond to the available spaces.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种新的盒模型的元素可以垂直或水平放置，并可以动态交换它们的顺序，还可以根据可用空间“伸缩”它们的大小和位置。
- en: 'Here''s an example (to test on Internet Explorer 10):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子（在Internet Explorer 10上测试）：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here''s the resulting page:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的页面：
- en: '![The new Flexible Box Model](img/3264OT_09_2.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![新的弹性盒模型](img/3264OT_09_2.jpg)'
- en: 'With the previous properties we defined a Flexbox with `display: -ms-flexbox`
    (the W3C value is `flex`, but every browser alters this value a bit, either by
    adding a custom prefix or by changing it slightly). We used `-ms-flex-direction:
    row-reverse` to reverse the visualization order; this property is also used to
    specify whether we want a horizontal or vertical disposition. The available values
    are: `row`, `column`, `row-reverse`, and `column-reverse`. The `-ms-flex-pack`
    and `-ms-flex-align` properties determine the alignment of the Flexbox child elements
    for both their main and perpendicular axes (as specified with `-ms-flex-direction`).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '通过之前定义的属性，我们使用了`display: -ms-flexbox`来定义了一个Flexbox（W3C的值是`flex`，但每个浏览器都会稍微改变这个值，要么通过添加自定义前缀，要么稍微改变它）。我们使用了`-ms-flex-direction:
    row-reverse`来反转可视化顺序；这个属性也用于指定我们想要水平还是垂直排列。可用的值有：`row`、`column`、`row-reverse`和`column-reverse`。`-ms-flex-pack`和`-ms-flex-align`属性确定了Flexbox子元素在它们的主轴和垂直轴上的对齐方式（如`-ms-flex-direction`所指定的）。'
- en: These properties are still part of the Flexbox IE10 implementation but have
    recently been replaced by `align-items` and `justify-content`, so we'll also have
    to take care of this when putting things together.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性仍然是Flexbox IE10实现的一部分，但最近已被`align-items`和`justify-content`替换，因此在整合时我们也需要注意这一点。
- en: 'We used `-ms-flex-wrap: wrap` to ask the browser to dispose the elements on
    multiple lines if the space on the main axis is not enough to hold them all.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用了`-ms-flex-wrap: wrap`来要求浏览器在主轴上的空间不足以容纳所有元素时将元素放置在多行上。'
- en: 'Finally, we used `-ms-flex: 1 0 200px` on each element to indicate that each
    child has a positive flex factor of `1`, so they will cover empty spaces all at
    the same speed, keeping their size equal among them, a negative flex factor of
    `0`, and a preferred size of `200px`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，我们在每个元素上使用了`-ms-flex: 1 0 200px`来指示每个子元素具有正的flex因子`1`，因此它们将以相同的速度覆盖空白空间，保持它们的大小相等，负的flex因子`0`，和一个首选大小`200px`。'
- en: 'This, with the `-ms-flex-wrap` property that we specified before, creates an
    interesting responsive effect, where the elements move to new lines if the browser''s
    window is too small to hold them in a single line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前指定的`-ms-flex-wrap`属性一起，创建了一个有趣的响应效果，当浏览器窗口太小无法容纳它们在一行时，元素会移动到新的行：
- en: '![The new Flexible Box Model](img/3264OT_09_3.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![新的弹性盒模型](img/3264OT_09_3.jpg)'
- en: Creating a sample layout
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个示例布局
- en: 'We can benefit from this property to create a three-column layout, where the
    two lateral columns move under and over the central column if there isn''t enough
    space, such as in a mobile device. Here''s the code to create such a layout:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这个属性来创建一个三列布局，其中两个侧列在没有足够空间的情况下移动到中央列的上方和下方，比如在移动设备上。以下是创建这种布局的代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And here''s the result:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Creating a sample layout](img/3264OT_09_4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个示例布局](img/3264OT_09_4.jpg)'
- en: 'If we now resize the browser window, we''ll notice how the `nav` and `aside`
    element moves over and under the main content, creating a nice layout for mobile
    devices:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在调整浏览器窗口大小，我们会注意到`nav`和`aside`元素如何在主内容上下移动，为移动设备创建了一个漂亮的布局。
- en: '![Creating a sample layout](img/3264OT_09_5.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个示例布局](img/3264OT_09_5.jpg)'
- en: 'Let''s step back to our project; we can easily add support for this new version
    of Flexbox with a few lines of CSS, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的项目；我们可以很容易地通过几行CSS来支持Flexbox的新版本，如下所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And here''s the much-awaited result:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是期待已久的结果：
- en: '![Creating a sample layout](img/3264OT_09_6.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个示例布局](img/3264OT_09_6.jpg)'
- en: Disposing the slides
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理幻灯片
- en: 'We can now use some 3D `transform` properties to move and rotate each of these
    slides in a 3D scene. These transformations are absolutely arbitrary and can be
    chosen to suit the movie trailer''s overall effect; here''s an example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用一些3D“transform”属性来移动和旋转3D场景中的每个幻灯片。这些变换是绝对任意的，可以根据电影预告片的整体效果进行选择；这里有一个例子：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we need to set some 3D standard properties such as `transform-style` and
    `perspective` on the slide''s parent elements:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在幻灯片的父元素上设置一些3D标准属性，如`transform-style`和`perspective`：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we now run the project in Chrome, we will notice that the slides are not
    piled up like in the Previous screenshot; rather, they are now placed all around
    the 3D scene (most of them are not visible after the transformations):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在Chrome中运行项目，我们会注意到幻灯片不像之前的截图中堆叠在一起；相反，它们现在都放置在3D场景的各个位置（大部分在变换后不可见）：
- en: '![Disposing the slides](img/3264OT_09_7.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![处理幻灯片](img/3264OT_09_7.jpg)'
- en: Moving the camera
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动摄像机
- en: Now, we'll learn to create the effect of a camera that moves through the slides;
    due to the fact that we cannot move the user's viewport, we'll need to simulate
    this feeling by moving the elements on the scene; this can be achieved by applying
    some transformations to `#container`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何创建一个摄像机穿过幻灯片的效果；由于我们无法移动用户的视口，我们需要通过移动场景中的元素来模拟这种感觉；这可以通过对`#container`应用一些变换来实现。
- en: 'To move the camera close to a slide, we need to apply the exact transformations
    we used on that slide, but with opposite values and in the reverse order. So,
    for example, if we want to view the frame whose `data-sequence` property is `3`,
    we can write:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要将摄像机移近幻灯片，我们需要应用我们在该幻灯片上使用的确切变换，但使用相反的值并以相反的顺序。因此，例如，如果我们想查看`data-sequence`属性为`3`的帧，我们可以写：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s the result:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果：
- en: '![Moving the camera](img/3264OT_09_8.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![移动摄像机](img/3264OT_09_8.jpg)'
- en: 'The animation has to focus on a slide, stay still for some time, and then move
    to the next slide. When creating this kind of effect, we usually face the following
    two main problems:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 动画必须专注于一张幻灯片，保持静止一段时间，然后移动到下一张幻灯片。在创建这种效果时，我们通常面临以下两个主要问题：
- en: CSS `keyframes` accepts only percentage values, but we'd rather prefer to use
    seconds as a measurement unit (for example, to say "move to the next slide in
    2 seconds and then stay still for 1 second")
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS `keyframes`只接受百分比值，但我们更愿意使用秒作为测量单位（例如，说“在2秒内移动到下一张幻灯片，然后保持静止1秒”）
- en: We need to handle two `keyframes` rules for each slide (moving and still); it
    would be better to have a function that handles this for us
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要为每个幻灯片处理两个`keyframes`规则（移动和静止）；最好为我们处理这个的是有一个函数
- en: 'We can easily solve both these problems by using SASS. First, we can create
    a function that converts seconds to a percentage value by accepting the total
    length of the animation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用SASS轻松解决这两个问题。首先，我们可以创建一个函数，通过接受动画的总长度来将秒转换为百分比值：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This function takes two arguments—the value we want to convert from seconds
    to percentage and the total length of the animation. If this argument is not provided,
    the value is then set equal to the `$total_animation_duration` variable.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受两个参数——我们想要从秒转换为百分比的值以及动画的总长度。如果没有提供这个参数，则该值将设置为`$total_animation_duration`变量。
- en: 'The second function that we can create for this project takes the `move` time
    and `still` time as arguments and prints the necessary keyframes as well as keeping
    track of the percentage of advancement of the animation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为这个项目创建的第二个函数接受`move`时间和`still`时间作为参数，并打印必要的关键帧，同时跟踪动画的进展百分比：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What this function does is to basically transform the `$move` parameter in percentage
    and add this value to the `$current_percentage` global variable that keeps track
    of the advancements in the animation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的作用基本上是将`$move`参数转换为百分比，并将这个值添加到全局变量`$current_percentage`中，该变量跟踪动画的进展。
- en: 'We then print a keyframe, using the percentage that we just computed, containing
    the value of the `@content` variable that SASS fills for us with the contents
    we put between the curly brackets after a function call, for example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们打印一个关键帧，使用我们刚刚计算的百分比，包含SASS为我们填充的`@content`变量的值，该值是我们在函数调用后在花括号中放置的内容，例如：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If `$still` is equal to `end`, we want the still phase to last until the end
    of the animation, so we set the `$current_percentage` variable to `100%`; otherwise,
    we treat this variable the same as we treated the `$move` variable and then print
    another keyframe.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`$still`等于`end`，我们希望静止阶段持续到动画结束，所以我们将`$current_percentage`变量设置为`100%`；否则，我们将这个变量与我们处理`$move`变量的方式相同，然后打印另一个关键帧。
- en: Fun with animations
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画乐趣
- en: To handle all the experimental prefixes that come with CSS3 animation properties,
    we can again use the Compass animation plugin (`gem install animation` from the
    command-line terminal, and then relaunch Compass using `compass watch . -r animation`
    from the project's root folder).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理CSS3动画属性附带的所有实验性前缀，我们可以再次使用Compass动画插件（从命令行终端中使用`gem install animation`进行安装，然后从项目的根文件夹中使用`compass
    watch . -r animation`重新启动Compass）。
- en: 'We also need to include `animation` in `application.scss`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`application.scss`中包含`animation`：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And we also need to write a small function that wraps the function provided
    by the animation plugin and reset `$current_percentage` each time it switches
    from one experimental prefix to the other:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要编写一个小函数，它包装了动画插件提供的函数，并在每次从一个实验性前缀切换到另一个时重置`$current_percentage`：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Good! We''re now ready to put things together and define our animation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好！现在我们准备把事情放在一起并定义我们的动画：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lastly, we have to add the appropriate animation property to `#container`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须向`#container`添加适当的动画属性：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Done! A last reload in the browser is enough to fully appreciate the animation:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！在浏览器中进行最后一次重新加载就足以充分欣赏动画：
- en: '![Fun with animations](img/3264OT_09_9.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![动画乐趣](img/3264OT_09_9.jpg)'
- en: Step animations
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤动画
- en: We'll now create a special animation that switches the background color of our
    project synchronously with each slide change. Since we don't want any fading between
    colors, we'll introduce step animation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个特殊的动画，它会与每次幻灯片更改同步切换我们项目的背景颜色。由于我们不希望颜色之间有任何淡入淡出效果，我们将引入步骤动画。
- en: 'Step animations let us specify how many frames must be placed between each
    declared keyframe; here''s an example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤动画让我们可以指定在每个声明的关键帧之间放置多少帧；这里有一个例子：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we now run this small example in a browser, we''ll see that the movement
    of the `div` element is not fluid, but composed of only five frames. We can add
    a special keyword `start` or `end` to the step declaration (for example, `step(5,
    end)` ) to ask the browser to skip the initial or the final keyframe during each
    step. Good! Now, we can apply the same concept to our intro project. First of
    all, we need to define an animation that changes the `background-color` property:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在浏览器中运行这个小例子，我们会发现`div`元素的移动不是流畅的，而是由只有五帧组成。我们可以在步骤声明中添加一个特殊关键字`start`或`end`（例如，`step(5,
    end)`）来要求浏览器在每一步中跳过初始或最终关键帧。好！现在，我们可以将相同的概念应用到我们的介绍项目中。首先，我们需要定义一个改变`background-color`属性的动画：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Please note how we used the `sec_to_per` function in order to use seconds instead
    of percentages; next, we just need to add `bg` to `#viewport` using the `animation`
    property:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们如何使用`sec_to_per`函数以便使用秒而不是百分比；接下来，我们只需要使用`animation`属性将`bg`添加到`#viewport`：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And here''s the result:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是结果：
- en: '![Step animations](img/3264OT_09_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![步骤动画](img/3264OT_09_10.jpg)'
- en: Final touches
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的修饰
- en: Now that we have a basic structure defined and have learned how to create a
    fluid animation that moves through the slides placed in a 3D scene, the next step,
    obviously, is to enrich each of these slides with images, videos, graphs, and
    everything we might need to fulfill our purposes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了一个基本结构，并学会了如何创建一个在3D场景中移动的流畅动画，显然，下一步是丰富每个幻灯片，包括图片、视频、图表，以及我们可能需要实现我们目的的一切。
- en: 'To do so, we can use the knowledge already accumulated during the previous
    chapters of this book; for example, we can easily define a fade-in animation for
    the first slide, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们可以利用本书前几章已经积累的知识；例如，我们可以很容易地为第一张幻灯片定义一个淡入动画，如下所示：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can also add custom fonts to our slides:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向幻灯片添加自定义字体：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here''s the result:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Final touches](img/3264OT_09_11.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![最后的修饰](img/3264OT_09_11.jpg)'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: CSS animations and 3D transformations can be combined to create interesting
    results; of course, when we move to these types of features, we have to accept
    the fact that some browsers may not be able to support the project. However, we
    can always use some feature detection library, such as Modernizr, to address this
    issue by providing some alternative visualization when these features are not
    supported.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CSS动画和3D变换可以结合起来创建有趣的效果；当然，当我们转向这些类型的功能时，我们必须接受一些浏览器可能无法支持项目的事实。然而，我们总是可以使用一些特性检测库，比如Modernizr，来解决这个问题，当这些功能不受支持时提供一些替代的可视化。
- en: In the next chapter, we'll create a nice graph library entirely with CSS3!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将完全使用CSS3创建一个漂亮的图表库！
