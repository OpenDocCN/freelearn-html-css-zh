- en: Chapter 4. Applying CSS3 Effects and Transforms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。应用CSS3效果和变换
- en: CSS3—the current version of stylesheets—provides easy access to effects, such
    as drop shadows, rounded box corners, and opacity (transparency). Additionally,
    CSS3 introduces transforms that change the shape, location, rotation, and size
    of objects. Together, CSS3 effects and transforms open the door to making web
    pages more dynamic, more inviting, less "boxy", and more interactive.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3——样式表的当前版本——提供了轻松访问效果的途径，如投影阴影、圆角盒和不透明度（透明度）。此外，CSS3引入了改变对象形状、位置、旋转和大小的变换。CSS3效果和变换共同打开了网页更具动态性、更具吸引力、更少“盒子感”和更具互动性的大门。
- en: Effects and transforms can be made interactive by changing the appearance of
    objects as a user hovers over or clicks on them with a mouse. Together, effects
    and transforms, with or without animation, make it much easier than the previous
    tools to add accessible, inviting design elements and dynamism to web pages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过改变对象的外观，使效果和变换可以在用户悬停或点击鼠标时变得交互。效果和变换，无论是否有动画，都比以前的工具更容易地为网页添加可访问的、引人注目的设计元素和动态效果。
- en: CSS3 effects and transforms are defined through stylesheets; so, we can take
    advantage of Dreamweaver's **CSS Styles** panel to avoid much, if any, recourse
    to handcoding, to create them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3效果和变换是通过样式表定义的；因此，我们可以利用Dreamweaver的**CSS样式**面板，避免大量手工编码来创建它们。
- en: 'In this chapter we will explore the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索以下内容：
- en: 'Defining and applying CSS3 transforms: translate, scale, rotate, and skew'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和应用CSS3变换：平移、缩放、旋转和倾斜
- en: 'Defining and applying CSS3 effects: border radius, shadows, and opacity'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和应用CSS3效果：边框半径、阴影和不透明度
- en: Combining multiple transforms and effects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合多个变换和效果
- en: Making CSS3 transforms and effects interactive with `:hover` pseudo-classes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`:hover`伪类使CSS3变换和效果具有交互性
- en: New in CSS3–effects and transforms
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3中的新效果和变换
- en: CSS3 effects, such as shadows, rounded corners, and opacity, can make web pages
    more stylish, less harsh, and more welcoming. When used with discretion (that
    is, not overused), they make web pages attractive and inviting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3效果，如阴影、圆角和不透明度，可以使网页更时尚、更温和、更具吸引力。当适度使用时（即不过度使用），它们可以使网页更具吸引力。
- en: 'Effects and transforms can be, and often should be, combined to produce eye-catching
    elements. The following text, for example, has both a skew transform and a shadow
    (box-shadow) effect applied:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 效果和变换可以，而且通常应该，结合起来产生引人注目的元素。例如，下面的文本既应用了倾斜变换，又应用了阴影效果：
- en: '![New in CSS3–effects and transforms](img/4742_04_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3中的新效果和变换](img/4742_04_01.jpg)'
- en: Transitions, such as skewing, rotating, scaling, and translation (moving) objects,
    are particularly engaging when combined with interactivity. For example, a visitor
    to a website who hovers over an object experiences a subtle but inviting change
    in it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果，如倾斜、旋转、缩放和平移（移动）对象，当与互动结合时尤其引人注目。例如，访问网站的访客在悬停在一个对象上时会感受到它的微妙而诱人的变化。
- en: In the pre-CSS3 era, these kinds of effects or transitions required some combination
    coding and embedding Flash objects by relying on (and programming with) JavaScript
    and substituting images with Photoshop effects for types (for features such as
    shadows or outlining). These other tools were (are!) expensive and/or have a high
    learning curve.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3之前，这些效果或过渡需要一些组合编码，并通过依赖（和编程）JavaScript和用Photoshop效果替换图像（如阴影或轮廓）来嵌入Flash对象。这些其他工具是昂贵的，或者学习曲线很高。
- en: During the course of this chapter, we'll explore several new effects and the
    new 2D (two-dimensional) transforms in CSS3\. 3D transforms are beyond the scope
    of our survey; they are not as widely supported in browsing environments and,
    generally, additional scripting (usually JavaScript) is required to make them
    effective.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的过程中，我们将探索几种新的效果和CSS3中的新2D（二维）变换。3D变换超出了我们的调查范围；它们在浏览环境中的支持不如2D变换广泛，并且通常需要额外的脚本（通常是JavaScript）才能使其生效。
- en: The bulk of this chapter will consist of walking through how to create particular
    CSS3 effects and transforms.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容将介绍如何创建特定的CSS3效果和变换。
- en: Compatibility challenges
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性挑战
- en: CSS3 effects and transitions are widely supported without the need for plugins
    (such as JavaScript or Flash).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3效果和过渡广泛支持，无需插件（如JavaScript或Flash）。
- en: On the other hand, it is important to emphasize that HTML5 and CSS3 features
    are all a work in progress. In searching for a formulation to describe the state
    of support for CSS3 in browsers, I bumped into the formulation, **irregular standardization**.
    I realize that it's an oxymoron, but what I mean is that the CSS3 effects and
    transforms we are creating in this chapter are supported in the current versions
    of all the major browsers (and yes, that includes Internet Explorer 9 along with
    Safari for mobile and desktop; Firefox and Opera).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，重要的是要强调HTML5和CSS3功能都还在不断发展中。在寻找描述浏览器中对CSS3支持状态的公式时，我遇到了“不规则标准化”的公式。我意识到这是个矛盾修饰法，但我的意思是，本章中创建的CSS3效果和变换在所有主要浏览器的当前版本中都得到支持（是的，这包括Internet
    Explorer 9以及桌面和移动版的Safari、Firefox和Opera）。
- en: 'However, Safari, Firefox, and Opera all require unique code prefixes. For example,
    the CSS3 code for a class style to apply the `rotate` transform to rotate a box
    five degrees counterclockwise might look like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Safari、Firefox和Opera都需要独特的代码前缀。例如，应用`rotate`变换以逆时针旋转一个盒子五度的类样式的CSS3代码可能如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `-webkit-` prefix applies to Safari and other browsers that adhere to the
    WebKit standard (which, by the way, includes Dreamweaver CS6's **Live** view).
    The `-moz-` prefix applies to Mozilla Firefox. The `-o-` prefix applies to the
    Opera browser. And the generic transform code applies to "everyone else" including
    Internet Explorer 9 that does not require a browser prefix to interpret this (or
    other) effects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`-webkit-`前缀适用于Safari和其他遵循WebKit标准的浏览器（顺便说一句，这包括Dreamweaver CS6的**实时**视图）。`-moz-`前缀适用于Mozilla
    Firefox。`-o-`前缀适用于Opera浏览器。通用的变换代码适用于“其他所有人”，包括不需要浏览器前缀来解释这个（或其他）效果的Internet Explorer
    9。'
- en: The lack of standardized coding is not as big a problem as it might seem. It
    just requires a bit of redundancy as we define and apply effects and transforms.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化编码的缺乏并不像看起来那么严重。在定义和应用效果和变换时，只需要一点冗余。
- en: What about browsing environments, such as the older versions of Internet Explorer,
    that do not support CSS3 effects and transforms at all? There is an easy and a
    hard answer to that challenge. The hard solution is to patch together JavaScript
    and other coding solutions that can be found online or that have been concocted
    to simulate the effects and transforms not supported in CSS3\. Which is to say,
    you can revert to tools and techniques such as JavaScript and Flash that were
    required to produce these effects before the advent of CSS3.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么像较旧版本的Internet Explorer这样不支持CSS3效果和变换的浏览环境呢？对于这个挑战有一个简单的解决方案和一个困难的解决方案。困难的解决方案是拼凑JavaScript和其他编码解决方案，这些解决方案可以在网上找到，或者被设计用来模拟CSS3不支持的效果和变换。也就是说，您可以回到在CSS3出现之前需要使用的工具和技术，比如JavaScript和Flash。
- en: 'The easier, and probably more sensible, solution in most cases is to employ
    transforms and effects in ways that do not require that a browser supports the
    effect in order for a visitor to absorb page content. For example, have a look
    at a rounded rectangle created using the `border-radius` effect in the following
    screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，更简单、更明智的解决方案是以不需要浏览器支持效果的方式应用变换和效果，以便访问者吸收页面内容。例如，看看下面的屏幕截图中使用`border-radius`效果创建的圆角矩形：
- en: '![Compatibility challenges](img/4742_04_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![兼容性挑战](img/4742_04_02.jpg)'
- en: 'If someone visits the page in the preceding example using an older version
    of Internet Explorer, such as IE6, they will forgo the experience of seeing the
    type in a circle (defined by the `border-radius` effect). Not quite as inviting
    an experience, but they will still be able to read the text as shown in the following
    screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人使用较旧版本的Internet Explorer，如IE6，访问前面示例中的页面，他们将无法看到文本呈现为圆形（由`border-radius`效果定义）。体验不是那么吸引人，但他们仍然可以阅读文本，如下面的屏幕截图所示：
- en: '![Compatibility challenges](img/4742_04_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![兼容性挑战](img/4742_04_03.jpg)'
- en: Before diving into *how* to apply transforms and effects, let's reflect for
    a moment on the advantages involved with using these CSS3 features to format the
    examples we've previewed so far. No Flash or JavaScript was created, injured,
    mistreated, or worse while creating these effects. All that was required was a
    few lines of CSS that we generate in Dreamweaver's **CSS Styles** panel.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究*如何*应用变换和效果之前，让我们先反思一下使用这些CSS3功能来格式化我们到目前为止预览的示例所涉及的优势。在创建这些效果时，没有创建、伤害、虐待或更糟的Flash或JavaScript。所需的只是一些CSS代码，我们在Dreamweaver的**CSS样式**面板中生成。
- en: Nor was it necessary to use "image text", the type saved as an image, to create
    these effects. The page can load almost instantly, without waiting for an image
    to download. In the absence of plugins or images, the shaping and formatting gets
    downloaded more or less instantly, without browsers having to mess with plugins
    or downloaded images.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 也不需要使用“图像文本”，即保存为图像的文本，来创建这些效果。页面几乎可以立即加载，无需等待图像下载。在没有插件或图像的情况下，形状和格式几乎可以立即下载，而无需浏览器处理插件或下载的图像。
- en: 'And, finally, the text is still *selectable*. This means that the text to which
    transforms or effects have been applied can still be copied and pasted into a
    map program, a calendar event, or selected as a text link as shown in the following
    screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，文本仍然是*可选择*的。这意味着已应用变换或效果的文本仍然可以复制并粘贴到地图程序、日历事件中，或者作为文本链接进行选择，如下面的屏幕截图所示：
- en: '![Compatibility challenges](img/4742_04_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![兼容性挑战](img/4742_04_04.jpg)'
- en: CSS3 styles in Dreamweaver CS6
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dreamweaver CS6中的CSS3样式
- en: Dreamweaver CS6 provides some features for defining and applying these new CSS3
    features. While not the most powerful tools in Dreamweaver, they do make it possible
    to create and apply new CSS3 techniques without resorting to coding. Where coding
    is essential, Dreamweaver helps out with code hints.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Dreamweaver CS6提供了一些功能来定义和应用这些新的CSS3功能。虽然不是Dreamweaver中最强大的工具，但它们确实可以在不借助编码的情况下创建和应用新的CSS3技术。在编码是必要的情况下，Dreamweaver通过代码提示来帮助。
- en: 'There are essentially two options for getting our money''s worth out of Dreamweaver
    as we generate CSS3 transforms and effects:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成CSS3变换和效果时，基本上有两种选择：
- en: If we enter the CSS code in the **Code** view, Dreamweaver will help with the
    coding by supplying code hints. For example, the following screenshot shows a
    code hint being offered after `–moz-tran` has been entered in the **Code** view.
    Code hints for the stylesheet provide easy access to the `transform-` attribute.![CSS3
    styles in Dreamweaver CS6](img/4742_04_05.jpg)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们在**代码**视图中输入CSS代码，Dreamweaver将通过提供代码提示来帮助编码。例如，下面的屏幕截图显示了在**代码**视图中输入`-moz-tran`后提供的代码提示。样式表的代码提示提供了对`transform-`属性的简单访问。![Dreamweaver
    CS6中的CSS3样式](img/4742_04_05.jpg)
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Redundant CSS code**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**冗余的CSS代码**'
- en: The preceding screenshot shows what is a big part of an ongoing dimension of
    defining and applying CSS3 transforms and effects. You have to create four versions
    of the code, one for Webkit (Safari), one for Mozilla (Firefox), one for Opera
    (a browser with a large user base in Europe), and a generic version (with no browser
    prefix) that is recognized by Internet Explorer 9\. We'll return to this challenge
    in this chapter shortly.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了定义和应用CSS3变换和效果的一个持续维度的重要部分。您必须创建四个版本的代码，一个用于Webkit（Safari），一个用于Mozilla（Firefox），一个用于Opera（在欧洲拥有大量用户的浏览器），以及一个通用版本（没有浏览器前缀），被Internet
    Explorer 9识别。我们将在本章中不久回到这个挑战。
- en: The other option is to generate CSS3 effects and transforms in the **CSS Styles**
    panel. The downside to this is that these new CSS3 style rules do not show up
    in the **CSS Rule Definition** dialog, which is normally the most user friendly
    and intuitive environment for defining CSS styles in Dreamweaver.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个选项是在**CSS样式**面板中生成CSS3效果和变换。这样做的缺点是，这些新的CSS3样式规则不会显示在**CSS规则定义**对话框中，这通常是在Dreamweaver中定义CSS样式的最用户友好和直观的环境。
- en: You *can*, however, enter CSS3 effects and transforms through the **Add Property**
    link at the bottom of the **CSS Styles** panel. And Dreamweaver CS6 (or older
    versions with the HTML5 Pack installed) *will* generate CSS code based on the
    style rules and parameters you enter in the **CSS Styles** panel. With this option,
    Dreamweaver will at least "bust" you if you attempt to enter an invalid CSS3 rule,
    as shown in the following screenshot (in the following example, I should be entering
    `–moz-transform` and then defining the **skew** transform in the right-hand side
    column of the **CSS Styles** panel).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可以通过**CSS样式**面板底部的**添加属性**链接输入CSS3效果和变换。Dreamweaver CS6（或安装了HTML5包的旧版本）将根据您在**CSS样式**面板中输入的样式规则和参数生成CSS代码。通过这个选项，Dreamweaver至少会在您尝试输入无效的CSS3规则时“破坏”您，如下面的屏幕截图所示（在下面的示例中，我应该输入`-moz-transform`，然后在**CSS样式**面板的右侧列中定义**skew**变换）。
- en: '![CSS3 styles in Dreamweaver CS6](img/4742_04_06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3在Dreamweaver CS6中的样式](img/4742_04_06.jpg)'
- en: Let us speak bluntly for a moment. Neither of these options—relying on code
    hints in the **Code** view or using Dreamweaver's **CSS Styles** panel—is really
    up to the level of assistance we get from Dreamweaver CS6 when we generate pre-CSS3
    styles. The folks at Adobe, we presume, are scrambling like everyone else to catch
    up with current and emerging web design tools.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们坦率地说一会儿。在**代码**视图中依赖代码提示或使用Dreamweaver的**CSS样式**面板这两种选项都无法达到我们在生成CSS3样式之前从Dreamweaver
    CS6获得的帮助水平。我们假设Adobe的人员正在像其他人一样努力赶上当前和新兴的网页设计工具。
- en: I'll leave it to you to decide which of these useful but flawed techniques to
    use for defining CSS3 effects and styles, and I'll illustrate both techniques
    in the remainder of this chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我将让你决定使用哪种有用但有缺陷的技术来定义CSS3效果和样式，并且我将在本章的其余部分中说明这两种技术。
- en: CSS3 effects
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3效果
- en: As noted already, support for CSS3 effects and transforms is irregular and a
    work in progress. Within that framework, the four available transforms (`scale`,
    `translate`, `rotate`, and `skew`) are relatively stable and widely supported.
    Effects, on the other hand, are less consistently supported and less finite in
    the sense of there being a "list" of available effects that are supported (albeit
    with unique coding prefixes) across browsing environments.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如已经指出的，对CSS3效果和变换的支持是不规则的，仍在进行中。在这个框架内，四种可用的变换（`scale`，`translate`，`rotate`和`skew`）相对稳定并得到广泛支持。然而，效果的支持不一致，也不像有一个在各种浏览环境中支持的可用效果的“列表”（尽管有独特的编码前缀）。
- en: 'Part of the reason for this is that a number of effects are very flexible.
    For example, the `text-shadow` effect can be tweaked to produce an outlined type.
    And sometimes, you will hear people refer to an "outline" effect, by which they
    mean adjusting the parameters of the `text-shadow` effect to create an outlined
    type as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 部分原因是许多效果非常灵活。例如，`text-shadow`效果可以调整以产生轮廓类型。有时，您会听到人们提到“轮廓”效果，他们指的是调整`text-shadow`效果的参数以创建轮廓类型，如下面的屏幕截图所示：
- en: '![CSS3 effects](img/4742_04_07.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3效果](img/4742_04_07.jpg)'
- en: 'With what has been discussed so far about the flexible and open-ended nature
    of CSS3 effects, let''s examine three of the most useful effects: `opacity`, `border
    radius`, and `shadow` (for both boxes and text).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据迄今为止关于CSS3效果的灵活和开放性质的讨论，让我们来看看三种最有用的效果：`opacity`，`border radius`和`shadow`（用于框和文本）。
- en: Defining opacity
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义不透明度
- en: 'The `opacity` effect in CSS3 allows you to apply varying degrees of opacity/transparency
    to objects. The syntax is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3中的`opacity`效果允许您对对象应用不同程度的不透明度/透明度。语法如下：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding syntax, `x` is a value between zero and one. Full opacity (a
    value of `1`) is normal—the object to which opacity is applied acts like a cover
    over everything else. Full transparency (a value of `0`) makes an object invisible.
    An opacity value of `.6` makes an object 60 percent opaque, and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，`x`是介于零和一之间的值。完全不透明（值为`1`）是正常的 - 应用不透明度的对象就像覆盖在其他所有东西上的盖子。完全透明（值为`0`）会使对象变得不可见。不透明度值为`.6`会使对象60%不透明，依此类推。
- en: In spite of all the preceding warnings that CSS3 effects have to be defined
    specifically for different browsers, the `opacity` effect is one that does *not*
    require a prefix for identifying target browsers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面已经警告过，CSS3效果必须针对不同的浏览器进行特定定义，但`opacity`效果是一个*不需要*为识别目标浏览器添加前缀的效果。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Simple or complicated**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单还是复杂**'
- en: With CSS3, implementing opacity (transparency) is quite simple, or rather hopelessly
    complex, depending on what one is aiming for. Using opacity to create a complex
    set of layered objects with various elements having their own assigned opacity
    requires complex coding and is not supported by all browsers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS3，实现不透明度（透明度）非常简单，或者说是无望的复杂，这取决于一个人的目标是什么。使用不透明度来创建一组具有各自分配的不透明度的各种元素的复杂叠加对象需要复杂的编码，并且并非所有浏览器都支持。
- en: 'Opacity can be applied to a tag (conceivably, for example, the `<img>` tag
    that defines how images appear). Of more efficacy is the technique of defining
    a class style that applies opacity. You can do that with the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不透明度可以应用于标签（例如，定义图像如何显示的`<img>`标签）。更有效的是定义应用不透明度的类样式的技术。您可以通过以下步骤来实现：
- en: In the **CSS Styles** panel, click on the **New CSS Rule** icon at the bottom
    of the panel to launch the **New CSS Rule** dialog. Choose **Class** from the
    **Selector Type** pop-up menu, enter a name (no spaces or special characters—**semi_opaque**
    would work), and select your external stylesheet from the **Rule Definition**
    pop up. Click on **OK**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**CSS样式**面板中，单击面板底部的**新CSS规则**图标，启动**新CSS规则**对话框。从**选择器类型**弹出菜单中选择**类**，输入名称（不要有空格或特殊字符——**semi_opaque**会起作用），并从**规则定义**弹出菜单中选择您的外部样式表。然后单击**确定**。
- en: The **CSS Rule Definition** dialog opens. Sadly, as discussed earlier, CSS3
    effects cannot be defined in the **CSS Rule Definition** dialog. So, simply click
    on **OK** to create a new CSS rule without properties at this stage. The new rule,
    however, will appear in the **CSS Styles** panel, which is where we will define
    the opacity settings.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CSS规则定义**对话框会打开。遗憾的是，正如之前讨论的那样，CSS3效果无法在**CSS规则定义**对话框中定义。因此，只需单击**确定**，在此阶段创建一个没有属性的新CSS规则。然而，新规则将出现在**CSS样式**面板中，我们将在那里定义不透明度设置。'
- en: With your newly created class style selected in the **CSS Styles** panel, click
    on the **Add Property** link in the bottom-half of the **CSS Styles** panel. In
    the first column type `opacity`, and press the *Tab* key to move to the second
    column. In the second column, type a value between `0` (for complete transparency)
    and `1` (for full opacity). The value `.5`, for example, defines 50 percent transparency
    as shown in the following screenshot:![Defining opacity](img/4742_04_08.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**CSS样式**面板中选择您新创建的类样式后，单击**CSS样式**面板底部的**添加属性**链接。在第一列中键入`opacity`，然后按*Tab*键移动到第二列。在第二列中，键入介于`0`（完全透明）和`1`（完全不透明）之间的值。例如，值`.5`定义了50%的透明度，如下图所示：![定义不透明度](img/4742_04_08.jpg)
- en: With the class style defined, you can apply it to selected objects (such as
    an image) by choosing the class style from the **Properties** inspector.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了类样式后，您可以通过从**属性**检查器中选择类样式，将其应用于所选对象（例如图像）。
- en: 'After you define a CSS class style, you can apply it to any selected element
    from the **Class** drop-down menu in the **Properties** inspector as shown in
    the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 定义CSS类样式后，您可以通过**属性**检查器中的**类**下拉菜单将其应用于任何所选元素，如下图所示：
- en: '![Defining opacity](img/4742_04_09.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![定义不透明度](img/4742_04_09.jpg)'
- en: You can test opacity effects in different browsers. While opacity is not supported
    in all browsers—particularly older versions of browsers—its application is usually
    such that if it works, it can enhance a page, but if it doesn't work, no essential
    content is lost. The following screenshot shows text on top of an image. The text
    on the left-hand side is displayed with full opacity. The text on the right-hand
    side is displayed with partial transparency, allowing visitors to see some page
    background behind the text.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在不同的浏览器中测试不透明度效果。虽然不是所有浏览器都支持不透明度，特别是旧版本的浏览器，但通常情况下，如果它起作用，它可以增强页面，但如果它不起作用，也不会丢失任何基本内容。以下截图显示了图像上方的文本。左侧的文本显示为完全不透明。右侧的文本显示为部分透明，允许访问者在文本后面看到一些页面背景。
- en: '![Defining opacity](img/4742_04_10.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![定义不透明度](img/4742_04_10.jpg)'
- en: Border radius
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边框半径
- en: The CSS3 `border-radius` effect is used to define rounded corners.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 `border-radius`效果用于定义圆角。
- en: 'Let''s dive right into an example of a class style that applies rounded corners
    with a 12-pixel radius to a 150-pixel square box, and a yellow background with
    a thick, solid red line around it. In the previous discussion of creating a class
    style to apply opacity effects, we used the technique of building the class style
    in the **CSS Styles** panel. That worked well because opacity effects are pretty
    simple. Here, let''s build the style in a CSS stylesheet. Assuming you have an
    external stylesheet linked to an open web page in Dreamweaver, you can add this
    code to the CSS file to define a `border-radius` class style:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即进入一个示例，应用一个类样式，将12像素半径的圆角应用于一个150像素的正方形框，并在其周围应用黄色背景和粗实红线。在之前讨论创建应用不透明度效果的类样式时，我们使用了在**CSS样式**面板中构建类样式的技术。这很有效，因为不透明度效果非常简单。在这里，让我们在CSS样式表中构建样式。假设您已经将外部样式表链接到Dreamweaver中打开的网页，您可以将以下代码添加到CSS文件中来定义`border-radius`类样式：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code we''re working with here uses the `-moz-` prefix to support Firefox.
    The following screenshot shows this class style applied to a selected text in
    Dreamweaver:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的代码使用`-moz-`前缀来支持Firefox。以下截图显示了这个类样式应用于Dreamweaver中所选文本：
- en: '![Border radius](img/4742_04_11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![边框半径](img/4742_04_11.jpg)'
- en: 'In a browser, the preceding image looks like the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，前面的图像看起来像下面的截图：
- en: '![Border radius](img/4742_04_12.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![边框半径](img/4742_04_12.jpg)'
- en: One fun technique to try is to create a circle affected by making the rounded-radius
    value equal to half the height (and width) of a square box. The following example
    shows the effect, with the values adjusted from the earlier example so that the
    rounded radius is 75 pixels, half the pixels that define the dimensions of the
    original square.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的技巧是尝试创建一个受影响的圆，使圆角半径值等于正方形框的高度（和宽度）的一半。下面的示例显示了效果，值从前面示例调整，使圆角半径为75像素，是原始正方形尺寸定义的一半。
- en: '![Border radius](img/4742_04_13.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![边框半径](img/4742_04_13.jpg)'
- en: Shadows
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阴影
- en: Drop shadows may well be the most widely applied effect in graphic design. Don't
    quote me on that, but shadows certainly are a ubiquitous element in many designs;
    and now, they're easy to apply to selected objects using CSS3.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 投影阴影可能是图形设计中应用最广泛的效果。不要引用我说的话，但阴影确实是许多设计中无处不在的元素；现在，使用CSS3可以轻松地将它们应用于选定的对象。
- en: 'There are two different shadow effects: `box-shadow` and `text-shadow`. Their
    application is pretty self-explanatory; `box-shadow` applies to boxes and `text-shadow`
    to text.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种不同的阴影效果：`box-shadow`和`text-shadow`。它们的应用非常直观；`box-shadow`应用于框，`text-shadow`应用于文本。
- en: 'Both `box-shadow` and `text-shadow` effects can be defined with a minimum of
    two parameters: x-offset (vertical distance) and y-offset (horizontal distance).
    In addition to this, they usually include a color (if no color is specified, a
    browser-default color appears) and a blur parameter (the thickness of the blur
    gradient).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-shadow`和`text-shadow`效果都可以用至少两个参数定义：x偏移（垂直距离）和y偏移（水平距离）。除此之外，它们通常包括一个颜色（如果未指定颜色，则会出现浏览器默认颜色）和一个模糊参数（模糊渐变的厚度）。'
- en: x and y offset values can be positive or negative. Positive values generate
    a shadow on the right-hand side of the text while negative values generate a shadow
    on the left-hand side of the text. For the y-offset values, positive values generate
    a shadow below the text while negative values create a shadow above the text.
    Values are normally defined in pixels.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: x和y偏移值可以是正数或负数。正值在文本右侧生成阴影，而负值在文本左侧生成阴影。对于y偏移值，正值在文本下方生成阴影，而负值在文本上方生成阴影。通常以像素为单位定义数值。
- en: Before examining how this works for boxes, text, and outlines, it is useful
    to note that *multiple* shadow definitions can be combined. So, for example, if
    you wish to generate a shadow under *and* over the text (and you will want to
    do this when you define an outline style), you can combine two or even three shadow
    definitions, and they are stacked on top of each other.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查这对框、文本和轮廓的作用之前，有必要注意*多个*阴影定义可以组合。例如，如果您希望在文本的下方*和*上方生成阴影（当您定义轮廓样式时会想要这样做），您可以组合两个甚至三个阴影定义，并将它们叠加在一起。
- en: Box shadow
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框阴影
- en: 'As noted, `box-shadow` effects are usually defined with four parameters: offset-x
    (horizontal distance), offset-y (vertical distance), blur (width in pixels), and
    the color of the shadow.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`box-shadow`效果通常用四个参数定义：偏移-x（水平距离）、偏移-y（垂直距离）、模糊（像素宽度）和阴影的颜色。
- en: The following code, for example, defines a box shadow with 5 pixels of horizontal
    and vertical offset, a blur length of 5 pixels, and a gray shadow—and it does
    so for five different browsers, namely Chrome, Safari, Firefox, (using the unprefixed
    code) Internet Explorer 9, and Opera.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码定义了一个框阴影，水平和垂直偏移为5像素，模糊长度为5像素，灰色阴影，并且对于五种不同的浏览器，即Chrome、Safari、Firefox（使用未加前缀的代码）、Internet
    Explorer 9和Opera。
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here's how that looks in the **CSS Styles** panel (and you could define the
    class style in the **CSS Styles** panel).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在**CSS样式**面板中看起来是这样的（您可以在**CSS样式**面板中定义类样式）。
- en: '![Box shadow](img/4742_04_14.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![框阴影](img/4742_04_14.jpg)'
- en: Text shadow
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本阴影
- en: The `text-shadow` effect is very similar to the `box-shadow` effect, except
    that it is applied to text and not boxes. And, for whatever reason, unlike the
    `box-shadow` effect that requires a special prefix, the `text-shadow` effect does
    not require vendor prefixes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-shadow`效果与`box-shadow`效果非常相似，只是应用于文本而不是框。而且，不像需要特殊前缀的`box-shadow`效果，`text-shadow`效果不需要供应商前缀。'
- en: 'The parameters for the `text-shadow` effect are the same as those for the `box-shadow`
    effect, where you define four values: x-offset, y-offset, blur distance, and color.
    Without the hassle of creating three versions of the effect, the following CSS
    code can be used to define a text shadow with 5 pixels of horizontal and vertical
    offset, a blur value of 5, and a gray color:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-shadow`效果的参数与`box-shadow`效果的参数相同，您需要定义四个值：x偏移、y偏移、模糊距离和颜色。不需要创建三个版本的效果，以下CSS代码可以用于定义一个文本阴影，水平和垂直偏移为5像素，模糊值为5，颜色为灰色：'
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `text-shadow` effect settings in the preceding example produce an effect
    like the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中的`text-shadow`效果设置产生了以下效果：
- en: '![Text shadow](img/4742_04_15.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![文本阴影](img/4742_04_15.jpg)'
- en: Creating a text outline
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建文本轮廓
- en: As alluded to earlier in this chapter, there is no such thing as a "text outline"
    effect. But there *is* a way to apply text outlines using the `text-shadow` effect.
    Generally, this involves matching the text color of the "outlined" type with the
    page background and then defining a particularly thin, black "shadow" with no
    blur at all that looks like an outline.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，"文本轮廓"效果并不存在。但是使用`text-shadow`效果可以应用文本轮廓的方法。通常，这涉及将"轮廓"类型的文本颜色与页面背景匹配，然后定义一个特别细的黑色"阴影"，完全没有模糊，看起来像是轮廓。
- en: Creating effective outline effects requires stacking additional defining parameters
    in order to stack up very thin "shadows" both above and below and to the right
    and left of the text to which the style is applied. For example, when applied
    to text that sits on a white page background, the following class style combines
    (stacks) three different sets of parameters to create an outline effect.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建有效的轮廓效果需要堆叠额外的定义参数，以便在应用样式的文本上方和下方以及右侧和左侧堆叠非常细的“阴影”。例如，当应用于白色页面背景上的文本时，以下类样式组合（堆叠）了三组不同的参数以创建轮廓效果。
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here's how that looks in a browser and in the **CSS Styles** panel.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器和**CSS样式**面板中的效果。
- en: '![Creating a text outline](img/4742_04_16.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![创建文本轮廓](img/4742_04_16.jpg)'
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Essentially, the preceding code generates a thin (1 pixel) "shadow" below the
    text, a second "shadow" below the text, and a third (1 pixel) thick "shadow" above
    the text. For a thicker outline, you could increase the pixel values uniformly
    to 2 pixels.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，前面的代码生成了文本下方的一个细（1像素）“阴影”，文本下方的第二个“阴影”，以及文本上方的一个（1像素）厚的“阴影”。要获得更厚的轮廓，可以将像素值统一增加到2像素。
- en: CSS3 transforms
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3转换
- en: The four CSS3 transitions `scale` (resize), `translate` (move), `rotate`, and
    `skew` are applied to selected content as *effects*. That is to say, they change
    the display or appearance of objects but not their underlying properties.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 四个CSS3转换`scale`（调整大小）、`translate`（移动）、`rotate`和`skew`被应用于选定的内容作为*效果*。也就是说，它们改变了对象的显示或外观，但没有改变它们的基本属性。
- en: These transformations make it possible to present distortions of text or images
    that, before the advent of CSS3, was normally done through images—by using an
    image of text to present that text skewed, rotated, or scaled.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些转换使得可能呈现文本或图像的扭曲，而在CSS3出现之前，通常是通过图像来完成的——通过使用文本图像来呈现那些扭曲、旋转或缩放的文本。
- en: 'Rather than pushing my written communication skills beyond their limits, let''s
    take advantage of the following figure to illustrate these four transitions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与其超出我的书面沟通能力的极限，不如利用以下图示来说明这四个转换：
- en: '![CSS3 transforms](img/4742_04_17.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![CSS3转换](img/4742_04_17.jpg)'
- en: When to use transforms
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用转换
- en: The `skew` and `rotate` transforms can be used to present text or images in
    an intriguing and unique way, while maintaining the user's ability to select (and
    copy, paste, click on, and so on) the *text*. The `translate` transform can be
    used to place one block of content over another (as in the preceding illustration).
    The `scale` transform can be used to stretch or resize type or images.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`skew`和`rotate`转换可用于以引人入胜和独特的方式呈现文本或图像，同时保持用户选择（复制、粘贴、点击等）*文本*的能力。`translate`转换可用于将一个内容块放在另一个内容块上方（如前面的示例所示）。`scale`转换可用于拉伸或调整类型或图像。'
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**When images overlap**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像重叠时**'
- en: When two `<div>` tags overlap, the one that appears in front will be the one
    with the highest z-index value. You can set the z-index in the **CSS Styles**
    panel.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个`<div>`标签重叠时，出现在前面的将是z-index值最高的一个。您可以在**CSS样式**面板中设置z-index。
- en: In many instances, these effects work well as interactive animation, where a
    visitor triggers the transform by hovering over an object with his or her mouse.
    We'll explore that technique as the final element of this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，这些效果可以作为交互式动画很好地工作，访问者可以通过将鼠标悬停在对象上来触发变换。我们将探讨这种技术作为本章的最后一个元素。
- en: As with the CSS3 effects explored earlier in this chapter, transitions can be
    applied to a wide range of tags such as heading tags (`<h1>`, `<h2>`, and so on)
    and images (using the `<img>` tag). Or more typically, class styles are defined
    to apply these transitions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章早些时候探讨的CSS3效果一样，过渡效果可以应用于各种标签，例如标题标签（`<h1>`、`<h2>`等）和图像（使用`<img>`标签）。或者更典型的是，定义类样式以应用这些过渡效果。
- en: How to generate transition coding in Dreamweaver CS6
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在Dreamweaver CS6中生成过渡编码
- en: Before examining the relatively basic syntax necessary for defining a transform,
    let's revisit the controversy I tried to stir up earlier in this chapter over
    two possible approaches for squeezing the most out of Dreamweaver CS6's limited
    but helpful tools for generating CSS3 code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查定义转换所需的相对基本的语法之前，让我们重新审视我在本章早些时候试图激起的有关如何充分利用Dreamweaver CS6有限但有用的CSS3代码生成工具的两种可能方法的争议。
- en: 'To review and expand on the choices: you *cannot* define transforms in the
    **CSS Rule Definition** dialog, but you can apply CSS2 (earlier) styles in this
    way—rules such as background color, font definition, and so on. But, we would
    search in vain through the categories in Dreamweaver''s **CSS Rule Definition**
    dialog for `skew`, `scale`, `transform`, or `rotate`. So the following two choices
    remain:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾和扩展选择：您*不能*在**CSS规则定义**对话框中定义转换，但可以通过这种方式应用CSS2（更早）样式——例如背景颜色、字体定义等规则。但是，在Dreamweaver的**CSS规则定义**对话框中，我们将徒劳地搜索`skew`、`scale`、`transform`或`rotate`。因此，以下两个选择仍然存在：
- en: Type the CSS code in the **Split** or **Code** view directly into the CSS file
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**分割**或**代码**视图中直接输入CSS文件中的CSS代码
- en: Use the limited resources of the **CSS Styles** panel to define the transforms
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**CSS样式**面板的有限资源来定义转换
- en: 'I''ll let you jump back and review the more detailed discussion earlier in
    the chapter for a step-by-step walkthrough of how to either enter code in the
    CSS file you are working with or define styles using the **CSS Styles** panel.
    But there is one new factor to examine here: you get a bit more help in the **CSS
    Styles** panel defining transform parameters than you do for the effects (such
    as shadows) explored earlier in this chapter.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我会让你回到本章早些时候更详细的讨论中，逐步介绍如何在正在使用的CSS文件中输入代码或使用**CSS样式**面板定义样式。但是这里有一个新因素需要检查：在**CSS样式**面板中，您在定义转换参数方面会得到比在本章早些时候探讨的效果（如阴影）更多的帮助。
- en: 'Here''s how that additional help works: in the course of adding a rule to a
    style in the **CSS Styles** panel, if you enter one of the transform options (`-webkit-transform`,
    `-moz-transform`, or `-o transform`) at the bottom of the **CSS Styles** panel,
    Dreamweaver supplies a popup in the second column in the panel with various transform
    options, as shown in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是额外帮助的工作方式：在向 **CSS 样式** 面板中的样式添加规则时，如果在 **CSS 样式** 面板底部输入其中一个变换选项（`-webkit-transform`，`-moz-transform`
    或 `-o transform`），Dreamweaver 会在面板的第二列中提供一个弹出式帮助，其中包含各种变换选项，如下截图所示：
- en: '![How to generate transition coding in Dreamweaver CS6](img/4742_04_18.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![如何在 Dreamweaver CS6 中生成过渡编码](img/4742_04_18.jpg)'
- en: The bottom line is that you have to decide which environment is more comfortable
    for you to generate the CSS3 code for transforms. While exploring the specific
    transforms in the remainder of this chapter, I'll give away my own choice (just
    typing code in the **Code** view). But particularly when you are becoming familiar
    with the CSS3 code for transforms, you might find the popup help in the **CSS
    Styles** panel helpful.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，你必须决定哪种环境更适合你生成 CSS3 变换代码。在本章的其余部分探索特定的变换时，我会透露我的选择（只需在 **代码** 视图中输入代码）。但特别是当你开始熟悉
    CSS3 变换代码时，你可能会发现 **CSS 样式** 面板中的弹出式帮助很有用。
- en: Resizing with scale
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缩放进行调整
- en: Scaling is defined by two parameters, namely x and y. The x value defines how
    much width to increase (or with a negative value decrease), and the y value applies
    to the height. Values are normally multipliers, so that a value of 2 = 200%, means
    doubling the size, and a value of .5 = 50%, means reducing the size to half of
    the original value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放由两个参数定义，即 x 和 y。x 值定义了要增加的宽度（或者使用负值减少），y 值应用于高度。通常是乘数，因此 2 的值 = 200%，表示将尺寸加倍，而
    .5 的值 = 50%，表示将尺寸减少到原始值的一半。
- en: 'The following lines of code apply a `scale` transform that leaves the width
    of the object unchanged but increases the height by 50 percent:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行应用了一个 `scale` 变换，使对象的宽度保持不变，但高度增加了 50%：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s a sample of a class style (called `.scale`) that incorporates the preceding
    code and defines a class style that generates a 125-pixel square box (before rescaling)
    that can be scaled:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个类样式的示例（称为 `.scale`），它包含了前面的代码，并定义了一个类样式，生成一个 125 像素的正方形框（在重新调整大小之前），可以进行缩放：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Floating the box**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**浮动框**'
- en: In this example, the `float` attribute allows us to arrange a bunch of these,
    or similar, boxes in a single row.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`float` 属性允许我们将一堆这样的框或类似的框排成一行。
- en: Moving with translate
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `translate` 移动
- en: The `translate` transform moves objects from where they are placed on the page.
    As noted earlier, this can be an effective technique for having boxes, including
    boxes of selectable text, overlap on a page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate` 变换将对象从页面上的位置移动。如前所述，这可以是一个有效的技术，使框，包括可选择文本的框，在页面上重叠。'
- en: The syntax for the `translate` transform is similar to that for the `scale`
    transform except that the first parameter, that is, the x value defines how far
    to the right (left, if you use a negative value) and the y value defines how far
    down (up if you use a negative value) the object will move. Values are normally
    defined in pixels.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`translate` 变换的语法与 `scale` 变换类似，不同之处在于第一个参数，即 x 值定义了对象向右移动的距离（如果使用负值，则向左移动），y
    值定义了对象向下移动的距离（如果使用负值，则向上移动）。通常以像素为单位定义数值。'
- en: 'Here''s the same class style we used as an example for the `scale` transform
    in the previous section, but with the `translate` transform set to move the object
    35 pixels to the left and 15 pixels down:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在前一节中作为 `scale` 变换示例使用的相同类样式，但是使用 `translate` 变换设置将对象向左移动 35 像素，向下移动 15
    像素：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Applying rotation
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用旋转
- en: The `rotate` transform is perhaps the simplest to define—there is only one parameter
    called the rotation angle. This angle can be positive (rotates clockwise) or negative
    (rotates counterclockwise).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate` 变换可能是最简单的定义方式——只有一个称为旋转角度的参数。这个角度可以是正的（顺时针旋转）或负的（逆时针旋转）。'
- en: 'An example of code that rotates an object 15 degrees clockwise is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转对象 15 度顺时针的代码示例如下：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'An example of a class style that rotates an object 15 degrees with the same
    size and other attributes of the examples we''ve used previously is as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个旋转对象 15 度的类样式示例，与我们之前使用的示例的大小和其他属性相同：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Caution – leave space for rotate (and skew)**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 - 为旋转（和扭曲）留出空间**'
- en: When you rotate an object (or, as we will see, if you skew it), the object will
    overlap with nearby objects. Typically (unless such an overlap is part of the
    design), this is addressed by adding margin values to the object style large enough
    to prevent an overlap.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当你旋转一个对象（或者，我们将看到，如果你扭曲它），对象将与附近的对象重叠。通常情况下（除非这种重叠是设计的一部分），这可以通过向对象样式添加足够大的外边距值来解决。
- en: Creating a skew transition
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建扭曲转换
- en: 'The `skew` transform is perhaps defined by two parameters separated by a comma.
    The first defines the x-axis (horizontal) transform in degrees, and the second
    value defines vertical distortion. If you use zero as a value for one of the two
    axes, the result is a parallelogram as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`skew` 变换可能由两个用逗号分隔的参数定义。第一个参数定义了 x 轴（水平）以度为单位的变换，第二个值定义了垂直扭曲。如果你在两个轴中的一个上使用零作为值，结果将是一个平行四边形，如下截图所示：'
- en: '![Creating a skew transition](img/4742_04_19.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![创建扭曲转换](img/4742_04_19.jpg)'
- en: 'Here''s an example of code for a class tag that applies the yellow background,
    red border, and other attributes of our previous examples that skews an object
    15 degrees on the box''s axes:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个类标签的代码示例，应用了黄色背景、红色边框和我们之前示例的其他属性，将对象在框的轴上扭曲 15 度：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And the following is an example of a class style that rotates an object 15
    degrees, with the same size and other attributes of the examples we''ve used previously:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个类样式的示例，将对象旋转 15 度，与我们之前使用的示例的大小和其他属性相同：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Other CSS3 transform effects
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他CSS3变换效果
- en: In addition to the two-dimensional (2D) transform effects of CSS3 that we have
    explored in this chapter, there are other three-dimensional transforms in emerging
    states of support. They are, in general, not supported by any browsers except
    the WebKit set (SafariLimit), and from what I've been able to understand, at this
    point they are not that applicable without additional JavaScript that animates
    them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在本章中探讨过的CSS3的二维（2D）变换效果之外，还有其他三维变换正在不断发展的支持状态。总的来说，除了WebKit集（SafariLimit）之外，一般没有任何浏览器支持它们，据我所知，目前它们并不适用于没有额外JavaScript来对其进行动画处理。
- en: That said, stay tuned. The world of CSS3 transforms is one of constant motion
    and development, and 3D transforms may gain broader support and become more accessible
    to developers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，请继续关注。CSS3变换的世界是一个不断运动和发展的世界，3D变换可能会得到更广泛的支持，并且对开发者来说更加易用。
- en: Compound transforms
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合变换
- en: 'You can combine as many as all four transforms into a single transform rule.
    For example, to create a transform that applies `skew` (5 degrees on both the
    x and y axes), `scale` (multiples of 1.5 on both the x and y axes), and `rotate`
    (45 degrees), with a prefix that works with WebKit browsers, you would use the
    following code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将多达四个变换组合成一个单一的变换规则。例如，要创建一个应用`skew`（在x和y轴上各5度）、`scale`（在x和y轴上各1.5倍）和`rotate`（45度）的变换，以适用于WebKit浏览器的前缀，您可以使用以下代码：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As transforms tend to apply rather radical changes to objects, and given that
    `skew` and `rotate` create similar effects, the aesthetics and accessibility that
    warrant combining multiple transforms in a single object are limited, but available.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 由于变换往往会对对象应用相当激进的改变，而且`skew`和`rotate`会产生类似的效果，因此在单个对象中结合多个变换的美学和可访问性是有限的，但是可以实现。
- en: Interactive effects and transforms
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互动效果和变换
- en: 'Having surveyed and walked through the process of creating and applying CSS3
    effects and transforms, we turn now to one of the most exciting, dynamic aspects
    of these new style features: **interactivity**.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查和走过创建和应用CSS3效果和变换的过程之后，我们现在转向这些新样式特性中最激动人心、最动态的方面之一：**互动性**。
- en: By interactivity, we mean that an object or elements of a page react to a visitor's
    action with their own action. A visitor hovers over an object, and that object
    moves, resizes, rotates, skews, develops a shadow, becomes semitransparent, or
    undergoes some other change.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓互动性，是指页面上的对象或元素对访问者的操作做出自己的反应。访问者悬停在一个对象上，该对象移动、调整大小、旋转、倾斜、产生阴影、变得半透明，或者经历其他一些变化。
- en: There are two basic techniques for combining interactivity with effects and
    transforms. One is to use JavaScript and write or generate code that combines
    with transforms and effects. Combining JavaScript with effects and transforms
    can be a very powerful technique for creating interactivity on the level that
    can be generated, for example, using Flash.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种基本技术可以将互动性与效果和变换结合起来。一种是使用JavaScript并编写或生成与变换和效果相结合的代码。将JavaScript与效果和变换相结合可以是一种非常强大的技术，用于创建例如使用Flash可以生成的互动性。
- en: The other, more accessible technique is to avail ourselves of the widely supported
    and easy-to-use `:hover` pseudo-class. If you're familiar with defining a "hover"
    state for a link, where a link takes on a unique appearance when hovered over,
    you have a basic idea of how this is going to work. And, we'll walk through that
    in more detail in the following sections.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更加易用的技术是利用广泛支持且易于使用的`:hover`伪类。如果您熟悉为链接定义“悬停”状态的操作，当悬停在链接上时链接会呈现出独特的外观，那么您大致了解这将如何工作。我们将在接下来的章节中更详细地讨论这一点。
- en: Limitations of using effects with JavaScript
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript的效果的限制
- en: There are several definite limitations to creating interactive effects and transforms
    with JavaScript that places it beyond the scope of what we can address in this
    book. The first is that, in order to implement this approach, one needs to know
    JavaScript, and while that knowledge is available in thick books, through massive
    online resources, and with pay-to-use tools that generate JavaScript, it is well
    beyond what I could cover in this chapter, let alone this book. Further, JavaScript
    is not universally supported in browsing environments, and much of the appeal
    of HTML5 and CSS3 is that with proper accounting for non-HTML5 environments, nearly
    everything we are exploring in this book will work or at least not cause harm
    in any browsing environment.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript创建互动效果和变换存在一些明显的限制，这超出了我们在本书中可以讨论的范围。首先，为了实现这种方法，需要了解JavaScript，虽然这方面的知识可以在厚厚的书籍、大量的在线资源以及付费工具中获得，但这远远超出了我在本章甚至本书中可以涵盖的范围。此外，JavaScript并不在所有浏览环境中得到普遍支持，而HTML5和CSS3的吸引力在于，通过适当考虑非HTML5环境，本书中探讨的几乎所有内容都将在任何浏览环境中工作，或者至少不会对任何浏览环境造成伤害。
- en: Dreamweaver's underrated but also under-supported tool for generating JavaScript,
    the Behaviors panel, does not support CSS3 effects and transforms and so is, as
    yet, impotent when it comes to combining JavaScript effects and transforms.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Dreamweaver的被低估但也被支持不足的用于生成JavaScript的工具，行为面板，不支持CSS3效果和变换，因此在结合JavaScript效果和变换方面目前还是无能为力的。
- en: We've partly enumerated the drawbacks (and plusses) for combining JavaScript
    with CSS3 effects and transforms because you're likely to encounter examples,
    models, and much discussion on the web among developers exploring the cutting
    edge of CSS3 and combining their work with JavaScript.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经部分列举了结合JavaScript与CSS3效果和变换的缺点（和优点），因为您可能会在网络上遇到开发者在探索CSS3的前沿并将他们的工作与JavaScript结合的示例、模型和讨论。
- en: Interactivity with the :hover pseudo-class
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`:hover`伪类进行互动
- en: 'There is, however, a much more accessible tool for applying interactive effects
    and transforms: the `:hover` pseudo-class.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一种更加易用的工具可以应用互动效果和变换：`:hover`伪类。
- en: Pseudo-classes are CSS modifiers that define the appearance of a web page object
    depending on the state of an object. They are best known for, and most widely
    applied as, modifiers on links.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 伪类是CSS修饰符，根据对象的状态定义网页对象的外观。它们最为人所知，并且最广泛地应用于链接的修饰符。
- en: For example, unvisited links on a web page are displayed as underlined in blue
    by default, visited links as underlined in purple, and active links as underlined
    in red. These parameters are easily changed in Dreamweaver's **CSS Styles** panel.
    And, they are supported in every modern browser and even in older ones.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，网页上的未访问链接默认显示为蓝色下划线，访问过的链接显示为紫色下划线，活动链接显示为红色下划线。这些参数可以在Dreamweaver的**CSS样式**面板中轻松更改。而且，它们在每个现代浏览器中甚至在旧版浏览器中都受到支持。
- en: But in addition to the `:visited` and `:link :active` pseudo-class styles (pseudo-classes),
    there is another, more dynamic state called `:hover`. This definable state applies
    to anything on a page that a visitor hovers his or her mouse over.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 但除了`:visited`和`:link :active`伪类样式（伪类），还有另一种更动态的状态叫做`:hover`。这种可定义的状态适用于访问者在页面上悬停鼠标的任何东西。
- en: By applying effects and transforms to the hover state of an object, you can
    make it interact in a defined way with a visitor's mouse actions.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将效果和变换应用于对象的悬停状态，您可以使其以一种定义的方式与访问者的鼠标操作进行交互。
- en: Animating CSS3 transforms in Dreamweaver
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Dreamweaver中制作CSS3变换
- en: Let's now walk through exactly how CSS transforms and effects work with the
    `:hover` pseudo-class.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们详细了解CSS变换和效果是如何与`:hover`伪类一起工作的。
- en: The basic concept is that you define a `:hover` pseudo-class for the object
    you wish to transform when being hovered over. This object can be an HTML tag
    (like `<img>`) or a `<div>` tag (either class or ID).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 基本概念是，你为希望在悬停时进行变换的对象定义一个`:hover`伪类。这个对象可以是HTML标签（如`<img>`）或`<div>`标签（类或ID）。
- en: 'In the case of the `<img>` tag, for instance, this line of code in the CSS
    file would define a `scale` transform, increasing the height and width by 10 percent
    when the image is hovered over:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于`<img>`标签，CSS文件中的这行代码将定义一个`scale`变换，当悬停在图像上时，将高度和宽度增加10%：
- en: '[PRE14]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or taking another example—a div tag—the following code would cause a class
    style container named `.box` to rotate 45 degrees when hovered over:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 或者举个例子-一个div标签-以下代码将导致一个名为`.box`的类样式容器在悬停时旋转45度：
- en: '[PRE15]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Producing an effect like the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 产生以下效果：
- en: '![Animating CSS3 transforms in Dreamweaver](img/4742_04_20.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![在Dreamweaver中制作CSS3变换](img/4742_04_20.jpg)'
- en: Example – create an animated effect and transform
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例-创建动画效果和变换
- en: This recipe creates a class style box that can be reused repeatedly on a page
    that displays a CSS3 effect and a CSS3 transform when hovered over. As such, it
    is an easily adaptable recipe—you can use the information in this chapter to substitute
    different effects and transforms that we'll use in the recipe.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方创建了一个类样式框，可以在页面上重复使用，当悬停时显示CSS3效果和CSS3变换。因此，这是一个易于适应的配方-您可以使用本章中的信息来替换我们将在配方中使用的不同效果和变换。
- en: In our particular scenario, we'll apply rounded corners and enlarge the box
    slightly when it is hovered over.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的特定情况下，当悬停在盒子上时，我们将应用圆角并稍微放大盒子。
- en: Putting the pieces in place
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将各个部分放在适当的位置
- en: 'Here''s what you need to have in place before diving into this recipe: you
    need to have a Dreamweaver site defined. Jump back to [Chapter 1](ch01.html "Chapter 1. Creating
    Sites and Pages with Dreamweaver CS6"), *Creating Sites and Pages with Dreamweaver
    CS6*, and review the discussion and steps there for creating a Dreamweaver site.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解这个配方之前，您需要做好以下准备：您需要定义一个Dreamweaver网站。跳转到[第1章](ch01.html "第1章。使用Dreamweaver
    CS6创建站点和页面")*使用Dreamweaver CS6创建站点和页面*，并回顾那里有关创建Dreamweaver网站的讨论和步骤。
- en: 'With your site defined, you''re ready! Everything we need is right here in
    Dreamweaver CS6\. Let''s first set up the files we need:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 有了你定义的网站，你准备好了！我们需要的一切都在Dreamweaver CS6中。让我们首先设置我们需要的文件：
- en: Navigate to **File** | **New** to open the **New Document** dialog. Choose **Blank
    Page** in the **Category** column, **HTML** in the **Page Type** column, and **<none>**
    in the **Layout** column. From the **DocType** popup, choose **HTML5**. The **Attach
    CSS File** box should be blank at this point. With the new file defined, click
    on **Create** to create a new, blank Dreamweaver page.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件**|**新建**以打开**新建文档**对话框。在**类别**列中选择**空白页面**，在**页面类型**列中选择**HTML**，在**布局**列中选择**<none>**。从**文档类型**弹出窗口中，选择**HTML5**。此时**附加CSS文件**框应为空白。定义新文件后，点击**创建**以创建一个新的空白Dreamweaver页面。
- en: Enter `Hover` in the title area of the **Document** toolbar. Navigate to **File**
    | **Save** and assign a filename. Let's use the `hover.html` file.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文档**工具栏的标题区域输入`悬停`。导航到**文件**|**保存**并分配一个文件名。让我们使用`hover.html`文件。
- en: Next, we'll create the CSS file that will hold our styles—particularly the CSS3
    effect and transform styles that we'll be using. Navigate to **File** | **New**.
    The **New Document** dialog opens.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建包含我们将使用的样式的CSS文件-特别是CSS3效果和变换样式。导航到**文件**|**新建**。**新建文档**对话框打开。
- en: Select **CSS** in the **Page Type** category and click on the **Create** button.
    Save the CSS file; use the filename `hover.css`. A blank CSS page opens.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**页面类型**类别中选择**CSS**，然后点击**创建**按钮。保存CSS文件；使用文件名`hover.css`。打开一个空白的CSS页面。
- en: Select the HTML file. You can do this from the files tabs at the top of the
    Dreamweaver **Document** window. Or to avoid any possible confusion (given we
    have two similarly named files open), click on the **Window** menu and click on
    the `hover.html` file.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择HTML文件。您可以在Dreamweaver **文档**窗口顶部的文件选项卡中执行此操作。或者为了避免任何可能的混淆（因为我们打开了两个名称相似的文件），点击**窗口**菜单，然后点击`hover.html`文件。
- en: In the HTML page (you can be in any of the three views, but the **Design** view
    works fine), navigate to **Window** | **CSS Styles** to display the **CSS Styles**
    panel (if that panel is not visible).
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML页面中（您可以在三个视图中的任何一个中，但**设计**视图效果很好），导航到**窗口**|**CSS样式**以显示**CSS样式**面板（如果该面板不可见）。
- en: Click on the **Attach Style Sheet** link icon at the bottom of the **CSS Styles**
    panel, and navigate to and link the `hover.css` stylesheet file. The (empty) stylesheet
    file appears in the **CSS Styles** panel. You can see all the elements we've defined
    so far, and your screen should, at this point, look like the one shown in the
    following screenshot:![Putting the pieces in place](img/4742_04_21.jpg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**CSS样式**面板底部的**附加样式表**链接图标，并导航到并链接`hover.css`样式表文件。空白的样式表文件将出现在**CSS样式**面板中。您可以看到到目前为止我们已经定义的所有元素，此时您的屏幕应该看起来像下面的屏幕截图所示：![摆放好各个部分](img/4742_04_21.jpg)
- en: Click on the **New CSS Rule** icon at the bottom of the **CSS Styles** panel
    to open the **New CSS Rule** dialog. From the **Selector Type** popup choose **Class**,
    and in the **Selector Name** box type `box`. In the **Rule Definition** area if
    `hover.css` is not already selected, choose it from the **Rule Definition** popup.
    Click on **OK** to open the **CSS Rule Definition for .box in hover.css** dialog.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**CSS样式**面板底部的**新建CSS规则**图标，打开**新建CSS规则**对话框。从**选择器类型**弹出菜单中选择**类**，在**选择器名称**框中键入`box`。在**规则定义**区域，如果尚未选择`hover.css`，请从**规则定义**弹出菜单中选择它。点击**确定**打开**hover.css中.box的CSS规则定义**对话框。
- en: In the **Background** category of the **CSS Rule Definition** dialog, choose
    a light colored background color (such as yellow). In the **Box** category, apply
    the following rules as illustrated in the following screenshot. Don't click on
    **OK** yet! We'll define a border next.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**CSS规则定义**对话框的**背景**类别中，选择浅色背景颜色（如黄色）。在**框**类别中，应用以下规则，如下面的屏幕截图所示。但是不要点击**确定**！我们将接下来定义一个边框。
- en: '**Width**: **200** **px**'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽度**：**200** **像素**'
- en: '**Height**: **200** **px**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：**200** **像素**'
- en: '**Float**: **left**'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮动**：**左**'
- en: '**Padding**: **25** (for all)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充**：**25**（全部）'
- en: '**Margin**: **50** (for all)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外边距**：**50**（全部）'
- en: '![Putting the pieces in place](img/4742_04_22.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![摆放好各个部分](img/4742_04_22.jpg)'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**A note on the settings**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于设置的说明**'
- en: We're creating a 200-pixel square box, which is a nice size for holding a sidebar
    message or picture and caption. We floated it to the left-hand side so other content
    can be wrapped around the box on the right-hand side. The large margin and padding
    provides plenty of flexibility for effects that might expand the box or impinge
    on the space of nearby elements.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个200像素的正方形框，这是一个很好的大小，可以容纳侧边栏消息或图片和标题。我们将其浮动到左侧，以便其他内容可以在右侧围绕框进行包裹。大外边距和填充为可能扩展框或影响附近元素的空间提供了足够的灵活性。
- en: Next, let's create a kind of fun border. In the **Border** category of the **CSS
    Rule Definition** dialog, define the border as dashed, thick, and red, as shown
    in the following screenshot. Then click on **OK** to create the style rule.![Putting
    the pieces in place](img/4742_04_23.jpg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一种有趣的边框。在**CSS规则定义**对话框的**边框**类别中，将边框定义为虚线、粗、红色，如下面的屏幕截图所示。然后点击**确定**创建样式规则。![摆放好各个部分](img/4742_04_23.jpg)
- en: Let's place one (or `-- your option --` more than one) instance of this class
    style on the page now. Navigate to **Insert** | **Layout Objects** to open the
    **Insert Div Tag** dialog. Choose **box** from the **Class** popup and click on
    **OK**. Note that you can do this repeatedly if you wish to use this box as a
    page design element, as shown in the following screenshot. You can also use this
    figure to double-check the rules for the `.box` class style in the **CSS Styles**
    panel.![Putting the pieces in place](img/4742_04_24.jpg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们在页面上放置一个（或`--你的选择--`多个）这个类样式的实例。导航到**插入** | **布局对象**打开**插入Div标签**对话框。从**类**弹出菜单中选择**box**，然后点击**确定**。请注意，如果您希望将此框用作页面设计元素，可以重复执行此操作，如下面的屏幕截图所示。您还可以使用此图来仔细检查**CSS样式**面板中`.box`类样式的规则。![摆放好各个部分](img/4742_04_24.jpg)
- en: Using a hover class style to animate effects
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用悬停类样式来实现动画效果
- en: We can now define the `:hover` pseudo-class style to animate this box with scaling
    and rounded corners. We were able to create a sized, floated box with a defined
    border using Dreamweaver CS6's **CSS Styles** panel and dialogs. For the CSS3
    styles required in the following steps, we won't be quite so lucky. We will define
    a style using the **CSS Styles** panel, but we will have to enter the CSS3 style
    code ourselves using just Dreamweaver CS6's code hints.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义`:hover`伪类样式，以实现对这个框的缩放和圆角效果。使用Dreamweaver CS6的**CSS样式**面板和对话框，我们能够创建一个具有定义边框的大小浮动框。对于以下步骤中需要的CSS3样式，我们就没有那么幸运了。我们将使用**CSS样式**面板定义样式，但必须自己输入CSS3样式代码，只能依靠Dreamweaver
    CS6的代码提示。
- en: Click on the **New CSS Rule** icon at the bottom of the **CSS Styles** panel
    to open the **New CSS Rule** dialog. From the **Selector Type** popup choose **class**,
    and in the **Selector Name** box type `.box:hover`. In the **Rule Definition**
    area, if `hover.css` is not already selected, choose it from the **Rule Definition**
    popup. Click on **OK** to open the **CSS Rule Definition dialog for .box:hover
    in hover.css** dialog.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**CSS样式**面板底部的**新建CSS规则**图标，打开**新建CSS规则**对话框。从**选择器类型**弹出菜单中选择**类**，在**选择器名称**框中键入`.box:hover`。在**规则定义**区域，如果尚未选择`hover.css`，请从**规则定义**弹出菜单中选择它。点击**确定**打开**hover.css中.box:hover的CSS规则定义**对话框。
- en: As the rules we need are not available in the **CSS Rule Definition** dialog,
    click on **OK** to save the style `.box:hover` without any rules at the current
    stage.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们需要的规则在**CSS规则定义**对话框中不可用，因此点击**确定**在当前阶段保存样式`.box:hover`而不添加任何规则。
- en: Navigate to **Window** | **hover.css** to open the CSS styles file in Dreamweaver's
    **Code** view. Refer to the following code to define a scale transition that bumps
    the size of the box up to a noticeable, but not obnoxious, 2 percent and applies
    subtle rounded corners to the box. The code makes this effect accessible for Safari
    (`-webkit`), IE9 (`generic`), Opera (`-o`), and Firefox (`-moz`) users.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**窗口** | **hover.css**以在Dreamweaver的**代码**视图中打开CSS样式文件。请参考以下代码，定义一个缩放过渡，将框的大小增加到一个显眼但不刺眼的2%，并对框应用微妙的圆角。该代码使此效果对Safari（`-webkit`）、IE9（`通用`）、Opera（`-o`）和Firefox（`-moz`）用户可用。
- en: 'The code specifically for the `.box:hover` style is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 针对`.box:hover`样式的代码如下：
- en: '[PRE16]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the CSS file (navigate to **File** | **Save**). Use the **Window** menu
    to return to the **hover.html** page. Test the effect and transform in the **Live**
    view, along with other browsers using the **Preview** option of the **File** menu
    in the browser. The following screenshot shows the effect in Firefox—the middle
    box displays as slightly larger with rounded corners.![Using a hover class style
    to animate effects](img/4742_04_25.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存CSS文件（导航到**文件** | **保存**）。使用**窗口**菜单返回到**hover.html**页面。在**浏览器**的**文件**菜单中使用**预览**选项，在**实时**视图中测试效果和变换，以及其他浏览器。下面的截图显示了Firefox中的效果——中间的框显示为略大，并带有圆角。![使用悬停类样式来实现动画效果](img/4742_04_25.jpg)
- en: Once again, this is a highly adaptable recipe and can be the basis for creating
    page layout elements that interact with visitors hovering over them. You could,
    for example, replace `scale` with `rotate`, `skew`, or even `translate` to alter
    the transform. And you could replace the `border-radius` effect with shadows or
    opacity changes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这是一个非常灵活的方法，可以作为创建与访问者交互的页面布局元素的基础。例如，您可以用`rotate`、`skew`甚至`translate`来替换`scale`，也可以用阴影或不透明度变化来替换`border-radius`效果。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered a wide range of effects and transforms available
    with the emergence of the CSS3 standards for stylesheets. Those "standards" are
    inconsistent, so there is a need to provide alternate (prefixed) rules for different
    browsers.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了随着CSS3样式表标准的出现而可用的各种效果和变换。这些“标准”是不一致的，因此需要为不同的浏览器提供替代（前缀）规则。
- en: These transforms and effects are useful as design tools in their own right,
    and they are even more dynamic design factors when made interactive by defining
    `:hover` pseudo-class elements that cause them to appear when (and only when)
    an object is hovered over.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变换和效果本身作为设计工具非常有用，当通过定义`:hover`伪类元素使其交互时，它们甚至更具动态设计因素，只有当对象被悬停时它们才会出现。
- en: Dreamweaver CS6 provides a basic framework for defining and applying CSS3 transforms
    and effects. We examined Dreamweaver's limited CSS3 tools, like the ability to
    use code hints in the **Code** view and useful prompts for transforms in the **CSS
    Styles** panel.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Dreamweaver CS6提供了一个基本框架，用于定义和应用CSS3变换和效果。我们检查了Dreamweaver的有限的CSS3工具，比如在**代码**视图中使用代码提示的能力以及在**CSS样式**面板中有用的变换提示。
- en: In the next chapter of this book, we explore adding "native" audio and video
    to web pages using HTML5\. Native audio and video runs directly in a browser without
    plugin players (such as Windows Media Player, QuickTime Player, or Flash Player).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一章中，我们将探讨如何使用HTML5向网页添加“本地”音频和视频。本地音频和视频可以直接在浏览器中运行，无需插件播放器（如Windows Media
    Player、QuickTime Player或Flash Player）。
