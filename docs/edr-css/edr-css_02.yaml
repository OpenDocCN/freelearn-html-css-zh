- en: Chapter 2. The Problems of CSS at Scale
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。CSS在规模上的问题
- en: In the last chapter, we talked about the scenario which gave rise to the ECSS
    methodology. A large, CSS codebase that developers found difficult to reason about,
    cumbersome to work with and was littered with poorly commented and redundant code.
    However, no CSS codebase starts this way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们谈到了导致ECSS方法论产生的场景。开发人员发现很难理解、难以处理并且充斥着缺乏注释和冗余代码的大型CSS代码库。然而，没有CSS代码库是这样开始的。
- en: In most projects, the CSS starts out with some simple rules. At the outset,
    you'd have to be doing something fairly daft to make maintenance of the CSS problematic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数项目中，CSS始于一些简单的规则。在开始时，您必须做一些相当愚蠢的事情才能使CSS的维护成为问题。
- en: However, as the project grows, so too does the CSS. Requirements become more
    complicated. More authors get involved writing the styles. Edge cases and browser
    workarounds need to be authored and factored in. It's easy for things to get unruly
    fast.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着项目的发展，CSS也在增长。要求变得更加复杂。更多的作者参与编写样式。边缘情况和浏览器的解决方法需要被编写和考虑进去。事情很容易变得混乱。
- en: 'Let''s consider the growing demands on a humble widget:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下一个不起眼的小部件所面临的不断增长的需求：
- en: '*When the widget is in the sidebar, can we reduce the font size?*'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当小部件在侧边栏中时，我们可以减小字体大小吗？
- en: '*When we''re on the home page, can the widget have a different background colour?*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们在主页时，小部件可以有不同的背景颜色吗？
- en: '*Can we have the things inside the widget stacked vertically at larger viewports?*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更大的视口中，我们可以让小部件内部的东西垂直堆叠吗？
- en: '*When the widget is in the sidebar on the product page, the font colour needs
    to change*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当小部件在产品页面的侧边栏中时，字体颜色需要改变
- en: 'Before long we need to write a whole raft of overrides to a key selector. Let''s
    consider the selectors we might need:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，我们需要对一个关键选择器写一系列覆盖。让我们考虑一下我们可能需要的选择器：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There's some basic authoring problems there if this was CSS that we wanted to
    scale. Let's consider some of the more obvious problems in those rules now.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是我们想要扩展的CSS，那么在这里存在一些基本的编写问题。现在让我们考虑一下这些规则中更明显的问题。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The term *key selector* is used to describe the right most selector in any CSS
    rule. It's the selector you are attempting to affect change on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*关键选择器*用于描述任何CSS规则中最右边的选择器。这是您试图对其进行更改的选择器。
- en: Specificity
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特异性
- en: 'The first major problem when trying to scale CSS is the problem of specificity.
    Ordinarily, specificity is a useful thing. It allows us to introduce some form
    of logic in the CSS. Styles that are more specific than others get applied in
    the browser. Our example above demonstrates this: different rules will be applied
    in different eventualities (for example, when in the sidebar, we want to override
    the default styles).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试扩展CSS时，首要问题是特异性的问题。通常，特异性是一件有用的事情。它允许我们在CSS中引入一些逻辑。比其他样式更具体的样式将被应用在浏览器中。我们上面的例子证明了这一点：不同的规则将在不同的情况下应用（例如，在侧边栏中，我们希望覆盖默认样式）。
- en: Now, CSS selectors can be made up of ID, class, attribute & type selectors and
    any combination of those. With responsive designs you can throw media queries
    into the mix too.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，CSS选择器可以由ID、类、属性和类型选择器组成，以及这些的任意组合。在响应式设计中，您还可以将媒体查询加入其中。
- en: 'However, not all selectors are created equal. The W3C describes how specificity
    is calculated here: [http://www.w3.org/TR/css3-selectors/#specificity](http://www.w3.org/TR/css3-selectors/#specificity).
    Here is the most relevant section:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有选择器都是平等的。W3C在这里描述了特异性的计算方式：[http://www.w3.org/TR/css3-selectors/#specificity](http://www.w3.org/TR/css3-selectors/#specificity)。以下是最相关的部分：
- en: '*A selector''s specificity is calculated as follows: count the number of ID
    selectors in the selector (= a) count the number of class selectors, attributes
    selectors, and pseudo-classes in the selector (= b) count the number of type selectors
    and pseudo-elements in the selector (= c) ignore the universal selector Selectors
    inside the negation pseudo-class are counted like any other, but the negation
    itself does not count as a pseudo-class. Concatenating the three numbers a-b-c
    (in a number system with a large base) gives the specificity.*'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*选择器的特异性计算如下：计算选择器中ID选择器的数量（= a）计算选择器中类选择器、属性选择器和伪类的数量（= b）计算选择器中类型选择器和伪元素的数量（=
    c）忽略通用选择器否定伪类内的选择器与其他选择器一样计数，但否定本身不算作伪类。将这三个数字a-b-c连接起来（在一个大基数的数字系统中）得到特异性。*'
- en: 'One important thing missing there is the style attribute. Information on that
    *elsewhere* ([https://www.w3.org/TR/css-style-attr/](https://www.w3.org/TR/css-style-attr/))
    tells us that:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那里缺少的一个重要事情是样式属性。关于此的信息*在其他地方*（[https://www.w3.org/TR/css-style-attr/](https://www.w3.org/TR/css-style-attr/)）告诉我们：
- en: '*The declarations in a style attribute apply to the element to which the attribute
    belongs. In the cascade, these declarations are considered to have author origin
    and a specificity higher than any selector.*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*样式属性中的声明适用于该属性所属的元素。在级联中，这些声明被认为具有作者来源和比任何选择器更高的特异性。*'
- en: So, a style applied in a style attribute on an element is going to be more specific
    than an equivalent rule in a CSS file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在元素的样式属性中应用的样式将比CSS文件中的等效规则更具体。
- en: 'Regardless, the biggest takeaway here is that ID selectors are infinitely more
    specific than class based selectors. This makes overriding any selector containing
    an ID based selector far more difficult. For example, with a widget in the sidebar
    this won''t work:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，这里最重要的一点是ID选择器比基于类的选择器更具体。这使得覆盖包含基于ID的选择器的任何选择器变得更加困难。例如，在侧边栏中的小部件中，这不起作用：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this instance we would be applying a HTML class (`class-on-sidebar`) on the
    sidebar element (the aside element with the ID of sidebar) and then selecting
    that in the CSS lower down than the ID based selector. However, the rule still
    won't be applied.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将在侧边栏元素（具有ID为侧边栏的aside元素）上应用HTML类（`class-on-sidebar`），然后在CSS中选择比基于ID的选择器更低的位置。然而，规则仍然不会被应用。
- en: Knowing what we know about specificity from the W3C specifications we can calculate
    the specificity of these rules.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据W3C规范，我们知道了特异性，我们可以计算这些规则的特异性。
- en: 'Let''s run the numbers. Left to right, the numbers after the selectors below
    relate to: number of inline styles, number of ID selectors, number of class selectors,
    and finally the number of type selectors.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来算一下。从左到右，下面选择器后面的数字与：内联样式的数量、ID选择器的数量、类选择器的数量以及最后类型选择器的数量有关。
- en: '| **selector** | ** inline ** | **ID** | **  class  ** | **  type  ** |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **内联** | **ID** | **类** | **类型** |'
- en: '| `.widget` | 0 | 0 | 1 | 0 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `.widget` | 0 | 0 | 1 | 0 |'
- en: '| `aside#sidebar .widget` | 0 | 1 | 1 | 1 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `aside#sidebar .widget` | 0 | 1 | 1 | 1 |'
- en: '| `.class-on-sidebar .widget` | 0 | 0 | 2 | 0 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `.class-on-sidebar .widget` | 0 | 0 | 2 | 0 |'
- en: So you can see here that the middle selector has a greater specificity than
    the last. Bummer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以看到这里，中间的选择器比最后一个选择器的特异性更高。遗憾。
- en: On a single or smaller file, this isn't that much of a big deal. We just create
    a more specific rule. However, if the CSS of your codebase is split across many
    smaller partial CSS files, finding a rule that is preventing your override from
    working can become an unwanted burden. Now, the problem isn't specific to ID selectors.
    It's more of a problem with unequally weighted selectors in the style sheets.
    Think of it like a heavyweight boxer pitted against a flyweight. It's not a fair
    contest. Creating a level playing field across the selectors used is more important
    than the actual selectors used.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个或较小的文件中，这并不是什么大问题。我们只需创建一个更具体的规则。然而，如果你的代码库的CSS分布在许多较小的部分CSS文件中，找到阻止你的覆盖工作的规则可能会成为一个不必要的负担。现在，问题不再是特异性选择器的问题。这更像是样式表中不平衡加权选择器的问题。可以把它想象成一个重量级拳击手对阵一个蝇量级拳击手。这不是一个公平的比赛。在使用的选择器之间创造一个公平的竞争环境比实际使用的选择器更重要。
- en: This mis-matched soup of selectors is the crux of the specificity issue. As
    soon as you have a CSS codebase with hundreds of rules, any unneeded specificity
    starts to become a major hindrance to speedy development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种不匹配的选择器混合是特异性问题的关键。一旦你有了一个包含数百条规则的CSS代码库，任何不需要的特异性都开始成为快速开发的主要障碍。
- en: So, to conclude, specificity is a problem we need to address in an ever-growing
    CSS codebase.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总之，特异性是我们需要解决的问题，它存在于不断增长的CSS代码库中。
- en: Markup structure tied to selectors
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与选择器相关的标记结构
- en: 'Another practice to avoid when authoring CSS for scale is using type selectors;
    selectors that relate to specific markup. For example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写大规模CSS时要避免的另一种做法是使用类型选择器；与特定标记相关的选择器。例如：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case we need to have an `a` tag inside an `li` which is a direct child
    of a `ul` inside an `aside` element with an ID of `sidebar` - phew!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要在`sidebar`元素的内部有一个`ul`元素内部有一个`li`元素内部有一个`a`标记 - 哎呀！
- en: What happens if we want to apply those styles to a `div` somewhere else? Or
    any other markup structure?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将这些样式应用到其他地方的`div`上会发生什么？或者任何其他标记结构？
- en: We've just unnecessarily tied our rule to specific markup structure. It's often
    quite tempting to do this, as it can seem ridiculous to add a class to something
    as (seemingly) trivial as an `a` or `span` tag. However, I hope once you reach
    the end of this book you'll be convinced to avoid the practice.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚不必要地将我们的规则与特定的标记结构联系在一起。这样做通常是很诱人的，因为给某些看似微不足道的标记（如`a`或`span`标记）添加类似的东西似乎很荒谬。然而，我希望一旦你读完这本书，你会被说服避免这种做法。
- en: We want CSS that is as loosely coupled to structure as possible. That way, should
    we need to introduce an override (a more specific selector for a particular instance)
    we can keep things as vague as possible to get the job done. Again, get used to
    the idea of introducing only as much specificity as is needed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望CSS尽可能地与结构松散耦合。这样，如果我们需要引入一个覆盖（特定实例的更具体选择器），我们可以尽可能地保持模糊以完成工作。再次，要习惯于只引入所需的特异性。
- en: The cascade
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级联
- en: Typically, the cascade part of *Cascading Style Sheets* is useful. Even if specificity
    is very equal across the selectors used, the cascade allows equivalent rules further
    down the CSS to be applied over existing rules higher up.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，层叠样式表的级联部分是有用的。即使在使用的选择器中特异性非常相等，级联也允许在CSS中更深的位置应用等效规则。
- en: However, in a large codebase, the cascade presents an undesirable temptation;
    the ability for developers to take a short cut of amending the existing CSS by
    simply writing more new code at the bottom of the existing CSS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在一个庞大的代码库中，级联呈现了一种不良的诱惑；开发人员可以通过简单地在现有CSS底部编写更多新代码来修改现有CSS的能力。
- en: This temptation is both real and easy to identify with. It can be tempting for
    a number of reasons. As an example, authors more familiar with other languages
    that need to make changes to the CSS may lack the confidence or intimate knowledge
    of the CSS codebase to be able to confidently remove or amend the existing code.
    They therefore take the safest option and override existing rules using a more
    specific set of rules. At the time it seems like the responsible thing to do—just
    adding one or two rules as needed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种诱惑既真实又容易被认同。出于许多原因，这可能是诱人的。例如，熟悉其他语言的作者可能缺乏对CSS代码库的信心或深入了解，无法自信地删除或修改现有代码。因此，他们选择最安全的选项，并使用更具体的规则覆盖现有规则。当时，这似乎是负责任的做法——只在需要时添加一两条规则。
- en: However, the problem with leaning on the cascade in this way is that over time
    and iteration, the CSS code becomes bloated with many redundant rules. The consumers
    of this CSS (the users) are downloading CSS full of cruft that their browser simply
    doesn't need and the maintainers of this code have more code to sift through every
    time they need to make sense of their codebase.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以这种方式依赖级联的问题在于，随着时间和迭代的进行，CSS代码变得臃肿，充斥着许多多余的规则。这些CSS的使用者（用户）下载的是浏览器根本不需要的垃圾代码，而这些代码的维护者在每次需要理清代码库时都需要筛选更多的代码。
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: At this point, we've taken a high-level view of some of the problems that are
    symptomatic of a CSS codebase struggling to cope at scale. Problems such as overly
    specific selectors, selectors tied to specific markup structure and the temptation
    of leaning on the cascade and the CSS bloat that leads too.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经从高层次上看到了一些问题，这些问题表明了一个在规模上难以应对的CSS代码库所面临的困境。问题包括过于具体的选择器、与特定标记结构相关联的选择器以及依赖级联和导致CSS膨胀的诱惑。
- en: In the next chapter, we'll look at the accepted wisdom and approaches of trying
    to tame large CSS codebases and consider any shortcomings they present.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨尝试驯服大型CSS代码库的公认智慧和方法，并考虑它们可能存在的不足之处。
