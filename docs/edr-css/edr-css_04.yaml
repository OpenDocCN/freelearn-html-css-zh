- en: Chapter 4. Introducing the ECSS Methodology
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。介绍ECSS方法论
- en: In the last chapter we considered existing CSS methodologies, and where, for
    your humble authors needs, they fell short.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们考虑了现有的CSS方法论，以及对于我们谦逊的作者来说，它们存在的不足之处。
- en: I'm not about to try and convince you that the Enduring CSS approach is the
    *Alpha and the Omega*. However, it does have different strengths and aims than
    the existing approaches. Therefore, even if taking it wholesale doesn't appeal,
    I'd hope there may be something you can borrow to solve your own issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算说服您持久CSS方法是*阿尔法和欧米茄*。然而，它确实具有与现有方法不同的优势和目标。因此，即使整体采用它并不吸引人，我希望您可以借鉴一些东西来解决自己的问题。
- en: 'Highlights of ECSS:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ECSS的亮点：
- en: It gains maintainability by isolating each visual pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过隔离每个视觉模式来获得可维护性
- en: File size remains minimal over long periods of time by virtue of the fact that
    you can cut out sections/features/components with impunity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件大小随着时间的推移保持最小，因为您可以毫不留情地剪切部分/功能/组件
- en: Rules are *self-quarantining*
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则是*自我隔离的*
- en: Class names/selectors can communicate context, originating logic and variation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名/选择器可以传达上下文、起源逻辑和变化
- en: All rules, their effects and reach are entirely predictable
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有规则、它们的效果和范围都是完全可预测的
- en: When I first wrote about Enduring CSS I was expecting a backlash of sorts. At
    that time (August 2014), no-one was really advocating what I was suggesting. Received
    wisdom for scaling CSS was to abstract visual patterns, normalise designs as much
    as possible and DRY out code. *Enduring CSS* is, in some ways, the antithesis
    of these beliefs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次写关于持久CSS时，我预料到会有一些反对声音。那时（2014年8月），没有人真正提倡我所建议的东西。对于扩展CSS的普遍看法是抽象视觉模式，尽可能规范设计，并使代码更干燥。*持久CSS*在某种程度上与这些信念相反。
- en: In this chapter, we won't be dealing with the specific technical detail of ECSS,
    such as naming conventions, tooling, authoring and organisation. We'll be covering
    those subjects in detail in future chapters. Instead, we will be looking at the
    broad aims and benefits of the approach as it compares to other approaches.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会涉及ECSS的具体技术细节，比如命名约定、工具、编写和组织。我们将在以后的章节中详细讨论这些主题。相反，我们将着眼于这种方法的广泛目标和好处，以及与其他方法相比的优势。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: In case you aren't aware of the acronym, DRY stands for Don't Repeat Yourself,
    a popular goal when coding so that logic is only written once in a codebase to
    provide a single source of truth.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不知道这个缩写，DRY代表不要重复自己，这是编码时的一个流行目标，以便逻辑只在代码库中写一次，提供一个真实的单一来源。
- en: Before we get into this, I think it may help to clarify the terminology that
    will be used. The terms used to define the visual parts of a page are known by
    different names in different approaches. There's nothing revelatory in what I'm
    suggesting or the terms I'm using, it's just important we're all on the same page
    before we get into this.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论之前，我认为澄清将要使用的术语可能会有所帮助。在不同的方法中，用于定义页面视觉部分的术语有不同的名称。我所提出的建议或我所使用的术语并没有什么新意，重要的是在我们深入讨论之前，我们都在同一页面上。
- en: Defining terminology
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义术语
- en: I'm using the term *module* to designate an area of functionality and/or the
    code that creates it. To exemplify, the header of a website could be considered
    a module. The header module would, in turn, be made up of other smaller pieces
    of functionality. For example, drop-down menus or search boxes. These nested pieces
    of functionality would be defined as components. Finally, our smallest *items* would
    be the child nodes that make up a component or module.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用术语*模块*来指代功能区域和/或创建它的代码。举例来说，网站的页眉可以被视为一个模块。页眉模块将由其他更小的功能部分组成。例如，下拉菜单或搜索框。这些嵌套的功能部分将被定义为组件。最后，我们最小的*项*将是组件或模块的组成部分的子节点。
- en: 'So, to reiterate:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，重申一下：
- en: A **module** is the widest, visually identifiable, individual section of functionality
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**是最宽的、在视觉上可识别的、独立的功能部分'
- en: '**Components** are the nested pieces of functionality that are included within
    a module'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**是包含在模块中的嵌套功能部分'
- en: '**Child nodes** are the individual parts that go to make up a component (typically
    nodes in the DOM)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子节点**是组件的组成部分（通常是DOM中的节点）'
- en: For brevity, for what follows, when I'm referring to modules, it could be a
    module or component. The difference from a ECSS authoring perspective is unimportant.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，接下来，当我提到模块时，它可能是一个模块或组件。从ECSS编写的角度来看，这种区别并不重要。
- en: The problems ECSS solves
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECSS解决的问题
- en: My primary goal with ECSS was to isolate styles as opposed to abstracting them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我的ECSS的主要目标是将样式隔离开来，而不是将其抽象化。
- en: Ordinarily, it makes sense to create CSS classes that are abstractions of common
    functionality. The benefit being that they can then be re-used and re-applied
    on many varied elements. That's sound enough in principle. The problem is, on
    larger and more complicated user interfaces, it becomes impossible to make even
    minor tweaks and amendments to those abstractions without inadvertently effecting
    things you didn't intend to.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，创建CSS类的抽象常见功能是有意义的。好处在于它们可以在许多不同的元素上被重复使用和重新应用。原则上这是合理的。问题是，在更大更复杂的用户界面上，即使对这些抽象进行微小的调整和修改也变得不可能，因为这样做会无意中影响到您不打算影响的东西。
- en: A guiding principle with ECSS therefore was to isolate styles to the intended
    target.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，ECSS的一个指导原则是将样式隔离到预期的目标上。
- en: Depending upon your goals, even at the cost of repetition, isolation can buy
    you greater advantages; allowing for predictable styling and simple decoupling
    of styles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的目标，即使重复，孤立性也可以为您带来更大的优势；允许可预测的样式和简单的样式解耦。
- en: A further advantage of isolating styles is that designers can be encouraged
    to bring whatever they need making, without necessarily feeling encumbered by
    existing visual patterns. Every new module that needs to be coded can be a *greenfield*.
    I found that I could code out designs far faster when starting from scratch than
    attempting to build them from any number of vague abstractions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离样式的另一个优势是，设计师可以被鼓励带来他们需要的任何东西，而不一定感到受到现有视觉模式的限制。需要编写的每个新模块都可以是一个*绿地*。我发现，当从头开始编写设计时，我可以比尝试从任意数量的模糊抽象中构建它们更快地编写出设计。
- en: Dealing with specificity
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理特异性
- en: I also wanted to negate issues surrounding specificity. To this ends, I adopted
    the widely used approach of insisting all selectors used a single (or as close
    to that ideal as possible) class-based selector.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想消除与特异性相关的问题。因此，我采用了广泛使用的方法，坚持所有选择器都使用单个（或尽可能接近理想的）基于类的选择器。
- en: '|   | *If you''re having CSS problems I feel bad for you son, I got 99 problems
    but specificity ain''t one* |   |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| | *如果你遇到CSS问题，我为你感到难过，我有99个问题，但特异性不是其中之一* | |'
- en: '|   | --*[https://twitter.com/benfrain/status/537339394706141184](https://twitter.com/benfrain/status/537339394706141184)*
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| | --*[https://twitter.com/benfrain/status/537339394706141184](https://twitter.com/benfrain/status/537339394706141184)*
    |'
- en: Furthermore, structural HTML elements (with the exception of pseudo-elements)
    are NEVER referenced in the style sheets as type selectors. In addition ID selectors
    are completely avoided in ECSS. Not because ID selectors are bad per se, but because
    we need a level playing field of selector strength.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，结构化的HTML元素（除了伪元素）在样式表中永远不会被引用为类型选择器。此外，ECSS完全避免使用ID选择器。不是因为ID选择器本身不好，而是因为我们需要选择器强度的公平竞争环境。
- en: '*Changes* to components are handled via simple overrides. However, the way
    they are handled from an authoring perspective makes them easy to manage and reason
    about.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的覆盖来处理组件的*更改*。然而，从作者的角度来看，它们的处理方式使它们易于管理和理解。
- en: 'Suppose you have an element that needs to be a different width if it is within
    a certain container - easy peasy, we don''t need to be draconian in the manner
    an override can happen. We don''t need a modifier applied to that specific element.
    We can handle typical and very loose override scenarios but manage them confidently.
    You would write it like this in the authoring style sheets:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个元素，如果它在特定容器内，需要具有不同的宽度-非常简单，我们不需要以严厉的方式进行覆盖。我们不需要将修改器应用于该特定元素。我们可以处理典型和非常宽松的覆盖场景，但可以自信地管理它们。您可以在作者样式表中这样编写：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And it would yield this CSS:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它将产生以下CSS：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This may seem like a subtle benefit. After all, we may be authoring things a
    little differently by nesting the overrides, but the net result is typical CSS;
    an element that gets different styles based upon a different and more specific
    selector.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是一个微小的好处。毕竟，我们可能会以稍微不同的方式编写代码，通过嵌套覆盖，但最终结果是典型的CSS；一个元素根据不同和更具体的选择器获得不同的样式。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The use of the ampersand symbol within a nesting context to denote the parent
    selector is a convention borrowed from the *Sass* ([http://sass-lang.com/](http://sass-lang.com/))
    language.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌套上下文中使用和符号来表示父选择器的约定是从*Sass*（[http://sass-lang.com/](http://sass-lang.com/)）语言借鉴的。
- en: However, by adopting this approach, from an authoring perspective, we create
    a *single source of truth* for each key selector. Everything that will ever make
    a change to that key selector is nested inside that opening set of curly braces.
    Furthermore, that key selector will never be defined as a root rule anywhere else
    in the entire codebase.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过采用这种方法，从作者的角度来看，我们为每个关键选择器创建了一个*真理的单一来源*。将对该关键选择器进行任何更改的所有内容都嵌套在那组花括号的开头内。此外，该关键选择器永远不会在整个代码库中的任何其他地方被定义为根规则。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Different interpretations of DRY**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**DRY的不同解释**'
- en: I wasn't convinced that the goal of DRY code that other CSSers were pursuing
    and extolling the virtues of, was the same kind of DRY code I wanted. To explain
    that a little more - I didn't care much about repeated values and pairs across
    my rules, which is what most people were concentrating on DRYing out. What I cared
    about was key selectors not being repeated in the codebase. Key selectors were
    my *single source of truth* and that was the area I wanted to DRY out. To that
    ends, with ECSS, an authoring convention is enforced that prevents a key selector
    being defined more than once project-wide. We will get into that in much more
    detail in [Chapter 8](ch08.html "Chapter 8. The Ten Commandments of Sane Style
    Sheets"), *The Ten Commandments of Sane Style Sheets*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不认为其他CSS开发者追求和赞美的DRY代码目标，是我想要的那种DRY代码。更具体地说，我并不太在意规则中重复的值和对，这是大多数人关注的DRY化的内容。我关心的是关键选择器在代码库中不重复。关键选择器是我的*真理的单一来源*，这是我想要DRY化的领域。因此，在ECSS中，我们强制执行了一种作者约定，防止在整个项目中多次定义关键选择器。我们将在[第8章](ch08.html
    "第8章。理智样式表的十诫")中更详细地讨论这个问题，*理智样式表的十诫*。
- en: This is !important
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是！重要
- en: If on the odd occasion the presence of one override isn't enough, we can make
    use of `!important`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，一个覆盖的存在不够，我们可以使用`!important`。
- en: 'You will likely be aware that using `!important` in CSS is generally frowned
    upon. Here''s what MDN has to say about `!important`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经意识到，在CSS中使用`!important`通常是不受欢迎的。以下是MDN对`!important`的看法：
- en: '|   | *When an !important rule is used on a style declaration, this declaration
    overrides any other declaration made in the CSS, wherever it is in the declaration
    list. Although, !important has nothing to do with specificity, using !important
    is bad practice because it makes debugging hard since you break the natural cascading
    in your style sheets* |   |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| | *当在样式声明中使用!important规则时，此声明将覆盖CSS中的任何其他声明，无论它在声明列表中的位置如何。尽管!important与特异性无关，但使用!important是一种不好的做法，因为它使调试变得困难，因为它破坏了样式表中的自然级联*
    | |'
- en: '|   | --*[https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)*
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   | --*[https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)*
    |'
- en: 'However, when events beyond our control mess with our styles (e.g. a 3rd party
    CSS file loaded on the page) and we need some clout, I embrace !important. Here''s
    an example of a state change that is receiving some extra welly from !important:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们无法控制的事件影响我们的样式（例如，在页面上加载了第三方CSS文件），我们需要一些权威，我会接受`!important`。以下是一个状态变化的例子，它从`!important`获得了额外的支持：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I'll be honest, I really don't lose much sleep over using `!important` when
    it is needed. Thanks to all overrides being localised to their parent selector
    in the authoring style sheets, the occasional use of `!important` presents no
    problems in ECSS.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我会诚实地说，当需要时，我真的不会因为使用`!important`而失眠。由于所有的覆盖都局限于它们在编写样式表中的父选择器，偶尔使用`!important`在ECSS中并不会出现问题。
- en: Embracing repetition
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受重复
- en: Before we get much further, I think it's important to deal with a possible *elephant
    in the room*. I need to try and convince you that eliminating repetition of properties
    and values across files may not buy as much, from a maintenance perspective, as
    a solid and contained set of modules that are easy to remove from a codebase as
    needed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步深入之前，我认为有必要处理一个可能存在的*悬而未决的问题*。我需要试图说服你，消除文件之间属性和值的重复可能并不像从维护的角度来看那么有价值，而是一个坚实且包含的模块集，可以根据需要轻松从代码库中删除。
- en: The ECSS approach embraces repetition of properties and values in the CSS.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ECSS方法接受CSS中属性和值的重复。
- en: 'With ECSS, every single visual module or component is written with a micro-namespace
    to provide isolation from other modules and components. Here is a typical example
    of an authored ECSS rule (the authoring syntax is very similar to Sass, but typically
    facilitated by PostCSS):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ECSS，每个视觉模块或组件都是用微命名空间编写的，以便与其他模块和组件隔离。以下是一个经过编写的ECSS规则的典型示例（编写语法与Sass非常相似，但通常由PostCSS进行辅助）：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Those inclined towards OOCSS and Atomic CSS methodologies may look at that and
    shudder. Things like `color` and `font-size` are declared in most components.
    The `@mixin Headline` mixin generates a sizeable chunk of CSS to designate a particular
    font stack too. So, yes, there's repetition of properties and values.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 倾向于OOCSS和Atomic CSS方法的人可能会看到这一点而感到恐惧。像`color`和`font-size`这样的东西在大多数组件中都有声明。`@mixin
    Headline` mixin 也会生成大量的CSS来指定特定的字体堆栈。所以，是的，有属性和值的重复。
- en: 'However, the positives:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，积极的一面：
- en: It's verbose yet it relies on no inheritance of styles.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它冗长，但不依赖于样式的继承。
- en: It's generally context agnostic (save for the size context of where it is placed),
    any media queries that affect this component are defined within this single set
    of curly braces.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通常是与上下文无关的（除了它所放置的大小上下文），影响这个组件的任何媒体查询都在这一组花括号内定义。
- en: A key selector like this is written once and once only. When this key selector
    needs to change, you only need to look in this one place.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这样的关键选择器只需编写一次。当这个关键选择器需要更改时，你只需要在这一个地方查找。
- en: Writing rules with all overrides nested within creates a sort of micro-cascade.
    Where ordinarily overrides could be anywhere in the CSS, adhering to this method
    confines them to a very specific area. It then becomes far easier to reason about
    specificity as it relates to the rule
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写的规则中所有的覆盖都嵌套在其中，形成了一种微型级联。通常情况下，覆盖可以出现在CSS的任何地方，遵循这种方法将它们限制在一个非常特定的区域。这样就更容易理解特定性与规则的关系。
- en: Zero component abstractions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零组件抽象
- en: With ECSS, if a component needs to be made that is similar, yet subtly different
    to an existing component, we would not abstract or extend from this existing component.
    Instead, a new one would be written.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ECSS，如果需要创建一个与现有组件类似但略有不同的组件，我们不会从现有组件中抽象或扩展。而是会编写一个新的组件。
- en: Yes, I'm serious.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我是认真的。
- en: Even if 95% of it is the same.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有95%是相同的。
- en: The benefit of this is that each component is then independent and isolated.
    One can exist without the other. One can change however it needs to, independently
    from the other. Despite their apparent aesthetic similarity at the outset, they
    can mutate as needed with no fear of infecting or tainting any other similar looking
    component. To extend the biological metaphor, we have gained components that are
    *self-quarantining* by virtue of their unique namespace.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的好处是，每个组件都是独立的和隔离的。一个可以存在而另一个不需要。一个可以根据需要进行变化，而与其他组件独立。尽管它们在外观上看起来很相似，但它们可以根据需要进行变异，而不用担心感染或污染其他看起来相似的组件。延伸生物学的隐喻，我们获得了*自我隔离*的组件，通过它们独特的命名空间。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A further analogy: A BMW 3 series has a lot in common with a BMW 5 series.
    But they are not the same. They may share some/many parts (the equivalent of CSS
    property and value combinations) but that doesn''t make them the same. Their differences
    define them. They cannot be made of exactly the same parts because there is something
    inherently different about them. I''d argue it is the same case with modules and
    components defined with ECSS. The CSS language is the abstraction. The property/value
    pairs of CSS already mean we can build what we want from individual parts.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的类比：BMW 3系与BMW 5系有很多共同之处。但它们并不相同。它们可能共享一些/许多零件（相当于CSS属性和值的组合），但这并不意味着它们是相同的。它们的差异定义了它们。它们不能由完全相同的零件制成，因为它们之间有根本的不同。我认为这也适用于使用ECSS定义的模块和组件。CSS语言是抽象的。CSS的属性/值对已经意味着我们可以从单个部分构建我们想要的东西。
- en: The cost of repetition?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复的成本？
- en: 'To fully reap the benefits of ECSS you need to be comfortable with the property
    and value repetition it creates. At this point, you may believe me deluded. With
    all this duplication, how can this ECSS approach be a viable option? I''ll address
    that concern with one word: gzip.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用ECSS的好处，你需要对它所创建的属性和值的重复感到舒适。此时，你可能会认为我是疯了。有了这么多重复，这种ECSS方法怎么可能是一个可行的选择？我会用一个词来解决这个问题：gzip。
- en: OK, I lied. I'd like to qualify that further.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我撒了谎。我想进一步说明。
- en: gzip is incredibly efficient at compressing repetitive strings
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: gzip在压缩重复字符串方面非常高效
- en: 'I was curious what *real world* difference the verbosity of repeated property/value
    pairs in an approach like ECSS actually made? An experiment:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我很好奇像ECSS这样的方法中重复属性/值对的冗长实际上产生了什么*真实世界*的差异？一个实验：
- en: The resultant CSS file of a ECSS based project I was working on, when gzipped
    (as it would be served *over the wire*), was 42.9 KB. That's a significantly sized
    CSS file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在进行的一个基于ECSS的项目的结果CSS文件，在经过gzip压缩后（因为它将通过网络传输），大小为42.9 KB。这是一个相当大的CSS文件。
- en: 'The most common and verbose patterns that could be abstracted from this style
    sheet to an OOCSS class was a couple of Flex based rules that were used abundantly
    throughout to vertically centre content within their container. They were even
    more verbose thanks to the fact that there was considerable code added by *Autoprefixer*
    ([https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer))
    to enable support on older devices. For example, the resultant CSS for defining
    flex layout was:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个样式表中可以从中抽象出来的最常见和冗长的模式是一对基于Flex的规则，它们在整个样式表中被大量使用，用于垂直居中其容器中的内容。由于*Autoprefixer*（[https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer)）添加了大量代码以支持旧设备，它们甚至更冗长。例如，定义flex布局的结果CSS是：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the test style sheet, those four lines of CSS were repeated **193** times.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试样式表中，这四行CSS被重复了**193**次。
- en: 'That was only half of it. Many of those items needed aligning too. That required
    this in the CSS too:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是其中一半。许多这些项目也需要对齐。这在CSS中也是必需的：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That block was repeated **117** times. Doesn't seem like any better reason to
    abstract to an OOCSS class, right? That must be causing some serious bloat right
    there?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块被重复了**117**次。看起来没有更好的理由来抽象成一个OOCSS类，对吧？那一定会导致严重的膨胀？
- en: Not so fast, Batman!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不要那么着急，蝙蝠侠！
- en: If those blocks of code were removed and the file re-gzipped, the CSS file size
    dropped to 41.9 KB.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些代码块被移除并重新压缩文件，CSS文件大小将减少到41.9 KB。
- en: Extracting the most common and verbose visual pattern to an OOCSS class saved
    just 1 KB of CSS over the wire. And despite just a 1 KB saving in the CSS, factor
    in that if abstracting those styles to Single Responsibility Classes (e.g. `.flex`
    and `.flex-center`), it would also be necessary to litter the HTML with the relevant
    OOCSS classes to get the visual effect back.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将最常见和冗长的视觉模式提取到一个OOCSS类中，仅在传输过程中节省了1 KB的CSS。尽管CSS仅节省了1 KB，但要考虑到，如果将这些样式抽象为单一职责类（例如`.flex`和`.flex-center`），还需要在HTML中添加相关的OOCSS类来恢复视觉效果。
- en: Does that make Single Responsibility Classes worth it?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否使得单一职责类值得？
- en: Given that no other property combination had anything like that sort of verbosity
    and repetition, from a file size perspective, certainly not in my book. It would
    cost a lot of development agility (remember abstraction makes authoring and iteration
    slower as its necessary to change both templates and CSS) and responsive flexibility
    (what if I want this thing to do something different in a different viewport)
    for a minor saving in CSS file size. It's the CSS equivalent of *robbing Peter
    to pay Paul*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到没有其他属性组合有类似的冗长和重复，从文件大小的角度来看，当然不是在我的书中。这将会大大降低开发的灵活性（记住，抽象会使作者和迭代变慢，因为需要同时更改模板和CSS）和响应灵活性（如果我想在不同的视口中做一些不同的事情）以换取CSS文件大小的微小节省。这就是CSS版的*拿来主义*。
- en: Let me be quite clear. Despite the efficacy of gzip, if your priority is having
    the smallest possible CSS file size, ECSS isn't your best choice.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我非常清楚。尽管gzip的效果很好，如果你的优先级是拥有尽可能小的CSS文件大小，ECSS并不是你最好的选择。
- en: Instead, go take a look at *Atomic CSS* ([http://acss.io/](http://acss.io/)).
    Its creators are smart people, indeed, *Thierry Koblentz* ([http://www.cssmojo.com/](http://www.cssmojo.com/))
    is one of the smartest CSSers I know of. I'm sure ACSS will serve your needs well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，去看看*Atomic CSS*（[http://acss.io/](http://acss.io/)）。它的创作者是聪明人，确实，*Thierry
    Koblentz*（[http://www.cssmojo.com/](http://www.cssmojo.com/)）是我所知道的最聪明的CSS人之一。我相信ACSS会满足你的需求。
- en: On the other hand, the priorities of ECSS are developer ergonomics (understandable
    class-naming conventions), easy maintainability (styles organised by component
    and simple to delete) and style encapsulation (namespacing prevents leaky abstractions).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，ECSS的优先级是开发人员的人体工程学（可理解的类命名约定）、易维护性（按组件组织的样式，易于删除）和样式封装（命名空间防止泄漏的抽象）。
- en: Different problems, different solution.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的问题，不同的解决方案。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope I've given you enough to consider that obsessing over repeated property
    values and pairs might not be the best use of your time if you are trying to create
    maintainable style sheets. In the next chapter, besides looking at the benefits
    of the ECSS naming convention, I'll also be arguing that a sound organisational
    approach to project maintenance will generate far leaner style sheets in the long
    term than class abstraction and re-use.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我已经给了你足够的理由来考虑，如果你试图创建可维护的样式表，那么过度关注重复的属性值和对可能不是最好的时间利用。在下一章中，除了看看ECSS命名约定的好处之外，我还会争辩说，对项目维护采取合理的组织方法将比类抽象和重用在长期内生成更精简的样式表。
