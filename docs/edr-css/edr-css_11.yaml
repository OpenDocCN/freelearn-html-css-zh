- en: Appendix 2. Browser Representatives on CSS Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录2. 浏览器代表对CSS性能的看法
- en: As a companion to [Appendix 1](apa.html "Appendix 1. CSS Selector Performance"),
    *CSS Selector Performance*, the following text deals with what browser representatives
    have to say about CSS performance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为[附录1](apa.html "附录1. CSS选择器性能")的补充，*CSS选择器性能*，以下文字涉及浏览器代表对CSS性能的看法。
- en: TL;DR
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TL;DR
- en: 'If you read nothing more of this section, read this next paragraph and take
    it to heart:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想读这一节的其他内容，那么请读下一段并牢记：
- en: Do not memorize rules in relation to CSS performance without checking your own
    *data*. They are largely useless, transient and too subjective. Instead become
    acquainted with tools and use them to reveal relevant data for your own scenario.
    This is basically the mantra the Chrome Developer relations folks have been promoting
    for years, I believe it was Paul Lewis (more of which below) that coined the term,
    *Tools, not rules* in relation to troubleshooting web performance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有检查自己的*数据*之前，不要记忆与CSS性能相关的规则。它们基本上是无用的、短暂的和太主观的。相反，熟悉工具并使用它们来揭示自己场景的相关数据。这基本上是Chrome开发者关系人员多年来一直在推广的口号，我相信是Paul
    Lewis（下文还有更多）创造了与Web性能故障排除相关的术语*工具，而不是规则*。
- en: Nowadays I get that sentiment. Really get it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我理解那种情绪。真的理解了。
- en: Browser representatives on CSS performance
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器代表对CSS性能的看法
- en: 'While I generally never worry CSS selectors when authoring a style sheet (typically
    I just put a class on anything I want to style and select it directly) every so
    often I see comments from people way smarter than me that relate specifically
    to a certain selector. Here''s a quote from *Paul Irish* ([https://www.paulirish.com/](https://www.paulirish.com/))
    in relation to a *post on A List Apart from Heydon Pickering* ([http://alistapart.com/article/quantity-queries-for-css](http://alistapart.com/article/quantity-queries-for-css))
    which used a specific type of selector:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我在编写样式表时不太担心CSS选择器（通常我只是在我想要设置样式的任何东西上放一个类并直接选择它），但偶尔我会看到一些比我聪明得多的人对特定的选择器发表评论。以下是*Paul
    Irish*（[https://www.paulirish.com/](https://www.paulirish.com/)）在与*Heydon Pickering*（[http://alistapart.com/article/quantity-queries-for-css](http://alistapart.com/article/quantity-queries-for-css)）的一篇文章相关的评论，该文章使用了一种特定类型的选择器：
- en: '*These selectors are among the slowest possible. ~500 slower than something
    wild like div.box:not(:empty):last-of-type .title”. Test page http://jsbin.com/gozula/1/quiet
    That said, selector speed is rarely a concern, but if this selector ends up in
    a dynamic webapp where DOM changes are very common, it could have a large effect.
    So, good for many use cases but keep in mind it might become a perf bottleneck
    as the app matures. Something to profile at that point. Cheers*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*这些选择器是可能的最慢的。比像div.box:not(:empty):last-of-type .title”这样的东西慢大约500倍。测试页面http://jsbin.com/gozula/1/quiet。也就是说，选择器速度很少是一个问题，但如果这个选择器最终出现在一个DOM变化非常频繁的动态Web应用程序中，它可能会产生很大的影响。因此，对于许多用例来说是不错的，但请记住，随着应用程序的成熟，它可能成为性能瓶颈。这是一个需要在那时进行分析的事情。干杯*'
- en: What are we to take from that? Do we try and hold that kind of selector in some
    *do not use in case of emergency* vault in our heads?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该从中得出什么？我们是否应该在头脑中将这种选择器放在某种*紧急情况下不要使用*的保险库中？
- en: To try and get some *real* answers, I asked the smart folks who actually work
    on browsers what they think we should concern ourselves with in regards to CSS
    performance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了得到一些*真正*的答案，我询问了实际在浏览器上工作的聪明人，问他们对CSS性能应该关注什么。
- en: In the front-end world we are lucky that the Chrome Developer relations team
    are so accessible. However, I like balance. In addition, I reached out to people
    at Microsoft and Firefox and included some great input from WebKit too.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端世界中，我们很幸运，因为Chrome开发者关系团队是如此可及。然而，我喜欢平衡。此外，我还联系了微软和火狐的人，并包括了WebKit的一些很好的意见。
- en: Should we worry about CSS selectors?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应该担心CSS选择器吗？
- en: The question was essentially, *Should authors concern themselves with the selectors
    used in relation to CSS performance?*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 问题本质上是，*作者是否应该关注与CSS性能相关的选择器？*
- en: 'Let''s start at the beginning, where things like the CSSOM and DOM actually
    get constructed. *Paul Lewis* ([http://aerotwist.com/](http://aerotwist.com/)),
    Developer Advocate for Chrome Developer Relations explains, *Style calculations
    are affected by two things: selector matching and the size of the invalidation.
    When you first load a page all the styles need to be calculated for all the elements,
    and that''s a function of tree size and the number of selectors.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从开始的地方开始，那里有CSSOM和DOM实际上被构建。Chrome开发者关系的开发者倡导者*Paul Lewis*（[http://aerotwist.com/](http://aerotwist.com/)）解释说，*样式计算受两个因素影响：选择器匹配和无效大小。当你首次加载页面时，所有元素的所有样式都需要计算，这取决于树的大小和选择器的数量。*
- en: 'For more detail, Lewis quotes *Rune Lillesveen* ([https://docs.google.com/document/d/1vEW86DaeVs4uQzNFI5R-_xS9TcS1Cs_EUsHRSgCHGu8/edit#](https://docs.google.com/document/d/1vEW86DaeVs4uQzNFI5R-_xS9TcS1Cs_EUsHRSgCHGu8/edit#))
    on the Opera team (who does a lot of work on Blink''s style code):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细的内容，Lewis引用了Opera团队的*Rune Lillesveen*（[https://docs.google.com/document/d/1vEW86DaeVs4uQzNFI5R-_xS9TcS1Cs_EUsHRSgCHGu8/edit#](https://docs.google.com/document/d/1vEW86DaeVs4uQzNFI5R-_xS9TcS1Cs_EUsHRSgCHGu8/edit#)）的话：
- en: '*At the time of writing, roughly 50% of the time used to calculate the computed
    style for an element is used to match selectors, and the other half of the time
    is used for constructing the RenderStyle (computed style representation) from
    the matched rules.*'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在撰写本文时，大约50%的时间用于计算元素的计算样式，用于匹配选择器，另一半时间用于从匹配规则构造RenderStyle（计算样式表示）*'
- en: OK, that went a bit *science* for me so does that mean we need to worry about
    selectors or not?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这对我来说有点*科学*，那是否意味着我们需要担心选择器呢？
- en: Lewis again, *Selector matching can affect performance, but in my experience
    the tree size tends to be the most significant factor*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Lewis再次说道，*选择器匹配可能会影响性能，但树的大小往往是最重要的因素*。
- en: It stands to reason that if you have an enormous DOM tree, and a whole raft
    of irrelevant styles, things are going to start chugging. My own *bloat test* ([https://benfrain.com/selector-test/2-01.html](https://benfrain.com/selector-test/2-01.html))
    backs this up. Consider this another way. If I give you two piles of 1000 cards,
    each with different names on except for 5 matching ones, it stands to reason it
    will take longer to pair those matching names than if there were only 100, or
    10 cards. Same principal for the browser.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是理所当然的，如果你有一个庞大的DOM树和一大堆无关的样式，事情就会开始变得困难。我的自己的*膨胀测试*（[https://benfrain.com/selector-test/2-01.html](https://benfrain.com/selector-test/2-01.html)）支持这一点。再考虑另一种情况。如果我给你两堆各有1000张卡片，除了5张匹配的卡片外，每堆上的卡片名字都不同，那么很显然要花更长的时间来配对这些匹配的名字，而不是只有100张或10张卡片。对于浏览器也是同样的道理。
- en: I think we can all agree that style bloat is a bigger concern than the CSS selector
    used. Maybe that's one rule we can bank on?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们都可以同意，样式膨胀比使用的CSS选择器更令人担忧。也许这是我们可以信赖的一个规则？
- en: '|   | *For most websites I would posit that selector performance is not the
    best area to spend your time trying to find performance optimizations. I would
    highly recommend to focus on what is inside the braces than the selectors outside
    of them* |   |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|   | *对于大多数网站，我认为选择器性能不是值得花时间寻找性能优化的最佳领域。我强烈建议专注于括号内的内容，而不是括号外的选择器* |   |'
- en: '|   | --*Greg Whitworth, Program Manager at Microsoft* |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Greg Whitworth, 微软的项目经理* |'
- en: What about JavaScript
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么JavaScript呢
- en: However, Whitworth also notes that extra diligence is required when dealing
    with JavaScript and dynamism in the DOM structure, *If you are using JavaScript
    to add or replace classes on events over and over again you should think about
    how that will affect the overall web pipeline and the DOM structure of the box
    you're touching*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Whitworth也指出，在处理JavaScript和DOM结构的动态性时需要额外的注意，*如果你一遍又一遍地使用JavaScript在事件上添加或替换类，你应该考虑这将如何影响整体的网络管道和你正在操作的盒子的DOM结构*。
- en: This ties in with the earlier comment from *Paul Irish* ([https://www.paulirish.com/](https://www.paulirish.com/)).
    Rapid invalidation of areas of the DOM thanks to class changes can occasionally
    show up complex selectors. So, maybe we should be worried about selectors?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这与*Paul Irish*（[https://www.paulirish.com/](https://www.paulirish.com/)）早期的评论相吻合。由于类的更改而导致DOM区域的快速失效有时可能会显示出复杂的选择器。那么，也许我们应该担心选择器？
- en: '|   | *There are exceptions to every rule and there are selectors that are
    more performant than others but we normally only see these in cases where there
    are massive DOM trees in tandem with JavaScript anti-patterns that causes DOM
    thrashing and additional layout or painting to take place* |   |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | *每个规则都有例外，有些选择器比其他选择器更有效，但我们通常只在有大量DOM树和JavaScript反模式导致DOM抖动和额外布局或绘制发生的情况下才会看到这些选择器*
    |   |'
- en: '|   | --Whitworth |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | --Whitworth |'
- en: For more simplistic JavaScript changes, Lewis offers this advice, *The solution
    is normally to target elements as closely as possible, though increasingly Blink
    is smart about which elements will truly be affected by a change to a parent element*.
    So, practically speaking, if you need to affect a change in a DOM element, add
    a class directly above it in the DOM tree if possible, rather than up on the body
    or html node.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更简单的JavaScript更改，Lewis提供了这样的建议，*解决方案通常是尽可能地紧密地定位元素，尽管Blink越来越聪明，可以确定哪些元素真正会受到对父元素的更改的影响*。因此，实际上，如果可能的话，如果你需要影响DOM元素的更改，最好是在DOM树中直接在它上面添加一个类，而不是在body或html节点上。
- en: Dealing with CSS performance
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理CSS性能
- en: At this point I'm happily re-concluding the conclusion arrived at in [Appendix
    1](apa.html "Appendix 1. CSS Selector Performance"), *CSS Selector Performance *-
    that CSS selectors are rarely a problem with static pages. Plus, attempting to
    second guess which selector will perform well is probably futile.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我很高兴地得出了在[附录1](apa.html "附录1. CSS选择器性能")中得出的结论，*CSS选择器性能* - CSS选择器在静态页面中很少会出现问题。此外，试图预测哪个选择器会表现良好可能是徒劳的。
- en: However, for large DOMs and dynamic DOMs (e.g. not the odd class toggle, we
    are talking lots of JavaScript manipulation) it may not be beyond the realms of
    possibility that CSS selectors could be causing an issue. *I can't speak for all
    of Mozilla, but I think when you're dealing with performance, you want to focus
    on what's slow. Sometimes that will be selectors; usually it will be other things*,
    says *L. David Baron* ([http://dbaron.org/](http://dbaron.org/)), of *Mozilla* ([https://www.mozilla.org/en-US/](https://www.mozilla.org/en-US/))
    and a member of the W3C's CSS working group. *I’ve definitely seen pages where
    selector performance matters, and I've definitely seen lots of pages where it
    doesn't*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于大型DOM和动态DOM（例如不仅仅是偶尔的类切换，我们说的是大量的JavaScript操作），CSS选择器可能会成为一个问题并不是不可能的。*我不能代表所有的Mozilla，但我认为当你处理性能问题时，你需要关注什么是慢的。有时候会是选择器；通常会是其他事情*，来自*Mozilla*（[https://www.mozilla.org/en-US/](https://www.mozilla.org/en-US/)）和W3C的CSS工作组成员*L.
    David Baron*（[http://dbaron.org/](http://dbaron.org/)）说道。*我确实看到过选择器性能很重要的页面，也确实看到过很多页面选择器性能并不重要*。
- en: So what should we do? What's the most pragmatic approach?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们应该怎么做？什么是最实用的方法？
- en: '|   | *You should use profiling tools to determine where your performance problems
    are, and then work on solving those problems* |   |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | *你应该使用性能分析工具来确定你的性能问题在哪里，然后努力解决这些问题* |   |'
- en: '|   | --*Baron* |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Baron* |'
- en: Everyone I spoke to echoed these sentiments.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我和所有人交谈的时候都表达了这些观点。
- en: Summary
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: If you've developed on the Web for any non-trivial period of time you will know
    that the answer to most web related questions is *it depends*. I hate that there
    are no simple, cast-iron rules in relation to CSS performance that can be banked
    upon in every situation. I'd genuinely love to write those rules out here in a
    nice little paragraph and believe they would be universally true. But I can't
    because there simply aren't any universal *cast-iron* truths in relation to performance.
    There can't ever be any because there are simply too many variables. Engines update,
    layout methods become optimised, every DOM tree is different, all CSS files are
    different. On and on ad infinitum. You get the picture.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在网络上开发了一段时间，就会知道大多数与网络相关的问题的答案是“这取决于情况”。我讨厌在CSS性能方面没有简单的、铁一般的规则可以在任何情况下依赖。我真的很想在这里写出那些规则，并相信它们是普遍适用的。但我不能，因为在性能方面根本没有普遍适用的“铁一般”的真理。永远不可能有，因为变量太多了。引擎更新，布局方法变得更加优化，每个DOM树都不同，所有的CSS文件也都不同。如此循环往复。你明白了吧。
- en: I'm afraid the best I can offer is to not sweat things like CSS selectors or
    layout methods in advance. It's unlikely they will be your problem (but, you know,
    they just might). Instead, concentrate on making *the thing*. Then, when *the
    thing* is made, test *the thing*. If it's slow or broke, find the problem and
    fix *the thing*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我害怕我能提供的最好建议就是不要提前担心CSS选择器或布局方法。它们不太可能是你的问题（但是，你知道，它们可能会是）。相反，集中精力去做“那件事”。然后，当“那件事”做好了，测试“那件事”。如果它慢或者出了问题，找到问题并修复“那件事”。
- en: Additional Information
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外信息
- en: Greg Whitworth recommends *A 2012 Build talk* ([http://blogs.msdn.com/b/ie/archive/2012/11/20/build-2012-50-performance-tricks-to-make-your-html5-applications-and-sites-faster.aspx](http://blogs.msdn.com/b/ie/archive/2012/11/20/build-2012-50-performance-tricks-to-make-your-html5-applications-and-sites-faster.aspx))
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Greg Whitworth推荐*2012年Build talk*（[http://blogs.msdn.com/b/ie/archive/2012/11/20/build-2012-50-performance-tricks-to-make-your-html5-applications-and-sites-faster.aspx](http://blogs.msdn.com/b/ie/archive/2012/11/20/build-2012-50-performance-tricks-to-make-your-html5-applications-and-sites-faster.aspx)）
- en: '*CSS Triggers* ([https://csstriggers.com/](https://csstriggers.com/)) by Paul
    Lewis indicates what changes in CSS will trigger Layout, Paint and Composite operations
    in the Blink engine (Chrome/Opera)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CSS Triggers*（[https://csstriggers.com/](https://csstriggers.com/)）由Paul Lewis指出了CSS中的哪些变化会触发Blink引擎（Chrome/Opera）中的布局、绘制和合成操作。'
