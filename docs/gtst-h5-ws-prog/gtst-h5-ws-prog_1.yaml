- en: Chapter 1. WebSocket – a Handshake!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 WebSocket – a Handshake!
- en: In real life, handshaking is the act of gently grasping two people's hands,
    followed by a brief up and down movement. If you have ever greeted someone this
    way, then you already understand the basic concept of the HTML5 WebSocket protocol.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，握手是温柔地握住两个人的手，然后进行简短的上下移动。如果你以这种方式问候过某人，那么你已经理解了HTML5 WebSocket协议的基本概念。
- en: WebSockets define a persistent two-way communication between web servers and
    web clients, meaning that both parties can exchange message data at the same time.
    WebSockets introduce true concurrency, they are optimized for high performance,
    and result in much more responsive and rich web applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket定义了Web服务器和Web客户端之间的持久双向通信，这意味着双方可以同时交换消息数据。WebSocket引入了真正的并发性，它们针对高性能进行了优化，并且可以实现更加响应迅速和丰富的Web应用程序。
- en: 'The following diagram shows a server handshake with multiple clients:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了服务器与多个客户端的握手：
- en: '![WebSocket – a Handshake!](img/6962_01_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![WebSocket – a Handshake!](img/6962_01_01.jpg)'
- en: For the record, the WebSocket protocol has been standardized by the **Internet
    Engineering Task Force** (**IETF**) and the WebSocket API for web browsers is
    currently being standardized by the **World Wide Web Consortium** (**W3C**)—yes,
    it's a work in progress. No, you do not need to worry about enormous changes,
    as the current specification has been published as "proposed standard".
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，WebSocket协议已经由**互联网工程任务组**（**IETF**）标准化，用于Web浏览器的WebSocket API目前正在由**万维网联盟**（**W3C**）标准化——是的，这是一个正在进行中的工作。不，你不需要担心巨大的变化，因为当前的规范已经发布为“建议标准”。
- en: Life before WebSocket
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket之前的生活
- en: Before diving into the WebSockets' world, let's have a look at the existing
    techniques used for bidirectional communication between servers and clients.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究WebSocket的世界之前，让我们看看用于服务器和客户端之间双向通信的现有技术。
- en: Polling
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮询
- en: Web engineers initially dealt with the issue using a technique called polling.
    Polling is a synchronous method (that is, no concurrency) that performs periodic
    requests, regardless whether data exists for transmission. The client makes consecutive
    requests after a specified time interval. Each time, the server responds with
    the available data or with a proper warning message.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Web工程师最初使用一种称为轮询的技术来处理这个问题。轮询是一种同步方法（即没有并发），它执行周期性请求，无论是否存在要传输的数据。客户端在指定的时间间隔后进行连续的请求。每次，服务器都会用可用的数据或适当的警告消息进行响应。
- en: Though polling "just works", it is easy to understand that this method is overkill
    for most situations and extremely resource consuming for modern web apps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然轮询“只是起作用”，但很容易理解这种方法对于大多数情况来说是过度的，并且对于现代Web应用程序来说非常消耗资源。
- en: Long polling
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 长轮询
- en: Long polling is a similar technique where, as its name indicates, the client
    opens a connection and the server keeps the connection active until some data
    is fetched or a timeout occurs. The client can then start over and perform a sequential
    request. Long polling is a performance improvement over polling, but the constant
    requests might slow down the process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 长轮询是一种类似的技术，正如其名称所示，客户端打开连接，服务器保持连接活动，直到获取一些数据或超时发生。然后客户端可以重新开始并执行顺序请求。长轮询是对轮询的性能改进，但是不断的请求可能会减慢过程。
- en: Streaming
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流式传输
- en: Streaming seemed like the best option for real-time data transmission. When
    using streaming, the client performs a request and the server keeps the connection
    open indefinitely, fetching new data when ready. Although this is a big improvement,
    streaming still includes HTTP headers, which increase file size and cause unnecessary
    delays.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 流式传输似乎是实时数据传输的最佳选择。在使用流式传输时，客户端发出请求，服务器保持连接无限期地打开，准备好时获取新数据。虽然这是一个很大的改进，但流式传输仍然包括HTTP头，这会增加文件大小并导致不必要的延迟。
- en: Postback and AJAX
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回发和AJAX
- en: The web has been built around the HTTP request-response model. HTTP is a stateless
    protocol, meaning that the communication between two parts consists of independent
    pairs of requests and responses. In plain words, the client asks the server for
    some information, the server responds with the proper HTML document and the page
    is refreshed (that's actually called a postback). Nothing happens in between,
    until a new action is performed (such as the click of a button or a selection
    from a drop-down menu). Any page load is followed by an annoying)(in terms of
    user experience) flickering effect.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Web是围绕HTTP请求-响应模型构建的。HTTP是一种无状态协议，这意味着两个部分之间的通信由独立的请求和响应对组成。简单地说，客户端向服务器请求一些信息，服务器用适当的HTML文档进行响应，然后页面刷新（实际上称为回发）。在此期间没有发生任何事情，直到执行新的操作（例如单击按钮或从下拉菜单中进行选择）。任何页面加载都会导致令人讨厌的（从用户体验角度来看）闪烁效果。
- en: It was not until 2005 that the postback flickering was bypassed thanks to **Asynchronous
    JavaScript and XML** (**AJAX**). AJAX is based on the JavaScript's `XmlHttpRequest`
    Object and allows asynchronous execution of JavaScript code without interfering
    with the rest of the user interface. Instead of reloading the whole page, AJAX
    sends and receives back only a portion of the web page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 直到2005年，通过**异步JavaScript和XML**（**AJAX**）绕过了回发闪烁。AJAX基于JavaScript的`XmlHttpRequest`对象，允许异步执行JavaScript代码，而不干扰用户界面的其余部分。AJAX发送和接收的只是网页的一部分，而不是重新加载整个页面。
- en: Imagine you are using Facebook and want to post a comment on your Timeline.
    You type a status update in the proper text field, hit Enter and... voila! Your
    comment is automatically published without a single page load. Unless Facebook
    used AJAX, the browser would need to refresh the whole page in order to display
    your new status.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在使用Facebook，并且想在你的时间线上发表评论。你在适当的文本字段中输入状态更新，按Enter键，然后...哇！你的评论会自动发布，而不需要重新加载整个页面。除非Facebook使用了AJAX，否则浏览器需要刷新整个页面才能显示你的新状态。
- en: AJAX, accompanied with popular JavaScript libraries such as jQuery, has strongly
    improved the end user experience and is widely considered as a must-have attribute
    for every website. It was only after AJAX that JavaScript became a respectable
    programming language, instead of being thought of as a necessary evil.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX，加上流行的JavaScript库如jQuery，极大地改善了最终用户体验，并被广泛认为是每个网站必备的属性。只有在AJAX之后，JavaScript才成为了一个值得尊敬的编程语言，而不再被视为必要的邪恶。
- en: But it's still not enough. Long polling is a useful technique that makes it
    seem like your browser maintains a persistent connection, while the truth is that
    the client makes continuous calls! This might be extremely resource-intensive,
    especially in mobile devices, where speed and data size really matter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不够。长轮询是一种有用的技术，它让你的浏览器看起来保持了一个持久的连接，而事实上客户端在不断地发出调用！这可能会极大地消耗资源，特别是在移动设备上，速度和数据大小真的很重要。
- en: 'All of the methods previously described provide real-time bidirectional communication,
    but have three obvious disadvantages in comparison with WebSockets:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 前面描述的所有方法都提供了实时的双向通信，但与WebSockets相比有三个明显的缺点：
- en: They send HTTP headers, making the total file size larger
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们发送HTTP头，使总文件大小变大
- en: The communication type is half duplex, meaning that each party (client/server)
    must wait for the other one to finish
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信类型是半双工的，意味着每个方（客户端/服务器）必须等待另一个方完成
- en: The web server consumes more resources
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务器消耗更多资源
- en: The postback world seems like a walkie-talkie—you need to wait for the other
    guy to finish speaking (half-duplex). In the WebSocket world, the participants
    can speak concurrently (full-duplex)!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 后台世界看起来像一部对讲机-你需要等待对方讲完话（半双工）。在WebSocket世界中，参与者可以同时说话（全双工）！
- en: The web was initially built for displaying text documents, but think how it
    is used today. We display multimedia content, add location capabilities, accomplish
    complex tasks and, hence, transmit data different than text. AJAX and browser
    plugins such as Flash are all great, but a more native way of doing things is
    required. The way we use the web nowadays bears the need for a holistic new application
    development framework.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Web最初是用于显示文本文档的，但想想它如今的用途。我们显示多媒体内容，添加位置功能，完成复杂任务，因此传输的数据不同于文本。AJAX和浏览器插件如Flash都很棒，但需要一种更本地的做事方式。我们如今使用Web的方式需要一个全新的应用程序开发框架。
- en: Then came HTML5
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 然后来了HTML5
- en: HTML5 makes a huge, yet justifiable, buzz nowadays as it introduces vital solutions
    to the problems discussed previously. If you are already familiar with HTML5,
    feel free to skip this section and move on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5如今引起了巨大的关注，因为它为之前讨论的问题提供了重要的解决方案。如果您已经熟悉HTML5，请随意跳过本节并继续。
- en: HTML5 is a robust framework for developing and designing web applications.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5是一个强大的框架，用于开发和设计Web应用程序。
- en: HTML5 is not just a new markup or some new styling selectors, neither is it
    a new programming language. HTML5 stands for a collection of technologies, programming
    languages and tools, each of which has a discrete role and all of these together
    accomplish a specific task—that is, to build rich web apps for any kind of device.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5不仅仅是一种新的标记或一些新的样式选择器，也不是一种新的编程语言。HTML5代表着一系列技术、编程语言和工具，每种都有各自的作用，所有这些一起完成了一个特定的任务-即为任何类型的设备构建丰富的Web应用程序。
- en: The main HTML5 pillars include Markup, CSS3, and JavaScript APIs, together.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5的主要支柱包括标记、CSS3和JavaScript API。
- en: 'The following diagram shows HTML5 components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了HTML5组件：
- en: '![Then came HTML5](img/6962_01_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![然后来了HTML5](img/6962_01_02.jpg)'
- en: Here are the dominant members of the HTML5 family. As this book does not cover
    the whole set of HTML5, I suggest you visit [html5rocks.com](http://html5rocks.com)
    and get started with hands-on examples and demos.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML5家族的主要成员。由于本书未涵盖HTML5的全部内容，建议您访问[html5rocks.com](http://html5rocks.com)并开始使用实际示例和演示。
- en: '| Markup | Structural elementsForm elementsAttributes |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 标记 | 结构元素表单元素属性 |'
- en: '| Graphics | Style sheetsCanvasSVGWebGL |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 图形 | 样式表CanvasSVGWebGL |'
- en: '| Multimedia | AudioVideo |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 多媒体 | 音视频 |'
- en: '| Storage | CacheLocal storageWeb SQL |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 存储 | 缓存本地存储Web SQL |'
- en: '| Connectivity | WebMessagingWebSocketWebWorkers |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | Web消息WebSocketWebWorkers |'
- en: '| Location | Geolocation |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 位置 | 地理位置 |'
- en: Although Storage and Connectivity are supposed to be the most advanced topics,
    you do not need to worry if you are not an experienced web developer. Throughout
    this book, we will explain how to accomplish common tasks and we'll create some
    step-by-step examples, which you can later download and experiment with. Moreover,
    managing WebSockets via the HTML5 API is pretty simple to grasp, so take a deep
    breath and dive in with no fear.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存储和连接被认为是最先进的主题，但如果您不是经验丰富的Web开发人员，您不需要担心。在本书中，我们将解释如何完成常见任务，并创建一些逐步示例，您可以稍后下载并进行实验。此外，通过HTML5
    API管理WebSockets非常简单，因此深呼吸，毫无恐惧地投入其中。
- en: The WebSocket protocol
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSocket协议
- en: The WebSocket protocol redefines full-duplex communication from the ground up.
    Actually, WebSockets, along with WebWorkers, take a really enormous step in bringing
    desktop-rich functionality to web browsers. Concurrency and multi-threading did
    not truly exist in the postback world. They were emulated in a rather restrictive
    manner.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket协议从根本上重新定义了全双工通信。实际上，WebSockets和WebWorkers在将桌面丰富功能带到Web浏览器方面迈出了一大步。在后台世界中，并发和多线程并不存在。它们以一种相当受限的方式被模拟。
- en: The URL
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL
- en: 'HTTP protocol requires its own schemas (http and https). So does the WebSocket
    protocol. Here is a typical WebSocket URL example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议需要自己的模式（http和https）。WebSocket协议也是如此。以下是一个典型的WebSocket URL示例：
- en: '`ws://example.com:8000/chat.php`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`ws://example.com:8000/chat.php`'
- en: The first thing to notice is the `ws` prefix. This is pretty normal, as we need
    a new URL schema for the new protocol. `wss` is supported as well and is the WebSocket
    equivalent to https for secure connections (SSL). The rest of the URL is similar
    to the plain old HTTP URLs and is illustrated in the following image.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是`ws`前缀。这很正常，因为我们需要一个新的URL模式来支持新协议。`wss`也得到支持，它是WebSocket的安全连接（SSL）等价物。URL的其余部分类似于旧的HTTP
    URL，并在下图中有所说明。
- en: 'The following image shows the WebSocket URL in tokens:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了WebSocket URL的标记：
- en: '![The URL](img/6962_01_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![URL](img/6962_01_03.jpg)'
- en: Browser support
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: 'For the time being, the latest specification of the WebSocket protocol is RFC
    6455 and it''s a blessing that the latest versions of every modern web browser
    support it. More specifically, the RFC 6455 is supported in the following browsers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，WebSocket协议的最新规范是RFC 6455，幸运的是，每个现代web浏览器的最新版本都支持它。具体来说，RFC 6455在以下浏览器中得到支持：
- en: Internet Explorer 10+
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer 10+
- en: Mozilla Firefox 11+
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla Firefox 11+
- en: Google Chrome 16+
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Chrome 16+
- en: Safari 6+
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari 6+
- en: Opera 12+
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera 12+
- en: It is worth mentioning that the mobile versions of Safari (for iOS), Firefox
    (Android), Chrome (Android, iOS), and Opera Mobile all support WebSockets, bringing
    the WebSocket power to smartphones and tablets!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Safari（iOS版）、Firefox（Android版）、Chrome（Android版、iOS版）和Opera Mobile的移动版本都支持WebSocket，将WebSocket的功能带到了智能手机和平板电脑上！
- en: But, wait. What about the older browser versions that many people still use
    worldwide? Well, no need to worry, as throughout this book, we'll have a look
    at some fallback techniques that make our websites accessible to the largest audience
    possible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，等等。许多人仍在全球范围内使用的旧版浏览器呢？好吧，不用担心，因为在本书中，我们将研究一些备用技术，使我们的网站能够被尽可能多的用户访问。
- en: Who's using WebSockets
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁在使用WebSocket
- en: Although WebSocket is a brand-new technology, quite many promising companies
    utilize its various capabilities in order to deliver a richer experience to their
    users. The most well-known paradigm is Kaazing ([http://demo.kaazing.com/livefeed/](http://demo.kaazing.com/livefeed/)),
    a startup that raised an investment of 17 million dollars for its real-time communication
    platform.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管WebSocket是一种全新的技术，但相当多的有前途的公司利用其各种能力，以提供更丰富的用户体验。最著名的范例是Kaazing（[http://demo.kaazing.com/livefeed/](http://demo.kaazing.com/livefeed/)），这是一家初创公司，为其实时通信平台筹集了1700万美元的投资。
- en: 'Other businesses include the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其他业务包括以下内容：
- en: '| Name | Website | Description |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 网站 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Gamooga | [http://www.gamooga.com/](http://www.gamooga.com/) | Real-time
    backend for apps and games |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Gamooga | [http://www.gamooga.com/](http://www.gamooga.com/) | 应用程序和游戏的实时后端
    |'
- en: '| GitLive | [http://gitlive.com/](http://gitlive.com/) | Notifications on GitHub
    projects |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| GitLive | [http://gitlive.com/](http://gitlive.com/) | GitHub项目的通知 |'
- en: '| Superfeedr | [http://superfeedr.com/](http://superfeedr.com/) | Real-time
    data pushing |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Superfeedr | [http://superfeedr.com/](http://superfeedr.com/) | 实时数据推送 |'
- en: '| Pusher | [http://pusher.com/](http://pusher.com/) | Scalable real-time functionality
    API for web and mobile apps |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Pusher | [http://pusher.com/](http://pusher.com/) | 用于web和移动应用程序的可扩展实时功能API
    |'
- en: '| Smarkets | [https://smarkets.com/](https://smarkets.com/) | Real-time betting
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| Smarkets | [https://smarkets.com/](https://smarkets.com/) | 实时投注 |'
- en: '| IRC Cloud | [https://www.irccloud.com/](https://www.irccloud.com/) | Chatting
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| IRC Cloud | [https://www.irccloud.com/](https://www.irccloud.com/) | 聊天 |'
- en: 'Two great resources containing a large variety of WebSocket demos are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 包含大量WebSocket演示的两个重要资源如下：
- en: '[http://www.websocket.org/demos.html](http://www.websocket.org/demos.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.websocket.org/demos.html](http://www.websocket.org/demos.html)'
- en: '[http://www.html5rocks.com/en/features/connectivity](http://www.html5rocks.com/en/features/connectivity)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.html5rocks.com/en/features/connectivity](http://www.html5rocks.com/en/features/connectivity)'
- en: Mobile?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动？
- en: WebSockets, as the name indicates, are related to the web. As you know, the
    web is much more than a bunch of techniques for some browsers; rather, it's a
    broad communication platform for a vast number of devices, including desktop computers,
    smartphones, and tablets.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket，顾名思义，与网络有关。正如你所知，网络不仅仅是一些浏览器的技术，而是一个广泛的通信平台，适用于大量设备，包括台式电脑、智能手机和平板电脑。
- en: 'Obviously, any HTML5 app that utilizes WebSockets will work on (almost) any
    HTML5-enabled mobile web browser. Imagine you want to implement the same functionality
    using the enhanced features of a native mobile app. Is the WebSocket supported
    in the mainstream mobile operating systems? The short answer: yes. Currently,
    all key players in the mobile industry (Apple, Google, Microsoft) provide a WebSocket
    API you can use in your own native apps. iOS, Android, and Windows smartphones
    and tablets integrate WebSockets in a similar way to HTML5.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，任何利用WebSocket的HTML5应用程序都可以在（几乎）任何支持HTML5的移动web浏览器上运行。想象一下，你想要使用原生移动应用程序的增强功能来实现相同的功能。WebSocket在主流移动操作系统中得到支持吗？简短的答案是：是的。目前，移动行业的所有主要参与者（苹果、谷歌、微软）都提供了WebSocket
    API，供你在自己的原生应用程序中使用。iOS、Android和Windows智能手机和平板电脑都以类似的方式集成了WebSocket，就像HTML5一样。
- en: The future is now
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来就在眼前
- en: 'New neuroscience research confirms the old adage about the power of a handshake:
    people do form a better impression of those who proffer their hand in greeting
    ([http://www.sciencedaily.com/releases/2012/10/121019141300.htm](http://www.sciencedaily.com/releases/2012/10/121019141300.htm)).
    As a human handshake can lead to better deals, so a WebSocket handshake can lead
    to better user experience. We investigate user experience as a combination of
    performance (the user is waiting less) and simplicity (the developer builds straight
    and quick).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 新的神经科学研究证实了关于握手的古老格言的力量：人们对那些伸出手来打招呼的人留下更好的印象（[http://www.sciencedaily.com/releases/2012/10/121019141300.htm](http://www.sciencedaily.com/releases/2012/10/121019141300.htm)）。正如人类的握手可以带来更好的交易一样，WebSocket的握手可以带来更好的用户体验。我们将用户体验视为性能（用户等待时间更短）和简单性（开发者构建直接快速）的结合。
- en: 'So, it''s up to you: do you want to build modern, truly real-time web applications?
    Do you want to provide your users with the maximum experience? Do you want to
    offer a terrific performance boost to your existing web apps? If the answer to
    any of these questions is yes, then it''s time to realize that the WebSocket API
    is mature enough to offer its goodies right here right now.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这取决于你：你想构建现代的、真正实时的Web应用程序吗？你想为用户提供最大的体验吗？你想为现有的Web应用程序提供出色的性能提升吗？如果对任何一个问题的答案是肯定的，那么现在是时候意识到WebSocket
    API已经足够成熟，可以立即提供其好处了。
- en: What are we going to make?
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们要做什么？
- en: 'Throughout this book, we are going to implement a real-world project: a simple,
    multi-user, WebSocket-based, chatting application. Live chat is a very common
    feature among all modern social networks. We will learn, step-by-step, how to
    configure the web server, implement the HTML5 client, and transfer messages between
    them.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将实施一个真实的项目：一个简单的、多用户的、基于WebSocket的聊天应用程序。实时聊天是所有现代社交网络中非常常见的功能。我们将逐步学习如何配置Web服务器，实现HTML5客户端，并在它们之间传递消息。
- en: Apart from plain text messages, we'll see how WebSockets handle various types
    of data, such as binary files, images, and videos. Yeah, we'll demonstrate real-time
    media streaming, too!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了纯文本消息，我们还将看到WebSocket如何处理各种类型的数据，如二进制文件、图像和视频。是的，我们也会演示实时媒体流！
- en: Moreover, we are going to enhance the security of our app, examine some known
    security risks and find out how to avoid common pitfalls. Furthermore, we'll take
    a glance at some fallback techniques targeting those poor guys who cannot (or
    do not want to) update their browsers yet.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将增强我们应用程序的安全性，检查一些已知的安全风险，并找出如何避免常见的陷阱。此外，我们将瞥一眼一些针对那些不能（或不想）更新他们的浏览器的可怜家伙的备用技术。
- en: Last but not least, we'll get mobile. You chat using a desktop browser, a phone,
    or a tablet. Wouldn't it be nice if you could use the same techniques and principles
    across multiple targets? Well, through reading this book, you'll find out how
    to easily convert your web app into a native mobile and tablet application as
    well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，我们将涉及移动端。您可以使用台式机浏览器、手机或平板电脑进行聊天。如果您可以在多个目标上使用相同的技术和原则，那不是很好吗？通过阅读本书，您将了解如何轻松将您的Web应用程序转换为原生移动和平板应用程序。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this first chapter we introduced the WebSocket protocol, mentioned the existing
    techniques for real-time communication and determined the specific needs that
    WebSockets fulfill. Moreover, we examined its relationship with HTML5 and illustrated
    how the users can benefit from such enhancements. It's now time to introduce the
    WebSocket client API in more detail.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了WebSocket协议，提到了实时通信的现有技术，并确定了WebSocket满足的特定需求。此外，我们还检查了它与HTML5的关系，并说明了用户如何从这些增强中受益。现在是时候更详细地介绍WebSocket客户端API了。
