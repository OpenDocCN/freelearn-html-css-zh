- en: Chapter 2. The WebSocket API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 WebSocket API
- en: 'If you are familiar with HTML and JavaScript, you already know enough stuff
    to start developing HTML5 WebSockets right now. WebSocket communication and data
    transmission is bidirectional, so we need two parties to establish it: a server
    and a client. This chapter focuses on the HTML5 web client and introduces the
    WebSocket client API.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉HTML和JavaScript，您已经了解足够的知识来立即开始开发HTML5 WebSockets。WebSocket通信和数据传输是双向的，因此我们需要两方来建立它：服务器和客户端。本章重点介绍HTML5
    Web客户端，并介绍WebSocket客户端API。
- en: HTML5 basics
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5基础知识
- en: Any HTML5 web client is a combination of structure, styling, and programming
    logic. As we have already mentioned, the HTML5 framework provides discrete sets
    of technologies for each use. Although we assume that you are already slightly
    familiar with these concepts, let's have a quick look at them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 任何HTML5 Web客户端都是结构、样式和编程逻辑的组合。正如我们已经提到的，HTML5框架为每种用途提供了离散的技术集。尽管我们假设您已经对这些概念有一定了解，让我们快速浏览一下它们。
- en: Markup
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记
- en: The markup defines the structure of your web application. It is a set of XML
    tags that lets you specify the hierarchy of the visual elements within an HTML
    document. Popular new HTML5 tags include the `header`, `article`, `footer`, `aside`,
    and `nav` tags. The elements have a specific meaning and help distinguish the
    different parts of a web document.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 标记定义了您的Web应用程序的结构。它是一组XML标记，让您指定HTML文档中可视元素的层次结构。流行的新HTML5标记包括`header`、`article`、`footer`、`aside`和`nav`标记。这些元素具有特定的含义，并有助于区分Web文档的不同部分。
- en: 'Here is a simple example of HTML5 markup code that generates the essential
    elements for our chatting app: a text field, two buttons, and a label. The text
    field is used for typing our message, the first button will send the message,
    the second button will terminate the chat, and the label will display the interactions
    coming from the server:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML5标记代码的一个简单示例，用于生成我们聊天应用程序的基本元素：一个文本字段、两个按钮和一个标签。文本字段用于输入我们的消息，第一个按钮将发送消息，第二个按钮将终止聊天，标签将显示来自服务器的交互：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line of the preceding code (the `DOCTYPE`) indicates that we are using
    the latest version of HTML, which is HTML5.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的第一行（`DOCTYPE`）表示我们正在使用最新版本的HTML，即HTML5。
- en: For more information about the HTML5 markup, consider visiting [http://html5doctor.com/](http://html5doctor.com/).
    There is a complete reference for the supported HTML5 tags at [http://html5doctor.com/element-index/](http://html5doctor.com/element-index/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有关HTML5标记的更多信息，请访问[http://html5doctor.com/](http://html5doctor.com/)。在[http://html5doctor.com/element-index/](http://html5doctor.com/element-index/)上有一个支持的HTML5标记的完整参考。
- en: Styling
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式
- en: 'In order to display colors, backgrounds, fonts, alignments, and so on, you
    need to be familiar with **Cascading Style Sheets** (**CSS**). CSS is quite self-explanatory,
    so, if you want to change the header style (for example color, alignment, and
    font), you would write something similar to the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示颜色、背景、字体、对齐等，您需要熟悉**层叠样式表**（**CSS**）。CSS相当直观，因此，如果要更改标题样式（例如颜色、对齐和字体），您可以编写类似以下代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[http://www.css3.info/](http://www.css3.info/) is a great resource for CSS3
    and further reading.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.css3.info/](http://www.css3.info/) 是CSS3和进一步阅读的绝佳资源。'
- en: Logic
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑
- en: The markup defines the structure and the CSS rules apply the styling. What about
    event handling and user actions? Well, here comes JavaScript! JavaScript is a
    scripting programming language that lets you control and alter the behavior of
    your web app according to the accompanying actions. Using JavaScript, you can
    handle button clicks, page loads, apply addition styling, add special effects,
    or even fetch data from web services. Using JavaScript, you can create objects,
    assign them properties and methods, and raise and catch events when something
    occurs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 标记定义了结构，CSS规则应用了样式。那么事件处理和用户操作呢？JavaScript就派上用场了！JavaScript是一种脚本编程语言，可以根据伴随的操作控制和改变Web应用程序的行为。使用JavaScript，您可以处理按钮点击、页面加载，应用额外样式，添加特殊效果，甚至从Web服务获取数据。使用JavaScript，您可以创建对象，分配属性和方法，并在发生某些事件时引发和捕获它们。
- en: 'Following is a simple JavaScript example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的JavaScript示例：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first line searches the document tree, finds the element named `action-button`
    and stores it in an object named `buttonSend`. Then, a function is assigned to
    the onclick event of the button. The body of the function is executed every time
    the button is clicked on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行搜索文档树，找到名为`action-button`的元素，并将其存储在名为`buttonSend`的对象中。然后，将一个函数分配给按钮的onclick事件。每次单击按钮时，函数的主体都会被执行。
- en: The brand-new HTML5 features are heavily based on JavaScript, so a basic knowledge
    of this language is essential before implementing any web app. Most importantly,
    the WebSocket API is pure JavaScript, too!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 全新的HTML5功能主要基于JavaScript，因此在实现任何Web应用程序之前，对这种语言的基本了解是必不可少的。最重要的是，WebSocket API
    也是纯JavaScript！
- en: A chatting application
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聊天应用程序
- en: 'The most popular kind of full-duplex communication is chatting. We''ll start
    the development of a simple chatting application right here. First thing to do
    is configure the client side, which consists of three basic files:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 全双工通信中最受欢迎的类型是聊天。我们将从这里开始开发一个简单的聊天应用程序。首先要做的是配置客户端，它由三个基本文件组成：
- en: An HTML (`.html`) file containing the markup structure of the web page
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含网页标记结构的HTML（`.html`）文件
- en: A CSS (`.css`) file containing all the styling information
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含所有样式信息的CSS（`.css`）文件
- en: A JavaScript (`.js`) file containing the logic of the application
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含应用程序逻辑的JavaScript（`.js`）文件
- en: Currently, that's all you need to have for a full-featured HTML5 chat client.
    No browser plugins or other external libraries are required.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这就是您需要为功能齐全的HTML5聊天客户端。不需要浏览器插件或其他外部库。
- en: API overview
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API概述
- en: '**API**, which stands for **Application Programming Interface**, is a set of
    objects, methods, and routines that let you interact with the underlying layer
    of functionality. Considering the WebSocket protocol, its API includes the WebSocket
    primary object, events, methods, and attributes.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**API**，代表**应用程序编程接口**，是一组对象、方法和例程，让您与底层功能层进行交互。考虑到WebSocket协议，其API包括WebSocket主要对象、事件、方法和属性。'
- en: Translating these characteristics into actions, the WebSocket API allows you
    to connect to a local or remote server, listen for messages, send data, and close
    the connection.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些特性转化为操作，WebSocket API允许您连接到本地或远程服务器，监听消息，发送数据，并关闭连接。
- en: Here is a typical usage of the WebSocket API.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是WebSocket API的典型用法。
- en: 'The following illustration shows the typical WebSocket workflow:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下插图显示了典型的WebSocket工作流程：
- en: '![API overview](img/6962_02_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![API概述](img/6962_02_01.jpg)'
- en: Browser support
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: 'The WebSocket protocol is a new HTML5 feature, so not every browser supports
    it yet. If you ever tried to run WebSocket-specific code on a browser that is
    not supported, nothing would happen. Think of your users: it wouldn''t be nice
    for them to surf on an unresponsive site. Moreover, you wouldn''t like to miss
    any potential customers!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket协议是HTML5的一个新功能，因此并非每个浏览器都支持它。如果您曾经尝试在不支持的浏览器上运行特定于WebSocket的代码，将不会发生任何事情。考虑一下您的用户：他们在无响应的网站上冲浪并不好。此外，您也不想错过任何潜在的客户！
- en: As a result, you should check for browser compatibility before running any WebSocket
    code. If the browser cannot run the code, you should provide an error message
    or a fallback, such as AJAX or Flash-based functionality. There will be more on
    fallbacks in [Chapter 6](ch06.html "Chapter 6. Error Handling and Fallbacks"),
    *Error Handling and Fallbacks*. I also like providing messages that gently prompt
    my users to update their browser.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在运行任何WebSocket代码之前，应检查浏览器兼容性。如果浏览器无法运行代码，应提供错误消息或备用方案，如AJAX或基于Flash的功能。在[第6章](ch06.html
    "第6章。错误处理和备用方案") *错误处理和备用方案*中将会更多地介绍备用方案。我也喜欢提供温和提示用户更新其浏览器的消息。
- en: 'JavaScript provides an easy way to find out whether a browser can execute WebSocket-specific
    code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript提供了一种简单的方法来查找浏览器是否可以执行特定于WebSocket的代码：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `window.WebSocket` statement indicates whether the WebSocket protocol is
    implemented in the browser. The following statements are equivalent:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.WebSocket`语句指示浏览器是否实现了WebSocket协议。以下语句是等效的：'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each one of them results in the same validation check. You can also check about
    any feature support using your browser's developer tools.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它们中的每一个都会导致相同的验证检查。您还可以使用浏览器的开发人员工具检查任何功能支持。
- en: Want to see which browsers do support the WebSocket protocol? There is an up-to-date
    resource available at [http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想知道哪些浏览器支持WebSocket协议吗？可以在[http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets)上找到最新的资源。
- en: At the time of writing, WebSocket is fully supported by Internet Explorer 10+,
    Firefox 20+, Chrome 26+, Safari 6+, Opera 12.1+, Safari for iOS 6+, and Blackberry
    Browser 7+.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，WebSocket已完全受到Internet Explorer 10+、Firefox 20+、Chrome 26+、Safari 6+、Opera
    12.1+、Safari for iOS 6+和Blackberry Browser 7+的支持。
- en: The WebSocket object
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebSocket对象
- en: 'It''s now time to initialize a connection to the server. All we need is to
    create a WebSocket JavaScript object, providing the URL to the remote or local
    server:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候初始化与服务器的连接了。我们所需要做的就是创建一个WebSocket JavaScript对象，并提供远程或本地服务器的URL：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When this object is constructed, it immediately opens a connection to the specified
    server. [Chapter 3](ch03.html "Chapter 3. Configuring the Server"), *Configuring
    the Server*, will show us in detail how we can develop the server-side program.
    For now, just keep in mind that a valid WebSocket URL is necessary.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当构造此对象时，它会立即打开到指定服务器的连接。[第3章](ch03.html "第3章。配置服务器") *配置服务器*，将详细向我们展示如何开发服务器端程序。现在，只需记住需要一个有效的WebSocket
    URL。
- en: The example URL `ws://echo.websocket.org` is a public address that we can use
    for testing and experiments. The [Websocket.org](http://Websocket.org) server
    is always up and running and, when it receives a message, it sends it back to
    the client! It's all we need in order to ensure that our client-side application
    works properly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例URL `ws://echo.websocket.org`是一个我们可以用于测试和实验的公共地址。[Websocket.org](http://Websocket.org)服务器一直在运行，当它接收到消息时，会将其发送回客户端！这就是我们确保客户端应用程序正常工作所需的一切。
- en: Events
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'After creating the `WebSocket` object, we need to handle the events it exposes.
    There are four main events in the WebSocket API: Open, Message, Close, and Error.
    You can handle them either by implementing the `onopen`, `onmessage`, `onclose`,
    and `onerror` functions respectively, or by using the `addEventListener` method.
    Both ways are almost equivalent for what we need to do, but the first one is much
    clearer.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`WebSocket`对象后，我们需要处理其暴露的事件。WebSocket API中有四个主要事件：打开、消息、关闭和错误。您可以通过实现`onopen`、`onmessage`、`onclose`和`onerror`函数来处理它们，也可以使用`addEventListener`方法。对于我们需要做的事情，这两种方式几乎是等效的，但第一种方式更清晰。
- en: Note that, obviously, the functions we'll provide to our events will not be
    executed consecutively. They will be executed asynchronously when a specific action
    occurs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们将为事件提供的函数不会按顺序执行。它们将在特定操作发生时异步执行。
- en: So, let's have a closer look at them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们仔细看看它们。
- en: onopen
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开
- en: 'The `onopen` event is raised right after the connection has been successfully
    established. It means that the initial handshake between the client and the server
    has led to a successful first deal and the application is now ready to transmit
    data:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`onopen`事件在连接成功建立后立即触发。这意味着客户端和服务器之间的初始握手已经导致了成功的第一次交易，应用程序现在已准备好传输数据：'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's a good practice to provide your users with the appropriate feedback while
    they are waiting for the connection to open. WebSockets are definitely fast, but
    the Internet connection might be slow!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在等待连接打开时，为用户提供适当的反馈是一个好的做法。WebSockets绝对很快，但是互联网连接可能很慢！
- en: onmessage
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: onmessage
- en: 'The `onmessage` event is the client''s ear to the server. Whenever the server
    sends some data, the `onmessage` event is fired. Messages might contain plain
    text, images, or binary data. It''s up to you how that data will be interpreted
    and visualized:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`onmessage`事件是客户端与服务器的通信。每当服务器发送一些数据时，`onmessage`事件就会触发。消息可能包含纯文本、图像或二进制数据。如何解释和可视化这些数据由您决定：'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Checking for data types is pretty easy. Here is how we can display a string
    response:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据类型非常简单。以下是如何显示字符串响应的方法：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We'll learn more about the supported data types in [Chapter 4](ch04.html "Chapter 4. Data
    Transfer – Sending, Receiving, and Decoding"), *Data Transfer – Sending, Receiving,
    and Decoding*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第4章](ch04.html "第4章。数据传输-发送、接收和解码")中了解更多关于支持的数据类型，*数据传输-发送、接收和解码*
- en: onclose
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: onclose
- en: The `onclose` event marks the end of the conversation. Whenever this event is
    fired, no messages can be transferred between the server and the client unless
    the connection is reopened. A connection might be terminated due to a number of
    reasons. It can be closed by the server, it may be closed by the client using
    the `close()` method, or due to TCP errors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`onclose`事件标志着对话的结束。每当触发此事件时，除非重新打开连接，否则服务器和客户端之间无法传输消息。连接可能由多种原因终止。它可能被服务器关闭，也可能被客户端使用`close()`方法关闭，或者由于TCP错误而关闭。'
- en: You can easily detect the reason the connection was closed by checking the `code`,
    `reason`, and `wasClean` parameters of the event.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检查事件的`code`、`reason`和`wasClean`参数轻松检测连接关闭的原因。
- en: The `code` parameter provides you with a unique number indicating the origin
    of the interruption.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`code`参数为您提供一个唯一的数字，指示中断的来源。'
- en: The `reason` parameter provides the description of the interruption in a string
    format.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`reason`参数以字符串格式提供中断的描述。'
- en: 'Finally, the `wasClean` parameter indicates whether the connection was closed
    due to a server decision or due to unexpected network behavior. The following
    code snippet illustrates the proper usage of the parameters:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`wasClean`参数指示连接是由于服务器决定还是由于意外的网络行为而关闭。以下代码片段说明了参数的正确使用方式：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can find a detailed list of the code values in the appendix of this book.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书附录中找到代码值的详细列表。
- en: onerror
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: onerror
- en: The `onerror` event is fired when something wrong (usually unexpected behavior
    or failure) occurs. Note that `onerror` is always followed by a connection termination,
    which is a close event.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误（通常是意外行为或失败）时，将触发`onerror`事件。请注意，`onerror`事件总是跟随连接终止，即关闭事件。
- en: 'A good practice when something bad happens is to inform the user about the
    unexpected error and probably try to reconnect:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生意外错误时，一个好的做法是通知用户，并可能尝试重新连接：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Actions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作
- en: 'Events are raised when something happens. We make explicit calls to actions
    (or methods) when we want something to happen! The WebSocket protocol supports
    two main actions: `send()` and `close()`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 事件发生时会触发。当我们希望发生某事时，我们会明确调用操作（或方法）！WebSocket协议支持两个主要操作：`send()`和`close()`。
- en: send()
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: send()
- en: 'While a connection is open, you can exchange messages with the server. The
    `send()` method allows you to transfer a variety of data to the web server. Here
    is how we can send a chat message (actually, the contents of the HTML text field)
    to everyone in the chat room:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接打开时，您可以与服务器交换消息。`send()`方法允许您向Web服务器传输各种数据。以下是我们如何向聊天室中的每个人发送聊天消息（实际上是HTML文本字段的内容）：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It's that simple!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单！
- en: 'But wait… The preceding code is not 100 percent correct. Remember that you
    can send messages only if the connection is open. This means that we either need
    to place the `send()` method inside the `onopen` event handler or check the `readyState`
    property. This property returns the state of the WebSocket connection. So, the
    previous snippet should be modified accordingly:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是...前面的代码并不完全正确。请记住，只有在连接打开时才能发送消息。这意味着我们需要将`send()`方法放在`onopen`事件处理程序中，或者检查`readyState`属性。该属性返回WebSocket连接的状态。因此，前面的代码片段应相应地进行修改：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After sending the desired data, you can wait for an interaction from the server
    or close the connection. In our demo example, we leave the connection open, unless
    the stop button is clicked on.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 发送所需数据后，您可以等待服务器的交互或关闭连接。在我们的演示示例中，除非单击停止按钮，否则我们会保持连接开放。
- en: close()
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: close()
- en: The `close()` method stands as a goodbye handshake. It terminates the connection
    and no data can be exchanged unless the connection opens again.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`close()`方法作为告别握手。它终止连接，除非连接再次打开，否则无法交换数据。'
- en: 'Similarly to the previous example, we call the `close()` method when the user
    clicks on the second button:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例类似，当用户单击第二个按钮时，我们调用`close()`方法：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It is also possible to pass the `code` and `reason` parameters we mentioned
    earlier:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以传递我们之前提到的`code`和`reason`参数：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Properties
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: 'The `WebSocket` object exposes some property values that let us understand
    its specific characteristics. We have already met the `readyState` property. Following
    are the rest:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebSocket`对象公开了一些属性值，让我们了解其特定特性。我们已经遇到了`readyState`属性。以下是其余的：'
- en: '| Properties | Description |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `url` | Returns the URL of the WebSocket |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `url` | 返回WebSocket的URL |'
- en: '| `protocol` | Returns the protocol used by the server |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `protocol` | 返回服务器使用的协议 |'
- en: '| `readyState` | Reports the state of the connection and can take one of the
    following self-explanatory values:`WebSocket.OPEN``WebSocket.CLOSED``WebSocket.CONNECTING``WebSocket.CLOSING`
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `readyState` | 报告连接的状态，并可以采用以下自解释的值：`WebSocket.OPEN``WebSocket.CLOSED``WebSocket.CONNECTING``WebSocket.CLOSING`
    |'
- en: '| `bufferedAmount` | Returns the total number of bytes that were queued when
    the `send()` method was called |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `bufferedAmount` | 返回调用`send()`方法时排队的总字节数 |'
- en: '| `binaryType` | Returns the binary data format we received when the `onmessage`
    event was raised |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `binaryType` | 返回`onmessage`事件触发时接收到的二进制数据格式 |'
- en: The complete example
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的示例
- en: Here are the complete HTML and JavaScript files we used. We have omitted the
    stylesheet file in order to keep the main points simple. However, you can download
    the complete source code at [http://pterneas.com/books/websockets/source-code](http://pterneas.com/books/websockets/source-code).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们使用的完整HTML和JavaScript文件。为了保持重点简单，我们省略了样式表文件。但是，您可以在[http://pterneas.com/books/websockets/source-code](http://pterneas.com/books/websockets/source-code)下载完整的源代码。
- en: index.html
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: index.html
- en: 'The complete markup code for our web app page is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们网页应用程序页面的完整标记代码如下：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: chat.js
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: chat.js
- en: 'All the JavaScript code for the chatting functionality is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用于聊天功能的JavaScript代码如下：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What about the server?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器怎么样？
- en: You have probably noticed that we use the `echo.websocket.org` server for this
    demo. This public service simply returns back the data you send. In the next chapter,
    we are going to build our own WebSocket server and develop a true chatting app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们在这个演示中使用了`echo.websocket.org`服务器。这个公共服务简单地返回您发送的数据。在下一章中，我们将构建自己的WebSocket服务器并开发一个真正的聊天应用程序。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built our first WebSocket client application! We introduced
    the `WebSocket` object and explained its various methods, events, and properties.
    We also developed a basic chat client in a few lines of HTML and JavaScript code.
    As you noticed in the current examples, there is only a dummy server which echoes
    the messages. Read on to find out how we you can configure your own WebSocket
    server to do a lot more magic.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了我们的第一个WebSocket客户端应用程序！我们介绍了`WebSocket`对象并解释了它的各种方法、事件和属性。我们还在几行HTML和JavaScript代码中开发了一个基本的聊天客户端。正如您在当前示例中所注意到的，只有一个虚拟服务器回显消息。继续阅读，了解如何配置您自己的WebSocket服务器以实现更多的魔法。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便文件直接通过电子邮件发送给您。
