- en: Chapter 4. Data Transfer – Sending, Receiving, and Decoding
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。数据传输-发送、接收和解码
- en: Modern web development is all about content. No matter what kind of application
    you are building, users will stop using it unless they get what they want. In
    the old days of the web, the content someone could publish on his/her website
    was extremely limited. Nowadays, content is a lot more than static text and images;
    you can exchange messages, watch videos, download programs, and much more. As
    a web developer, you should be able to deliver the desired content in a fast and
    efficient way. The WebSocket protocol supports a variety of transferable data,
    taking the burden to speed the whole process as much as possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网页开发都是关于内容的。无论您正在构建什么样的应用程序，用户都会停止使用它，除非他们得到他们想要的。在早期的网络时代，某人可以在自己的网站上发布的内容非常有限。如今，内容远不止是静态文本和图像；您可以交换消息，观看视频，下载程序等等。作为网页开发人员，您应该能够以快速高效的方式传递所需的内容。WebSocket协议支持各种可传输数据，尽可能地加快整个过程的速度。
- en: In this chapter's demo, you are going to handle image and video data via WebSockets.
    Let's start!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的演示中，您将通过WebSockets处理图像和视频数据。让我们开始吧！
- en: What kinds of data can WebSockets transfer?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebSockets可以传输哪些类型的数据？
- en: The WebSocket protocol supports text and binary data. In JavaScript, text is
    referred to as String, while binary data is represented by the ArrayBuffer and
    Blob classes (the first one is still experimental). Using plain text and binary
    format, you can transfer and decode almost any type of HTML5 media.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket协议支持文本和二进制数据。在JavaScript中，文本称为字符串，而二进制数据由ArrayBuffer和Blob类表示（第一个仍处于实验阶段）。使用纯文本和二进制格式，您可以传输和解码几乎任何类型的HTML5媒体。
- en: 'Always keep in your mind that WebSockets only support one binary format at
    a time and you have to explicitly declare it as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，WebSockets一次只支持一种二进制格式，并且您必须明确声明如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another was to do it is as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Throughout this book, we'll demonstrate specific examples for using each and
    every data type.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将演示使用每种数据类型的具体示例。
- en: String
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: You have already taken a glimpse of transmitting plain text data in the previous
    chapters, where you exchanged simple chat messages. Apart from this, strings are
    tremendously helpful when dealing with human-readable data formats such as **XML**
    and **JSON**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您已经简单了解了传输纯文本数据的情况，其中您交换了简单的聊天消息。除此之外，字符串在处理人类可读的数据格式（如**XML**和**JSON**）时非常有帮助。
- en: Remember that whenever the `onmessage` event is raised, the client needs to
    check the data type and act accordingly. JavaScript can easily determine that
    a data type is of `string` type using the strict equal operator (that is, `===`).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每当`onmessage`事件被触发时，客户端需要检查数据类型并相应地采取行动。JavaScript可以轻松确定数据类型是否为`string`类型，使用严格相等运算符（即`===`）。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you have an average experience with core JavaScript, you''ll probably notice
    that you could have used the following expression instead:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对核心JavaScript有一般的经验，您可能会注意到您可以使用以下表达式代替：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Although this code is pretty valid, it wouldn't work in your case. The reason
    is that the `instanceof` expression requires the object on the left to have been
    created using the JavaScript string constructor. In your case, the data is generated
    from the server, so you can only determine their underlying type instead of their
    JavaScript class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此代码非常有效，但在您的情况下不起作用。原因是`instanceof`表达式要求左侧的对象是使用JavaScript字符串构造函数创建的。在您的情况下，数据是从服务器生成的，因此您只能确定它们的基础类型，而不是它们的JavaScript类。
- en: JSON
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON
- en: '**JSON** (**JavaScript Object Notation**) is a lightweight format for transferring
    human-readable data between computers. It is structured in key-value pairs, usually
    describing properties and values. Due to its efficiency, JSON is the dominant
    format for transferring data between server and client. The most popular RESTful
    APIs, including Facebook, Twitter, and Github, nowadays fully support JSON. Moreover,
    JSON is a subset of JavaScript, so you can parse it immediately without using
    external parsers!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON**（**JavaScript对象表示法**）是一种在计算机之间传输人类可读数据的轻量级格式。它以键值对的形式结构化，通常描述属性和值。由于其高效性，JSON是服务器和客户端之间传输数据的主要格式。如今，包括Facebook、Twitter和Github在内的最流行的RESTful
    API完全支持JSON。此外，JSON是JavaScript的子集，因此您可以立即解析它，而无需使用外部解析器！'
- en: 'Suppose that the web server somehow sends the following JSON string:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Web服务器以某种方式发送了以下JSON字符串：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Obviously, the preceding notation contains two key-value pairs. Guess what?
    In your chat demo, it represents the chat data received from another user. You
    are going to use this information in a few minutes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，前面的表示包含两个键值对。猜猜看？在您的聊天演示中，它代表来自另一个用户的聊天数据。您将在几分钟内使用这些信息。
- en: 'Following code shows how you can handle a JSON object and extract its properties:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何处理JSON对象并提取其属性：
- en: socket.onmessage = function(event) {
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: socket.onmessage = function(event) {
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code is straightforward. Using the `eval` function, you create
    a JSON object from the input string. What `eval` really does is invoke the JavaScript
    compiler and execute the enclosed string arguments. The properties of the generated
    object are the names of the JSON keys and each property holds its corresponding
    value.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码很简单。使用`eval`函数，您可以从输入字符串创建一个JSON对象。`eval`实际上是调用JavaScript编译器并执行封闭的字符串参数。生成对象的属性是JSON键的名称，每个属性都包含其相应的值。
- en: XML
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XML
- en: Similar to JSON, you can parse XML-encoded strings using JavaScript. We won't
    go deeper into XML parsing, as this would be out of this book's scope. Parsing
    XML is not difficult, though it requires different techniques for different browsers
    (**DOMParser** versus **ActiveXObject**). The best method is using a third-party
    library such as **jQuery**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与JSON类似，您可以使用JavaScript解析XML编码的字符串。我们不会深入研究XML解析，因为这超出了本书的范围。解析XML并不困难，尽管它需要不同的技术来处理不同的浏览器（**DOMParser**与**ActiveXObject**）。最好的方法是使用第三方库，比如**jQuery**。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In both XML and JSON cases, the server should send you a string value, not the
    actual XML/JSON file (which would be of binary type, of course)!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在XML和JSON的情况下，服务器应该向您发送一个字符串值，而不是实际的XML/JSON文件（当然是二进制类型的）！
- en: ArrayBuffer
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArrayBuffer
- en: ArrayBuffer contains structured binary data. The key term here is **structured**,
    which means that the enclosed bits are given in an order, so that you can retrieve
    portions of them. In order to manipulate an ArrayBuffer for specific formats,
    you need to create the corresponding `ArrayBufferView` object.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayBuffer包含结构化的二进制数据。关键词在于**结构化**，这意味着封闭的位按顺序给出，因此您可以检索其中的部分。为了针对特定格式操作ArrayBuffer，您需要创建相应的`ArrayBufferView`对象。
- en: 'ArrayBuffers are really handy for storing image files. Suppose that your chat-room
    guests can exchange images by dragging and dropping image files on the chat window.
    Following code explains how JavaScript handles the drop event in HTML5 browsers:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayBuffers非常适用于存储图像文件。假设您的聊天室客人可以通过在聊天窗口上拖放图像文件来交换图像。以下代码解释了JavaScript如何处理HTML5浏览器中的拖放事件：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code snippet, you firstly create an event handler for the drop
    event. The event handler takes one parameter, which lets you access the dropped
    files. You only drop one single image, so you need the zero-indexed file. After
    that, you create a file reader that reads the file's data as an ArrayBuffer. When
    the reader has finished processing the file, you handle the `onload` event where
    you send the image to the web server using your WebSocket.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，您首先为拖放事件创建了一个事件处理程序。事件处理程序接受一个参数，让您访问已放置的文件。您只放置了一个单一的图像，因此您需要零索引文件。之后，您创建一个文件读取器，将文件的数据读取为ArrayBuffer。当读取器完成处理文件时，您处理`onload`事件，其中您使用WebSocket将图像发送到Web服务器。
- en: Learn more about FileReader at [http://www.html5rocks.com/en/tutorials/file/dndfiles/](http://www.html5rocks.com/en/tutorials/file/dndfiles/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://www.html5rocks.com/en/tutorials/file/dndfiles/](http://www.html5rocks.com/en/tutorials/file/dndfiles/)了解更多有关FileReader的信息。
- en: 'The following is a screenshot of the drop effect that raises the send method:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是提高发送方法的拖放效果的屏幕截图：
- en: '![ArrayBuffer](img/6962OS_04_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![ArrayBuffer](img/6962OS_04_01.jpg)'
- en: Dropping an image to the browser and sending it to the server
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像拖放到浏览器并发送到服务器
- en: Receiving data as ArrayBuffers is fairly simple. Note that you check using `instanceof`,
    rather than the strict equal operator.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接收ArrayBuffers数据相当简单。请注意，您使用`instanceof`进行检查，而不是使用严格相等运算符。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Blobs
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blob
- en: '**Blobs** (**Binary Large Objects**) contain totally raw data in their most
    native form. A blob might theoretically be anything, even a non-JavaScript object.
    As a result, interpreting blob data might be quite tricky. As a thumb rule, you''d
    better know exactly what the server is supposed to send, otherwise you''ll need
    to make fairly non-concrete assumptions.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blob**（二进制大对象）以其最原始的形式包含完全原始的数据。理论上，Blob可能是任何东西，甚至是非JavaScript对象。因此，解释Blob数据可能会非常棘手。作为一个经验法则，最好确切地知道服务器应该发送什么，否则您将需要做相当不具体的假设。'
- en: However, the big advantage of blob data is their file size. Binary format is
    machine-level format, so there are almost no abstraction layers used that would
    increase its size.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Blob数据的一个很大的优势是它们的文件大小。二进制格式是机器级格式，因此几乎没有使用会增加其大小的抽象层。
- en: When you transmit multimedia over the web, you need the highest speed possible,
    in order to achieve the best user experience. The WebSocket blobs do not create
    extra burden for your Internet connection and they rely on the client for proper
    interpretation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您通过网络传输多媒体时，您需要尽可能快的速度，以实现最佳的用户体验。WebSocket Blob不会为您的互联网连接增加额外的负担，并且它们依赖客户端进行正确的解释。
- en: 'Following code shows how you can display an incoming image, sent as a set of
    raw bits:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何显示作为一组原始位发送的传入图像：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code snippet generates an image by properly interpreting the incoming
    raw data. You have used some brand-new HTML5 JavaScript methods to easily handle
    the blob. Let's be more specific.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段通过正确解释传入的原始数据生成了图像。您已经使用了一些全新的HTML5 JavaScript方法来轻松处理Blob。让我们更具体一些。
- en: At first, you verify that the server message is an instance of blob, similar
    to the way you checked for the buffered array. Then, you store the raw data to
    a local variable, named `blob`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您验证服务器消息是否是Blob的实例，类似于您检查缓冲数组的方式。然后，您将原始数据存储到一个名为`blob`的本地变量中。
- en: In order to display the blob in an image format, you need to decode it properly.
    The new JavaScript API makes basic image manipulation a piece of cake. Instead
    of reading the bytes, you create a plain URL to the specified data source. This
    URL is alive as long as the HTML document is alive. That means you cannot retrieve
    it after closing your browser window.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以图像格式显示Blob，您需要正确解码它。新的JavaScript API使基本图像操作变得非常简单。您不是读取字节，而是创建一个指定数据源的普通URL。只要HTML文档存在，这个URL就是活动的。这意味着在关闭浏览器窗口后无法检索它。
- en: The `window.URL` property is currently supported in all the major browsers,
    though **Google Chrome** has named it `window.webkitURL`. The `createObjectURL`
    method generates a URL for the temporary file specified as a parameter. You do
    not need to provide any further details or write any further code! JavaScript
    represents the blob you received as a normal browser URL!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.URL`属性目前在所有主要浏览器中都受支持，尽管**Google Chrome**将其命名为`window.webkitURL`。`createObjectURL`方法为指定的临时文件生成URL。您不需要提供任何进一步的细节或编写任何进一步的代码！JavaScript将您收到的Blob表示为正常的浏览器URL！'
- en: Finally, using the DOM manipulation methods you already know, you create an
    image element, you provide it with the new URL, and you insert it right at the
    end of the HTML document.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用您已经了解的DOM操作方法，您创建一个图像元素，为其提供新的URL，并将其插入到HTML文档的末尾。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `createObjectURL` method is supported in Chrome 23+, Firefox 8+, Internet
    Explorer 10+, Opera 16+ and Safari 6+, as well as in their mobile counterparts
    (except IE and Opera).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`createObjectURL`方法在Chrome 23+、Firefox 8+、Internet Explorer 10+、Opera 16+和Safari
    6+以及它们的移动对应版本中都受支持（除了IE和Opera）。'
- en: 'Try it out and you''ll see something like the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 试一下，你会看到类似以下截图的东西：
- en: '![Blobs](img/6962OS_04_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Blob](img/6962OS_04_02.jpg)'
- en: The incoming blob data, displayed as an HTML image
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 显示为HTML图像的传入blob数据
- en: Video streaming
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频流
- en: Many web designers and developers argue that the future of the web is video.
    Until now, video was delivered using third-party plugins and technologies such
    as Flash or Silverlight. Although these technologies worked pretty well on the
    desktop browsers, they required extra software and were a catastrophe (in terms
    of battery life) for mobile and tablet devices. After Apple decided to drop Flash
    support for iPhone and iPad, HTML5 became the only available gate for delivering
    videos and rich graphics over the web.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网页设计师和开发人员认为网络的未来是视频。直到现在，视频是通过第三方插件和技术（如Flash或Silverlight）传递的。尽管这些技术在桌面浏览器上运行得很好，但它们需要额外的软件，并且对移动和平板设备的电池寿命造成了灾难。在苹果决定停止iPhone和iPad对Flash的支持之后，HTML5成为了通过网络传递视频和丰富图形的唯一可用途径。
- en: In terms of WebSockets, it makes sense to stream video across different clients
    using a fast and efficient way. Live video streaming is currently supposed to
    be one of the last reasons Flash is still alive. Let's see how you can stream
    live video data from the server to the clients in the WebSocket way.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就WebSockets而言，使用快速高效的方式在不同客户端之间流式传输视频是有意义的。实时视频流目前被认为是Flash仍然存在的最后原因之一。让我们看看如何可以通过WebSocket方式从服务器向客户端流式传输实时视频数据。
- en: A video is nothing more than a collection of consecutive images. Each of these
    images is called a **frame**. When a number of frames (usually more than 20) are
    displayed per second, the human eye cannot distinguish the distinct images and
    thinks of it like a continuous flow. That's the technique you are going to use
    for streaming a video file from the server to the clients.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 视频只不过是一系列连续的图像。每个图像被称为**帧**。当每秒显示多个帧（通常超过20帧）时，人眼无法区分这些图像，会认为是连续的流。这就是你要用来从服务器向客户端流式传输视频文件的技术。
- en: 'The server sends 20 or more frames (images) per second, so that the client
    is constantly awaiting for new messages. Remember the code you wrote for displaying
    images? Well, in a real-time video stream context, you do not need to store the
    data as URLs until the web page is closed. Rather, it''s a good practice to dispose
    the frame URLs when you do not use them any more. Also, there is no need to create
    the `<img>` element using JavaScript, as you can place it in our markup:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器每秒发送20帧或更多帧（图像），因此客户端不断等待新消息。还记得你为显示图像编写的代码吗？在实时视频流上下文中，你不需要将数据存储为URL，直到网页关闭。相反，当你不再使用它们时，最好将帧URL丢弃。此外，无需使用JavaScript创建`<img>`元素，因为你可以将它放在我们的标记中：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '…and create a reference in your JavaScript code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '...并在你的JavaScript代码中创建一个引用：'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So, here is the modified onmessage client event, which will be raised 20 or
    more times per second:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是修改后的onmessage客户端事件，每秒将被触发20次或更多次：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code is similar to the one you used to drop an image on the HTML document.
    There are two things to notice:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与您用来在HTML文档中放置图像的代码类似。有两件事需要注意：
- en: You have created a reference for the `<img>` element, in order to constantly
    modify its `src` property.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经为`<img>`元素创建了一个引用，以便不断修改它的`src`属性。
- en: After every `src` assignment, you release the image by calling the `revokeObjectURL`
    function. This function cleans up the memory assigned to the specified URL, and
    lets the browser know it doesn't need to keep the URL's reference any more.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次`src`赋值之后，通过调用`revokeObjectURL`函数释放图像。这个函数清理分配给指定URL的内存，并让浏览器知道它不需要再保留URL的引用了。
- en: 'The following screenshot shows video streaming using consecutive frames:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用连续帧进行视频流传输：
- en: '![Video streaming](img/6962OS_04_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![视频流](img/6962OS_04_03.jpg)'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although it makes the point, this might not be the optimal way to stream video.
    For a more professional approach, have a look at WebRTC ([http://www.webrtc.org](http://www.webrtc.org)),
    a great multimedia development API, implemented by Google, Mozilla, and Opera.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它表达了观点，但这可能不是流式传输视频的最佳方式。为了更专业的方法，看看WebRTC（[http://www.webrtc.org](http://www.webrtc.org)），这是一个由谷歌、Mozilla和Opera实现的出色的多媒体开发API。
- en: Putting it all together
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有东西放在一起
- en: You might be wondering where is the server code that handles the requests, receives
    the images, and updates the video frames. We deliberately left out the server-side
    part in order to focus on the client-side JavaScript code. For the purposes of
    our chat demo web app, we'll now show you both the client and the server code.
    Once more, note that you can use the programming language and frameworks of your
    choice to implement the WebSocket server.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道处理请求、接收图像并更新视频帧的服务器端代码在哪里。我们故意留出了服务器端部分，以便专注于客户端JavaScript代码。对于我们的聊天演示Web应用程序，我们现在将向您展示客户端和服务器端代码。再次注意，您可以使用您选择的编程语言和框架来实现WebSocket服务器。
- en: Let's have a close look at the new parts you'll implement.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看你将要实现的新部分。
- en: Sending the nickname and message using JSON
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JSON发送昵称和消息
- en: At first, you'll add one more text field to the HTML document, in order for
    the user to type his/her preferred nickname. You'll send the nickname along with
    the text message by encoding them in JSON format.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在HTML文档中添加一个文本字段，以便用户输入他/她喜欢的昵称。你将通过以JSON格式对它们进行编码，将昵称和文本消息发送出去。
- en: 'Add a new text input just before the message input:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在消息输入框之前添加一个新的文本输入：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, create a reference to the JavaScript code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在JavaScript代码中创建一个引用：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And finally, send the nickname and the message to the server, as you did a few
    pages ago!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，像几页前一样，将昵称和消息发送到服务器！
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The server now needs to transmit this message to the clients. Nothing is changed
    from the previous chapter:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器现在需要将这条消息传输给客户端。与上一章相比，没有任何改变：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The clients decode the JSON string and display the message accordingly. You
    have added a prettier presentation style for showing the text in the chat area.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端解码JSON字符串并相应地显示消息。您已为在聊天区域显示文本添加了更漂亮的呈现样式。
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Sending images to the server
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图像发送到服务器
- en: 'Remember the `ondrop` event we discussed previously? For consistency reasons,
    here is the same functionality using Blobs instead of ArrayBuffers:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们之前讨论过的`ondrop`事件吗？出于一致性原因，这里使用Blob而不是ArrayBuffers实现了相同的功能：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When dealing with HTML5 drag-and-drop, remember to always prevent the default
    drag-and-drop behavior! Unless you explicitly define that you want to override
    the default functionality, whatever you implement will not be shown correctly.
    Fortunately, preventing the predefined actions from happening is quite simple:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 处理HTML5拖放时，记住始终要阻止默认的拖放行为！除非您明确定义要覆盖默认功能，否则您实现的任何内容都不会显示正确。幸运的是，阻止预定义的操作发生非常简单：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The server needs to distribute the blob image to all the clients. `Fleck` library
    introduces the `OnBinary` event, which is raised when binary data is received:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器需要将blob图像分发给所有客户端。`Fleck`库引入了`OnBinary`事件，当接收到二进制数据时会触发。
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The method works similar to the `OnMessage` method. The only difference is that
    it takes a byte array (data) instead of string as a parameter. An array of bytes
    is the most native and efficient image representation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法与`OnMessage`方法类似。唯一的区别是它以字节数组（数据）而不是字符串作为参数。字节数组是最本地和高效的图像表示。
- en: 'When the rest of the clients receive the image, a new `<img>` element will
    be created. You have already seen the way, so you update the `onmessage` function
    accordingly:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当其余客户端接收到图像时，将创建一个新的`<img>`元素。您已经看到了方法，所以相应地更新`onmessage`函数：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you had a detailed look at the various data formats the WebSocket
    protocol supports. You implemented various examples using string and binary data
    (text, images, and videos), found out how you can properly encode and decode the
    client-side data, and finally extended the chat demo to manipulate images and
    videos. The next chapter discusses security considerations over the web that will
    make your apps even more robust.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您详细了解了WebSocket协议支持的各种数据格式。您使用字符串和二进制数据（文本、图像和视频）实现了各种示例，找出了如何正确地对客户端数据进行编码和解码，最后扩展了聊天演示以操纵图像和视频。下一章将讨论网络上的安全考虑，这将使您的应用程序更加健壮。
