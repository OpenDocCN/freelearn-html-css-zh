- en: Chapter 6. Error Handling and Fallbacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。错误处理和备用方案
- en: By now, you must be familiar with the WebSocket capabilities and must have got
    an idea of the power of full-duplex communication. However, the WebSocket goodies
    are built on top of HTML5 and depend strongly on the browsers for full support.
    What happens when the features you want to implement are not supported by the
    means your audience is using? Would you let your customers leave? That doesn't
    sound like a good idea. Fortunately, with a little bit of extra effort, you can
    implement, mimic, and mostly emulate, the WebSocket behavior.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您一定熟悉了WebSocket的功能，并且对全双工通信的强大有了一定的了解。然而，WebSocket的好处是建立在HTML5之上的，并且在很大程度上依赖于浏览器的全面支持。当您想要实现的功能不受受众使用的手段支持时会发生什么？您会让您的客户离开吗？这听起来不是一个好主意。幸运的是，通过一点额外的努力，您可以实现、模仿并大部分模拟WebSocket的行为。
- en: WebSocket is the future-friendly way to go, but you'll need some fallback techniques
    in order to support the widest audience possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket是未来友好的方式，但为了支持尽可能广泛的受众，您需要一些备用技术。
- en: Error handling
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: When it comes to error handling, you have to take both internal and external
    parameters into account. Internal parameters include errors that can be generated
    because of the bugs in your code, or an unexpected user behavior. External errors
    have nothing to do with the application; rather, they are related to parameters
    you have no control on. The most important one is the network connectivity. Any
    interactive bidirectional web application requires, well, an active Internet connection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理错误时，您必须考虑内部和外部参数。内部参数包括由于代码中的错误或意外的用户行为而产生的错误。外部错误与应用程序无关，而是与您无法控制的参数相关。最重要的是网络连接。任何交互式的双向网络应用程序都需要一个活动的互联网连接。
- en: Checking network availability
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查网络可用性
- en: Imagine that your users are enjoying your web app, when suddenly the network
    connection becomes unresponsive in the middle of their task. In modern native
    desktop and mobile applications, it is a common task to check for network availability.
    The most common way of doing so is simply making an HTTP request to a website
    that is supposed to be up (for example, [http://www.google.com](http://www.google.com)).
    If the request succeeds, the desktop or mobile device knows there is active connectivity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您的用户正在享受您的Web应用程序，突然在他们的任务中间，网络连接变得无响应。在现代原生桌面和移动应用程序中，检查网络可用性是一项常见的任务。最常见的方法是简单地向一个应该处于活动状态的网站（例如[http://www.google.com](http://www.google.com)）发出HTTP请求。如果请求成功，桌面或移动设备就知道有活动的连接。
- en: 'Similarly, HTML has `XMLHttpRequest` for determining network availability.
    HTML5, though, made it even easier and introduced a way to check whether the browser
    can accept web responses. This is achieved via the navigator object:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，HTML有`XMLHttpRequest`用于确定网络可用性。不过，HTML5使得这更加容易，并引入了一种检查浏览器是否能接受Web响应的方法。这是通过navigator对象实现的：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Offline mode means that either the device is not connected or the user has selected
    the offline mode from his/her browser toolbar.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 离线模式意味着设备未连接或用户从浏览器工具栏中选择了离线模式。
- en: 'Here is how to inform the user that the network is not available and try to
    reconnect when a WebSocket close event occurs:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在WebSocket关闭事件发生时通知用户网络不可用并尝试重新连接的方法：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code is pretty simple. It checks the error code to determine whether
    the WebSocket connection was closed successfully. Error code 1000 would determine
    exactly this. If the close event was raised due to an error, the code would not
    be 1000\. In this case, the code checks for connectivity and informs the user
    appropriately.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码非常简单。它检查错误代码以确定WebSocket连接是否已成功关闭。错误代码1000将确定这一点。如果关闭事件是由于错误而引发的，代码将不是1000。在这种情况下，代码会检查连接性并适当地通知用户。
- en: 'You might notice that this is an HTML5 feature. Later, we will discuss polyfills,
    so the following are two polyfills for checking network connectivity:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到这是一个HTML5功能。稍后，我们将讨论polyfills，以下是两个用于检查网络连接性的polyfills：
- en: '[https://github.com/remy/polyfills/blob/master/offline-events.js](https://github.com/remy/polyfills/blob/master/offline-events.js)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/remy/polyfills/blob/master/offline-events.js](https://github.com/remy/polyfills/blob/master/offline-events.js)'
- en: '[http://nouincolor.com/heyoffline.js/](http://nouincolor.com/heyoffline.js/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://nouincolor.com/heyoffline.js/](http://nouincolor.com/heyoffline.js/)'
- en: The first one is using `XMLHttpRequest`, similar to what Smartphone APIs do.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法是使用`XMLHttpRequest`，类似于智能手机API所做的事情。
- en: Fallback solutions
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备用解决方案
- en: In real life, physical contact is preferred, as it is more direct and efficient,
    but it shouldn't be the only way of meeting someone. There are numerous cases
    where you won't be able to handshake, so you'll need to find other methods of
    communication.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，人们更喜欢进行身体接触，因为这样更直接和高效，但这不应该是认识某人的唯一方式。有很多情况下你无法握手，所以你需要找到其他的沟通方式。
- en: The sad reality of HTML5 is that every browser does not equally support it.
    Especially considering the new JavaScript APIs, major or minor differences still
    exist among different browsers. However, even if the browser vendors decided to
    provide the exact same features for their current releases, there would still
    be people who cannot or do not want to update. According to StatCounter and W3Counter,
    as of March 2013, the lion's share of desktop browsing belongs to Google Chrome,
    followed by Microsoft Internet Explorer and Mozilla Firefox.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5的悲哀现实是，并非每个浏览器都能完全支持它。特别是考虑到新的JavaScript API，不同浏览器之间仍然存在主要或次要的差异。然而，即使浏览器供应商决定为其当前版本提供完全相同的功能，仍然会有人无法或不想更新。根据StatCounter和W3Counter的数据，截至2013年3月，桌面浏览的大部分份额属于Google
    Chrome，其次是Microsoft Internet Explorer和Mozilla Firefox。
- en: Internet Explorer 8 still shares 7 percent, Internet Explorer 7 shares 5 percent,
    and Safari 5.1 shares 3 percent. A total of 15 percent is translated to a number
    of customers you probably do not want to miss.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 8仍占7％，Internet Explorer 7占5％，Safari 5.1占3％。总共15％的份额转化为您可能不想错过的客户数量。
- en: Here come the fallback solutions, which can handle such situations and provide
    a gracefully scaled-down experience to the users of older browsers. There are
    two kinds of popular fallbacks nowadays, **Plugins** (such as Flash or Silverlight)
    and **JavaScript hacks**, formally known as **polyfills**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是备用解决方案，可以处理这种情况，并为旧版浏览器的用户提供一个优雅的缩减体验。如今有两种流行的备用方案，**插件**（如Flash或Silverlight）和**JavaScript
    hacks**，正式称为**polyfills**。
- en: JavaScript polyfills
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript polyfills
- en: We start by examining polyfills, as they are more close to the native web. JavaScript
    polyfills are solutions and libraries that mimic a future feature, by providing
    support for older browsers. Currently, there are polyfill solutions for almost
    all HTML5-specific feature (**canvas**, **storage**, **geolocation**, **WebSockets**,
    **CSS3**, and so on).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来研究polyfills，因为它们更接近原生网络。JavaScript polyfills是模拟未来功能的解决方案和库，通过为旧版浏览器提供支持来实现。目前，几乎所有HTML5特定功能（如canvas、storage、geolocation、WebSockets、CSS3等）都有polyfill解决方案。
- en: A polyfill solution should be used in parallel to the standards-based, HTML5-compliant
    API.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应该并行使用polyfill解决方案和基于标准的、符合HTML5的API。
- en: 'If you need to implement both an HTML5 and a polyfill solution, why not just
    implement the second one and save time and money? Well, here are four reasons
    you should use both:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要同时实现HTML5和polyfill解决方案，为什么不只实现第二个并节省时间和金钱呢？好吧，以下是您应该同时使用两者的四个原因：
- en: 'Better user experience: When using HTML5, you serve your visitors the best
    and smoothest experience possible. Everything is handled by the browser, and you
    only need to focus on your application''s requirements. When using a polyfill
    to address a specific issue, the end-product cannot be of the same quality. Surely,
    delivering something is better than delivering nothing, but a polyfill is just
    a patch for those who run poorer vehicles.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更好的用户体验：使用HTML5时，您为访问者提供了最佳和最顺畅的体验。一切都由浏览器处理，您只需专注于应用程序的需求。使用polyfill来解决特定问题时，最终产品无法达到相同的质量。当然，提供一些东西总比什么都不提供要好，但是polyfill只是为那些运行较差的浏览器打补丁。
- en: 'Performance: The most significant advantage between a native HTML5 solution
    and a polyfill plugin, is performance. When you request a JavaScript file, you
    require extra resources, which increase loading time. Moreover, a JavaScript plugin
    runs way slower than a native browser-implemented method. Regarding WebSockets,
    the protocol is designed to provide bidirectional full-duplex communication. That
    is the fastest way you can achieve this kind of staff. What a polyfill can do
    is to simply mimic full-duplex communication, using traditional **AJAX polling**.
    We have already seen that AJAX polling is way slower than WebSockets.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能：原生HTML5解决方案和polyfill插件之间最显著的优势是性能。当您请求JavaScript文件时，您需要额外的资源，这会增加加载时间。此外，JavaScript插件的运行速度远远慢于原生浏览器实现的方法。关于WebSockets，该协议旨在提供双向全双工通信。这是您可以实现这种类型的最快方式。而polyfill所能做的就是简单地模拟全双工通信，使用传统的AJAX轮询。我们已经看到AJAX轮询比WebSockets慢得多。
- en: 'Future-friendly: Using HTML5 right now lets your website or app to be automatically
    enhanced from any future browser update. For example, someone who used canvas
    three years ago, benefitted automatically when Internet Explorer was updated to
    Version 9.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 面向未来：现在使用HTML5可以让您的网站或应用程序在任何未来的浏览器更新中自动增强。例如，三年前使用canvas的人在Internet Explorer更新到第9版时自动受益。
- en: 'Standards-friendly: Although content, not web standards, should be our top
    priority, it is good to know that our current implementation consorts with the
    formal technical specifications. Moreover, the web standards propose what is known
    as "best practices". Although polyfills usually consist of valid JavaScript code,
    most of the time they need to address browser-specific bugs and inconsistencies
    by inserting necessary non-standard code.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 符合标准：尽管内容而不是网络标准应该是我们的首要任务，但了解我们当前的实现是否符合正式的技术规范也是好的。此外，网络标准提出了所谓的“最佳实践”。尽管polyfills通常由有效的JavaScript代码组成，但大多数时候它们需要通过插入必要的非标准代码来解决特定浏览器的错误和不一致性。
- en: Popular polyfills
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流行的polyfills
- en: '**Modernizr**, a well-known library for detecting HTML5 and CSS3 features,
    provides a great list of HTML5 polyfills that can make your life much easier when
    it comes to supporting older browsers. Regardless of which HTML5 feature you are
    using, there is a corresponding polyfill available at [https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Modernizr**，一个用于检测HTML5和CSS3功能的知名库，提供了一系列HTML5 polyfills的列表，可以在支持旧版浏览器时让您的生活更加轻松。无论您使用哪种HTML5功能，都可以在[https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills)找到相应的polyfill。'
- en: 'Regarding WebSockets, following are a some of the libraries that mimic the
    WebSocket behavior:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关于WebSockets，以下是一些模拟WebSocket行为的库：
- en: '| Name | Hyperlink |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 超链接 |'
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| SockJS | [https://github.com/sockjs/sockjs-client](https://github.com/sockjs/sockjs-client)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| SockJS | [https://github.com/sockjs/sockjs-client](https://github.com/sockjs/sockjs-client)
    |'
- en: '| socket.io | [http://socket.io/](http://socket.io/) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| socket.io | [http://socket.io/](http://socket.io/) |'
- en: '| Kaazing WebSocket Gateway | [http://kaazing.com/products/kaazing-websocket-gateway.html](http://kaazing.com/products/kaazing-websocket-gateway.html)
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Kaazing WebSocket Gateway | [http://kaazing.com/products/kaazing-websocket-gateway.html](http://kaazing.com/products/kaazing-websocket-gateway.html)
    |'
- en: '| web-socket-js | [http://github.com/gimite/web-socket-js/](http://github.com/gimite/web-socket-js/)
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| web-socket-js | [http://github.com/gimite/web-socket-js/](http://github.com/gimite/web-socket-js/)
    |'
- en: '| Atmosphere | [http://jfarcand.wordpress.com/2010/06/15/using-atmospheres-jquery-plug-in-to-build-applicationsupporting-both-websocket-and-comet/](http://jfarcand.wordpress.com/2010/06/15/using-atmospheres-jquery-plug-in-to-build-applicationsupporting-both-websocket-and-comet/)
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Atmosphere | [http://jfarcand.wordpress.com/2010/06/15/using-atmospheres-jquery-plug-in-to-build-applicationsupporting-both-websocket-and-comet/](http://jfarcand.wordpress.com/2010/06/15/using-atmospheres-jquery-plug-in-to-build-applicationsupporting-both-websocket-and-comet/)
    |'
- en: '| Graceful WebSocket | [https://github.com/ffdead/jquery-graceful-websocket](https://github.com/ffdead/jquery-graceful-websocket)
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Graceful WebSocket | [https://github.com/ffdead/jquery-graceful-websocket](https://github.com/ffdead/jquery-graceful-websocket)
    |'
- en: '| Portal | [https://github.com/flowersinthesand/portal](https://github.com/flowersinthesand/portal)
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| Portal | [https://github.com/flowersinthesand/portal](https://github.com/flowersinthesand/portal)
    |'
- en: '| DataChannel | [https://github.com/piranna/DataChannel-polyfill](https://github.com/piranna/DataChannel-polyfill)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| DataChannel | [https://github.com/piranna/DataChannel-polyfill](https://github.com/piranna/DataChannel-polyfill)
    |'
- en: Except Kaazing, all of the above libraries are open-source and free to use.
    Some of these libraries use the AJAX approach, while others rely on Flash, in
    order to emulate the WebSocket behavior.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Kaazing，以上所有库都是开源的，可以免费使用。其中一些库使用AJAX方法，而其他一些依赖Flash来模拟WebSocket的行为。
- en: Here is an example using the Graceful WebSocket library. We chose Graceful WebSocket
    because it is simple, lightweight, makes no use of Flash, and exposes functionality
    similar to the WebSocket API.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Graceful WebSocket库的示例。我们选择了Graceful WebSocket，因为它简单，轻量级，不使用Flash，并且暴露了类似于WebSocket
    API的功能。
- en: 'First of all, download the library, along with jQuery, and include them in
    your project:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下载该库以及jQuery，并将它们包含在您的项目中：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Structure your document as you would normally do and simply replace any reference
    to the WebSocket native class with the `gracefulWebSocket` once!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 像平常一样构建您的文档，并只需一次将对WebSocket原生类的任何引用替换为`gracefulWebSocket`即可。
- en: 'Replace this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 替换这个：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'with this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is that simple! The rest of the WebSocket events and methods remain the
    same:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单！其余的WebSocket事件和方法保持不变：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Sending data is equally easy and can be done as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 发送数据同样简单，可以按以下方式进行：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In normal mode, the preceding lines of code simply wrap the WebSocket object
    and execute the native methods. In fallback mode, the library changes the protocol
    from WS to HTTP, listens for messages by making HTTP GET requests, and sends messages
    using HTTP POST requests.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常模式下，上述代码的前几行简单地包装了WebSocket对象并执行原生方法。在回退模式下，该库将协议从WS更改为HTTP，通过进行HTTP GET请求来监听消息，并使用HTTP
    POST请求发送消息。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The specific polyfill solution only required a minor change to our code. Other
    solutions might need you to make a lot of modifications or only work with specific
    server back-ends. You need to pay close attention to the requirements of each
    plugin, its usage, and documentation before using it for production.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的polyfill解决方案只需要对我们的代码进行轻微修改。其他解决方案可能需要您进行大量修改，或者只能与特定的服务器后端一起使用。在将其用于生产之前，您需要密切关注每个插件的要求、使用方法和文档。
- en: Browser plugins
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器插件
- en: Browser plugins have been an extremely helpful solution for rich Internet applications
    in the pre-HTML5 era. To name but a few, developers used to offer desktop-rich
    functionality in their websites utilizing the capabilities of Flash (primarily),
    Silverlight, or Java. A few years ago, basic UX effects, transitions, and animations
    could not be made using plain HTML, CSS, or JavaScript.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5之前的富互联网应用程序中，浏览器插件是一个非常有用的解决方案。举几个例子，开发人员过去通常利用Flash（主要是）、Silverlight或Java的功能，在其网站上提供桌面丰富的功能。几年前，基本的UX效果、过渡和动画无法使用纯HTML、CSS或JavaScript来实现。
- en: To fill this gap, browser plugins provided the developers with a framework which
    could be installed in the client browser and allowed richer content.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填补这一空白，浏览器插件为开发人员提供了一个可以安装在客户端浏览器中的框架，并允许更丰富的内容。
- en: Browser plugins have several drawbacks that make them deprecated day-by-day.
    They are resource-intensive, the user needs to wait more until a page is fully
    loaded, and they are mostly based on proprietary technologies. As a result, more
    and more companies (including Apple and Microsoft) are shifting away from browser
    plugins in favor of HTML5.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器插件有一些缺点，使它们日益被淘汰。它们占用资源多，用户需要等待更长时间才能完全加载页面，而且它们大多基于专有技术。因此，越来越多的公司（包括苹果和微软）正在摒弃浏览器插件，转而支持HTML5。
- en: However, if your users browse using an old browser, it is likely that they have
    an old desktop PC with one or more such browser plugins installed. Some great
    WebSocket implementations use Flash in order to achieve bidirectional communication,
    and so do some of the polyfills mentioned previously.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的用户使用旧版浏览器，他们很可能在旧的台式电脑上安装了一个或多个这样的浏览器插件。一些出色的WebSocket实现使用Flash来实现双向通信，之前提到的一些polyfill也是如此。
- en: The **websocket-as**, available at [https://github.com/y8/websocket-as](https://github.com/y8/websocket-as),
    is a popular utility, written in ActionScript, which implements a WebSocket API
    like the HTML5 approach. A similar example exists for Microsoft's Silverlight
    and WCF technologies too ([http://www.codeproject.com/Articles/220350/Super-WebSockets-WCF-Silverlight-5](http://www.codeproject.com/Articles/220350/Super-WebSockets-WCF-Silverlight-5)).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**websocket-as**，可在[https://github.com/y8/websocket-as](https://github.com/y8/websocket-as)找到，是一个流行的实用程序，用ActionScript编写，实现了类似HTML5方法的WebSocket
    API。Microsoft的Silverlight和WCF技术也有类似的例子([http://www.codeproject.com/Articles/220350/Super-WebSockets-WCF-Silverlight-5](http://www.codeproject.com/Articles/220350/Super-WebSockets-WCF-Silverlight-5))。'
- en: If you are familiar with Flash or Silverlight, then you could implement a fallback
    solution based on your preferred browser plugin. Otherwise, you can stick to the
    JavaScript implementations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉Flash或Silverlight，那么您可以基于您喜欢的浏览器插件实现一个回退解决方案。否则，您可以坚持使用JavaScript实现。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Not all browsers support the WebSocket protocol natively. As a result, you need
    to provide some fallback solutions for those users who cannot sense the HTML5
    goodies. Fortunately, the open-source community has provided us with various techniques,
    which emulate the WebSockets' features using plain HTTP or Flash internally. Implementing
    both the HTML5 and the fallback is critical for your web apps and is strongly
    related to the audience width you want to reach. In this chapter, we examined
    some popular fallback techniques and saw how to handle common connectivity errors
    in your WebSocket applications. That's all you need to know for the WebSocket
    and HTML part. In the last chapter, we are going to examine the WebSocket protocol
    in terms of native mobile experience.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有浏览器都原生支持WebSocket协议。因此，您需要为那些无法感知HTML5好处的用户提供一些备用解决方案。幸运的是，开源社区为我们提供了各种技术，使用纯HTTP或Flash内部模拟WebSockets的功能。实现HTML5和备用方案对于您的Web应用程序至关重要，并且与您想要触及的受众范围密切相关。在本章中，我们研究了一些流行的备用技术，并了解了如何处理WebSocket应用程序中的常见连接错误。这就是您需要了解的关于WebSocket和HTML部分的内容。在最后一章中，我们将从本地移动体验的角度来研究WebSocket协议。
