["```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n    ```", "```js\n        context.rect(canvas.width / 2 - 100, canvas.height / 2 - 50, 200, 100);\n        context.fillStyle = \"#8ED6FF\";\n        context.fill();\n        context.lineWidth = 5;\n        context.strokeStyle = \"black\";\n        context.stroke();\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\ncontext.rect(x,y,width,height);\n```", "```js\ncontext.fillRect(x,y,width,height);\n```", "```js\ncontext.strokeRect(x,y,width,height);\n```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n    ```", "```js\n        context.arc(canvas.width / 2, canvas.height / 2, 70, 0, 2 * Math.PI, false);\n        context.fillStyle = \"#8ED6FF\";\n        context.fill();\n        context.lineWidth = 5;\n        context.strokeStyle = \"black\";\n        context.stroke();\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\ncontext.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n```", "```js\n    function drawTriangle(context, x, y, triangleWidth, triangleHeight, fillStyle){\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x + triangleWidth / 2, y + triangleHeight);\n        context.lineTo(x - triangleWidth / 2, y + triangleHeight);\n        context.closePath();\n        context.fillStyle = fillStyle;\n        context.fill();\n    }\n    ```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n\n        var grd;\n        var triangleWidth = 150;\n        var triangleHeight = 150;\n        var triangleY = canvas.height / 2 - triangleWidth / 2;\n    ```", "```js\n        // color fill (left)\n        drawTriangle(context, canvas.width * 1 / 5, triangleY, triangleWidth, triangleHeight, \"blue\");\n    ```", "```js\n        // linear gradient fill (second from left)\n        grd = context.createLinearGradient(canvas.width * 2 / 5, triangleY, canvas.width * 2 / 5, triangleY + triangleHeight);\n        grd.addColorStop(0, \"#8ED6FF\"); // light blue\n        grd.addColorStop(1, \"#004CB3\"); // dark blue\n        drawTriangle(context, canvas.width * 2 / 5, triangleY, triangleWidth, triangleHeight, grd);\n    ```", "```js\n        // radial gradient fill (second from right)\n        var centerX = (canvas.width * 3 / 5 +\n        (canvas.width * 3 / 5 - triangleWidth / 2) +\n        (canvas.width * 3 / 5 + triangleWidth / 2)) / 3;\n\n        var centerY = (triangleY +\n        (triangleY + triangleHeight) +\n        (triangleY + triangleHeight)) / 3;\n\n        grd = context.createRadialGradient(centerX, centerY, 10, centerX, centerY, 100);\n        grd.addColorStop(0, \"red\");\n        grd.addColorStop(0.17, \"orange\");\n        grd.addColorStop(0.33, \"yellow\");\n        grd.addColorStop(0.5, \"green\");\n        grd.addColorStop(0.666, \"blue\");\n        grd.addColorStop(1, \"violet\");\n        drawTriangle(context, canvas.width * 3 / 5, triangleY, triangleWidth, triangleHeight, grd);\n    ```", "```js\n        // pattern fill (right)\n        var imageObj = new Image();\n        imageObj.onload = function(){\n            var pattern = context.createPattern(imageObj, \"repeat\");\n            drawTriangle(context, canvas.width * 4 / 5, triangleY, triangleWidth, triangleHeight, pattern);\n        };\n        imageObj.src = \"wood-pattern.png\";\n    }; \n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\ncontext.closePath();\n```", "```js\nvar grd=context.createLinearGradient(startX,startY,endX,endY);\n```", "```js\ngrd.addColorStop(offset,color);\n```", "```js\nvar grd=context.createRadialGradient(startX,startY,\n   startRadius,endX,endY,endRadius);\n```", "```js\nvar pattern=context.createPattern(imageObj, repeatOption);\n```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n    ```", "```js\n        var startX = 200;\n        var startY = 100;\n\n      // draw cloud shape\n        context.beginPath(); \n        context.moveTo(startX, startY);\n        context.bezierCurveTo(startX - 40, startY + 20, startX - 40, startY + 70, startX + 60, startY + 70);\n        context.bezierCurveTo(startX + 80, startY + 100, startX + 150, startY + 100, startX + 170, startY + 70);\n        context.bezierCurveTo(startX + 250, startY + 70, startX + 250, startY + 40, startX + 220, startY + 20);\n        context.bezierCurveTo(startX + 260, startY - 40, startX + 200, startY - 50, startX + 170, startY - 30);\n        context.bezierCurveTo(startX + 150, startY - 75, startX + 80, startY - 60, startX + 80, startY - 30);\n        context.bezierCurveTo(startX + 30, startY - 75, startX - 20, startY - 60, startX, startY);\n        context.closePath();\n    ```", "```js\n      //add a radial gradient\n        var grdCenterX = 260;\n        var grdCenterY = 80;\n        var grd = context.createRadialGradient(grdCenterX, grdCenterY, 10, grdCenterX, grdCenterY, 200);\n        grd.addColorStop(0, \"#8ED6FF\"); // light blue\n        grd.addColorStop(1, \"#004CB3\"); // dark blue\n        context.fillStyle = grd;\n        context.fill();\n    ```", "```js\n      // set the line width and stroke color\n        context.lineWidth = 5;\n        context.strokeStyle = \"#0000ff\";\n        context.stroke();\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\"> \n    </canvas>\n    ```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n    ```", "```js\n        // draw rectangle\n        context.beginPath();\n        context.rect(240, 30, 130, 130);\n        context.fillStyle = \"blue\";\n        context.fill();\n    ```", "```js\n        // draw circle\n        context.globalAlpha = 0.5; // set global alpha\n        context.beginPath();\n        context.arc(359, 150, 70, 0, 2 * Math.PI, false);\n        context.fillStyle = \"red\";\n        context.fill();\n    }; \n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\ncontext.globalAlpha=[value]\n```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n    ```", "```js\n        // draw rectangle\n        context.beginPath();\n        context.rect(150, 30, 130, 130);\n        context.fillStyle = \"blue\";\n        context.fill();\n    ```", "```js\n        // wrap circle drawing code with save-restore combination\n        context.save();\n        context.globalAlpha = 0.5; // set global alpha\n        context.beginPath();\n        context.arc(canvas.width / 2, canvas.height / 2, 70, 0, 2 * Math.PI, false);\n        context.fillStyle = \"red\";\n        context.fill();\n        context.restore();\n    ```", "```js\n        // draw another rectangle\n        context.beginPath();\n        context.rect(canvas.width - (150 + 130), canvas.height - (30 + 130), 130, 130);\n        context.fillStyle = \"green\";\n        context.fill();\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n\n    ```", "```js\n    /* select the div child element of the body */\n    body > div {\n        width: 680px;\n        height: 430px;\n        border: 1px solid black;\n        float: left;\n        overflow: hidden;\n    }\n\n    canvas {\n        float: left;\n        margin-top: 30px;\n    }\n\n    div {\n        font-size: 11px;\n        font-family: verdana;\n        height: 15px;\n        float: left;\n      width: 160px;\n    }\n\n    /* select the 1st, 5th, and 9th label div */\n    body > div > div:nth-of-type(4n+1) {\n        margin-left: 40px;\n    }\n    ```", "```js\n    window.onload = function(){\n        var squareWidth = 55;\n        var circleRadius = 35;\n        var rectCircleDistX = 50;\n        var rectCircleDistY = 50;\n    ```", "```js\n        // define an array of composite operations\n        var operationArray = [];\n        operationArray.push(\"source-atop\"); // 0\n        operationArray.push(\"source-in\"); // 1\n        operationArray.push(\"source-out\"); // 2\n        operationArray.push(\"source-over\"); // 3\n        operationArray.push(\"destination-atop\"); // 4\n        operationArray.push(\"destination-in\"); // 5\n        operationArray.push(\"destination-out\"); // 6\n        operationArray.push(\"destination-over\"); // 7\n        operationArray.push(\"lighter\"); // 8\n        operationArray.push(\"xor\"); // 9\n        operationArray.push(\"copy\"); // 10\n    ```", "```js\n        // draw each of the eleven operations\n        for (var n = 0; n < operationArray.length; n++) {\n            var thisOperation = operationArray[n];\n            var canvas = document.getElementById(thisOperation);\n            var context = canvas.getContext(\"2d\");\n\n            // draw rectangle\n            context.beginPath();\n            context.rect(40, 0, squareWidth, squareWidth);\n            context.fillStyle = \"blue\";\n            context.fill();\n\n            // set the global composite operation\n            context.globalCompositeOperation = thisOperation;\n\n            // draw circle\n            context.beginPath();\n            context.arc(40 + rectCircleDistX, rectCircleDistY, circleRadius, 0, 2 * Math.PI, false);\n            context.fillStyle = \"red\";\n            context.fill();\n        }\n    };\n    ```", "```js\n    <body>\n        <div>\n            <canvas id=\"source-atop\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"source-in\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"source-out\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"source-over\" width=\"160\" height=\"90\">\n            </canvas>\n            <div>\n                source-atop\n            </div>\n            <div>\n                source-in\n            </div>\n            <div>\n                source-out\n            </div>\n            <div>\n                source-over\n            </div>\n            <canvas id=\"destination-atop\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"destination-in\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"destination-out\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"destination-over\" width=\"160\" height=\"90\">\n            </canvas>\n            <div>\n                destination-atop\n            </div>\n            <div>\n                destination-in\n            </div>\n            <div>\n                destination-out\n            </div>\n            <div>\n                destination-over\n            </div>\n            <canvas id=\"lighter\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"xor\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas id=\"copy\" width=\"160\" height=\"90\">\n            </canvas>\n            <canvas width=\"160\" height=\"90\">\n            </canvas>\n            <div>\n                lighter\n            </div>\n            <div>\n                xor\n            </div>\n            <div>\n                copy\n            </div>\n        </div>\n    </body>\n\n    ```", "```js\ncontext.globalCompositeOperation=[value];\n```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n\n        // gear position\n        var centerX = canvas.width / 2;\n        var centerY = canvas.height / 2;\n\n      // radius of the teeth tips\n        var outerRadius = 95;\n\n      // radius of the teeth intersections\n        var innerRadius = 50;\n\n      // radius of the gear without the teeth\n        var midRadius = innerRadius * 1.6;\n\n      // radius of the hole\n        var holeRadius = 10;\n\n      // num points is the number of points that are required\n      // to make the gear teeth.  The number of teeth on the gear\n      // are equal to half of the number of points.  In this recipe,\n      // we will use 50 points which corresponds to 25 gear teeth.\n        var numPoints = 50;\n    ```", "```js\n\n        // draw gear teeth\n        context.beginPath();\n      // we can set the lineJoinproperty to bevel so that the tips\n      // of the gear teeth are flat and don't come to a sharp point\n        context.lineJoin = \"bevel\";\n\n      // loop through the number of points to create the gear shape\n        for (var n = 0; n < numPoints; n++) {\n            var radius = null;\n\n        // draw tip of teeth on even iterations\n            if (n % 2 == 0) {\n                radius = outerRadius;\n            }\n        // draw teeth connection which lies somewhere between\n        // the gear center and gear radius\n            else {\n                radius = innerRadius;\n            }\n\n            var theta = ((Math.PI * 2) / numPoints) * (n + 1);\n            var x = (radius * Math.sin(theta)) + centerX;\n            var y = (radius * Math.cos(theta)) + centerY;\n\n        // if first iteration, use moveTo() to position\n        // the drawing cursor\n            if (n == 0) {\n                context.moveTo(x, y);\n            }\n        // if any other iteration, use lineTo() to connect sub paths\n            else {\n                context.lineTo(x, y);\n            }\n        }\n\n        context.closePath();\n\n      // define the line width and stroke color\n        context.lineWidth = 5;\n        context.strokeStyle = \"#004CB3\";\n        context.stroke();\n    ```", "```js\n        // draw gear body\n        context.beginPath();\n        context.arc(centerX, centerY, midRadius, 0, 2 * Math.PI, false);\n\n      // create a linear gradient\n        var grd = context.createLinearGradient(230, 0, 370, 200);\n        grd.addColorStop(0, \"#8ED6FF\"); // light blue\n        grd.addColorStop(1, \"#004CB3\"); // dark blue\n        context.fillStyle = grd;\n        context.fill();\n        context.lineWidth = 5;\n        context.strokeStyle = \"#004CB3\";\n        context.stroke();\n    ```", "```js\n        // draw gear hole\n        context.beginPath();\n        context.arc(centerX, centerY, holeRadius, 0, 2 * Math.PI, false);\n        context.fillStyle = \"white\";\n        context.fill();\n        context.strokeStyle = \"#004CB3\";\n        context.stroke();\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    // define Flower constructor\n    function Flower(context, centerX, centerY, radius, numPetals, color){\n        this.context = context;\n        this.centerX = centerX;\n        this.centerY = centerY;\n        this.radius = radius;\n        this.numPetals = numPetals;\n        this.color = color;\n    }\n    ```", "```js\n    // Define Flower draw method\n    Flower.prototype.draw = function(){\n        var context = this.context;\n        context.beginPath();\n\n        // draw petals\n        for (var n = 0; n < this.numPetals; n++) {\n            var theta1 = ((Math.PI * 2) / this.numPetals) * (n + 1);\n            var theta2 = ((Math.PI * 2) / this.numPetals) * (n);\n\n            var x1 = (this.radius * Math.sin(theta1)) + this.centerX;\n            var y1 = (this.radius * Math.cos(theta1)) + this.centerY;\n            var x2 = (this.radius * Math.sin(theta2)) + this.centerX;\n            var y2 = (this.radius * Math.cos(theta2)) + this.centerY;\n\n            context.moveTo(this.centerX, this.centerY);\n            context.bezierCurveTo(x1, y1, x2, y2, this.centerX, this.centerY);\n        }\n\n        context.closePath();\n        context.fillStyle = this.color;\n        context.fill();\n\n        // draw yellow center\n        context.beginPath();\n        context.arc(this.centerX, this.centerY, this.radius / 5, 0, 2 * Math.PI, false);\n        context.fillStyle = \"yellow\";\n        context.fill();\n    };\n    ```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n    ```", "```js\n        // create a green gradation for background\n        context.beginPath();\n        context.rect(0, 0, canvas.width, canvas.height);\n        var grd = context.createLinearGradient(0, 0, canvas.width, canvas.height);\n        grd.addColorStop(0, \"#1EDE70\"); // light green\n        grd.addColorStop(1, \"#00A747\"); // dark green\n        context.fillStyle = grd;\n        context.fill();\n    ```", "```js\n        // define an array of colors\n        var colorArray = [];\n        colorArray.push(\"red\"); // 0\n        colorArray.push(\"orange\"); // 1\n        colorArray.push(\"blue\"); // 2\n        colorArray.push(\"purple\"); // 3\n    ```", "```js\n        // define number of flowers\n        var numFlowers = 50;\n\n        // draw randomly placed flowers\n        for (var n = 0; n < numFlowers; n++) {\n            var centerX = Math.random() * canvas.width;\n            var centerY = Math.random() * canvas.height;\n            var radius = (Math.random() * 25) + 25;\n            var colorIndex = Math.round(Math.random() * (colorArray.length - 1));\n\n            var thisFlower = new Flower(context, centerX, centerY, radius, 5, colorArray[colorIndex]);\n            thisFlower.draw();\n        }\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    function drawSpade(context, x, y, width, height){\n        context.save();\n        var bottomWidth = width * 0.7;\n        var topHeight = height * 0.7;\n        var bottomHeight = height * 0.3;\n\n        context.beginPath();\n        context.moveTo(x, y);\n\n        // top left of spade          \n        context.bezierCurveTo(\n            x, y + topHeight / 2, // control point 1\n            x - width / 2, y + topHeight / 2, // control point 2\n            x - width / 2, y + topHeight // end point\n        );\n\n        // bottom left of spade\n        context.bezierCurveTo(\n            x - width / 2, y + topHeight * 1.3, // control point 1\n            x, y + topHeight * 1.3, // control point 2\n            x, y + topHeight // end point\n        );\n\n        // bottom right of spade\n        context.bezierCurveTo(\n            x, y + topHeight * 1.3, // control point 1\n            x + width / 2, y + topHeight * 1.3, // control point 2\n            x + width / 2, y + topHeight // end point\n        );\n\n        // top right of spade\n        context.bezierCurveTo(\n            x + width / 2, y + topHeight / 2, // control point 1\n            x, y + topHeight / 2, // control point 2\n            x, y // end point\n        );\n\n        context.closePath();\n        context.fill();\n\n        // bottom of spade\n        context.beginPath();\n        context.moveTo(x, y + topHeight);\n        context.quadraticCurveTo(\n            x, y + topHeight + bottomHeight, // control point\n            x - bottomWidth / 2, y + topHeight + bottomHeight // end point\n        );\n        context.lineTo(x + bottomWidth / 2, y + topHeight + bottomHeight);\n        context.quadraticCurveTo(\n            x, y + topHeight + bottomHeight, // control point\n            x, y + topHeight // end point\n        );\n        context.closePath();\n        context.fillStyle = \"black\";\n        context.fill();\n        context.restore();\n    }\n    ```", "```js\n    function drawHeart(context, x, y, width, height){\n        context.save();\n        context.beginPath();\n        var topCurveHeight = height * 0.3;\n        context.moveTo(x, y + topCurveHeight);\n        // top left curve\n        context.bezierCurveTo(\n            x, y, \n            x - width / 2, y, \n            x - width / 2, y + topCurveHeight\n        );\n\n        // bottom left curve\n        context.bezierCurveTo(\n            x - width / 2, y + (height + topCurveHeight) / 2, \n            x, y + (height + topCurveHeight) / 2, \n            x, y + height\n        );\n\n        // bottom right curve\n        context.bezierCurveTo(\n            x, y + (height + topCurveHeight) / 2, \n            x + width / 2, y + (height + topCurveHeight) / 2, \n            x + width / 2, y + topCurveHeight\n        );\n\n        // top right curve\n        context.bezierCurveTo(\n            x + width / 2, y, \n            x, y, \n            x, y + topCurveHeight\n        );\n\n        context.closePath();\n        context.fillStyle = \"red\";\n        context.fill();\n        context.restore();\n    }\n    ```", "```js\n    function drawClub(context, x, y, width, height){\n        context.save();\n        var circleRadius = width * 0.3;\n        var bottomWidth = width * 0.5;\n        var bottomHeight = height * 0.35;\n        context.fillStyle = \"black\";\n\n        // top circle\n        context.beginPath();\n        context.arc(\n            x, y + circleRadius + (height * 0.05), \n            circleRadius, 0, 2 * Math.PI, false\n        );\n        context.fill();\n\n        // bottom right circle\n        context.beginPath();\n        context.arc(\n            x + circleRadius, y + (height * 0.6), \n            circleRadius, 0, 2 * Math.PI, false\n        );\n        context.fill();\n\n        // bottom left circle\n        context.beginPath();\n        context.arc(\n            x - circleRadius, y + (height * 0.6), \n            circleRadius, 0, 2 * Math.PI, false\n        );\n        context.fill();\n\n        // center filler circle\n        context.beginPath();\n        context.arc(\n            x, y + (height * 0.5), \n            circleRadius / 2, 0, 2 * Math.PI, false\n        );\n        context.fill();\n\n        // bottom of club\n        context.moveTo(x, y + (height * 0.6));\n        context.quadraticCurveTo(\n            x, y + height, \n            x - bottomWidth / 2, y + height\n        );\n        context.lineTo(x + bottomWidth / 2, y + height);\n        context.quadraticCurveTo(\n            x, y + height, \n            x, y + (height * 0.6)\n        );\n        context.closePath();\n        context.fill();\n        context.restore();\n    }\n    ```", "```js\n    function drawDiamond(context, x, y, width, height){\n        context.save();\n        context.beginPath();\n        context.moveTo(x, y);\n\n        // top left edge\n        context.lineTo(x - width / 2, y + height / 2);\n\n        // bottom left edge\n        context.lineTo(x, y + height);\n\n        // bottom right edge\n        context.lineTo(x + width / 2, y + height / 2);\n\n        // closing the path automatically creates\n        // the top right edge\n        context.closePath();\n\n        context.fillStyle = \"red\";\n        context.fill();\n        context.restore();\n    }\n    ```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n\n        drawSpade(context, canvas.width * 0.2, 70, 75, 100);\n        drawHeart(context, canvas.width * 0.4, 70, 75, 100);\n        drawClub(context, canvas.width * 0.6, 70, 75, 100);\n        drawDiamond(context, canvas.width * 0.8, 70, 75, 100);\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    window.onload = function(){\n        var canvas = document.getElementById(\"myCanvas\");\n        var context = canvas.getContext(\"2d\");\n      var grd;\n\n        context.lineJoin = \"round\";\n    ```", "```js\n        // outline right tail wing\n        context.beginPath();\n        context.moveTo(248, 60); //13\n        context.lineTo(262, 45); // 12\n        context.lineTo(285, 56); //11\n        context.lineTo(284, 59); // 10\n        context.lineTo(276, 91); // 9\n        context.closePath();\n        context.fillStyle = \"#495AFE\";\n        context.fill();\n        context.lineWidth = 4;\n        context.stroke();\n\n        // right tail wing detail\n        context.beginPath();\n        context.moveTo(281, 54); // 10\n        context.lineTo(273, 84); // 9\n        context.closePath();\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // outline right wing\n        context.beginPath();\n        context.moveTo(425, 159);\n        context.lineTo(449, 91); // 4\n        context.lineTo(447, 83); // 5\n        context.lineTo(408, 67); // 6\n        context.lineTo(343, 132); // 7\n        context.fillStyle = \"#495AFE\";\n        context.fill();\n        context.lineWidth = 4;\n        context.stroke();\n\n        // right wing detail\n        context.beginPath();\n        context.moveTo(420, 158);\n        context.lineTo(447, 83); // 4\n        context.lineWidth = 2;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(439, 102);\n        context.lineTo(395, 81);\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // outline body\n        context.beginPath();\n        context.moveTo(541, 300); // 1\n        context.quadraticCurveTo(529, 252, 490, 228); // 2\n        context.quadraticCurveTo(487, 160, 303, 123); // 3\n\n        // outline tail\n        context.lineTo(213, 20); // 14\n        context.lineTo(207, 22); // 15\n        context.bezierCurveTo(208, 164, 255, 207, 412, 271); // 27\n        context.lineTo(427, 271); // 28\n        context.quadraticCurveTo(470, 296, 541, 300); // 1\n        context.closePath();\n        grd = context.createLinearGradient(304, 246, 345, 155);\n        grd.addColorStop(0, \"#000E91\"); // dark blue\n        grd.addColorStop(1, \"#495AFE\"); // light blue\n        context.fillStyle = grd;\n        context.fill();\n        context.lineWidth = 4;\n        context.stroke();\n\n        // tail detail\n        context.beginPath();\n        context.moveTo(297, 124);\n        context.lineTo(207, 22);\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // outline left tail wing\n        context.beginPath();\n        context.moveTo(303, 121); // 8\n        context.lineTo(297, 125); // 8\n        context.lineTo(255, 104);\n        context.lineWidth = 2;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(212, 80);\n        context.lineTo(140, 85); // 18\n        context.lineTo(138, 91); // 19\n        context.lineTo(156, 105); // 20\n        context.lineTo(254, 104);\n        context.lineTo(254, 100);\n        context.lineWidth = 4;\n        context.fillStyle = \"#495AFE\";\n        context.fill();\n        context.stroke();\n\n        // left tail wing detail\n        context.beginPath();\n        context.moveTo(140, 86); // 18\n        context.lineTo(156, 100); // 20\n        context.lineTo(254, 100);\n        context.lineTo(209, 77);\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // outline left wing\n        context.beginPath();\n        context.moveTo(262, 166); // 22\n        context.lineTo(98, 208); // 23\n        context.lineTo(96, 215); // 24\n        context.lineTo(136, 245); // 25\n        context.lineTo(339, 218);\n        context.lineTo(339, 215);\n        context.closePath();\n        context.fillStyle = \"#495AFE\";\n        context.fill();\n        context.lineWidth = 4;\n        context.stroke();\n\n        // left wing detail\n        context.beginPath();\n        context.moveTo(98, 210);\n        context.lineTo(136, 240); // 25\n        context.lineTo(339, 213);\n        context.lineWidth = 2;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(165, 235);\n        context.lineTo(123, 203);\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // side detail\n        context.beginPath();\n        context.moveTo(427, 271);\n        context.lineTo(423, 221);\n        context.quadraticCurveTo(372, 175, 310, 155);\n        context.lineWidth = 4;\n        context.stroke();\n    ```", "```js\n        // nose detail\n        context.beginPath();\n        context.moveTo(475, 288);\n        context.quadraticCurveTo(476, 256, 509, 243);\n        context.quadraticCurveTo(533, 268, 541, 300); // 1\n        context.quadraticCurveTo(501, 300, 475, 288);\n        grd = context.createLinearGradient(491, 301, 530, 263);\n        grd.addColorStop(0, \"#9D0000\"); // dark red\n        grd.addColorStop(1, \"#FF0000\"); // light red\n        context.fillStyle = grd;\n        context.fill();\n        context.lineWidth = 4;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(480, 293);\n        context.quadraticCurveTo(480, 256, 513, 246);\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // cockpit detail\n        context.beginPath();\n        context.moveTo(442, 169);\n        context.quadraticCurveTo(419, 176, 415, 200);\n        context.quadraticCurveTo(483, 250, 490, 228);\n        context.quadraticCurveTo(480, 186, 439, 170);\n        context.lineWidth = 4;\n        context.stroke();\n        grd = context.createRadialGradient(473, 200, 20, 473, 200, 70);\n        grd.addColorStop(0, \"#E1E7FF\"); // dark gray\n        grd.addColorStop(1, \"#737784\"); // light gray\n        context.fillStyle = grd;\n        context.fill();\n\n        context.beginPath();\n        context.moveTo(448, 173);\n        context.quadraticCurveTo(425, 176, 420, 204);\n        context.lineWidth = 2;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(470, 186);\n        context.quadraticCurveTo(445, 190, 440, 220);\n        context.lineWidth = 2;\n        context.stroke();\n    ```", "```js\n        // intake outline\n        context.beginPath();\n        context.moveTo(420, 265);\n        context.lineTo(416, 223);\n        context.bezierCurveTo(384, 224, 399, 270, 420, 265);\n        context.closePath();\n        context.fillStyle = \"#001975\";\n        context.fill();\n        context.lineWidth = 4;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(420, 265);\n        context.lineTo(402, 253);\n        context.lineWidth = 2;\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(404, 203);\n        context.bezierCurveTo(364, 204, 379, 265, 394, 263);\n        context.lineWidth = 2;\n        context.stroke();\n    };\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"650\" height=\"350\" style=\"border:1px solid black;\">\n    </canvas>\n    ```"]