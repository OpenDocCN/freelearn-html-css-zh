["```js\n    var Animation = function(canvasId){\n        this.canvas = document.getElementById(canvasId);\n        this.context = this.canvas.getContext(\"2d\");\n        this.t = 0;\n        this.timeInterval = 0;\n        this.startTime = 0;\n        this.lastTime = 0;\n        this.frame = 0;\n        this.animating = false;\n\n        // provided by Paul Irish\n        window.requestAnimFrame = (function(callback){\n            return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function(callback){\n                window.setTimeout(callback, 1000 / 60);\n            };\n        })();\n    };\n    ```", "```js\n    Animation.prototype.getContext = function(){\n        return this.context;\n    };\n    ```", "```js\n    Animation.prototype.getCanvas = function(){\n        return this.canvas;\n    };\n    ```", "```js\n    Animation.prototype.clear = function(){\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    };\n    ```", "```js\n    Animation.prototype.setStage = function(func){\n        this.stage = func;\n    };\n    ```", "```js\n    Animation.prototype.isAnimating = function(){\n        return this.animating;\n    };\n    ```", "```js\n    Animation.prototype.getFrame = function(){\n        return this.frame;\n    };\n    ```", "```js\n    Animation.prototype.start = function(){\n        this.animating = true; \n        var date = new Date();\n        this.startTime = date.getTime();\n        this.lastTime = this.startTime;\n\n        if (this.stage !== undefined) {\n            this.stage();\n        }\n\n        this.animationLoop();\n    };\n    ```", "```js\n    Animation.prototype.stop = function(){\n        this.animating = false;\n    };\n    ```", "```js\n    Animation.prototype.getTimeInterval = function(){\n        return this.timeInterval;\n    };\n    ```", "```js\n    Animation.prototype.getTime = function(){\n        return this.t;\n    };\n    ```", "```js\n    Animation.prototype.getFps = function(){\n        return this.timeInterval > 0 ? 1000 / this.timeInterval : 0;\n    };\n    ```", "```js\n    Animation.prototype.animationLoop = function(){\n        var that = this;\n\n        this.frame++;\n        var date = new Date();\n        var thisTime = date.getTime();\n        this.timeInterval = thisTime - this.lastTime;\n        this.t += this.timeInterval;\n        this.lastTime = thisTime;\n\n        if (this.stage !== undefined) {\n            this.stage();\n        }\n\n        if (this.animating) {\n            requestAnimFrame(function(){\n                that.animationLoop();\n            });\n        }\n    };\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                var linearSpeed = 100; // pixels / second\n                var box = {\n                    x: 0,\n                    y: canvas.height / 2 - 25,\n                    width: 100,\n                    height: 50\n                };\n    ```", "```js\n            anim.setStage(function(){\n                // update\n                var linearDistEachFrame = linearSpeed * this.getTimeInterval() / 1000;\n\n                if (box.x < canvas.width - box.width) {\n                    box.x += linearDistEachFrame;\n                }\n                else {\n                    anim.stop();\n                }\n\n                // clear\n                this.clear();\n\n                // draw\n                context.beginPath();\n                context.fillStyle = \"blue\";\n                context.fillRect(box.x, box.y, box.width, box.height);\n            });\n    ```", "```js\n            anim.start();\n        };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                var gravity = 2; // pixels / second^2\n                var box = {\n                    x: canvas.width / 2 - 50,\n                    y: 0,\n                    vx: 0,\n                    vy: 0,\n                    width: 100,\n                    height: 50\n                };\n    ```", "```js\n                anim.setStage(function(){\n                    // update\n            if (this.getTime() > 1000) {\n                        var speedIncrementEachFrame = gravity * anim.getTimeInterval() / 1000; // pixels / second\n                        box.vy += speedIncrementEachFrame;\n                        box.y += box.vy * this.getTimeInterval();\n\n                        if (box.y > canvas.height - box.height) {\n                            box.y = canvas.height - box.height;\n                            this.stop();\n                        }\n            }\n\n                    // clear\n                    this.clear();\n\n                    // draw\n                    context.beginPath();\n                    context.fillStyle = \"blue\";\n                    context.fillRect(box.x, box.y, box.width, box.height);\n                });\n    ```", "```js\n                anim.start(); \n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\nvar speedIncrementEachFrame = gravity * anim.getTimeInterval() / 1000; // pixels / second\nbox.vy += speedIncrementEachFrame;\n```", "```js\nbox.y += box.vy * this.getTimeInterval();\n```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                var box = {\n                    x: 250,\n                    y: canvas.height / 2 - 25,\n                    width: 100,\n                    height: 50\n                };\n    ```", "```js\n                var centerX = canvas.width / 2 - box.width / 2;\n                var amplitude = 150; // pixels\n                var period = 2000; // ms\n    ```", "```js\n                anim.setStage(function(){\n            // update\n            box.x = amplitude * Math.sin(anim.getTime() * 2 * Math.PI / period) + centerX;\n\n            // clear\n            this.clear();\n\n            // draw\n                    context.beginPath();\n                    context.rect(box.x, box.y, box.width, box.height);\n                    context.fillStyle = \"blue\";\n                    context.fill();\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\nx(t) = A * sin (t * 2\u03c0 / T + \u03a6) + x0\n```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            window.onload = function(){\n                // instantiate new animation object\n                var anim = new Animation(\"myCanvas\");\n                var context = anim.getContext();\n                var canvas = anim.getCanvas();\n    ```", "```js\n                anim.setStage(function(){\n                    // update\n                    var widthScale = Math.sin(this.getTime() / 200) * 0.1 + 0.9;\n                    var heightScale = -1 * Math.sin(this.getTime() / 200) * 0.1 + 0.9;\n\n                    // clear\n                    this.clear();\n\n                    //draw\n                    context.beginPath();\n                    context.save();\n                    context.translate(canvas.width / 2, canvas.height / 2);\n                    context.scale(widthScale, heightScale);\n                    context.arc(0, 0, 65, 0, 2 * Math.PI, false);\n                    context.restore();\n                    context.fillStyle = \"#8ED6FF\";\n                    context.fill();\n                    context.lineWidth = 2;\n                    context.strokeStyle = \"#555\";\n                    context.stroke();\n\n                    context.beginPath();\n                    context.save();\n                    context.translate(canvas.width / 2, canvas.height / 2);\n                    context.scale(widthScale, heightScale);\n                    context.arc(-30, -30, 15, 0, 2 * Math.PI, false);\n                    context.restore();\n                    context.fillStyle = \"white\";\n                    context.fill();\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                var amplitude = Math.PI / 4; // 45 degrees\n                var period = 4000; // ms\n                var theta = 0;\n                var pendulumLength = 250;\n                var pendulumWidth = 10;\n                var rotationPointX = canvas.width / 2;\n                var rotationPointY = 20;\n    ```", "```js\n                anim.setStage(function(){\n                    // update\n                    theta = (amplitude * Math.sin((2 * Math.PI * this.getTime()) / period)) + Math.PI / 2;\n\n                    // clear\n                    this.clear();\n\n                    // draw top circle\n                    context.beginPath();\n                    context.arc(rotationPointX, rotationPointY, 15, 0, 2 * Math.PI, false);\n                    context.fillStyle = \"#888\";\n                    context.fill();\n\n                    // draw top inner circle\n                    context.beginPath();\n                    context.arc(rotationPointX, rotationPointY, 10, 0, 2 * Math.PI, false);\n                    context.fillStyle = \"black\";\n                    context.fill();\n\n                    // draw shaft\n                    context.beginPath();\n                    var endPointX = rotationPointX + (pendulumLength * Math.cos(theta));\n                    var endPointY = rotationPointY + (pendulumLength * Math.sin(theta));\n                    context.beginPath();\n                    context.moveTo(rotationPointX, rotationPointY);\n                    context.lineTo(endPointX, endPointY);\n                    context.lineWidth = pendulumWidth;\n                    context.lineCap = \"round\";\n                    context.strokeStyle = \"#555\";\n                    context.stroke();\n\n                    // draw bottom circle\n                    context.beginPath();\n                    context.arc(endPointX, endPointY, 40, 0, 2 * Math.PI, false);\n                    var grd = context.createLinearGradient(endPointX - 50, endPointY - 50, endPointX + 50, endPointY + 50);\n                    grd.addColorStop(0, \"#444\");\n                    grd.addColorStop(0.5, \"white\");\n                    grd.addColorStop(1, \"#444\");\n                    context.fillStyle = grd;\n                    context.fill();\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"330\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            function Gear(config){\n                this.x = config.x;\n                this.y = config.y;\n                this.outerRadius = config.outerRadius;\n                this.innerRadius = config.innerRadius;\n                this.holeRadius = config.holeRadius;\n                this.numTeeth = config.numTeeth;\n                this.theta = config.theta;\n                this.thetaSpeed = config.thetaSpeed;\n                this.lightColor = config.lightColor;\n                this.darkColor = config.darkColor;\n                this.clockwise = config.clockwise;\n                this.midRadius = config.outerRadius - 10;\n            }\n    ```", "```js\n            Gear.prototype.draw = function(context){\n                context.save();\n                context.translate(this.x, this.y);\n                context.rotate(this.theta);\n\n                // draw gear teeth\n                context.beginPath();\n                // we can set the lineJoin property to bevel so that the tips\n                // of the gear teeth are flat and don't come to a sharp point\n                context.lineJoin = \"bevel\";\n\n                // loop through the number of points to create the gear shape\n                var numPoints = this.numTeeth * 2;\n                for (var n = 0; n < numPoints; n++) {\n                    var radius = null;\n\n                    // draw tip of teeth on even iterations\n                    if (n % 2 == 0) {\n                        radius = this.outerRadius;\n                    }\n                    // draw teeth connection which lies somewhere between\n                    // the gear center and gear radius\n                    else {\n                        radius = this.innerRadius;\n                    }\n\n                    var theta = ((Math.PI * 2) / numPoints) * (n + 1);\n                    var x = (radius * Math.sin(theta));\n                    var y = (radius * Math.cos(theta));\n\n                    // if first iteration, use moveTo() to position\n                    // the drawing cursor\n                    if (n == 0) {\n                        context.moveTo(x, y);\n                    }\n                    // if any other iteration, use lineTo() to connect sub paths\n                    else {\n                        context.lineTo(x, y);\n                    }\n                }\n\n                context.closePath();\n\n                // define the line width and stroke color\n                context.lineWidth = 5;\n                context.strokeStyle = this.darkColor;\n                context.stroke();\n\n                // draw gear body\n                context.beginPath();\n                context.arc(0, 0, this.midRadius, 0, 2 * Math.PI, false);\n\n                // create a linear gradient\n                var grd = context.createLinearGradient(-1 * this.outerRadius / 2, -1 * this.outerRadius / 2, this.outerRadius / 2, this.outerRadius / 2);\n                grd.addColorStop(0, this.lightColor); \n                grd.addColorStop(1, this.darkColor); \n                context.fillStyle = grd;\n                context.fill();\n                context.lineWidth = 5;\n                context.strokeStyle = this.darkColor;\n                context.stroke();\n\n                // draw gear hole\n                context.beginPath();\n                context.arc(0, 0, this.holeRadius, 0, 2 * Math.PI, false);\n                context.fillStyle = \"white\";\n                context.fill();\n                context.strokeStyle = this.darkColor;\n                context.stroke();\n                context.restore();\n            };\n    ```", "```js\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                var gears = [];\n\n                // add blue gear\n                gears.push(new Gear({\n                    x: 270,\n                    y: 105,\n                    outerRadius: 90,\n                    innerRadius: 50,\n                    holeRadius: 10,\n                    numTeeth: 24,\n                    theta: 0,\n                    thetaSpeed: 1 / 1000,\n                    lightColor: \"#B1CCFF\",\n                    darkColor: \"#3959CC\",\n                    clockwise: false\n                }));\n\n                // add red gear\n                gears.push(new Gear({\n                    x: 372,\n                    y: 190,\n                    outerRadius: 50,\n                    innerRadius: 15,\n                    holeRadius: 10,\n                    numTeeth: 12,\n                    theta: 0.14,\n                    thetaSpeed: 2 / 1000,\n                    lightColor: \"#FF9E9D\",\n                    darkColor: \"#AD0825\",\n                    clockwise: true\n                }));\n\n                // add orange gear\n                gears.push(new Gear({\n                    x: 422,\n                    y: 142,\n                    outerRadius: 28,\n                    innerRadius: 5,\n                    holeRadius: 7,\n                    numTeeth: 6,\n                    theta: 0.35,\n                    thetaSpeed: 4 / 1000,\n                    lightColor: \"#FFDD87\",\n                    darkColor: \"#D25D00\",\n                    clockwise: false\n                }));\n    ```", "```js\n                anim.setStage(function(){\n                    // update\n                    for (var i = 0; i < gears.length; i++) {\n                        var gear = gears[i];\n                        var thetaIncrement = gear.thetaSpeed * this.getTimeInterval();\n                        gear.theta += gear.clockwise ? thetaIncrement : -1 * thetaIncrement;\n                    }\n\n                    // clear\n                    this.clear();\n\n                    // draw\n                    for (var i = 0; i < gears.length; i++) {\n                        gears[i].draw(context);\n                    }\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n                var clockRadius = 75;\n    ```", "```js\n                anim.setStage(function(){\n\n                    // update\n                    var date = new Date();\n                    var hours = date.getHours();\n                    var minutes = date.getMinutes();\n                    var seconds = date.getSeconds();\n\n                    hours = hours > 12 ? hours - 12 : hours;\n\n                    var hour = hours + minutes / 60;\n                    var minute = minutes + seconds / 60;\n\n            // clear\n            this.clear();\n\n            // draw\n                    var context = anim.getContext();\n                    context.save();\n                    context.translate(canvas.width / 2, canvas.height / 2);\n\n                    // draw clock body\n                    context.beginPath();\n                    context.arc(0, 0, clockRadius, 0, Math.PI * 2, true);\n\n                    var grd = context.createLinearGradient(-clockRadius, -clockRadius, clockRadius, clockRadius);\n                    grd.addColorStop(0, \"#F8FCFF\"); // light blue\n                    grd.addColorStop(1, \"#A1CCEE\"); // dark blue\n                    context.fillStyle = grd;\n                    context.fill();\n\n                    // draw numbers  \n                    context.font = \"16pt Calibri\";\n                    context.fillStyle = \"#024F8C\";\n                    context.textAlign = \"center\";\n                    context.textBaseline = \"middle\";\n                    for (var n = 1; n <= 12; n++) {\n                        var theta = (n - 3) * (Math.PI * 2) / 12;\n                        var x = clockRadius * 0.8 * Math.cos(theta);\n                        var y = clockRadius * 0.8 * Math.sin(theta);\n                        context.fillText(n, x, y);\n                    }\n\n                    context.save();\n\n                    // apply drop shadow\n                    context.shadowColor = \"#bbbbbb\";\n                    context.shadowBlur = 5;\n                    context.shadowOffsetX = 1;\n                    context.shadowOffsetY = 1;\n\n                    // draw clock rim\n                    context.lineWidth = 3;\n                    context.strokeStyle = \"#005EA8\";\n                    context.stroke();\n\n                    context.restore();\n\n                    // draw hour hand\n                    context.save();\n                    var theta = (hour - 3) * 2 * Math.PI / 12;\n                    context.rotate(theta);\n                    context.beginPath();\n                    context.moveTo(-10, -4);\n                    context.lineTo(-10, 4);\n                    context.lineTo(clockRadius * 0.6, 1);\n                    context.lineTo(clockRadius * 0.6, -1);\n                    context.fill();\n                    context.restore();\n\n                    // minute hand\n                    context.save();\n                    var theta = (minute - 15) * 2 * Math.PI / 60;\n                    context.rotate(theta);\n                    context.beginPath();\n                    context.moveTo(-10, -3);\n                    context.lineTo(-10, 3);\n                    context.lineTo(clockRadius * 0.9, 1);\n                    context.lineTo(clockRadius * 0.9, -1);\n                    context.fill();\n                    context.restore();\n\n                    // second hand\n                    context.save();\n                    var theta = (seconds - 15) * 2 * Math.PI / 60;\n                    context.rotate(theta);\n                    context.beginPath();\n                    context.moveTo(-10, -2);\n                    context.lineTo(-10, 2);\n                    context.lineTo(clockRadius * 0.8, 1);\n                    context.lineTo(clockRadius * 0.8, -1);\n                    context.fillStyle = \"red\";\n                    context.fill();\n                    context.restore();\n\n                    context.restore();\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n            function applyPhysics(anim, particle){\n                // physics globals\n                var gravity = 1500; // pixels / second^2\n                var collisionDamper = 0.8; // 80% velocity lost when collision occurs\n                var floorFriction = 100; // pixels / second^2\n                var timeInterval = anim.getTimeInterval();\n                var canvas = anim.getCanvas();\n\n                // gravity\n                particle.vy += gravity * timeInterval / 1000;\n\n                // position\n                particle.y += particle.vy * timeInterval / 1000;\n                particle.x += particle.vx * timeInterval / 1000;\n\n                // floor condition\n                if (particle.y > (canvas.height - particle.radius)) {\n                    particle.y = canvas.height - particle.radius;\n                    particle.vy *= -1;\n                    particle.vy *= collisionDamper;\n                }\n\n                // floor friction\n                if (particle.y == canvas.height - particle.radius) {\n                    if (particle.vx > 0.1) {\n                        particle.vx -= floorFriction * timeInterval / 1000;\n                    }\n                    else if (particle.vx < -0.1) {\n                        particle.vx += floorFriction * timeInterval / 1000;\n                    }\n                    else {\n                        particle.vx = 0;\n                    }\n                }\n\n                // ceiling  condition\n                if (particle.y < (particle.radius)) {\n                    particle.y = particle.radius;\n                    particle.vy *= -1;\n                    particle.vy *= collisionDamper;\n                }\n\n                // right wall condition\n                if (particle.x > (canvas.width - particle.radius)) {\n                    particle.x = canvas.width - particle.radius;\n                    particle.vx *= -1;\n                    particle.vx *= collisionDamper;\n                }\n\n                // left wall condition\n                if (particle.x < (particle.radius)) {\n                    particle.x = particle.radius;\n                    particle.vx *= -1;\n                    particle.vx *= collisionDamper;\n                }\n            }\n    ```", "```js\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                var particle = {\n                    x: 10,\n                    y: canvas.height - 10,\n                    vx: 600, // px / second\n                    vy: -900, // px / second\n                    radius: 10\n                };\n    ```", "```js\n                anim.setStage(function(){\n                    // update\n                    applyPhysics(this, particle);\n\n                    // clear\n                    this.clear();\n\n                    // draw \n                    context.beginPath();\n                    context.arc(particle.x, particle.y, particle.radius, 0, 2 * Math.PI, false);\n                    context.fillStyle = \"blue\";\n                    context.fill();\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n        <script>\n            function getRandColor(){\n                var colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"];\n                return colors[Math.floor(Math.random() * colors.length)];\n            }\n    ```", "```js\n            function getRandTheta(){\n                return Math.random() * 2 * Math.PI;\n            }\n    ```", "```js\n            function updateMicrobes(anim, microbes){\n                var canvas = anim.getCanvas();\n                var angleVariance = 0.2;\n\n                for (var i = 0; i < microbes.length; i++) {\n                    var microbe = microbes[i];\n                    var angles = microbe.angles;\n\n            /*\n             * good numNewSegmentsPerFrame values:\n             * 60fps -> 1\n             * 10fps -> 10 \n             * \n             * for a linear relationship, we can use the equation:\n             * n = mf + b, where n = numNewSegmentsPerFrame and f = FPS\n             * solving for m and b, we have:\n             * n = (-0.18)f + 11.8\n             */\n                    var numNewSegmentsPerFrame = Math.round(-0.18 * anim.getFps() + 11.8);\n\n                    for (var n = 0; n < numNewSegmentsPerFrame; n++) {\n                        // create first angle if no angles\n                        if (angles.length == 0) {\n                            microbe.headX = canvas.width / 2;\n                            microbe.headY = canvas.height / 2;\n                            angles.push(getRandTheta());\n                        }\n\n                        var headX = microbe.headX;\n                        var headY = microbe.headY;\n                        var headAngle = angles[angles.length - 1];\n\n                        // create new head angle\n                        var dist = anim.getTimeInterval() / (10 * numNewSegmentsPerFrame);\n                        // increase new head angle by an amount equal to\n                        // -0.1 to 0.1\n                        var newHeadAngle = headAngle + ((angleVariance / 2) - Math.random() * angleVariance);\n                        var newHeadX = headX + dist * Math.cos(newHeadAngle);\n                        var newHeadY = headY + dist * Math.sin(newHeadAngle);\n\n                        // change direction if collision occurs\n                        if (newHeadX >= canvas.width || newHeadX <= 0 || newHeadY >= canvas.height || newHeadY <= 0) {\n                            newHeadAngle += Math.PI / 2;\n                            newHeadX = headX + dist * Math.cos(newHeadAngle);\n                            newHeadY = headY + dist * Math.sin(newHeadAngle);\n                        }\n\n                        microbe.headX = newHeadX;\n                        microbe.headY = newHeadY;\n                        angles.push(newHeadAngle);\n\n                        // remove tail angle\n                        if (angles.length > 20) {\n                            angles.shift();\n                        }\n                    }\n                }\n            }\n    ```", "```js\n            function drawMicrobes(anim, microbes){\n                var segmentLength = 2; // px\n                var context = anim.getContext();\n\n                for (var i = 0; i < microbes.length; i++) {\n                    var microbe = microbes[i];\n\n                    var angles = microbe.angles;\n                    context.beginPath();\n                    context.moveTo(microbe.headX, microbe.headY);\n\n                    var x = microbe.headX;\n                    var y = microbe.headY;\n\n                    // start with the head and end with the tail\n                    for (var n = angles.length - 1; n >= 0; n--) {\n                        var angle = angles[n];\n\n                        x -= segmentLength * Math.cos(angle);\n                        y -= segmentLength * Math.sin(angle);\n                        context.lineTo(x, y);\n                    }\n\n                    context.lineWidth = 10;\n                    context.lineCap = \"round\";\n                    context.lineJoin = \"round\";\n                    context.strokeStyle = microbe.color;\n                    context.stroke();\n                }\n            }\n    ```", "```js\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                // init microbes\n                var microbes = [];\n                for (var n = 0; n < 100; n++) {\n                    // each microbe will be an array of angles\n                    microbes[n] = {\n                        headX: 0,\n                        headY: 0,\n                        angles: [],\n                        color: getRandColor()\n                    };\n                }\n    ```", "```js\n                anim.setStage(function(){\n                    // update\n                    updateMicrobes(this, microbes);\n\n                    // clear\n                    this.clear();\n\n                    // draw\n                    drawMicrobes(this, microbes);\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n    ```", "```js\n    <head>\n        <script src=\"img/animation.js\">\n        </script>\n    ```", "```js\n            function drawFps(anim, fps){\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n\n                context.fillStyle = \"black\";\n                context.fillRect(canvas.width - 100, 0, 100, 30);\n\n                context.font = \"18pt Calibri\";\n                context.fillStyle = \"white\";\n                context.fillText(\"fps: \" + fps.toFixed(1), canvas.width - 93, 22);\n            }\n    ```", "```js\n        <script>\n            function getRandColor(){\n                var colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"];\n                return colors[Math.floor(Math.random() * colors.length)];\n            }\n    ```", "```js\n            function getRandTheta(){\n                return Math.random() * 2 * Math.PI;\n            }\n    ```", "```js\n            function updateMicrobes(anim, microbes){\n                var canvas = anim.getCanvas();\n                var angleVariance = 0.2;\n\n                for (var i = 0; i < microbes.length; i++) {\n                    var microbe = microbes[i];\n                    var angles = microbe.angles;\n\n                    /*\n                  * good numNewSegmentsPerFrame values:\n                  * 60fps -> 1\n                  * 10fps -> 10 \n                  * \n                  * for a linear relationship, we can use the equation:\n                  * n = mf + b, where n = numNewSegmentsPerFrame and f = FPS\n                  * solving for m and b, we have:\n                  * n = (-0.18)f + 11.8\n                  */\n\n                    var numNewSegmentsPerFrame = Math.round(-0.18 * anim.getFps() + 11.8);\n\n                    for (var n = 0; n < numNewSegmentsPerFrame; n++) {\n                        // create first angle if no angles\n                        if (angles.length == 0) {\n                            microbe.headX = canvas.width / 2;\n                            microbe.headY = canvas.height / 2;\n                            angles.push(getRandTheta());\n                        }\n\n                        var headX = microbe.headX;\n                        var headY = microbe.headY;\n                        var headAngle = angles[angles.length - 1];\n\n                        // create new head angle\n                        var dist = anim.getTimeInterval() / (10 * numNewSegmentsPerFrame);\n                        // increase new head angle by an amount equal to\n                        // -0.1 to 0.1\n                        var newHeadAngle = headAngle + ((angleVariance / 2) - Math.random() * angleVariance);\n                        var newHeadX = headX + dist * Math.cos(newHeadAngle);\n                        var newHeadY = headY + dist * Math.sin(newHeadAngle);\n\n                        // change direction if collision occurs\n                        if (newHeadX >= canvas.width || newHeadX <= 0 || newHeadY >= canvas.height || newHeadY <= 0) {\n                            newHeadAngle += Math.PI / 2;\n                            newHeadX = headX + dist * Math.cos(newHeadAngle);\n                            newHeadY = headY + dist * Math.sin(newHeadAngle);\n                        }\n\n                        microbe.headX = newHeadX;\n                        microbe.headY = newHeadY;\n                        angles.push(newHeadAngle);\n\n                        // remove tail angle\n                        if (angles.length > 20) {\n                            angles.shift();\n                        }\n                    }\n                }\n            }\n    ```", "```js\n            function drawMicrobes(anim, microbes){\n                var segmentLength = 2; // px\n                var context = anim.getContext();\n\n                for (var i = 0; i < microbes.length; i++) {\n                    var microbe = microbes[i];\n\n                    var angles = microbe.angles;\n                    context.beginPath();\n                    context.moveTo(microbe.headX, microbe.headY);\n\n                    var x = microbe.headX;\n                    var y = microbe.headY;\n\n                    // start with the head and end with the tail\n                    for (var n = angles.length - 1; n >= 0; n--) {\n                        var angle = angles[n];\n\n                        x -= segmentLength * Math.cos(angle);\n                        y -= segmentLength * Math.sin(angle);\n                        context.lineTo(x, y);\n                    }\n\n                    context.lineWidth = 10;\n                    context.lineCap = \"round\";\n                    context.lineJoin = \"round\";\n                    context.strokeStyle = microbe.color;\n                    context.stroke();\n                }\n            }\n    ```", "```js\n            window.onload = function(){\n                var anim = new Animation(\"myCanvas\");\n                var canvas = anim.getCanvas();\n                var context = anim.getContext();\n    ```", "```js\n                // init microbes\n                var microbes = [];\n                for (var n = 0; n < 1500; n++) {\n                    // each microbe will be an array of angles\n                    microbes[n] = {\n                        headX: 0,\n                        headY: 0,\n                        angles: [],\n                        color: getRandColor()\n                    };\n                }\n    ```", "```js\n                var fps = 0;\n\n                anim.setStage(function(){\n                    // update\n                    updateMicrobes(this, microbes);\n\n                    if (anim.getFrame() % 10 == 0) {\n                        fps = anim.getFps();\n                    }\n\n                    // clear\n                    this.clear();\n\n                    // draw\n                    drawMicrobes(this, microbes);\n                    drawFps(this, fps);\n                });\n    ```", "```js\n                anim.start();\n            };\n        </script>\n    </head>\n    ```", "```js\n    <body>\n        <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n        </canvas>\n    </body>\n\n    ```"]