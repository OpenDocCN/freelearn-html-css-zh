["```js\ndocument.getElementById(\"foo\").addEventListener(\"mouseup\", function() {\n  // do stuff\n}, false);\n```", "```js\nthis.addRegionEventListener(\"mouseup\", function() {\n // do stuff\n});\n```", "```js\n    var Events = function(canvasId){\n        this.canvas = document.getElementById(canvasId);\n        this.context = this.canvas.getContext(\"2d\");\n        this.stage = undefined;\n        this.listening = false;\n\n        // desktop flags\n        this.mousePos = null;\n        this.mouseDown = false;\n        this.mouseUp = false;\n        this.mouseOver = false;\n        this.mouseMove = false;\n\n        // mobile flags\n        this.touchPos = null;\n        this.touchStart = false;\n        this.touchMove = false;\n        this.touchEnd = false;\n\n        // Region Events\n        this.currentRegion = null;\n        this.regionIndex = 0;\n        this.lastRegionIndex = -1;\n        this.mouseOverRegionIndex = -1;\n    };\n    ```", "```js\n    Events.prototype.getContext = function(){\n        return this.context;\n    };\n    ```", "```js\n    Events.prototype.getCanvas = function(){\n        return this.canvas;\n    };\n    ```", "```js\n    Events.prototype.clear = function(){\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    };\n    ```", "```js\n    Events.prototype.getCanvasPos = function(){\n        var obj = this.getCanvas();\n        var top = 0;\n        var left = 0;\n        while (obj.tagName != \"BODY\") {\n            top += obj.offsetTop;\n            left += obj.offsetLeft;\n            obj = obj.offsetParent;\n        }\n        return {\n            top: top,\n            left: left\n        };\n    };\n    ```", "```js\n    Events.prototype.setStage = function(func){\n        this.stage = func;\n        this.listen();\n    };\n    ```", "```js\n    Events.prototype.reset = function(evt){\n        if (!evt) {\n            evt = window.event;\n        }\n\n        this.setMousePosition(evt);\n        this.setTouchPosition(evt);\n        this.regionIndex = 0;\n\n        if (this.stage !== undefined) {\n            this.stage();\n        }\n\n        // desktop flags\n        this.mouseOver = false;\n        this.mouseMove = false;\n        this.mouseDown = false;\n        this.mouseUp = false;\n\n        // mobile touch flags\n        this.touchStart = false;\n        this.touchMove = false;\n        this.touchEnd = false;\n    };\n    ```", "```js\n    Events.prototype.listen = function(){\n        var that = this;\n\n        if (this.stage !== undefined) {\n            this.stage();\n        }\n\n        // desktop events\n        this.canvas.addEventListener(\"mousedown\", function(evt){\n            that.mouseDown = true;\n            that.reset(evt);\n        }, false);\n\n        this.canvas.addEventListener(\"mousemove\", function(evt){\n            that.reset(evt);\n        }, false);\n\n        this.canvas.addEventListener(\"mouseup\", function(evt){\n            that.mouseUp = true;\n            that.reset(evt);\n        }, false);\n\n        this.canvas.addEventListener(\"mouseover\", function(evt){\n            that.reset(evt);\n        }, false);\n\n        this.canvas.addEventListener(\"mouseout\", function(evt){\n            that.mousePos = null;\n        }, false);\n\n        // mobile events\n        this.canvas.addEventListener(\"touchstart\", function(evt){\n            evt.preventDefault();\n            that.touchStart = true;\n            that.reset(evt);\n        }, false);\n\n        this.canvas.addEventListener(\"touchmove\", function(evt){\n            evt.preventDefault();\n            that.reset(evt);\n        }, false);\n\n        this.canvas.addEventListener(\"touchend\", function(evt){\n            evt.preventDefault();\n            that.touchEnd = true;\n            that.reset(evt);\n        }, false);\n    };\n    ```", "```js\n    Events.prototype.getMousePos = function(evt){\n        return this.mousePos;\n    };\n    ```", "```js\n    Events.prototype.getTouchPos = function(evt){\n        return this.touchPos;\n    };\n    ```", "```js\n    Events.prototype.setMousePosition = function(evt){\n        var mouseX = evt.clientX - this.getCanvasPos().left + window.pageXOffset;\n        var mouseY = evt.clientY - this.getCanvasPos().top + window.pageYOffset;\n        this.mousePos = {\n            x: mouseX,\n            y: mouseY\n        };\n    };\n    ```", "```js\n    Events.prototype.setTouchPosition = function(evt){\n        if (evt.touches !== undefined && evt.touches.length == 1) { // Only deal with one finger\n            var touch = evt.touches[0]; // Get the information for finger #1\n            var touchX = touch.pageX - this.getCanvasPos().left + window.pageXOffset;\n            var touchY = touch.pageY - this.getCanvasPos().top + window.pageYOffset;\n\n            this.touchPos = {\n                x: touchX,\n                y: touchY\n            };\n        }\n    };\n    ```", "```js\n    Events.prototype.beginRegion = function(){\n        this.currentRegion = {};\n        this.regionIndex++;\n    };\n    ```", "```js\n    Events.prototype.addRegionEventListener = function(type, func){\n        var event = (type.indexOf('touch') == -1) ? 'on' + type : type;\n        this.currentRegion[event] = func;\n    };\n    ```", "```js\n    Events.prototype.closeRegion = function(){\n        var pos = this.touchPos || this.mousePos;\n\n        if (pos !== null && this.context.isPointInPath(pos.x, pos.y)) {\n            if (this.lastRegionIndex != this.regionIndex) {\n                this.lastRegionIndex = this.regionIndex;\n            }\n\n            // handle onmousedown\n            if (this.mouseDown && this.currentRegion.onmousedown !== undefined) {\n                this.currentRegion.onmousedown();\n                this.mouseDown = false;\n            }\n\n            // handle onmouseup\n            else if (this.mouseUp && this.currentRegion.onmouseup !== undefined) {\n                this.currentRegion.onmouseup();\n                this.mouseUp = false;\n            }\n\n            // handle onmouseover\n            else if (!this.mouseOver && this.regionIndex != this.mouseOverRegionIndex && this.currentRegion.onmouseover !== undefined) {\n                this.currentRegion.onmouseover();\n                this.mouseOver = true;\n                this.mouseOverRegionIndex = this.regionIndex;\n            }\n\n            // handle onmousemove\n            else if (!this.mouseMove && this.currentRegion.onmousemove !== undefined) {\n                this.currentRegion.onmousemove();\n                this.mouseMove = true;\n            }\n\n            // handle touchstart\n            if (this.touchStart && this.currentRegion.touchstart !== undefined) {\n                this.currentRegion.touchstart();\n                this.touchStart = false;\n            }\n\n            // handle touchend\n            if (this.touchEnd && this.currentRegion.touchend !== undefined) {\n                this.currentRegion.touchend();\n                this.touchEnd = false;\n            }\n\n            // handle touchmove\n            if (!this.touchMove && this.currentRegion.touchmove !== undefined) {\n                this.currentRegion.touchmove();\n                this.touchMove = true;\n            }\n\n        }\n        else if (this.regionIndex == this.lastRegionIndex) {\n            this.lastRegionIndex = -1;\n            this.mouseOverRegionIndex = -1;\n\n            // handle mouseout condition\n            if (this.currentRegion.onmouseout !== undefined) {\n                this.currentRegion.onmouseout();\n            }\n        }\n    };\n    ```", "```js\ncontext.isPointInPath(x,y);\n```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        function writeMessage(context, message){\n            context.font = \"18pt Calibri\";\n            context.fillStyle = \"black\";\n            context.fillText(message, 10, 25);\n        }\n    ```", "```js\n        window.onload = function(){\n            var events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n    ```", "```js\n            canvas.addEventListener(\"mouseout\", function(){\n                events.clear();\n                writeMessage(context, \"Mouseover me!\");\n            }, false);\n    ```", "```js\n            canvas.addEventListener(\"mousemove\", function(){\n                var mousePos = events.getMousePos();\n                events.clear();\n\n                if (mousePos !== null) {\n                    message = \"Mouse position: \" + mousePos.x + \",\" + mousePos.y;\n                    writeMessage(context, message);\n                }\n            }, false);\n    ```", "```js\n        // if we don't set the stage function,\n        // we'll have to manually start listening for events\n            events.listen();\n    ```", "```js\n            writeMessage(context, \"Mouseover me!\");\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        function writeMessage(context, message){\n            context.font = \"18pt Calibri\";\n            context.fillStyle = \"black\";\n            context.fillText(message, 10, 25);\n        }\n    ```", "```js\n        window.onload = function(){\n            var events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n            var message = \"\";\n    ```", "```js\n            events.setStage(function(){\n              this.clear();\n    ```", "```js\n                // draw blue triangle\n                this.beginRegion();\n                context.beginPath();\n                context.lineWidth = 4;\n                context.strokeStyle = \"black\";\n                context.fillStyle = \"#00D2FF\";\n                context.moveTo(50, 50);\n                context.lineTo(180, 80);\n                context.lineTo(80, 170);\n                context.closePath();\n                context.fill();\n                context.stroke();\n    ```", "```js\n                this.addRegionEventListener(\"mousemove\", function(){\n                    var mousePos = events.getMousePos();\n                    var mouseX = mousePos.x - 50;\n                    var mouseY = mousePos.y - 50;\n                    message = \"Triangle mouse Position: \" + mouseX + \",\" + mouseY;\n                });\n\n                this.addRegionEventListener(\"mouseout\", function(){\n                    message = \"Mouseout blue triangle!\";\n                });\n\n                this.closeRegion();\n    ```", "```js\n                // draw yellow rectangle\n                // this is an example of a shape\n                // with no event listeners\n                context.beginPath();\n                context.lineWidth = 4;\n                context.strokeStyle = \"black\";\n                context.fillStyle = \"yellow\";\n                context.rect(200, 65, 150, 75);\n                context.fill();\n                context.stroke();\n    ```", "```js\n                // draw red circle\n                this.beginRegion();\n                context.beginPath();\n                context.arc(450, canvas.height / 2, 70, 0, Math.PI * 2, true);\n                context.fillStyle = \"red\";\n                context.fill();\n                context.stroke();\n    ```", "```js\n                this.addRegionEventListener(\"mousedown\", function(){\n                    message = \"Mousedown red circle!\";\n                });\n                this.addRegionEventListener(\"mouseup\", function(){\n                    message = \"Mouseup red circle!\";\n                });\n                this.addRegionEventListener(\"mouseover\", function(){\n                    message = \"Mouseover red circle!\";\n                });\n                this.addRegionEventListener(\"mouseout\", function(){\n                    message = \"Mouseout red circle!\";\n                });\n\n                this.closeRegion();\n    ```", "```js\n          writeMessage(context, message);\n            });\n\n        // since we set the draw stage function, the listen()\n        // method is automatically called for us\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.552, user-scalable=no\"/>\n    ```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        function writeMessage(context, message){\n            context.font = \"18pt Calibri\";\n            context.fillStyle = \"black\";\n            context.fillText(message, 10, 25);\n        }\n    ```", "```js\n        window.onload = function(){\n            var events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n            var message = \"\";\n    ```", "```js\n            events.setStage(function(){\n          this.clear();\n    ```", "```js\n                // draw blue triangle\n                this.beginRegion();\n                context.beginPath();\n                context.lineWidth = 4;\n                context.strokeStyle = \"black\";\n                context.fillStyle = \"#00D2FF\";\n                context.moveTo(50, 50);\n                context.lineTo(180, 80);\n                context.lineTo(80, 170);\n                context.closePath();\n                context.fill();\n                context.stroke();\n    ```", "```js\n                this.addRegionEventListener(\"touchmove\", function(){\n                    var touchPos = events.getTouchPos();\n\n                    if (touchPos !== null) {\n                        var touchX = touchPos.x - 20;\n                        var touchY = touchPos.y - 50;\n\n                        message = \"Triangle touch position: \" + touchX + \",\" + touchY;\n                    }\n                });\n\n                this.closeRegion();\n    ```", "```js\n                // draw yellow rectangle\n                // this is an example of a shape\n                // with no event listeners\n                context.beginPath();\n                context.lineWidth = 4;\n                context.strokeStyle = \"black\";\n                context.fillStyle = \"yellow\";\n                context.rect(200, 65, 150, 75);\n                context.fill();\n                context.stroke();\n    ```", "```js\n                // draw red circle\n                this.beginRegion();\n                context.beginPath();\n                context.arc(450, canvas.height / 2, 70, 0, Math.PI * 2, true);\n                context.fillStyle = \"red\";\n                context.fill();\n                context.stroke();\n    ```", "```js\n                this.addRegionEventListener(\"touchstart\", function(){\n                    message = \"Touchstart red circle!\";\n                });\n\n                this.addRegionEventListener(\"touchend\", function(){\n                    message = \"Touchend red circle!\";\n                });\n\n                this.closeRegion();\n    ```", "```js\n          writeMessage(context, message);\n            });\n\n        // since we set the draw stage function, the listen()\n        // method is automatically called for us\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        function writeMessage(context, message){\n            context.font = \"18pt Calibri\";\n            context.fillStyle = \"black\";\n            context.fillText(message, 10, 25);\n        }\n    ```", "```js\n        /*\n         * loads the images and then calls the callback function\n         * with a hash of image objects when the images have loaded\n         */\n        function loadImages(sources, callback){\n            var loadedImages = 0;\n            var numImages = 0;\n            var images = {};\n            // get num of sources\n            for (var src in sources) {\n                numImages++;\n            }\n           // load images\n            for (var src in sources) {\n                images[src] = new Image();\n                images[src].onload = function(){\n            // call callback function() when images\n            // have loaded\n                    if (++loadedImages >= numImages) {\n                        callback(images);\n                    }\n                };\n                images[src].src = sources[src];\n            }\n        }\n    ```", "```js\n        function drawImages(images){\n            var events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n            var message = \"\";\n\n            events.setStage(function(){\n          this.clear();\n    ```", "```js\n                this.beginRegion();\n\n                context.drawImage(images.challengerImg, 50, 70, 240, 143);\n                // draw rectangular region for image\n                context.beginPath();\n                context.rect(50, 70, 240, 143);\n                context.closePath();\n\n                this.addRegionEventListener(\"mouseover\", function(){\n                    message = \"Dodge Challenger mouseover!\";\n                });\n                this.addRegionEventListener(\"mouseout\", function(){\n                    message = \"Dodge Challenger mouseout!\";\n                });\n                this.addRegionEventListener(\"mousedown\", function(){\n                    message = \"Dodge Challenger mousedown!\";\n                });\n                this.addRegionEventListener(\"mouseup\", function(){\n                    message = \"Dodge Challenger mouseup!\";\n                });\n                this.closeRegion();\n\n                this.beginRegion();\n                context.drawImage(images.cobraImg, 350, 50, 200, 150);\n                // draw rectangular region for image\u2029            context.beginPath();\n                context.rect(350, 50, 200, 150);\n                context.closePath();\n                this.addRegionEventListener(\"mouseover\", function(){\n                    message = \"AC Cobra mouseover!\";\n                });\n                this.addRegionEventListener(\"mouseout\", function(){\n                    message = \"AC Cobra mouseout!\";\n                });\n                this.addRegionEventListener(\"mousedown\", function(){\n                    message = \"AC Cobra mousedown!\";\n                });\n                this.addRegionEventListener(\"mouseup\", function(){\n                    message = \"AC Cobra mouseup!\";\n                });\n                this.closeRegion();\n\n                writeMessage(context, message);\n            });\n        }\n    ```", "```js\n        window.onload = function(){\n            var sources = {\n                challengerImg: \"challenger.jpg\",\n                cobraImg: \"cobra.jpg\"\n            };\n\n            loadImages(sources, drawImages);\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        function writeMessage(context, message){\n            context.font = \"18pt Calibri\";\n            context.fillStyle = \"black\";\n            context.fillText(message, 10, 25);\n        }\n    ```", "```js\n        window.onload = function(){\n            events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n\n            var rectX = canvas.width / 2 - 50;\n            var rectY = canvas.height / 2 - 25;\n            var draggingRect = false;\n            var draggingRectOffsetX = 0;\n            var draggingRectOffsetY = 0;\n    ```", "```js\n            events.setStage(function(){                    \n                // get the mouse position\n                var mousePos = this.getMousePos();\n\n                if (draggingRect) {\n                    rectX = mousePos.x - draggingRectOffsetX;\n                    rectY = mousePos.y - draggingRectOffsetY;\n                }\n    ```", "```js\n                // clear the canvas\n                this.clear();\n\n                writeMessage(context, \"Drag and drop the box...\");\n\n                this.beginRegion();\n\n                // draw the box\n                context.beginPath();\n                context.rect(rectX, rectY, 100, 50);\n                context.lineWidth = 4;\n                context.strokeStyle = \"black\";\n                context.fillStyle = \"#00D2FF\";\n                context.fill();\n                context.stroke();\n                context.closePath();\n\n                // attach event listeners\n                this.addRegionEventListener(\"mousedown\", function(){\n                    draggingRect = true;\n                    var mousePos = events.getMousePos();\n\n                    draggingRectOffsetX = mousePos.x - rectX;\n                    draggingRectOffsetY = mousePos.y - rectY;\n                });\n                this.addRegionEventListener(\"mouseup\", function(){\n                    draggingRect = false;\n                });\n                this.addRegionEventListener(\"mouseover\", function(){\n                    document.body.style.cursor = \"pointer\";\n                });\n                this.addRegionEventListener(\"mouseout\", function(){\n                    document.body.style.cursor = \"default\";\n                });\n\n                this.closeRegion();\n            });\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        function writeMessage(context, message){\n            context.font = \"18pt Calibri\";\n            context.fillStyle = \"black\";\n            context.fillText(message, 10, 25);\n        }\n    ```", "```js\n        function drawImage(challengerImg){\n            var events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n\n            var rectX = canvas.width / 2 - challengerImg.width / 2;\n            var rectY = canvas.height / 2 - challengerImg.height / 2;\n            var draggingRect = false;\n            var draggingRectOffsetX = 0;\n            var draggingRectOffsetY = 0;\n    ```", "```js\n            events.setStage(function(){\n                var mousePos = this.getMousePos();\n\n                if (draggingRect) {\n                    rectX = mousePos.x - draggingRectOffsetX;\n                    rectY = mousePos.y - draggingRectOffsetY;\n                }\n    ```", "```js\n                // clear the canvas\n                this.clear();\n                writeMessage(context, \"Drag and drop the car...\");\n    ```", "```js\n                this.beginRegion();\n                context.drawImage(challengerImg, rectX, rectY, challengerImg.width, challengerImg.height);\n                // draw rectangular region for image\n                context.beginPath();\n                context.rect(rectX, rectY, challengerImg.width, challengerImg.height);\n                context.closePath();\n\n                this.addRegionEventListener(\"mousedown\", function(){\n                    draggingRect = true;\n                    var mousePos = events.getMousePos();\n\n                    draggingRectOffsetX = mousePos.x - rectX;\n                    draggingRectOffsetY = mousePos.y - rectY;\n                });\n                this.addRegionEventListener(\"mouseup\", function(){\n                    draggingRect = false;\n                });\n                this.addRegionEventListener(\"mouseover\", function(){\n                    document.body.style.cursor = \"pointer\";\n                });\n                this.addRegionEventListener(\"mouseout\", function(){\n                    document.body.style.cursor = \"default\";\n                });\n\n                this.closeRegion();\n            });\n        }\n    ```", "```js\n        window.onload = function(){\n            // load image\n            challengerImg = new Image();\n            challengerImg.onload = function(){\n                drawImage(this);\n            };\n            challengerImg.src = \"challenger.jpg\";\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n    <script src=\"img/events.js\">\n    </script>\n    ```", "```js\n    <script>\n        /*\n         * loads the images and then calls the callback function\n         * with a hash of image objects  when the images have loaded\n         */\n        function loadImages(sources, callback){\n            var loadedImages = 0;\n            var numImages = 0;\n            var images = {};\n            // get num of sources\n            for (var src in sources) {\n                numImages++;\n            }\n            // load images\n            for (var src in sources) {\n                images[src] = new Image();\n                images[src].onload = function(){\n                    // call callback function when images\n                    // have loaded\n                    if (++loadedImages >= numImages) {\n                        callback(images);\n                    }\n                };\n                images[src].src = sources[src];\n            }\n        }\n    ```", "```js\n        function drawMagnifier(config){\n            var context = config.context;\n        var images = config.images;\n            var mousePos = config.mousePos;\n            var imageX = config.imageX;\n            var imageY = config.imageY;\n            var magWidth = config.magWidth;\n            var magHeight = config.magHeight;\n            var smallWidth = config.smallWidth;\n            var smallHeight = config.smallHeight;\n            var largeWidth = config.largeWidth;\n            var largeHeight = config.largeHeight;\n\n            /*\n             * sourceX and sourceY assume that the rectangle we are\n             * cropping out of the large image exists within the large\n             * image. We'll have to make some adjustments for the\n             * cases where the magnifier goes past the edges of the * large image\n             */\n            var sourceX = ((mousePos.x - imageX) * largeWidth / smallWidth) - magWidth / 2;\n            var sourceY = ((mousePos.y - imageY) * largeHeight / smallHeight) - magHeight / 2;\n            var destX = mousePos.x - magWidth / 2;\n            var destY = mousePos.y - magHeight / 2;\n            var viewWidth = magWidth;\n            var viewHeight = magHeight;\n            var viewX = destX;\n            var viewY = destY;\n            var drawMagImage = true;\n            // boundary checks and adjustments for cases\n            // where the magnifyer goes past the edges of the large image\n            if (sourceX < 0) {\n                if (sourceX > -1 * magWidth) {\n                    var diffX = -1 * sourceX;\n                    viewX += diffX;\n                    viewWidth -= diffX;\n                    sourceX = 0;\n                }\n                else {\n                    drawMagImage = false;\n                }\n            }\n\n            if (sourceX > largeWidth - magWidth) {\n                if (sourceX < largeWidth) {\n                    viewWidth = largeWidth - sourceX;\n                }\n                else {\n                    drawMagImage = false;\n                }\n            }\n\n            if (sourceY < 0) {\n                if (sourceY > -1 * magHeight) {\n                    var diffY = -1 * sourceY;\n                    viewY += diffY;\n                    viewHeight -= diffY;\n                    sourceY = 0;\n                }\n                else {\n                    drawMagImage = false;\n                }\n            }\n\n            if (sourceY > largeHeight - magHeight) {\n                if (sourceY < largeHeight) {\n                    viewHeight = largeHeight - sourceY;\n                }\n                else {\n                    drawMagImage = false;\n                }\n            }\n            // draw white magnifier background\n            context.beginPath();\n            context.fillStyle = \"white\";\n            context.fillRect(destX, destY, magWidth, magHeight);\n\n            // draw image\n            if (drawMagImage) {\n                context.beginPath();\n                context.drawImage(images.cobraLargeImg, sourceX, sourceY, viewWidth, viewHeight, viewX, viewY, viewWidth, viewHeight);\n            }\n\n            // draw magnifier border\n            context.beginPath();\n            context.lineWidth = 2;\n            context.strokeStyle = \"black\";\n            context.strokeRect(destX, destY, magWidth, magHeight);\n        }\n    ```", "```js\n        function drawImages(images){\n            var events = new Events(\"myCanvas\");\n            var canvas = events.getCanvas();\n            var context = events.getContext();\n\n            // define magnifier dependencies\n            var imageX = canvas.width / 2 - images.cobraSmallImg.width / 2;\n            var imageY = canvas.height / 2 - images.cobraSmallImg.height / 2;\n            var magWidth = 200;\n            var magHeight = 150;\n            var smallWidth = images.cobraSmallImg.width;\n            var smallHeight = images.cobraSmallImg.height;\n            var largeWidth = images.cobraLargeImg.width;\n            var largeHeight = images.cobraLargeImg.height;\n    ```", "```js\n            events.setStage(function(){\n                var mousePos = events.getMousePos();\n                this.clear();\n                context.drawImage(images.cobraSmallImg, imageX, imageY, smallWidth, smallHeight);\n                // draw border around image\n                context.beginPath();\n                context.lineWidth = 2;\n                context.strokeStyle = \"black\";\n                context.strokeRect(imageX, imageY, smallWidth, smallHeight);\n                context.closePath();\n\n                if (mousePos !== null) {\n                    drawMagnifier({\n                        context: context,\n              images: images,\n                        mousePos: mousePos,\n                        imageX: imageX,\n                        imageY: imageY,\n                        magWidth: magWidth,\n                        magHeight: magHeight,\n                        smallWidth: smallWidth,\n                        smallHeight: smallHeight,\n                        largeWidth: largeWidth,\n                        largeHeight: largeHeight\n                    });\n                }\n            });\n    ```", "```js\n            canvas.addEventListener(\"mouseout\", function(){\n                events.stage();\n            }, false);\n        }\n    ```", "```js\n        window.onload = function(){\n            var sources = {\n                cobraSmallImg: \"cobra_280x210.jpg\",\n                cobraLargeImg: \"cobra_800x600.jpg\"\n            };\n\n            loadImages(sources, drawImages);\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"600\" height=\"250\" style=\"border:1px solid black;\">\n    </canvas>\n    ```", "```js\n        var sourceX = ((mousePos.x - imageX) * largeWidth / smallWidth) - magWidth / 2;\n        var sourceY = ((mousePos.y - imageY) * largeHeight / smallHeight) - magHeight / 2;\n```", "```js\nvar destX = mousePos.x - magWidth / 2;\nvar destY = mousePos.y - magHeight / 2;\n```", "```js\n            <style>\n                canvas {\n                    border: 1px solid black;\n                    font-family: \u201cHelvetica Neue\u201d, \u201cArial\u201d, \u201cLucida Grande\u201d, \u201cLucida Sans Unicode\u201d, \u201cMicrosoft YaHei\u201d, sans-serif;\n                    font-size: 13px;\n                    line-height: 1.5;\n                    color: #474747;\n                }\n\n                #toolbar {\n                    width: 590px;\n                    border: 1px solid black;\n                    border-bottom: 0px;\n                    padding: 5px;\n                    background-color: #f8f8f8;\n                }\n\n                input[type = \u2018text\u2019] {\n                    width: 30px;\n    \t\t\t\tmargin: 0px 5px 0px 5px;\n                }\n                label {\n                    margin-left: 40px;\n                }\n\n                label:first-of-type {\n                    margin-left: 0px;\n                }\n\n                input[type = \u2018button\u2019] {\n                    float: right;\n                }\n\n                #colorSquare {\n                    position: relative;\n                    display: inline-block;\n                    width: 20px;\n                    height: 20px;\n                    background-color: blue;\n                    top: 4px;\n                }\n            </style>\n    ```", "```js\n    <script src=\u201devents.js\u201d>\n    </script>\n    ```", "```js\n            <script>\n                function addPoint(events, points){\n                    var context = events.getContext();\n                    var drawingPos = events.getMousePos();\n\n                    if (drawingPos !== null) {\n                        points.push(drawingPos);\n                    }\n                }\n    ```", "```js\n                function drawPath(canvas, points, canvasImg){\n                    var context = canvas.getContext(\u201c2d\u201d);\n\n                    // clear canvas\n                    context.clearRect(0, 0, canvas.width, canvas.height);\n\n                    // redraw canvas before path\n                    context.drawImage(canvasImg, 0, 0, canvas.width, canvas.height);\n\n                    // draw patch\n                    context.beginPath();\n                    context.lineTo(points[0].x, points[0].y);\n                    for (var n = 1; n < points.length; n++) {\n                        var point = points[n];\n                        context.lineTo(point.x, point.y);\n                    }\n                    context.stroke();\n                }\n    ```", "```js\n                function updateColorSquare(){\n                    var red = document.getElementById(\u201cred\u201d).value;\n                    var green = document.getElementById(\u201cgreen\u201d).value;\n                    var blue = document.getElementById(\u201cblue\u201d).value;\n\n                    var colorSquare = document.getElementById(\u201ccolorSquare\u201d);\n                    colorSquare.style.backgroundColor = \u201crgb(\u201c + red + \u201c,\u201d + green + \u201c,\u201d + blue + \u201c)\u201d;\n                }\n    ```", "```js\n                function getCanvasImg(canvas){\n                    var img = new Image();\n                    img.src = canvas.toDataURL();\n                    return img;\n                }\n    ```", "```js\n                window.onload = function(){\n                    var events = new Events(\u201cmyCanvas\u201d);\n                    var canvas = events.getCanvas();\n                    var context = events.getContext();\n                    var isMouseDown = false;\n                    var canvasImg = getCanvasImg(canvas);\n                    var points = [];\n\n                    // initialize drawing params\n                    var red = document.getElementById(\u201cred\u201d).value;\n                    var green = document.getElementById(\u201cgreen\u201d).value;\n                    var blue = document.getElementById(\u201cblue\u201d).value;\n                    var size = document.getElementById(\u201csize\u201d).value;\n    ```", "```js\n                    // attach listeners\n                    document.getElementById(\u201cred\u201d).addEventListener(\u201ckeyup\u201d, function(evt){\n                        updateColorSquare();\n                    }, false);\n\n                    document.getElementById(\u201cgreen\u201d).addEventListener(\u201ckeyup\u201d, function(evt){\n                        updateColorSquare();\n                    }, false);\n\n                    document.getElementById(\u201cblue\u201d).addEventListener(\u201ckeyup\u201d, function(evt){\n                        updateColorSquare();\n                    }, false);\n    ```", "```js\n                    document.getElementById(\u201cclearButton\u201d).addEventListener(\u201cclick\u201d, function(evt){\n                        events.clear();\n                        points = [];\n                        canvasImg = getCanvasImg(canvas);\n                    }, false);\n    ```", "```js\n                    document.getElementById(\u201csaveButton\u201d).addEventListener(\u201cclick\u201d, function(evt){\n                        // open new window with saved image so user\n                        // can right click and save to their computer\n                        window.open(canvas.toDataURL());\n                    }, false);\n    ```", "```js\n                    canvas.addEventListener(\u201cmousedown\u201d, function(){\n                        var drawingPos = events.getMousePos();\n\n                        // update drawing params\n                        red = document.getElementById(\u201cred\u201d).value;\n                        green = document.getElementById(\u201cgreen\u201d).value;\n                        blue = document.getElementById(\u201cblue\u201d).value;\n                        size = document.getElementById(\u201csize\u201d).value;\n\n                        // start drawing path\n                        context.strokeStyle = \u201crgb(\u201c + red + \u201c,\u201d + green + \u201c,\u201d + blue + \u201c)\u201d;\n                        context.lineWidth = size;\n                        context.lineJoin = \u201cround\u201d;\n                        context.lineCap = \u201cround\u201d;\n                        addPoint(events, points);\n                        isMouseDown = true;\n                    }, false);\n    ```", "```js\n                    canvas.addEventListener(\u201cmouseup\u201d, function(){\n                        isMouseDown = false;\n                        if (points.length > 0) {\n                            drawPath(this, points, canvasImg);\n                            // reset points\n                            points = [];\n                        }\n                        canvasImg = getCanvasImg(this);\n                    }, false);\n    ```", "```js\n                    canvas.addEventListener(\u201cmouseout\u201d, function(){\n                        if (document.createEvent) {\n                            var evt = document.createEvent(\u2018MouseEvents\u2019);\n                            evt.initEvent(\u201cmouseup\u201d, true, false);\n                            this.dispatchEvent(evt);\n                        }\n                        else {\n                            this.fireEvent(\u201conmouseup\u201d);\n                        }\n                    }, false);\n    ```", "```js\n                    events.setStage(function(){\n                        if (isMouseDown) {\n                            addPoint(this, points);\n                            drawPath(canvas, points, canvasImg);\n                        }\n                    });\n                };\n            </script>\n    ```", "```js\n        <body>\n            <div id=\u201dtoolbar\u201d>\n                <label>\n                    Color\n                </label>\n                R: <input type=\u201dtext\u201d id=\u201dred\u201d maxlength=\u201d3\u201d class=\u201dshort\u201d value=\u201d0\u201d>G: <input type=\u201dtext\u201d id=\u201dgreen\u201d maxlength=\u201d3\u201d class=\u201dshort\u201d value=\u201d0\u201d>B: <input type=\u201dtext\u201d id=\u201dblue\u201d maxlength=\u201d3\u201d class=\u201dshort\u201d value=\u201d255\u201d>\n                <div id=\u201dcolorSquare\u201d>\n                </div>\n                <label>\n                    Size:\n                </label>\n                <input type=\u201dtext\u201d id=\u201dsize\u201d maxlength=\u201d3\u201d class=\u201dshort\u201d value=\u201d20\u201d>px<input type=\u201dbutton\u201d id=\u201dclearButton\u201d value=\u201dClear\u201d><input type=\u201dbutton\u201d id=\u201dsaveButton\u201d value=\u201dSave\u201d>\n            </div>\n            <canvas id=\u201dmyCanvas\u201d width=\u201d600\u201d height=\u201d250\u201d>\n            </canvas>\n        </body>\n    ```"]