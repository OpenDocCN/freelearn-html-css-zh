["```js\n    /*\n     * Actor class should have no knowledge\n     * of the Level or HealthBar classes to\n     * keep it decoupled\n     */\n    function Actor(config){\n        this.controller = config.controller;\n        this.normalSpriteSheet = config.normalSpriteSheet;\n        this.hitSpriteSheet = config.hitSpriteSheet;\n        this.x = config.x; // absolute x\n        this.y = config.y; // absolute y\n        this.playerSpeed = config.playerSpeed; // px / s\n        this.motions = config.motions;\n        this.startMotion = config.startMotion;\n        this.facingRight = config.facingRight;\n        this.moving = config.moving;\n        this.spriteInterval = config.spriteInterval; // ms\n        this.maxHealth = config.maxHealth;\n        this.attackRange = config.attackRange;\n        this.minAttackInterval = config.minAttackInterval;\n\n        this.SPRITE_SIZE = 144;\n        this.FADE_RATE = 1; // full fade in 1s\n        this.spriteSheet = this.normalSpriteSheet;\n        this.vx = 0;\n        this.vy = 0;\n        this.spriteSeq = 0;\n        this.motion = this.startMotion;\n        this.lastMotion = this.motion;\n        this.airborne = false;\n        this.attacking = false;\n        this.canAttack = true;\n        this.health = this.maxHealth;\n        this.alive = true;\n        this.opacity = 1;\n        this.timeSinceLastSpriteFrame = 0;\n    }\n    ```", "```js\n    Actor.prototype.attack = function(){\n        this.attacking = true;\n        this.canAttack = false;\n        var that = this;\n        setTimeout(function(){\n           that.canAttack = true;\n        }, this.minAttackInterval);\n    };\n    ```", "```js\n    Actor.prototype.stop = function(){\n        this.moving = false;\n    };\n    ```", "```js\n    Actor.prototype.isFacingRight = function(){\n        return this.facingRight;\n    };\n    ```", "```js\n    Actor.prototype.moveRight = function(){\n        this.moving = true;\n        this.facingRight = true;\n    };\n    ```", "```js\n    Actor.prototype.moveLeft = function(){\n        this.moving = true;\n        this.facingRight = false;\n    };\n    ```", "```js\n    Actor.prototype.jump = function(){\n        if (!this.airborne) {\n            this.airborne = true;\n            this.vy = -1;\n        }\n    };\n    ```", "```js\n    Actor.prototype.draw = function(pos){\n        var context = this.controller.view.context;\n        var sourceX = this.spriteSeq * this.SPRITE_SIZE;\n        var sourceY = this.motion.index * this.SPRITE_SIZE;\n\n        context.save();\n        context.translate(pos.x, pos.y);\n\n        if (this.facingRight) {\n            context.translate(this.SPRITE_SIZE, 0);\n            context.scale(-1, 1);\n        }\n        context.globalAlpha = this.opacity;\n        context.drawImage(this.spriteSheet, sourceX, sourceY, this.SPRITE_SIZE, this.SPRITE_SIZE, 0, 0, this.SPRITE_SIZE, this.SPRITE_SIZE);\n        context.restore();\n    };\n    ```", "```js\n    Actor.prototype.fade = function(){\n      var opacityChange = this.controller.anim.getTimeInterval() * this.FADE_RATE / 1000;\n        this.opacity -= opacityChange;\n        if (this.opacity < 0) {\n            this.opacity = 0;\n        }\n    };\n    ```", "```js\n    Actor.prototype.updateSpriteMotion = function(){\n      // if attack sequence has finished, set attacking = false\n        if (this.attacking && this.spriteSeq == this.motion.numSprites - 1) {\n            this.attacking = false;\n        }\n\n        if (this.attacking) {\n            this.motion = this.motions.ATTACKING;\n        }\n        else {\n            if (this.airborne) {\n                this.motion = this.motions.AIRBORNE;\n            }\n            else {\n                this.vy = 0;\n                if (this.moving) {\n                    this.motion = this.motions.RUNNING;\n                }\n                else {\n                    this.motion = this.motions.STANDING;\n                }\n            }\n        }\n    };\n    ```", "```js\n    Actor.prototype.updateSpriteSeqNum = function() {\n        var anim = this.controller.anim;\n        this.timeSinceLastSpriteFrame += anim.getTimeInterval();\n\n        if (this.timeSinceLastSpriteFrame > this.spriteInterval) {\n            if (this.spriteSeq < this.motion.numSprites - 1) {\n                this.spriteSeq++;\n            }\n            else {\n                if (this.motion.loop) {\n                    this.spriteSeq = 0;\n                }\n            }\n\n            this.timeSinceLastSpriteFrame = 0;\n        }\n\n        if (this.motion != this.lastMotion) {\n            this.spriteSeq = 0;\n            this.lastMotion = this.motion;\n        }\n    };\n    ```", "```js\n    Actor.prototype.damage = function(){\n        this.health = this.health <= 0 ? 0 : this.health - 1;\n\n        this.spriteSheet = this.hitSpriteSheet;\n        var that = this;\n        setTimeout(function(){\n            that.spriteSheet = that.normalSpriteSheet;\n        }, 200);\n    };\n    ```", "```js\n    Actor.prototype.getCenter = function(){\n        return {\n            x: Math.round(this.x) + this.SPRITE_SIZE / 2,\n            y: Math.round(this.y) + this.SPRITE_SIZE / 2\n        };\n    };\n    ```", "```js\n    /*\n     * Level class should have no knowledge\n     * of the Actor or HealthBar classes to\n     * keep it decoupled\n     */\n    function Level(config){\n      this.controller = config.controller;\n        this.x = config.x;\n        this.y = config.y;\n        this.leftBounds = config.leftBounds;\n        this.rightBounds = config.rightBounds;\n      this.boundsData = null;\n        this.GRAVITY = 3; // px / second^2\n        this.MID_RGB_COMPONENT_VALUE = 128; \n        this.LEVEL_WIDTH = 6944;\n\n        this.setBoundsData();\n    }\n    ```", "```js\n    Level.prototype.setBoundsData = function(){\n      var controller = this.controller;\n      var canvas = controller.view.canvas;\n      var context = controller.view.context;\n        canvas.width = 6944;\n        context.drawImage(controller.images.levelBounds, 0, 0);\n        imageData = context.getImageData(0, 0, 6944, 600);\n        this.boundsData = imageData.data;\n        canvas.width = 900;\n    };\n    ```", "```js\n    Level.prototype.draw = function(){\n      var context = this.controller.view.context;\n        context.drawImage(this.controller.images.background, 0, 0);\n        context.drawImage(this.controller.images.level, this.x, this.y);\n    };\n    ```", "```js\n    Level.prototype.getZoneInfo = function(pos){\n      var x = pos.x;\n      var y = pos.y;\n        var red = this.boundsData[((this.LEVEL_WIDTH * y) + x) * 4];\n        var green = this.boundsData[((this.LEVEL_WIDTH * y) + x) * 4 + 1];\n        var blue = this.boundsData[((this.LEVEL_WIDTH * y) + x) * 4 + 2];\n\n        var inBounds = false;\n        var levitating = false;\n\n        /*\n         * COLOR KEY\n         *\n         * PINK: 255 0   255\n         * CYAN: 0   255 255\n         *\n         * COLOR NOTATION\n         *\n         * PINK: player is in bounds and can jump\n         * CYAN: player is in bounds and is levitating\n         */\n      var mid = this.MID_RGB_COMPONENT_VALUE;\n        if ((red > mid && green < mid && blue > mid) || (red < mid && green > mid && blue > mid)) {\n            inBounds = true;\n        }\n        if (red < mid && green > mid && blue > mid) {\n            levitating = true;\n        }\n\n        return {\n            inBounds: inBounds,\n            levitating: levitating\n        };\n    };\n    ```", "```js\n    /*\n     * HealthBar class should have no knowledge\n     * of the Actor or Level classes to\n     * keep it decoupled\n     */\n    function HealthBar(config){\n      this.controller = config.controller;\n        this.maxHealth = config.maxHealth;\n        this.x = config.x;\n        this.y = config.y;\n        this.maxWidth = config.maxWidth;\n        this.height = config.height;\n\n        this.health = this.maxHealth;\n    }\n    ```", "```js\n    HealthBar.prototype.setHealth = function(health){\n        this.health = health;\n    };\n    ```", "```js\n    HealthBar.prototype.draw = function(){\n      var context = this.controller.view.context;\n        context.beginPath();\n        context.rect(this.x, this.y, this.maxWidth, this.height);\n        context.fillStyle = \"black\";\n        context.fill();\n        context.closePath();\n\n        context.beginPath();\n        var width = this.maxWidth * this.health / this.maxHealth;\n        context.rect(this.x, this.y, width, this.eight);\n        context.fillStyle = \"red\";\n        context.fill();\n        context.closePath();\n    };\n\n    ```", "```js\n    /*\n     * Game controller\n     * \n     * The controller is responsible for instantiating\n     * the view and the model, initializing the game,\n     * controlling the game state, and managing keyboard events\n     */\n    function Controller(canvasId){\n        this.imageSources = {\n            levelBounds: \"img/level_bounds.png\",\n            level: \"img/level.png\",\n            heroSprites: \"img/hero_sprites.png\",\n            heroHitSprites: \"img/hero_hit_sprites.png\",\n            badGuySprites: \"img/bad_guy_sprites.png\",\n            badGuyHitSprites: \"img/bad_guy_hit_sprites.png\",\n            background: \"img/background.png\",\n            readyScreen: \"img/readyScreen.png\",\n            gameoverScreen: \"img/gameoverScreen.png\",\n            winScreen: \"img/winScreen.png\"\n        };\n        this.images = {};\n\n        this.states = {\n            INIT: \"INIT\",\n            READY: \"READY\",\n            PLAYING: \"PLAYING\",\n            WON: \"WON\",\n            GAMEOVER: \"GAMEOVER\"\n        };\n\n      this.keys = {\n        ENTER: 13,\n        UP: 38,\n        LEFT: 37,\n        RIGHT: 39,\n        A: 65 \n      };\n\n      this.anim = new Animation(canvasId);\n        this.state = this.states.INIT;\n        this.model = new Model(this);\n        this.view = new View(this);\n      this.avgFps = 0;\n      this.leftKeyup = true;\n      this.rightKeyup = true;\n        this.addKeyboardListeners();\n        this.loadImages();\n    }\n    ```", "```js\n    Controller.prototype.loadImages = function(){\n      /*\n       * we need to load the loading image first\n       * so go ahead and insert it into the dom\n       * and them load the rest of the images\n       */\n      this.view.canvas.style.background = \"url('img/loadingScreen.png')\";\n\n        var that = this;\n        var loadedImages = 0;\n        var numImages = 0;\n        for (var src in this.imageSources) {\n            numImages++;\n        }\n        for (var src in this.imageSources) {\n            this.images[src] = new Image();\n            this.images[src].onload = function(){\n                if (++loadedImages >= numImages) {\n                    that.initGame();\n                }\n            };\n            this.images[src].src = this.imageSources[src];\n        }\n    };\n    ```", "```js\n    Controller.prototype.addKeyboardListeners = function(){\n        var that = this;\n        document.onkeydown = function(evt){\n            that.handleKeydown(evt);\n        };\n        document.onkeyup = function(evt){\n            that.handleKeyup(evt);\n        };\n    };\n    ```", "```js\n    Controller.prototype.handleKeyup = function(evt){\n        keycode = ((evt.which) || (evt.keyCode));\n\n        switch (keycode) {\n            case this.keys.LEFT: \n                this.leftKeyup = true;\n                if (this.leftKeyup && this.rightKeyup) {\n                    this.model.hero.stop();\n                }\n                break;\n\n            case this.keys.UP: \n                break;\n\n            case this.keys.RIGHT: \n                this.rightKeyup = true;\n                if (this.leftKeyup && this.rightKeyup) {\n                    this.model.hero.stop();\n                }\n                break;\n        }\n    };\n    ```", "```js\n    Controller.prototype.handleKeydown = function(evt){\n        var that = this;\n        keycode = ((evt.which) || (evt.keyCode));\n        switch (keycode) {\n            case this.keys.ENTER: // enter\n                if (this.state == this.states.READY) {\n                    this.state = this.states.PLAYING;\n                    // start animation\n                    this.anim.start();\n                }\n                else if (this.state == this.states.GAMEOVER || this.state == this.states.WON) {\n                    this.resetGame();\n                    this.state = this.states.PLAYING;\n                }\n                break;\n            case this.keys.LEFT: \n                this.leftKeyup = false;\n                this.model.hero.moveLeft();\n                break;\n\n            case this.keys.UP: \n                this.model.hero.jump();\n                break;\n\n            case this.keys.RIGHT: \n                this.rightKeyup = false;\n                this.model.hero.moveRight();\n                break;\n\n            case this.keys.A: // attack\n              var model = this.model;\n          var hero = model.hero; \n                hero.attack();\n                setTimeout(function(){\n                    for (var n = 0; n < model.badGuys.length; n++) {\n                        (function(){\n                            var badGuy = model.badGuys[n];\n                            if (model.nearby(hero, badGuy)\n                  && ((badGuy.x - hero.x > 0 && hero.isFacingRight()) || (hero.x - badGuy.x > 0 && !hero.isFacingRight()))) {\n                                badGuy.damage();\n                            }\n                        })();\n                    }\n                }, 200);\n                break;\n        }\n    };\n    ```", "```js\n    Controller.prototype.initGame = function(){\n      var model = this.model;\n      var view = this.view;\n        model.initLevel();\n        model.initHero();\n        model.initBadGuys();\n        model.initHealthBar();\n\n        // set stage method\n        this.anim.setStage(function(){\n            model.updateStage();\n            view.stage();\n        });\n\n        // game is now ready to play\n        this.state = this.states.READY;\n        view.drawScreen(this.images.readyScreen);\n    };\n    ```", "```js\n    Controller.prototype.resetGame = function(){\n        var model = this.model;\n        model.level = null;\n        model.hero = null;\n        model.healthBar = null;\n        model.badGuys = [];\n\n        model.initLevel();\n        model.initHero();\n        model.initBadGuys();\n        model.initHealthBar();\n    };\n    ```", "```js\n    /*\n     * Game model\n     * \n     * The model is responsible for initializing and\n     * updating the hero, level, bad guys, and health bar\n     */\n    function Model(controller){\n        this.controller = controller;\n        this.healthBar = null;\n        this.hero = null;\n        this.level = null;\n        this.badGuys = []; // array of bad guys\n        this.heroCanvasPos = {};\n    }\n    ```", "```js\n    Model.prototype.removeDefeatedBadGuys = function(){\n        for (var n = 0; n < this.badGuys.length; n++) {\n            var badGuy = this.badGuys[n];\n            if (!badGuy.alive && badGuy.opacity == 0) {\n                this.badGuys.splice(n, 1);\n            }\n        }\n    };\n    ```", "```js\n    Model.prototype.updateBadGuys = function(){\n        var that = this;\n        for (var n = 0; n < this.badGuys.length; n++) {\n            var badGuy = this.badGuys[n];\n            if (badGuy.alive\n          && this.hero.alive\n          && !badGuy.attacking\n          && badGuy.canAttack \n          && this.nearby(this.hero, badGuy)\n          && ((badGuy.x - this.hero.x > 0 && !badGuy.isFacingRight()) || (this.hero.x - badGuy.x > 0 && badGuy.isFacingRight()))) {\n          badGuy.attack();\n                setTimeout(function(){\n                    that.hero.damage();\n                }, 200);\n            }\n            this.updateActor(badGuy);\n        }\n    };\n    ```", "```js\n    Model.prototype.updateStage = function(){\n        var controller = this.controller;\n        var canvas = controller.view.canvas;\n        if (controller.state == controller.states.PLAYING) {\n            this.removeDefeatedBadGuys();\n\n            // if hero dies then set state to GAMEOVER\n            if (!this.hero.alive && controller.state == controller.states.PLAYING) {\n                controller.state = controller.states.GAMEOVER;\n            }\n\n            // if all bad guys defeated, change state to WON\n            if (this.badGuys.length == 0) {\n                controller.state = controller.states.WON;\n            }\n\n            // move bad guys around\n            this.moveBadGuys();\n\n            // update level position\n            this.updateLevel();\n\n        /*\n         * update bad guys and also see\n         * if they can attack the hero\n         */\n            this.updateBadGuys();\n\n            // update hero\n            var oldHeroX = this.hero.x;\n            this.updateActor(this.hero);\n            this.updateHeroCanvasPos(oldHeroX);\n            // update health bar\n            this.healthBar.setHealth(this.hero.health);\n\n            // if hero falls into a hole set health to zero\n            if (this.hero.y > canvas.height - this.hero.spriteSize * 2 / 3) {\n                this.hero.health = 0;\n            }\n\n            // update avg fps\n            var anim = controller.anim;\n            if (anim.getFrame() % 20 == 0) {\n                this.controller.avgFps = Math.round(anim.getFps() * 10) / 10;\n            }\n        }\n    };\n    ```", "```js\n    Model.prototype.initHealthBar = function(){\n        this.healthBar = new HealthBar({\n            controller: this.controller,\n            maxHealth: this.hero.maxHealth,\n            x: 10,\n            y: 10,\n            maxWidth: 150,\n            height: 20\n        });\n    };\n    ```", "```js\n    Model.prototype.initLevel = function(){\n        this.level = new Level({\n            controller: this.controller,\n            x: 0,\n            y: 0,\n            leftBounds: 100,\n            rightBounds: 500\n        });\n    };\n    ```", "```js\n    \tModel.prototype.initHero = function(){\n        // initialize Hero\n        var heroMotions = {\n            STANDING: {\n                index: 0,\n                numSprites: 5,\n                loop: true\n            },\n            AIRBORNE: {\n                index: 1,\n                numSprites: 5,\n                loop: false\n            },\n            RUNNING: {\n                index: 2,\n                numSprites: 6,\n                loop: true\n            },\n            ATTACKING: {\n                index: 3,\n                numSprites: 5,\n                loop: false\n            }\n        };\n\n        this.hero = new Actor({\n            controller: this.controller,\n            normalSpriteSheet: this.controller.images.heroSprites,\n            hitSpriteSheet: this.controller.images.heroHitSprites,\n            x: 30,\n            y: 381,\n            playerSpeed: 300,\n            motions: heroMotions,\n            startMotion: heroMotions.STANDING,\n            facingRight: true,\n            moving: false,\n            spriteInterval: 90,\n            maxHealth: 3,\n            attackRange: 100,\n            minAttackInterval: 200\n        });\n\n        this.heroCanvasPos = {\n            x: this.hero.x,\n            y: this.hero.y\n        };\n    };\n    ```", "```js\n    Model.prototype.initBadGuys = function(){\n        // notice that AIRBORNE and RUNNING\n        // both use the same sprite animation\n        var badGuyMotions = {\n            RUNNING: {\n                index: 0,\n                numSprites: 6,\n                loop: true\n            },\n            AIRBORNE: {\n                index: 0,\n                numSprites: 4,\n                loop: false\n            },\n            ATTACKING: {\n                index: 1,\n                numSprites: 4,\n                loop: false\n            }\n        };\n\n        var badGuyStartConfig = [{\n            x: 600,\n            facingRight: true\n        }, {\n            x: 1460,\n            facingRight: true\n        }, {\n            x: 2602,\n            facingRight: true\n        }, {\n            x: 3000,\n            facingRight: true\n        }, {\n            x: 6402,\n            facingRight: true\n        }, {\n            x: 6602,\n            facingRight: true\n        }];\n\n        for (var n = 0; n < badGuyStartConfig.length; n++) {\n            this.badGuys.push(new Actor({\n                controller: this.controller,\n                normalSpriteSheet: this.controller.images.badGuySprites,\n                hitSpriteSheet: this.controller.images.badGuyHitSprites,\n                x: badGuyStartConfig[n].x,\n                y: 381,\n                playerSpeed: 100,\n                motions: badGuyMotions,\n                startMotion: badGuyMotions.RUNNING,\n                facingRight: badGuyStartConfig[n].facingRight,\n                moving: true,\n                spriteInterval: 160,\n                maxHealth: 3,\n                attackRange: 100,\n                minAttackInterval: 2000\n            }));\n        }\n    };\n    ```", "```js\n    Model.prototype.moveBadGuys = function(){\n        var level = this.level;\n        for (var n = 0; n < this.badGuys.length; n++) {\n            var badGuy = this.badGuys[n];\n\n            if (badGuy.alive) {\n                if (badGuy.isFacingRight()) {\n                    badGuy.x += 5;\n                    if (!level.getZoneInfo(badGuy.getCenter()).inBounds) {\n                        badGuy.facingRight = false;\n                    }\n                    badGuy.x -= 5;\n                }\n\n                else {\n                    badGuy.x -= 5;\n                    if (!level.getZoneInfo(badGuy.getCenter()).inBounds) {\n                        badGuy.facingRight = true;\n                    }\n                    badGuy.x += 5;\n                }\n            }\n        }\n    };\n    ```", "```js\n    Model.prototype.updateLevel = function(){\n        var hero = this.hero;\n        var level = this.level;\n        level.x = -hero.x + this.heroCanvasPos.x;\n    };\n    ```", "```js\n    Model.prototype.updateHeroCanvasPos = function(oldHeroX){\n        this.heroCanvasPos.y = this.hero.y;\n        var heroDiffX = this.hero.x - oldHeroX;\n        var newHeroCanvasPosX = this.heroCanvasPos.x + heroDiffX;\n        // if moving right and not past right bounds\n        if (heroDiffX > 0 && newHeroCanvasPosX < this.level.rightBounds) {\n            this.heroCanvasPos.x += heroDiffX;\n        }\n        // if moving left and not past left bounds\n        if (heroDiffX < 0 && newHeroCanvasPosX > this.level.leftBounds) {\n            this.heroCanvasPos.x += heroDiffX;\n        }\n\n      if (this.hero.x < this.level.leftBounds) {\n        this.heroCanvasPos.x = this.hero.x;\n      }\n    };\n    ```", "```js\n    Model.prototype.updateActor = function(actor){\n        if (actor.alive) {\n            if (actor.health <= 0 || actor.y + actor.SPRITE_SIZE > this.controller.view.canvas.height) {\n                actor.alive = false;\n            }\n            else {\n          this.updateActorVY(actor);            \n          this.updateActorY(actor);\n          this.updateActorX(actor);\n\n                actor.updateSpriteMotion();\n          actor.updateSpriteSeqNum();\n            }\n        }\n        else {\n            if (actor.opacity > 0) {\n                actor.fade();\n            }\n        }\n    };\n    ```", "```js\n    Model.prototype.updateActorVY = function(actor) {\n      var anim = this.controller.anim;\n      var level = this.level;\n\n        // apply gravity (+y)\n        var gravity = this.controller.model.level.GRAVITY;\n        var speedIncrementEachFrame = gravity * anim.getTimeInterval() / 1000; // pixels / second\n        actor.vy += speedIncrementEachFrame;        \n\n        // apply levitation (-y)\n        if (level.getZoneInfo(actor.getCenter()).levitating) {\n            actor.vy = (65 - actor.y) / 200;\n        }\n    };\n    ```", "```js\n    Model.prototype.updateActorY = function(actor) {\n      var anim = this.controller.anim;\n      var level = this.level;\n        var oldY = actor.y;\n        actor.y += actor.vy * anim.getTimeInterval();\n\n        if (level.getZoneInfo(actor.getCenter()).inBounds) {\n            actor.airborne = true;\n        }\n        else {\n            actor.y = oldY;\n\n            // handle case where player has fallen to the ground\n            // if vy is less than zero, this means the player has just\n            // hit the ceiling, in which case we can simply leave\n            // this.y as oldY to prevent the player from going\n            // past the ceiling\n            if (actor.vy > 0) {\n                while (level.getZoneInfo(actor.getCenter()).inBounds){\n                    actor.y++;\n                }\n                actor.y--;\n                actor.vy = 0;\n                actor.airborne = false;\n            }\n        }\n    };\n    ```", "```js\n    Model.prototype.updateActorX = function(actor) {\n      var anim = this.controller.anim;\n      var level = this.level;\n      var oldX = actor.x;\n      var changeX = actor.playerSpeed * (anim.getTimeInterval() / 1000);\n        if (actor.moving) {\n            actor.facingRight ? actor.x += changeX : actor.x -= changeX;\n        }\n\n        if (!level.getZoneInfo(actor.getCenter()).inBounds) {\n            actor.x = oldX;\n\n            while (level.getZoneInfo(actor.getCenter()).inBounds) {\n                actor.facingRight ? actor.x++ : actor.x--;\n            }\n\n            // reposition to nearest placement in bounds\n            actor.facingRight ? actor.x-- : actor.x++;\n        }\n    };\n    ```", "```js\n    Model.prototype.nearby = function(actor1, actor2){\n        return (Math.abs(actor1.x - actor2.x) < actor1.attackRange)\n        && Math.abs(actor1.y - actor2.y) < 30;\n    };\n    ```", "```js\n    /*\n     * Game view\n     * \n     * The view has access to the canvas context\n     * and is responsible for the drawing logic\n     */\n    function View(controller){\n        this.controller = controller;\n        this.canvas = controller.anim.getCanvas();\n        this.context = controller.anim.getContext();\n    }\n    ```", "```js\n    View.prototype.drawScreen = function(screenImg){\n        this.context.drawImage(screenImg, 0, 0, this.canvas.width, this.canvas.height);\n    };\n    ```", "```js\n    View.prototype.drawBadGuys = function() {\n        var controller = this.controller;\n        var model = controller.model;\n      for (var n = 0; n < model.badGuys.length; n++) {\n          var badGuy = model.badGuys[n];\n        var offsetPos = {\n          x: badGuy.x + model.level.x,\n          y: badGuy.y + model.level.y\n        };\n          badGuy.draw(offsetPos);\n      }\n    };\n    ```", "```js\n    View.prototype.drawFps = function() {\n        var context = this.context;\n        context.fillStyle = \"black\";\n        context.fillRect(this.canvas.width - 100, 0, 100, 30);\n        context.font = \"18pt Calibri\";\n        context.fillStyle = \"white\";\n        context.fillText(\"fps: \" + this.cntroller.avgFps.toFixed(1), this.canvas.width - 93, 22);\n    };\n    ```", "```js\n    View.prototype.stage = function(){\n        var controller = this.controller;\n        var model = controller.model;\n        if (controller.state == controller.states.PLAYING || controller.state == controller.states.GAMEOVER || controller.state == controller.states.WON) {\n            model.level.draw();\n        this.drawBadGuys();\n            model.hero.draw(model.heroCanvasPos);\n            model.healthBar.draw();\n\n            // draw screen overlay\n            if (controller.state == controller.states.GAMEOVER) {\n                this.drawScreen(controller.images.gameoverScreen);\n            }\n            else if (controller.state == controller.states.WON) {\n                this.drawScreen(controller.images.winScreen);\n            }\n\n            this.drawFps();\n        }\n        else if (controller.state == controller.states.READY) {\n            this.drawScreen(controller.images.readyScreen);\n        }\n    };\n    ```", "```js\n    </style>\n    <script src=\"img/animation.js\">\n    </script>\n    <script src=\"img/Controller.js\">\n    </script>\n    <script src=\"img/Model.js\">\n    </script>\n    <script src=\"img/View.js\">\n    </script>\n    <script src=\"img/Level.js\">\n    </script>\n    <script src=\"img/Actor.js\">\n    </script>\n    <script src=\"img/HealthBar.js\">\n    </script>\n    ```", "```js\n    <script>\n        window.onload = function(){\n            new Controller(\"myCanvas\");\n        };\n    </script>\n    ```", "```js\n    <canvas id=\"myCanvas\" width=\"900\" height=\"600\">\n    </canvas>\n    ```"]