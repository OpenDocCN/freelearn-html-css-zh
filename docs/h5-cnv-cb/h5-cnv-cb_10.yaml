- en: Appendix A. Detecting Canvas Support
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 检测Canvas支持
- en: Canvas fallback content
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Canvas回退内容
- en: 'As all the browsers do not support canvas, it''s a good idea to provide fallback
    content so that the users know that something isn''t working correctly in the
    event that their browser of choice does not support canvas. The simplest and most
    straightforward technique for handling browsers that don''t support canvas is
    to add fallback content inside of the canvas tag. Typically, this content will
    be text or an image that tells the user that their outdated browser doesn''t support
    canvas, followed by a suggestion for downloading a browser developed in this decade.
    Users who are using a browser that does support canvas will not see the inner
    content:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有浏览器都不支持canvas，因此最好提供回退内容，以便用户知道如果他们选择的浏览器不支持canvas，则某些功能无法正常工作。处理不支持canvas的浏览器最简单和最直接的技术是在canvas标签内添加回退内容。通常，这个内容将是文本或图像，告诉用户他们过时的浏览器不支持canvas，并建议下载一个在本年代开发的浏览器。使用支持canvas的浏览器的用户将看不到内部内容：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Canvas fallback content isn''t always the best solution. For example, if the
    browser doesn''t support canvas, you might want to alert an error message, redirect
    the user to a different URL, or even use a Flash version of the application as
    a fallback. The easiest way to detect whether the browser supports canvas is to
    create a dummy canvas element and then check whether we can execute the `getContext`
    method:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Canvas回退内容并不总是最好的解决方案。例如，如果浏览器不支持canvas，您可能希望警告错误消息，将用户重定向到不同的URL，甚至使用应用程序的Flash版本作为回退。检测浏览器是否支持canvas的最简单方法是创建一个虚拟canvas元素，然后检查我们是否可以执行getContext方法：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the page loads, we can call the `isCanvasSupported()` function to determine
    whether or not the browser supports canvas and then appropriately handle the result.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时，我们可以调用isCanvasSupported()函数来确定浏览器是否支持canvas，然后适当处理结果。
- en: This function uses one of my favorite JavaScript tricks, the double-not trick
    (`!!`), which determines whether or not the `getContext` method successfully executes.
    The first not of the double-not coerces the data type into a Boolean. As the act
    of coercing the data type yields the opposite result that we want, we can add
    a second not (`!!`) to flip the result back. The double-not trick is a super convenient
    way of checking whether or not a piece of code successfully executes, and in my
    opinion is much more elegant than wrapping a line of code with a `try`/`catch`
    block.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数使用了我最喜欢的JavaScript技巧之一，双非技巧（!!），它确定了getContext方法是否成功执行。双非的第一个非将数据类型强制转换为布尔值。由于强制转换数据类型的行为产生了我们不想要的相反结果，我们可以添加第二个非（!!）来翻转结果。双非技巧是检查一段代码是否成功执行的一种非常方便的方式，在我看来，它比用try/catch块包装一行代码要优雅得多。
- en: Detecting available WebGL contexts
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测可用的WebGL上下文
- en: If your canvas application leverages WebGL, you might also want to know which
    contexts the browser supports so that you can successfully initialize a WebGL
    application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的canvas应用程序利用了WebGL，您可能还想知道浏览器支持哪些上下文，以便您可以成功初始化一个WebGL应用程序。
- en: 'At the time of writing, there are five major contexts:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，有五个主要的上下文：
- en: '`2D`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D
- en: '`webgl`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: webgl
- en: '`experimentl-webgl`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验性的WebGL
- en: '`moz-webgl`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: moz-webgl
- en: '`webkit-3d`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: webkit-3d
- en: All of the major browsers including Google Chrome, Firefox, Safari, Opera, and
    IE9 support the 2D context. However, when it comes to `WebGL` support, it's a
    completely different story. At the time of writing, Google Chrome and Safari support
    the `experimental-webgl` and the `webkit-3d` contexts, Firefox supports the `experimental-webgl`
    and the `moz-webgl` contexts, and IE9 does not support any form of WebGL.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包括Google Chrome，Firefox，Safari，Opera和IE9在内的所有主要浏览器都支持2D上下文。然而，当涉及到WebGL支持时，情况完全不同。在撰写本文时，Google
    Chrome和Safari支持实验性的WebGL和webkit-3d上下文，Firefox支持实验性的WebGL和moz-webgl上下文，IE9不支持任何形式的WebGL。
- en: 'To see this for yourself, you can create a function called `getCanvasSupport()`
    which loops through all of the possible contexts and uses the double-not trick
    to determine which contexts are available:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要自己看到这一点，您可以创建一个名为getCanvasSupport()的函数，该函数循环遍历所有可能的上下文，并使用双非技巧来确定哪些上下文是可用的：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
