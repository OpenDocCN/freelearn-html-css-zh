["```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Chart example</title>\n        </head>\n        <body>\n            <div id=\"chart\" style=\"height:200px; width:800px;\"></div>\n            <script src=\"img/jquery.min.js\"></script>\n            <script src=\"img/jquery.flot.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    $(function() {    \n        function getData(cb) {\n            var now  = Date.now();\n            var hour = 60 * 60 * 1000;\n            var temperatures = [];\n            for (var k = 24; k > 0; --k)\n                temperatures.push([now - k*hour,\n                    Math.random()*2 + 10*Math.pow((k-12)/12,2)]);\n            cb({data:temperatures});\n        }\n        getData(function(data) {\n            $.plot(\"#chart\", [data], {xaxis: {mode: 'time'}});\n        });\n    });\n    ```", "```html\nfunction getData(cb) {\n    $.get('/chart').success(cb);\n}\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Chart example</title>\n        </head>\n        <body>\n            <div id=\"chart\" style=\"height:300px; width:800px;\"></div>\n            <script src=\"img/jquery.min.js\"></script>\n            <script src=\"img/jquery.flot.js\"></script>\n            <script src=\"img/jquery.flot.stack.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    $(function() {    \n        var day = 24 * 60 * 60 * 1000;\n        function getData(cb) {\n            var now  = new Date();\n            now = new Date(now.getYear(), now.getMonth(), now.getDate()).getTime();\n            var products = [];\n            for (var product = 1; product < 4; ++product) {\n                var sales = { label: \"Product \" + product, data: [] };\n                for (var k = 7; k > 0; --k)\n                    sales.data.push([now - k*day, Math.round(Math.random()*10)]);\n                products.push(sales);\n            }\n            cb({series:products});\n        }\n\n        getData(function(data) {\n            $.plot(\"#chart\", data.series, {\n                series: {\n                    stack: true, lines: { show: false },\n                    bars: { show: true, barWidth: 0.8 * day, align:'center' }\n                }, xaxis: {mode: 'time'}\n            });\n        });\n    });\n    ```", "```html\n[\n  {label: \"Product 1\", data:[\n    [timestamp, value],\n    [timestamp, value], \u2026]},\n  {label: \"Product 2\", data: [\u2026]},\n  {label: \"Product 3\", data: [\u2026]}\n]\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Chart example</title>\n        </head>\n        <body>\n            <div id=\"chart\" style=\"height:600px; width:600px;\"></div>\n            <script src=\"img/jquery.min.js\"></script>\n            <script src=\"img/jquery.flot.js\"></script>\n            <script src=\"img/jquery.flot.pie.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    $(function() {    \n        var day = 24 * 60 * 60 * 1000;\n        function getData(cb) {\n            var browsers = [\n                {label: 'IE', data: 35.5, color:\"#369\"},\n                {label: 'Firefox', data: 24.5, color: \"#639\"},\n                {label: 'Chrome', data: 32.1, color: \"#963\"},\n                {label: 'Other', data: 7.9, color: \"#396\"}\n            ];\n            cb(browsers);\n        }\n\n        getData(function(data) {\n            $.plot(\"#chart\", data, {\n            series: {\n                pie: {\n                    show: true,\n                    radius: 0.9,\n                    label: {\n                        show: true,\n                        radius: 0.6,\n                    },\n                    tilt: 0.5\n                }\n            },\n            legend: { show: false }\n            });\n        });\n    });\n    ```", "```html\n{pie: {show: true}}\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Chart example</title>\n            <style type=\"text/css\">\n                #chart { font-family: Verdana; }\n            </style>\n        </head>\n        <body>\n            <div id=\"chart\" style=\"height:200px; width:800px;\"></div>\n            <script src=\"img/jquery.min.js\"></script>\n            <script src=\"img/jquery.flot.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    $(function() {    \n        function getData(cb) {\n            var altitudes = [];\n            // Generate random but convincing-looking data.\n            for (var k = 0; k < 20; k += 0.5)\n                altitudes.push([k, Math.random()*50 + 1000*Math.pow((k-15)/15,2)]);\n            cb(altitudes);\n        }\n\n        getData(function(data) {\n            $.plot(\"#chart\", [{data: data}], {\n                xaxis: {\n                    tickFormatter: function(km) { return km + ' km'; }\n                },\n                lines: {\n                    fill: true,\n                    fillColor: {colors: [\"#393\", \"#990\", \"#cc7\", \"#eee\"] }\n                },\n                grid: {\n                    markings: [{ xaxis: { from: 0, to: 8 }, color: \"#eef\" }]\n                }\n            });\n        });\n    });\n    ```", "```html\nfunction getData(cb) {\n    $.get('/areachart').success(cb);\n}\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Chart example</title>\n            <style type=\"text/css\">\n                #chart { font-family: Verdana; }\n            </style>\n        </head>\n        <body>\n            <div id=\"chart\" style=\"height:200px; width:800px;\"></div>\n            <script src=\"img/jquery.min.js\"></script>\n            <script src=\"img/jquery.flot.js\"></script>\n            <script src=\"img/jquery.flot.threshold.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    $(function() {    \n        function getData(cb) {\n            var altitudes = [], temperatures = [];\n            // Generate random but convincing-looking data.\n            for (var k = 0; k < 20; k += 0.5) {\n                altitudes.push([k, Math.random()*50 + 1000*Math.pow((k-15)/15,2)]);\n                temperatures.push([k, Math.random()*0.5 + k/4 + 15]);\n            }\n            cb({alt:altitudes, temp:temperatures});\n        }\n\n        getData(function(data) {\n            $.plot(\"#chart\", [\n               {\n                 data: data.alt, yaxis:1,\n                 lines: {fill:true, fillColor: {\n                 colors: [\"#393\", \"#990\", \"#cc7\", \"#eee\"] } }\n                    },\n               {\n                 data: data.temp, yaxis:2, color: \"rgb(200, 20, 30)\",\n                 threshold: { below: 19, color: \"rgb(20, 100, 200)\" }\n                    }\n                ], {\n                yaxes: [ { }, { position: \"right\"}],\n                xaxis: {\n                    tickFormatter: function(km) { return km + ' km'; }\n                },\n                grid: {\n                    markings: [{ xaxis: { from: 0, to: 8 }, color: \"#eef\" }]\n                }\n            });\n        });\n    });\n    ```", "```html\n{alt: data1, temp: data2}\n```", "```html\nfunction getData(cb) {\n    $.get('/charts').success(cb);\n}\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Chart example</title>\n            <style type=\"text/css\">\n                #chart text { font-family: Verdana; font-size:10px; }\n            </style>\n        </head>\n        <body>\n            <div id=\"chart\"></div>\n            <script src=\"img/d3.v2.js?2.9.5\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    (function() {\n    var getData = function(cb) {\n        cb({children:[\n            {domain: 'google.com', value: 6413},\n            {domain: 'yahoo.com', value: 831},\n            {domain: 'bing.com', value: 1855},\n            {domain: 'news.ycombinator.com', value: 5341},\n            {domain: 'reddit.com', value: 511},\n            {domain: 'blog.someone.com', value: 131},\n            {domain: 'blog.another.com', value: 23},\n            {domain: 'slashdot.org', value: 288},\n            {domain: 'twitter.com', value: 327},\n            {domain: 'review-website.com', value: 231}\n        ]});\n    }\n\n    // r is the dimension of the bubble chart\n    var r = 640,\n        fill = d3.scale.category20c();\n\n    // create the visualization placeholder\n    var vis = d3.select(\"#chart\").append(\"svg\")\n        .attr(\"width\", r)\n        .attr(\"height\", r)\n        .attr(\"class\", \"bubble\");\n\n    // create a pack layout for the bubbles\n    var bubble = window.bubble = d3.layout.pack()\n        .sort(null)\n        .size([r, r])\n        .padding(1.5);\n\n        getData(function(json) {\n            // Process the data with the pack layout\n            var data = bubble.nodes(json);\n            // Create a node for every leaf data element\n            var selection = vis.selectAll(\"g.node\")\n                .data(data.filter(function(d) { return !d.children; }));\n            var node = selection.enter().append(\"g\");\n\n            node.attr(\"class\", \"node\");\n            node.append(\"title\")\n                .text(function(d) { return d.domain });\n            node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n            node.append(\"circle\")\n                .attr(\"r\", function(d) { return d.r; })\n                .style(\"fill\", function(d) { return fill(d.domain); });\n            node.append(\"text\")\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"dy\", \".3em\")\n                .text(function(d) { return d.domain.substring(0, d.r / 3); });\n        });\n    }());\n    ```", "```html\n    <link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet-0.4/leaflet.css\" />\n     <!--[if lte IE 8]>\n         <link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet-0.4/leaflet.ie.css\" />\n    <![endif]-->\n    ```", "```html\n    <script src=\"img/leaflet.js\"></script>\n    ```", "```html\n    <div id=\"map\" style=\"height:200px;\"></div>\n    ```", "```html\n    <script src=\"img/example.js\"></script>\n    ```", "```html\n    var map = L.map('map').setView([51.505, -0.09], 13);\n\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{\n            attribution:'Copyright (C) OpenStreetMap.org',\n            maxZoom:18\n            }).addTo(map);\n\n    var marker = L.marker([51.5, -0.09]).addTo(map);\n    marker.bindPopup(\"<b>Hello world!</b><br>I am a popup.\").openPopup();\n    ```", "```html\nhttp://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Map example</title>\n            <link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet-0.4/leaflet.css\" />\n            <!--[if lte IE 8]>\n            <link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet-0.4/leaflet.ie.css\" />\n            <![endif]-->\n        </head>\n        <body>\n            <div id=\"map\" style=\"height:480px; width:640px;\"></div>\n            <script src=\"img/jquery.min.js\"></script>\n            <script src=\"img/leaflet.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    var map = L.map('map').setView([52.513, -0.06], 14)\n\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{\n        attribution:'Copyright (C) OpenStreetMap.org',\n        maxZoom:18\n    }).addTo(map);\n\n    var polyline = L.polyline([\n        [52.519, -0.08],\n        [52.513, -0.06],\n        [52.52, -0.047]\n    ]).addTo(map);\n\n    var polygon = L.polygon([\n        [52.509, -0.08],\n        [52.503, -0.06],\n        [52.51, -0.047]\n    ], {\n        color:\"#f5f\",\n        stroke: false,\n        fillOpacity:0.5\n    }).addTo(map);\n    ```", "```html\n    <!DOCTYPE HTML>\n    <html>\n        <head>\n            <title>Gauge example</title>\n        </head>\n        <body>\n            <canvas id=\"gauge\" width=\"400\" height=\"400\"></canvas>\n            <script src=\"img/jquery.min.js\"></script>\n            <script type=\"text/javascript\" src=\"img/example.js\"></script>\n        </body>\n    </html>\n    ```", "```html\n    (function($) {\n    ```", "```html\n        function eachOrOne(items, cb) {\n            return (items instanceof Array ? items : [items]).map(cb);\n        }\n    ```", "```html\n        function rotate(pt, a, c) {\n            a = - a;\n            return { x: c.x + (pt.x - c.x) * Math.cos(a) - (pt.y-c.y) * Math.sin(a),\n                     y: c.y + (pt.x - c.x) * Math.sin(a) + (pt.y-c.y) * Math.cos(a) };\n        }\n    ```", "```html\n        $.gauge = function(target, options) {\n            var defaults = {\n                yoffset: 0.2,\n                scale: {\n                    type: 'linear',\n                    values: [1, 200],\n                    angles: [0, Math.PI]\n                },\n                strip: {\n                    scale: 0, radius: 0.8, width: 0.05,\n                    color: \"#aaa\", from: 0, to: 200\n                },           \n                ticks: {\n                    scale: 0, radius: 0.77, length: 0.1, width: 1, color: \"#555\",\n                    values: {from: 0, to:200, step: 10},\n                },           \n                labels: {\n                    scale: 0, radius: 0.65,\n                    font: '12px Verdana', color: \"#444\",\n                    values: {from: 0, to:200, step: 20}\n                },\n                needle: {\n                    scale: 0, length: 0.8, thickness: 0.1,\n                    color: \"#555\", value: 67\n                }\n            };\n    ```", "```html\n            var options = $.extend(true, {}, defaults, options);\n            for (var key in defaults) if (key != 'yoffset')\n                options[key] = eachOrOne(options[key], function(item) {\n                    return $.extend(true, {}, defaults[key], item);\n                });        \n            var $target = $(target);\n            var ctx = $target[0].getContext('2d');\n    ```", "```html\n            options.scale = eachOrOne(options.scale, function(s) {\n                return $.gauge.scale(s);\n            });\n            eachOrOne(options.ticks, function(t) {\n                return t.values = $.gauge.range(t.values);\n            });\n            eachOrOne(options.labels, function(l) {\n                return l.values = $.gauge.range(l.values);\n            });\n    ```", "```html\n            function draw(options) {\n    ```", "```html\n                var w = $target.width(), h = $target.height(),\n                    c = {x: w * 0.5, y: h * (0.5 + options.yoffset)},\n                    r = w * 0.5,\n                    pi = Math.PI;\n                ctx.clearRect(0, 0, w, h);\n    ```", "```html\n                // strips\n                eachOrOne(options.strip, function(s) {\n                    var scale = options.scale[s.scale || 0];\n                    ctx.beginPath();\n                    ctx.strokeStyle = s.color;\n                    ctx.lineWidth = r * s.width;\n                    ctx.arc(c.x, c.y, s.radius * r, scale(s.to), scale(s.from), true);\n                    ctx.stroke();\n                });\n    ```", "```html\n                // ticks\n                eachOrOne(options.ticks, function(s) {\n                    var scale = options.scale[s.scale || 0];\n                    ctx.strokeStyle = s.color;\n                    ctx.lineWidth = r * s.length;\n                    var delta = scale(s.width) - scale(0);\n                    s.values.forEach(function(v) {\n                        ctx.beginPath();\n                        ctx.arc(c.x, c.y, s.radius * r,\n                            scale(v) + delta, scale(v) - delta, true);\n                        ctx.stroke();\n                    });\n                });\n    ```", "```html\n                // labels\n                ctx.textAlign    = 'center';\n                ctx.textBaseline = 'middle';\n                eachOrOne(options.labels, function(s) {\n                    var scale = options.scale[s.scale || 0];\n                    ctx.font = s.font;\n                    ctx.fillStyle = s.color;\n                    s.values.forEach(function(v) {\n                        var pos = rotate({x: c.x + r * s.radius, y:c.y},\n                            0 - scale(v), c);\n                        ctx.beginPath();\n                        ctx.fillText(v, pos.x, pos.y);\n                        ctx.fill();\n                    });\n                });\n    ```", "```html\n                // needle\n                eachOrOne(options.needle, function(s) {\n                    var scale = options.scale[s.scale || 0];\n                    var rotrad = 0 - scale(s.value);\n                    var p1 = rotate({x: c.x + r * s.length, y: c.y},    rotrad, c),\n                        p2 = rotate({x: c.x, y: c.y + r*s.thickness/2}, rotrad, c),\n                        p3 = rotate({x: c.x, y: c.y - r*s.thickness/2}, rotrad, c);\n                    ctx.fillStyle = s.color;\n                    ctx.beginPath();\n                    ctx.arc(c.x, c.y, r * s.thickness / 2, 0, 2*Math.PI);\n                    ctx.fill();\n                    ctx.beginPath();\n                    ctx.moveTo(p1.x, p1.y);\n                    ctx.lineTo(p2.x, p2.y);\n                    ctx.lineTo(p3.x, p3.y);\n                    ctx.fill();                \n                });            \n            }        \n            draw(options);\n    ```", "```html\n            return function(val, i) {\n                i = i || 0;\n                options.needle[i].value = val;\n                draw(options);\n            }\n        };\n    ```", "```html\n        $.gauge.range = function(opt) {\n            if (opt instanceof Array) return opt;\n            var arr = [], step = opt.step;\n            var last = opt.from;\n            for (var k = opt.from; k <= opt.to; k+= step)\n                arr.push(opt.log ? Math.pow(opt.log, k) : k);\n            return arr;\n        };\n        $.gauge.scale = function(opt, f) {\n            if (opt.type == 'linear') opt.type = function(x) { return x; };\n            else if (opt.type == 'log') opt.type = Math.log;\n            var f = opt.type,\n                v0 = f(opt.values[0]),\n                v1 = f(opt.values[1]);\n            return function(v) {\n                return (f(v) - v0) / (v1 - v0)\n                        * (opt.angles[1] - opt.angles[0]) + Math.PI + opt.angles[0];\n            };\n        }\n    }(jQuery));\n    ```", "```html\n    $(function() {\n        var g = $.gauge(\"#gauge\", {\n            scale: {\n                angles: [-0.3, Math.PI+0.3],\n                values: [0, 220]\n            },\n            strip: [\n                { from: 0,   to: 140, color:\"#ada\" },\n                { from: 140, to: 180, color:\"#dda\" },\n                { from: 180, to: 220, color:\"#d88\" }\n            ],\n            ticks: [{\n                color: \"rgba(0,0,0,0.33)\",\n                values: { from: 0, to: 220, step:10 },\n                length:0.05, radius:0.8, width:0.3\n            }, {\n                color: \"rgba(0,0,0,0.33)\",\n                values: { from: 0, to: 220, step:20 },\n                length:0.11, radius: 0.77, width:0.3\n            }],\n            labels: {\n                color: \"#777\",\n                values: { from: 0, to: 220, step:20 },\n                radius: 0.62\n            },\n            needle: { color:\"#678\" }\n        });\n        g(25);\n    });\n    ```", "```html\n    {\n      \"name\": \"GNU/Linux\",\n      \"url\": \"http://en.wikipedia.org/wiki/Linux\",\n      \"children\": [\n        {\n          \"name\": \"Red Hat\",\n          \"url\": \"http://www.redhat.com\",\n          \"children\": [ .. ]\n       } ]\n    ...\n    }\n    ```", "```html\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Linux Tree History</title>\n        <script src=\"img/d3.v2.js\"></script>\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"tree.css\"/>\n      </head>\n    ```", "```html\n      <body>\n        <div id=\"location\"></div>\n        <script type=\"text/javascript\" src=\"img/tree.js\"></script>\n      </body>\n    </html>\n    ```", "```html\n    (function() {\n    ```", "```html\n    var width = 1000,\n              height = 600;\n    ```", "```html\n      var tree = d3.layout.tree()\n              .size([height, width - 200]);\n      var diagonal = d3.svg.diagonal()\n              .projection(function(d) {\n                return [d.y, d.x];\n              });\n    ```", "```html\n      var vis = d3.select(\"#location\").append(\"svg\")\n              .attr(\"width\", width)\n              .attr(\"height\", height)\n              .append(\"g\")\n              .attr(\"transform\", \"translate(60, 0)\");\n    ```", "```html\n    d3.json(\"tree.json\", function(json) {\n        var nodes = tree.nodes(json);\n        vis.selectAll(\"path.link\")\n              .data(tree.links(nodes))\n              .enter().append(\"path\")\n              .attr(\"class\", \"link\")\n              .attr(\"d\", diagonal);\n        var node = vis.selectAll(\"g.node\")\n                .data(nodes)\n                .enter().append(\"g\")\n                .append(\"a\")\n                .attr(\"xlink:href\", function(d) {\n                     return d.url;\n                  })\n                .attr(\"class\", \"node\")\n                .attr(\"transform\", function(d) {\n                    return \"translate(\" + d.y + \",\" + d.x + \")\";\n                  });\n\n        node.append(\"circle\")\n                .attr(\"r\", 20);\n\n        node.append(\"text\")\n                .attr(\"dx\", -19)\n                .attr(\"fill\", \"white\")\n                .attr(\"dy\", -19)\n                .style(\"font-size\", \"20\")\n                .text(function(d) {\n                  return d.name;\n                });\n    ```", "```html\n     .node circle {\n         fill: #fc0;\n         stroke: steelblue;\n         stroke-width: 1px;\n    }\n    .link {\n      fill: none;\n      stroke: #fff;\n      stroke-width: 5.0px;\n    }\n    body{  \n        background-color: #000;\n     }\n    ```", "```html\nvar diagonal = d3.svg.diagonal()\n          .projection(function(d) {\n              return [d.y, d.x];\n          });\n```", "```html\n<g>\n      <g>\n      <g>\n       </g>\n     </g>\n   </g>\n```", "```html\nd3.json(\"tree.json\", function(json) { \u2026 }\n```", "```html\nvis.selectAll(\"path.link\")\n```", "```html\n.data(tree.links(nodes))\n```", "```html\n           .enter()\n           .append(\"path\")\n           .attr(\"class\", \"link\")\n           .attr(\"d\", diagonal)\n```", "```html\n<svg  version=\"1.1\">\n  <g style=\"stroke: red; fill: none;\">\n    <path d=\"M 10 30 L 200 10\"/>\n </g>\n</svg>\n```", "```html\n\u2026\n            .append(\"a\")\n            .attr(\"xlink:href\", function(d) {\n                 return d.url;\n              })\n```", "```html\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n              });\n```", "```html\n    node.append(\"circle\")\n            .attr(\"r\", 20);\n```", "```html\n   node.append(\"text\")\n            .attr(\"dx\", -19)\n            .attr(\"dy\", -19)\n             ...\n```", "```html\n      <link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" charset=\"utf-8\">\n      <script src=\"img/jquery.min.js\"></script>\n    ```", "```html\n        <div class=\"counter\"></div>\n        <div class=\"score\">\n                  <span class=\"home\"></span>\n                   <span class=\"period\"></span>\n                   <span class=\"guests\"></span>\n        </div>\n      </div>\n      <script type=\"text/javascript\" src=\"img/scoreboard.js\"></script>\n    ```", "```html\n    @font-face {\n      font-family: 'RadiolandRegular';\n      src: url('RADIOLAND-webfont.eot');\n      src: url('RADIOLAND-webfont.eot?#iefix') format('embedded-opentype'),\n        url('RADIOLAND-webfont.woff') format('woff'),\n        url('RADIOLAND-webfont.ttf') format('truetype'),\n        url('RADIOLAND-webfont.svg#RadiolandRegular') format('svg');\n      font-weight: normal;\n      font-style: normal;\n    }\n    ```", "```html\n    div.counter{\n      font: 118px/127px 'RadiolandRegular', Arial, sans-serif;\n      color: green;\n    }\n        .score {\n          font: 55px/60px 'RadiolandRegular', Arial, sans-serif;\n          letter-spacing: 0;\n          color: red;\n          width: 450px;\n        }\n\n      .period {\n          font: 35px/45px 'RadiolandRegular', Arial, sans-serif;\n          color: white;\n        }\n\n        div.display {\n          padding: 50px;\n        }\n    ```", "```html\n      var game = {\n        periodStart: 1354650343000,\n        currentPeriod: 1,\n        score: {\n          home: 15,\n          guests: 10\n        }\n      };\n    ```", "```html\n      function fetchNewData() {\n        // server data\n        var game = {\n          periodStart: new Date().getTime(),\n          //the server will return data like: periodStart: 1354838410000,\n          currentPeriod: 1,\n          score: {\n            home: 15,\n            guests: 10\n          }\n        };\n        //return display data\n        return {\n          periodStart: game.periodStart,\n          counter: '00:00',\n          period: game.currentPeriod + ' Period',\n          score: {\n            home: game.score.home,\n            guests: game.score.guests\n          }\n        };\n      }\n    ```", "```html\n      var config = {\n        refreshSec: 1,\n        periods: 4,\n        minPerPeriod: 12\n      };\n    ```", "```html\n      function updateCounter() {\n              var now = new Date(),\n              millsPassed = now.getTime() - displayData.periodStart;\n\n             if (millsPassed < 0) {\n               displayData.counter = '00:00';\n             } else if (millsPassed > config.minPerPeriod * 60 * 1000) {\n               displayData.counter = config.minPerPeriod + ':00';\n             } else {\n               //counting normal time\n               var min = Math.floor(millsPassed/60000);\n               if (min<10) {\n                 min = '0' + min;\n               }\n               var sec = Math.floor((millsPassed % 60000)/1000);\n               if (sec<10) {\n                 sec = '0'+sec;\n               }\n               displayData.counter = min+':'+sec;\n             }\n             $('.counter').text(displayData.counter);\n             $('.period').text(displayData.period);\n    ```", "```html\n      function updateScore(){\n        $('.home').text(displayData.score.home);\n        $('.guests').text(displayData.score.guests);\n      }\n    ```", "```html\n        setInterval(updateCounter, 500);\n        setInterval(updateScore, 500);\n    ```", "```html\n@font-face {\n  font-family: someName;\n  src: url(awesome.woff) format(\"woff\"),\n       url(awesome.ttf) format(\"opentype\");\n}\n```", "```html\n<script type=\"text/javascript\">\n  WebFontConfig = {\n    google: { families: [ 'Noto+Sans::latin' ] }\n  };\n  (function() {\n    var wf = document.createElement('script');\n    wf.src = ('https:' == document.location.protocol ? 'https' : 'http') +\n      '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\n    wf.type = 'text/javascript';\n    wf.async = 'true';\n    var s = document.getElementsByTagName('script')[0];\n    s.parentNode.insertBefore(wf, s);\n  })(); </script>\n```"]