["```html\n    npm install restify\n\n    ```", "```html\n    var restify = require('restify');\n    ```", "```html\n    var server = restify.createServer();\n    server.get('hi', respond);\n    server.get('hi/:index', respond);\n    ```", "```html\n     function respond(req, res, next) {\n      console.log(\"Got HTTP \" + req.method + \" on \" + req.url + \" responding\");\n      var hello = [{\n        'id':'0',\n        'hello': 'world'\n      },{\n        'id':'1',\n        'say':'what'\n      }];\n      if(req.params.index){\n        var found = hello[req.params.index];\n        if(found){\n          res.send(found);\n        } else {\n          res.status(404);\n          res.send();\n        }\n      };\n      res.send(hello);\n      addHeaders(req,res);\n      return next();\n    }\n    ```", "```html\n    function addHeaders(req, res) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n     };\n    ```", "```html\n    server.listen(8080, function() {\n      console.log('%s listening at %s', server.name, server.url);\n    });\n    ```", "```html\n    node server.js\n\n    ```", "```html\n    restify listening at http://0.0.0.0:8080\n    ```", "```html\n        Hello <div id=\"data\">loading</div>\n        <hr/>\n        Say <div id=\"say\">No</div>s\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/example.js\"></script>\n        <script src=\"img/exampleJQuery.js\"></script>\n    ```", "```html\n      function getData(url, onSuccess) {\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url);\n        request.onload = function() {\n          if (request.status === 200) {\n            console.log(request);\n            onSuccess(request.response);\n          }\n        };\n        request.send(null);\n      }\n    ```", "```html\n     setTimeout(\n        function() {\n          getData(\n            'http://localhost:8080/hi',\n            function(response){\n              console.log('finished getting data');\n              var div = document.getElementById('data');\n              var data = JSON.parse(response);\n              div.innerHTML = data[0].hello;\n            })\n        },\n        3000);\n    ```", "```html\n        (function(){\n        $.getJSON('http://localhost:8080/hi/1', function(data) {\n          $('#say').text(data.say);\n     });\n    }())\n    ```", "```html\n{\n  \"name\" : \"ch8-tip1-http-get-example\",\n  \"description\" : \"example on http get\",\n  \"dependencies\" : [\"restify\"],\n  \"author\" : \"Mite Mitreski\",\n  \"main\" : \"html5dasc\",\n  \"version\" : \"0.0.1\"\n}\n```", "```html\njQuery.getJSON( url [, data ] [, success(data, textStatus, jqXHR) ] )\n```", "```html\nGot HTTP GET on /hi/1 responding\nGot HTTP GET on /hi responding\n\n```", "```html\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'someurl', true);\nxhr.onreadystatechange = function(e) {\n  if (this.readyState == 4 && this.status == 200) {\n   // response is loaded\n  }\n}\n```", "```html\n    {\n      \"name\" : \"ch8-tip2-custom-headers\",\n      \"dependencies\" : [\"restify\"],\n      \"main\" : \"html5dasc\",\n      \"version\" : \"0.0.1\"\n    }\n    ```", "```html\n    var restify = require('restify');\n    var server = restify.createServer();\n    server.get('hi', addHeaders, respond);\n    server.opts(/\\.*/, addHeaders, function (req, res, next) {\n      console.log(\"Got HTTP \" + req.method + \" on \" + req.url + \" with headers\\n\");\n     res.send(200);\n      return next();\n    });\n    server.listen(8080, function() {\n      console.log('%s listening at %s', server.name, server.url);\n    });\n    ```", "```html\n    function addHeaders(req, res, next) {\n      res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n      res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, X-Myapp');\n      res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n      res.setHeader('Access-Control-Expose-Headers', 'X-Myapp, X-Requested-With');\n      return next();\n    };\n    ```", "```html\n       function respond(req, res, next) {\n      console.log(\"Got HTTP \" + req.method + \" on \" + req.url + \" with headers\\n\");\n      console.log(\"Request: \", req.headers);\n      var hello = [{\n        'id':'0',\n        'hello': 'world',\n        'headers': req.headers\n      }];\n      res.send(hello);\n      console.log('Response:\\n ', res.headers());\n      return next();\n    }\n    ```", "```html\n         Hi <div id=\"data\">loading</div>\n        <hr/>\n        Headers list from the request: <div id=\"headers\"></div>\n        <hr/>\n        Data from jQuery: <div id=\"dataRecieved\">loading</div>\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/example.js\"></script>\n        <script src=\"img/exampleJQuery.js\"></script>\n    ```", "```html\n      function getData(url, onSucess) {\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.setRequestHeader(\"X-Myapp\",\"super\");\n        request.setRequestHeader(\"X-Myapp\",\"awesome\");\n        request.onload = function() {\n          if (request.status === 200) {\n            onSuccess(request.response);\n          }\n        };\n        request.send(null);\n      }\n    ```", "```html\n      getData(\n        'http://localhost:8080/hi',\n        function(response){\n          console.log('finished getting data');\n          var data = JSON.parse(response);\n          document.getElementById('data').innerHTML = data[0].hello;\n          var headers = data[0].headers,\n              headersList = \"<ul>\";\n          for(var key in headers){\n            headersList += '<li><b>' + key + '</b>: ' + headers[key] +'</li>';\n          };\n          headersList += \"</ul>\";\n          document.getElementById('headers').innerHTML = headersList;\n        });\n    ```", "```html\n     host: localhost:8080\n     connection: keep-alive\n     origin: http://localhost:8000\n     x-myapp: super, awesome\n     user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.27 (KHTML, like Gecko) Chrome/26.0.1386.0 Safari/537.27\n    ```", "```html\n    $.ajax({\n        beforeSend: function (xhr) {\n          xhr.setRequestHeader('x-myapp', 'this was easy');\n        },\n        success: function (data) {\n         $('#dataRecieved').text(data[0].headers['x-myapp']);\n        }\n    ```", "```html\n    Data from jQuery: this was easy\n\n    ```", "```html\n      Got HTTP OPTIONS on /hi with headers\n      Got HTTP GET on /hi with headers\n```", "```html\n'x-myapp': 'super, awesome'\n```", "```html\n    server.get({ path: \"hi\", version: '2.1.1'}, addHeaders, helloV2, logReqRes);\n    server.get({ path: \"hi\", version: '1.1.1'}, addHeaders, helloV1, logReqRes);\n    ```", "```html\n    server.opts(/\\.*/, addHeaders, logReqRes, function (req, res, next) {\n      res.send(200);\n      return next();\n    });\n    ```", "```html\n    function helloV1(req, res, next) {\n      var hello = [{\n        'id':'0',\n        'hello': 'grumpy old data',\n        'headers': req.headers\n      }];\n      res.send(hello);\n      return next()\n    }\n    ```", "```html\n    function helloV2(req, res, next) {\n      var hello = [{\n        'id':'0',\n        'awesome-new-feature':{\n          'hello': 'awesomeness'\n        },\n        'headers': req.headers\n      }];\n      res.send(hello);\n      return next();\n    }\n    ```", "```html\n    function addHeaders(req, res, next) {\n      res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n      res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, accept-version');\n      res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n      res.setHeader('Access-Control-Expose-Headers', 'X-Requested-With, accept-version');\n      return next();\n    };\n    ```", "```html\n         Old api: <div id=\"data\">loading</div>\n        <hr/>\n         New one: <div id=\"dataNew\"> </div>\n        <hr/>\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/exampleJQuery.js\"></script>\n    ```", "```html\n      $.ajax({\n          url: 'http://localhost:8080/hi',\n          type: 'GET',\n          dataType: 'json',\n          success: function (data) {\n          $('#data').text(data[0].hello);\n        },\n        beforeSend: function (xhr) {\n          xhr.setRequestHeader('accept-version', '~1');\n        }\n      });\n      $.ajax({\n          url: 'http://localhost:8080/hi',\n          type: 'GET',\n          dataType: 'json',\n          success: function (data) {\n          $('#dataNew').text(data[0]['awesome-new-feature'].hello);\n        },\n        beforeSend: function (xhr) {\n          xhr.setRequestHeader('accept-version', '~2');\n        }\n      });\n    ```", "```html\nOld api:grumpy old data\nNew one:awesomeness\n\n```", "```html\n  server.get({path: 'hi', version: ['1.1.0',  '1.1.1',  '1.2.1']}, sendOld);\n```", "```html\n    function respond(req, res, next) {\n      console.log(\"Got HTTP \" + req.method + \" on \" + req.url + \" responding\");\n      var hello = [{\n        'id':'0',\n        'what': 'hi there stranger'\n      }];\n      res.send(hello);\n      return next();\n    }\n    ```", "```html\n    var server = restify.createServer();\n    server.use(restify.jsonp());\n    server.get('hi', respond);\n    ```", "```html\n    server.listen(8080, function() {\n      console.log('%s listening at %s', server.name, server.url);\n    });\n    ```", "```html\n    [{\"id\":\"0\",\"what\":\"hi there stranger\"}]\n    ```", "```html\n    great([{\"id\":\"0\",\"what\":\"hi there stranger\"}]);\n    ```", "```html\n        <b>Hello far away server: </b>\n        <div id=\"data\">loading</div>\n        <hr/>\n        <div id=\"oneMoreTime\">...</div>\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/example.js\"></script>\n        <script src=\"img/exampleJQuery.js\"></script>\n    ```", "```html\n    var cool = (function(){\n      var module = {};\n\n      module.run = function(data){\n        document.getElementById('data').innerHTML = data[0].what;\n      }\n\n      module.addElement = function (){\n        var script = document.createElement('script');\n        script.src = 'http://localhost:8080/hi?callback=cool.run'\n        document.getElementById('data').appendChild(script);\n        return true;\n      }\n      return module;\n    }());\n    ```", "```html\n    cool.addElement();\n    ```", "```html\n    Hello far away server:\n    hi there stranger\n\n    ```", "```html\n    $.ajax({\n        type : \"GET\",\n        dataType : \"jsonp\",\n        url : 'http://localhost:8080/hi',\n        success: function(obj){\n          $('#oneMoreTime').text(obj[0].what);\n        }\n    });\n    ```", "```html\n/hi?callback=jQuery182031846177391707897_1359599143721&_=1359599143727\n```", "```html\njsonp: false, jsonpCallback: \"my callback\"\n```", "```html\n    var restify = require('restify');\n    var builder = require('xmlbuilder');\n    var doc = builder.create();\n    doc.begin('root')\n      .ele('human')\n        .att('type', 'female')\n          .txt('some gal')\n          .up()\n      .ele('human')\n        .att('type', 'male')\n          .txt('some guy')\n      .up()\n      .ele('alien')\n        .txt('complete');\n    ```", "```html\n    <root>\n      <human type=\"female\">some gal</human>\n      <human type=\"male\">some guy</human>\n      <alien>complete</alien>\n    </root>\n    ```", "```html\n    function respond(req, res, next) {\n      res.setHeader('content-type', 'application/xml');\n      res.send(doc.toString({ pretty: true }));\n      return next();\n    }\n    ```", "```html\n    var server = restify.createServer({\n      formatters: {\n       'application/xml': function formatXML(req, res, body) {\n          if (body instanceof Error)\n            return body.stack;\n\n          if (Buffer.isBuffer(body))\n            return body.toString('base64');\n\n          return body;\n        }\n      }\n    });\n    ```", "```html\n    < HTTP/1.1 200 OK\n    < Access-Control-Allow-Origin: *\n    < Access-Control-Allow-Headers: X-Requested-With\n    < content-type: application/xml\n    < Date: Sat, 02 Feb 2013 13:08:20 GMT\n    < Connection: keep-alive\n    < Transfer-Encoding: chunked\n\n    ```", "```html\n       Hello <div id=\"humans\"></div>\n       <hr/>\n      <script src=\"img/jquery.min.js\">\n      </script>\n      <script src=\"img/exampleJQuery.js\"></script>\n    ```", "```html\n            (function(){\n      $.ajax({\n        type: \"GET\",\n        url: \"http://localhost:8080/hi\",\n        dataType: \"xml\",\n        success: function(xml) {\n          $(\"root > human\", xml).each(function(){\n            var p = $(\"<p></p>\");\n            $(p).text($(this).text()).appendTo(\"#humans\");\n          });\n        }\n      });\n    }())\n    ```", "```html\n.   $(\"root > human\", xml).each(function(){\n        var p = $(\"<p></p>\");\n        $(p).text($(this).text()).appendTo(\"#humans\");\n      });  \n```", "```html\n    var server = restify.createServer();\n    server.use(restify.bodyParser({ mapParams: false }));\n    server.post('hi', addHeaders, doPost);\n    ```", "```html\n    function doPost(req, res, next) {\n      console.log(\"Got HTTP \" + req.method + \" on \" + req.url + \" responding\");\n      console.log(req.body);\n      res.send(200);\n      return next();\n    }\n    ```", "```html\n    (function (){\n    var myForm = new FormData();\n    myForm.append(\"username\", \"johndoe\");\n    myForm.append(\"books\", 7);\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"http://localhost:8080/hi\");\n    xhr.send(myForm);\n      }());\n    ```", "```html\n    (function(){\n      var formData = new FormData();\n      formData.append(\"text\", \"some strange data\");\n      $.ajax({\n        url: \"http://localhost:8080/hi\",\n        type: \"POST\",\n        data: formData,\n        processData: false,  // don't process data\n        contentType: false   // don't set contentType\n      });\n    }());\n    ```", "```html\nContent-Length:239\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryQXGzNXa82frwui6S\n```", "```html\n------WebKitFormBoundaryQXGzNXa82frwui6S\nContent-Disposition: form-data; name=\"username\"\njohndoe\n------WebKitFormBoundaryQXGzNXa82frwui6S\nContent-Disposition: form-data; name=\"books\"\n7\n------WebKitFormBoundaryQXGzNXa82frwui6S--\n```", "```html\nContent-Disposition: form-data; name=\"profileImage\"; filename=\"me.png\"\nContent-Type: image/png\n```", "```html\nif (typeof FormData === \"undefined\")\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n    <head>\n    <title>Upload binary file</title>\n    <style type=\"text/css\">\n    .progress {\n        position:relative;\n        height:1em; width: 12em;\n        border: solid 1px #aaa;\n    }\n    .progress div {\n        position: absolute;\n        top:0; bottom:0; left:0;\n        background-color:#336699;\n    }\n    </style>\n    </head>\n    <body>\n    <input type=\"file\"   id=\"file\" value=\"Choose file\">\n    <input type=\"button\" id=\"upload\" value=\"Upload\"><br>\n    <p id=\"info\"></p>\n    <div class=\"progress\"><div id=\"progress\"></div></div>\n    <script src=\"img/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"img/uploader.js\"></script>\n    <script type=\"text/javascript\" src=\"img/example.js\"></script>\n    </body>\n    </html>\n    ```", "```html\n    window.postBinary = function(url, data) {\n        var self = {},\n            xhr = new XMLHttpRequest();\n        xhr.open('POST', url, true);\n        xhr.responseType = 'text';    \n        self.done = function(cb) {\n            xhr.addEventListener('load', function() {\n                if (this.status == 200)\n                    cb(null, this.response)\n                else\n                    cb(this.status, this.response)\n            });\n            return self;\n        }\n        self.progress = function(cb) {\n            xhr.upload.addEventListener('progress', function(e) {\n                if (e.lengthComputable)\u00a0\n                    cb(null, e.loaded / e.total);\n                else\n                    cb('Progress not available');\n            });\n            return progress;\n        };\n        xhr.send(data);    \n        return self;\n    };\n    ```", "```html\n    $(function() {\n        var file;\n        $(\"#file\").on('change', function(e) {\n            file = this.files[0]\n        });\n        $(\"#upload\").on('click', function() {\n            $(\"#info\").text(\"Uploading...\");\n            $(\"#progress\").css({width:0});\n            if (!file) {\n                $(\"#info\").text('No file selected')\n                return;\n            }\n            var upload =  postBinary('/upload/' + file.name, file);\n            upload.progress(function(err, percent) {\n                if (err) {\n                    $(\"#info\").text(err);\n                    return;\n                }\n                $(\"#progress\").css({width: percent + '%'});\n            });\n            upload.done(function(err, res) {\n                if (err) {\n                    $(\"#info\").text(err + ' ' + res);\n                    return;\n                }\n                $(\"#progress\").css({width: '100%'});\n                $(\"#info\").text(\"Upload complete\");\n            });\n\n        });\n    });\n    ```", "```html\n    var path = require('path'),\n        connect = require('connect'),\n        fs = require('fs');\n\n    connect()\n        .use('/upload', function(req, res) {        \n            var file = fs.createWriteStream(\n                path.join(__dirname, 'uploads', req.url))\n            req.pipe(file);\n            req.on('end', function() {\n                res.end(\"ok\");\n            });\n        })\n        .use(connect.static(__dirname))\n        .listen(8080);\n    ```", "```html\n    mkdir uploads\n    npm install connect\n    node server.js\n\n    ```", "```html\n openssl genrsa -out privatekey.pem 1024\n\n```", "```html\nopenssl req -new -key privatekey.pem -out csr.pem\n\n```", "```html\nopenssl x509 -req -in csr.pem -signkey privatekey.pem -out publiccert.pem\n\n```", "```html\n    var restify = require('restify');\n    var fs = require('fs');\n    // create option for the https server instance\n    var httpsOptions = {\n      key: fs.readFileSync('privatekey.pem'),//private key\n      certificate: fs.readFileSync('publiccert.pem')//certificate\n    };\n    ```", "```html\n    var serverCreate = function(app) {\n      function doHi(req, res, next) {\n        var name = 'nobody';\n        if(req.params.name){\n          name = req.params.name;\n        }\n        res.send('Hi ' + name);\n        return next();\n      }\n      app.get('/hi/', doHi);\n      app.get('/hi/:name', doHi);\n    }\n    ```", "```html\n    serverCreate(server);\n    serverCreate(httpsServer);\n    ```", "```html\n    server.listen(80, function() {\n      console.log('started at %s', server.url);\n    });\n\n    httpsServer.listen(443, function() {\n      console.log('started at %s', httpsServer.url);\n    });\n    ```", "```html\nError: listen EACCES\n at errnoException (net.js:770:11)\n at Server._listen2 (net.js:893:19)\n\n```", "```html\n    var app = require('http').createServer(requestHandler),\n        io = require('socket.io').listen(app),\n        fs = require('fs')\n    ```", "```html\n    function requestHandler (req, res) {\n      fs.readFile('index.html',\n        function (err, data) {\n          if (err) {\n            res.writeHead(500);\n            return res.end('Error loading index.html');\n          }\n        res.writeHead(200);\n        res.end(data);\n        });\n    }\n    ```", "```html\n    io.configure(function () {\n      io.set(\"transports\", [\"xhr-polling\"]);\n      io.set(\"polling duration\", 10);\n    });\n    ```", "```html\n    io.sockets.on('connection', function (socket) {\n      socket.emit('ping', {\n        timeIs: new Date()\n      });\n      socket.on('pong', function (data) {\n        setTimeout(function(){\n        socket.emit('ping', {\n          timeIs: new Date()\n        });\n        console.log(data);\n        }, 15000);\n      });\n    });\n    ```", "```html\n      <script src=\"img/socket.io.js\"></script>\n    ```", "```html\n        <script>\n          var socket = io.connect('http://localhost');\n          socket.on('ping', function (data) {\n            var p = document.createElement(\"p\");\n            p.textContent = 'Server time is ' + data.timeIs;\n            document.body.appendChild(p);\n            socket.emit('pong', {\n              my: 'clientData'\n            });\n          });\n        </script>\n    ```", "```html\nServer time is 2013-02-05T06:14:33.052Z\n```", "```html\n   debug - xhr-polling received data packet 5:::{\"name\":\"pong\",\"args\":[{\"my\":\"clientData\"}]}\n   debug - setting request GET /socket.io/1/xhr-polling/5jBJdDQ6Uc2ZYXzZHcqd?t=1360050667340\n   debug - setting poll timeout\n   debug - discarding transport\n```", "```html\n  io.sockets.on('connection', function (soc) {\n  soc.broadcast.emit('user connected');\n});\n```", "```html\nnpm install -g browserify\nnpm install express shoe dnode\n\n```", "```html\n    <!DOCTYPE HTML>\n    <html>\n    <head>\n    <title>Using websockets</title>\n    <style type=\"text/css\">\n    #chat { position: absolute; overflow: auto;\n        top:0; left:0; bottom:2em; right:12em; }\n    #users { position: absolute; overflow: auto;\n        top:0; right: 0; width:12em; bottom: 0; }\n    #input { position: absolute; overflow: auto;\n        bottom:0; height:2em; left: 0; right: 12em; }\n\n    #chat .name { padding-right:1em; font-weight:bold; }\n    #chat .msg { padding: 0.33em; }\n    </style>\n    </head>\n    <body>\n    <div id=\"chat\">\n    </div>\n    <div id=\"users\">\n    </div>\n    <input type=\"text\" id=\"input\">\n    <script src=\"img/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"img/example.min.js\"></script>\n    </body>\n    </html>\n    ```", "```html\n    function keysOf(obj) {\n        var k = [];\n        for (var key in obj)\n            if (obj.hasOwnProperty(key))\n                k.push(key);\n        return k;\n    }\n    function chat() {\n        var self = {},\n            users = {},\n            messages = [];\n\n        // Identify the user by comparing the data provided\n        // for identification with the data stored server-side\n        function identify(user) {\n            return users[user.name] && user.token\n                == users[user.name].token;\n        }\n        // Send an event to all connected chat users that\n        // are listening for events\n        function emit(event) {\n            console.log(event);\n            for (var key in users) if (users.hasOwnProperty(key))\n                if (users[key].send) users[key].send(event);\n        }\n        // This function resets the timeout countdown for a\n        // specified user. The countdown is reset on every user\n        // action and every time the browser sends a ping\n        // If the countdown expires, the user is considered\n        // to have closed the browser window and no longer present\n        function resetTimeout(user) {\n            if (user.timeout) {\n                clearTimeout(user.timeout);\n                user.timeout = null;\n            }\n            user.timeout = setTimeout(function() {\n                self.leave(user, function() {});\n            }, 60000);\n        }\n\n        // When a user attempts to join, he must reserve a\n        // unique name. If this succeeds, he is given an auth\n        // token along with the name. Only actions performed\n        // using this token will be accepted as coming from\n        // the user. After the user joins a list of users and\n        // past messages are sent to him along with the\n        // authentication information.\n        self.join = function(name, cb) {\n            if (users[name]) return cb(name + \" is in use\");\n            users[name] = {\n                name: name,\n                token: Math.round(Math.random() * Math.pow(2, 30))\n            }\n            resetTimeout(users[name]);\n            emit({type: 'join', name: name});\n            cb(null, { you: users[name], messages: messages,\n               users: keysOf(users) });\n        }\n        // The leave function is called when the user leaves\n        // after closing the browser window.\n        self.leave = function(user, cb) {\n            if (!identify(user)) return\n            clearTimeout(users[user.name].timeout);\n            delete users[user.name];\n            emit({type: 'leave', name: user.name});\n            cb(null);\n        }\n        // The message function allows the user to send a\n        // message. The message is saved with a timestamp\n        // then sent to all users as an event.\n        self.msg = function(user, text) {\n            if (!identify(user)) return;\n            resetTimeout(users[user.name]);\n            var msg = {\n                type: 'msg',\n                name: user.name,\n                text: text,\n                time: Date.now()\n            }\n            messages.push(msg);\n            emit(msg);\n        }\n        // The ping function allows the browser to reset\n        // the timeout. It lets the server know that the\n        // user hasn't closed the chat yet.\n        self.ping = function(user) {\n            if (identify(user))\n                resetTimeout(users[user.name]);\n        }\n        // The listen function allows the user to provide\n        // a callback function to be called for every event.\n        // This way the server can call client-side code.\n        self.listen = function(user, send, cb) {\n            if (!identify(user)) return\n            users[user.name].send = send;\n        }\n        return self;\n    };\n    module.exports = chat;\n    ```", "```html\n    var express = require('express'),\n        http    = require('http'),\n        chat    = require('./chat.js'),\n        shoe    = require('shoe'),\n        dnode   = require('dnode')\n    // Create an express app\n    var app = express();\n    // that serves the static files in this directory\n    app.use('/', express.static(__dirname));\n    // then create a web server with this app\n    var server = http.createServer(app);\n    // Create a chat room instance,\n    var room = chat();\n    // then create a websocket stream that\n    // provides the chat room API via dnode\n    // and install that stream on the http server\n    // at the address /chat\n    shoe(function (stream) {\n        var d = dnode(room);\n        d.pipe(stream).pipe(d);\n    }).install(server, '/chat');\n    // start the server\n    server.listen(8080);\n    ```", "```html\n    var shoe = require('shoe'),\n        dnode = require('dnode');\n\n    $(function() {\n\n        // Add a message to the message div\n        function addMsg(msg) {\n            var dMsg = $(\"<div />\").addClass('msg'),\n                dName = $(\"<span />\").addClass('name')\n                    .text(msg.name).appendTo(dMsg),\n                dText = $(\"<span />\").addClass('text')\n                    .text(msg.text).appendTo(dMsg);\n            dMsg.appendTo(\"#chat\");\n            $(\"#chat\").scrollTop($(\"#chat\")[0].scrollHeight);\n        }\n\n        // Re-display a list of the present users.\n        function showUsers(users) {\n            $(\"#users\").html('');\n            users.forEach(function(name) {\n                $(\"<div />\").addClass('user')\n                    .text(name).appendTo('#users');\n            });\n        }\n\n        // Create a client-side web sockets stream\n        // piped to a dnode instance\n        var stream = shoe('/chat');\n        var d = dnode();\n        // When the remote chat API becomes available\n        d.on('remote', function (chat) {\n            // Attempt to join the room until a suitable\n            // nickname that is not already in use is found\n            function join(cb, msg) {\n                var name = prompt(msg || \"Enter a name\");\n                chat.join(name, function(err, data) {\n                    if (err) join(cb, err);\n                    else cb(data);\n                });\n            }\n            join(function(data) {\n                var me = data.you,\n                    users = data.users;\n                // Show the users and messages after joining\n                showUsers(users);\n                data.messages.forEach(addMsg);\n                // Allow the user to send messages\n                $(\"#input\").on('keydown', function(e) {\n                    if (e.keyCode == 13) {\n                        // sending works by calling the\n                        // remote's msg function.\n                        chat.msg(me, $(this).val());\n                        $(this).val('');\n                    }\n\n                });\n                // Tell the remote we're listening for\n                // events\n                chat.listen(me, function(e) {\n                    if (e.type == 'msg')\n                        return addMsg(e);\n                    if (e.type == 'leave')\n                        delete users[users.indexOf(e.name)];\n                    else if (e.type == 'join')\n                        users.push(e.name);\n                    showUsers(users);\n                });\n                // Tell the remote every 30 seconds that\n                // we're still active\n                setInterval(function() {\n                    chat.ping(me);\n                }, 30000);\n\n            });\n        });\n        // pipe dnode messages to the websocket stream\n        // and messages from the stream to dnode\n        d.pipe(stream).pipe(d);\n    });\n    ```", "```html\n    browserify example.js \u2013-debug -o example.min.js\n\n    ```", "```html\n    node server.js\n\n    ```"]