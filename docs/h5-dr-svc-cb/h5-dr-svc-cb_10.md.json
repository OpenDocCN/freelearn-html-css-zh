["```html\n<!doctype html>\n<html>\n  <head>\n    <script src=\"img/angular.min.js\"></script>\n  </head>\n  <body>\n    <div ng-app>\n      <label>Amount in USD:</label>\n      $<input type=\"text\" ng-model=\"usdValue\" placeholder=\"Enter USD amount\">\n      <hr>\n      <label>Amount in GBP:</label><span ng-show=\"usdValue\"> \u00a3 {{usdValue * 0.65}}</span>\n    </div>\n  </body>\n</html>\n```", "```html\n    <!doctype html>\n    <html ng-app>\n    <head>\n    <script src=\"img/angular.min.js\"></script>\n    <script src=\"img/example.js\"></script>\n    </head>\n    <body>\n    <div ng-controller=\"TodoListController\">\n        <ul>\n            <li ng-repeat=\"task in tasks\" ng-show=\"task.shown\">\n            <input type=\"checkbox\" ng-model=\"task.complete\">  \n            {{task.text}}\n            </li>\n        </ul>\n        <form ng-submit=\"addTask()\">\n            <input type=\"text\" placeholder=\"Write a task here...\" ng-model=\"taskToAdd\">\n            <input type=\"submit\" value=\"Add\">\n        </form>\n        <button ng-click=\"hideComplete()\">Hide complete</button>\n    </div>\n    </body>\n    </html>\n    ```", "```html\n    function TodoListController($scope) {\n        $scope.tasks = [\n            {text: \"Write a todo list\",\n                complete: false, shown: true },\n            {text: \"Save it to the backend\",\n                complete: false, shown: true },\n        ];\n        $scope.addTask = function() {\n            $scope.tasks.push({\n                text: $scope.taskToAdd,\n                complete: false,\n                shown:true\n            });\n            $scope.taskToAdd = \"\";\n        };\n        $scope.hideComplete = function() {\n            $scope.tasks.forEach(function(t) {\n                if (t.complete)\n                    t.shown = false;\n            });\n        };\n    }\n    ```", "```html\n    <!doctype html>\n    <html ng-app=\"wiki\">\n    <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    <script src=\"img/markdown.js\"></script>\n    <script src=\"img/angular.min.js\"></script>\n    <script src=\"img/angular-sanitize.min.js\"></script>\n    <script src=\"img/edit-controller.js\"></script>\n    <script src=\"img/view-controller.js\"></script>\n    <script src=\"img/storage.js\"></script>\n    <script src=\"img/markdown-filter.js\"></script>\n    <script src=\"img/app.js\"></script>\n    </head>\n    <body>\n    <div id=\"main\" ng-view>\n    </div>\n    </body>\n    </html>\n    ```", "```html\n    angular.module('markdown', []).filter('markdown', function() {\n        return function(input) {\n            return input ? markdown.toHTML(input) : ''\n        };\n    });\n    ```", "```html\n    angular.module('storage', []).factory('Storage', function() {\n        var self = {};\n        self.get = function get(id) {\n            var page = localStorage[\"page-\"+id];\n            if (page) return JSON.parse(page);\n            else return {id: id, text: null};\n        };\n        self.save = function save(page) {\n            var stringified = JSON.stringify(page);\n            localStorage[\"page-\"+page.id] = stringified;\n        };\n        return self;\n    });\n    ```", "```html\n    var wwwApp = angular.module('wiki',\n        ['storage', 'markdown', 'ngSanitize'])\n        .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n                $locationProvider\n                    .html5Mode(true).hashPrefix('!');\n                $routeProvider.when('/edit/:page', {\n                    templateUrl: '../edit.html',\n                    controller: EditController\n                })\n                .when('/:page', {\n                    templateUrl: 'view.html',\n                    controller: ViewController\n                })\n            }]);\n    ```", "```html\n    <div ng-show=\"page.text\"\n        ng-bind-html-unsafe=\"page.text | markdown\">\n    </div>\n    <br>\n    <a href=\"edit/{{page.id}}\">Edit this page</a> -\n    <a href=\"./\">Go to the start page</a>\n    ```", "```html\n    function ViewController($scope, $routeParams, Storage) {\n        $scope.page = Storage.get($routeParams.page || 'index');\n    }\n    ```", "```html\n    <div class=\"edit\">\n        <div class=\"left\">        \n            <textarea ng-model=\"page.text\"></textarea>\n        </div>\n        <div class=\"right\"\n            ng-bind-html-unsafe=\"page.text | markdown\">\n        </div>\n    </div>\n    <a ng-click=\"savePage()\"\n        href=\"../{{page.id}}\">Save</a>\n    ```", "```html\n    function EditController($scope, Storage, $routeParams) {\n        $scope.page = Storage.get($routeParams.page);\n        $scope.savePage = function() {\n            Storage.save({id: $scope.page.id, text: $scope.page.text});\n        };\n    }\n    ```", "```html\n    * { box-sizing: border-box; }\n    #main { padding: 0em 1em; }\n    .edit .left {\n        float:left;\n        width: 50%;\n        padding-right: 1em; }\n    .edit .right {\n        float: right;\n        width: 50%;\n        padding-left: 1em; }\n    .edit textarea {\n        width: 100%;\n        min-height: 24em;}\n    .edit input {\n        width: 70%; }\n    .edit {\n        float:left;\n        width: 100%;\n        clear:both; }\n    ```", "```html\n    npm install -g http-server\n    http-server\n\n    ```", "```html\n['$routeProvider', '$locationProvider',  function($routeProvider, $locationProvider) { \u2026 }]\n```", "```html\nng-bind-html-unsafe=\"page.text | markdown\"\n```", "```html\nfunction EditController($scope, Storage, $routeParams) ...\nfunction ViewController($scope, $routeParams, Storage) ...\n```", "```html\nvar EditController = ['$scope', 'Storage', '$routeParams',  function($scope, Storage, $routeParams) { \u2026 }]\n```", "```html\n<!doctype html>\n<html ng-app>\n<head>\n<script src=\"img/angular.min.js\"></script>\n<style type=\"text/css\">\n    form { display: block; width: 550px; margin: auto; }\n    input[type=\"submit\"] { margin-left: 215px; }\n    span.err { color: #f00; }\n    label { width: 120px; display:inline-block; text-align: right; }\n</style>\n</head>\n<body>\n<div>\n    <form name=\"register\">\n        <p>\n        <label for=\"user\">User:</label>\n        <input type=\"text\" name=\"name\" ng-model=\"user.name\"\n            required  ng-minlength=\"5\" ng-maxlength=\"32\">\n        <span ng-show=\"register.name.$error.required\" class=\"err\">\n            Required</span>\n        <span ng-show=\"register.name.$error.minlength\" class=\"err\">\n            Minimum 5 characters</span>\n        <span ng-show=\"register.name.$error.maxlength\" class=\"err\">\n            Maximum 32 characters</span>\n        </p>\n\n        <p>\n        <label for=\"pass\">Pass:</label>\n        <input type=\"password\" name=\"pass\" ng-model=\"user.pass\"\n            required  ng-minlength=\"6\" ng-maxlength=\"32\"\n            ng-pattern=\"/^(?=.*[a-zA-Z])(?=.*[0-9])/\">\n        <span ng-show=\"register.pass.$error.required\" class=\"err\">\n            Required</span>\n        <span ng-show=\"register.pass.$error.minlength\" class=\"err\">\n            Minimum 6 characters</span>\n        <span ng-show=\"register.pass.$error.maxlength\" class=\"err\">\n            Maximum 32 characters</span>\n        <span ng-show=\"register.pass.$error.pattern\" class=\"err\">\n            Must have both letters and numbers</span>\n        </p>\n\n        <p>\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" name=\"age\" ng-model=\"user.age\"\n            required min=\"13\">\n        <span ng-show=\"register.age.$error.required\" class=\"err\">\n            Required</span>\n        <span ng-show=\"register.age.$error.min\" class=\"err\">\n            Must be 13 or older</span>\n        </p>\n\n        <p>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" name=\"email\" ng-model=\"user.email\"\n            required>\n        <span ng-show=\"register.email.$error.required\" class=\"err\">\n            Required</span>\n        <span ng-show=\"register.email.$error.email\" class=\"err\">\n            Not a valid email address</span>\n        </p>\n\n        <p>\n        <label for=\"url\">Website:</label>\n        <input type=\"url\" name=\"website\" ng-model=\"user.website\"\n            required>\n        <span ng-show=\"register.website.$error.required\" class=\"err\">\n            Required</span>  \n        <span ng-show=\"register.website.$error.url\" class=\"err\">\n            Not a valid website URL</span>\n        </p>\n\n        <input type=\"submit\" value=\"Register\" ng-disabled=\"register.$invalid\">\n    </form>\n</div>\n</body>\n</html>\n```", "```html\n<formName>.<fieldName>.$error.<checkName>\n```", "```html\nregister.user.$error.minlength\n```", "```html\n<formName>.$invalid\n```", "```html\nregister.$invalid\n```", "```html\n    <!doctype html>\n    <html ng-app=\"chart\">\n    <head>\n    <script src=\"img/angular.min.js\"></script>\n    <script src=\"img/jquery.min.js\"> </script>\n    <script src=\"img/jquery.flot.js\"></script>\n    <script src=\"img/random.js\"></script>\n    <script src=\"img/chart.js\"></script>\n    <script src=\"img/controller.js\"></script>\n    <script src=\"img/app.js\"></script>\n    </head>\n    <body>\n    <div id=\"main\" ng-controller=\"Controller\">\n        <chart style=\"display:block; width:800px; height:200px;\"\n            data=\"chart.data\" options=\"chart.options\">\n    </div>\n    </body>\n    </html>\n    ```", "```html\n    function Controller($scope, $timeout) {\n        $scope.chart = {\n            data: [getRandomData()],\n            options: {lines: {fill:true}}\n        };\n        setInterval(function updateData(delay) {\n            $scope.$apply(function() {\n                $scope.chart.data[0] = getRandomData();\n            });\n        }, 50);\n    }\n    ```", "```html\n    (function() {\n        var data = [], maximum = 200;\n        window.getRandomData = function getRandomData() {\n            if (data.length)\n                data = data.slice(1);\n            while (data.length < maximum) {\n                var previous = data.length ? data[data.length - 1] : 50;\n                var y = previous + Math.random() * 10 - 5;\n                data.push(y < 0 ? 0 : y > 100 ? 100 : y);\n            }\n            var res = [];\n            for (var i = 0; i < data.length; ++i)\n            res.push([i, data[i]])\n            return res;\n        }\n    }());\n    ```", "```html\n    angular.module('chart', []).directive('chart', function() {\n        var dir = {};\n        dir.restrict = 'E';\n        dir.scope = {\n            data: '&',\n            options: '&'\n        }\n        dir.link = function(scope, el, attrs) {\n            console.log(scope)\n            var data = scope.data(),\n                opts = scope.options(),\n                flot = $.plot(el, data, opts);\n            function updateOnData(newdata) {\n                data = newdata;\n                flot.setData(data);\n                flot.setupGrid();\n                flot.draw();\n            };\n            function updateOnOptions(options) {\n                opts = options;\n                flot = $.plot(el, data, opts);\n            }\n\n            scope.$watch('data()', updateOnData, {objectEquality: true});\n            scope.$watch('options()', updateOnOptions, {objectEquality: true});\n        }\n        return dir;\n    });\n    ```", "```html\ncurl https://install.meteor.com | /bin/sh\n\n```", "```html\n    meteor create simple\n\n    ```", "```html\n    meteor\n    [[[[[ /the-example-location/simple ]]]]]\n    Running on: http://localhost:3000/\n\n    ```", "```html\nif (Meteor.isClient) {\n  Template.hello.greeting = function () {\n    return \"Welcome to simple.\";\n  };\n\n  Template.hello.events({\n    'click input' : function () {\n      // template data, if any, is available in 'this'\n      if (typeof console !== 'undefined'){\n        console.log(\"You pressed the button\");\n      }\n    }\n  });\n}\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    // code to run on server at startup\n    });\n}\n```", "```html\n I'm running\n\n```", "```html\n<head>\n  <title>simple</title>\n</head>\n<body>\n  {{> hello}}\n</body>\n<template name=\"hello\">\n  <h1>Hello World!</h1>\n  {{greeting}}\n  <input type=\"button\" value=\"Click\" />\n</template>\n```", "```html\n`-- simple\n    |-- public\n    |   `-- meme.png\n    |-- simple.css\n    |-- simple.html\n    `-- simple.js\n```", "```html\n    >meteor create movies\n\n    ```", "```html\n    Meteor.startup(function () {\n      if (Movies.find().count() === 0) {\n        var data = [\n          {\n            name: \"North by northwest\",\n            score: \"9.9\"\n          },\n          {\n            name: \"Gone with the wind\",\n            score:\"8.3\"\n          },\n          {\n            name: \"1984\",\n            score: \"9.9\"\n          }\n        ];\n\n        var timestamp = (new Date()).getTime();\n        for (var i = 0; i < data.length; i++) {\n          var itemId = Movies.insert({\n            name: data[i].name,\n            score: data[i].score,\n            time: timestamp\n          });\n        }\n      }\n    });\n    ```", "```html\n    Movies = new Meteor.Collection(\"movies\");\n    Meteor.publish('movies', function () {\n      return Movies.find();\n    });\n    ```", "```html\n    <body>\n      <div id=\"main\">\n          {{> movies}}\n      </div>\n    </body>\n\n    <template name=\"movies\">\n      <h3>List of favorite movies</h3>\n      <div id=\"lists\">\n        <div>\n          <ul>\n            {{#each movies}}\n              <li><b>{{name}}</b>  {{score}}<li/>\n            {{/each}}\n          </ul>\n          <button>\n            <img src=\"img/icon.png\" width=\"30px\" height=\"30px\" />\n          </button>\n        </div>\n      </div>\n    </template>\n    ```", "```html\n    // Define mongo style collections to match server/publish.js.\n    Movies = new Meteor.Collection(\"movies\");\n\n    // Always be subscribed to the movies list.\n    Meteor.autorun(function () {\n        Meteor.subscribe('movies');\n    });\n\n    // fill the movies variable with data from the collection sorted by name\n    Template.movies.movies = function () {\n      return Movies.find({}, {sort: {name: 1}});\n    };\n\n    // on click we insert a random movie\n    Template.movies.events({\n      'click button': function(){\n        Movies.insert({\n          name: \"random awesome movie\",\n          score: Math.random() * 10\n        });\n      }\n    });\n    ```", "```html\n    meteor --port 3333\n\n    ```", "```html\nmeteor mongo\nMongoDB shell version: 2.2.3\nconnecting to: 127.0.0.1:3002/meteor\n\n```", "```html\n> db.getCollectionNames()\n[ \"movies\", \"system.indexes\" ]\n\n```", "```html\n> var x = db.getCollection(\"movies\");\n> x\nmeteor.movies\n\n```", "```html\n> x.find();\n{ \"name\" : \"North by northwest\", \"score\" : \"9.9\", \"time\" : 1360630048083, \"_id\" : \"bc8f1a7a-71bd-49a9-b6d9-ed0d782db89d\" }\n{ \"name\" : \"Gone with the wind\", \"score\" : \"8.3\", \"time\" : 1360630048083, \"_id\" : \"1d7f1c43-3108-4cc5-8fbf-fc8fa10ef6e2\" }\n{ \"name\" : \"1984\", \"score\" : \"9.9\", \"time\" : 1360630048083, \"_id\" : \"08633d22-aa0b-454f-a6d8-aa2aaad2fbb1\" }\n...\n\n```", "```html\n> db.movies.remove({\"_id\":\"beef20a3-c66d-474b-af32-aa3e6503f0de\"});\n\n```", "```html\n>help\n>db.help()\n\n```", "```html\nMeteor.autorun(function () {\n    Meteor.subscribe('movies');\n});\n```", "```html\n    >meteor create gallery\n\n    ```", "```html\n    // if the database is empty fill it with data\n    Meteor.startup(function () {\n      //has some images\n      if (Images.find().count() < 4) {\n        var images =[\n          {\n            name: \"Awesome Cat\",\n            url: \"img/1.jpg\",\n            votes: \"0\"\n          },{\n            name:\"Cool Cat\",\n            url: \"img/2.jpg\",\n            votes: \"0\"\n          },{\n            name:\"Mjauuu\",\n            url: \"img/3.jpg\",\n            votes: \"0\"\n          },{\n            name:\"The Cat\",\n            url: \"img/4.jpg\",\n            votes: \"0\"\n          }\n        ];\n\n        for (var i = 0; i < images.length; i++) {\n          Images.insert(images[i]);\n        }\n\n        Users.insert({\n          name: \"awesome user\",\n          pointsLeft: \"30\"\n        });\n      }\n    });\n    ```", "```html\n    // DB collection of movies\n    Images = new Meteor.Collection(\"images\");\n\n    // DB collection of users\n    Users = new Meteor.Collection(\"users\");\n\n    // Publish complete set of lists to all clients.\n    Meteor.publish('images', function () {\n      return Images.find();\n    });\n\n    // Publish for users\n    Meteor.publish('users', function () {\n      return Users.find();\n    });\n    ```", "```html\n    <body>\n      <div class=\"box\">\n        {{> main}}\n      </div>\n      {{> footer}}\n    </body>\n\n    <template name=\"footer\">\n      <footer>\n        {{footerText}}\n      </footer>\n    </template>\n    ```", "```html\n    <template name=\"main\">\n      {{#if hasUserEnteredName}}\n        {{> votes}}\n        {{> gallery}}\n      {{else}}\n      <label>Please insert your name\n        <input name=\"name\">\n        </input>\n        <button class=\"name\">start</button>\n        </label>\n      {{/if}}\n    </template>\n    ```", "```html\n    <template name=\"votes\">\n      <h3>You have <i>{{numberOfVotes}}</i> votes left</h3>\n    </template>\n\n    <template name=\"gallery\">\n      <div>\n        {{#each images}}\n        <div class=\"item\">\n          <p>\n            <b>Cat named:</b>{{name}}\n            </p>\n          <img src=\"img/{{url}}\" />\n          <p>\n            Votes:\n            <progress value=\"{{votes}}\" max=\"500\" />\n            <output>{{votes}}</output>\n          </p>\n          <button class=\"vote\">Vote for me</button>\n        </div>\n        {{/each}}\n      </div>\n    </template>\n    ```", "```html\n[ \"images\", \"system.indexes\", \"users\" ]\n```", "```html\nMONGO_URL=mongodb://localhost:3317 meteor\n```", "```html\nTemplate.main.events({\n    'click .name' : function () { ... }\n});\n```", "```html\nTemplate.gallery.events({\n  'click .vote' : function(e,t) {\n    //this object can be used to access elements\n      }\n});\n```", "```html\n    Users.update(\n        {_id:currentUser._id},\n        {$set:{pointsLeft:currentUser.pointsLeft}}\n      );\n```", "```html\nMeteor.startup(function () {\n  var collection = ['Users', 'Images'];\n  var redefine = ['insert', 'update', 'remove'];\n  for (var i = 0; i < collection.length; i++) {\n    for (var j = 0; j < redefine.length; i++){\n      Meteor.default_server.method_handlers['/' + collection[i] + '/' + redefine[j]] = function() {\n        console.log('someone is hacking you, oh no !!! Too bad for him...');\n      };\n    }\n  }\n});\n```", "```html\n    <body>\n      {{> list}}\n    </body>\n\n    <template name=\"list\">\n      <h1>This is my awesome list</h1>\n      <input placeholder=\"enter awesomeness\"> </input>\n      <button>Add</button>\n      <ul>\n        {{#each items}}\n          <li>{{text}} </li>\n        {{/each}}\n      </ul>\n    </template>\n    ```", "```html\n    Notes = new Meteor.Collection(\"Notes\");\n\n    if (Meteor.isClient) {\n      Template.list.items = function () {\n        return Notes.find();\n      };\n\n      Template.list.events({\n        'click button' : function () {\n          Notes.insert({\n            text: $('input').val()\n          });\n        }\n      });\n    }\n\n    if (Meteor.isServer) {\n      Meteor.startup(function () {\n        //initialize\n        if(Notes.find().count() < 1){\n          Notes.insert({\n            text: \"awesomeness\"\n          });\n        }\n      });\n    }\n    ```", "```html\n    meteor remove insecure\n\n    ```", "```html\n    insert failed: Access denied\n\n    ```", "```html\n    > meteor add accounts-base\n    accounts-base: A user account system\n    > meteor add accounts-password\n    accounts-password: Password support for accounts.\n    > meteor add email\n    email: Send email messages\n    >  meteor add accounts-ui\n    accounts-ui: Simple templates to add login widgets to an app.\n\n    ```", "```html\n     <div id=\"login\">\n        {{loginButtons align=\"right\"}}\n      </div>\n    ```", "```html\n    Accounts.ui.config({\n        passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL'\n    });\n    ```", "```html\n  Notes.allow({\n      insert: function (userId, doc) {\n        console.log(userId);\n        console.log(doc);\n        //do the check for the permission and return true if allowed\n        return true;\n      }\n    });\n```", "```html\n{\n  \"createdAt\": 1362434550460,\n  \"services\": {\n    \"password\": {\n      \"srp\": {\n        \"identity\": \"bE9uYyziWxM2soGem\",\n        \"salt\": \"FDEduAsvpf5ZJCWea\",\n        \"verifier\": \"11a2fa4139c8283db1ce61e5f5fa7bf875da27a9b8ec195 baae49cd69c7f3ea48e1c1db471e1bc6aa1a9894a0633f44098717e0c6af367dcd39f 964d63f4fd5346f3b314bd897b76d3f31aa8aeb37030e5fef099b77efb594ad07103 6ec31fb6a3016f0c6cc43605469f798e20fc5b005e982e579014aef7742aac3 bc5792271\"\n      }\n    },\n    \"resume\": {\n      \"loginTokens\": [\n        {\n          \"token\": \"PDbpT6jtKcdvZMurr\",\n          \"when\": 1362434550460\n        }\n      ]\n    }\n  },\n  \"username\": \"mite\",\n  \"emails\": [\n    {\n      \"address\": \"mitemitereski@gmail.com\",\n      \"verified\": false\n    }\n  ],\n  \"_id\": \"QuZEe4uSPK6MfM5PQ\"\n}\n```", "```html\n>meteor deploy myapp.meteor.com\n\n```", "```html\n>meteor bundle packed.tgz\n\n```", "```html\n> PORT=3000 MONGO_URL=mongodb://localhost:2222/myapp node main.js\n\n```"]