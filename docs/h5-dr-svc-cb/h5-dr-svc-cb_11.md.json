["```html\n    <head>\n    <title>Data URI example</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\">\n    </head>\n    ```", "```html\n    <div id=\"someImage\">\n    CSS image\n    </div>\n    ```", "```html\n    <a href=\"data:text/html,<body contenteditable>write here\">open editor</a>\n    ```", "```html\n    <a href=\"data:text/plain;charset=utf-8,\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0435\u0440\u0438\u0442\u0435%20\u045c\u0435%20\u0433\u043e%20\u043d\u0430\u0441\u0435\u043b\u0430\u0442%20\u0441\u0432\u0435\u0442\u043e\u0442\">this is some UTF-8 text </a>\n    ```", "```html\n    <p>Image tag </p>\n    <imgsrc='data:image/svg+xml,<svg version=\"1.1\"><circle cx=\"100\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"1\" fill=\"red\" /></svg>' />\n    ```", "```html\n    img {\n      width: 300px;\n      height: 110px;\n    }\n\n    #someImage {\n      background-image : url('data:image/svg+xml,<svg version=\"1.1\"><path d=\"M 100,100 l150,0a150,150 0 0,0 -37,-97 z\" fill=\"green\" stroke=\"black\" stroke-width=\"2\" stroke-linejoin=\"round\" /></svg>');\n    }\n    ```", "```html\ndata:[<mediatype>][;base64],<data>\n```", "```html\n    <meta charset=\"utf-8\">\n    <title>Session and storage</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"example.css\" />\n    ```", "```html\n    <form id=\"dogPicker\">\n    <fieldset>\n    <legend>Pick a dog</legend>\n    <div id=\"imageList\"></div>\n    <p>The best is:</p>\n    <p>\n    <input id=\"dog1\" type=\"radio\" name=\"dog\" value=\"dog1\" />\n    <label for=\"dog1\">small dog</label>\n\n    <input id=\"dog2\" type=\"radio\" name=\"dog\" value=\"dog2\" />\n    <label for=\"dog2\">doggy</label>\n\n    <input id=\"dog3\" type=\"radio\" name=\"dog\" value=\"dog3\" />\n    <label for=\"dog3\">other dog</label>\n    </p>\n    </fieldset>\n\n    <label for=\"comment\">Leave a comment</label>\n    <textarea id=\"comment\" name=\"comment\" ></textarea>\n    <button id=\"send\" type=\"button\">Pick</button>\n    </form>\n    ```", "```html\n    <p>\n          You have opened this page <output id=\"counter\">0</output> times\n    </p>\n    ```", "```html\n    <div id=\"selectedImage\"></div>\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/example.js\" ></script>\n    ```", "```html\n    $(function() {\n      $('#send').click(function() {\n    vardogId = $(\"#dogPicker :radio:checked\").val();\n    var comment = $('#comment').val();\n        //different ways to set data\n    sessionStorage.comment = comment;\n        // if no data available do AJAX call\n        if (localStorage.dogData) {\n    showSelectedImage(dogId);\n        } else {\n          $.ajax({\n    url: \"dogs.json\",\n          }).done(function(data){\n    localStorage.dogData = JSON.stringify(data);\n    showSelectedImage(dogId);\n          });\n        }\n      });\n    ```", "```html\n      if (sessionStorage.comment) {\n        $('#comment').val(sessionStorage.comment);\n      }\n    ```", "```html\n      if (localStorage.viewCount) {\n    localStorage.viewCount++;\n        $('#counter').val(localStorage.viewCount);\n      } else {\n    localStorage.viewCount = 1;\n      }\n    ```", "```html\n     function showSelectedImage(dogId){\n    vardogList = JSON.parse(localStorage.dogData);\n    vardogFile;\n        $.each(dogList.dogs, function(i,e){\n          if(e.id === dogId){\n    dogFile = e.file;\n          };\n        });\n          $('#selectedImage').html(\"<imgsrc='images/\" + dogFile + \"'></img>\");\n      }\n    ```", "```html\n    <body>\n    <p>\n    <progress id=\"progress\" value=\"0\" max=\"100\"></progress>\n    <output id=\"percent\" for=\"progress\">0</output>\n    </p>\n    <p>\n    <div id=\"fileInfo\"></div>\n    </p>\n    <input type=\"file\" id=\"file\" value=\"Choose text file\">\n    <button type=\"button\" id=\"abort\">Abort</button>\n    <button type=\"button\" id=\"slice\">Read 5 bytes</button>\n    <div id=\"state\"></div>\n    <br />\n    <label>\n            Contents:\n    <div id=\"content\"></div>\n    </label>\n    ```", "```html\n    <script src=\"img/jquery.min.js\"></script>\n    <script type=\"text/javascript\" src=\"img/example.js\"></script>\n    ```", "```html\n    $(function() {\n\n    varfr = new FileReader();\n\n      $('#abort').click(function(){\n    fr.abort();\n    console.log('aborting file change');\n      });\n    ```", "```html\n    $('#file').on('change', function(e) {\n        for (var i = 0; i <this.files.length; i++) {\n    var f = this.files[i];\n    fr = new FileReader();\n\n    fr.onerror = function (e) {\n            $('#state').append('error happened<br />').append(e).append('\\n');\n          }\n\n    fr.onprogress = function (e) {\n    var percent = (e.loaded * 100 / e.total).toFixed(1);\n            $('#progress').attr('max', e.total).attr('value', e.loaded);\n            $('#percent').val(percent + ' %');\n          }\n    fr.onabort = function() {\n            $('#state').append('aborted<br />');\n          }\n\n    fr.onloadstart = function (e) {\n            $('#state').append('started loading<br />');\n          }\n\n          if (f.type&& (f.type.match('image/.+')) || (f.type.match('video/.+'))) {\n    fr.readAsDataURL(f);\n          } else if (f.type.match('text/.+')) {\n    fr.readAsText(f);\n          } else {\n            $('#state').append('unknown type of file loaded, reading first 30 bytes <br />');\n          }\n\n    fr.onload = function(e) {\n            $('#state').append('finished reading <br />');\n    appendContents(f,e);\n          }\n          $('#fileInfo').html(getMetaData(f));\n        }\n      });\n    ```", "```html\n    function getMetaData(file){\n    var text = \"<b>file: </b>\" + file.name + \" <br />\";\n        text += \"<b>size: </b>\" + file.size + \" <br />\";\n        text += \"<b>type: </b>\" + file.type + \" <br />\";\n        text += \"<b>last modified: </b>\" + file.lastModifiedDate.toString() + \" <br />\";\n        return text;\n      }\n    ```", "```html\n    function appendContents(f,e) {\n        if (f.type&&f.type.match('image/.+')){\n          $(\"<img />\").attr('src', e.target.result).appendTo(\"#content\");\n        } else {\n          $(\"<pre />\").text(e.target.result).appendTo(\"#content\");\n        }\n      }\n    ```", "```html\n    $('#slice').click(function(){\n    varfileList = $('#file').prop('files');\n        $.each(fileList, function(i,file) {\n    fr = new FileReader();\n    var blob = file.slice(0, 15);\n    fr.readAsBinaryString(blob);\n    fr.onload = function(e) {\n            $(\"<pre />\").text(e.target.result).appendTo(\"#content\");\n          }\n        });\n       });\n      });\n    ```", "```html\n    fr.onerror = function (err){\n      switch(err.code){\n        case FileError.ENCODING_ERR:\n          // handle encoding error\n          break;\n        case FileError.SYNTAX_ERR:\n          // handle invalid line ending\n          break;\n        case FileError.ABORT_ERR:\n        // handle abort error\n        break;\n        default :\n        //handle all other errors , or unknown one\n        break;\n      }\n    }\n    ```", "```html\n    fr.onload = function (e){\n        // e.target.result contains the data from the file.\n    }\n    ```", "```html\n    fr.onprogress = function (e) {\n    var percent = (e.loaded * 100 / e.total).toFixed(1);\n            $('#progress').attr('max', e.total).attr('value', e.loaded);\n            $('#percent').val(percent + ' %');\n          }\n    ```", "```html\nif (window.File&&window.FileReader&&window.FileList&&window.Blob) {\n   // has support for File API\n}\n```", "```html\nwindow.webkitRequestFileSystem(\nwindow.TEMPORARY,\n  2*1024*1024,\n  function (fs){\nconsole.log(\"Successfully opened file system \" + fs.name);\n  });\n```", "```html\nfunction (fs){\nfs.root.getFile(\n    \"awesome.txt\",\n     { create : true },\n     function (fileEntry) {\nconsole.log(fileEntry.isDirectory); // false\nconsole.log(fileEntry.fullPath); // '/awesome.txt'\n    }\n   );\n}\n```", "```html\n        <!doctype html>\n        <html ng-app=\"todo\">\n        <head>\n        <script src=\"img/angular.min.js\"></script>\n        <script src=\"img/example.js\"></script>\n        <script src=\"img/service.js\"></script>\n        <meta charset=\"utf8\">\n        <style type=\"text/css\">\n                .todo-text {\n                    display: inline-block;\n                    width: 340px;\n        vertical-align:top;\n                }\n        </style>\n        </head>\n        <body>\n        <div ng-controller=\"TodoController\">\n        <select ng-model=\"archive\">\n        <option value=\"0\">Current</option>\n        <option value=\"1\">Archived</option>\n        </select>\n                From: <input type=\"date\" ng-model=\"from\">\n                To: <input type=\"date\" ng-model=\"to\">\n        <ul>\n        <li ng-repeat=\"todo in todos | filter:{archived:archive}\">\n        <input type=\"checkbox\" ng-model=\"todo.done\"\n        ng-disabled=\"todo.archived\"\n        ng-click=\"updateItem(todo)\">\n        <span class=\"todo-text\">{{todo.text}}</span>\n        <span class=\"todo-age\">{{todo.date | age}}</span>\n        </li>\n        </ul>\n        <form ng-submit=\"addItem()\">\n        <input ng-model=\"text\">\n        <input type=\"submit\" value=\"Add\">\n        </form>\n        <input type=\"button\" ng-click=\"archiveDone()\"\n                    value=\"Archive done\">\n        <div ng-show=\"svc.error\">{{svc.error}}</div>\n        </div>\n        </body>\n        </html>\n        ```", "```html\n    var app = angular.module('todo', []);\n\n    app.filter('age', function() {\n        return function(timestamp) {\n    var s = (Date.now() - timestamp) / 1000 / 3600;\n            if (s < 1) return \"now\";\n            if (s < 24) return s.toFixed(0) + 'h';\n            if (s < 24*7) return (s / 24).toFixed(0) + 'd';\n            return (s /24/7).toFixed(0) + 'w';\n        };\n    });\n    var DAY = 1000*3600*24;\n\n    function TodoController($scope, DBTodo) {\n        $scope.svc = DBTodo.data;\n        $scope.archive = 0;\n        $scope.from = new Date(Date.now() - 3*DAY)\n            .toISOString().substr(0, 10);\n        $scope.to = new Date(Date.now() + 1*DAY)\n            .toISOString().substr(0, 10);\n        $scope.todos = [];\n\n        function updateItems() {\n    DBTodo.getItems(\n                new Date($scope.from).getTime(),\n                new Date($scope.to).getTime(),\n                function(err, items) {\n                    $scope.todos = items;\n                });\n        };\n        $scope.addItem = function() {\n    DBTodo.addItem({\n                date: Date.now(),\n                text: $scope.text,\n                archived: 0,\n                done: false\n            }, function() {\n                $scope.text = \"\";\n    updateItems();\n            });\n        };\n        $scope.updateItem = function(item) {\n    DBTodo.updateItem(item);\n        };\n        $scope.archiveDone = function(item) {\n    DBTodo.archive(updateItems);\n        };\n        $scope.$watch('from',updateItems);\n        $scope.$watch('to', updateItems);\n    }\n    ```", "```html\n    angular.module('todo').factory('DBTodo', function($rootScope) {\n    ```", "```html\n    window.indexedDB = window.indexedDB || window.mozIndexedDB ||\n    window.webkitIndexedDB || window.msIndexedDB;\n    window.IDBTransaction = window.IDBTransaction ||\n    window.webkitIDBTransaction || window.msIDBTransaction;\n    window.IDBKeyRange = window.IDBKeyRange ||\n    window.webkitIDBKeyRange || window.msIDBKeyRange;\n\n    var self = {}, db = null;\n    self.data = {error: null};\n    ```", "```html\n        function initialize(done) {\n\n    varreq = window.indexedDB.open(\"todos\", \"1\");\n    varneedsPopulate = false;\n    req.onupgradeneeded = function(e) {\n    db = e.currentTarget.result;\n    varos = db.createObjectStore(\n                    \"todos\", {autoIncrement: true});\n    os.createIndex(\n                    \"date\", \"date\", {unique: false});\n    os.createIndex(\n                    \"archived\", \"archived\", {unique: false});\n    needsPopulate = true;\n            }\n    req.onsuccess = function(e) {\n    db = this.result;\n                if (needsPopulate) populate(done);\n                else done();\n            };\n    req.onerror = function(e) {\n    self.data.error = e.target.error;\n            };\n        }\n\n    Random item generator\n        function pickRandomText(k) {\n    var texts = [\"Buy groceries\",\n                \"Clean the car\",\n                \"Mow the lawn\",\n                \"Wash the dishes\",\n                \"Clean the room\",\n                \"Do some repairs\"],\n                selected = texts[(Math.random() * texts.length)\n                    .toFixed(0)];\n                return selected + \" \" + k;\n        }\n    ```", "```html\n        function populate(done) {\n    var now = Date.now();\n    var t = db.transaction('todos', 'readwrite');\n    t.oncomplete = done;\n\n    vartbl = t.objectStore('todos');\n    var N = 50;\n            for (var k = N; k > 0; --k) {\n    tbl.add({\n                    text: pickRandomText(k),\n                    date: Date.now() - (k / 2) * DAY,\n                    archived: k > 5 ? 1 : 0,\n                    done: (k > 5 || Math.random() < 0.5)\n                });\n            }\n        }\n    ```", "```html\n        function withDB(fn) {\n            return function() {\n    varargs = arguments, self = this;\n                if (!db) initialize(function() {\n    fn.apply(self, args);\n                });\n                else fn.apply(self, args);            \n            };\n        }\n    ```", "```html\n        function withScope(fn) {\n            return function() {\n    varargs = arguments, self = this;\n                $rootScope.$apply(function() {\n    fn.apply(self, args);\n                });\n            };\n        }\n    ```", "```html\n    self.getItems = withDB(function(from, to, cb) {\n    var list = [];\n    var index = db.transaction('todos')\n                .objectStore('todos').index('date');\n    varreq = index.openCursor(IDBKeyRange.bound(from, to, true, true));\n    req.onsuccess = function(e) {\n    var cursor = e.target.result;\n                if (!cursor)\n                    return withScope(function() {\n    cb(null, list);\n                    })();\n    list.push(cursor.value);\n    cursor.continue();\n            };\n        });\n\n    self.updateItem = withDB(function(item, done) {\n    var t = db.transaction('todos', 'readwrite'),\n                ix = t.objectStore('todos').index('date'),\n    req = ix.openCursor(IDBKeyRange.only(item.date));\n    t.oncomplete = done &&withScope(done);\n    req.onsuccess = function(e) {\n    var cursor = e.target.result;\n                if (cursor) cursor.update(item);\n            };            \n        });\n\n    self.archive = withDB(function(done) {\n    var current = IDBKeyRange.only(0);\n    var t = db.transaction('todos', 'readwrite'),\n    req = t.objectStore('todos')\n                .index(\"archived\")\n                .openCursor(current);\n\n    t.oncomplete = withScope(done);\n\n    req.onsuccess = function(e) {\n    var cursor = e.target.result;\n                if (!cursor) return;\n                if (cursor.value.done) {\n    cursor.value.archived = 1;\n    cursor.update(cursor.value);\n                }\n    cursor.continue();\n            };\n\n        });\n\n    self.addItem = withDB(function(item, done) {         \n    var t = db.transaction('todos', 'readwrite'),\n    os = t.objectStore('todos');\n    t.oncomplete = withScope(done);\n    os.add(item);\n        });\n\n        return self;\n    });\n    ```", "```html\n    var testing = (function (me) {\n    me.data1k =  new Array(1025).join(\"a\"); // about 1k\n    me.data100k = new Array((1024*100)+1).join(\"b\");// about 100k\n    ```", "```html\n    me.run = function (max, data) {\n    var el = document.getElementById('status');\n    el.setAttribute('max', max);\n        try {\n          for (i = 0; i < max; i++) {\n    console.log(i);\n    el.setAttribute('value', 1+i);\n    localStorage.setItem(i, data);\n        }\n        } catch (err) {\n    maxReached(i, err);\n        }\n    }\n    The maxReached function will display the last entry that was successfully stored:\n      function maxReached(i, err) {\n    console.log(\"max reached\");\n    console.log(err);\n    var div = document.getElementById('max');\n    div.innerHTML = \"Reached max \" + i + \" entry\";\n      }\n    ```", "```html\n    me.clear = function() {\n    var progress = document.getElementById('status');\n    progress.setAttribute('value','0');\n    localStorage.clear();\n    console.log(\"removed all data from localStorage\");\n      }\n    ```", "```html\n    <body>\n    <progress id=\"status\" value=\"0\" max=\"100\"></progress>\n    <div id=\"max\">have not reached max</div>\n    <button type=\"button\" onclick=\"testing.clear()\" >clear</button>\n    <button type=\"button\" onclick=\"testing.run(100,testing.data1k)\" >100 entries 1K</button>\n    <button type=\"button\" onclick=\"testing.run(500,testing.data100k)\" >500 entries 100K</button>\n    <script src=\"img/example.js\"></script>\n    </body>\n    ```", "```html\nwindow.webkitStorageInfo.requestQuota(PERSISTENT, 10*1024*1024, function(bytes){\nconsole.log(bytes);\n}, function (error){\nconsole.log(error);\n});\n```", "```html\n    <div>\n    <nav>\n    <ul>\n    <li><div data-id=\"0\" data-url=\"/mycat.html\">A cat</div></li>\n    <li><div data-id=\"1\" data-url=\"/awesome.html\">Some cat</div></li>\n    <li><div data-id=\"2\" data-url=\"/somecat.html\">The cat</div></li>\n    </ul>\n    </nav>\n    <div id=\"image\">\n    </div>\n    </div>\n    ```", "```html\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/example.js\"></script>\n    ```", "```html\n    <style>\n    nav div {\n    text-decoration:underline;\n          cursor: pointer;\n        }\n    </style>\n    ```", "```html\n    varcatson = [\n      {\n      \"name\":\"Awesome cat\",\n      \"url\":\"1.jpg\"\n      },\n      {\n      \"name\":\"Crazy cat\",\n      \"url\":\"2.jpg\"\n      },\n      {\n      \"name\":\"Great cat\",\n      \"url\":\"3.jpg\"\n      }\n    ];\n    ```", "```html\n    $(document).ready( function() {\n      function hasSupportForHistory() {\n        return window.history&&history.pushState;\n      }\n\n      if ( !hasSupportForHistory() ) {\n        $('body').text('Browser does not have support for History fall backing');\n        return;\n      }\n    ```", "```html\n      $(\"nav div\").click( function(e) {\n    console.log('clicking');\n\n    var title = $(this).text(),\n    url = document.URL.substring(0, document.URL.lastIndexOf('/')) + $(this).data('url'),\n            id = $(this).data('id'),\n    img = '<imgsrc=\"img/'+ catson[id].url +'\" />',\n            text = '<h1>'+catson[id].name+'</h1>';\n\n        // change the displayed url\n    history.pushState(null, title, url);\n        $('#image').html(text + img);\n        // stop default propagation of event\n    e.preventDefault();\n      })\n    ```", "```html\nError code 404.\nMessage: File not found.\nError code explanation: 404 = Nothing matches the given URI.\n\n```", "```html\nwindow.history.back();\n```", "```html\nwindow.history.forward();\n```", "```html\nwindow.history.go(-3);\n```"]