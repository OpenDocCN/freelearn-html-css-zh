- en: Chapter 12. Multimedia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 多媒体
- en: 'In this chapter we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Playing audio files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放音频文件
- en: Playing video files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放视频文件
- en: Customizing controls for media elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义媒体元素的控件
- en: Adding text to your video
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向您的视频添加文本
- en: Embedding multimedia
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多媒体嵌入
- en: Converting text to speech using HTML5 audio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5音频将文本转换为语音
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: HTML5 adds two elements audio and video, which provide a functionality that
    was previously done with use of add-ons to the browsers. In most of the cases,
    we find players that are Flash-based but that is lately being changed. Most of
    the browsers now have a good support for the basic HTML5 media element related
    functionality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5添加了两个元素音频和视频，它们提供了以前使用浏览器插件完成的功能。在大多数情况下，我们发现的播放器都是基于Flash的，但最近情况正在改变。大多数浏览器现在对基本的HTML5媒体元素相关功能有很好的支持。
- en: Customization options for the player were very limited and vendor specific.
    Most of the sites had and some still have their own custom players that were done
    in Flash, since it was the best way to do the job.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 播放器的自定义选项非常有限，并且是特定于供应商的。大多数网站都有一些仍然使用Flash制作的自定义播放器，因为这是完成工作的最佳方式。
- en: Flash by itself is not going to disappear all of a sudden, but having alternative
    that uses open standards always makes a compelling case on why not to use it.
    The same is happening in the web game industry, HTML5 is taking over Flash-based
    games market each day.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Flash本身不会突然消失，但是使用开放标准的替代方案总是有说服力的理由。同样的情况也发生在网络游戏行业，HTML5正在逐渐取代基于Flash的游戏市场。
- en: Playing audio files
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放音频文件
- en: The audio element enables a simple way to play audio files in the browser. Adoption
    of this element had many controversial discussions mostly due to the lack of common
    grounds for a format. Initially Ogg Vorbis ([http://www.vorbis.com/](http://www.vorbis.com/))
    was the format suggested in the W3C specification.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 音频元素使得在浏览器中播放音频文件变得简单。这个元素的采用引起了很多争议，主要是因为缺乏格式的共同基础。最初，W3C规范建议使用Ogg Vorbis ([http://www.vorbis.com/](http://www.vorbis.com/))格式。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Up-to-date information on browser support for different formats can be found
    on `www.caniuse.com`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有关不同格式的浏览器支持的最新信息可以在`www.caniuse.com`上找到。
- en: In this recipe, we will take a look at the element and some of the basic attributes
    that can be applied on it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看一下元素和一些可以应用在它上面的基本属性。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to play an audio we need an actual audio file. You can pick one on
    your own or use the one that comes with the example. The file will be served from
    the music folder. We will use Mozart—Clarinet Concerto in A K. 622, II. Adagio
    by Jason Weinberger & the WCFSO available at the free music archive [http://freemusicarchive.org/music/Jason_Weinberger__the_WCFSO/Jason_Weinberger__the_Waterloo-Cedar_Falls_Symphony_Orchestra/](http://freemusicarchive.org/music/Jason_Weinberger__the_WCFSO/Jason_Weinberger__the_Waterloo-Cedar_Falls_Symphony_Orchestra/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了播放音频，我们需要一个实际的音频文件。您可以自己选择一个，或者使用示例中附带的文件。该文件将从音乐文件夹中提供。我们将使用Jason Weinberger
    & the WCFSO在免费音乐档案馆[http://freemusicarchive.org/music/Jason_Weinberger__the_WCFSO/Jason_Weinberger__the_Waterloo-Cedar_Falls_Symphony_Orchestra/](http://freemusicarchive.org/music/Jason_Weinberger__the_WCFSO/Jason_Weinberger__the_Waterloo-Cedar_Falls_Symphony_Orchestra/)提供的Mozart—Clarinet
    Concerto in A K. 622, II. Adagio。
- en: The file is of type `.mp3`, but for the purpose of this example, we also need
    a `.ogg` file. There are plenty of converters available both online and offline
    so we can use [http://media.io](http://media.io) for example. There is also a
    converted `song.ogg` file available in the example files if you don't want to
    go through the hassle.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的类型是`.mp3`，但是为了这个例子，我们还需要一个`.ogg`文件。有很多在线和离线的转换器可用，所以我们可以使用[http://media.io](http://media.io)。例如。如果您不想麻烦，示例文件中还有一个转换后的`song.ogg`文件可用。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will create a HTML file that will contain an audio player:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含音频播放器的HTML文件：
- en: 'The body section will contain the following:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: body部分将包含以下内容：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A small text for attribution:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 归因的一小段文字：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And that is it, you should have an audio player accessible in your browser.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，您应该在浏览器中有一个可访问的音频播放器。
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The old way was to use `<object>` and `<embed>` with a lot of player specific
    parameters passed to the embedded `.swf` file, looking something like the following
    code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的方法是使用`<object>`和`<embed>`，并传递了许多特定于播放器的参数给嵌入的`.swf`文件，看起来像下面的代码：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The new way is fairly simple, we can add an audio element with the `src` attribute
    specified:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方法相当简单，我们可以添加一个带有指定`src`属性的音频元素：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will automatically play a file on the page without giving options to the
    user about stopping the music. In order to have a player rendered by the user
    agent we add the attribute controls. One other limitation we impose by setting
    the `src` attribute is that only that file will be played. You might be wondering
    why we would need multiple sources but the reasoning is simple. With the current
    state some browsers support certain format but others do not. If we want to have
    support in all modern browsers then we supply the option to have multiple sources.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动在页面上播放文件，而不给用户关于停止音乐的选项。为了让用户代理呈现播放器，我们添加了属性控件。我们通过设置`src`属性施加的另一个限制是只播放该文件。你可能会想为什么我们需要多个来源，但原因很简单。在当前状态下，一些浏览器支持某些格式，而其他浏览器不支持。如果我们想要在所有现代浏览器中获得支持，那么我们就提供了多个来源的选项。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this was the rough state of the browser format support
    using Windows as operating system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，这是使用Windows操作系统的浏览器格式支持的大致情况。
- en: '| Browser/Feature | WAV | Opus | Ogg | MP3 | ACC |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器/功能 | WAV | Opus | Ogg | MP3 | ACC |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Firefox 20 | Yes | Yes | Yes | No | No |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Firefox 20 | 是 | 是 | 是 | 否 | 否 |'
- en: '| Chrome 26 | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| Chrome 26 | 是 | 是 | 是 | 是 | 是 |'
- en: '| IE 9 | No | No | No | Yes | Yes |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| IE 9 | 否 | 否 | 否 | 是 | 是 |'
- en: '| Opera | Yes | No | Yes | No | No |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Opera | 是 | 否 | 是 | 否 | 否 |'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Beside the standard web sites that provide browser support stats you can also
    use a test suite done by SoundCloud to check individual features at [http://areweplayingyet.org/](http://areweplayingyet.org/)
    or the source on [https://github.com/soundcloud/areweplayingyet](https://github.com/soundcloud/areweplayingyet).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供浏览器支持统计数据的标准网站外，您还可以使用SoundCloud完成的测试套件来检查[http://areweplayingyet.org/](http://areweplayingyet.org/)上的各个功能，或者在[https://github.com/soundcloud/areweplayingyet](https://github.com/soundcloud/areweplayingyet)上查看源代码。
- en: 'The source element provides us to specify multiple alternative resources for
    any media element. By itself it has no meaning so it should be part of some media
    tag. We can have multiple source elements that have different `src`, type, and
    media attributes. For example, we could have the following element:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 源元素允许我们为任何媒体元素指定多个备用资源。它本身没有意义，因此应该是某些媒体标签的一部分。我们可以有多个具有不同`src`、类型和媒体属性的源元素。例如，我们可以有以下元素：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In case you are not sure that any of the source you have provided can be used
    in the users browsers, you can attach `onerror` event listener on the `source`
    element. This handler could serve to execute a fallback.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定您提供的任何源是否可以在用户的浏览器中使用，您可以在`source`元素上附加`onerror`事件侦听器。这个处理程序可以用来执行一个回退。
- en: 'There are few other attributes that can be used on a media elements. Besides
    the global attributes the media specified ones are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他属性可以用于媒体元素。除了全局属性外，媒体指定的属性包括：
- en: 'The `autoplay` attribute: It is a Boolean value attribute that defines if browser
    should start playing the instant it has a big enough portion of the media file.
    The default state for this element is to be missing, meaning that we don''t have
    auto play by default.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoplay`属性：它是一个布尔值属性，定义了浏览器是否应该在具有足够大的媒体文件部分时立即开始播放。该元素的默认状态是缺失，这意味着我们默认情况下没有自动播放。'
- en: 'The `preload` attribute: It gives a hint to the browsers that the source file
    should be downloaded even if the user has not yet click on play. The idea here
    is that we expect at some point in the future that the file will be played, being
    synonymous with setting the value to `auto`. The value can be also set to `none`
    which hints that the browsers should hold on preloading since we don''t expect
    the user to press the play button. There is also the option to have the value
    of metadata, which would mean only to load the metadata of the media file, like
    the length for example.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preload`属性：它向浏览器提供提示，即使用户尚未点击播放，源文件也应该被下载。这里的想法是我们期望将来某个时候会播放文件，相当于将值设置为`auto`。该值也可以设置为`none`，这表明浏览器应该暂停预加载，因为我们不希望用户按下播放按钮。还有一个选项是将值设置为metadata，这意味着只加载媒体文件的元数据，比如长度。'
- en: 'The `muted` attribute: It is also a Boolean-based attribute the has default
    value of false meaning there will be sound.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`muted`属性：它也是一个基于布尔值的属性，默认值为false，表示将没有声音。'
- en: 'The `loop` attribute: It sets the audio to beginning once finished.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loop`属性：它在完成后将音频设置为重新开始。'
- en: 'The `controls` attribute: It simply adds player controls.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controls`属性：它简单地添加了播放器控件。'
- en: 'The `mediagroup` attribute: It is used to group multiple media elements, for
    example, if we want to have same controls for two elements we can set them to
    use the same media group.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mediagroup`属性：它用于对多个媒体元素进行分组，例如，如果我们希望两个元素使用相同的控件，我们可以设置它们使用相同的媒体组。'
- en: 'The `crossorigin` attribute: It can be specified to restrict the src attributes
    to conform with **Cross Origin Resource Sharing** (**CORS**).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crossorigin`属性：它可以指定限制`src`属性符合**跨域资源共享**（**CORS**）。'
- en: Most of the other customization's and access from JavaScript will be part of
    the following recipes. If we use the element without the controls attribute set
    it is a good idea to set the CSS for the audio element to `display:none` in order
    to ensure it will not take page space.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数其他的自定义和JavaScript访问将在以下教程中介绍。如果我们使用没有设置控件属性的元素，最好将音频元素的CSS设置为`display:none`，以确保它不会占用页面空间。
- en: Playing video files
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放视频文件
- en: In order to add native support for videos in the browsers, HTML5 introduced
    the video element. This is very similar to an audio element, and the same attributes
    apply since they both share common interface. There are few other attributes that
    are available only for the video element. Also the codecs for the source are mostly
    different, for video we have H.264/MPEG-4, VP8, VP9, and Theora.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在浏览器中添加对视频的本地支持，HTML5引入了视频元素。这与音频元素非常相似，因为它们共享共同的接口，所以相同的属性适用。还有一些其他属性仅适用于视频元素。此外，源的编解码器大多不同，对于视频，我们有H.264/MPEG-4、VP8、VP9和Theora。
- en: In this recipe we will see how to use the built-in player by creating a simple
    page.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何通过创建一个简单的页面来使用内置播放器。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: HTML5 specification on media elements can be found at [http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5媒体元素的规范可以在[http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html)找到。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need a video file to play with our player, so you can pick one on your own.
    We have picked to use one of the videos available at [http://archive.org/details/animationandcartoons](http://archive.org/details/animationandcartoons).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个视频文件来使用我们的播放器，所以您可以自己选择一个。我们选择使用[http://archive.org/details/animationandcartoons](http://archive.org/details/animationandcartoons)上提供的视频之一。
- en: The video is called "Boogie Woogie Bugle Boy" by "Walter Lantz Productions"
    and in 1941 it was nominated for Oscar.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视频叫做《Boogie Woogie Bugle Boy》，由《Walter Lantz Productions》制作，在1941年被提名奥斯卡奖。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Archive.org also known as Internet Archive is a non-profit digital library with
    a mission of "universal access to all knowledge". Beside being a book library
    it also hosts a variety of multimedia. One of the more famous sub projects is
    the wayback machine, [http://archive.org/web/web.php](http://archive.org/web/web.php),
    an archive of snapshots from states of a website in the past. There is also a
    sub project called [nasaimages.org](http://nasaimages.org) intended co make images
    and video from NASA closer to the public. The amount of data available at Internet
    archive is enormous making it a great source of information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Archive.org，也称为互联网档案馆，是一个非营利数字图书馆，其使命是“普遍获取所有知识”。除了是一个图书馆之外，它还托管了各种多媒体。更著名的子项目之一是wayback
    machine，[http://archive.org/web/web.php](http://archive.org/web/web.php)，这是一个网站过去状态的快照存档。还有一个名为[nasaimages.org](http://nasaimages.org)的子项目，旨在使NASA的图像和视频更接近公众。互联网档案馆提供的数据量非常庞大，使其成为一个很好的信息来源。
- en: Additionally, we will use a poster image that will be shown before the video
    starts; the image is titled `poster.png`, and is part of the example source, but
    you may use any image you like.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用一个海报图像，在视频开始之前显示该图像；图像名为`poster.png`，是示例源的一部分，但您可以使用任何您喜欢的图像。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We create a simple HTML that will contain the video element and have a source
    to our video:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个简单的HTML，其中包含视频元素，并为我们的视频提供一个源：
- en: 'The body section will contain the following code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: body部分将包含以下代码：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And the attribution will contain the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且归因将包含以下代码：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After opening this we should have a running video player like the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，我们应该有一个运行中的视频播放器，就像以下截图一样：
- en: '![How to do it...](img/9282OT_12_01.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/9282OT_12_01.jpg)'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The video element is very similar to an audio element and all the attributes
    from audio apply on a video element. The video specific attributes are:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 视频元素与音频元素非常相似，所有音频元素的属性都适用于视频元素。视频特定的属性包括：
- en: '`Width` and `height`: They represent the width and height of the element. To
    control will re-size the video to fit into the size specified. The actual size
    of the video depends on the file being played.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Width`和`height`：它们表示元素的宽度和高度。控制将调整视频大小以适应指定的大小。视频的实际大小取决于正在播放的文件。'
- en: '`poster`: It is an attribute that enables us to provide a static image to display
    on the video element until the user decide to play the video.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poster`：这是一个属性，使我们能够在用户决定播放视频之前在视频元素上显示静态图像。'
- en: By adding various combination of attributes to the video, we can make the user
    experience much better; in our code example the video will get centered since
    the width and height attributes do not match the real width and height of the
    video.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向视频添加各种属性的组合，我们可以使用户体验更好；在我们的代码示例中，视频将居中显示，因为宽度和高度属性与视频的实际宽度和高度不匹配。
- en: 'If we want to play specific range of the video there is a built-in support
    for that as well. For example we may want to play our video from the 30th second
    to the 40th second. To do this in the URL of the `src` attributes, we append a
    hash (`#`) followed by the fragment definition as in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要播放视频的特定范围，也有内置的支持。例如，我们可能希望从第30秒播放到第40秒。要在`src`属性的URL中执行此操作，我们在哈希（`#`）后附加一个片段定义，如以下代码所示：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The generic definition is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通用定义如下：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Variables `starttime` and `endtime` are optional, and can have a number that
    specifies the number of seconds from the start or have `hours:minutes:seconds`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`starttime`和`endtime`是可选的，可以是指定从开始的秒数，也可以是`小时:分钟:秒`的格式。
- en: 'If we want to play from the 80th second until the end of the video, the source
    will be as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从第80秒播放到视频结束，源将如下所示：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Videos are often served encoded in some lossy compressed format since they are
    very large to be transmitted as raw format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 视频通常以一些有损压缩格式编码，因为它们作为原始格式传输时非常大。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about lossy compression on the following link [https://en.wikipedia.org/wiki/Lossy_compression](https://en.wikipedia.org/wiki/Lossy_compression).
    The main idea is that the size of the original video is significantly reduced
    by sacrificing certain level of information and quality.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解有关有损压缩的更多信息[https://en.wikipedia.org/wiki/Lossy_compression](https://en.wikipedia.org/wiki/Lossy_compression)。其主要思想是通过牺牲一定程度的信息和质量来显著减小原始视频的大小。
- en: Microsoft and Apple have license to use H.264, or more commonly known by the
    extension `.mp4` or `.m4v`. The codec has may different versions and combinations,
    additionally it is supported by YouTube and iTunes making it a very popular choice.
    Firefox and Chrome had plans to drop support for it since the format is proprietary
    and certain royalties must be paid, making it a very controversial choice. Firefox
    is planned to support the codec in the future but only when a third-party decoder
    is available.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 微软和苹果拥有使用H.264的许可证，或者更常见的是通过扩展名`.mp4`或`.m4v`。该编解码器有许多不同的版本和组合，此外，它受YouTube和iTunes的支持，使其成为一个非常受欢迎的选择。Firefox和Chrome原本计划放弃对其的支持，因为该格式是专有的，并且必须支付一定的特许费，这使得它成为一个非常有争议的选择。Firefox计划在将来支持该编解码器，但前提是有第三方解码器可用。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More on H.264 can be found on [http://en.wikipedia.org/wiki/H.264/MPEG-4_AVC](http://en.wikipedia.org/wiki/H.264/MPEG-4_AVC).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关H.264的更多信息，请访问[http://en.wikipedia.org/wiki/H.264/MPEG-4_AVC](http://en.wikipedia.org/wiki/H.264/MPEG-4_AVC)。
- en: Ogg Theora comes from [Xiph.org](http://Xiph.org), the organization that provided
    the `.ogg` container and the Vorbis audio codec we used in the audio element recipe,
    among other contributions. This is supported by Firefox, Opera, and Chrome, but
    not on IE and Safari, at least not by default.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Ogg Theora来自[Xiph.org](http://Xiph.org)，这个组织提供了我们在音频元素配方中使用的`.ogg`容器和Vorbis音频编解码器，以及其他贡献。这受到Firefox、Opera和Chrome的支持，但至少默认情况下不受IE和Safari的支持。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More on Ogg Theora can be found on [http://www.theora.org/](http://www.theora.org/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ogg Theora的更多信息，请访问[http://www.theora.org/](http://www.theora.org/)。
- en: WebM is supports Vorbis as audio codec and VP8 as video. VP8 is a codec developed
    by a company called On2 that got bought by Google. Additionally there is WebM
    is supported by Chrome, Opera, and Firefox natively, as for IE and Safari the
    user is required to download additional plugin.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: WebM支持Vorbis作为音频编解码器，支持VP8作为视频编解码器。VP8是由一家名为On2的公司开发的编解码器，后来被Google收购。此外，WebM原生支持Chrome、Opera和Firefox，至于IE和Safari，用户需要下载额外的插件。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More on WebM, the format, tools, and documentation sounding it can be found
    on [http://www.webmproject.org/](http://www.webmproject.org/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有关WebM的更多信息，包括格式、工具和相关文档，请访问[http://www.webmproject.org/](http://www.webmproject.org/)。
- en: There's more...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Having multiple source is good but not always an option. We also want to have
    a fallback for older browsers and to do that we must depend on a plugin.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有多个来源是好的，但并不总是一个选择。我们还希望为旧浏览器提供备用方案，为此我们必须依赖插件。
- en: 'If you referencing a video from third-party pay site such as YouTube or Vimeo,
    you can simply place an `iframe` of the embedded player:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您引用来自YouTube或Vimeo等第三方付费网站的视频，您可以简单地放置嵌入播放器的`iframe`：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There are also server JavaScript libraries that make the fallback process simple.
    One of them is [http://mediaelementjs.com/](http://mediaelementjs.com/).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些服务器JavaScript库可以使备用过程变得简单。其中之一是[http://mediaelementjs.com/](http://mediaelementjs.com/)。
- en: 'The installation is simple since we only include the `.js` and `.css` files
    as dependencies as in the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 安装很简单，因为我们只需要包含`.js`和`.css`文件作为依赖项，如下所示：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As for the player fallback player:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 至于备用播放器：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The fallback player is just one of the many features that come with `mediaelement.js`;
    there are lot of options for mobile browsers as well as lot of simplification
    for the API.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 备用播放器只是`mediaelement.js`的众多功能之一；移动浏览器有很多选项，API也有很多简化。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested into more details on possible conversion tool or the politics
    behind the codecs as well as detailed explanation of them, take a look at Mark
    Pilgram's book *Dive into HTML5*,it is available at [http://fortuito.us/diveintohtml5/video.html](http://fortuito.us/diveintohtml5/video.html).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对可能的转换工具或编解码器背后的政策以及对它们的详细解释感兴趣，请查看Mark Pilgram的书*Dive into HTML5*，可在[http://fortuito.us/diveintohtml5/video.html](http://fortuito.us/diveintohtml5/video.html)上找到。
- en: There is also an interesting article titled "Video for everybody" on the topic
    of enabling video support on different browsers, [http://camendesign.com/code/video_for_everybody](http://camendesign.com/code/video_for_everybody).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一篇有趣的文章，标题为“面向所有人的视频”，讨论了在不同浏览器上启用视频支持的主题，[http://camendesign.com/code/video_for_everybody](http://camendesign.com/code/video_for_everybody)。
- en: Customizing controls for media elements
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义媒体元素的控件
- en: Media elements, currently video and audio, can be controlled using JavaScript
    since the elements theme self contain useful methods and attributes. In this recipe,
    we will go through some of the most basic functionality and methods that can be
    applied on elements that have the `HTMLMediaElement` interface.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体元素，目前是视频和音频，可以使用JavaScript进行控制，因为这些元素本身包含有用的方法和属性。在这个配方中，我们将介绍一些最基本的功能和方法，这些功能和方法可以应用在具有`HTMLMediaElement`接口的元素上。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Specification on the HTML5 media element can be found at [http://www.w3.org/TR/html5/embedded-content-0.html#htmlmediaelement](http://www.w3.org/TR/html5/embedded-content-0.html#htmlmediaelement).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5媒体元素的规范可以在[http://www.w3.org/TR/html5/embedded-content-0.html#htmlmediaelement](http://www.w3.org/TR/html5/embedded-content-0.html#htmlmediaelement)找到。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe we will also need a video file, so we can use the same one from
    the previous recipe.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们还需要一个视频文件，所以我们可以使用上一个配方中的相同视频。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We start by creating a JavaScript controller that will have very rudimentary
    functionality of a media player.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个JavaScript控制器，它将具有媒体播放器的非常基本的功能。
- en: 'Our controller methods will accept a selector for a command and execute the
    command, we need the following:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的控制器方法将接受一个命令的选择器并执行该命令，我们需要以下内容：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now in a simple scenario we probably could just use the standard methods without
    adding another layer, but the idea here is that we can extend the functionally
    as we see fit since we have accessible element from JavaScript.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在一个简单的场景中，我们可能只需使用标准方法而不添加另一层，但这里的想法是，我们可以根据需要扩展功能，因为我们可以从JavaScript中访问元素。
- en: 'For the HTML we shall have a similar version to the one in the playing videos
    recipe. We will have a few buttons that will use our video controller and additionally
    add a simple style. Let''s add the following to the head section:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于HTML，我们将拥有与播放视频配方中相似的版本。我们将有一些按钮，这些按钮将使用我们的视频控制器，并额外添加一个简单的样式。让我们在头部添加以下内容：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The body part will contain the control buttons:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身体部分将包含控制按钮：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And we add the dependencies to our `example.js` file.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将依赖项添加到我们的`example.js`文件中。
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After that we should have a fully running video player.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 之后我们应该有一个完全运行的视频播放器。
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With JavaScript we can access and manipulate the attributes of any media element.
    This option enable us to do many different types of customization on the standard
    elements. Most of these properties are defined in `HTMLMediaElement`; there we
    can read and write to the `currentTime`, `playbackRate`, `volume`, `muted`, `defaultMuted`,
    and so on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript，我们可以访问和操作任何媒体元素的属性。这个选项使我们能够对标准元素进行许多不同类型的定制。这些属性大多数在`HTMLMediaElement`中定义；在那里我们可以读取和写入`currentTime`、`playbackRate`、`volume`、`muted`、`defaultMuted`等等。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a more comprehensive list `HTMLMediaElement` attributes and what is read
    only please refer to the specification available at [http://www.w3.org/TR/html5/embedded-content-0.html#media-elements](http://www.w3.org/TR/html5/embedded-content-0.html#media-elements).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更全面的`HTMLMediaElement`属性以及只读属性，请参考[http://www.w3.org/TR/html5/embedded-content-0.html#media-elements](http://www.w3.org/TR/html5/embedded-content-0.html#media-elements)上可用的规范。
- en: 'By changing attributes we can make custom players but also various different
    visual updates. There are large amount of different events that get trigger by
    media elements. On the events we can attach event listeners and make updates depending
    on the state change. The following events get triggered: `loadstart`, `abort`,
    `canplay`, `canplaythrough`, `durationchange`, `emptied`, `ended`, `error`, `loadeddata`,
    `loadedmetadata`, `pause`, `play`, `playing`, `progress`, `ratechange`, `seeked`,
    `seeking`, `stalled`, `suspend`, `timeupdate`, `volumechange`, and `waiting`.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改属性，我们可以制作自定义播放器，以及各种不同的视觉更新。媒体元素会触发大量不同的事件。在这些事件上，我们可以附加事件侦听器，并根据状态更改进行更新。以下事件会被触发：`loadstart`、`abort`、`canplay`、`canplaythrough`、`durationchange`、`emptied`、`ended`、`error`、`loadeddata`、`loadedmetadata`、`pause`、`play`、`playing`、`progress`、`ratechange`、`seeked`、`seeking`、`stalled`、`suspend`、`timeupdate`、`volumechange`和`waiting`。
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The name of the events are self-explanatory, if you are interested into more
    details about a specific event you can read up what they are intended for, in
    the documentation at [http://www.w3.org/TR/html5/embedded-content-0.html#mediaevents](http://www.w3.org/TR/html5/embedded-content-0.html#mediaevents).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的名称是不言自明的，如果您对特定事件感兴趣，可以阅读文档了解它们的用途，文档位于[http://www.w3.org/TR/html5/embedded-content-0.html#mediaevents](http://www.w3.org/TR/html5/embedded-content-0.html#mediaevents)。
- en: 'In our example we could add a listener to the rate speed that will display
    the current rate:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们可以添加一个监听器来显示当前速率的速率：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And then add an output element in the HTML with a call to our newly added method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在HTML中添加一个输出元素，并调用我们新添加的方法：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now the first time the video is played the rate change event get's triggered
    and the rate is set to `1`. Every consecutive rate change will trigger the same
    event.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，第一次播放视频时，速率更改事件会被触发，并且速率设置为`1`。每次连续的速率更改都会触发相同的事件。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: W3C has a a great demo on events triggered by media elements at [http://www.w3.org/2010/05/video/mediaevents.html](http://www.w3.org/2010/05/video/mediaevents.html).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: W3C在[http://www.w3.org/2010/05/video/mediaevents.html](http://www.w3.org/2010/05/video/mediaevents.html)上有一个关于媒体元素触发的事件的很好的演示。
- en: One other interesting thing to note here is that `<audio>` element can be used
    on video files as well, but only the audio stream from the files will be played.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一件有趣的事情要注意，`<audio>`元素也可以用于视频文件，但只会播放文件中的音频流。
- en: Adding text to your video
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向您的视频添加文本
- en: When displaying multilingual videos we often want to provide text for persons
    who speak other languages. This is a common practice for many conference talks
    as well as plenty of movies and TV shows. In order to enable external text track
    resources in the video the WebVTT ([http://dev.w3.org/html5/webvtt/](http://dev.w3.org/html5/webvtt/))
    standard was created.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示多语言视频时，我们经常希望为讲其他语言的人提供文本。这是许多会议演讲以及许多电影和电视节目的常见做法。为了在视频中启用外部文本轨道资源，创建了WebVTT（[http://dev.w3.org/html5/webvtt/](http://dev.w3.org/html5/webvtt/)）标准。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For simplicity, we will use the same video together with the poster images,
    same as we used in the other examples. As for the other files we will create them
    ourselves. You can also pick other video on your own since the video itself will
    not be all that relevant.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我们将使用与其他示例中相同的视频以及海报图像。至于其他文件，我们将自己创建它们。您也可以自己选择其他视频，因为视频本身并不那么重要。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We start with the HTML, where we include the video element and additionally
    add track elements as well as simple `example.js`. Perform the following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从HTML开始，其中包括视频元素，另外还添加了轨道元素以及简单的`example.js`。执行以下步骤：
- en: 'In the body element we include :'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在body元素中包括：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The JavaScript will only log the objects available to our video element. The
    idea here is to show that tracks can be accessed and manipulated by code. The
    script will contain the following:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript只会记录我们的视频元素可用的对象。这里的想法是展示可以通过代码访问和操作轨道。脚本将包含以下内容：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As for the `.vtt` flies that we included for the tracks we will create them
    manually. The file `video.vtt` will contain the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于我们为轨道创建的`.vtt`文件，我们将手动创建它们。文件`video.vtt`将包含以下内容：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As for `karaoke.vtt` it will contain the following code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于`karaoke.vtt`，它将包含以下代码：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After running the example we should have subtitles at the given ranges.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例后，我们应该在给定范围内有字幕。
- en: Tip
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you construct the WebVTT file manually you can notice that it is easy to
    make a mistake. There is good validator available at [http://quuz.org/webvtt/](http://quuz.org/webvtt/)
    with the source code on [https://github.com/annevk/webvtt](https://github.com/annevk/webvtt).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您手动构建WebVTT文件，您会注意到很容易出错。有一个很好的验证器可用于[http://quuz.org/webvtt/](http://quuz.org/webvtt)，源代码在[https://github.com/annevk/webvtt](https://github.com/annevk/webvtt)上。
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Video has been available for quite some time now but adding subtitles was not
    an option. The track element enables us in a standard way to add information to
    our video. Tracks are not just used for subtitles, but can also be used for other
    kinds of timed cues.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 视频已经有一段时间了，但添加字幕并不是一个选择。轨道元素以标准方式使我们能够向视频添加信息。轨道不仅用于字幕，还可以用于其他类型的定时提示。
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The general definition for the word *cue* is that it represents a thing said
    or done that serves as a signal to an actor or other performer to enter or to
    begin their speech or performance.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*cue*这个词的一般定义是，它代表了一个说或做的事情，作为一个信号，让演员或其他表演者进入或开始他们的讲话或表演。'
- en: Cues can contain other data formats like JSON, XML, or CSV. In our example we
    included a small JSON data snippet. This data can be useful in many different
    ways since it connected with a given portion of time, but subtitles are not the
    real use of it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Cues可以包含其他数据格式，如JSON、XML或CSV。在我们的示例中，我们包含了一个小的JSON数据片段。这些数据可以以许多不同的方式使用，因为它与特定时间段相关联，但字幕并不是它的真正用途。
- en: 'The track element can contain the following values for its `kind` attribute:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 轨道元素的`kind`属性可以包含以下值：
- en: '**subtitles**: It is the transcription or translation for a given language.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字幕**：这是给定语言的转录或翻译。'
- en: '**captions**: It is very similar to subtitles but it may also include sound
    effects or other audio. The main intention of this type is use for cases where
    the audio is not available.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字幕**：它与字幕非常相似，但也可以包括音效或其他音频。这种类型的主要意图是用于音频不可用的情况。'
- en: '**descriptions**: It is a text description of the video meant for use where
    the visual part is not available. For example, it can provide description for
    users who are blind or unable to follow the screen.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这是视频的文本描述，用于在视觉部分不可用的情况下使用。例如，它可以为盲人或无法跟随屏幕的用户提供描述。'
- en: '**chapters**: This track can contain chapter titles for given periods.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**章节**：此轨道可以包含给定时期的章节标题。'
- en: '**metadata**: This is a track is very useful for storing meta data that can
    latter be used by a script.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据**：这是一个非常有用的轨道，用于存储以后可以由脚本使用的元数据。'
- en: Besides the kind attribute there is also the `src` attribute that is mandatory
    and shows the URL of the track source. The track element can also contain `srclang`
    containing the language tag of the timed track.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`kind`属性之外，还有`src`属性是必需的，并显示轨道源的URL。轨道元素还可以包含`srclang`，其中包含定时轨道的语言标签。
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The language tax often has two-letter unique key for representation of the specific
    language. For more details you can take a look at [http://tools.ietf.org/html/bcp47](http://tools.ietf.org/html/bcp47).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 语言标签通常具有两个字母的唯一键，用于表示特定语言。有关更多详细信息，您可以查看[http://tools.ietf.org/html/bcp47](http://tools.ietf.org/html/bcp47)。
- en: There is also the attribute `default`, where if present on a track that is the
    track that will be shown by default.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`default`属性，如果在轨道上存在，则该轨道将成为默认显示的轨道。
- en: Also we can use the `label` attribute that can have free text value specifying
    a unique label for the element.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以使用`label`属性，该属性可以具有自由文本值，用于指定元素的唯一标签。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'One clever use of the track element can be found on : [http://www.samdutton.net/mapTrack/](http://www.samdutton.net/mapTrack/).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 轨道元素的一个巧妙用法可以在以下网址找到：[http://www.samdutton.net/mapTrack/](http://www.samdutton.net/mapTrack/)。
- en: The WebVTT standard defines that the file needs to start with the string "WEBVTT".
    Following that we have the cue definitions, zero or more such elements.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: WebVTT标准定义了文件需要以字符串"WEBVTT"开头。在此之后，我们有提示定义，零个或多个此类元素。
- en: 'Each cue element has the following form :'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 每个提示元素具有以下形式：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `idstring` is an optional element but it is good idea to have it specified
    if we need to access the cue using a script. As for the `timestamp` we have a
    standard format where the hours are optional. The second `timestamp` must be greater
    than first one.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`idstring`是一个可选元素，但如果我们需要使用脚本访问提示，则最好指定它。至于`timestamp`，我们有一个标准格式，其中小时是可选的。第二个`timestamp`必须大于第一个。'
- en: Text string is allowed to contain simple HTML formatting like `<b>`, `<i>`,
    and `<u>` elements. There is an option to add a `<c>` element that can be used
    for adding a CSS class for portions of the text, for example `<c.className>styled
    text </c>`. There is also an option to add a so called voice label `<v someLabel>
    the awesome text </v>`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 文本字符串允许包含简单的HTML格式，如`<b>`，`<i>`和`<u>`元素。还有一个选项可以添加`<c>`元素，用于为文本的部分添加CSS类，例如`<c.className>styled
    text </c>`。还有一个选项可以添加所谓的语音标签`<v someLabel> the awesome text </v>`。
- en: 'The cue settings are optional as well and are appended after the time range.
    In this setting we can pick whether the text is shown horizontally of vertically.
    The settings are case sensitive so they must be in lowercase as shown in the examples.
    The following settings can be applied:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 提示设置也是可选的，并且在时间范围之后附加。在此设置中，我们可以选择文本是水平显示还是垂直显示。设置是区分大小写的，因此它们必须像示例中显示的那样小写。可以应用以下设置：
- en: '**vertical**: It is used with values `vertical:rl` where the `rl` stands for
    writing right to left and `vertical:lr` for left to right.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直**：它与值`vertical:rl`一起使用，其中`rl`代表从右到左的书写，`vertical:lr`代表从左到右。'
- en: '**line**: This setting specifies where the text will be shown vertically or
    in the case where we have already used vertical, it specifies the horizontal position.
    The value is specified with percentage or a number where the positive value means
    top and negative bottom. For example, `line:0` and `line:0%` indicate top and
    `line:-1%` or `line:100%` indicate bottom.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**：此设置指定文本将在垂直方向显示的位置，或者在我们已经使用垂直时，它指定水平位置。该值用百分比或数字指定，其中正值表示顶部，负值表示底部。例如，`line:0`和`line:0%`表示顶部，`line:-1%`或`line:100%`表示底部。'
- en: '**position**: It is a setting that specifies where the text will be shown horizontally,
    or if we have vertical property set it specifies where the text is shown vertically.
    It should have value between 0 to 100 percent. For example, it can be `position:100%`
    meaning right.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：这是一个设置，用于指定文本在水平方向上显示的位置，或者如果我们已经设置了垂直属性，则指定文本在垂直方向上显示的位置。它的值应该在0到100之间。例如，可以是`position:100%`表示右侧。'
- en: '**size**: It specifies the width/height of the text area in percentage depending
    on the additional vertical setting. For example, `size:100%` means the text area
    will be shown.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小**：它指定文本区域的宽度/高度，以百分比表示，具体取决于附加的垂直设置。例如，`size:100%`表示文本区域将显示。'
- en: '**align**: It is a property that sets the aligning of text within the space
    of the area defined by the size setting. It can have the following values `align:start`,
    `align:middle`, and `align:end`.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对齐**：这是一个属性，用于设置文本在由大小设置定义的区域内的对齐方式。它可以具有以下值`align:start`，`align:middle`和`align:end`。'
- en: 'In the text string we can also add more detailed order of appearance of given
    words, in a sort of karaoke style. For example, see the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本字符串中，我们还可以按照给定单词的更详细的出现顺序，以一种卡拉OK的风格。例如，参见以下内容：
- en: '[PRE24]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It states that before the 2 seconds we have some text and the active cue `And
    more` is between 2 to 3 seconds.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 它说明在2秒之前我们有一些文本，活动提示`And more`在2到3秒之间。
- en: One other thing to note about the text string is that the it cannot contain
    the string `-->` string, ampersand &or the less than character `<` since they
    are reserved. But no worries there we can always used the escaped version, for
    example `&amp;` for ampersand.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文本字符串的另一点是，它不能包含字符串`-->`，和字符`<`，因为它们是保留字符。但不用担心，我们总是可以使用转义版本，例如`&amp;`代替`&`。
- en: These restrictions do not apply if we use the file for metadata track.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用文件进行元数据跟踪，则不适用这些限制。
- en: There's more...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We also have the option to style the text using CSS. As previously mentioned
    VTT files can contain tracks with `<c.someClass>` for a more fine-grained styling
    but in the general case we want to apply the style on the entire track. Applying
    style for all the cues can be done:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用CSS样式文本。如前所述，VTT文件可以包含带有`<c.someClass>`的轨道，以进行更精细的样式设置，但在一般情况下，我们希望对整个轨道应用样式。可以对所有提示应用样式：
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: But you may alienate the users by making their subtitles in comic sans.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，通过将他们的字幕设置为Comic Sans，您可能会使用户感到疏远。
- en: There are also selectors for the past cues `::cue:past{}` and `::cue:future{}`
    that can be useful for making a karaoke-like rendering. We also can use the `::cue(selector)`
    pseudo selector to target a node matching some criteria.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的提示`::cue:past{}`和`::cue:future{}`也有选择器，对于制作卡拉OK式的渲染很有用。我们还可以使用`::cue(selector)`伪选择器来定位匹配某些条件的节点。
- en: Not all of the feature are fully available in the modern browsers, most compliment
    at the time of writing is Chrome so for the others it is a good idea to use a
    polyfill. One such library is [http://captionatorjs.com/](http://captionatorjs.com/)
    that adds support to all the modern browsers. Besides adding support for the WebVTT
    it also supports formats like `.sub`, `.srt` and YouTube's `.sbv`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有功能在现代浏览器中都完全可用，目前写作时最兼容的是Chrome，因此对于其他浏览器来说，使用polyfill是一个好主意。一个这样的库是[http://captionatorjs.com/](http://captionatorjs.com/)，它为所有现代浏览器添加了支持。除了为WebVTT添加支持外，它还支持格式如`.sub`、`.srt`和YouTube的`.sbv`。
- en: There is also one other format that was developed for the video tracks. The
    name is **Timed Text Markup Language** (**TTML**) 1.0 [http://www.w3.org/TR/ttaf1-dfxp/](http://www.w3.org/TR/ttaf1-dfxp/)
    and it is only supported by IE without having any plans to get support in other
    browsers at the time of writing. The standard is more complex and it is based
    on XML but as such it is lot more verbose.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种为视频轨道开发的格式。它的名字是**定时文本标记语言**（**TTML**）1.0 [http://www.w3.org/TR/ttaf1-dfxp/](http://www.w3.org/TR/ttaf1-dfxp/)，目前只有IE支持，没有计划在其他浏览器中获得支持。这个标准更复杂，基于XML，因此更加冗长。
- en: Embedding multimedia
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入多媒体
- en: Media element can cooperate and be combined with other elements. Various CSS
    properties can be applied to the elements and there are options to combine video
    with SVG. We can embed video in canvas element and apply processing on the rendered
    images.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体元素可以与其他元素合作并组合在一起。各种CSS属性可以应用于元素，并且有选项将视频与SVG组合。我们可以在画布元素中嵌入视频，并对渲染的图像应用处理。
- en: In this recipe we will create a simple case where we embed a video inside canvas.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个简单的情况，其中我们在画布中嵌入一个视频。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe we will need a video for our video element and an additional
    requirement is that the video has Cross-Origin Resource Sharing support or is
    located on our local server. The simplest way to make sure of this is to have
    a video with our locally running server.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将需要一个视频用于我们的视频元素，另一个要求是视频具有跨域资源共享支持，或者位于我们的本地服务器上。确保这一点的最简单方法是使用我们本地运行的服务器上的视频。
- en: Note
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many videos with different formats available from NASA and ESA at
    [http://www.spacetelescope.org/videos/astro_bw/](http://www.spacetelescope.org/videos/astro_bw/).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://www.spacetelescope.org/videos/astro_bw/](http://www.spacetelescope.org/videos/astro_bw/)的NASA和ESA提供了许多不同格式的视频。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We will render a video on a canvas element by performing following steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤在画布元素上渲染视频：
- en: 'First start with the HTML file where we add a video element and a canvas:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从HTML文件开始，我们添加一个视频元素和一个画布：
- en: '[PRE26]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Our example of JavaScript code will attach event handler that will start rendering
    a gray-scaled version of the video on a canvas element:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的JavaScript代码示例将附加事件处理程序，以在画布元素上开始渲染视频的灰度版本：
- en: '[PRE27]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We should have a running example. One additional note here is that our original
    video should be in color in order to notice the difference.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有一个运行的示例。这里的另一个附加说明是，我们的原始视频应该是彩色的，以便注意到差异。
- en: How it works...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The video element should be clear by this point as for the canvas, we will start
    with the restrictions. Drawing an image on canvas has a CORS restriction. This
    security constrain actually makes sense since we are reading data from the image
    and executing code depending on that. This could be exploited by some malicious
    source so for that reason the constraints are added.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 视频元素应该在这一点上是清晰的，至于画布，我们将从限制开始。在画布上绘制图像有CORS限制。这种安全约束实际上是有道理的，因为我们正在从图像中读取数据并根据此执行代码。这可能会被一些恶意来源利用，因此添加了这些约束。
- en: Using the `canvas.getContext('2d')` we get a drawing context where we can draw
    the current image from our video element. Upon drawing the image we can modify
    the individual pixels. This gives us the option to create filters on our video.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`canvas.getContext('2d')`，我们可以获得一个绘图上下文，可以在其中绘制来自视频元素的当前图像。在绘制图像时，我们可以修改单个像素。这使我们有可能在视频上创建滤镜。
- en: 'For our example we create a simple grayscale filter. The filter function `toGrayScale`
    iterates over the pixel data and since every three values represent the color
    for a pixel in RGB, we read their data and create an adjusted value:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们创建了一个简单的灰度滤镜。滤镜函数`toGrayScale`遍历像素数据，因为每三个值代表RGB中像素的颜色，我们读取它们的数据并创建一个调整后的值：
- en: '[PRE28]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Following this we apply the adjusted value to all of the three values. The magic
    number are picked so that they would compensate for the red and blue values since
    the average human eye is bad at seeing them. We could have used the average value
    of the three values here with similar results.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调整后的值应用于所有三个值。这些魔术数字被选择为了补偿红色和蓝色值，因为人眼对它们的平均值不太敏感。我们可以在这里使用三个值的平均值，结果会类似。
- en: Note
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are interested into other filters there is a great article on the subject
    on [http://www.html5rocks.com/en/tutorials/canvas/imagefilters/](http://www.html5rocks.com/en/tutorials/canvas/imagefilters/)
    where the filters apply on a image but the same rules apply on videos as well.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对其他滤镜感兴趣，可以在[http://www.html5rocks.com/en/tutorials/canvas/imagefilters/](http://www.html5rocks.com/en/tutorials/canvas/imagefilters/)上找到一篇关于这个主题的好文章，这些滤镜适用于图像，但同样适用于视频。
- en: There's more...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One other interesting demo worth looking at is the Cube-like video player, [http://html5playbook.appspot.com/#Cube](http://html5playbook.appspot.com/#Cube),
    that uses variety of different ways to create cool effects.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得一看的有趣演示是类似立方体的视频播放器，[http://html5playbook.appspot.com/#Cube](http://html5playbook.appspot.com/#Cube)，它使用各种不同的方式来创建酷炫的效果。
- en: If you are interested in processing and synthesizing audio in an HTML5 application
    there is a new high-level API at [http://www.w3.org/TR/webaudio/](http://www.w3.org/TR/webaudio/)
    that enables just that.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对在HTML5应用程序中处理和合成音频感兴趣，可以在[http://www.w3.org/TR/webaudio/](http://www.w3.org/TR/webaudio/)上找到一个新的高级API，可以实现这一点。
- en: Converting text to speech using HTML5 audio
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML5音频将文本转换为语音
- en: If we were to build a web-based navigation applications today, most of the components
    would already be available. There are Google maps or open street map components
    to display maps, as well as API services that provide driving directions.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们今天要构建基于网络的导航应用程序，大部分组件已经可以使用。有Google地图或开放街道地图组件来显示地图，以及提供驾驶路线的API服务。
- en: But what about voice-based navigation guidance? Wouldn't that require another
    API service that converts text to speech?
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 但是关于基于语音的导航指引呢？那不是需要另一个将文本转换为语音的API服务吗？
- en: Thanks to HTML5 audio and Emscripten (a C to JavaScript compiler), we can now
    use a free text-to-speech engine called espeak that works fully in the browser.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTML5音频和Emscripten（一个C到JavaScript编译器），我们现在可以在浏览器中完全使用名为espeak的免费文本到语音引擎。
- en: In this example we're going to use espeak to generate text entered by the user
    on a simple page. Most of the work will consist of preparations—we will need to
    set up `espeak.js`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用espeak来生成用户在简单页面上输入的文本。大部分工作将包括准备工作-我们需要设置`espeak.js`。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了
- en: We need to download the speak.js from ([http://github.com/html5-ds-book/speak-js](http://github.com/html5-ds-book/speak-js)).
    Click on the download zip button and download the archive to a newly created folder.
    Extract the archive in that folder—it should create a sub folder called `speak-js-master`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从([http://github.com/html5-ds-book/speak-js](http://github.com/html5-ds-book/speak-js))下载speak.js。单击下载zip按钮并将存档下载到新创建的文件夹中。在该文件夹中提取存档-它应该创建一个名为`speak-js-master`的子文件夹。
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create the page `index.html` containing a text input field and a `Speak` button:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含文本输入字段和“说话”按钮的页面`index.html`：
- en: '[PRE29]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create `example.js` and add an on click action to the button:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`example.js`并为按钮添加点击操作：
- en: '[PRE30]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'From the command line, install `http-server` if not already installed then
    start the server:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行安装`http-server`（如果尚未安装），然后启动服务器：
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Open [http://localhost:8080](http://localhost:8080) in your browser and test
    the demo.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开[http://localhost:8080](http://localhost:8080)并测试演示。
- en: How it works...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The engine that converts the text to speech is eSpeak ([http://espeak.sourceforge.net/](http://espeak.sourceforge.net/)).
    This engine is written in C, however, the only language natively supported by
    browsers is JavaScript. How can we use this engine in the browser?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本转换为语音的引擎是eSpeak ([http://espeak.sourceforge.net/](http://espeak.sourceforge.net/))。这个引擎是用C编写的，然而，浏览器原生支持的唯一语言是JavaScript。我们如何在浏览器中使用这个引擎？
- en: Emscripten is a compiler designed to work around this limitation. It takes LLVM
    bytecode generated by a LLVM compiler from C or C++ source code and converts it
    to JavaScript. Emscripen utilizes a lot of modern JavaScript features such as
    typed arrays, and relies on the great performance of modern optimizing JavaScript
    JIT compilers.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten是一个旨在解决这一限制的编译器。它接受由LLVM编译器从C或C++源代码生成的LLVM字节码，并将其转换为JavaScript。Emscripen利用了许多现代JavaScript特性，如类型化数组，并依赖于现代优化JavaScript
    JIT编译器的出色性能。
- en: 'To avoid blocking the browser, the speech generator is invoked from a web worker
    created in `speakClient.js`. The generated WAV data is passed back by the worker,
    converted to base64 encoding and passed as a data URL to a newly created audio
    element. This element in turn is appended to the #audio element on the page and
    playback is activated by calling the `play` method.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免阻塞浏览器，语音生成器是从在`speakClient.js`中创建的Web Worker中调用的。生成的WAV数据由工作线程传回，转换为base64编码，并作为数据URL传递给新创建的音频元素。然后，该元素被附加到页面上的#audio元素上，并通过调用`play`方法来激活播放。
- en: There's more..
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Espeak is licensed under the GNU GPL v3 license. As such, it might not be suitable
    for proprietary projects.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Espeak根据GNU GPL v3许可证授权。因此，它可能不适用于专有项目。
- en: More information about Emscripten can be found on the Emscripten wiki at [https://github.com/kripken/emscripten/wiki](https://github.com/kripken/emscripten/wiki).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Emscripten的更多信息可以在Emscripten维基上找到：[https://github.com/kripken/emscripten/wiki](https://github.com/kripken/emscripten/wiki)。
