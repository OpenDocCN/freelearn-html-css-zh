["```html\npackage {\npublic class Player {\n    // Private Variables\n    private var lives:int; // How many lives our player has.\n    private var xPosition:int; // The players X position.\n    private var yPosition:int; // The players Y position.\n\n    // Public Variables\n    public var name:String = 'John'; // The players name.\n\n    /**\n     * The Player constructor. \n     * This function is called when a new Player is     * instantiated.\n     *\n     * @param playerName: The name to give to our player.\n     * @param lives: How many lives to give our player.\n     */\n    public function Player(playerName:String, playerLives:int = 5):void {\n        // Update the player variables with \n        // the supplied parameters.\n        name = playerName;\n        lives = playerLives;\n    }\n\n    /**\n     * Return the current amount of lives the player has.\n     */\n    public function get lives():int {\n        return lives;\n    }\n\n    /**\n     * Move the players x and y position.\n     *\n     * @param\tx: The new X position to move the player to.\n     * @param\ty: The new Y position to move the player to.\n     */\n    public function move(x:int, y:int):void {\n        // Update the player position variables.\n        xPosition = x;\n        yPosition = y;\n\n        updatePosition();\n    }\n\n    /**\n     * The would be the function that actually moves the\n     * displayed player display object on the stage. \n     * This would get called every time a players X and Y   \n     * position values are updated.\n     */\n    private function updatePosition():void {\n        // Code to update the players display object...\n    }\n  }\n}\n```", "```html\nvar player:Player = new Player('John', 10);\n```", "```html\nfunction Player(playerName, playerLives) {\n  // Private variables\n  var lives = playerLives;\n  var xPosition = 0;\n  var yPosition = 0;\n\n  // Public variables\n  this.name = playerName;\n\n  // Return the current amount of lives the player has.\n  this.lives = function() {\n    return lives;\n  }\n\n  /**\n   * Move the players x and y position.\n   *\n   * @param\tx: The new X position to move the player to.\n   * @param\ty: The new Y position to move the player to.\n   */\n  this.move = function(x, y) {\n    xPosition = x;\n    yPosition = y;\n\n    updatePosition();\n  }\n\n  /**\n   * The would be the function that actually moves the displayed\n   * player display object on the stage. This would get called \n   * every time a players X and Y position values are updated.\n   */\n  function updatePosition() {\n    //\n  }\n}\n```", "```html\nfunction isAlive1() { return true; }\nvar isAlive2 = function() { return true; };\nwindow.isAlive3 = function() { return true; };\n\nconsole.log(isAlive1());\nconsole.log(isAlive2());\nconsole.log(isAlive3());\n```", "```html\nconsole.log(isAlive1());\n\nfunction isAlive1() { return true; }\u2029var isAlive2 = function() { return true; };\nwindow.isAlive3 = function() { return true; };\n\nconsole.log(isAlive2());\nconsole.log(isAlive3());\n```", "```html\ntry {\n  console.log(isAlive4());\n} catch(error) {\n  console.log('Failed to call isAlive4() - ' + error);\n  // Run alternate code here...\n}\n```", "```html\nvar name = 'John';\n\nfunction getName() {\n  return name;\n}\n\n// Both calls return the name as it is accessible globally.\nconsole.log(name);\nconsole.log(getName());\n```", "```html\nfunction getName() {\n  var name = 'John';\n  return name;\n}\n\nconsole.log(name);     // Error\nconsole.log(getName());   // Success\n```", "```html\n// We will start with a globally scoped variable which is accessible by everything.\nvar alpha = 'a';\n\n// Global scope example.\nfunction a() {\n    console.log(alpha); // Reference the global alpha variable.\n}\n\n// Local scope using a supplied variable.\nfunction b(alpha) {\n    console.log(alpha); // Reference the supplied alpha variable.\n}\n\n// Local scope using a variable created within the function.\nfunction c() {\n  var alpha = 'c';\n  console.log(alpha);\n}\n\n// Update the global object property.\nfunction d() {\n    this.alpha = 'd'; // Create an internal object property.\n}\n\nfunction e() {\n    var n = 'e';\n\n    this.alpha = function() {\n        console.log(n);\n    }\n};\n\nfunction f() {};\n\na();    // A\nb('b'); // B\nc();    // C\n\nconsole.log(new d().alpha); // D\n\nvar e = new e().alpha();    // E\n\nf.prototype.alpha = 'f';    \nconsole.log(new f().alpha); // F\n```", "```html\nfunction Example() {\n  var foobar = 'abc'; // Only accessible within the Example scope.\n}\n```", "```html\nfunction Example() {\n  this.foobar = 'abc'; // Accessible outside the Example scope.\n}\n```", "```html\nfunction Example() {\n  function TestOne() {\n    return true;\n  }\n\n  var testTwo = function() {\n    return true;\n  };\n}\n```", "```html\nfunction Example() {\n  this.test = function() {\n    return true;\n  }\n}\n```", "```html\nvar player = {}; // Create a new empty object.\nconsole.log(Object.getPrototypeOf(player)); // Return the prototype object.\n```", "```html\nObject\n__defineGetter__: function __defineGetter__() { [native code] }\n__defineSetter__: function __defineSetter__() { [native code] }\n__lookupGetter__: function __lookupGetter__() { [native code] }\n__lookupSetter__: function __lookupSetter__() { [native code] }\nconstructor: function Object() { [native code] }\nhasOwnProperty: function hasOwnProperty() { [native code] }\nisPrototypeOf: function isPrototypeOf() { [native code] }\npropertyIsEnumerable: function propertyIsEnumerable() { [native code] }\ntoLocaleString: function toLocaleString() { [native code] }\ntoString: function toString() { [native code] }\nvalueOf: function valueOf() { [native code] }\n```", "```html\nfunction Player(name) {\n  this.name = name;\n  this.lives = 0;\n  this.xPosition = 0;\n  this.yPosition = 0;\n}\n\nPlayer.prototype.move = function(x, y) {\n  this.xPosition = x;\n  this.yPosition = y;\n}\n```", "```html\nfunction Player(name) {\n  this.name = name;\n  this.lives = 0;\n  this.xPosition = 0;\n  this.yPosition = 0;\n\n  this.move = function(x, y) {\n    this.xPosition = x;\n    this.yPosition = y;\n  }\n}\n\nPlayer.prototype.move = function(x, y) {\n  this.xPosition = x + 5;\n  this.yPosition = y + 5;\n}\n```", "```html\nfunction Player(name) {\n  this.name = name;\n  this.lives = 0;\n  this.xPosition = 0;\n  this.yPosition = 0;\n\n  this.move = function(x, y) {\n    this.xPosition = x;\n    this.yPosition = y;\n  }\n}\n\nfunction init() {\n  var susan = Player('Susan');\n  var john = Player('John');\t\n\n  // Modify the move function for ALL Player instances.\n  Player.prototype.move = function(x, y) {\n    this.xPosition = x + 5;\n    this.yPosition = y + 5;\n  }\n}\n```", "```html\n// Create a player instance\nvar player = new Player('John');\n\n// Check the type of player.\nconsole.log(typeof(player));\n\n// Output the constructor data from the player.\nconsole.log(player.constructor);\n\n// Check if the player is a Object - returns a Boolean.\nconsole.log(player instanceof Object);\n```", "```html\nvar player = new Object();\nvar player= Object.create(null);\nvar player = {};\n```", "```html\nvar player = {\n  name: \"John\",\n  lives: 5,\n  xPosition: 0,\n  yPosition: 0,\n  move: function(x, y) {\n    xPosition = x;\n    yPosition = y;\n\n    // Update the position display...\n  }\n}\n```", "```html\n  player.name = \"Susan\";\n  player.move(5, 5);\n```", "```html\nconsole.log(player.constructor);\n```", "```html\nvar test = Array();\nconsole.log(test.constructor);\n```", "```html\nfunction Array() { [native code] }\n```", "```html\nfunction Player(name) {\n  this.name = name;\n  this.age = 20;\n}\n\nfunction John() {\n  Player.call(this, 'John');\n\n  this.age += 35;\n}\n\nfunction Jill() {\n  this.age += 20;\n}\nJill.prototype = new Player('Jill');\n\nfunction init() {\n  var john = new John();\n  console.log(john.name + ' is ' + john.age);\n\n  var jill = new Jill();\n  console.log(jill.name + ' is ' + jill.age);\n}\nwindow.addEventListener(\"load\", init);\n```", "```html\nfunction Player(name) {\n  this.name = name;\n  this.age = 20;\n}\n\nfunction Jill() {\n  this.age += 20;\n}\nJill.prototype = new Player('Jill');\n\nfunction init() {\n  var jill = new Jill();\n  console.log(jill.name + ' is ' + jill.age);\n}\nwindow.addEventListener(\"load\", init);\n```", "```html\nJohn is 55\nJill is 40\n```", "```html\nfunction Player() {\n  // Private variables\n  var _this = this; \t// Reference to this object\n  var lives;\n  var positionX = 0;\n  var positionY = 0;\n  var playerElement;\n\n  // Public variables\n  this.name = '';\t// The players name.\n  this.age = 10;\t// The players age (default = 10).\n\n  this.move = function(x, y) {\n    positionX = x;\n    positionY = y;\n\n    // Move the player...\n  };\n\n  function blink() {\n    // Blink players eyes...\n  }\n}\n\nvar player = new Player();\nvar properties = Object.getOwnPropertyNames(player);\n\nconsole.log(properties);\n```", "```html\n[\"name\", \"age\", \"move\"]\n\n```", "```html\nwindow.addEventListener(\"load\", init, false);\n```", "```html\nimport flash.events.Event;\nimport flash.events.EventDispatcher;\n\nvar myEvent:Event = new Event(\"myEvent\", false);\ndispatchEvent(myEvent);\n```", "```html\naddEventListener(\"myEvent\", myCustomEventHandeler, false, 0, true);\n```", "```html\nfunction init() {\n  // Create an event listener\n  document.addEventListener(\"myEvent\", myEventHandeler, false);\n\n  // Create our custom event\n  var myEvent = document.createEvent(\"Event\");\n\n  // initEvent(event type, allow bubbling, allow prevented)\n  myEvent.initEvent(\"myCustomEvent\", true, true);\n  myEvent.customData = \"We can add more data into our event easily!\";\n  document.dispatchEvent(myEvent);\n}\n\nfunction myEventHandeler(event) {\n  console.log('The custom event has been dispatched - ' + event);\n  console.log('And retrieve our appended data - ' + event.customData);\n}\n\nwindow.addEventListener(\"load\", init);\n```", "```html\nfunction init() {\n  // Add a mouse click listener to the document.\n  document.addEventListener(\"mousedown\", onDocumentClick, false);\n\n  // Add a mouse click listener to the box element.\n  var box = document.getElementById('box');\n  box.addEventListener(\"mousedown\", onBoxClick, false);\n}\n\nfunction onDocumentClick(event) {\n  console.log('The document has been clicked - ' + event);\n}\n\nfunction onBoxClick(event) {\n  console.log('The box has been clicked. - ' + event);\n\n  // Stop this event from reaching the document object\n  // and calling the document level event listener.\n  event.stopPropagation();\n}\n\nwindow.addEventListener(\"load\", init);\n```", "```html\nfunction Game() {\n  // An array to hold all our player objects\n  var players = new Array();\n\n  // Game Constructor\n  // Reference to the game element in the document.\n  var gameElement = document.getElementById('game'); \n\n  // Get the game element size.\n  var gameElementWidth = gameElement.offsetWidth;\n  var gameElementHeight = gameElement.offsetHeight;\n\n  // Be sure to update these values if the window is \n  // to ever be resized.\n  window.onresize = function() {\n    console.log(\"NOTICE: Browser Resize: \" + gameElementWidth + \" x \" + gameElementHeight);\n    gameElementWidth = gameElement.offsetWidth;\n    gameElementHeight = gameElement.offsetHeight;\n  };\n\n  // Player Class.\n  function Player(name) {\n    this.name = name;\n\n    // Create the element for the player.\n    var playerElement = document.createElement(\"div\");\n    playerElement.class = 'element';\n    playerElement.style.position = \"absolute\";\n    playerElement.style.left = Math.floor((Math.random() * gameElementWidth - 100) + 1) + 'px';\t// Random position within viewabled bounds\n    playerElement.style.top = Math.floor((Math.random() * gameElementHeight - 100) + 1) + 'px';\n    playerElement.style.color = \"#000000\";\n    playerElement.style.display = \"block\";\n    playerElement.style.padding = \"5px\";\n    playerElement.style.border = \"1px solid #000000\";\n    playerElement.style.width = \"100px\";\n    playerElement.style.height = \"100px\";\n    playerElement.innerHTML = this.name;\n    gameElement.appendChild(playerElement);\n\n    // Move this players X and Y positions.\n    this.move = function(x, y) {\n      playerElement.style.left = x + \"px\";\n      playerElement.style.top = y + \"px\";\n    }\n\n    // Return the current position of this player \n    // as a object.\n    this.getPostion = function() {\n      var position = {};\n      position.x = parseInt(playerElement.style.left);\n      position.y = parseInt(playerElement.style.top);\n      return position;\n    }\n  }\n\n  // Public Methods\n  this.addNewPlayer = function(name) {\n    // Check if this player name is already created\n    var l = players.length;\n    for(var i = 0; i < l; i++) {\n      if(name == players[i].name) {\n        console.log('Error: Player with the name ' + name + ' already exsits.');\n        return;\n      }\n    }\n\n    // Create the new player instance\n    var player = new Player(name);\n\n    // Add a reference to the global players array.\n    players.push(player);\n  }\n\n  this.getPlayer = function(name) {\n    // Check if this player name is already created\n    var l = players.length;\n    for(var i = 0; i < l; i++) {\n      if(name == players[i].name) {\n        return players[i];\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction init() {\n  // Create the game instance.\n  var game = new Game();\n\n  // For this game we will automatically create two players.\n  game.addNewPlayer('Jack');\n  // Try to add another Jack to view name check.\n  game.addNewPlayer('Jack'); \n  game.addNewPlayer('Jill');\n\n  document.addEventListener('keydown', onKeyDown);\n\n  // Called when the user presses a key on the keyboard.\n  function onKeyDown(event) {\n    // The key that was just pressed (ID).\n    var key = event.keyCode; \n\n    // Lookup the player to reference.\n    var player = game.getPlayer('Jack'); \n\n    // Make sure the player exsists.\n    if(player == false) return;\n\n    // Get the players current position.\n    var position = player.getPostion();\n\n    // Forward\n    if(key == 38) player.move(position.x, position.y - 10);\n\n    // Backwards\n    if(key == 40) player.move(position.x, position.y + 10);\n\n    // Left\n    if(key == 37) player.move(position.x - 10, position.y);\n\n    // Right\n    if(key == 39) player.move(position.x + 10, position.y);\n  }\n}\n\nwindow.addEventListener(\"load\", init);\n```"]