["```html\npackage {\n  import flash.display.Sprite;\n  import flash.events.Event;\n  import flash.events.KeyboardEvent;\n\n  [SWF(width='1000', height='800', backgroundColor='#000000', frameRate='60')]\n  public class Game extends Sprite {\n    private var _levelBlocks:Array = new Array();\n    private var _interval:int;\n    private var _blockInterval:int;\n    private var _player:JetPackMan;\n    private var _difficulty:int = 10;\n    private var _speed:int = 10;\n    private var _keyDown:Boolean;\n    private var _score:int;\n    private var _highScore:int;\n    private var _scoreBoard:ScoreBoard;\n    private var _gameOver:Boolean;\n\n    public function Game() {\n      generateLevel();\n      createPlayer();\n      displayScore();\n\n      this.addEventListener(Event.ENTER_FRAME, updateI terval, false, 0, true);\n      stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, false, 0, true);\n      stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp, false, 0, true);\n    }\n\n    // Starts a new game.\n    private function startNewGame():void {\n      // Reset the game switches and counters.\n      _gameOver = false;\n      _score = 0;\n      _speed = 10;\n      _difficulty = 10;\n\n      for each(var block:LevelBlock in _levelBlocks) {\n        block.destroy();\n        removeChild(block);\n      }\n      _levelBlocks = new Array();\n\n      removeChild(_player);\n      _player.destroy();\n      _player = null;\n\n      generateLevel();\n      createPlayer();\n\n      this.addEventListener(Event.ENTER_FRAME, updateInterval, false, 0, true);\n    }\n\n    // Adds the score board to the stage.\n    private function displayScore():void {\n      _scoreBoard = new ScoreBoard();\n      _scoreBoard.x = -40;\n      _scoreBoard.y = -20;\n      addChild(_scoreBoard);\n    }\n\n    // Generates the beginnings of a new level.\n    private function generateLevel():void {\n      for(var i:int = 0; i < 20; i++) {\n        var randomHeight:int = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n        var levelBlock:LevelBlock = new LevelBlock(_speed, 800 + (20 * i), randomHeight - 10, 20, 100);\n        _levelBlocks.push(levelBlock);\n        addChildAt(levelBlock, 0);\n\n        randomHeight = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n        var bottomLevelBlock:LevelBlock = new LevelBlock(_speed, 800 +(20 * i), (randomHeight * -1) + 750, 20, 100);\n        _levelBlocks.push(bottomLevelBlock);\n        addChildAt(bottomLevelBlock, 0);\n      }\n    }\n\n    // Creates and adds a player object to the stage.\n    private function createPlayer():void {\n      _player = new JetPackMan();\n      _player.x = 80;\n      _player.y = 400;\n      addChild(_player);\n    }\n\n    // Called on keyboard key down.\n    private function onKeyDown(e:KeyboardEvent):void {\n      if(_gameOver) startNewGame();\n      _keyDown = true;\n    }\n\n    // Called on keyboard key up.\n    private function onKeyUp(e:KeyboardEvent):void {\n      _keyDown = false;\n    }\n\n    // Game interval. Called on each frame.\n    private function updateInterval(e:Event):void {\n      _score = _score + 1;\n      _scoreBoard.score.text = String(_score);\n\n      if(_keyDown) {\n        _player.jetPackOn();\n        _player.y = _player.y - 5;\n      } else {\n        _player.jetPackOff();\n        _player.y = _player.y + 5;\n      }\n\n      _interval++;\n      var increaseSpeed:Boolean = false;\n      if(_interval >= 100) {\n        increaseSpeed = true;\n        _difficulty = _difficulty + 5;\n        //_speed++;\n        _interval = 0;\n      }\n\n      // Update every block\n      for each(var block:LevelBlock in _levelBlocks) {\n        block.update();\n\n        if(block.hitTestObject(_player)) {\n          _player.explode();\n          _gameOver = true;\n\n          if(_score > _highScore) {\n            _highScore = _score;\n            _scoreBoard.highscore.text = String(_highScore);\n          }\n\n          this.removeEventListener(Event.ENTER_FRAME, updateInterval);\n        }\n\n        if(increaseSpeed) block.setSpeed(_speed);\n      }\n\n      // Check if new blocks need to be added\n      if(_levelBlocks[_levelBlocks.length - 1].currentX() < 2000) {\n        var randomHeight:int = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n        var levelBlock:LevelBlock = new LevelBlock(_speed, _levelBlocks[_levelBlocks.length - 1].currentX() + 20, randomHeight - _difficulty, 20, 100 + _difficulty);\n        _levelBlocks.push(levelBlock);\n        addChildAt(levelBlock, 0);\n\n        randomHeight = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n        var bottomLevelBlock:LevelBlock = new LevelBlock(_speed, _levelBlocks[_levelBlocks.length - 1].currentX(), (randomHeight * -1) + 750, 20, 100 + _difficulty);\n        _levelBlocks.push(bottomLevelBlock);\n        addChildAt(bottomLevelBlock, 0);\n}\n\n      // Add a random block every now and then to make things interesting.\n      // We will base the frequency of random blocks on the // current difficulty in the game.\n      _blockInterval++;\n      if(_blockInterval > 5000 / _difficulty) {\n        _blockInterval = 0;\n\n        randomHeight = (Math.floor(Math.random() * (750 - 5 + 1)) + 5);\n        var randomY:int = (Math.floor(Math.random() * (750 - 5 + 1)) + 5);\n        var randomBlock:LevelBlock = new LevelBlock(_speed, _levelBlocks[_levelBlocks.length - 1].currentX(), randomY, 20, 100 + _difficulty);\n        _levelBlocks.push(randomBlock);\n        addChildAt(randomBlock, 0);\n      }\n    }\n\n  }\n}\n```", "```html\nvar JetPackMan = function() {\n  var _jetPackSound = document.getElementById(\"jetpack\");\n  _jetPackSound.addEventListener(\"ended\", onSoundDone, false);\n\n  var _explosionSound = document.getElementById(\"explosion\");\n  var _soundPlaying = false;\n\n  var _animationData = Array();\n  var _imageSource = 'imgs/JetPackMan.png';\n  var _currentFrame = 0;\n  var _canvas = document.getElementById(\"player\");\n  var _context = _canvas.getContext(\"2d\");\n\n  var _imageObj = new Image();\n  _imageObj.src = _imageSource;\n\n  var _currentY = 0;\n  var _jetPackOn = false;\n  var _explode = false;\n  var _interval;\n\n  var _xVal = 0;\n  var _yVal = 0;\n  var _widthVal = 0;\n  var _heightVal = 0;\n\n  // Append the Sprite Sheet JSON to a local Array.\n  $.each(JetPackManData['frames'], function(key, val) {\n    _animationData.push(val);\n  });\n\n  _widthVal = _animationData[_currentFrame]['frame']['w'];\n  _heightVal = _animationData[_currentFrame]['frame']['h'];\n\n  // Starts the animation sequence.\n  this.startAnimation = function() {\n    runAnimation();\n  }\n\n  // Turns the Jet Pack on.\n  this.jetPackOn = function() {\n    _jetPackOn = true;\n\n    if(!_soundPlaying) {\n      _jetPackSound.play();\n      _soundPlaying = true;\n    }\n  }\n\n  // Runs the character's animation sequence.\n  function runAnimation() {\n    // Clear the entire canvas as the player sits in its own.\n    _context.clearRect(0, 0, 1000, 800);\n\n    if(_jetPackOn) {\n      if(_currentFrame == 0) _currentFrame = 1;\n\n      if(_currentFrame == 5) {\n        _currentFrame = 0;\n      } else {\n        _currentFrame++;\n      }\n    }\n\n    if(_explode) {\n      if(_currentFrame < 7) {\n        _currentFrame = 7;\n      } else {\n        if(_currentFrame < 13)\n          _currentFrame++;\n        else\n          return; // The explosion has finished, stop the interval.\n      }\n    }\n\n    _currentY = _yVal;\n\n    _context.drawImage(\n      _imageObj, \n      _animationData[_currentFrame]['frame']['x'], \n      _animationData[_currentFrame]['frame']['y'], \n      _animationData[_currentFrame]['frame']['w'], \n      _animationData[_currentFrame]['frame']['h'], \n      _xVal,\n      _yVal,\n      _animationData[_currentFrame]['frame']['w'],\n      _animationData[_currentFrame]['frame']['h']\n    );\n\n    _widthVal = _animationData[_currentFrame]['frame']['w'];\n    _heightVal = _animationData[_currentFrame]['frame']['h'];\n\n    // Call the animation interval again.\n    setTimeout(runAnimation, 1000/60);\n  }\n\n  // Called on jetpack sound effect complete.\n  function onSoundDone(e) {\n    _soundPlaying = false;\n  }\n\n  // Turns the Jet Pack off.\n  this.jetPackOff = function() {\n    _jetPackOn = false;\n    _currentFrame = 0;\n  }\n\n  // Explodes the JetPackMan.\n  // To be called on level collision.\n  this.explode = function() {\n    _explode = true;\n    _jetPackOn = false;\n    _explosionSound.play();\n  }\n\n  this.setX = function(x) { _xVal = x; }\n  this.setY = function(y) { _yVal = y; }\n  this.currentX = function() { return _xVal; }\n  this.currentY = function() { return _yVal; }\n  this.currentWidth = function() { return _widthVal; }\n  this.currentHeight = function() { return _heightVal; }\n\n  // Destroys the JetPackMan.\n  this.destroy = function() {\n    _explosionSound = null;\n    _jetPackSound = null;\n  }\n}\n```", "```html\n$.getJSON('json/JetPackMan.json', function(data) { \n  // Your code here\u2026\n});\n```", "```html\nvar JetPackManData = {\n  \"frames\": {\n    \"Player0000\": {\n      \"frame\": {\"x\":0\u2026\n```", "```html\n// Wait for the page load to finish before starting the game.\n$( document ).ready( function() {\n  // Create a new instance of our Game object.\n  // This is effectively like declaring our base class\n  // in our Flash Builder ActionScript project.\n  var game = new Game();\n});\n\n// Declaring the Game Object\nvar Game = function() {\n  // Setup all of the private object variables.\n  var _levelBlocks = Array();\n  var _interval = 0;\n  var _blockInterval = 0;\n\n  // Calls the (JetPackMan) object source we just reviewed above\n  var _player = new JetPackMan();\n\n  var _difficulty = 10;\n  var _speed = 10;\n  var _keyDown = false;\n  var _score = 0;\n  var _highScore = 0;\n  var _gameOver = false;\n  var _gameInterval;\n\n  // Use the 'game' canvas for level assets.\n  var _canvas = document.getElementById(\"game\");\n\n  // Append the stats display to the stage for benchmarking.\n  var _stats = new Stats();\n  _stats.setMode(0);\n  document.body.appendChild(_stats.domElement);\n  _stats.domElement.style.position = 'absolute';\n  _stats.domElement.style.left = '960px';\n  _stats.domElement.style.top = '41px';\n  _stats.domElement.style.zIndex = '2';\n\n  // Prepare the initial aspecs of the level.\n  generateLevel();\n\n  // Create a player object for the user to control.\n  createPlayer();\n\n  // Set up Enter Frame and keyboard even listeners.\n  // To emulate the 60 frames per second runtime in the Flash\n  // version of this game, we divide 1000 by the specific frame\n  // rate.\n  _gameInterval = setInterval(\n    function() {\n      // On every frame interval\n      updateInterval(); \n    }\n  , 1000 / 60);\n\n  // Set up the keyboard event listeners as they were set up\n  // in the Flash version. \n  $(document).keydown(function() { onKeyDown(); });\n  $(document).keyup(function() { onKeyUp(); });\n\n  // Do the same for the mouse click events.\n  window.addEventListener('mousedown', onKeyDown, false);\n  window.addEventListener('mouseup', onKeyUp, false);\n\n  // Finally add support for touch events.\n  window.addEventListener('touchstart', onKeyDown, false);\n  window.addEventListener('touchend', onKeyUp, false);\n\n  /**\n  * Starts a new game.\n  * Note: The structure of this function declares it as a \n  * private function within the Game object scope.\n  */\n  function startNewGame() {\n    // Reset the game switches and counters.\n    _gameOver = false;\n    _score = 0;\n    _speed = 10;\n    _difficulty = 10;\n\n    // Clear all level blocks by calling the destroy method\n    // on each of the active blocks.\n    // NOTE: By appending the _levelBlocks.length to a \n    // variable prior to looping over the Array, we avoid\n    // having to duplicate the same lookup multiple times.\n    var l = _levelBlocks.length;\n    for(var i = 0; i < l; i++) {\n      _levelBlocks[i].destroy();\n    }\n    _levelBlocks = new Array();\n\n    // Remove player.\n    _player.destroy();\n    _player = null;\n\n    generateLevel();\n    createPlayer();\n\n    // Start the game interval event again.\n    _gameInterval = setInterval(function() { updateInterval(); }, 1000 / 60);\n  }\n\n  /**\n  * Generates the beginnings of a new level.\n  * By running this prior to starting the game, we can\n  * assure that there is some level already created for the\n  * Player to initially fly into.\n  */\n  function generateLevel() {\n    // Run a loop to generate LevelBlocks on both the top \n    // and bottom of the level.\n    for(var i = 0; i < 20; i++) {\n      // Top LevelBlocks\n      // Base the height of the LevelBlock on the\n      // current game difficulty.\n      var randomHeight = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n      var levelBlock = new LevelBlock(_speed, 800 + (20 * i), randomHeight - 10, 20, 100);\n      // Once created, add the LevelBlock reference to\n      // the _LevelBlocks Array.\n      _levelBlocks.push(levelBlock);\n\n      // Bottom LevelBlocks\n      // We will perform the same operation as above\n      // with some some changes to place this block on\n      // the bottom of the level.\n      randomHeight = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n      var bottomLevelBlock = new LevelBlock(_speed, 800 + (20 * i), (randomHeight * -1) + 750, 20, 100);\n      _levelBlocks.push(bottomLevelBlock);\n    }\n  }\n\n  /**\n  * Creates and adds a player object to the stage.\n  */\n  function createPlayer() {\n    _player = new JetPackMan();\n    _player.setX(80);\n    _player.setY(400);\n    _player.startAnimation();\n  }\n\n  /**\n  * Called on keyboard key down.\n  */\n  function onKeyDown(e) {\n    // Start a new game if the current one has ended.\n    if(_gameOver) startNewGame();\n\n    _keyDown = true;\n  }\n\n  /**\n  * Called on keyboard key up.\n  */\n  function onKeyUp(e) {\n    _keyDown = false;\n  }\n\n  /**\n  * Game interval. Called on each frame.\n  */\n  function updateInterval(e) {\n    _stats.begin();\n\n    // Update the player's score.\n    _score = _score + 1;\n    $('#scoreboard .score').html(String(_score));\n\n    // Move player\n    if(_keyDown) {\n      _player.jetPackOn();\n      _player.setY(_player.currentY() - 5);\n    } else {\n      _player.jetPackOff();\n      _player.setY(_player.currentY() + 5);\n    }\n\n    // Speed game up as it plays\n    _interval++;\n\n    // Check if the interval is far enough to increase\n    // the difficulty factor.\n    var increaseSpeed = false;\n    if(_interval >= 100) {\n      increaseSpeed = true;\n      _difficulty = _difficulty + 5;\n      //_speed++;\n      _interval = 0;\n    }\n\n    // Update every block\n    var l = _levelBlocks.length;\n    for(var i = 0; i < l; i++) {\n      _levelBlocks[i].update();\n\n      // This is where things get really interesting.\n      // Since we do not have access to the \n      // hitTestObject() method like in ActionScript 3\n      // we will need to do our own collision detec-tion.\n      // This process is further explained after this\n      // code example.\n      if(\n        _levelBlocks[i].currentX() < _player.currentX() + _player.currentWidth()  && \n        _levelBlocks[i].currentX() + _levelBlocks[i].currentWidth()  > _player.currentX() &&_levelBlocks[i].currentY() < _player.currentY() + _player.currentHeight() && _levelBlocks[i].currentY() + _levelBlocks[i].currentHeight() > _player.currentY()\n      ) {\n        _player.explode();\n        _gameOver = true;\n\n        // Check for highscore.\n        if(_score > _highScore) {\n          _highScore = _score;\n          $('#scoreboard .highscore').html(String(_highScore));\n        }\n\n        // Like the Flash version, we need to stop\n        // the game interval once the user has hit\n        // a part of the level. To do this, we can \n        // utilize the clearInterval() method and\n        // pass in the _gameInterval reference.\n        window.clearInterval(_gameInterval);\n      }\n\n      // If the condition for the game speed to increase\n      // was met and the increaseSpeed Boolean is set to \n      // true, call the setSpeed method on each of the \n      // LevelBlocks.\n      if(increaseSpeed) _levelBlocks[i].setSpeed(_speed);\n    }\n\n    // As time passes and the LevelBlocks scroll across\n    // the screen we need to check if new blocks need to be\n    // added in order to keep the level filled with blocks.\n    // To do this, we just monitor the X position value of\n    // last block in the _levelBlocks Array.\n    if(_levelBlocks[_levelBlocks.length - 1].currentX() < 2000) {\n      // Just as in the generateLevel() method, we\n      // create a block on both the top and bottom \n      // and set its height based on the _ difficulty.\n      var randomHeight = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n      var levelBlock = new LevelBlock(_speed, _levelBlocks[_levelBlocks.length - 1].currentX() + 20, randomHeight - _difficulty, 20, 100 + _difficulty);\n      _levelBlocks.push(levelBlock);\n\n      // Bottom\n      randomHeight = (Math.floor(Math.random() * (_difficulty - (_difficulty - 10) + 1)) + (_difficulty - 10));\n      var bottomLevelBlock = new LevelBlock(_speed, _levelBlocks[_levelBlocks.length - 1].currentX(), (randomHeight * -1) + 750, 20, 100 + _difficulty);\n      _levelBlocks.push(bottomLevelBlock);\n    }\n\n    // To make the game interesting, we add a random block\n    // every now and then to make things interesting.\n    // We will base the frequency of random blocks on the\n    // current difficulty in the game. \n    _blockInterval++;\n    if(_blockInterval > 5000 / _difficulty) {\n      // When the condition is met, reset the counter.\n      _blockInterval = 0;\n\n      // Create random height and Y position values\n      // to keep things interesting. This method of\n      // generating a random number within a range\n      // is one of the most common.\n      // Math.floor(Math.random()*(max-min+1))+min;\n      randomHeight = (Math.floor(Math.random() * (750 - 5 + 1)) + 5);\n      var randomY = (Math.floor(Math.random() * (750 - 5 + 1)) + 5);\n      var randomBlock = new LevelBlock(_speed, _levelBlocks[_levelBlocks.length - 1].currentX(), randomY, 20, 100 + _difficulty);\n      _levelBlocks.push(randomBlock);\n    }\n\n    _stats.end();\n  }\n};\n```", "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Jet Pack</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/Game.css\">\n\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/Stats.js\"></script>\n    <script src=\"img/LevelBlock.js\"></script>\n    <script src=\"img/JetPackMan.js\"></script>\n    <script src=\"img/JetPackManData.js\"></script>\n    <script src=\"img/Game.js\"></script>\n  </head>\n\n  <body>\n    <canvas id=\"game\" width=\"1000\" height=\"800\"></canvas>\n    <canvas id=\"player\" width=\"1000\" height=\"800\"></canvas>\n\n    <div id=\"scoreboard\">\n      <p>Score: <span class=\"score\">0</span></p>\n      <p>HighSchore: <span class=\"highscore\">0</span></p>\n    </div>\n\n <audio id=\"explosion\" src=\"img/explosion.mp3\"></audio>\n <audio id=\"jetpack\" src=\"img/jetpack.mp3\"></audio>\n  </body>\n</html>\n```", "```html\nvar _jetPackSound = document.getElementById(\"jetpack\");\n```", "```html\n_jetPackSound.addEventListener(\"ended\", onSoundComplete, false);\n```", "```html\nif(\n  a.x < b.x + b.width && a.x + a.width > b.x && a.y < b.y + b.height && a.y + a.height > b.y\n) {\n  // 'a' is touching 'b'\n}\n```", "```html\nwindow.addEventListener('mousedown', onKeyDown, false);\nwindow.addEventListener('mouseup', onKeyUp, false);\n```", "```html\nwindow.addEventListener('touchstart', onKeyDown, false);\nwindow.addEventListener('touchend', onKeyUp, false);\n```", "```html\nmyCanvas.width = 1920;\nmyCanvas.height = 1080;\nmyCanvas.style.width = \"1920px\";\nmyCanvas.style.height = \"1080px\";\n```"]