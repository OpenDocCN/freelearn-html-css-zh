- en: Chapter 9. Avoiding the Roadblocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。避免路障
- en: Up to this point in the book, we have covered many of the new and exciting aspects
    of web development with HTML5\. However, during this time we have only ever looked
    at each feature as an individual aspect rather than a piece of a larger project.
    When it comes to building applications for the real world, you will inevitably
    have to begin merging these new features together to build the appropriate feature
    set within your app. In this chapter, we will build a playable game using some
    of the new and old features available to you as a web developer. Beginning with
    a version built-in Flash, we will then build a direct port of the application
    into HTML5 and discuss the differences and issues you may encounter while dealing
    with assets and functionality that you have become used to in the ActionScript
    and Flash world of development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经涵盖了许多HTML5网页开发的新颖方面。然而，在此期间，我们只是将每个功能视为一个独立的方面，而不是一个更大项目的一部分。在构建真实世界的应用程序时，您将不可避免地不得不开始合并这些新功能，以构建应用程序中的适当功能集。在本章中，我们将使用一些新的和旧的功能来构建一个可玩的游戏，作为Web开发人员可用的一些功能。我们将从Flash内置版本开始，然后将应用程序直接移植到HTML5，并讨论在处理您已经习惯于ActionScript和Flash开发世界中的资产和功能时可能遇到的差异和问题。
- en: The Jet Pack game
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 喷气背包游戏
- en: The application we will build is a simple 2D, side scrolling game with simplistic
    controls that can easily be converted to touch event for mobile devices. To keep
    things easy to explain and understand, I have modeled this game after the popular
    Helicopter Game ([http://www.helicopter-game.org/](http://www.helicopter-game.org/))
    that has been played all over the Internet for many years.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建的应用程序是一个简单的2D横向滚动游戏，具有简单的控件，可以轻松转换为移动设备的触摸事件。为了使解释和理解变得简单，我将此游戏建模为流行的直升机游戏（[http://www.helicopter-game.org/](http://www.helicopter-game.org/)）的简化版本，这个游戏已经在互联网上玩了很多年。
- en: 'The following screenshot shows the Helicopter Game:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了直升机游戏：
- en: '![The Jet Pack game](img/3325OT_09_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![The Jet Pack game](img/3325OT_09_01.jpg)'
- en: Although there are already many versions of this game on the Internet, the most
    popular ones are written in Flash, cutting out many users on mobile and desktop
    browsers from playing it. The gameplay and controls are extremely simplistic and
    only require the player to use a single key on their keyboard or use their mouse
    to click instead.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管互联网上已经有许多版本的这个游戏，但最受欢迎的版本是用Flash编写的，这使得许多移动设备和桌面浏览器的用户无法玩这个游戏。游戏玩法和控件非常简单，只需要玩家使用键盘上的一个键或使用鼠标进行点击。
- en: 'Rather than attempt to directly copy this popular game, we will use it as a
    starting point for gameplay design. To add our own personal touch to the game,
    we will switch the helicopter character to a little man with a jet pack. Before
    we get started, take a look at the following screenshot of the game in action
    to get a better idea of what our end result will look like. Of course you can
    always play the game yourself by checking out the Flash and HTML versions of this
    application located with the example files for this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与其直接复制这个流行的游戏，我们将把它作为游戏设计的起点。为了为游戏增添我们自己的个人风格，我们将把直升机角色换成一个带喷气背包的小人。在开始之前，看一下游戏运行的屏幕截图，以更好地了解我们最终的结果会是什么样子。当然，您也可以通过查看本章示例文件中的Flash和HTML版本来玩这个游戏。
- en: '![The Jet Pack game](img/3325OT_09_02.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![The Jet Pack game](img/3325OT_09_02.jpg)'
- en: You play this game as the character, the Jet Pack man, displayed on the left
    of the previous screenshot. Your goal is to control the character's altitude by
    activating his jetpack. As your character travels deeper into the cave system,
    not only will the cave become increasingly tighter, but there will be randomly
    placed obstacles which you will need to pilot yourself around. Gravity plays an
    important role as well since when your jetpack is not activated, your player will
    begin falling back down to the ground. The level objects are dynamically generated
    in real time as the player travels deeper into the cave and constrained to tighter
    positions as the difficulty increases. During every interval of the game source
    code, each section of the level is checked for collision with the player to determine
    if the game is over or not. Each interval of the game also increases the player's
    current score, so the deeper into the cave you travel, the higher your score will
    be. High scores are tracked within the game instance and displayed within the
    UI to allow the player to easily see what the next attempt's goal will be.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您将扮演左侧屏幕截图中显示的角色，即喷气背包人。您的目标是通过激活他的喷气背包来控制角色的高度。随着角色深入洞穴系统，洞穴不仅会变得越来越狭窄，而且还会随机放置障碍物，您需要绕过这些障碍物。重力也起着重要作用，因为当您的喷气背包未激活时，您的角色将开始下落到地面。随着难度的增加，关卡对象会在玩家深入洞穴时实时动态生成，并受到更严格的限制。在游戏源代码的每个间隔期内，将检查关卡的每个部分与玩家的碰撞，以确定游戏是否结束。游戏的每个间隔期还会增加玩家的当前得分，因此您深入洞穴旅行越深，得分就越高。高分将在游戏实例中进行跟踪，并在UI中显示，以便玩家轻松查看下一次尝试的目标。
- en: As I mentioned before, we will initially look at this game's source code written
    in ActionScript 3 to get an understanding of how I have written it. Of course
    this comes with the disclaimer that although some aspects of this games code may
    work for you in other projects, the source code for this game has been set up
    to aid in our learning and understanding of ActionScript 3 to HTML5 conversions.
    This game has not been optimized to the point it should be for public release
    and I will do my best during this chapter to point out what some of these short
    comings are. With all of this in mind, let's jump right into the source structure
    of the Flash version of this Jet Pack game.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，我们将首先查看这个游戏的ActionScript 3源代码，以了解我是如何编写的。当然，需要声明的是，尽管这个游戏代码的某些方面可能适用于你在其他项目中，但这个游戏的源代码已经设置好，以帮助我们学习和理解ActionScript
    3到HTML5的转换。这个游戏还没有被优化到应该发布给公众的程度，我会在本章尽力指出其中一些不足之处。有了这些想法，让我们直接进入这个喷气背包游戏Flash版本的源代码结构。
- en: Building the game in Flash
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Flash中构建游戏
- en: 'To keep things easy to understand we will keep the line and file count to a
    minimum for this game. We will begin with the base class for our ActionScript
    project named `Game`. Check out the following condensed base class example to
    get an idea of the game''s code structure. You can always look at the full version
    in the downloadable chapter example files:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让事情易于理解，我们将保持这个游戏的行数和文件数最少。我们将从我们ActionScript项目的基类`Game`开始。查看以下精简的基类示例，以了解游戏代码的结构。你可以随时在可下载的章节示例文件中查看完整版本：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This single class manages to take care of the majority of the gameplay and user
    interactions. The game is constantly updated based on the current difficulty factor
    set within the game. As the game progresses, the difficulty is translated into
    scrolling speed as each asset within the level is updated and set to change its
    x position value in larger amounts. Although there are two more classes to support
    the creation of the Player as well as all of the LevelBlock, I will leave that
    to you to dig into.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单一的类负责处理大部分的游戏玩法和用户交互。游戏会根据当前设置的难度因素不断更新。随着游戏的进行，难度被转化为滚动速度，因为每个关卡中的资产都会被更新，并设置为以更大的数值改变其x位置值。虽然还有另外两个类来支持玩家和所有的关卡块的创建，但我会留给你自己去深入研究。
- en: Converting game assets
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换游戏资产
- en: 'To start preparing this game to be ported to HTML5, we will begin with the
    assets used within the game, converting and preparing each of them for the web.
    To create the user interface and player object within this game, I have created
    and published a Flash SWC which is included into this ActionScript project in
    Flash Builder. The assets within the SWC contain not only the objects and animations
    used in the game, but the sounds as well as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始准备将这个游戏移植到HTML5，我们将从游戏中使用的资产开始，将它们转换并准备好用于网络。为了在游戏中创建用户界面和玩家对象，我创建并发布了一个Flash
    SWC，它包含在Flash Builder中的ActionScript项目中。SWC中的资产不仅包括游戏中使用的对象和动画，还包括如下截图中显示的声音：
- en: '![Converting game assets](img/3325OT_09_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![转换游戏资产](img/3325OT_09_03.jpg)'
- en: As you can see in the previous screenshot, my crudely hand drawn Jet Pack man
    has a timeline based key frame animation sequence attached to him to allow him
    to visually turn on and off his jetpack as well as explode when he impacts any
    wall. This timeline animation has some simple ActionScript appended to some of
    the frames which allow for easy stopping and looping for the animation sequence.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我粗略地手绘了一个喷气背包人，他有一个基于时间轴的关键帧动画序列，使他能够在视觉上打开和关闭喷气背包，并在撞到墙壁时爆炸。这个时间轴动画在一些帧上附加了一些简单的ActionScript，允许动画序列轻松停止和循环。
- en: 'To convert the Player MovieClip into an HTML5 ready asset, we will use the
    Sprite Sheet Generator tool we discussed in previous chapters as shown in the
    following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将玩家MovieClip转换为HTML5准备好的资产，我们将使用我们在之前章节中讨论过的精灵表生成工具，如下截图所示：
- en: '![Converting game assets](img/3325OT_09_04.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![转换游戏资产](img/3325OT_09_04.jpg)'
- en: After condensing the image into the smallest layout possible and optimizing
    the output properties in the **Generate Sprite Sheet** window, set the **Data
    format** property to **JSON** and export the data. The compiled Sprite Sheet as
    well as the **JSON** file will be used to replicate the Player's animation from
    our HTML5 conversion. Once we have prepped the Player Sprite Sheet, we can put
    it aside for the time being while we convert the remainder of the assets.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在将图像压缩到最小布局并优化输出属性后，在**生成精灵表**窗口中将**数据格式**属性设置为**JSON**并导出数据。编译后的精灵表以及**JSON**文件将用于在HTML5转换中复制玩家的动画。一旦我们准备好了玩家精灵表，我们可以将其放在一边，同时转换其余的资产。
- en: Now let's move on to preparing the audio used within the game. The audio assets
    within the Flash SWF can easily be prepared for HTML5 by simply locating the source
    MP3 files and placing them within the HTML5 game project directory. Since the
    MP3 files are supported for use within HTML5 under the `<audio>` element, no further
    preparation will be needed in order to get the audio ready for our conversion.
    The tricky part with HTML5 audio only comes when you need to deal with it in the
    code, which we will get into shortly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续准备游戏中使用的音频。Flash SWF中的音频资产可以通过简单地定位源MP3文件并将它们放置在HTML5游戏项目目录中来轻松准备用于HTML5。由于MP3文件在HTML5中可以在`<audio>`元素中使用，因此在进行转换时不需要进一步准备音频。HTML5音频的棘手之处只有在需要在代码中处理它时才会出现，我们很快就会涉及到。
- en: Without the use of the Flash Timeline or any other HTML5 sprite sheet library,
    we will have to import and manipulate the Sprite Sheet data of our Player completely
    on our own. Handy calls like `gotoAndPlay();` and `stop();` do not exist in JavaScript,
    so we will need to recreate that functionality on our own. This may sound like
    a monumental task, but rest assured, Sprite Sheets images and datasets contain
    all of the necessary information required for you to display them properly. All
    you need is to understand the data format and the properties that need referencing.
    Since Sprite Sheets are broken up into frames, the concept of playback control
    via numerical frame referencing should be extremely familiar to you. The frames
    that have been exported within the Sprite Sheet dataset will directly correspond
    to the numerical value of the frames within the source MovieClip in Flash. However,
    since the frame data in the **JSON** file is in an array, we will encounter an
    `off by one` error if we don't compensate for the fact numerical array keys start
    at 0 and not 1\. Again, it's worth mentioning that this method of displaying the
    Sprite Sheet is just one of thousands of implementations of Sprite Sheets in HTML5\.
    Many developers have created their own open source projects to alleviate much
    of the stress of having to do this yourself within every one of your projects.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有使用Flash时间轴或任何其他HTML5精灵表库的情况下，我们将不得不自己导入和操作我们的玩家的Sprite Sheet数据。像`gotoAndPlay();`和`stop();`这样方便的调用在JavaScript中是不存在的，因此我们需要自己重新创建这些功能。这可能听起来是一项艰巨的任务，但请放心，Sprite
    Sheets图像和数据集包含了显示它们所需的所有必要信息。您只需要了解数据格式和需要引用的属性。由于Sprite Sheets被分解为帧，通过数字帧引用进行播放控制的概念对您来说应该非常熟悉。在Flash中，Sprite
    Sheet数据集中导出的帧将直接对应于Flash中源MovieClip中帧的数字值。然而，由于**JSON**文件中的帧数据是一个数组，如果我们不补偿数字数组键从0开始而不是1，我们将遇到一个“差一”错误。再次强调，值得一提的是，这种显示Sprite
    Sheet的方法只是HTML5中成千上万种Sprite Sheet实现方法中的一种。许多开发人员已经创建了自己的开源项目，以减轻在每个项目中都必须自己完成这项工作的压力。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示：
- en: There are a ton of great open source resources on the web that can aid in Sprite
    Sheet integration into your HTML5 project. One library worth checking out is [http://www.spritely.net](http://www.spritely.net),
    a fully HTML5 and jQuery based Sprite Sheet library.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上有很多优秀的开源资源，可以帮助将Sprite Sheet集成到您的HTML5项目中。一个值得一试的库是[http://www.spritely.net](http://www.spritely.net)，这是一个完全基于HTML5和jQuery的Sprite
    Sheet库。
- en: 'Take a look at the condensed version of the converted `JetPackMan` class which
    is shown in the following JavaScript. This will give you a much clearer idea of
    frame control for this Sprite Sheet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下转换后的`JetPackMan`类的精简版本，如下所示的JavaScript。这将让您对这个Sprite Sheet的帧控制有一个更清晰的理解：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This method of graphic manipulation, though similar to the concepts used in
    the Flash Timeline, differ in that we are using 100 percent bitmap data which
    requires us to manually redraw the visible area of the Sprite Sheet on each frame
    interval. During each update interval to the animation sequence, we utilize the
    built in `drawImage();` method to append the updated frame location to the HTML
    `<canvas>` element. This means that if the pre-existing visible data that had
    been drawn to the canvas in the previous frame is not manually removed from the
    canvas, the next `drawImage();` call will just append the new frames graphics
    over top of the old. To avoid this issue we call another built in method, `clearRect();`,
    with the position values of where the pre-existing graphic was located. This may
    understandably sound confusing, however there is a very easy way to visualize
    this Sprite Sheet manipulation in action. If you open the HTML5 version of the
    Jet Pack game included within this chapter's example files and comment out the
    `clearRect();` within the `runAnimation` function, you can now play the game and
    see what the Player element will look like during runtime. As time passes and
    more frames are displayed on top of each other, it can quickly become a mess of
    layered images that will never get updated. As annoying as this is, it does serve
    a great purpose as it could be utilized for some very interesting visualizations.
    However, since we only want one character in our game at a time we must be sure
    to clean up the canvas display on each interval.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种图形操作方法，虽然与Flash时间轴中使用的概念类似，但不同之处在于我们使用了100%的位图数据，这要求我们在每个帧间隔手动重绘Sprite Sheet的可见区域。在每个更新间隔到动画序列时，我们利用内置的`drawImage();`方法将更新后的帧位置附加到HTML
    `<canvas>`元素上。这意味着如果在前一帧中已经绘制到画布上的可见数据没有被手动从画布上移除，下一个`drawImage();`调用将只是在旧的图形上附加新的帧图形。为了避免这个问题，我们调用另一个内置方法`clearRect();`，使用前一个图形的位置值。这可能听起来令人困惑，但有一个非常简单的方法来看待这种Sprite
    Sheet操作。如果您打开本章示例文件中包含的Jet Pack游戏的HTML5版本，并在`runAnimation`函数中注释掉`clearRect();`，您现在可以玩游戏，看看在运行时玩家元素会是什么样子。随着时间的推移，越来越多的帧叠加在一起，很快就会变成一团永远不会更新的层叠图像。尽管这很烦人，但它确实有一个很好的用途，因为它可以用于一些非常有趣的可视化。然而，由于我们游戏中只想要一个角色，我们必须确保在每个间隔上清理画布显示。
- en: 'Although it is avoided in this example, another important note worth making
    about integrating this Sprite Sheet is the issues you may encounter while attempting
    to import the **JSON** dataset containing the Sprite Sheet frame properties as
    follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这个例子中避免了这种情况，但另一个重要的注意事项是，在尝试导入包含Sprite Sheet帧属性的**JSON**数据集时可能会遇到的问题：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If used for external data loading, the popular jQuery `getJSON` method ([http://api.jquery.com/jQuery.getJSON/](http://api.jquery.com/jQuery.getJSON/))
    will attempt an AJAX request to the external data source in order to read the
    data and pass it back into the return method. However if you are executing the
    JavaScript from your local machine without the use of a web server, your browser
    will not accept the request and display a warning that looks something like the
    following console screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用于外部数据加载，流行的jQuery `getJSON`方法（[http://api.jquery.com/jQuery.getJSON/](http://api.jquery.com/jQuery.getJSON/)）将尝试通过AJAX请求到外部数据源，以读取数据并将其传递回返回方法。然而，如果您在本地计算机上执行JavaScript而没有使用Web服务器，您的浏览器将不接受该请求，并显示类似以下控制台截图的警告：
- en: '![Converting game assets](img/3325OT_09_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![转换游戏资产](img/3325OT_09_05.jpg)'
- en: One way of fixing this issue is by simply publishing your HTML5 project to a
    working web server. From there you can open up the reference to the data from
    the website URL in a browser. You could also setup your own web server on your
    computer to have the ability to connect to `http://localhost` in order to view
    your content. Projects like WAMP ([http://www.wampserver.com/en/](http://www.wampserver.com/en/))
    and MAMP ([http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html))
    are all-in-one packages including the Apache web server, MySQL Server and PHP.
    These server setups, traditionally run on Linux servers, allow you to easily emulate
    the environment that your website will eventually reside on and give you all the
    benefits from the software stack described above.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是简单地将您的HTML5项目发布到一个工作的Web服务器上。从那里，您可以在浏览器中打开从网站URL引用的数据。您还可以在计算机上设置自己的Web服务器，以便能够连接到`http://localhost`来查看您的内容。像WAMP（[http://www.wampserver.com/en/](http://www.wampserver.com/en/)）和MAMP（[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html)）这样的项目都是一体化的软件包，包括Apache
    Web服务器、MySQL服务器和PHP。这些服务器设置通常在Linux服务器上运行，允许您轻松模拟您的网站最终将驻留的环境，并从上面描述的软件堆栈中获得所有的好处。
- en: 'Of course the content you run on your local web server will not be public on
    the Internet, so you won''t be able to share it with your friends unless you start
    performing some network configuration (you can search for "port forwarding" on
    Google if you''re interested). The final and probably the more logical way to
    fix this issue when attempting to run this code locally without a web server is
    to strip the data from inside the JSON Sprite Sheet output and append it into
    the JavaScript source which is included in the HTML document of the game as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您在本地Web服务器上运行的内容不会在互联网上公开，所以除非您开始执行一些网络配置（如果您感兴趣，可以在Google上搜索“端口转发”），否则您将无法与朋友分享。在尝试在没有Web服务器的情况下本地运行此代码时，最终并且可能更合乎逻辑的解决此问题的方法是从JSON精灵表输出中剥离数据，并将其附加到包含在游戏HTML文档中的JavaScript源代码中，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By simply appending the JSON object as it is exported from Flash to a standard
    JavaScript variable, we can now call the `JetPackManData` variable rather than
    a jQuery `getJSON()` call allowing us to run this game locally with no further
    Access Control issues.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将从Flash导出的JSON对象附加到标准JavaScript变量中，我们现在可以调用`JetPackManData`变量，而不是jQuery的`getJSON()`调用，从而使我们可以在本地运行这个游戏，而不会出现进一步的访问控制问题。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Mozilla Developer Network has a great resource for more detailed information
    as to why Access Control issues may occur ([https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla开发者网络有一个很好的资源，可以更详细地解释为什么可能会出现访问控制问题（[https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS)）。
- en: Another issue you may encounter, depending on the browser size you use to play
    this game on, is browser page scrolling or other unwanted actions when the user
    is attempting to control the player within the game.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会遇到的另一个问题，取决于您用来玩这个游戏的浏览器大小，是浏览器页面滚动或用户试图在游戏中控制玩家时发生的其他不需要的操作。
- en: Converting ActionScript classes
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换ActionScript类
- en: Since you have already got a glimpse of the converted game source by checking
    out the `Player` class which has been modified to deal with Sprite Sheets rather
    than the Flash Timeline, let's continue down that road by looking at how we can
    set up the base class of the application in HTML5\. To aid in a couple of event
    listeners and element selection, I have included the jQuery library within this
    project. I have already made note of this controversial decision in the previous
    chapters of this book, but it is worth noting again that many developers dislike
    the usage of jQuery simply for use with element selection. Since the game we are
    currently converting to HTML5 is extremely simplistic, there really is no need
    for jQuery within this example. However, if you were to take this simple game
    source and extend it into a more developed game with rich UI and better game play,
    the use of a library like jQuery will easily become extremely valid.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经通过查看已经修改为处理精灵表而不是Flash时间轴的`Player`类，已经对转换后的游戏源代码有了一瞥，让我们继续沿着这条路，看看我们如何在HTML5中设置应用程序的基类。为了帮助一些事件侦听器和元素选择，我在这个项目中包含了jQuery库。我已经在本书的前几章中注意到了这个有争议的决定，但值得再次注意的是，许多开发人员不喜欢使用jQuery仅仅用于元素选择。由于我们目前正在转换为HTML5的游戏非常简单，所以在这个例子中真的没有必要使用jQuery。然而，如果您将这个简单的游戏源代码扩展为一个更发达的游戏，具有丰富的用户界面和更好的游戏玩法，像jQuery这样的库的使用将很容易变得非常有效。
- en: 'The following source is a simplified copy of the `Game.js` file which is included
    within the HTML5 version of this game. I have simplified the code and further
    added commented documentation to aid in understanding how the flow of this game
    source operates:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码是包含在这个游戏的HTML5版本中的`Game.js`文件的简化副本。我简化了代码，并进一步添加了注释文档，以帮助理解这个游戏源代码的流程：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In print, this may seem like a ton of code but in reality this is a very simplistic
    example of a 2D game built in JavaScript. Be sure to read over the comments included
    in the code which highlight what each part of the code accomplishes and how it
    is laid out. When all is said and done and the main `index.html` file is opened
    up in a HTML5 compliant web browser, you will hopefully see the resulting Jet
    Pack game in 100 percent HTML5 as shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印时，这可能看起来像是大量的代码，但实际上这是一个非常简单的JavaScript构建的2D游戏的例子。确保阅读代码中包含的注释，这些注释突出了代码的每个部分的功能以及其布局。当一切都说完并且主`index.html`文件在符合HTML5的网络浏览器中打开时，您将希望看到以下截图中所示的Jet
    Pack游戏的结果：
- en: '![Converting ActionScript classes](img/3325OT_09_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![转换ActionScript类](img/3325OT_09_06.jpg)'
- en: Notice that we have even managed to get a statistics readout at the top right
    corner of the game area just like in our Flash version. Just like how we reviewed
    in [Chapter 7](ch07.html "Chapter 7. Choosing How You Develop"), *Choosing How
    You Develop*, we utilize the stats display made possible by the same developer
    (Ricardo Cabello Miguel also known as Mr. Doob) who provided us with the stats
    display we used in Flash. Checkout the GitHub page for `Stats.js` ([https://github.com/mrdoob/stats.js/](https://github.com/mrdoob/stats.js/))
    to learn more about the project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们甚至成功在游戏区域的右上角获得了类似于Flash版本的统计信息。就像我们在[第7章](ch07.html "第7章.选择开发方式")中审查的那样，*选择开发方式*，我们利用了相同开发者（Ricardo
    Cabello Miguel，也被称为Mr. Doob）提供给我们在Flash中使用的统计显示功能。查看`Stats.js`的GitHub页面（[https://github.com/mrdoob/stats.js/](https://github.com/mrdoob/stats.js/)）以了解更多关于该项目的信息。
- en: Dealing with audio and playback
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理音频和播放
- en: 'Using the knowledge we have gained during the overview of HTML5 audio file
    type and codec support in this book, we can set up the audio for this game pretty
    easily. Rather than using the SWC importing method that was used in our Flash
    project, when importing audio into an HTML5 project, we can just append the reference
    to the source directly into the body of the HTML document inside of a `<audio>`
    element as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们在本书中对HTML5音频文件类型和编解码器支持的概述中获得的知识，我们可以很容易地为这个游戏设置音频。与我们在Flash项目中使用的SWC导入方法不同，当将音频导入HTML5项目时，我们可以直接将引用附加到HTML文档的`<audio>`元素的主体中，如下所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By default the audio will not play and because we excluded the option to create
    playback controls, there will be no visible element created within the HTML document
    during page render. Therefore to begin utilizing the audio in JavaScript, which
    will allow us to play it on-demand, we begin by referencing the element that was
    appended into the HTML document as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，音频不会播放，因为我们排除了创建播放控件的选项，在页面渲染期间不会创建任何可见元素在HTML文档中。因此，要开始在JavaScript中利用音频，允许我们按需播放，我们首先通过引用附加到HTML文档中的元素来开始：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the audio file referenced, we can easily begin to control the playback
    by calling the `play()` method on the `_jetPackSound` variable. However, to avoid
    overlapping the same audio track multiple times during the game play, we can also
    append an event listener to the element to be called when the sound playback has
    completed as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引用音频文件，我们可以通过在_jetPackSound变量上调用`play()`方法来轻松开始控制播放。然而，为了避免在游戏过程中多次重叠同一音轨，我们还可以附加一个事件侦听器到元素，以在声音播放完成时调用如下：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By creating the event handler for this listener, we can also update the `_soundPlaying`
    Boolean variable located in the `JetPackMan` class. From this point forward, we
    can now easily determine if the sound effect is playing or not from anywhere within
    the `JetPackMan` object.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为此侦听器创建事件处理程序，我们还可以更新位于`JetPackMan`类中的`_soundPlaying`布尔变量。从这一点开始，我们现在可以轻松确定声音效果是否正在`JetPackMan`对象内的任何位置播放。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find some more detailed information on HTML5 audio and video playback
    control in JavaScript on the Mozilla Developer Network website [https://developer.mozilla.org/en-US/docs/HTML/Using_HTML5_audio_and_video](https://developer.mozilla.org/en-US/docs/HTML/Using_HTML5_audio_and_video).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Mozilla开发者网络网站上找到有关JavaScript中HTML5音频和视频播放控件的更详细信息[https://developer.mozilla.org/en-US/docs/HTML/Using_HTML5_audio_and_video](https://developer.mozilla.org/en-US/docs/HTML/Using_HTML5_audio_and_video)。
- en: Rewriting AS3 code that can't be directly converted
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重写无法直接转换的AS3代码
- en: 'As I mentioned in one of the previous code examples earlier, the lack of the
    commonly used `hitTestObject()` method from ActionScript 3 in any HTML5 project
    means that many of these common yet complex pieces of functionality need to be
    written yourself. In the example Jet Pack game in HTML5, we use one of the more
    simplistic methods of collision detection by checking over the Players bounding
    box or the area that the Player takes up and compare it with each one of the LevelBlocks
    that has been generated. This condition, when simplified, looks something like
    the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在之前的一个代码示例中提到的，ActionScript 3中常用的`hitTestObject()`方法在任何HTML5项目中都没有，这意味着许多这些常见但复杂的功能需要自己编写。在HTML5中Jet
    Pack游戏的示例中，我们使用了更简单的碰撞检测方法之一，通过检查玩家的边界框或玩家占据的区域，并将其与生成的每一个LevelBlock进行比较。简化后，这个条件看起来像下面的代码：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: One of the tricky aspects of implementing a functionality like collision detection
    is that with the advent of the Canvas element in HTML5, there are multiple ways
    to create and manipulate elements within your HTML document. Flash applications
    have the advantage of utilizing some great built-in functionality because the
    development structure is far more structured. When developing HTML5 applications
    that are heavily dependent on JavaScript, the development flow becomes a little
    more of a wild west setting.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实现碰撞检测这样的功能的一个棘手之处在于，随着HTML5中Canvas元素的出现，有多种方法可以在HTML文档中创建和操作元素。Flash应用程序具有利用一些出色的内置功能的优势，因为开发结构更加结构化。在开发严重依赖JavaScript的HTML5应用程序时，开发流程变得更加像是在西部的野外。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'When digging around to see how other developers may have implemented a feature
    like collision detection, a great resource as always is Github. The Github project
    search allows you to narrow your searches down to a specific programming language
    making it that much easier to find an open source project that may help you out
    ([https://github.com/search?l=JavaScript&q=Collision+Detection&ref=cmdform&type=Repositories](https://github.com/search?l=JavaScript&q=Collision     +Detection&ref=cmdform&type=Repositories)).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '当查找其他开发者如何实现碰撞检测这样的功能时，一个很好的资源始终是Github。Github项目搜索允许您将搜索范围缩小到特定的编程语言，从而更容易找到可能帮助您的开源项目（[https://github.com/search?l=JavaScript&q=Collision+Detection&ref=cmdform&type=Repositories](https://github.com/search?l=JavaScript&q=Collision     +Detection&ref=cmdform&type=Repositories)）。'
- en: Mobile platform support
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平台支持
- en: 'Since we now have an HTML5 ready version of our game, one of the initial benefits
    that we can consider is the fact that most mobile device browsers will support
    the playback of this application. However, because we have set up the game specifically
    to be controlled via the user''s keyboard, we have not created a control method
    for users that don''t have access to one. Correcting this issue in the case of
    our Jet Pack game is actually pretty easy since our control system only uses one
    input. In reality, we have two options as to how we implement this feature as
    almost every mobile browser that supports touch events registers them as click
    events as well. This means that we can either implement the same keyboard event
    listener as a specific touch event or as a common mouse click event. The upside
    of setting the mouse event over the touch event is that the mouse event will also
    register for any user who happens to play the game on a device with a mouse as
    well. Using only default JavaScript syntax we can accomplish this with the following
    code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在有了一个HTML5版本的游戏，我们可以考虑的一个最初的好处是，大多数移动设备浏览器都支持播放这个应用程序。然而，由于我们专门设置了游戏以通过用户的键盘进行控制，我们没有为那些无法访问键盘的用户创建控制方法。在我们的Jet
    Pack游戏中解决这个问题实际上相当容易，因为我们的控制系统只使用一个输入。实际上，我们有两种选择来实现这个功能，因为几乎每个支持触摸事件的移动浏览器都将它们注册为点击事件。这意味着我们可以将相同的键盘事件监听器实现为特定的触摸事件或常见的鼠标点击事件。设置鼠标事件而不是触摸事件的好处是，鼠标事件也将为任何使用鼠标玩游戏的用户注册。只使用默认的JavaScript语法，我们可以用以下代码实现这一点：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, since we don''t condition the key press in the `onKeyDown`
    or `onKeyUp` methods, we can simply tie the mouse event to the same event handler
    and call it a day. Depending on whether you have rather used touch events instead
    of mouse events, we would only have to modify the event parameter within the `addEventListener`
    call as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，由于我们没有在`onKeyDown`或`onKeyUp`方法中对按键进行条件判断，我们可以简单地将鼠标事件绑定到相同的事件处理程序中并结束。根据您是否使用触摸事件而不是鼠标事件，我们只需要修改`addEventListener`调用中的事件参数，如下所示：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Mozilla Developer Network also contains a detailed outline of what Touch
    Events and the properties within are available to you when developing the touch-enabled
    HTML5 applications ([https://developer.mozilla.org/en-US/docs/DOM/Touch_events](https://developer.mozilla.org/en-US/docs/DOM/Touch_events)).
    Although this is a Mozilla site, most of the documentation is cross browser compliant.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla开发者网络还包含了一个详细的概述，介绍了在开发支持触摸的HTML5应用程序时可用的触摸事件和属性（[https://developer.mozilla.org/en-US/docs/DOM/Touch_events](https://developer.mozilla.org/en-US/docs/DOM/Touch_events)）。虽然这是一个Mozilla网站，但大部分文档都是跨浏览器兼容的。
- en: 'Probably one of the most troubling aspects of testing this game on a mobile
    device is the fact that the canvas element utilized to display the game elements
    has a static width and height. The width and height I chose to originally create
    the game are 1000px by 600px. These dimensions may render properly on some mobile
    devices, but the chances are if you were to play this on a phone, some area of
    the canvas will either be cut off from display, or presented in a manner that
    scales the canvas to fit the screen as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上测试这个游戏最令人困扰的一个方面可能是，用于显示游戏元素的画布元素具有固定的宽度和高度。我最初选择创建游戏的宽度和高度为1000px乘以600px。这些尺寸可能在一些移动设备上正确呈现，但如果您在手机上玩这个游戏，画布的某些区域可能会被切断显示，或者以缩放画布以适应屏幕的方式呈现，如下面的截图所示：
- en: '![Mobile platform support](img/3325OT_09_07.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Mobile platform support](img/3325OT_09_07.jpg)'
- en: 'The previous screenshot is taken directly from a Samsung Galaxy S2 and clearly
    shows how the game is cut off from the default view in the landscape display.
    Zooming in and out of the page is still available as an interactive browser feature,
    but even when zoomed out when the game is in landscape display, I am unable to
    view the entire viewable game area. Now check out the next screenshot taken on
    the same phone of the game in portrait display:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图直接来自三星Galaxy S2，清楚地显示了游戏在横向显示中如何从默认视图中被切断。页面的放大和缩小仍然可以作为交互式浏览器功能，但即使在游戏处于横向显示时缩小页面，我仍然无法查看整个可视游戏区域。现在看看在同一手机上以纵向显示拍摄的游戏的下一个截图：
- en: '![Mobile platform support](img/3325OT_09_08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Mobile platform support](img/3325OT_09_08.jpg)'
- en: 'Now with the page view completely zoomed out, we can see the entire game area
    but the bottom half of the viewable area is wasted as the game is set up to display
    in a 1000px x 600px display. This issue, though painful to deal with, is actually
    very common to many Flash developers. If you have developed any web applications
    in Flash that require a scalable display, you would have had to write event listeners
    in your application to watch for window resizing and move the position of the
    elements within your application accordingly. You can update the canvas size from
    JavaScript easily with calls to your elements width and height properties with
    the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，页面视图完全缩小，我们可以看到整个游戏区域，但可视区域的底部一半被浪费了，因为游戏设置为在1000px x 600px的显示中显示。尽管这个问题很痛苦，但实际上对许多Flash开发人员来说是非常常见的。如果您在Flash中开发了任何需要可伸缩显示的Web应用程序，您将不得不在应用程序中编写事件侦听器，以便监视窗口调整大小并相应地移动应用程序中的元素位置。您可以使用以下代码轻松从JavaScript更新画布大小，调用元素的宽度和高度属性：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This setup covers all of your bases by updating the CSS style of the element
    as well as the base element width and height values. Of course, with this update
    you will also have to manually update the position values for all of the playable
    elements that are being displayed in this game. If you wish to continue digging
    more into the source of this game, I advise either attempting to extend the gameplay
    or working with the Canvas element resizing for dynamic window display sizes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置涵盖了更新元素的CSS样式以及基本元素的宽度和高度值。当然，通过这个更新，您还必须手动更新在游戏中显示的所有可玩元素的位置值。如果您希望继续深入挖掘这个游戏的源代码，我建议尝试扩展游戏玩法或使用Canvas元素调整动态窗口显示大小。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By using an application originally built in Flash, in this chapter we have covered
    some more interesting aspects of HTML5 development. By developing the HTML5 Version
    of our game without the use of any third party JavaScript libraries, we can easily
    compare the two development paradigms. In reality, Flash and HTML5 development
    are extremely similar. Asset preparation and manipulation stands out as one of
    the most complicated aspects of transitioning your ActionScript and Flash development
    experience over to HTML5 development. Understanding your limitations, regardless
    of whether they are browser or device specific is a key factor in making sure
    you're ready to display your content to as many users as possible.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用最初在Flash中构建的应用程序，在本章中，我们涵盖了HTML5开发的一些更有趣的方面。通过在不使用任何第三方JavaScript库的情况下开发我们游戏的HTML5版本，我们可以轻松地比较这两种开发范式。实际上，Flash和HTML5开发非常相似。资产准备和操作突出了将您的ActionScript和Flash开发经验转移到HTML5开发的最复杂的方面之一。了解您的限制，无论是浏览器还是设备特定的，都是确保您准备好向尽可能多的用户显示您的内容的关键因素。
- en: In the next and final chapter of the book, we will continue putting together
    working HTML5 applications with more emphasis on preparation for public release.
    We will attempt to push the limits of what HTML5 can do with peripherals like
    the webcams and microphones, and discuss what your next steps in HTML5 development
    could be once you have finished this book.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一章和最后一章中，我们将继续组合工作的HTML5应用程序，更加重视为公开发布做准备。我们将尝试推动HTML5在外围设备上的潜力，如网络摄像头和麦克风，并讨论一旦您完成本书后，您在HTML5开发中的下一步可能是什么。
