["```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"utf-8\">\n    <title>Getting Familiar with CSS3 Transition</title>\n    <link rel=\"stylesheet\" href=\"css/css3transition.css\" />\n    </head>\n    <body>\n    <header>\n    <h1>Getting Familiar with CSS3 Transition</h1>\n    </header>\n    <section id=\"game\">\n    <div id=\"cards\">\n    <div id=\"card1\" class=\"card cardAK\"></div>\n    <div id=\"card2\" class=\"card cardAQ\"></div>\n    </div> <!-- #cards -->\n    </section> <!-- #game -->\n    <footer>\n    <p>This is an example of transitioning cards.</p>\n    </footer>\n    <script src=\"img/jquery-1.6.min.js\"></script>\n    <script>\n    $(function(){\n    $(\"#card1\").addClass(\"moveAndScale\");\n    $(\"#card2\").addClass(\"rotateRight\");\n    });\n    </script>\n    CSS3 transition moduleCSS3 transition moduleplaying card, moving</body>\n    </html>\n\n    ```", "```js\n    body {\n    background: #aaa;\n    }\n    /* defines styles for each card */\n    .card {\n    width: 80px;\n    height: 120px;\n    margin: 20px;\n    background: #efefef;\n    position: absolute;\n    -webkit-transition: all 1s linear;\n    }\n    /* set the card to corresponding playing card graphics */\n    .cardAK {\n    background: url(../images/AK.png);\n    }\n    .cardAQ {\n    background: url(../images/AQ.png);\n    }\n    /* rotate the applied DOM element 90 degree */\n    .rotateRight {\n    -webkit-transform: rotate3d(0,0,1,90deg);\n    }\n    /* move and scale up the applied DOM element */\n    .moveAndScale {\n    -webkit-transform: translate3d(150px,150px,0) scale3d(1.5, 1.5, 1);\n    }\n\n    ```", "```js\ntransform: transform-function1 transform-function2;\n\n```", "```js\nrotate(angle)\n\n```", "```js\ntranslate (tx, ty)\n\n```", "```js\ntranslateX(number)\ntranslateY(number)\n\n```", "```js\nscale(sx, sy)\n\n```", "```js\nscaleX(number)\nscaleY(number)\n\n```", "```js\nrotate3d(x, y, z, angle)\n\n```", "```js\nrotateX(angle)\nrotateY(angle)\nrotateZ(angle)\n\n```", "```js\ntranslate3d(tx, ty, tz)\ntranslateX(tx)\ntranslateY(ty)\ntranslateZ(tz)\n\n```", "```js\nscale3d(sx, sy, sz)\nscaleX(sx)\nscaleY(sy)\nscaleZ(sz)\n\n```", "```js\ntransition: property_name duration timing_function delay.\n\n```", "```js\ntransition: opacity 0.3s, background-color 0.5s\n\n```", "```js\n    <section id=\"game\">\n    <div id=\"cards\">\n    <div class=\"card\">\n    <div class=\"face front\"></div>\n    <div class=\"face back cardAK\"></div>\n    </div> <!-- .card -->\n    <div class=\"card\">\n    <div class=\"face front\"></div>\n    <div class=\"face back cardAQ\"></div>\n    </div> <!-- .card -->\n    </div> <!-- #cards -->\n    </section> <!-- #game -->\n    <script src=\"img/jquery-1.6.min.js\"></script>\n\n    ```", "```js\n    <link rel=\"stylesheet\" href=\"css/css3flip.css\" />\n\n    ```", "```js\n    #game {\n    background: #9c9;\n    padding: 5px;\n    }\n    /* Define the 3D perspective view and dimension of each card. */\n    .card {\n    -webkit-perspective: 600;\n    width: 80px;\n    height: 120px;\n    }\n\n    ```", "```js\n    .face {\n    border-radius: 10px;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    -webkit-transition: all .3s;\n    -webkit-backface-visibility: hidden;\n    }\n\n    ```", "```js\n    .front {\n    background: #966;\n    z-index: 10;\n    }\n    .back {\n    background: #eaa;\n    -webkit-transform: rotate3d(0,1,0,-180deg);\n    z-index: 8;\n    }\n\n    ```", "```js\n    .card-flipped .front {\n    -webkit-transform: rotate3d(0,1,0,180deg);\n    z-index: 8;\n    }\n    .card-flipped .back {\n    -webkit-transform: rotate3d(0,1,0,0deg);\n    z-index: 10;\n    }\n    .cardAK {\n    background: url(../images/AK.png);\n    }\n    .cardAQ {\n    background: url(../images/AQ.png);\n    }\n\n    ```", "```js\n    <script>\n    $(function(){\n    $(\"#cards\").children().each(function(index) {\n    // listen the click event on each card DIV element.\n    $(this).click(function() {\n    // add the class \"card-flipped\".\n    // the browser will animate the styles between current state and card-flipped state.\n    $(this).toggleClass(\"card-flipped\");\n    });\n    });\n    });\n    </script>\n\n    ```", "```js\n$(\"#card1\").toggleClass(\"card-flipped\");\n\n```", "```js\n$(\"#card1\").toggleClass(\"card-flipped scale-up\");\n\n```", "```js\n.front {\nz-index: 10;\n}\n.back {\nz-index: 8;\n}\n\n```", "```js\n.card-flipped .front {\nz-index: 8;\n}\n.card-flipped .back {\nz-index: 10;\n}\n\n```", "```js\n    <!DOCTYPE html>\n    <html lang=en>\n    <head>\n    <meta charset=utf-8>\n    <title>CSS3 Matching Game</title>\n    <link rel=\"stylesheet\" href=\"css/matchgame.css\" />\n    </head>\n    <body>\n    <header>\n    <h1>CSS3 Matching Game</h1>\n    </header>\n    <section id=\"game\">\n    <div id=\"cards\">\n    <div class=\"card\">\n    <div class=\"face front\"></div>\n    <div class=\"face back\"></div>\n    </div> <!-- .card -->\n    </div> <!-- #cards -->\n    </section> <!-- #game -->\n    <footer>\n    <p>This is an example of creating a matching game with CSS3.</p>\n    </footer>\n    <script src=\"img/jquery-1.6.min.js\"></script>\n    <script src=\"img/html5games.matchgame.js\"></script>\n    </body>\n    </html>\n\n    ```", "```js\n    body {\n    text-align: center;\n    background: #a46740 url(../images/bg.jpg);\n    }\n\n    ```", "```js\n    #game {\n    border-radius: 10px;\n    border: 1px solid #666;\n    background: #232 url(../images/table.jpg);\n    width: 500px;\n    height: 460px;\n    margin: 0 auto;\n    display: box;\n    box-pack: center;\n    box-align: center;\n    }\n\n    ```", "```js\n    #cards {\n    position: relative;\n    width: 380px;\n    height: 400px;\n    }\n\n    ```", "```js\n    .card {\n    -webkit-perspective: 600;\n    width: 80px;\n    height: 120px;\n    position: absolute;\n    -moz-transition: all .3s;\n    -webkit-transition: all .3s;\n    transition: all .3s;\n    }\n\n    ```", "```js\n    .face {\n    border-radius: 10px;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    -webkit-transition-property: opacity, transform, box-shadow;\n    -webkit-transition-duration: .3s;\n    -webkit-backface-visibility: hidden;\n    }\n\n    ```", "```js\n    .front {\n    background: #999 url(../images/deck.png) 0 -480px;\n    z-index: 10;\n    card matching memory gamecard matching memory gamegame environment, setting up}\n    .back {\n    background: #efefef url(../images/deck.png);\n    -webkit-transform: rotate3d(0,1,0,-180deg);\n    z-index: 8;\n    }\n    .card:hover .face, .card-flipped .face {\n    -webkit-box-shadow: 0 0 10px #aaa;\n    }\n    .card-flipped .front {\n    -webkit-transform: rotate3d(0,1,0,180deg);\n    z-index: 8;\n    }\n    .card-flipped .back {\n    -webkit-transform: rotate3d(0,1,0,0deg);\n    z-index: 10;\n    }\n\n    ```", "```js\n    .card-removed {\n    opacity: 0;\n    }\n\n    ```", "```js\n    .cardAQ {background-position: -880px 0;}\n    .cardAK {background-position: -960px 0;}\n    .cardBQ {background-position: -880px -120px;}\n    .cardBK {background-position: -960px -120px;}\n    .cardCQ {background-position: -880px -240px;}\n    .cardCK {background-position: -960px -240px;}\n    .cardDQ {background-position: -880px -360px;}\n    .cardDK {background-position: -960px -360px;}\n\n    ```", "```js\n    $(function(){\n    // clone 12 copies of the card\n    for(var i=0;i<11;i++){\n    $(\".card:first-child\").clone().appendTo(\"#cards\");\n    }\n    // initialize each card's position\n    $(\"#cards\").children().each(function(index) {\n    // align the cards to be 4x3 ourselves.\n    $(this).css({\n    \"left\" : ($(this).width() + 20) * (index % 4),\n    \"top\" : ($(this).height() + 20) * Math.floor(index / 4)\n    });\n    });\n    });\n\n    ```", "```js\n$(\"#cards\").children().each(function(index) {\n// align the cards to be 4x3 ourselves.\n$(this).css({\n\"left\" : ($(this).width() + 20) * (index % 4),\n\"top\" : ($(this).height() + 20) * Math.floor(index / 4)\n});\n});\n\n```", "```js\n$(\".card:first-child\").clone().appendTo(\"#cards\");\n\n```", "```js\n$(\".card:first-child\")\n\n```", "```js\ndisplay: -webkit-box;\n-webkit-box-pack: center;\n-webkit-box-align: center;\n\n```", "```js\n    var matchingGame = {};\n    matchingGame.deck = [\n    'cardAK', 'cardAK',\n    'cardAQ', 'cardAQ',\n    'cardAJ', 'cardAJ',\n    'cardBK', 'cardBK',\n    'cardBQ', 'cardBQ',\n    'cardBJ', 'cardBJ',\n    ];\n\n    ```", "```js\n    $(function(){\n    matchingGame.deck.sort(shuffle);\n    for(var i=0;i<11;i++){\n    $(\".card:first-child\").clone().appendTo(\"#cards\");\n    }\n    $(\"#cards\").children().each(function(index) {\n    $(this).css({\n    \"left\" : ($(this).width() + 20) * (index % 4),\n    \"top\" : ($(this).height() + 20) * Math.floor(index / 4)\n    });\n    // get a pattern from the shuffled deck\n    var pattern = matchingGame.deck.pop();\n    // visually apply the pattern on the card's back side.\n    $(this).find(\".back\").addClass(pattern);\n    // embed the pattern data into the DOM element.\n    $(this).attr(\"data-pattern\",pattern);\n    // listen the click event on each card DIV element.\n    $(this).click(selectCard);\n    });\n    });\n\n    ```", "```js\n    function shuffle() {\n    return 0.5 - Math.random();\n    game logic, adding to matching gamegame logic, adding to matching gamesteps}\n\n    ```", "```js\n    function selectCard() {\n    // we do nothing if there are already two card flipped.\n    if ($(\".card-flipped\").size() > 1) {\n    return;\n    }\n    $(this).addClass(\"card-flipped\");\n    // check the pattern of both flipped card 0.7s later.\n    if ($(\".card-flipped\").size() == 2) {\n    setTimeout(checkPattern,700);\n    }\n    }\n\n    ```", "```js\n    function checkPattern() {\n    if (isMatchPattern()) {\n    $(\".card-flipped\").removeClass(\"card-flipped\").addClass (\"card-removed\");\n    $(\".card-removed\").bind(\"webkitTransitionEnd\", removeTookCards);\n    } else {\n    $(\".card-flipped\").removeClass(\"card-flipped\");\n    }\n    }\n\n    ```", "```js\n    function isMatchPattern() {\n    var cards = $(\".card-flipped\");\n    var pattern = $(cards[0]).data(\"pattern\");\n    var anotherPattern = $(cards[1]).data(\"pattern\");\n    return (pattern == anotherPattern);\n    }\n\n    ```", "```js\n    function removeTookCards() {\n    $(\".card-removed\").remove();\n    }\n\n    ```", "```js\n$(\".card-flipped\").removeClass(\"card-flipped\").addClass(\"card-removed\");\n$(\".card-removed\").bind(\"webkitTransitionEnd\", removeTookCards);\n\n```", "```js\nif ($(\".card-flipped\").size() == 2) {\nsetTimeout(checkPattern,700);\n}\n\n```", "```js\nsort(compare_function);\n\n```", "```js\nanArray.sort(shuffle);\nfunction shuffle(a, b) {\nreturn 0.5 - Math.random();\n}\n\n```", "```js\n<ul id=\"games\">\n<li data-chapter=\"2\" data-difficulty=\"easy\">Ping-Pong</li>\n<li data-chapter=\"3\" data-difficulty=\"medium\">Matching Game</li>\n</ul>\n\n```", "```js\n$(this).find(\".back\").addClass(pattern);\n$(this).attr(\"data-pattern\",pattern);\n\n```", "```js\npattern = $(this).attr(\"data-pattern\");\n\n```", "```js\n$(\"a\").attr(\"href\");\n\n```", "```js\n.data(key)\n.data(key,value)\n\n```", "```js\n<div id=\"target\" data-custom-name=\"HTML5 Games\"></div>\n\n```", "```js\n$(\"#target\").data(\"customName\")\n\n```", "```js\n    <div id=\"game\" data-score=\"100\"></div>\n\n    ```", "```js\n    <link href='http://fonts.googleapis.com/css?family=Droid+Serif:regular,bold&subset=latin' rel='stylesheet' type='text/css'>\n\n    ```", "```js\n    body {\n    font-family: 'Droid Serif', arial, serif;\n    }\n\n    ```"]