- en: Chapter 3. Building a Memory Matching Game in CSS3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。在CSS3中构建记忆匹配游戏
- en: CSS3 introduces many exciting features. In this chapter, we will explore and
    use some of them to create a matching memory game. The CSS3 styles how the game
    objects look and animate while the jQuery library helps us define the game logic.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CSS3引入了许多令人兴奋的功能。在本章中，我们将探索并使用其中一些功能来创建匹配记忆游戏。CSS3样式显示游戏对象的外观和动画，而jQuery库帮助我们定义游戏逻辑。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Transform a playing card with animation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画转换扑克牌
- en: Flip a playing card with new CSS3 properties
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的CSS3属性翻转扑克牌
- en: Create the whole memory matching game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建整个记忆匹配游戏
- en: And embed a custom web font to our game
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并将自定义网络字体嵌入我们的游戏
- en: So let's get on with it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们继续吧。
- en: Moving game objects with CSS3 transition
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS3过渡移动游戏对象
- en: We had a glimpse of the CSS3 transition module and transformation module in
    *Chapter 1, Introducing HTML5 Games*, when we were overviewing the new CSS3 features.
    We often want to animate the game objects by easing the properties. Transition
    is the CSS property designed for this purpose. Imagine we have a playing card
    on the web page and want to move it to another position in five seconds. We had
    to use JavaScript and setup timer and write our own function to change the position
    every several milliseconds. By using the `transition` property, we just need to
    specify the start and end styles and the duration. The browser does all the easing
    and in-between animations, magically.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1章，介绍HTML5游戏*中，我们曾经在概述新的CSS3功能时，简要了解了CSS3过渡模块和变换模块。我们经常希望通过缓和属性来使游戏对象动画化。过渡是为此目的设计的CSS属性。想象一下，我们在网页上有一张扑克牌，想要在五秒内将其移动到另一个位置。我们必须使用JavaScript，设置计时器，并编写自己的函数来每隔几毫秒更改位置。通过使用“transition”属性，我们只需要指定起始和结束样式以及持续时间。浏览器会自动进行缓和和中间动画。
- en: Let's take a look at some examples to understand it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子来理解它。
- en: Time for action Moving a playing card around
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动扑克牌的时间
- en: 'In this example, we will place two playing cards on the web page and transform
    them to a different position, scale, and rotation. We will tween the transformation
    by setting the transition:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将在网页上放置两张扑克牌，并将它们转换到不同的位置、比例和旋转。我们将通过设置过渡来缓和变换：
- en: Create a new folder with three files in the following hierarchy. The `css3transition.css`
    and `index.html` is empty now and we will add the code later. The `jquery-1.6.min.js`
    is the jQuery library that we have used in the previous chapter.![Time for action
    Moving a playing card around](img/1260_03_01.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下层次结构中创建一个新文件夹，其中包含三个文件。现在，“css3transition.css”和“index.html”为空，我们将稍后添加代码。“jquery-1.6.min.js”是我们在上一章中使用的jQuery库。![移动扑克牌的时间](img/1260_03_01.jpg)
- en: We are using two playing card graphic images in this example. The images are
    available in the code bundle or you can download them from [http://gamedesign.cc/html5games/css3-basic-transition/images/AK.png](http://gamedesign.cc/html5games/css3-basic-transition/images/AK.png)
    and [http://gamedesign.cc/html5games/css3-basic-transition/images/AQ.png](http://gamedesign.cc/html5games/css3-basic-transition/images/AQ.png).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了两张扑克牌图像。这些图像可以在代码包中找到，或者您可以从[http://gamedesign.cc/html5games/css3-basic-transition/images/AK.png](http://gamedesign.cc/html5games/css3-basic-transition/images/AK.png)和[http://gamedesign.cc/html5games/css3-basic-transition/images/AQ.png](http://gamedesign.cc/html5games/css3-basic-transition/images/AQ.png)下载。
- en: Create a new folder named `images` and place the two card images inside.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“images”的新文件夹，并将两张卡片图像放在其中。
- en: 'The next thing is to code the HTML with two card DIV elements. We will apply
    CSS transition style to these two cards elements when the page is loaded:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的是编写HTML，其中包含两个卡片DIV元素。当页面加载时，我们将为这两个卡片元素应用CSS过渡样式：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is time to define the visual styles of the playing cards via CSS. It contains
    basic CSS 2.1 properties and CSS3 new properties. The new CSS3 properties are
    highlighted:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候通过CSS定义扑克牌的视觉样式了。它包含基本的CSS 2.1属性和CSS3新属性。新的CSS3属性已经突出显示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s save all the files and open the `index.html` in the browser. The two
    cards should animate as shown in the following screenshot:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们保存所有文件，并在浏览器中打开“index.html”。两张卡应该如下截图所示进行动画：
- en: '![Time for action Moving a playing card around](img/1260_03_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![移动扑克牌的时间](img/1260_03_02.jpg)'
- en: What just happened?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: We just created two animation effects by using the CSS3 transition to tween
    the `transform` property.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚通过使用CSS3过渡来创建了两个动画效果，以调整“transform”属性。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the new CSS3 transition and transform properties are not yet
    finalized. Web browsers support these drafted but stable properties with a vendor
    prefix. In our example to support Chrome and Safari, we used the `-webkit-` prefix.
    We can use other prefixes in the code to support other browsers, such as `-moz-`
    for Mozilla and `-o-` for Opera.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，新的CSS3过渡和变换属性尚未最终确定。Web浏览器支持这些起草但稳定的属性，并带有供应商前缀。在我们的示例中，为了支持Chrome和Safari，我们使用了“-webkit-”前缀。我们可以在代码中使用其他前缀来支持其他浏览器，例如为Mozilla使用“-moz-”，为Opera使用“-o-”。
- en: 'Here is the usage of CSS transform:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是CSS变换的用法：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The arguments of the `transform` property are functions. There are two sets
    of functions, 2D `transform` function and 3D. **CSS transform** functions are
    designed to move, scale, rotate, and skew the target DOM elements. The following
    shows the usage of the transforms functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “transform”属性的参数是函数。有两组函数，2D“transform”函数和3D。**CSS transform**函数旨在移动、缩放、旋转和扭曲目标DOM元素。以下显示了变换函数的用法。
- en: 2D transforms functions
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2D变换函数
- en: 'The 2D `rotate` function rotates the element clockwise on a given positive
    argument and counter-clockwise on the given negative argument:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2D“rotate”函数按给定的正参数顺时针旋转元素，并按给定的负参数逆时针旋转：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The translate function moves the element by the given X and Y displacement:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: translate函数通过给定的X和Y位移移动元素：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can translate the X or Y-axis independently by calling the `translateX`
    and `translateY` function as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用“translateX”和“translateY”函数来独立地沿X或Y轴进行平移，如下所示：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `scale` function scales the element by the given `sx, sy` vector. If we
    only pass the first argument, then `sy` will be of the same value as `sx:`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale`函数按给定的`sx，sy`向量缩放元素。如果我们只传递第一个参数，那么`sy`将与`sx`的值相同：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition, we can independently scale the X and Y-axis as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以独立地按如下方式缩放X和Y轴：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 3D transforms functions
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3D变换函数
- en: The 3D rotation function rotates the element in 3D space by the given [x, y,
    z] unit vector. For example, we can rotate the Y-axis 60 degrees by using `rotate3d(0,
    1, 0, 60deg):`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 3D旋转功能通过给定的[x，y，z]单位向量在3D空间中旋转元素。例如，我们可以使用`rotate3d(0, 1, 0, 60deg)`将Y轴旋转60度：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also rotate one axis only by calling the following handy functions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过调用以下方便的函数仅旋转一个轴：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similar to the 2D `translate` function, `translate3d` allows us to move the
    element in all three axes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与2D `translate`函数类似，`translate3d`允许我们在所有三个轴上移动元素：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also, the `scale3d` scales the element in the 3D spaces:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`scale3d`在3D空间中缩放元素：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `transform` functions we just discussed are those that are common and we
    will use them many times. There are several other `transform` functions not discussed.
    They are `matrix, skew`, and `perspective`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚讨论的`transform`函数是常见的，我们会多次使用它们。还有一些其他未讨论的`transform`函数。它们是`matrix，skew`和`perspective`。
- en: If you want to find the latest CSS transforms working spec, you can visit the
    W3C website with the following addresses. CSS 2D Transforms Modules ([http://dev.w3.org/csswg/css3-3d-transforms/](http://dev.w3.org/csswg/css3-3d-transforms/))
    and the 3D Transforms Modules ([http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想找到最新的CSS变换工作规范，可以访问W3C网站，网址如下。CSS 2D变换模块（[http://dev.w3.org/csswg/css3-3d-transforms/](http://dev.w3.org/csswg/css3-3d-transforms/)）和3D变换模块（[http://www.w3.org/TR/css3-2d-transforms/](http://www.w3.org/TR/css3-2d-transforms/)）。
- en: Tweening the styles by using CSS3 transition
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用CSS3过渡来缓慢改变样式
- en: There are tons of new features in CSS3\. Transition module is one among them
    that affects us most in game designing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3中有大量新功能。过渡模块是其中之一，对我们在游戏设计中影响最大。
- en: 'What is **CSS3 transition?** W3C explains it in one sentence.:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是**CSS3过渡**？W3C用一句话解释了它：
- en: CSS transitions allows property changes in CSS values to occur smoothly over
    a specified duration.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CSS过渡允许CSS值中的属性更改在指定的持续时间内平滑发生。
- en: Normally, when we change any properties of the element, the properties are updated
    to the new value immediately. Transition slows down the changing process. It creates
    smooth in-between easing from the old value towards the new value in the given
    duration.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们改变元素的任何属性时，属性会立即更新为新值。过渡会减慢更改过程。它在给定的持续时间内创建从旧值到新值的平滑过渡。
- en: 'Here is the usage of the `transition` property:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`transition`属性的用法：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| Argument | Definition |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 定义 |'
- en: '| --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `property_name` | The name of the property where the transition applies.
    It can be set to `all`. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `property_name` | 过渡应用的属性名称。可以设置为`all`。|'
- en: '| `Duration` | The duration the transition takes. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `Duration` | 过渡所需的持续时间。|'
- en: '| `Timing_function` | The `timing` function defines the interpolation between
    the start and end value. The default value is `ease`. Normally we will use `ease,
    ease-in, ease-out`, and `linear`. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `Timing_function` | `timing`函数定义了开始值和结束值之间的插值。默认值是`ease`。通常我们会使用`ease, ease-in,
    ease-out`和`linear`。|'
- en: '| `Delay` | The delay argument delays the start of the transition by the given
    seconds. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `Delay` | 延迟参数延迟了给定秒数的过渡开始。|'
- en: 'We can put several `transition` properties in one line. For example, the following
    code transits the opacity in 0.3 seconds and background color in 0.5 seconds:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一行中放置几个`transition`属性。例如，以下代码在0.3秒内过渡不透明度，0.5秒内过渡背景颜色：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also define each transition property individually by using the following
    properties:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下属性单独定义每个过渡属性：
- en: '`transition-property, transition-duration, transition-timing-function` and
    `transition-delay`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition-property，transition-duration，transition-timing-function`和`transition-delay`。'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Modules of CSS3**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS3模块**'
- en: According to W3C, CSS3 is unlike CSS 2.1 in that there is only one CSS 2.1 spec.
    CSS3 is divided into different modules. Each module is reviewed individually.
    For example, there is transition module, 2D/3D transforms module, and flexible
    box layout module.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据W3C，CSS3不同于CSS 2.1，因为CSS 2.1只有一个规范。CSS3分为不同的模块。每个模块都会单独进行审查。例如，有过渡模块，2D/3D变换模块和弹性盒布局模块。
- en: The reason of dividing the spec into modules is because the working progress
    pace of each part of the CSS3 is not the same. Some CSS3 features are rather stable,
    such as border radius, while some have not yet settled down. By dividing the whole
    spec into different parts, it allows the browser vendor to support modules that
    are stable. In this scenario, slow pace features will not slow down the whole
    spec. The aim of the CSS3 spec is to standardize the most common visual usage
    in web designing and this module fits this aim.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将规范分成模块的原因是因为CSS3的每个部分的工作进度不同。一些CSS3功能相当稳定，例如边框半径，而有些尚未定型。通过将整个规范分成不同的部分，它允许浏览器供应商支持稳定的模块。在这种情况下，缓慢的功能不会减慢整个规范。CSS3规范的目标是标准化网页设计中最常见的视觉用法，而这个模块符合这个目标。
- en: Have a go hero
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看
- en: We have translated, scaled, and rotated the playing cards. How about we try
    changing different values in the example? There are three axes in the `rotate3d`
    function. What will happen if we rotate the other axis? Experiment with the code
    yourselves to get familiar with the transform and transition modules.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经翻译，缩放和旋转了扑克牌。在示例中尝试更改不同的值怎么样？`rotate3d`函数中有三个轴。如果我们旋转其他轴会发生什么？通过自己尝试代码来熟悉变换和过渡模块。
- en: Creating a card-flipping effect
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建翻转卡片效果
- en: Imagine now we are not just moving the playing card around, but we also want
    to flip the card element, just like we flip a real playing card. By using the
    `rotation transform` function, it is now possible to create the card-flipping
    effect.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，我们不仅仅是移动纸牌，而且还想翻转卡片元素，就像我们翻转真正的纸牌一样。通过使用`rotation transform`函数，现在可以创建翻牌效果。
- en: Time for action Flipping a card with CSS3
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS3翻牌的时间
- en: 'We are going to start a new project and create a card-flipping effect when
    we click on the playing card.:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击纸牌时，我们将开始一个新项目并创建一个翻牌效果：
- en: Let's continue on our previous code example.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续我们之前的代码示例。
- en: 'The card now contains two faces, a front face and a back face. Replace the
    following code into the `body` tag in the HTML:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卡片现在包含两个面，一个正面和一个背面。将以下代码替换为HTML中的`body`标签：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then change the CSS external link to the `css3flip.css` file:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将CSS外部链接更改为`css3flip.css`文件：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now let's add the styles to the `css3flip.css:`
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们将样式添加到`css3flip.css`中：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There are two faces on each card. We are going to rotate the face late. Therefore,
    we define how the face transits by CSS3 `transition` property. We also hide the
    back face visibility. We will look at the detail of this property later:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每张卡上有两个面。我们将晚些时候旋转面。因此，我们通过CSS3的`transition`属性定义了面的过渡方式。我们还隐藏了背面的可见性。我们稍后会详细看一下这个属性：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now it is time to style each individual face. The front face has a higher z-index
    than the back face:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是为每个单独的面样式。正面的z-index比背面高：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When we flip the card, we rotate the front face to back and back face to front.
    We also swap the z-index of the front and back face:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们翻转卡片时，我们将正面旋转到背面，背面旋转到正面。我们还交换了正面和背面的z-index：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we will add logic after loading the jQuery library to toggle the card-flipped
    status when clicking on the card:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在加载jQuery库后添加逻辑，以在单击卡片时切换卡片翻转状态：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The styles and the scripts are now ready. Let's save all the files and preview
    it in our web browser. Click the playing card to flip it over and click again
    to flip back.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在样式和脚本都准备好了。让我们保存所有文件并在Web浏览器中预览。单击纸牌翻转它，再次单击翻转回来。
- en: '![Time for action Flipping a card with CSS3](img/1260_03_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS3翻牌的时间](img/1260_03_03.jpg)'
- en: What just happened?
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have created a card-flipping effect toggled by a mouse click. The example
    made use of several CSS transforms properties and JavaScript for handling the
    mouse click event.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个通过鼠标单击切换的翻牌效果。该示例利用了几个CSS变换属性和JavaScript来处理鼠标单击事件。
- en: Toggling class with jQuery toggleClass function
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery toggleClass函数切换类
- en: We apply the class `card-flipped` to the card element when the mouse is clicked
    on the card. On the second click, we want to remove the applied card-flipped style
    so the card flips back again. This is called **toggling a class** style.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标单击卡片时，我们将`card-flipped`类应用于卡片元素。第二次单击时，我们希望删除已应用的`card-flipped`样式，以便卡片再次翻转。这称为**切换类**样式。
- en: jQuery provides us with a handy function named `toggleClass` to add or remove
    classes automatically, depending on whether the class is applied or not.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery为我们提供了一个方便的函数，名为`toggleClass`，可以根据类是否应用来自动添加或删除类。
- en: To use the function, we simply pass the classes that we want to toggle as an
    argument.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用该函数，我们只需将要切换的类作为参数传递。
- en: For example, the following code adds or removes the `card-flipped` class to
    an element with ID `card1:`
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码向具有ID`card1`的元素添加或删除`card-flipped`类：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `toggleClass` function accepts toggle from more than one class at the sample
    time. We can pass in several class names and separate them by using space. Here
    is an example of toggling two classes at the same time:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggleClass`函数接受一次切换多个类。我们可以传递多个类名，并用空格分隔它们。以下是同时切换两个类的示例：'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Controlling the visibility of overlapped elements by z-index
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过z-index控制重叠元素的可见性
- en: Normally, all elements in a web page are distributed and presented without overlapping.
    Designing a game is a different story. We always need to deal with overlapped
    elements and hide them (or part of them) on purpose. `Z-index`, a CSS 2.1 property,
    helps us to control the visibility behaviors when more than one element is overlapped.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，网页中的所有元素都是分布和呈现而不重叠的。设计游戏是另一回事。我们总是需要处理重叠的元素并有意隐藏它们（或其中的一部分）。`Z-index`是CSS
    2.1属性，帮助我们控制多个重叠元素时的可见性行为。
- en: 'In this example, we have two faces for each card, the front and the back face.
    The two faces are placed in the exact position. They overlap each other. The **Z-index**
    property defines which element is on top and which is behind. The elements with
    a higher z-index go in front of elements with a lower z-index. When they overlap,
    the one with the higher z-index will cover the one with the lower z-index. The
    following screenshot demonstrates the z-index behavior:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每张卡片有两个面，正面和背面。两个面放在完全相同的位置。它们彼此重叠。**Z-index**属性定义了哪个元素在顶部，哪个在后面。具有较高z-index的元素在较低z-index的元素前面。当它们重叠时，具有较高z-index的元素将覆盖具有较低z-index的元素。以下截图演示了z-index的行为：
- en: '![Controlling the visibility of overlapped elements by z-index](img/1260_03_04.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![通过z-index控制重叠元素的可见性](img/1260_03_04.jpg)'
- en: In the card-flipping example, we swapped the z-index of both faces to ensure
    the corresponding face is on top of the other in both the normal state and the
    flipped state. The following code shows the swapping.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在翻牌示例中，我们交换了两个面的z-index，以确保对应的面在正常状态和翻转状态下都在另一个面的上方。以下代码显示了交换。
- en: 'When in a normal state, the front face has a higher z-index:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常状态下，正面的z-index较高：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'While in a flipped state, the front face changes to a lower z-index than the
    back face. The back face now covers the front face:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在翻转状态下，正面的z-index变为低于背面的z-index。现在背面覆盖了正面：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Introducing CSS perspective property
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍CSS透视属性
- en: CSS3 lets us present elements in 3D. We have been able to transform the elements
    in 3D space. The `perspective` property defines how the 3D perspective view looks.
    You can treat the value as far as you are looking at the object. The closer you
    are, the more perspective distortion there is on the viewing object.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3让我们能够以3D形式呈现元素。我们已经能够在3D空间中转换元素。`perspective`属性定义了3D透视视图的外观。您可以将值视为您观察对象的距离。您越近，观察对象的透视失真就越大。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While writing this book, only Safari supported the 3D perspective feature. Chrome
    supports 3D transform while not supporting the `perspective` property. Therefore,
    we will have the best effect in Safari and an acceptable effect in Chrome.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，只有Safari支持3D透视功能。Chrome支持3D变换，但不支持`perspective`属性。因此，在Safari中效果最佳，在Chrome中效果也可以接受。
- en: 'The following two 3D cubes demonstrate how different perspective values change
    the perspective view of the element:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个3D立方体演示了不同的透视值如何改变元素的透视视图：
- en: '![Introducing CSS perspective property](img/1260_03_05.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![介绍CSS透视属性](img/1260_03_05.jpg)'
- en: 'You can view this experiment by going to the following address in Safari:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Safari中输入以下地址查看此实验：
- en: '[http://gamedesign.cc/html5games/perspective-cube/](http://gamedesign.cc/html5games/perspective-cube/)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamedesign.cc/html5games/perspective-cube/](http://gamedesign.cc/html5games/perspective-cube/)'
- en: Have a go hero
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Have a go hero
- en: The cube is created by putting six faces together with 3D transforms applied
    to each face. It used the techniques we've discussed. Try to create a cube and
    experiment with the `perspective` property.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 立方体是通过将六个面放在一起，并对每个面应用3D变换来创建的。它使用了我们讨论过的技术。尝试创建一个立方体并尝试使用`perspective`属性进行实验。
- en: 'The following web page gives a comprehensive explanation on creating the CSS3
    cube, and also discusses controlling the rotation of the cube through the keyboard:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下网页对创建CSS3立方体进行了全面的解释，并讨论了通过键盘控制立方体的旋转：
- en: '[http://www.paulrhayes.com/2009-07/animated-css3-cube-interface-using-3d-transforms/](http://www.paulrhayes.com/2009-07/animated-css3-cube-interface-using-3d-transforms/)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.paulrhayes.com/2009-07/animated-css3-cube-interface-using-3d-transforms/](http://www.paulrhayes.com/2009-07/animated-css3-cube-interface-using-3d-transforms/)'
- en: Introducing backface-visibility
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍backface-visibility
- en: Before the backface-visibility is introduced, all elements on the page present
    their front face to the visitor. Actually, there was no concept of the front face
    or back face of the element because it was the only choice. While CSS3 introduces
    the rotation in three axes, we can rotate an element so that its face is on the
    back. Try looking at your palm and rotating your wrist, your palm turns and you
    see the back of your palm. This happens to the rotated elements too.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入`backface-visibility`之前，页面上的所有元素都向访问者展示它们的正面。实际上，元素的正面或背面没有概念，因为这是唯一的选择。而CSS3引入了三个轴的旋转，我们可以旋转一个元素，使其正面朝后。试着看看你的手掌并旋转你的手腕，你的手掌转过来，你看到了手掌的背面。这也发生在旋转的元素上。
- en: CSS3 introduces a property named `backface-visibility` to define whether we
    can see the back face of the element or not. By default, it is visible. The following
    screenshots demonstrate the two different behaviors of the `backface-visibility`
    property.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3引入了一个名为`backface-visibility`的属性，用于定义我们是否可以看到元素的背面。默认情况下，它是可见的。以下截图演示了`backface-visibility`属性的两种不同行为。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, only Apple Safari supported the `backface-visibility`
    property.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，只有Apple Safari支持`backface-visibility`属性。
- en: '![Introducing backface-visibility](img/1260_03_06.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![介绍backface-visibility](img/1260_03_06.jpg)'
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can read more detailed information about different properties and functions
    in CSS 3D transforms on the official Webkit blog: [http://webkit.org/blog/386/3d-transforms/](http://webkit.org/blog/386/3d-transforms/).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Webkit博客上阅读有关CSS 3D变换中不同属性和函数的更详细信息：[http://webkit.org/blog/386/3d-transforms/](http://webkit.org/blog/386/3d-transforms/)。
- en: Creating a card matching memory game
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一款卡片匹配记忆游戏
- en: We have gong through some CSS basic techniques. Let's make a game with the techniques.
    We are going to make a card game. The card game makes use of transform to flip
    the card, transition to move the card, JavaScript to hold the logic, and a new
    HTML5 feature called custom data attribute. Don't worry, we will discuss each
    component step by step.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了一些CSS基本技术。让我们用这些技术制作一个游戏。我们将制作一款纸牌游戏。纸牌游戏利用变换来翻转纸牌，过渡来移动纸牌，JavaScript来控制逻辑，以及一个名为自定义数据属性的新HTML5功能。别担心，我们将逐步讨论每个组件。
- en: Downloading the sprites sheet of playing cards
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载扑克牌的精灵表
- en: In the card-flipping example, we were using two different playing card graphics.
    Now we prepare the whole deck of playing card graphics. Although we only use six
    playing cards in the matching game, we prepare the whole deck so we can reuse
    these graphics in other playing card games that we may create.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在翻牌示例中，我们使用了两种不同的扑克牌图形。现在我们准备整副扑克牌的图形。尽管我们在匹配游戏中只使用了六张扑克牌，但我们准备整副扑克牌，这样我们可以在可能创建的其他扑克牌游戏中重复使用这些图形。
- en: There are 52 playing cards in a deck and we have one more graphic for the backside.
    Instead of using 53 separated files, it is good practice to put separated graphics
    into one big sprite sheet file. The term sprite sheet was from an old computer
    graphics technique that loaded one graphics texture into memory and displayed
    part of the graphics.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一副牌有52张，我们还有一张背面的图形。与使用53个单独的文件不同，将单独的图形放入一个大的精灵表文件是一个好的做法。精灵表这个术语来自于一种旧的计算机图形技术，它将一个图形纹理加载到内存中并显示部分图形。
- en: One benefit of using a big sprite sheet instead of separated image files is
    that we can reduce the amount of **HTTP requests.** When the browser loads the
    web page, it creates a new HTTP request to load each external resource, including
    JavaScript files, CSS files, and images. It takes quite a lot of time to establish
    a new HTTP request for each separated small file. Combining the graphics into
    one file, largely reduces the amount of requests and thus improves the responsiveness
    of the game when loading in the browser.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大型精灵表而不是分离的图像文件的一个好处是可以减少**HTTP请求的数量**。 当浏览器加载网页时，它会创建一个新的HTTP请求来加载每个外部资源，包括JavaScript文件，CSS文件和图像。
    为每个分离的小文件建立新的HTTP请求需要相当长的时间。 将图形合并到一个文件中，大大减少了请求的数量，从而提高了在浏览器中加载时游戏的响应性。
- en: Another benefit for placing graphics into one file is to avoid the overhead
    of the file format header. The size of a 53 images sprite sheet is less than the
    sum of 53 different images with the file header in each file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将图形放入一个文件的另一个好处是避免文件格式头的开销。 53张图像精灵表的大小小于每个文件中带有文件头的53张不同图像的总和。
- en: The following deck of playing cards graphics is drawn and aligned in Adobe Illustrator.
    You can download it from [http://gamedesign.cc/html5games/css3-matching-game/images/deck.png](http://gamedesign.cc/html5games/css3-matching-game/images/deck.png).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下扑克牌图形是在Adobe Illustrator中绘制和对齐的。 您可以从[http://gamedesign.cc/html5games/css3-matching-game/images/deck.png](http://gamedesign.cc/html5games/css3-matching-game/images/deck.png)下载它。
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following article explains in detail why and how we can create and use
    the CSS sprite sheet:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文章详细解释了为什么以及如何创建和使用CSS精灵表：
- en: '[http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/)'
- en: '![Downloading the sprites sheet of playing cards](img/1260_03_07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![下载扑克牌精灵表](img/1260_03_07.jpg)'
- en: Setting up the game environment
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置游戏环境
- en: 'The graphics are ready, we will then need to set up a static page with the
    game objects prepared and placed on the game area. It is easier for adding game
    logic and interaction later:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图形已准备就绪，然后我们需要在游戏区域上设置一个静态页面，并在游戏区域上准备和放置游戏对象。 这样以后添加游戏逻辑和交互会更容易：
- en: Time for action Preparing the card matching game
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作准备卡片匹配游戏的时间
- en: 'Before adding the complicated game logic to our matching game, let''s prepare
    the HTML game structure and prepare all the CSS styles:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在将复杂的游戏逻辑添加到我们的匹配游戏之前，让我们准备HTML游戏结构并准备所有CSS样式：
- en: 'Let''s continue on our code. Replace the `index.html` file with the following
    HTML:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续我们的代码。 用以下HTML替换`index.html`文件：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In order to make the game more appealing, I prepared background images for the
    game table and the page. These graphic assets can be found in the code example
    bundle. The background images are optional and they will not affect the gameplay
    and the logic of the matching game.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使游戏更具吸引力，我为游戏桌和页面准备了背景图像。 这些图形资产可以在代码示例包中找到。 背景图像是可选的，它们不会影响匹配游戏的游戏过程和逻辑。
- en: We will also place the deck sprite sheet graphics into the images folder. Download
    the `deck.png` file from [http://gamedesign.cc/html5games/css3-matching-game/images/deck.png](http://gamedesign.cc/html5games/css3-matching-game/images/deck.png)
    and save it into the images folder.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将把扑克牌精灵表图形放入images文件夹中。 从[http://gamedesign.cc/html5games/css3-matching-game/images/deck.png](http://gamedesign.cc/html5games/css3-matching-game/images/deck.png)下载`deck.png`文件，并将其保存到images文件夹中。
- en: 'Let''s add style to the matching game before writing any logic. Open `matchgame.css`
    and add the following body styles:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编写任何逻辑之前，让我们为匹配游戏添加样式。 打开`matchgame.css`并添加以下body样式：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Continue to add the styles to the `game` element. It will be the main area
    of the game:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续向`game`元素添加样式。 它将是游戏的主要区域：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will put all card elements into a parent DOM named `cards`. By doing this,
    we can easily center all cards to the game area:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将所有卡片元素放入名为`cards`的父DOM中。 这样做可以轻松地将所有卡片居中到游戏区域：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For each card, we define a `perspective` property to give it a visual depth
    effect:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每张卡，我们定义了一个`perspective`属性，以赋予它视觉深度效果：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'There are two faces on each card. The face will be rotated later and we will
    define the transition properties to animate the style changes. We also want to
    make sure the back face is hidden:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每张卡上有两个面。 面将稍后旋转，我们将定义过渡属性以动画显示样式更改。 我们还希望确保背面是隐藏的：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then we set the front and back face styles. They are almost the same as the
    flipping card example, except that we are now giving them background images and
    box shadows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们设置正面和背面样式。 它们与翻转卡片示例几乎相同，只是现在我们为它们提供了背景图像和盒子阴影：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When any card is removed, we want to fade it out. Therefore, we declare a card-removed
    class with 0 opacity:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当任何卡被移除时，我们希望将其淡出。 因此，我们声明了一个带有0不透明度的card-removed类：
- en: '[PRE32]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In order to show different playing card graphics from the sprite sheet of the
    card deck, we clip the background of the card into different background positions:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从卡牌牌组的精灵表中显示不同的扑克牌图形，我们将卡的背景剪切成不同的背景位置：
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We have defined a lot of CSS styles. It is now time for the JavaScript logic.
    Open the `html5games.matchgame.js` file and put the following code inside:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经定义了许多CSS样式。 现在是JavaScript逻辑的时候了。 打开`html5games.matchgame.js`文件，并将以下代码放入其中：
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now save all files and preview the game in the browser. The game should be well
    styled and 12 cards should appear in the center. However, we cannot click on the
    cards yet because we have not set any interaction logic to the cards.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存所有文件并在浏览器中预览游戏。 游戏应该有很好的样式，并且中央应该出现12张卡。 但是，我们还不能点击卡片，因为我们还没有为卡片设置任何交互逻辑。
- en: '![Time for action Preparing the card matching game](img/1260_03_08.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作准备卡片匹配游戏的时间](img/1260_03_08.jpg)'
- en: What just happened?
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created the game structure in HTML and applied styles to the HTML elements.
    We also used jQuery to create 12 cards on the game area once the web was loaded
    and ready. The styles of flipping and removing of the cards are also prepared
    and can be applied to the card by using the game logic later.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在HTML中创建了游戏结构，并对HTML元素应用了样式。我们还使用jQuery在网页加载和准备好后在游戏区域创建了12张卡片。翻转和移除卡片的样式也已准备好，并可以在稍后使用游戏逻辑应用到卡片上。
- en: 'Since we are using absolute positioning for each card, we need to align the
    cards into 4x3 tiles ourselves. In the JavaScript logic, we loop through each
    card and align it by calculating the position with the looping index:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们为每张卡片使用绝对定位，我们需要自己将卡片对齐到4x3的瓷砖中。在JavaScript逻辑中，我们通过循环每张卡片并通过计算循环索引来对齐它：
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The "%" in JavaScript is the **modulus operator** that returns the remainder
    left after division. The remainder is used to get the column count when looping
    the cards. The following diagram shows the row/column relationship with the index
    number:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的“%”是**模运算符**，它返回除法后剩下的余数。余数用于在循环卡片时获取列数。以下图表显示了行/列关系与索引号：
- en: '![What just happened?](img/1260_03_09.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/1260_03_09.jpg)'
- en: The division, on the other hand, is used to get the row count so we can position
    the card on that corresponding row.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，除法用于获取行数，以便我们可以将卡片定位在相应的行上。
- en: Take index 3 as an example, 3 % 4 is 3\. So the card at index 3 is on the third
    column. And 3 / 4 is 0, so it is on the first row.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以索引3为例，3 % 4是3。所以索引3的卡片在第三列。而3 / 4是0，所以它在第一行。
- en: Let's pick another number to see how the formula works. Let's see index 8\.
    8 % 4 is 0 and it is on the first column. 8 / 4 is 2 so it is on the third row.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择另一个数字来看看公式是如何工作的。让我们看看索引8。8 % 4是0，它在第一列。8 / 4是2，所以它在第三行。
- en: Cloning DOM elements with jQuery
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery克隆DOM元素
- en: 'In our HTML structure, we only have one card and in the result, we have 12
    cards there. It is because we used the `clone` function in jQuery to clone the
    card element. After cloning the target element, we called the `appendTo` function
    to append the cloned card element as a child in the cards element:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML结构中，我们只有一张卡片，在结果中，我们有12张卡片。这是因为我们在jQuery中使用了`clone`函数来克隆卡片元素。克隆目标元素后，我们调用`appendTo`函数将克隆的卡片元素附加为卡片元素的子元素：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Selecting the first child of an element in jQuery by using child filters
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用子筛选器在jQuery中选择元素的第一个子元素
- en: 'When we selected the card element and cloned it, we used the following selector:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择卡片元素并克隆它时，我们使用了以下选择器：
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `:first-child` is a **child filter** that selects the first child of the
    given parent element.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`:first-child`是一个**子筛选器**，选择给定父元素的第一个子元素。'
- en: Besides `:first-child`, we can also select the last child by using `:last-child`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`:first-child`，我们还可以使用`:last-child`选择最后一个子元素。
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can also check other child-related selectors on the jQuery document:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在jQuery文档中检查其他与子元素相关的选择器：
- en: '[http://api.jquery.com/category/selectors/child-filter-selectors/](http://api.jquery.com/category/selectors/child-filter-selectors/)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://api.jquery.com/category/selectors/child-filter-selectors/](http://api.jquery.com/category/selectors/child-filter-selectors/)'
- en: Vertically aligning a DOM element
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直对齐DOM元素
- en: 'We put the cards DIV in the center of the game element. **CSS3 flexible box
    layout module** introduces an easy method to achieve the **vertical center alignment**.
    As this module is still in progress, we need to apply a browser vendor prefix.
    We will use Webkit as an example here:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将卡片DIV放在游戏元素的中心。**CSS3灵活的盒子布局模块**引入了一种实现**垂直居中对齐**的简单方法。由于这个模块仍在进行中，我们需要应用浏览器供应商前缀。我们将以Webkit为例：
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The flexible box module defines the alignment of the element when there are
    extra spaces in their container. We can set the element to behaviors as a flexible
    box container by using the display, a CSS2 property, with the value `box`, a new
    CSS3 property value.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 灵活盒模块定义了元素在其容器中有额外空间时的对齐方式。我们可以通过使用`display`，一个CSS2属性，值为`box`，一个新的CSS3属性值，将元素设置为灵活盒容器的行为。
- en: '`box-pack` and `box-align` are two properties for defining how it aligns and
    uses the extra free space horizontally and vertically. We can center the element
    by setting both properties to `center.`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`box-pack`和`box-align`是两个属性，用于定义它如何在水平和垂直方向上对齐并使用额外的空间。我们可以通过将这两个属性都设置为`center`来使元素居中。'
- en: Vertical alignment is just a small part of the flexible box layout module. It
    is very powerful when making layout in web design. You may find further information
    on the W3C page of the module ([http://www.w3.org/TR/css3-flexbox/](http://www.w3.org/TR/css3-flexbox/))
    or the CSS3 Info website ([http://www.css3.info/introducing-the-flexible-box-layout-module/](http://www.css3.info/introducing-the-flexible-box-layout-module/)).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直对齐只是灵活盒子布局模块的一小部分。在网页设计中进行布局时非常强大。您可以在W3C模块的页面([http://www.w3.org/TR/css3-flexbox/](http://www.w3.org/TR/css3-flexbox/))或CSS3
    Info网站([http://www.css3.info/introducing-the-flexible-box-layout-module/](http://www.css3.info/introducing-the-flexible-box-layout-module/))上找到更多信息。
- en: Using CSS sprite with a background position
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS精灵和背景位置
- en: The **CSS sprite** sheet is a big image that contains many individual graphics.
    The big sprite sheet image is applied as background image for the elements. We
    can clip each graphic out by moving the background position on a fixed width and
    height element.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS精灵**表是一个包含许多单独图形的大图像。大的精灵表图像被应用为元素的背景图像。我们可以通过移动固定宽度和高度元素的背景位置来剪裁每个图形。'
- en: 'Our deck image contains a total of 53 graphics. In order to demonstrate the
    background position easily, let''s assume we have an image that contains three
    card images, such as the following screenshot:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的牌组图像包含总共53个图形。为了方便演示背景位置，让我们假设我们有一张包含三张卡片图像的图像，如下面的截图：
- en: '![Using CSS sprite with a background position](img/1260_03_10.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: 使用CSS精灵和背景位置
- en: 'In the CSS style, we set the card element to 80px width and 120px height, with
    the background image set to the big deck image. If we want the top left graphic,
    we apply both the X and Y of the background position to 0\. If we want the second
    graphic, we move the background image to left 80px. That means setting the X position
    to -80px and Y to 0\. Since we have a fixed width and height, only the clipped
    80x120 area shows the background image. The rectangle in the following screenshot
    shows the viewable area:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS样式中，我们将卡片元素设置为80像素宽，120像素高，背景图像设置为大牌组图像。如果我们想要左上角的图形，我们将背景位置的X和Y都应用为0。如果我们想要第二个图形，我们将背景图像移动到左80像素。这意味着将X位置设置为-80像素，Y设置为0。由于我们有固定的宽度和高度，只有裁剪的80x120区域显示背景图像。以下截图中的矩形显示了可视区域：
- en: '![Using CSS sprite with a background position](img/1260_03_11.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS精灵和背景位置](img/1260_03_11.jpg)'
- en: Adding game logic to the matching game
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为匹配游戏添加游戏逻辑
- en: Let's now imagine holding a real deck in our hand and setting up the matching
    game.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们想象手中拿着一副真正的牌组并设置匹配游戏。
- en: We first shuffle the cards in our hand and then we put each card on the table
    with the back facing up. For easier game play, we align the cards into a 4x3 array.
    Now the game is set up.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在手中洗牌，然后将每张卡片背面朝上放在桌子上。为了更容易玩游戏，我们将卡片排成4x3的数组。现在游戏已经准备好了。
- en: Now we are going to play the game. We pick up one card and flip it to make it
    face up. We pick another one and face it upwards. Afterwards, we have two possible
    actions. We take away those two cards if they are in the same pattern. Otherwise,
    we put it back facing down again, as if we have not touched them. The game continues
    until we pair all cards and take them all.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要开始玩游戏了。我们拿起一张卡片并翻转它使其正面朝上。然后我们拿起另一张并将其朝上。之后，我们有两种可能的操作。如果它们是相同的图案，我们就把这两张卡片拿走。否则，我们将它们再次放回背面，就好像我们没有触摸过它们一样。游戏将继续，直到我们配对所有卡片并将它们全部拿走。
- en: The code flow will be much more clear after we have the step-by-step scenario
    in our mind. Actually, the code in this example is exactly the same as the procedure
    we play with a real deck. We just need to replace the human language into the
    JavaScript code.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们脑海中有了逐步的情景之后，代码流程将会更加清晰。实际上，这个例子中的代码与我们玩真正的牌组的过程完全相同。我们只需要将人类语言替换为JavaScript代码。
- en: Time for action Adding game logic to the matching game
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行为匹配游戏添加游戏逻辑的操作
- en: 'We have prepared the game environment in the last example and decided the game
    logic to be the same as playing a real deck. It is time to code the JavaScript
    logic now:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们准备了游戏环境，并决定了游戏逻辑与玩真正的牌组相同。现在是时候编写JavaScript逻辑了：
- en: Let's begin from our last matching game example. We have styled the CSS and
    now it is time to add the game logic in the `html5games.matchgame.js` file.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从上一个匹配游戏示例开始。我们已经设计了CSS，现在是时候在`html5games.matchgame.js`文件中添加游戏逻辑了。
- en: 'The game is to match pairs of playing cards. We have 12 cards now so we need
    six pairs of playing cards. The following global array declares six pairs of card
    patterns:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏是匹配一对扑克牌。现在我们有12张卡片，所以我们需要六对扑克牌。以下全局数组声明了六对卡片图案：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We aligned the cards in the jQuery `ready` function in the previous chapter.
    Now we need to prepare and initialize more codes in the `ready` function. Change
    the `ready` function to the following code. The changed code is highlighted:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一章中，我们在jQuery的`ready`函数中排列了卡片。现在我们需要在`ready`函数中准备和初始化更多的代码。将`ready`函数更改为以下代码。更改后的代码已经突出显示：
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Similar to playing a real deck, the first thing we want to do is shuffle the
    deck. Add the following `shuffle` function to the JavaScript file:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与玩真正的牌组类似，我们想要做的第一件事就是洗牌。将以下`shuffle`函数添加到JavaScript文件中：
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When we click on the card, we flip it and schedule the checking function. Append
    the following codes to the JavaScript file:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们点击卡片时，我们翻转它并安排检查函数。将以下代码附加到JavaScript文件中：
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When two cards are opened, the following function executes. It controls whether
    we remove the card or flip the card back:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当两张卡片被打开时，执行以下函数。它控制我们是移除卡片还是翻转卡片：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'It is time for the pattern checking function. The following function accesses
    the custom pattern attribute of the opened cards and compares whether they are
    in the same pattern:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是检查图案的函数的时间。以下函数访问已打开卡片的自定义图案属性，并比较它们是否是相同的图案：
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After the matched cards fade out, we execute the following function to remove
    the cards:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 匹配的卡片淡出后，我们执行以下函数来移除卡片：
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The game logic is ready now. Let's open the game HTML in a browser and play.
    Remember to check the console window in Developer Tools if there is any error.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏逻辑现在已经准备好了。让我们在浏览器中打开游戏HTML并进行游戏。如果有任何错误，请记得检查开发者工具中的控制台窗口。
- en: '![Time for action Adding game logic to the matching game](img/1260_03_12.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![执行为匹配游戏添加游戏逻辑的操作](img/1260_03_12.jpg)'
- en: What just happened?
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We coded the game logic of the CSS3 matching game. The logic adds the mouse
    click interaction to the playing cards and it controls the flow of the pattern
    checking.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了CSS3匹配游戏的游戏逻辑。该逻辑为玩牌添加了鼠标点击交互，并控制了图案检查的流程。
- en: Executing code after CSS transition ended
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在CSS过渡结束后执行代码
- en: 'We remove the pair cards after playing the fade out transition. We can schedule
    a function to be executed after the transition is ended by using the `TransitionEnd`
    event. The following code snippet from our code example adds a `card-removed`
    class to the pair card to start the transition. Then, it binds the `TransitionEnd`
    event to remove the card complete in DOM afterwards. Also, please note the `webkit`
    vendor prefix for the event because it is not yet finalized:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在播放淡出过渡后，我们移除成对的卡片。我们可以通过使用`TransitionEnd`事件来安排在过渡结束后执行的函数。以下是我们代码示例中的代码片段，它向成对的卡片添加了`card-removed`类来开始过渡。然后，它绑定了`TransitionEnd`事件以在DOM中完全移除卡片。此外，请注意`webkit`供应商前缀，因为它尚未最终确定：
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Delaying code execution on flipping cards
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟执行翻牌的代码
- en: 'The game logic flow is designed in the same way as playing a real deck. One
    big difference is that we used several `setTimeout` functions to delay the execution
    of the code. When the second card is clicked, we schedule the `checkPattern` function
    to be executed 0.7 seconds later in the following code example snippet:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏逻辑流程的设计方式与玩一副真正的牌相同。一个很大的区别是我们使用了几个`setTimeout`函数来延迟代码的执行。当点击第二张卡时，我们在以下代码示例片段中安排`checkPattern`函数在0.7秒后执行：
- en: '[PRE47]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The reason we delay the function call is to give time to the player to memorize
    the card pattern. That's why we delayed it by 0.7 seconds before checking the
    card patterns.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们延迟函数调用的原因是为了给玩家时间来记忆卡片模式。这就是为什么我们在检查卡片模式之前延迟了0.7秒。
- en: Randomizing an array in JavaScript
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在JavaScript中对数组进行随机化
- en: There is no built-in array randomize function in JavaScript. We have to write
    our own. Luckily, we can get help from the built-in array sorting function.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中没有内置的数组随机化函数。我们必须自己编写。幸运的是，我们可以从内置的数组排序函数中获得帮助。
- en: 'Here is the usage of the `sort` function:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`sort`函数的用法：
- en: '[PRE48]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `sort` function takes one optional argument.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort`函数接受一个可选参数。'
- en: '| Argument | Definition | Discussion |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 定义 | 讨论 |'
- en: '| --- | --- | --- |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `compare_function` | A function that defines the sort order of the array.
    The `compare_function` requires two arguments | The `sort` function compares two
    elements in the array by using the `compare` function. Therefore, the `compare`
    function requires two arguments.When the `compare` function returns any value
    that is bigger than 0, it puts the first argument at the lower index than the
    second argument.When the return value is smaller than 0, it puts the second argument
    at a lower index than the first argument. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `compare_function` | 定义数组的排序顺序的函数。`compare_function`需要两个参数 | `sort`函数通过使用`compare`函数比较数组中的两个元素。因此，`compare`函数需要两个参数。当`compare`函数返回大于0的任何值时，它会将第一个参数放在比第二个参数更低的索引处。当返回值小于0时，它会将第二个参数放在比第一个参数更低的索引处。
    |'
- en: 'The trick here is that we used the `compare` function that returns a random
    number between -0.5 and 0.5:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的诀窍是我们使用了`compare`函数，该函数返回-0.5到0.5之间的随机数：
- en: '[PRE49]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: By returning a random number in the `compare` function, the `sort` function
    sorts the same array in an inconsistent way. In another words, we are shuffling
    the array.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`compare`函数中返回一个随机数，`sort`函数以不一致的方式对相同的数组进行排序。换句话说，我们正在洗牌数组。
- en: Note
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following link from the Mozilla Developer Network provides a detailed explanation
    on using the `sort` function with example:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Mozilla开发者网络的以下链接提供了关于使用`sort`函数的详细解释和示例：
- en: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort](http://https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort)'
- en: Storing internal custom data with an HTML5 custom data attribute
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTML5自定义数据属性存储内部自定义数据
- en: We can store custom data inside the DOM element by using the **custom data attribute.**
    We can create a custom attribute name with `data-` prefix and assign a value to
    it.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用**自定义数据属性**将自定义数据存储在DOM元素内。我们可以使用`data-`前缀创建自定义属性名称并为其分配一个值。
- en: 'For instance, we can embed custom data to the list elements in the following
    code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在以下代码中将自定义数据嵌入到列表元素中：
- en: '[PRE50]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This is a new feature proposed in the HTML5 spec. According to the W3C, the
    custom data attributes are intended to store custom data private to the page or
    application, for which there are no more appropriate attributes or elements.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这是HTML5规范中提出的一个新功能。根据W3C的说法，自定义数据属性旨在存储页面或应用程序私有的自定义数据，对于这些数据没有更合适的属性或元素。
- en: W3C also stated that this custom data attribute is "intended for use by the
    site's own script and not a generic extension mechanism for publicly-usable metadata."
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: W3C还指出，这个自定义数据属性是“用于网站自己的脚本使用，而不是用于公开可用的元数据的通用扩展机制。”
- en: We are coding our matching game and embedding our own data to the card elements,
    therefore, custom data attribute fits our usage.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在编写我们的匹配游戏并嵌入我们自己的数据到卡片元素中，因此，自定义数据属性符合我们的使用方式。
- en: 'We used the custom attribute to store the card pattern inside each card so
    we can check whether the two flipped cards match in JavaScript by comparing the
    pattern value. Also, the pattern is used to style the playing cards into corresponding
    graphics as well:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用自定义属性来存储每张卡片内的卡片模式，因此我们可以通过比较模式值在JavaScript中检查两张翻转的卡片是否匹配。此外，该模式也用于将扑克牌样式化为相应的图形：
- en: '[PRE51]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Pop quiz
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出测验
- en: According to W3C's guideline about the custom data attribute, which of the following
    statements is true?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据W3C关于自定义数据属性的指南，以下哪种说法是正确的？
- en: a. We may create a `data-href` attribute to store the link of the `a` tag.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: a. 我们可以创建一个`data-href`属性来存储`a`标签的链接。
- en: b. We may want to access the custom data attribute in a third party game portal
    website.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: b. 我们可能希望在第三方游戏门户网站中访问自定义数据属性。
- en: c. We may want to store a `data-score` attribute in each player's DOM element
    to sort the ranking in our web page.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: c. 我们可能希望在每个玩家的DOM元素中存储一个`data-score`属性，以便在我们的网页中对排名进行排序。
- en: d. We may create a `ranking` attribute in each player's DOM element to store
    the ranking data.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: d. 我们可以在每个玩家的DOM元素中创建一个`ranking`属性来存储排名数据。
- en: Accessing custom data attribute with jQuery
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery访问自定义数据属性
- en: 'In the matching game example, we used the `attr` function from the jQuery library
    to access our custom data:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在匹配游戏示例中，我们使用了jQuery库中的`attr`函数来访问我们的自定义数据：
- en: '[PRE52]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `attr` function returns the value of the given attribute name. For example,
    we can get the links in all `a` tags by calling the following code:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`attr`函数返回给定属性名称的值。例如，我们可以通过调用以下代码获取所有`a`标签中的链接：'
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: For the HTML5 custom data attribute, jQuery provides us with another function
    to access the HTML5 custom data attribute. It is the `data` function.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于HTML5自定义数据属性，jQuery还为我们提供了另一个函数来访问HTML5自定义数据属性。这就是`data`函数。
- en: '`Data` function was designed to embed custom data into the jQuery object of
    the HTML elements. It was designed before the HTML5 custom data attribute.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`Data`函数旨在将自定义数据嵌入到HTML元素的jQuery对象中。它是在HTML5自定义数据属性之前设计的。'
- en: 'Here is the usage of the `data` function:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`data`函数的用法：
- en: '[PRE54]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `data` function accepts two types of functions:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`函数接受两种类型的函数：'
- en: '| Function type | Arguments definition | Discussion |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 函数类型 | 参数定义 | 讨论 |'
- en: '| --- | --- | --- |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `.data(key)` | `key` is a string naming the entry of the data | When there
    is only the key given, the `data` function reads the data associated with the
    jQuery object and returns the corresponding value.In the recent jQuery update,
    this function is extended to support the HTML5 custom data attribute. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `.data(key)` | `key`是命名数据的字符串 | 当只给出键时，`data`函数读取与jQuery对象关联的数据并返回相应的值。在最近的jQuery更新中，此函数被扩展以支持HTML5自定义数据属性。|'
- en: '| `.data(key, value)` | `key` is a a string naming the entry of the data`value`
    is the data to be associated to the jQuery object | When both key and value arguments
    are given, the `data` function sets a new data entry to the jQuery object.The
    value can be any JavaScript type, including array and object. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `.data(key, value)` | `key`是命名数据的字符串`value`是要与jQuery对象关联的数据 | 当给出键和值参数时，`data`函数将新的数据条目设置为jQuery对象。值可以是任何JavaScript类型，包括数组和对象。|'
- en: In order to support the HTML5 custom data attribute, jQuery extends the `data`
    function to let it access the custom data defined in the HTML code.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持HTML5自定义数据属性，jQuery扩展了`data`函数，使其能够访问HTML代码中定义的自定义数据。
- en: The following code explains how we use the `data` function.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码解释了我们如何使用`data`函数。
- en: 'Given the following HTML code:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 给定以下HTML代码：
- en: '[PRE55]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We can access the `data-custom-name` attribute by calling the `data` function
    in jQuery:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用jQuery中的`data`函数访问`data-custom-name`属性：
- en: '[PRE56]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: It will return "HTML5 Games".
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回"HTML5 Games"。
- en: Pop quiz
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验
- en: 'Given the following HTML code:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定以下HTML代码：
- en: '[PRE57]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: which two of these jQuery statements reads the custom score data and returns
    100?
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪两个jQuery语句读取自定义分数数据并返回100？
- en: a. $("#game").attr("data-score");
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: a. $("#game").attr("data-score");
- en: b. $("#game").attr("score");
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: b. $("#game").attr("score");
- en: c. $("#game").data("data-score");
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: c. $("#game").data("data-score");
- en: d. $("#game").data("score");
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: d. $("#game").data("score");
- en: Have a go hero
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试吧
- en: We have created the CSS3 matching game. What is missing here? The game logic
    does not check whether the game is over. Try adding a **You won** text when the
    game is over. You can also animate the text by using the techniques we discussed
    in this chapter.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了CSS3匹配游戏。这里缺少什么？游戏逻辑没有检查游戏是否结束。尝试在游戏结束时添加**你赢了**文本。您还可以使用本章讨论的技术来为文本添加动画。
- en: Making other playing card games
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作其他纸牌游戏
- en: This CSS3 playing card approach is suitable for creating card games. There are
    two sides in a card that fit the flipping. The transition is suitable for moving
    the cards. With both moving and flipping, we can just define the playing rule
    and make the most of the card games.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这种CSS3纸牌方法适用于创建纸牌游戏。卡片上有两面适合翻转。过渡适合移动卡片。通过移动和翻转，我们可以定义玩法规则并充分利用纸牌游戏。
- en: Have a go hero
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试吧
- en: Can you use the playing card graphics and flipping techniques to create another
    game? How about poker?
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 您能否使用纸牌图形和翻转技术创建另一个游戏？比如扑克？
- en: Embedding web fonts into our game
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将网络字体嵌入到我们的游戏中
- en: Over the years, we have been using limited fonts to design web pages. We could
    not use whatever fonts we wanted because the browser loaded the font from the
    visitor's local machine. We cannot control and ensure that visitors have our desired
    fonts.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我们一直在使用有限的字体来设计网页。我们无法使用任何我们想要的字体，因为浏览器从访问者的本地机器加载字体。我们无法控制并确保访问者拥有我们想要的字体。
- en: Although we can embed **web fonts** back to Internet Explorer 5 with limited
    type format, we have to wait until browser vendors support embedding the most
    common TrueType font format.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以将**网络字体**嵌入到Internet Explorer 5中，但格式受限，我们必须等到浏览器供应商支持嵌入最常见的TrueType字体格式。
- en: Imagine that we can control the mood of the game by embedding different styles
    of web fonts. We can design the games with our desired fonts and have more control
    over the appeal of game. Let's try embedding a web font to our matching memory
    game.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们可以通过嵌入不同样式的网络字体来控制游戏的情绪。我们可以使用我们想要的字体设计游戏，并更好地控制游戏的吸引力。让我们尝试将网络字体嵌入到我们的匹配记忆游戏中。
- en: Time for action Embedding a font from Google Font Directory
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Time for action Embedding a font from Google Font Directory
- en: '**Google Font Directory** is a web font service that lists free-to-use web
    fonts. We will embed a web font chosen from the Google Font Directory:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google字体目录**是一个列出可免费使用的网络字体的网络字体服务。我们将嵌入从Google字体目录中选择的网络字体：'
- en: 'Go to the Google Font Directory site: [http://code.google.com/webfonts](http://code.google.com/webfonts).'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Google字体目录网站：[http://code.google.com/webfonts](http://code.google.com/webfonts)。
- en: In the font directory, there is a list of web fonts that is under an open source
    license and can be used freely.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在字体目录中，有一个列出了开源许可的可免费使用的网络字体列表。
- en: Choose one of them and click on the font name to proceed to the next step. In
    this example, I used **Droid Serif**.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择其中一个并单击字体名称以继续下一步。在此示例中，我使用了**Droid Serif**。
- en: After clicking on a font, the font directory displays detailed information about
    that font. There are several actions we can carry out there, such as preview the
    fonts, choose from variants, and most importantly get the font embedding code.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击字体后，字体目录会显示有关该字体的详细信息。我们可以在那里执行几项操作，例如预览字体、从变体中选择，最重要的是获取字体嵌入代码。
- en: Click on the **Get the code** tab and you will see the following screenshot.
    It shows a guide on how to embed this font to our web page:![Time for action Embedding
    a font from Google Font Directory](img/1260_03_13.jpg)
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**获取代码**选项卡，您将看到以下屏幕截图。它显示了如何将此字体嵌入到我们的网页中的指南：![Time for action Embedding
    a font from Google Font Directory](img/1260_03_13.jpg)
- en: 'Copy the `link` tag provided by Google and paste it into the HTML code. It
    should be placed before any other style definition:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制谷歌提供的`link`标签，并将其粘贴到HTML代码中。它应该放在任何其他样式定义之前：
- en: '[PRE58]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now we can use the font to style our text. Set the body''s font family property
    to the following code:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用字体来为文本设置样式。将body的字体系列属性设置为以下代码：
- en: '[PRE59]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Save all the files and open the `index.html` file. The browser will download
    the font from the Google server and embed it into the web page. Keep an eye on
    the fonts, they should be loaded and rendered as our selected Google font.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件并打开`index.html`文件。浏览器将从谷歌服务器下载字体并嵌入到网页中。注意字体，它们应该被加载并呈现为我们选择的谷歌字体。
- en: '![Time for action Embedding a font from Google Font Directory](img/1260_03_14.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![采取行动从谷歌字体目录嵌入字体](img/1260_03_14.jpg)'
- en: What just happened?
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have just styled our game with a non-common web font. The font is hosted
    and delivered through the Google Font Directory.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚用一种非常见的网络字体为我们的游戏添加了样式。该字体是通过谷歌字体目录托管和交付的。
- en: Note
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Besides using the font directory, we can embed our font file by using the @font
    face. The following link provides a bulletproof approach to embed a font ourselves:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用字体目录，我们还可以使用@font face来嵌入我们的字体文件。以下链接提供了一种可靠的方法来嵌入字体：
- en: '[http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax](http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax](http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax)'
- en: Tip
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Check the font license before embedding**'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**在嵌入之前检查字体许可证**'
- en: Normally the font licenses do not cover the usage on web pages. Be sure to check
    the license before embedding the font. All the fonts listed in the Google Font
    Directory are licensed under open source license and can be used on any website.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，字体许可证不包括在网页上的使用。在嵌入字体之前，请务必检查许可证。谷歌字体目录中列出的所有字体都是根据开源许可证授权的，可以在任何网站上使用。
- en: Choosing different font delivery services
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择不同的字体交付服务
- en: Google Font Directory is just one of those font delivery services. Typekit ([http://typekit.com](http://typekit.com))
    and Fontdeck ([http://fontdeck.com](http://fontdeck.com)) are two other font services
    providing hundreds of high quality fonts via yearly subscription plans.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Google字体目录只是其中一个字体交付服务。Typekit ([http://typekit.com](http://typekit.com)) 和Fontdeck
    ([http://fontdeck.com](http://fontdeck.com)) 是另外两个提供数百种高质量字体的字体服务，通过年度订阅计划提供。
- en: '![Choosing different font delivery services](img/1260_03_15.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: 选择不同的字体交付服务
- en: Summary
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned about using different CSS3 new properties to create
    games.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用不同的CSS3新属性来创建游戏。
- en: 'Specifically, we covered:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们涵盖了：
- en: Transforming and animating the game object by transition module
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过过渡模块转换和动画游戏对象
- en: Flipping a card back and forth with perspective depth illusion
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用透视深度错觉来翻转卡片
- en: Creating a matching memory game based on CSS3 styles and animation and game
    logic by jQuery
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于CSS3样式和jQuery的动画和游戏逻辑创建匹配的记忆游戏
- en: Choosing and embedding web fonts from an online font delivery service
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从在线字体交付服务中选择和嵌入网络字体
- en: Now that we've learned about creating DOM-based HTML5 games with the help of
    CSS3 features, we are going to explore another approach of creating HTML5 games
    in the next chapter, which is using the new Canvas tag and the drawing API.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何使用CSS3功能创建基于DOM的HTML5游戏，我们将在下一章中探索另一种创建HTML5游戏的方法，即使用新的Canvas标签和绘图API。
