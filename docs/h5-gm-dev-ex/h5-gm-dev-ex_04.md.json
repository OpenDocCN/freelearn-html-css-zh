["```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    <meta charset=\"utf-8\">\n    <title>Drawing Circles in Canvas</title>\n    <link rel=\"stylesheet\" href=\"css/untangle.css\" />\n    </head>\n    <body>\n    <header>\n    <h1>Drawing in Canvas</h1>\n    </header>\n    <canvas id=\"game\" width=\"768\" height=\"400\">\n    Sorry, your web browser does not support Canvas content.\n    </canvas>\n    <script src=\"img/jquery-1.6.min.js\"></script>\n    <script src=\"img/html5games.untangle.js\"></script>\n    </body>\n    </html>\n\n    ```", "```js\n    canvas {\n    background: #333;\n    }\n\n    ```", "```js\n    $(function(){\n    var canvas = document.getElementById(\"game\");\n    var ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"rgba(200, 200, 100, .6)\";\n    ctx.beginPath();\n    ctx.arc(100, 100, 50 , 0, Math.PI*2, true);\n    ctx.closePath();\n    ctx.fill();\n    });\n\n    ```", "```js\n<canvas id=\"game\" width=\"768\" height=\"400\">\nSorry, your web browser does not support Canvas content.\n</canvas>\n\n```", "```js\nradians = \u03c0/180 x degrees\n\n```", "```js\n    $(function(){\n    var canvas = document.getElementById('game');\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = \"rgba(200, 200, 100, .6)\";\n    // draw bottom half circle\n    ctx.beginPath();\n    ctx.arc(100, 110, 50 , 0, Math.PI);\n    ctx.closePath();\n    ctx.fill();\n    // draw top half circle\n    ctx.beginPath();\n    ctx.arc(100, 90, 50 , 0, Math.PI, true);\n    ctx.closePath();\n    ctx.fill();\n    // draw left half circle\n    ctx.beginPath();\n    ctx.arc(230, 100, 50 , Math.PI/2, Math.PI*3/2);\n    ctx.closePath();\n    ctx.fill();\n    // draw right half circle\n    ctx.beginPath();\n    ctx.arc(250, 100, 50 , Math.PI*3/2, Math.PI/2);\n    ctx.closePath();\n    ctx.fill();\n    // draw a shape that is almost a circle\n    ctx.beginPath();\n    ctx.arc(180, 240, 50 , Math.PI*7/6, Math.PI*2/3);\n    ctx.closePath();\n    ctx.fill();\n    // draw a small arc\n    ctx.beginPath();\n    ctx.arc(150, 250, 50 , Math.PI*7/6, Math.PI*2/3, true);\n    ctx.closePath();\n    ctx.fill();\n    });\n\n    ```", "```js\nctx.fill();\n\n```", "```js\nvar canvas = document.getElementById('game');\nvar ctx = canvas.getContext('2d');\nctx.fillStyle = \"red\";\nctx.arc(100, 100, 50 , 0, Math.PI*2, true);\nctx.fill();\nctx.arc(210, 100, 50, 0, Math.PI*2, true);\nctx.fillStyle = \"green\";\nctx.fill();\n\n```", "```js\n    var untangleGame = {};\n    function drawCircle(ctx, x, y, radius) {\n    ctx.fillStyle = \"rgba(200, 200, 100, .9)\";\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI*2, true);\n    ctx.closePath();\n    ctx.fill();\n    }\n    $(function(){\n    var canvas = document.getElementById('game');\n    var ctx = canvas.getContext('2d');\n    var circleRadius = 10;\n    var width = canvas.width;\n    var height = canvas.height;\n    // random 5 circles\n    var circlesCount = 5;\n    for (var i=0;i<circlesCount;i++) {\n    var x = Math.random()*width;\n    var y = Math.random()*height;\n    drawCircle(ctx, x, y, circleRadius);\n    }\n    });\n\n    ```", "```js\n    function Circle(x,y,radius){\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    }\n\n    ```", "```js\n    var untangleGame = {\n    circles: []\n    };\n\n    ```", "```js\n    $(function(){\n    var canvas = document.getElementById('game');\n    var ctx = canvas.getContext('2d');\n    var circleRadius = 10;\n    var width = canvas.width;\n    var height = canvas.height;\n    // random 5 circles\n    var circlesCount = 5;\n    for (var i=0;i<circlesCount;i++) {\n    var x = Math.random()*width;\n    var y = Math.random()*height;\n    drawCircle(ctx, x, y, circleRadius); untangleGame.circles.push(new Circle(x,y,circleRadius));\n    }\n    });\n\n    ```", "```js\nvar circle1 = new Circle(100, 200, 10);\n\n```", "```js\n    function Circle(x,y,radius){\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    }\n    function Line(startPoint,endpoint, thickness) {\n    this.startPoint = startPoint;\n    this.endPoint = endPoint;\n    this.thickness = thickness;\n    }\n    var untangleGame = {\n    circles: [],\n    thinLineThickness: 1,\n    lines: []\n    };\n    function drawLine(ctx, x1, y1, x2, y2, thickness) {\n    ctx.beginPath();\n    ctx.moveTo(x1,y1);\n    ctx.lineTo(x2,y2);\n    ctx.lineWidth = thickness;\n    ctx.strokeStyle = \"#cfc\";\n    ctx.stroke();\n    }\n    function drawCircle(ctx, x, y, radius) {\n    ctx.fillStyle = \"rgba(200, 200, 100, .9)\";\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI*2, true);\n    ctx.closePath();\n    ctx.fill();\n    }\n    $(function(){\n    var canvas = document.getElementById('game');\n    var ctx = canvas.getContext('2d');\n    var circleRadius = 10;\n    var width = canvas.width;\n    var height = canvas.height;\n    // random 5 circles\n    var circlesCount = 5;\n    for (var i=0;i<circlesCount;i++) {\n    var x = Math.random()*width;\n    var y = Math.random()*height;\n    drawCircle(ctx, x, y, circleRadius);\n    untangleGame.circles.push(new Circle(x,y,radius));\n    }\n    for (var i=0;i< untangleGame.circles.length;i++) {\n    var startPoint = untangleGame.circles[i];\n    for(var j=0;j<i;j++) {\n    var endPoint = untangleGame.circles[j];\n    drawLine(ctx, startPoint.x, startPoint.y, endPoint.x, endPoint.y, 1);\n    untangleGame.lines.push(new Line(startPoint, endpoint, untangleGame.thinLineThickness));\n    }\n    lines, in canvaslines, in canvasstraight lines, drawing}\n    });\n\n    ```", "```js\n    function clear(ctx) {\n    ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);\n    }\n\n    ```", "```js\n    function connectCircles()\n    {\n    // connect the circles to each other with lines\n    untangleGame.lines.length = 0;\n    for (var i=0;i< untangleGame.circles.length;i++) {\n    var startPoint = untangleGame.circles[i];\n    for(var j=0;j<i;j++) {\n    var endPoint = untangleGame.circles[j];\n    untangleGame.lines.push(new Line(startPoint, endPoint, untangleGame.thinLineThickness));\n    }\n    }\n    }\n\n    ```", "```js\n    $(function(){\n    // get the reference of canvas element.\n    var canvas = document.getElementById(\"game\");\n    var ctx = canvas.getContext(\"2d\");\n    var circleRadius = 10;\n    var width = canvas.width;\n    var height = canvas.height;\n    // random 5 circles\n    var circlesCount = 5;\n    for (var i=0;i<circlesCount;i++) {\n    var x = Math.random()*width;\n    var y = Math.random()*height;\n    drawCircle(ctx, x, y, circleRadius);\n    untangleGame.circles.push(new Circle(x,y,circleRadius));\n    }\n    connectCircles();\n    // Add Mouse Event Listener to canvas\n    // we find if the mouse down position is on any circle\n    // and set that circle as target dragging circle.\n    $(\"#game\").mousedown(function(e) {\n    var canvasPosition = $(this).offset();\n    var mouseX = e.layerX || 0;\n    var mouseY = e.layerY || 0;\n    for(var i=0;i<untangleGame.circles.length;i++)\n    {\n    var circleX = untangleGame.circles[i].x;\n    var circleY = untangleGame.circles[i].y;\n    var radius = untangleGame.circles[i].radius;\n    if (Math.pow(mouseX-circleX,2) + Math.pow(mouseY-circleY,2) < Math.pow(radius,2))\n    if (Math.pow(mouseX-circleX,2) + Math.pow(mouseY-circleY,2) < Math.pow(radius,2))\n    {\n    canvascanvascircles, dragginguntangleGame.targetCircle = i;\n    break;\n    }\n    }\n    });\n    // we move the target dragging circle when the mouse is moving\n    $(\"#game\").mousemove(function(e) {\n    if (untangleGame.targetCircle != undefined)\n    {\n    var canvasPosition = $(this).offset();\n    var mouseX = e.layerX || 0;\n    var mouseY = e.layerY || 0;\n    var radius = untangleGame.circles[untangleGame.targetCircle]. radius;\n    untangleGame.circles[untangleGame.targetCircle] = new Circle(mouseX, mouseY,radius);\n    }\n    connectCircles();\n    });\n    // We clear the dragging circle data when mouse is up\n    $(\"#game\").mouseup(function(e) {\n    untangleGame.targetCircle = undefined;\n    });\n    // setup an interval to loop the game loop\n    setInterval(gameloop, 30);\n    });\n\n    ```", "```js\n    function gameloop() {\n    // get the reference of the canvas element and the drawing context.\n    var canvas = document.getElementById('game');\n    var ctx = canvas.getContext('2d');\n    // clear the canvas before re-drawing.\n    clear(ctx);\n    // draw all remembered line\n    for(var i=0;i<untangleGame.lines.length;i++) {\n    var line = untangleGame.lines[i];\n    var startPoint = line.startPoint;\n    var endPoint = line.endPoint;\n    var thickness = line.thickness;\n    drawLine(ctx, startPoint.x, startPoint.y, endPoint.x, endPoint.y, thickness);\n    }\n    // draw all remembered circles\n    for(var i=0;i<untangleGame.circles.length;i++) {\n    var circle = untangleGame.circles[i];\n    drawCircle(ctx, point.x, point.y, circle.radius);\n    }\n    }\n\n    ```", "```js\nvar mouseX = e.layerX || 0;\nvar mouseY = e.layerY || 0;\n\n```", "```js\nDistance = (x2-x1)2 + (y2-y1)2\n\n```", "```js\nif (Math.pow(mouseX-circleX,2) + Math.pow(mouseY-circleY,2) < Math.pow(untangleGame.circleRadius,2))\n{\nuntangleGame.targetCircle = i;\nbreak;\n}\n\n```", "```js\nctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n```", "```js\n    ctx.clearRect(0, 0, ctx.canvas.width, 0);\n\n    ```", "```js\n    var untangleGame = {\n    circles: [],\n    thinLineThickness: 1,\n    boldLineThickness: 5,\n    lines: []\n    };\n\n    ```", "```js\n    function isIntersect(line1, line2)\n    {\n    // convert line1 to general form of line: Ax+By = C\n    var a1 = line1.endPoint.y - line1.point1.y;\n    var b1 = line1.point1.x - line1.endPoint.x;\n    var c1 = a1 * line1.point1.x + b1 * line1.point1.y;\n    // convert line2 to general form of line: Ax+By = C\n    var a2 = line2.endPoint.y - line2.point1.y;\n    var b2 = line2.point1.x - line2.endPoint.x;\n    var c2 = a2 * line2.startPoint.x + b2 * line2.startPoint.y;\n    // calculate the intersection point\n    var d = a1*b2 - a2*b1;\n    // parallel when d is 0\n    if (d == 0) {\n    return false;\n    }else {\n    line intersectionline intersectiondetermining, in canvasvar x = (b2*c1 - b1*c2) / d;\n    var y = (a1*c2 - a2*c1) / d;\n    // check if the interception point is on both line segments\n    if ((isInBetween(line1.startPoint.x, x, line1.endPoint.x) || isInBetween(line1.startPoint.y, y, line1.endPoint.y)) &&\n    (isInBetween(line2.startPoint.x, x, line2.endPoint.x) || isInBetween(line2.startPoint.y, y, line2.endPoint.y)))\n    {\n    return true;\n    }\n    }\n    return false;\n    }\n    // return true if b is between a and c,\n    // we exclude the result when a==b or b==c\n    function isInBetween(a, b, c) {\n    // return false if b is almost equal to a or c.\n    // this is to eliminate some floating point when\n    // two value is equal to each other but different with 0.00000...0001\n    if (Math.abs(a-b) < 0.000001 || Math.abs(b-c) < 0.000001) {\n    return false;\n    }\n    // true when b is in between a and c\n    return (a < b && b < c) || (c < b && b < a);\n    }\n\n    ```", "```js\n    function updateLineIntersection()\n    {\n    // checking lines intersection and bold those lines.\n    for (var i=0;i<untangleGame.lines.length;i++) {\n    for(var j=0;j<i;j++) {\n    var line1 = untangleGame.lines[i];\n    var line2 = untangleGame.lines[j];\n    // we check if two lines are intersected,\n    // and bold the line if they are.\n    if (isIntersect(line1, line2)) {\n    line1.thickness = untangleGame.boldLineThickness;\n    line2.thickness = untangleGame.boldLineThickness;\n    }\n    }\n    }\n    }\n\n    ```", "```js\nA = y2-y1\nB = x1-x2\nC = A * x1 + B * y2\n\n```", "```js\nLine 1: A1X+B1Y = C1\nLine 2: A2X+B2Y = C2\n\n```", "```js\nX = (B2 * C1 B1 * C2) / (A1 * B2 A2 * B1)\nY = (A1 * C2 A2 * C1) / (A1 * B2 A2 * B1)\n\n```", "```js\n    <header>\n    <h1>Untangle Puzzle Game in Canvas</h1>\n    </header>\n\n    ```", "```js\n    var untangleGame = {\n    circles: [],\n    thinLineThickness: 1,\n    boldLineThickness: 5,\n    lines: [],\n    currentLevel: 0\n    };\n\n    ```", "```js\n    untangleGame.levels =\n    [\n    {\n    \"level\" : 0,\n    \"circles\" : [{\"x\" : 400, \"y\" : 156},\n    {\"x\" : 381, \"y\" : 241},\n    {\"x\" : 84, \"y\" : 233},\n    {\"x\" : 88, \"y\" : 73}],\n    \"relationship\" : {\n    \"0\" : {\"connectedPoints\" : [1,2]},\n    \"1\" : {\"connectedPoints\" : [0,3]},\n    \"2\" : {\"connectedPoints\" : [0,3]},\n    \"3\" : {\"connectedPoints\" : [1,2]}\n    }\n    },\n    {\n    \"level\" : 1,\n    \"circles\" : [{\"x\" : 401, \"y\" : 73},\n    {\"x\" : 400, \"y\" : 240},\n    {\"x\" : 88, \"y\" : 241},\n    {\"x\" : 84, \"y\" : 72}],\n    \"relationship\" : {\n    \"0\" : {\"connectedPoints\" : [1,2,3]},\n    \"1\" : {\"connectedPoints\" : [0,2,3]},\n    \"2\" : {\"connectedPoints\" : [0,1,3]},\n    \"3\" : {\"connectedPoints\" : [0,1,2]}\n    }\n    },\n    {\n    \"level\" : 2,\n    \"circles\" : [{\"x\" : 92, \"y\" : 85},\n    {\"x\" : 253, \"y\" : 13},\n    {\"x\" : 393, \"y\" : 86},\n    {\"x\" : 390, \"y\" : 214},\n    {\"x\" : 248, \"y\" : 275},\n    {\"x\" : 95, \"y\" : 216}],\n    \"relationship\" : {\n    \"0\" : {\"connectedPoints\" : [2,3,4]},\n    \"1\" : {\"connectedPoints\" : [3,5]},\n    \"2\" : {\"connectedPoints\" : [0,4,5]},\n    \"3\" : {\"connectedPoints\" : [0,1,5]},\n    \"4\" : {\"connectedPoints\" : [0,2]},\n    \"5\" : {\"connectedPoints\" : [1,2,3]}\n    }\n    }\n    ];\n\n    ```", "```js\n    function setupCurrentLevel() {\n    untangleGame.circles = [];\n    var level = untangleGame.levels[untangleGame.currentLevel];\n    for (var i=0; i<level.circles.length; i++) {\n    untangleGame.circles.push(new Point(level.circles[i].x, level. circles[i].y, 10));\n    }\n    // setup line data after setup the circles.\n    connectCircles();\n    updateLineIntersection();\n    }\n\n    ```", "```js\n    function checkLevelCompleteness() {\n    if ($(\"#progress\").html() == \"100\") {\n    if (untangleGame.currentLevel+1 < untangleGame.levels.length)\n    untangleGame.currentLevel++;\n    setupCurrentLevel();\n    }\n    }\n\n    ```", "```js\n    $(\"#game\").mouseup(function(e) {\n    untangleGame.targetCircle = undefined;\n    // on every mouse up, check if the untangle puzzle is solved.\n    checkLevelCompleteness();\n    });\n\n    ```", "```js\n    function connectCircles()\n    {\n    // setup all lines based on the circles relationship\n    var level = untangleGame.levels[untangleGame.currentLevel];\n    untangleGame.lines.length = 0;\n    for (var i in level.relationship) {\n    var connectedPoints = level.relationship[i].connectedPoints;\n    var startPoint = untangleGame.circles[i];\n    for (var j in connectedPoints) {\n    var endPoint = untangleGame.circles[connectedPoints[j]];\n    untangleGame.lines.push(new Line(startPoint, endPoint));\n    }\n    }\n    }\n\n    ```", "```js\n    function updateLevelProgress()\n    {\n    // check the untangle progress of the level\n    var progress = 0;\n    for (var i=0;i<untangleGame.lines.length;i++) {\n    if (untangleGame.lines[i].thickness == untangleGame. thinLineThickness) {\n    progress++;\n    }\n    }\n    var progressPercentage = Math.floor(progress/untangleGame.lines. length*100);\n    $(\"#progress\").html(progressPercentage);\n    // display the current level\n    $(\"#level\").html(untangleGame.currentLevel);\n    }\n\n    ```", "```js\n    $(\"#game\").mousemove(function(e) {\n    \u2026\n    connectCircles();\n    updateLineIntersection();\n    updateLevelProgress();\n    \u2026\n    });\n\n    ```", "```js\nvar progress = 0;\nfor (var i in untangleGame.lines) {\nif (untangleGame.lines[i].thickness == untangleGame. thinLineThickness) {\nprogress++;\n}\n}\nvar progressPercentage = Math.floor(progress/untangleGame.lines.length * 100);\n\n```", "```js\nif ($(\"#progress\").html() == \"100\") {\n// level complete, level up code\n}\n\n```", "```js\n<p>Puzzle <span id=\"level\">0</span>, Completeness: <span id=\"progress\">0</span>%</p>\n\n```", "```js\n$(\"#progress\").html(progressPercentage);\n\n```"]