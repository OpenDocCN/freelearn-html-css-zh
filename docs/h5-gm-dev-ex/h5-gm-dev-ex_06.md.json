["```js\n    <div id=\"game\">\n    <section id=\"menu-scene\" class=\"scene\">\n    <a href=\"#game\"><span>Play</span></a>\n    </section>\n    </div>\n    <audio id=\"buttonover\">\n    <source src=\"img/button_over.wav\" />\n    <source src=\"img/button_over.ogg\" />\n    </audio>\n    <audio id=\"buttonactive\">\n    <source src=\"img/button_active.mp3\" />\n    <source src=\"img/button_active.ogg\" />\n    </audio>\n\n    ```", "```js\n    //a global object variable to store all game scope variable.\n    var audiogame = {};\n    // init function when the DOM is ready\n    $(function(){\n    // get the references of the audio element.\n    audiogame.buttonOverSound = document.getElementById(\"buttonover\");\n    audiogame.buttonOverSound.volume = 0.3;\n    audiogame.buttonActiveSound = document.getElementById(\"buttonactive\");\n    audiogame.buttonActiveSound.volume = 0.3;\n    // listen the button event that links to #game\n    $(\"a[href='#game']\")\n    .hover(function(){\n    audiogame.buttonOverSound.currentTime = 0;\n    audiogame.buttonOverSound.play();\n    },function(){\n    audiogame.buttonOverSound.pause();\n    sound effect, adding to Play buttonsound effect, adding to Play buttonsteps});\n    .click(function(){\n    audiogame.buttonActiveSound.currentTime = 0;\n    audiogame.buttonActiveSound.play();\n    return false;\n    });\n    });\n\n    ```", "```js\n<audio>\n<source src=\"img/button_active.mp3\" />\n<source src=\"img/button_active.ogg\" />\n<!-- Any code for browser that does not support audio tag -->\n</audio>\n\n```", "```js\n<audio id=\"buttonactive\">\n<source src=\"img/button_active.mp3\" />\n<source src=\"img/button_active.ogg\" />\n</audio>\n<script>\ndocument.getElementById(\"buttonactive\").play();\n</script>\n\n```", "```js\n<script>\ndocument.getElementById(\"buttonactive\").currentTime = 3.5;\ndocument.getElementById(\"buttonactive\").play();\n</script>\n\n```", "```js\n<script>\ndocument.getElementById(\"buttonactive\").pause();\n</script>\n\n```", "```js\n<script>\ndocument.getElementById(\"buttonactive\").volume = 0.3;\n</script>\n\n```", "```js\n.hover(function1, function2);\n\n```", "```js\n$(\"a[href='#game']\").hover(function(){\naudiogame.buttonOverSound.currentTime = 0;\naudiogame.buttonOverSound.play();\n},function(){\naudiogame.buttonOverSound.pause();\n});\n\n```", "```js\n    <div id=\"game\">\n    <section id=\"menu-scene\" class=\"scene\">\n    <a href=\"#game\"><span>Play</span></a>\n    </section>\n    <section id=\"game-scene\" class=\"scene\">\n    <canvas id=\"game-background-canvas\" width=\"768\" height=\"440\">\n    Sorry, your web browser does not support canvas content.\n    </canvas>\n    <canvas id=\"game-canvas\" width=\"768\" height=\"440\"></canvas>\n    </section>\n    </div>\n\n    ```", "```js\n    #game-scene {\n    background: #efefef url(../images/game_bg.jpg);\n    }\n    #game-canvas, #game-background-canvas {\n    position: absolute;\n    }\n\n    ```", "```js\n    drawBackground();\n\n    ```", "```js\n    function drawBackground()\n    {\n    // get the reference of the canvas and the context.\n    var game = document.getElementById(\"game-background-canvas\");\n    var ctx = game.getContext('2d');\n    // set the line style of the three vertical lines.\n    ctx.lineWidth = 10;\n    ctx.strokeStyle = \"#000\";\n    var center = game.width/2;\n    // draw the three lines\n    // the left line is placed 100 pixels on the left of center.\n    ctx.beginPath();\n    ctx.moveTo(center-100, 50);\n    ctx.lineTo(center-100, ctx.canvas.height - 50);\n    ctx.stroke();\n    // the middle line is placed at the center\n    ctx.beginPath();\n    ctx.moveTo(center, 50);\n    ctx.lineTo(center, ctx.canvas.height - 50);\n    ctx.stroke();\n    // the right line is placed 100 pixels on the right of center.\n    ctx.beginPath();\n    ctx.moveTo(center+100, 50);\n    ctx.lineTo(center+100, ctx.canvas.height - 50);\n    ctx.stroke();\n    mini piano gamemini piano gamebasic background, creating// draw the horizontal line\n    ctx.beginPath();\n    ctx.moveTo(center-150, ctx.canvas.height - 80);\n    ctx.lineTo(center+150, ctx.canvas.height - 80);\n    // reset the line style to 1px width and grey before actually drawing the horizontal line.\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = \"rgba(50,50,50,.8)\";\n    ctx.stroke();\n    }\n\n    ```", "```js\n<div id=\"game\">\n<section id=\"menu-scene\" class=\"scene\"></section>\n<section id=\"game-scene\" class=\"scene\"></section>\n<section id=\"gameover-scene\" class=\"scene\"></section>\n<section id=\"credit-scene\" class=\"scene\"></section>\n<section id=\"leaderboard-scene\" class=\"scene\"></section>\n</div>\n\n```", "```js\n    <audio id=\"melody\">\n    <source src=\"img/minuet_in_g_melody.mp3\" />\n    <source src=\"img/minuet_in_g_melody.ogg\" />\n    </audio>\n    <audio id=\"base\">\n    <source src=\"img/minuet_in_g.mp3\" />\n    <source src=\"img/minuet_in_g.ogg\" />\n    </audio>\n\n    ```", "```js\n    function MusicNote(time,line){\n    this.time = time;\n    this.line = line;\n    }\n    function Dot(distance, line) {\n    this.distance = distance;\n    this.line = line;\n    this.missed = false;\n    }\n\n    ```", "```js\n    // an array to store all music notes data.\n    audiogame.musicNotes = [];\n    audiogame.leveldata = \"1.592,3;1.984,2;2.466,1;2.949,2;4.022,3;\";\n    // the visual dots drawn on the canvas.\n    audiogame.dots = [];\n    // for storing the starting time\n    audiogame.startingTime = 0;\n    // reference of the dot image\n    audiogame.dotImage = new Image();\n\n    ```", "```js\n    function setupLevelData()\n    {\n    var notes = audiogame.leveldata.split(\";\");\n    for(var i in notes)\n    {\n    var note = notes[i].split(\",\");\n    var time = parseFloat(note[0]);\n    var line = parseInt(note[1]);\n    var musicNote = new MusicNote(time,line);\n    audiogame.musicNotes.push(musicNote);\n    }\n    }\n\n    ```", "```js\n    audiogame.melody = document.getElementById(\"melody\");\n    audiogame.base = document.getElementById(\"base\");\n    // load the dot image\n    audiogame.dotImage.src = \"images/dot.png\";\n\n    ```", "```js\n    setupLevelData();\n    setInterval(gameloop, 30);\n    startGame();\n\n    ```", "```js\n    function startGame()\n    {\n    // starting game\n    var date = new Date();\n    audiogame.startingTime = date.getTime();\n    setTimeout(playMusic, 3550);\n    }\n    function playMusic()\n    {\n    // play both the melody and base\n    audiogame.melody.play();\n    audiogame.base.play();\n    }\n\n    ```", "```js\n    // logic that run every 30ms.\n    music play back visualizationmusic play back visualizationcreating, stepsfunction gameloop()\n    {\n    var game = document.getElementById(\"game-canvas\");\n    var ctx = game.getContext('2d');\n    // show new dots\n    // if the game is started\n    if (audiogame.startingTime != 0)\n    {\n    for(var i in audiogame.musicNotes)\n    {\n    // get the elapsed time from beginning of the melody\n    var date = new Date();\n    var elapsedTime = (date.getTime() - audiogame.startingTime)/1000;\n    var note = audiogame.musicNotes[i];\n    // check if the dot appear time is as same as the elapsed time\n    var timeDiff = note.time - elapsedTime;\n    if (timeDiff >= 0 && timeDiff <= .03)\n    {\n    // create the dot when the appear time is within one frame of the elapsed time\n    var dot = new Dot(ctx.canvas.height-150, note.line);\n    audiogame.dots.push(dot);\n    }\n    }\n    }\n    // move the dots\n    for(var i in audiogame.dots)\n    {\n    audiogame.dots[i].distance -= 2.5;\n    }\n    // only clear the dirty area, that is the middle area\n    ctx.clearRect(ctx.canvas.width/2-200, 0, 400, ctx.canvas.height);\n    // draw the music note dots\n    for(var i in audiogame.dots)\n    {\n    // prepare the radial gradients fill style\n    var circle_gradient = ctx.createRadialGradient (-3,-3,1,0,0,20);\n    circle_gradient.addColorStop(0, \"#fff\");\n    circle_gradient.addColorStop(1, \"#cc0\");\n    ctx.fillStyle = circle_gradient;\n    // prepare the dot position to draw\n    ctx.save();\n    var center = game.width/2;\n    var dot = audiogame.dots[i];\n    var x = center-100\n    if (dot.line == 2)\n    {\n    x = center;\n    }\n    else if (dot.line == 3)\n    {\n    x = center+100;\n    }\n    // draw the dot at position according to the line and distance\n    ctx.translate(x, ctx.canvas.height-80- audiogame.dots[i].distance);\n    ctx.drawImage(audiogame.dotImage, -audiogame.dotImage.width/2, -audiogame.dotImage.height/2);\n    ctx.restore();\n    music play back visualizationmusic play back visualizationcreating, steps}\n    }\n\n    ```", "```js\nmusic_current_time, line; music_current_time, line; \u2026\n\n```", "```js\naudiogame.musicNotes = [];\naudiogame.leveldata = \"1.592,3;1.984,2;2.466,1;2.949,2;4.022,3;\";\nfunction setupLevelData()\n{\nvar notes = audiogame.leveldata.split(\";\");\nfor(var i in notes)\n{\nvar note = notes[i].split(\",\");\nvar time = parseFloat(note[0]);\nvar line = parseInt(note[1]);\nvar musicNote = new MusicNote(time,line);\naudiogame.musicNotes.push(musicNote);\n}\n}\n\n```", "```js\n// starting game\nvar date = new Date();\naudiogame.startingTime = date.getTime();\n// some time later\nvar date = new Date();\nvar elapsedTime = (date.getTime() - audiogame.startingTime)/1000;\n\n```", "```js\nif (audiogame.startingTime != 0)\n{\nfor(var i in audiogame.musicNotes)\n{\n// get the elapsed time from beginning of the melody\nvar date = new Date();\nvar elapsedTime = (date.getTime() - audiogame.startingTime)/1000;\nvar note = audiogame.musicNotes[i];\n// check if the dot appear time is as same as the elapsed time\nvar timeDiff = note.time - elapsedTime;\nif (timeDiff >= 0 && timeDiff <= .03)\n{\n// create the dot when the appear time is within one frame of the elapsed time\nvar dot = new Dot(ctx.canvas.height-150, note.line);\naudiogame.dots.push(dot);\n}\n}\nmusic play back visualizationmusic play back visualizationmusic dots, creating}\n\n```", "```js\nfor(var i in audiogame.dots)\n{\naudiogame.dots[i].distance -= 2.5;\n}\n\n```", "```js\n// draw the dot\nctx.save();\nvar x = ctx.canvas.width/2-100\nif (audiogame.dots[i].line == 2)\n{\nx = ctx.canvas.width/2;\n}\nelse if (audiogame.dots[i].line == 3)\n{\nx = ctx.canvas.width/2+100;\n}\nctx.translate(x, ctx.canvas.height-80-audiogame.dots[i].distance);\nctx.drawImage(audiogame.dotImage, -audiogame.dotImage.width/2, - audiogame.dotImage.height/2);\n\n```", "```js\n    #game {\n    position: relative;\n    width: 768px;\n    height: 440px;\n    overflow: hidden;\n    }\n\n    ```", "```js\n    #game-scene {\n    background: #efefef url(../images/game_bg.jpg);\n    top: -440px;\n    }\n    #game-scene.show-scene {\n    top: 0;\n    -webkit-transition: top .3s linear;\n    -moz-transition: top .3s linear;\n    transition: top .3s linear;\n    }\n\n    ```", "```js\n    $(\"a[href='#game']\").click(function(){\n    audiogame.buttonActiveSound.currentTime = 0;\n    audiogame.buttonActiveSound.play();\n    $(\"#game-scene\").addClass('show-scene');\n    startGame();\n    return false;\n    });\n\n    ```", "```js\n    <section id=\"game-scene\" class=\"scene\">\n    <canvas id=\"game-background-canvas\" width=\"768\" height=\"440\">\n    Sorry, your web browser does not support canvas content.\n    </canvas>\n    <canvas id=\"game-canvas\" width=\"768\" height=\"440\">\n    Sorry, your web browser does not support canvas content.\n    </canvas>\n    <div id=\"hit-line-1\" class=\"hit-line hide\"></div>\n    <div id=\"hit-line-2\" class=\"hit-line hide\"></div>\n    <div id=\"hit-line-3\" class=\"hit-line hide\"></div>\n    </section>\n\n    ```", "```js\n    <footer>\n    <p>This is an example of making audio game in HTML5\\. Press J, K, L to play.\n    </p>\n    </footer>\n\n    ```", "```js\n    // keydown\n    $(document).keydown(function(e){\n    var line = e.which-73;\n    $('#hit-line-'+line).removeClass('hide');\n    $('#hit-line-'+line).addClass('show');\n    // our target is J(74), K(75), L(76)\n    var hitLine = e.which-73;\n    // check if hit a music note dot\n    for(var i in audiogame.dots)\n    {\n    if (hitLine == audiogame.dots[i].line && Math.abs(audiogame.dots[i].distance) < 20)\n    {\n    // remove the hit dot from the dots array\n    audiogame.dots.splice(i, 1);\n    }\n    }\n    });\n    $(document).keyup(function(e){\n    var line = e.which-73;\n    $('#hit-line-'+line).removeClass('show');\n    $('#hit-line-'+line).addClass('hide');\n    });\n\n    ```", "```js\n$(document).keydown(function(e){\nvar line = e.which-73;\n$('#hit-line-'+line).removeClass('hide');\n$('#hit-line-'+line).addClass('show');\n});\n$(document).keyup(function(e){\nvar line = e.which-73;\n$('#hit-line-'+line).removeClass('show');\n$('#hit-line-'+line).addClass('hide');\n});\n\n```", "```js\n$(document).keydown(function(e){\nvar line = e.which-73;\n$('#hit-line-'+line).removeClass('hide');\n$('#hit-line-'+line).addClass('show');\n// our target is J(74), K(75), L(76)\nvar hitLine = e.which-73;\n// check if hit a music note dot\nfor(var i in audiogame.dots)\n{\nif (hitLine == audiogame.dots[i].line && Math.abs(audiogame.dots[i].distance) < 20)\n{\n// remove the hit dot from the dots array\naudiogame.dots.splice(i, 1);\n}\n}\n});\n\n```", "```js\narray.splice(index, 1);\n\n```", "```js\narray.splice(index, length, element1, element2, \u2026, elementN);\n\n```", "```js\n    audiogame.totalDotsCount = 0;\n    audiogame.totalSuccessCount = 0;\n    // storing the success count of last 5 results.\n    audiogame.successCount = 5;\n\n    ```", "```js\n    function setupLevelData()\n    {\n    var notes = audiogame.leveldata.split(\";\");\n    // store the total number of dots\n    audiogame.totalDotsCount = notes.length;\n    for(var i in notes)\n    {\n    var note = notes[i].split(\",\");\n    var time = parseFloat(note[0]);\n    var line = parseInt(note[1]);\n    var musicNote = new MusicNote(time,line);\n    audiogame.musicNotes.push(musicNote);\n    }\n    }\n\n    ```", "```js\n    // check if hit a music note dot\n    for(var i in audiogame.dots)\n    {\n    if (hitLine == audiogame.dots[i].line && Math.abs(audiogame.dots[i].distance) < 20)\n    if (hitLine == audiogame.dots[i].line && Math.abs(audiogame.dots[i].distance) < 20)\n    {\n    // remove the hit dot from the dots array\n    audiogame.dots.splice(i, 1);\n    // increase the success count\n    audiogame.successCount++;\n    // keep only 5 success count max.\n    audiogame.successCount = Math.min (5, audiogame.successCount);\n    // increase the total success count\n    audiogame.totalSuccessCount ++;\n    }\n    }\n\n    ```", "```js\n    // check missed dots\n    for(var i in audiogame.dots)\n    {\n    if (!audiogame.dots[i].missed && audiogame.dots[i].distance < -10)\n    {\n    // mark the dot as missed if it is not mark before\n    audiogame.dots[i].missed = true;\n    // reduce the success count\n    audiogame.successCount--;\n    // reset the success count to 0 if it is lower than 0.\n    audiogame.successCount = Math.max (0, audiogame.successCount);\n    }\n    // remove missed dots after moved to the bottom\n    if (audiogame.dots[i].distance < -100)\n    {\n    audiogame.dots.splice(i, 1);\n    }\n    }\n    // calculate the percentage of the success in last 5 music dots\n    var successPercent = audiogame.successCount / 5;\n    // prevent the successPercent to exceed range(fail safe)\n    successPercent = Math.max(0, Math.min(1, successPercent));\n\n    ```", "```js\n    audiogame.melody.volume = successPercent;\n\n    ```", "```js\naudiogame.dots.splice(index, 1);\n\n```", "```js\n    audiogame.isRecordMode = true;\n\n    ```", "```js\n    $(document).keydown(function(e){\n    var line = e.which-73;\n    $('#hit-line-'+line).removeClass('hide');\n    $('#hit-line-'+line).addClass('show');\n    if (audiogame.isRecordMode)\n    {\n    // print the stored music notes data when press \";\" (186)\n    if (e.which == 186)\n    {\n    var musicNotesString = \"\";\n    for(var i in audiogame.musicNotes)\n    {\n    musicNotesString += audiogame.musicNotes[i].time+\", \"+audiogame.musicNotes[i].line+\";\";\n    musicNotesString += audiogame.musicNotes[i].time+\", \"+audiogame.musicNotes[i].line+\";\";\n    }\n    console.log(musicNotesString);\n    }\n    var currentTime = parseInt (audiogame.melody.currentTime * 1000)/1000;\n    var note = new MusicNote(currentTime, e.which-73);\n    audiogame.musicNotes.push(note);\n    }\n    else\n    {\n    // our target is J(74), K(75), L(76)\n    var hitLine = e.which-73;\n    // check if hit a music note dot\n    \u2026\n    }\n    });\n\n    ```", "```js\n    if (!audiogame.isRecordMode) {\n    setupLevelData();\n    setInterval(gameloop, 30);\n    }\n\n    ```", "```js\nvar currentTime = audiogame.melody.currentTime.toFixed(3);\nvar note = new MusicNote(currentTime, e.which-73);\naudiogame.musicNotes.push(note);\n\n```", "```js\n    $(audiogame.melody).bind('ended', onMelodyEnded);\n\n    ```", "```js\n    // show game over scene on melody ended.\n    function onMelodyEnded()\n    {\n    console.log('song ended');\n    console.log('success percent: ',audiogame.totalSuccessCount / audiogame.totalDotsCount * 100 + '%');\n    }\n\n    ```"]