["```js\n    // the global object that contains the variable needed for the car game.\n    var carGame = {\n    }\n    var canvas;\n    var ctx;\n    var canvasWidth;\n    var canvasHeight;\n    $(function() {\n    carGame.world = createWorld();\n    console.log(\"The world is created. \",carGame.world);\n    // get the reference of the context\n    canvas = document.getElementById('game');\n    ctx = canvas.getContext('2d');\n    canvasWidth = parseInt(canvas.width);\n    canvasHeight = parseInt(canvas.height);\n    });\n    function createWorld() {\n    // set the size of the world\n    var worldAABB = new b2AABB();\n    worldAABB.minVertex.Set(-4000, -4000);\n    worldAABB.maxVertex.Set(4000, 4000);\n    // Define the gravity\n    var gravity = new b2Vec2(0, 300);\n    // set to ignore sleeping object\n    var doSleep = false;\n    // finally create the world with the size, gravity, and sleep object parameter.\n    var world = new b2World(worldAABB, gravity, doSleep);\n    return world;\n    }\n\n    ```", "```js\nvar world = new b2World(worldAABB, gravity, doSleep);\n\n```", "```js\nvar worldAABB = new b2AABB();\nworldAABB.minVertex.Set(-4000, -4000);\nworldAABB.maxVertex.Set(4000, 4000);\n\n```", "```js\nvar gravity = new b2Vec2(0, 300);\n\n```", "```js\n    function createGround() {\n    // box shape definition\n    var groundSd = new b2BoxDef();\n    groundSd.extents.Set(250, 25);\n    groundSd.restitution = 0.4;\n    // body definition with the given shape we just created.\n    var groundBd = new b2BodyDef();\n    groundBd.AddShape(groundSd);\n    groundBd.position.Set(250, 370);\n    var body = carGame.world.CreateBody(groundBd);\n    return body;\n    }\n\n    ```", "```js\n    createGround();\n\n    ```", "```js\n// box shape definition\nvar groundSd = new b2BoxDef();\ngroundSd.extents.Set(250, 25);\ngroundSd.restitution = 0.4;\n\n```", "```js\nvar groundBd = new b2BodyDef();\ngroundBd.AddShape(groundSd);\ngroundBd.position.Set(250, 370);\nvar body = carGame.world.CreateBody(groundBd);\n\n```", "```js\n    $(function() {\n    // create the world\n    carGame.world = createWorld();\n    // create the ground\n    createGround();\n    // get the reference of the context\n    canvas = document.getElementById('game');\n    ctx = canvas.getContext('2d');\n    canvasWidth = parseInt(canvas.width);\n    canvasHeight = parseInt(canvas.height);\n    // draw the world\n    drawWorld(carGame.world, ctx);\n    });\n\n    ```", "```js\n    // drawing functions\n    function drawWorld(world, context) {\n    for (var b = world.m_bodyList; b != null; b = b.m_next) {\n    for (var s = b.GetShapeList(); s != null; s = s.GetNext()) {\n    drawShape(s, context);\n    }\n    }\n    }\n    // drawShape function directly copy from draw_world.js in Box2dJS library\n    function drawShape(shape, context) {\n    physics worldphysics worlddrawing, in canvascontext.strokeStyle = '#003300';\n    context.beginPath();\n    switch (shape.m_type) {\n    case b2Shape.e_circleShape:\n    var circle = shape;\n    var pos = circle.m_position;\n    var r = circle.m_radius;\n    var segments = 16.0;\n    var theta = 0.0;\n    var dtheta = 2.0 * Math.PI / segments;\n    // draw circle\n    context.moveTo(pos.x + r, pos.y);\n    for (var i = 0; i < segments; i++) {\n    var d = new b2Vec2(r * Math.cos(theta), r * Math.sin(theta));\n    var v = b2Math.AddVV(pos, d);\n    context.lineTo(v.x, v.y);\n    theta += dtheta;\n    }\n    context.lineTo(pos.x + r, pos.y);\n    // draw radius\n    context.moveTo(pos.x, pos.y);\n    var ax = circle.m_R.col1;\n    var pos2 = new b2Vec2(pos.x + r * ax.x, pos.y + r * ax.y);\n    context.lineTo(pos2.x, pos2.y);\n    break;\n    case b2Shape.e_polyShape:\n    var poly = shape;\n    var tV = b2Math.AddVV(poly.m_position, b2Math.b2MulMV(poly.m_R, poly.m_vertices[0]));\n    context.moveTo(tV.x, tV.y);\n    for (var i = 0; i < poly.m_vertexCount; i++) {\n    var v = b2Math.AddVV(poly.m_position, b2Math.b2MulMV(poly.m_R, poly.m_vertices[i]));\n    context.lineTo(v.x, v.y);\n    }\n    context.lineTo(tV.x, tV.y);\n    break;\n    }\n    context.stroke();\n    }\n\n    ```", "```js\nfunction drawWorld(world, context) {\nfor (var b = world.m_bodyList; b != null; b = b.m_next) {\nfor (var s = b.GetShapeList(); s != null; s = s.GetNext()) {\ndrawShape(s, context);\n}\n}\n}\n\n```", "```js\nfunction drawShape(shape, context) {\ncontext.strokeStyle = '#003300';\ncontext.beginPath();\nswitch (shape.m_type) {\ncase b2Shape.e_circleShape:\n// Draw the circle in canvas bases on the physics object shape\nbreak;\ncase b2Shape.e_polyShape:\n// Draw the polygon in canvas bases on the physics object shape\nbreak;\n}\ncontext.stroke();\n}\n\n```", "```js\n    // create a box\n    var boxSd = new b2BoxDef();\n    boxSd.density = 1.0;\n    boxSd.friction = 1.5;\n    boxSd.restitution = .4;\n    boxSd.extents.Set(40, 20);\n    var boxBd = new b2BodyDef();\n    boxBd.AddShape(boxSd);\n    boxBd.position.Set(50,210);\n    carGame.world.CreateBody(boxBd);\n\n    ```", "```js\n    function step() {\n    world.Step(1.0/60, 1);\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    drawWorld(carGame.world, ctx);\n    setTimeout(step, 10);\n    }\n\n    ```", "```js\n    $(function() {\n    \u2026\n    // start advancing the step\n    step();\n    });\n\n    ```", "```js\n    // create two wheels in the world\n    createWheel(carGame.world, 25, 230);\n    createWheel(carGame.world, 75, 230);\n\n    ```", "```js\n    function createWheel(world, x, y) {\n    // wheel circle definition\n    var ballSd = new b2CircleDef();\n    ballSd.density = 1.0;\n    ballSd.radius = 10;\n    ballSd.restitution = 0.1;\n    ballSd.friction = 4.3;\n    // body definition\n    var ballBd = new b2BodyDef();\n    ballBd.AddShape(ballSd);\n    ballBd.position.Set(x,y);\n    return world.CreateBody(ballBd);\n    }\n\n    ```", "```js\n    var car;\n\n    ```", "```js\n    function createCarAt(x, y) {\n    // the car box definition\n    var boxSd = new b2BoxDef();\n    boxSd.density = 1.0;\n    boxSd.friction = 1.5;\n    boxSd.restitution = .4;\n    boxSd.extents.Set(40, 20);\n    // the car body definition\n    var boxBd = new b2BodyDef();\n    boxBd.AddShape(boxSd);\n    boxBd.position.Set(x,y);\n    var carBody = carGame.world.CreateBody(boxBd);\n    // creating the wheels\n    var wheelBody1 = createWheel(carGame.world, x-25, y+20);\n    var wheelBody2 = createWheel(carGame.world, x+25, y+20);\n    // create a joint to connect left wheel with the car body\n    var jointDef = new b2RevoluteJointDef();\n    jointDef.anchorPoint.Set(x-25, y+20);\n    jointDef.body1 = carBody;\n    jointDef.body2 = wheelBody1;\n    carGame.world.CreateJoint(jointDef);\n    // create a joint to connect right wheel with the car body\n    var jointDef = new b2RevoluteJointDef();\n    jointDef.anchorPoint.Set(x+25, y+20);\n    jointDef.body1 = carBody;\n    jointDef.body2 = wheelBody2;\n    carGame.world.CreateJoint(jointDef);\n    return carBody;\n    }\n\n    ```", "```js\n    // create a car\n    car = createCarAt(50, 210);\n\n    ```", "```js\n    // Keyboard event\n    $(document).keydown(function(e) {\n    switch(e.keyCode) {\n    case 88: // x key to apply force towards right\n    var force = new b2Vec2(10000000, 0);\n    carGame.car.ApplyForce (force, carGame.car.GetCenterPosition());\n    break;\n    case 90: // z key to apply force towards left\n    var force = new b2Vec2(-10000000, 0);\n    carGame.car.ApplyForce (force, carGame.car.GetCenterPosition());\n    break;\n    }\n    });\n\n    ```", "```js\nbody.ApplyForce(force, point);\n\n```", "```js\n    function createGround(x, y, width, height, rotation) {\n    // box shape definition\n    var groundSd = new b2BoxDef();\n    groundSd.extents.Set(width, height);\n    groundSd.restitution = 0.4;\n    // body definition with the given shape we just created.\n    var groundBd = new b2BodyDef();\n    groundBd.AddShape(groundSd);\n    groundBd.position.Set(x, y);\n    groundBd.rotation = rotation * Math.PI / 180;\n    var body = carGame.world.CreateBody(groundBd);\n    return body;\n    }\n\n    ```", "```js\n    // create the ground\n    createGround(250, 270, 250, 25, 0);\n    // create a ramp\n    createGround(500, 250, 65, 15, -10);\n    createGround(600, 225, 80, 15, -20);\n    createGround(1100, 250, 100, 15, 0);\n\n    ```", "```js\ngroundBd.rotation = degree * Math.PI / 180;\n\n```", "```js\n    carGame.gamewinWall = createGround(1200, 215, 15, 25, 0);\n\n    ```", "```js\n    function step() {\n    carGame.world.Step(1.0/60, 1);\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    drawWorld(carGame.world, ctx);\n    setTimeout(step, 10);\n    //loop all contact list to check if the car hits the winning wall\n    for (var cn = carGame.world.GetContactList(); cn != null; cn = cn.GetNext()) {\n    var body1 = cn.GetShape1().GetBody();\n    var body2 = cn.GetShape2().GetBody();\n    if ((body1 == carGame.car && body2 == carGame.gamewinWall) ||\n    (body2 == carGame.car && body1 == carGame.gamewinWall))\n    {\n    console.log(\"Level Passed!\");\n    }\n    }\n    }\n\n    ```", "```js\nfor (var cn = carGame.world.GetContactList(); cn != null; cn = cn.GetNext()) {\n// We have shape 1 and shape 2 of each contact node.\n// cn.GetShape1();\n// cn.GetShape2();\n}\n\n```", "```js\nvar body1 = cn.GetShape1().GetBody();\nvar body2 = cn.GetShape2().GetBody();\nif ((body1 == carGame.car && body2 == carGame.gamewinWall) ||\n(body2 == carGame.car && body1 == carGame.gamewinWall))\n{\nconsole.log(\"Level Passed!\");\n}\n\n```", "```js\n    function restartGame() {\n    // create the world\n    carGame.world = createWorld();\n    // create the ground\n    createGround(250, 270, 250, 25, 0);\n    // create a ramp\n    createGround(500, 250, 65, 15, -10);\n    createGround(600, 225, 80, 15, -20);\n    createGround(1100, 250, 100, 15, 0);\n    // create a destination ground\n    carGame.gamewinWall = createGround(1200, 215, 15, 25, 0);\n    // create a car\n    carGame.car = createCarAt(50, 210);\n    }\n\n    ```", "```js\n    restartGame();\n\n    ```", "```js\n    $(document).keydown(function(e) {\n    switch(e.keyCode) {\n    case 88: // x key to apply force towards right\n    var force = new b2Vec2(10000000, 0);\n    carGame.car.ApplyForce (force, carGame.car.GetCenterPosition());\n    break;\n    case 90: // z key to apply force towards left\n    var force = new b2Vec2(-10000000, 0);\n    carGame.car.ApplyForce (force, carGame.car.GetCenterPosition());\n    break;\n    case 82: // r key to restart the game\n    restartGame();\n    break;\n    }\n    });\n\n    ```", "```js\n    if ((cn.GetShape1().GetBody() == carGame.car && cn.GetShape2().GetBody() == carGame.gamewinWall) ||\n    (cn.GetShape2().GetBody() == carGame.car && cn.GetShape1().GetBody() == carGame.gamewinWall))\n    {\n    console.log(\"Level Passed!\");\n    restartGame();\n    }\n\n    ```", "```js\ncarGame.world = createWorld();\n\n```", "```js\n    carGame.levels = new Array();\n    carGame.levels[0] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n    {\"type\":\"box\",\"x\":250, \"y\":270, \"width\":250, \"height\":25, \"rotation\":0},\n    {\"type\":\"box\",\"x\":500,\"y\":250,\"width\":65,\"height\":15, \"rotation\":-10},\n    {\"type\":\"box\",\"x\":600,\"y\":225,\"width\":80,\"height\":15, \"rotation\":-20},\n    {\"type\":\"box\",\"x\":950,\"y\":225,\"width\":80,\"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":1100,\"y\":250,\"width\":100,\"height\":15, \"rotation\":0},\n    {\"type\":\"box\",\"x\":1100,\"y\":250,\"width\":100,\"height\":15, \"rotation\":0},\n    {\"type\":\"win\",\"x\":1200,\"y\":215,\"width\":15,\"height\":25, \"rotation\":0}];\n    carGame.levels[1] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n    {\"type\":\"box\",\"x\":100, \"y\":270, \"width\":190, \"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":380, \"y\":320, \"width\":100, \"height\":15, \"rotation\":-10},\n    {\"type\":\"box\",\"x\":666,\"y\":285,\"width\":80,\"height\":15, \"rotation\":-32},\n    {\"type\":\"box\",\"x\":950,\"y\":295,\"width\":80,\"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":1100,\"y\":310,\"width\":100,\"height\":15, \"rotation\":0},\n    {\"type\":\"win\",\"x\":1200,\"y\":275,\"width\":15,\"height\":25, \"rotation\":0}];\n    car gamecar gamelevels data, loadingcarGame.levels[2] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n    {\"type\":\"box\",\"x\":100, \"y\":270, \"width\":190, \"height\":15, \"rotation\":20},\n    {\"type\":\"box\",\"x\":380, \"y\":320, \"width\":100, \"height\":15, \"rotation\":-10},\n    {\"type\":\"box\",\"x\":686,\"y\":285,\"width\":80,\"height\":15, \"rotation\":-32},\n    {\"type\":\"box\",\"x\":250,\"y\":495,\"width\":80,\"height\":15, \"rotation\":40},\n    {\"type\":\"box\",\"x\":500,\"y\":540,\"width\":200,\"height\":15, \"rotation\":0},\n    {\"type\":\"win\",\"x\":220,\"y\":425,\"width\":15,\"height\":25, \"rotation\":23}];\n\n    ```", "```js\n    var carGame = {\n    currentLevel: 0\n    }\n\n    ```", "```js\n    function restartGame(level) {\n    carGame.currentLevel = level;\n    // create the world\n    carGame.world = createWorld();\n    // create a ground in our newly created world\n    // load the ground info from level data\n    for(var i=0;i<carGame.levels[level].length;i++) {\n    var obj = carGame.levels[level][i];\n    // create car\n    if (obj.type == \"car\") {\n    carGame.car = createCarAt(obj.x,obj.y);\n    continue;\n    }\n    var groundBody = createGround(obj.x, obj.y, obj.width, obj.height, obj.rotation);\n    if (obj.type == \"win\") {\n    carGame.gamewinWall = groundBody;\n    }\n    }\n    }\n\n    ```", "```js\n    restartGame(carGame.currentLevel);\n\n    ```", "```js\n    case 82: // r key to restart the game\n    restartGame(carGame.currentLevel);\n    break;\n\n    ```", "```js\n    if ((body1 == carGame.car && body2 == carGame.gamewinWall) ||\n    (body2 == carGame.car && body1 == carGame.gamewinWall))\n    {\n    console.log(\"Level Passed!\");\n    restartGame(carGame.currentLevel+1);\n    }\n\n    ```", "```js\ncarGame.levels[0] = [{\"type\":\"car\",\"x\":50,\"y\":210,\"fuel\":20},\n{\"type\":\"box\",\"x\":250, \"y\":270, \"width\":250, \"height\":25, \"rotation\":0},\n{\"type\":\"box\",\"x\":500,\"y\":250,\"width\":65,\"height\":15,\"rotation\":-10},\n{\"type\":\"box\",\"x\":600,\"y\":225,\"width\":80,\"height\":15,\"rotation\":-20},\n{\"type\":\"box\",\"x\":950,\"y\":225,\"width\":80,\"height\":15,\"rotation\":20},\n{\"type\":\"box\",\"x\":1100,\"y\":250,\"width\":100,\"height\":15,\"rotation\":0},\n{\"type\":\"win\",\"x\":1200,\"y\":215,\"width\":15,\"height\":25,\"rotation\":0}];\n\n```", "```js\nfor(var i=0;i<carGame.levels[level].length;i++) {\nvar obj = carGame.levels[level][i];\n// create car\nif (obj.type == \"car\") {\ncarGame.car = createCarAt(obj.x,obj.y);\ncontinue;\n}\nvar groundBody = createGround(obj.x, obj.y, obj.width, obj.height, obj.rotation);\nif (obj.type == \"win\") {\ncarGame.gamewinWall = groundBody;\ncar gamecar gamelevels data, loading}\n}\n\n```", "```js\n    <div id=\"asset\">\n    <img id=\"flag\" src='images/flag.png'>\n    <img id=\"bus\" src=\"img/bus.png\">\n    <img id=\"wheel\" src=\"img/wheel.png\">\n    </div>\n\n    ```", "```js\n    #asset {\n    position: absolute;\n    top: -99999px;\n    }\n\n    ```", "```js\n    function createGround(x, y, width, height, rotation, type) {\n    // box shape definition\n    var groundSd = new b2BoxDef();\n    groundSd.extents.Set(width, height);\n    groundSd.restitution = 0.4;\n    if (type == \"win\") {\n    groundSd.userData = document.getElementById('flag');\n    }\n    \u2026\n    }\n\n    ```", "```js\n    var groundBody = createGround(obj.x, obj.y, obj.width, obj.height, obj.rotation, obj.type);\n\n    ```", "```js\n    // the car box definition\n    var boxSd = new b2BoxDef();\n    boxSd.density = 1.0;\n    boxSd.friction = 1.5;\n    boxSd.restitution = .4;\n    boxSd.extents.Set(40, 20);\n    boxSd.userData = document.getElementById('bus');\n\n    ```", "```js\n    function createWheel(world, x, y) {\n    // wheel circle definition\n    var ballSd = new b2CircleDef();\n    ballSd.density = 1.0;\n    ballSd.radius = 10;\n    ballSd.restitution = 0.1;\n    ballSd.friction = 4.3;\n    ballSd.userData = document.getElementById('wheel');\n    \u2026\n    }\n\n    ```", "```js\n    function drawWorld(world, context) {\n    for (var b = world.m_bodyList; b != null; b = b.m_next) {\n    for (var s = b.GetShapeList(); s != null; s = s.GetNext()) {\n    if (s.GetUserData() != undefined) {\n    // the user data contains the reference to the image\n    var img = s.GetUserData();\n    // the x and y of the image.\n    // We have to substract the half width/height\n    var x = s.GetPosition().x;\n    var y = s.GetPosition().y;\n    var topleftX = - $(img).width()/2;\n    var topleftY = - $(img).height()/2;\n    context.save();\n    context.translate(x,y);\n    context.rotate(s.GetBody().GetRotation());\n    context.drawImage(img, topleftX, topleftY);\n    context.restore();\n    } else {\n    drawShape(s, context);\n    }\n    }\n    }\n    }\n\n    ```", "```js\n#asset {\nposition: absolute;\ntop: -99999px;\n}\n\n```", "```js\nif (s.GetUserData() != undefined) {\n// the user data contains the reference to the image\nvar img = s.GetUserData();\n// the x and y of the image.\n// We have to substract the half width/height\nvar x = s.GetPosition().x;\nvar y = s.GetPosition().y;\nvar topleftX = - $(img).width()/2;\nvar topleftY = - $(img).height()/2;\ncontext.save();\ncontext.translate(x,y);\ncontext.rotate(s.GetBody().GetRotation());\ncontext.drawImage(img, topleftX, topleftY);\ncontext.restore();\n}\n\n```", "```js\ncontext.save();\ncontext.translate(x,y);\ncontext.rotate(s.GetBody().GetRotation());\ncontext.drawImage(img, topleftX, topleftY);\ncontext.restore();\n\n```", "```js\n    <section id=\"game-container\">\n    <canvas id=\"game\" width='1300' height='600' class=\"startscreen\"></canvas>\n    <div id=\"fuel\" class=\"progressbar\">\n    <div class=\"fuel-value\" style=\"width: 100%;\"></div>\n    </div>\n    <div id=\"level\"></div>\n    </section>\n\n    ```", "```js\n    var carGame = {\n    // game state constant\n    STATE_STARTING_SCREEN : 1,\n    STATE_PLAYING : 2,\n    STATE_GAMEOVER_SCREEN : 3,\n    state : 0,\n    fuel: 0,\n    fuelMax: 0,\n    currentLevel: 0\n    }\n\n    ```", "```js\n    // set the game state as \"starting screen\"\n    carGame.state = carGame.STATE_STARTING_SCREEN;\n    // start the game when clicking anywhere in starting screen\n    $('#game').click(function(){\n    if (carGame.state == carGame.STATE_STARTING_SCREEN)\n    {\n    // change the state to playing.\n    carGame.state = carGame.STATE_PLAYING;\n    // start new game\n    restartGame(carGame.currentLevel);\n    // start advancing the step\n    step();\n    }\n    });\n\n    ```", "```js\n    if (currentLevel < 4)\n    {\n    restartGame(currentLevel+1);\n    }\n    else\n    {\n    // show game over screen\n    $('#game').removeClass().addClass('gamebg_won');\n    // clear the physics world\n    world = createWorld();\n    }\n\n    ```", "```js\n    $(\"#level\").html(\"Level \" + (level+1));\n    // change the background image to fit the level\n    $('#game').removeClass().addClass('gamebg_level'+level);\n\n    ```", "```js\n    case 88: // x key to apply force towards right\n    if (carGame.fuel > 0)\n    {\n    var force = new b2Vec2(10000000, 0);\n    carGame.car.ApplyForce (force, carGame.car.GetCenterPosition());\n    carGame.fuel--;\n    $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n    }\n    break;\n    case 90: // z key to apply force towards left\n    if (carGame.fuel > 0)\n    {\n    var force = new b2Vec2(-10000000, 0);\n    carGame.car.ApplyForce (force, carGame.car.GetCenterPosition());\n    carGame.fuel--;\n    $(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n    }\n    break;\n\n    ```", "```js\n    // create car\n    if (obj.type == \"car\")\n    {\n    carGame.car = createCarAt(obj.x,obj.y);\n    carGame.fuel = obj.fuel;\n    carGame.fuelMax = obj.fuel;\n    $(\".fuel-value\").width('100%');\n    continue;\n    }\n\n    ```", "```js\n$('#game').removeClass().addClass('gamebg_level'+level);\n\n```", "```js\ncase 88: // x key to apply force towards right\nif (carGame.fuel > 0)\n{\nvar force = new b2Vec2(10000000, 0);\ncarGame.car.ApplyForce(force, carGame.car.GetCenterPosition());\ncarGame.fuel--;\n$(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n}\n\n```", "```js\n<div id=\"fuel\" class=\"progressbar\">\n<div class=\"fuel-value\" style=\"width: 100%;\"></div>\n</div>\n\n```", "```js\n$(\".fuel-value\").width(carGame.fuel/carGame.fuelMax * 100 +'%');\n\n```", "```js\n.progressbar {\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#8C906F), color-stop(48%,#8C906F), color-stop(51%,#323721), color-stop(54%,#55624F), color-stop(100%,#55624F));\n}\n.progressbar .fuel-value {\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#A8D751), color-stop(48%,#A8D751), color-stop(51%,#275606), color-stop(54%,#4A8A49), color-stop(100%,#4A8A49));\n}\n\n```"]