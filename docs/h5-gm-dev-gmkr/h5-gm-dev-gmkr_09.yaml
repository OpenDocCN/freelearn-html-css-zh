- en: Chapter 9. Get Your Game Out There
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 让你的游戏走出去
- en: After all the hard work, our game is ready to be released. In this chapter we
    are going to upload our game to a web server, so that it can be played on the
    Internet by anyone. We will look at how we can allow users to log into their Facebook
    account, and post the score of a level to their Facebook walls. We will also integrate
    Flurry analytics to track useful data that will allow us to understand how and
    where people are playing the game. Finally, we will briefly talk about earning
    money from games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 经过所有的努力，我们的游戏已经准备好发布了。在本章中，我们将把游戏上传到Web服务器，以便任何人都可以在互联网上玩。我们将看看如何允许用户登录他们的Facebook账户，并将某个级别的得分发布到他们的Facebook动态。我们还将集成Flurry分析，以跟踪有用的数据，这将使我们能够了解人们是如何以及在哪里玩游戏的。最后，我们将简要讨论从游戏中赚钱的问题。
- en: Releasing a game on your own site
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自己的网站上发布游戏
- en: In order for people to play the game, we need to get it up onto a website, preferably
    your own. This means we are going to need to find a place to host the website,
    export a final build of the game, and of course utilize an FTP program so that
    we can upload the game.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让人们玩游戏，我们需要将游戏放到一个网站上，最好是你自己的网站。这意味着我们需要找一个托管网站的地方，导出游戏的最终版本，当然还要利用FTP程序上传游戏。
- en: Creating the application
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: 'All throughout the book we have been testing and playing our games using GameMaker:
    Studio''s built-in server emulator. It allows us to see how the game will perform
    as if it were on an actual website, but it is only accessible to the computer
    we are developing on. To upload the game to a website, we will need to build all
    the files into the proper HTML5 format.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '在整本书中，我们一直在使用GameMaker: Studio内置的服务器模拟器来测试和玩我们的游戏。它允许我们查看游戏在实际网站上的表现，但只能访问我们正在开发的计算机。要将游戏上传到网站，我们需要将所有文件构建成适当的HTML5格式。'
- en: Open the Tower Toppling game that we have been working on, if it isn't already
    open.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未打开，打开我们一直在开发的Tower Toppling游戏。
- en: Before we create the final build, we should look at some of the options available.
    Navigate to **Resources** | **Change Global Game Settings**, and then go to the
    **HTML5** tab.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建最终版本之前，我们应该查看一些可用的选项。转到**资源** | **更改全局游戏设置**，然后转到**HTML5**选项卡。
- en: In the **General** subtab there are four sections of options as can be seen
    in the next screenshot. Looking at **HTML5 File Options**, it is possible to use
    a custom web page file and a custom loading bar if we want a specific layout or
    additional content on the page. Creating these files requires knowledge of HTML
    and JavaScript, and a code editor that supports these languages, both of which
    are outside the scope of this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在**常规**子选项卡中，有四个选项部分，如下一张截图所示。查看**HTML5文件选项**，可以使用自定义网页文件和自定义加载栏，如果我们想要特定的布局或页面上的额外内容。创建这些文件需要了解HTML和JavaScript，并且需要支持这些语言的代码编辑器，这些都超出了本书的范围。
- en: '![Creating the application](img/4100_09_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![创建应用程序](img/4100_09_01.jpg)'
- en: '**Splash screens** are seen before the game is loaded and are actually embedded
    into the `index.html` code. It requires a PNG file that should be of the same
    size as the game area; if it is of a different size, it will be scaled to fit
    the proper dimensions. One drawback of using a splash screen is that the image
    will be drawn instead of the loading bar. As it is generally considered a best
    practice to always let the user know what is occurring, especially when it comes
    to the loading of data, we will not be adding a splash screen to this game.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动画面**在游戏加载之前可见，并实际上嵌入到`index.html`代码中。它需要一个PNG文件，应该与游戏区域的大小相同；如果大小不同，它将被缩放以适应正确的尺寸。使用启动画面的一个缺点是，图像将被绘制而不是加载栏。由于通常认为始终让用户知道发生了什么是最佳实践，特别是在加载数据时，我们不会在这个游戏中添加启动画面。'
- en: 'When we compile the game, GameMaker: Studio will create a file named `favicon.ico`
    in the root directory with the icon set in the **Global Game Settings**. Users
    will see this icon in the browser tab along with the name of the page that the
    tab is showing; it is also visible when saving the page as a bookmark. The icon,
    a common feature of most websites, is a small image in the ICO format used for
    displaying a representative symbol of the website. Most image editors do not natively
    save out to ICO format and usually require a plugin to do so. Luckily, there are
    plenty of free websites that will convert any image into an icon for us. I personally
    prefer using [http://iconverticons.com/online/](http://iconverticons.com/online/)
    because they accept most common image formats and convert into all the major icon
    formats including Windows, Mac, and web icons. Once we have a proper ICO file,
    we can then use it in our game.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们编译游戏时，GameMaker: Studio会在根目录创建一个名为`favicon.ico`的文件，并在**全局游戏设置**中设置的图标。用户将在浏览器标签中看到这个图标，以及标签显示的页面名称；在保存页面为书签时也可见。图标是大多数网站的常见特征，是ICO格式的小图像，用于显示网站的代表性符号。大多数图像编辑器不能原生保存为ICO格式，通常需要插件来完成。幸运的是，有很多免费的网站可以将任何图像转换为图标。我个人更喜欢使用[http://iconverticons.com/online/](http://iconverticons.com/online/)，因为它们接受大多数常见的图像格式，并转换为包括Windows、Mac和Web图标在内的所有主要图标格式。一旦我们有了合适的ICO文件，就可以在我们的游戏中使用它。'
- en: Let's update **Icon** by clicking on **Update** and by loading `Chapter 9/Resources/Extras/GameIcon.ico`.
    Click on **OK**.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过点击“更新”来更新**图标**，并加载`第9章/资源/额外/GameIcon.ico`。点击“确定”。
- en: The game is now ready to be exported. Navigate to **File** | **Create Application**
    and save the game to a new folder called `Destruct` in the game project directory.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏现在已经准备好导出了。转到**文件** | **创建应用程序**，并将游戏保存到游戏项目目录中一个名为`Destruct`的新文件夹中。
- en: Click on **Save** and you will see the game compile and create all the files
    required to run your game. In the `Destruct` folder you should see two files and
    a folder. There is a `favicon.ico` file, and an `index.html` file which is the
    web page that will display the game. The folder, `html5game`, contains all the
    assets, such as all the sounds in both OGG and MP3 formats, a few PNG files starting
    with `index_texture` that contain all the graphics compiled into individual sprite
    sheets, and an `index.js` file that contains all the game functionality. There
    is also a `particles` folder that contains all the images used for the particle
    shapes.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**，您将看到游戏编译并创建运行游戏所需的所有文件。在`Destruct`文件夹中，您应该看到两个文件和一个文件夹。有一个`favicon.ico`文件，和一个`index.html`文件，这是将显示游戏的网页。文件夹`html5game`包含所有资产，比如所有声音的OGG和MP3格式，一些以`index_texture`开头的PNG文件，其中包含编译成单独精灵表的所有图形，以及一个包含所有游戏功能的`index.js`文件。还有一个`particles`文件夹，其中包含用于粒子形状的所有图像。
- en: Hosting the game
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管游戏
- en: 'The game has been built; we just need a place to put it. There are many options
    available on the Internet for hosting a website for the game. These can range
    from free web hosting to owning a personal server and everything in between. Choosing
    a host can be very time consuming due to all the different packages available,
    the varying price-points, and what our overall intentions are. Every developer
    will need to consider things, such as how many people are expected to play the
    game, will more games be added in the future, and will the site have advertising
    on it, and so on. A free web hosting service might suffice if the game will only
    be shown to family and friends, but if the goal is to earn money from the game
    it is better to use some form of paid service. When selecting a provider, the
    main features we want to look for are: how much server space, the amount of bandwidth,
    FTP access, and maximum file size.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏已经构建好了；我们只需要一个放置它的地方。在互联网上有许多选项可供托管游戏的网站。这些可以从免费的网站托管到拥有个人服务器以及其中的一切。由于所有不同的套餐、不同的价格点以及我们的整体意图，选择一个托管商可能会非常耗时。每个开发者都需要考虑一些事情，比如预计有多少人会玩游戏，将来是否会添加更多游戏，网站上是否会有广告等等。如果游戏只会展示给家人和朋友，免费的网站托管服务可能就够了，但如果目标是从游戏中赚钱，最好使用某种付费服务。在选择提供商时，我们想要寻找的主要功能是：有多少服务器空间、带宽量、FTP访问和最大文件大小。
- en: Additionally, you should ensure that the site allows MP3 files to be uploaded,
    as many free and a few paid sites do not allow this. Popular sites, such as [www.godaddy.com](http://www.godaddy.com)
    and [www.globat.com](http://www.globat.com) offer plenty of server space and bandwidth
    for a very affordable price that will suit most developers, or at least when they
    first start releasing games.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您应该确保网站允许上传MP3文件，因为许多免费和一些付费网站不允许这样做。一些知名的网站，如[www.godaddy.com](http://www.godaddy.com)和[www.globat.com](http://www.globat.com)提供了大量的服务器空间和带宽，价格非常实惠，适合大多数开发者，至少在他们开始发布游戏时。
- en: In order to move onto the next step, make sure you have secured web server space
    and that you have FTP access to it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进入下一步，请确保您已经获得了安全的网络服务器空间，并且可以访问FTP。
- en: Uploading the game with FTP
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用FTP上传游戏
- en: To get our game onto the server we need to use an FTP client to transfer the
    files. There are many free downloadable FTP clients available, such as WinSCP,
    CuteFTP, and FileZilla. Some browsers can be used for FTP if the appropriate plugin
    is installed, such as FireFTP for Firefox. Some web hosting services even offer
    drag-and-drop FTP capabilities. For this project we will be using WinSCP which
    can be downloaded from [http://winscp.net](http://winscp.net).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的游戏放到服务器上，我们需要使用FTP客户端来传输文件。有许多免费可下载的FTP客户端可用，如WinSCP，CuteFTP和FileZilla。一些浏览器可以用于FTP，如果安装了适当的插件，比如Firefox的FireFTP。一些网络托管服务甚至提供拖放式FTP功能。对于这个项目，我们将使用可以从[http://winscp.net](http://winscp.net)下载的WinSCP。
- en: Download the WinSCP client and install it according to the instructions. When
    the **Initial user settings** page appears, select **Commander interface** as
    shown in the following screenshot:![Uploading the game with FTP](img/4100_09_02.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载WinSCP客户端，并根据说明进行安装。当**初始用户设置**页面出现时，选择**指挥官界面**，如下截图所示：![使用FTP上传游戏](img/4100_09_02.jpg)
- en: Run WinSCP.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行WinSCP。
- en: As this is the first time we are accessing the website's FTP, we will need to
    click on **New** to create a new FTP session.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是我们第一次访问网站的FTP，我们需要点击**新建**来创建一个新的FTP会话。
- en: We need to select a file protocol method by navigating to **Session** | **File
    Protocol** to transfer the files. The default is **SFTP** (**Secure FTP**), but
    many hosting sites only allow for standard FTP access, so we will go with that.
    Navigate to **File Protocol** | **FTP**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要通过导航到**会话** | **文件协议**来选择文件传输的协议方法。默认是**SFTP**（**安全FTP**），但许多托管站点只允许标准FTP访问，所以我们将选择它。导航到**文件协议**
    | **FTP**。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Consult your hosting provider's documentation for instructions on how to configure
    your FTP connection.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅您的托管提供商的文档，了解如何配置您的FTP连接的说明。
- en: Next we need to enter the server FTP address, often your website name, plus
    your username and password. It should look something like the following screenshot:![Uploading
    the game with FTP](img/4100_09_03.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要输入服务器FTP地址，通常是您的网站名称，加上您的用户名和密码。它应该看起来像下面的截图：![使用FTP上传游戏](img/4100_09_03.jpg)
- en: To make it easier to access the site in the future we can save these settings,
    including the password. Click on **Save**.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将来更容易访问网站，我们可以保存这些设置，包括密码。点击**保存**。
- en: This will take us back to the login screen and we can now see the FTP connection
    in the **Stored sessions** list as shown in the next screenshot. To open a connection,
    we can double-click the site name, or select the site name and click on **Login**.![Uploading
    the game with FTP](img/4100_09_04.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带我们回到登录界面，现在我们可以在**存储的会话**列表中看到FTP连接，如下一个截图所示。要打开连接，我们可以双击站点名称，或者选择站点名称，然后单击**登录**。![使用FTP上传游戏](img/4100_09_04.jpg)
- en: If all the information has been correctly entered, a directory window should
    open. As seen in the next screenshot, there are two panes with file directories.
    The left-hand side is the local drives of the computer and the right-hand side
    is the server directory. The server should be open to the root directory though
    it might be displayed as being in a folder called `www` or `public_html`. There
    likely is at least one file in the directory already, `index.html`, which would
    be the default page that is seen when people go to the domain.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有信息都输入正确，一个目录窗口应该会打开。如下一张截图所示，有两个带有文件目录的窗格。左侧是计算机的本地驱动器，右侧是服务器目录。服务器应该打开到根目录，尽管它可能显示为在一个名为`www`或`public_html`的文件夹中。目录中可能已经有至少一个文件，`index.html`，这将是人们访问域名时看到的默认页面。
- en: '![Uploading the game with FTP](img/4100_09_05.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用FTP上传游戏](img/4100_09_05.jpg)'
- en: In the left panel, locate the `Destruct` folder where our game has been exported
    to. Drag the entire folder over to the right panel to transfer all the files to
    the server.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中，找到我们的游戏已经导出的`Destruct`文件夹。将整个文件夹拖到右侧面板上，以将所有文件传输到服务器上。
- en: A pop-up dialog box will ask if we want to copy all the files over. Click on
    **Copy**. It may take a few moments to transfer everything over.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出对话框会询问我们是否要复制所有文件。点击**复制**。可能需要一些时间来转移所有内容。
- en: The game has now been uploaded and is accessible on the Internet. To access
    it, just open a browser and go to the website and the `Destruct` subdirectory,
    for example, `http://www.yoursitename.com/Destruct/`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏现在已经上传并可以在互联网上访问。要访问它，只需打开浏览器，转到网站和`Destruct`子目录，例如`http://www.yoursitename.com/Destruct/`。
- en: Integrating with Facebook
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Facebook集成
- en: 'With the game now uploaded to a server it is available for anyone in the world
    to play it. They can play the game, that is, if they know about it. One of the
    most difficult challenges any developer faces is getting the word out about their
    product. One of the easiest ways to spread the news is through social media sites,
    such as Facebook. GameMaker: Studio makes this easy as the functionality for connecting
    with Facebook is already integrated. We are going to add a Facebook login button
    to the frontend of the game, and we will add the ability for the player to post
    their scores to their Facebook walls.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '现在游戏已经上传到服务器，任何人都可以在世界上玩它。他们可以玩这个游戏，只要他们知道它。任何开发者面临的最困难的挑战之一是让人们了解他们的产品。通过社交媒体网站，比如Facebook，传播消息是最简单的方法之一。GameMaker:
    Studio已经集成了与Facebook连接的功能，这使得这一点变得容易。我们将在游戏的前端添加一个Facebook登录按钮，并允许玩家将他们的分数发布到他们的Facebook动态中。'
- en: In order to use the Facebook functions, we need to have both a Facebook account
    and a Facebook developers' account. Go to [http://developers.facebook.com/](http://developers.facebook.com/)
    and log in. If you do not have a Facebook account, it will prompt you to create
    one.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用Facebook功能，我们需要拥有Facebook账户和Facebook开发者账户。前往[http://developers.facebook.com/](http://developers.facebook.com/)并登录。如果你没有Facebook账户，它会提示你创建一个。
- en: Once we have logged in to the developers' page, we need to click **Apps** on
    the top menu bar. This will take us to the **Apps** page.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们登录到开发者页面，我们需要点击顶部菜单栏上的**应用**。这将带我们到**应用**页面。
- en: Next we need to click on the **Register as a Developer** button. This will open
    a registration dialog that we need to go through. First we will need to **Accept
    the Terms** **and Conditions**, and then we need to supply a phone number to **Verify
    the Account**. This must be a valid number, as it will send a text message that
    is needed for verification. Finish the process as instructed.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要点击**注册为开发者**按钮。这将打开一个注册对话框，我们需要通过它。首先，我们需要**接受条款和条件**，然后我们需要提供一个电话号码来**验证账户**。这必须是一个有效的号码，因为它将发送一条需要验证的短信。按照指示完成流程。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always read the Terms and Conditions *before* you agree to them and ensure that
    you fully understand what it is you are legally agreeing to.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在同意条款和条件之前*一定要*阅读它们，并确保你完全理解你所要合法同意的内容。
- en: Having completed the registration, we should find ourselves back on the **Apps**
    dashboard. There is a Create New App button close to the registration button.
    Click on it.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成注册后，我们应该会发现自己回到了**应用**仪表板。在注册按钮附近有一个创建新应用的按钮。点击它。
- en: In the **Create New App** dialog box, as seen in the next screenshot, we need
    to enter an **App Name**. This name does not need to be unique so long as we don't
    have another app with the same name. There are a few rules about naming conventions
    that you can read by clicking on the **Facebook Platform Policies** link. The
    optional **App Namespace** is for integrating into Facebook a bit deeper with
    app pages and using Open Graph, a notification tool. We will not need an App Namespace
    so we can leave it blank. We also do not need **Web Hosting** and can click **Continue**.![Integrating
    with Facebook](img/4100_09_06.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新应用**对话框中，如下一张截图所示，我们需要输入一个**应用名称**。只要我们没有另一个同名应用，这个名称就不需要是唯一的。关于命名约定有一些规则，你可以点击**Facebook平台政策**链接阅读。可选的**应用命名空间**是为了更深入地与Facebook集成，使用应用页面和使用Open
    Graph，一个通知工具。我们不需要应用命名空间，所以可以留空。我们也不需要**Web Hosting**，可以点击**继续**。![与Facebook集成](img/4100_09_06.jpg)
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about Facebook Open Graph, App Namespaces, and more, check out
    the Facebook Developers API Documentation at [https://developers.facebook.com/docs/reference/apis/](https://developers.facebook.com/docs/reference/apis/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Facebook Open Graph、应用命名空间等内容，请查看Facebook开发者API文档[https://developers.facebook.com/docs/reference/apis/](https://developers.facebook.com/docs/reference/apis/)。
- en: The next step is a CAPTCHA security check. Follow the directions and click on
    **Continue**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是CAPTCHA安全检查。按照指示操作，然后点击**继续**。
- en: The app has now been created and we are on the **Basic Info** page. Here we
    can finish setting up how the game will be integrated into Facebook. Enter the
    base domain name of the game website in **Basic Info** | **App Domains**. This
    will allow the app to run on that domain and all subdomains. It should not include
    the `http://` or any other element beyond the name of the root site.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序现在已经创建，我们在**基本信息**页面上。在这里，我们可以完成设置游戏如何集成到Facebook。在**基本信息** | **应用域**中输入游戏网站的基本域名。这将允许应用在该域和所有子域上运行。它不应包括`http://`或根站点名称之外的任何其他元素。
- en: Under **Select how your app integrates with Facebook**, we need to select **Website
    with Facebook Login**, and then enter the exact URL where the game is located.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择应用程序如何与Facebook集成**下，我们需要选择**带Facebook登录的网站**，然后输入游戏所在的确切URL。
- en: Click on **Save Changes** as we are done with the basic info. The settings should
    look like the following screenshot with the appropriate domain information entered
    for your site:![Integrating with Facebook](img/4100_09_07.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存更改**，因为我们已经完成了基本信息。设置应该如下截图所示，输入适用于您网站的适当域信息：![与Facebook集成](img/4100_09_07.jpg)
- en: 'Before we get back into GameMaker: Studio, we need to copy **App ID:** from
    the top of the **Basic** page.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在返回GameMaker: Studio之前，我们需要从**基本**页面顶部复制**应用ID：**。'
- en: Reopen the game project and navigate to **Resources** | **Change Global Game
    Settings**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开游戏项目，导航到**资源** | **更改全局游戏设置**。
- en: Go to the **Facebook** tab, as shown in the next screenshot, check the box for
    **Use Facebook**, and then paste the ID we copied into **Facebook App Id**. Click
    on **OK**.![Integrating with Facebook](img/4100_09_08.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Facebook**选项卡，如下截图所示，勾选**使用Facebook**的框，然后粘贴我们复制的ID到**Facebook应用ID**中。点击**确定**。![与Facebook集成](img/4100_09_08.jpg)
- en: 'We now have access to the Facebook app; now we just need to initialize it.
    Create a new script, `scr_Global_Facebook`, with the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以访问Facebook应用程序；现在我们只需要初始化它。创建一个新的脚本，`scr_Global_Facebook`，其中包含以下代码：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We start by initializing Facebook, and then we create a global variable for
    a `ds_list` that will contain all the permissions we want to be able to request
    from Facebook. In our case we are just asking to be able to publish to the Facebook
    wall of the logged in user. All the options that are available can be found on
    the Facebook Developers' site.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先初始化Facebook，然后创建一个全局变量，用于包含我们想要从Facebook请求的所有权限的`ds_list`。在我们的情况下，我们只是要求能够发布到已登录用户的Facebook墙上。所有可用的选项都可以在Facebook开发人员网站上找到。
- en: 'Open `scr_Global_GameStart` and execute the following line at the end:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`scr_Global_GameStart`，并在最后执行以下行：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding a Facebook login button
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Facebook登录按钮
- en: Now that we have Facebook active, we can implement it into the game. We will
    start by adding a login button.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经激活了Facebook，我们可以将其实现到游戏中。我们将首先添加一个登录按钮。
- en: Create a new Sprite, `spr_Button_FacebookLogin`, with **Remove Background**
    unchecked, load `Chapter 9/Resources/Sprites/FacebookLogin.gif`, and center the
    origin.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的精灵，`spr_Button_FacebookLogin`，取消**删除背景**的选项，加载`Chapter 9/Resources/Sprites/FacebookLogin.gif`，并将原点居中。
- en: Create a new Object, `obj_Button_FacebookLogin`, attach the sprite we just created,
    and then set **Parent** to `obj_Button_Parent`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新对象，`obj_Button_FacebookLogin`，附加我们刚刚创建的精灵，然后将**父级**设置为`obj_Button_Parent`。
- en: Add a **Mouse** | **Left Pressed** event and attach a new Script, `scr_Button_FbLogin_MousePressed`,
    and have the user log in to Facebook.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**鼠标** | **左键按下**事件，并附加一个新的脚本，`scr_Button_FbLogin_MousePressed`，让用户登录Facebook。
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `MainMenu` and add a single instance of the button below the **START**
    button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainMenu`，并在**开始**按钮下方添加一个按钮的单个实例。
- en: Next, we need to let the players post to their walls. For this we will add another
    button to the score screen. Create a new Sprite, `spr_Button_FacebookPost`, with
    **Remove Background** unchecked, load `Chapter 9/Resources/Sprites/FacebookPost.gif`,
    and center the origin.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要让玩家发布到他们的墙上。为此，我们将在得分屏幕上添加另一个按钮。创建一个新的精灵，`spr_Button_FacebookPost`，取消**删除背景**的选项，加载`Chapter
    9/Resources/Sprites/FacebookPost.gif`，并将原点居中。
- en: The score screen is all code, so we don't need a new object, but we do need
    to add code to the existing scripts. Open `scr_ScoreScreen_Create`, and add a
    variable for the Y placement, width offset, and height offset of the button.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 得分屏幕都是代码，所以我们不需要一个新对象，但我们需要向现有脚本添加代码。打开`scr_ScoreScreen_Create`，并添加一个用于按钮的Y位置、宽度偏移和高度偏移的变量。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next we will create a new Script, `scr_Menu_Button_FbPost`, which will control
    the functionality.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个新的脚本，`scr_Menu_Button_FbPost`，用于控制功能。
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We only want to post to Facebook if the player defeats a level, so we start
    by checking the win condition. We check the status of the Facebook connection,
    as we want to display the button only if the player is signed in. If the player
    is signed in, we draw the button on the screen and check to see if the mouse is
    hovering over it, as we did with all our other buttons. If the button is clicked,
    we create some variables for the message title, caption and text, an image, and
    a link back to the site. We then post a message to Facebook. The function also
    has two additional parameters that are for using more advanced Facebook actions,
    but we are leaving these blank.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只想在玩家完成一个级别时发布到Facebook，所以我们首先检查胜利条件。我们检查Facebook连接的状态，因为我们只想在玩家登录时显示按钮。如果玩家已登录，我们在屏幕上绘制按钮，并检查鼠标是否悬停在按钮上，就像我们对所有其他按钮做的那样。如果点击按钮，我们创建一些变量用于消息标题、说明和文本、图像以及返回网站的链接。然后我们在Facebook上发布一条消息。该函数还有两个额外的参数，用于使用更高级的Facebook操作，但我们将这些参数留空。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see what advanced options are available, see the Facebook Developers' API
    Post page at [https://developers.facebook.com/docs/reference/api/post/](https://developers.facebook.com/docs/reference/api/post/).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用的高级选项，请参阅Facebook开发人员API帖子页面[https://developers.facebook.com/docs/reference/api/post/](https://developers.facebook.com/docs/reference/api/post/)。
- en: 'In order to draw this on screen we need to reopen `scr_ScoreScreen_DrawGUI`
    and execute the script we just created:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在屏幕上绘制这个，我们需要重新打开`scr_ScoreScreen_DrawGUI`并执行我们刚刚创建的脚本：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the game and click on **Create Application**. It is OK to overwrite the
    existing project files.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存游戏并点击**创建应用程序**。可以覆盖现有的项目文件。
- en: Open WinSCP and connect to the FTP server.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开WinSCP并连接到FTP服务器。
- en: Transfer all the files over to the server. Click on **Yes to All** when prompted
    to confirm the overwriting of the files.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有文件传输到服务器。在提示确认覆盖文件时，点击**全部是**。
- en: We also need to transfer over the image we want to include in the post. Open
    `Chapter_09/Resources/Extras/` and transfer `Thumbnail.gif` over to the server
    into the `Destruct` folder.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要传输我们想要包含在帖子中的图像。打开`Chapter_09/Resources/Extras/`，将`Thumbnail.gif`传输到服务器的`Destruct`文件夹中。
- en: Open a browser and go to the game site. When the game loads up, we should see
    the new button just below the **START** button as shown in the following screenshot:![Adding
    a Facebook login button](img/4100_09_09.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到游戏网站。当游戏加载完成时，我们应该会看到新按钮，就在**开始**按钮下方，如下面的屏幕截图所示：![添加Facebook登录按钮](img/4100_09_09.jpg)
- en: Click on the **Log Into Facebook** button. A pop-up window, like the next screenshot,
    should appear. If nothing happens, check to see if the browser has blocked pop
    ups and unblock it. When the pop up does appear, we just need to sign into our
    Facebook account.![Adding a Facebook login button](img/4100_09_10.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录Facebook**按钮。应该会出现一个弹出窗口，就像下一个屏幕截图一样。如果没有发生任何事情，请检查浏览器是否已阻止弹出窗口并解除阻止。当弹出窗口出现时，我们只需要登录我们的Facebook账户。![添加Facebook登录按钮](img/4100_09_10.jpg)
- en: Play a level successfully. When the Score screen appears we should see the **POST
    TO FACEBOOK** button, as shown in the following screenshot:![Adding a Facebook
    login button](img/4100_09_11.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功玩一个级别。当得分屏幕出现时，我们应该会看到**发布到Facebook**按钮，如下面的屏幕截图所示：![添加Facebook登录按钮](img/4100_09_11.jpg)
- en: Click on the button and then go to your Facebook page. We will see a new post
    that has been shared with the world, which will look like the following screenshot:![Adding
    a Facebook login button](img/4100_09_12.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮，然后转到你的Facebook页面。我们将看到一个新的帖子已经与世界分享，看起来像下面的屏幕截图：![添加Facebook登录按钮](img/4100_09_12.jpg)
- en: Congratulations! The game is now available for everyone to play and is being
    exposed to the world through Facebook. The goal for any developer is to create
    interesting games that everybody enjoys playing and is able to complete. But how
    do you know whether that is occurring? Are people getting stuck in the game? Is
    it too easy? Too hard? After all the hard work that went into making the game,
    it would be a shame to not know any of these answers. This is where analytics
    come in handy.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！游戏现在可以供所有人玩，并通过Facebook向世界展示。任何开发者的目标都是创建有趣的游戏，让每个人都喜欢玩并能够完成。但是你怎么知道是否发生了这种情况？人们是否在游戏中卡住了？是不是太容易？太难？在制作游戏时付出了所有的努力，不知道这些答案将是一件遗憾的事。这就是分析派上用场的地方。
- en: Tracking the game with Flurry Analytics
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flurry Analytics跟踪游戏
- en: '**Analytics** is the process of gathering and finding patterns within a set
    of data. This data can be any quantifiable action, such as a mouse click, and
    its related elements, such as what was clicked. This information allows developers
    to see how users are using their product. It is incredibly useful when creating
    games, because there are so many things that can be tracked.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**分析**是收集和发现一组数据中的模式的过程。这些数据可以是任何可量化的行为，比如鼠标点击，以及相关的元素，比如点击了什么。这些信息使开发人员能够看到用户如何使用他们的产品。在创建游戏时，这是非常有用的，因为有很多东西可以被跟踪。'
- en: 'We are going to implement Flurry Analytics, one of the two systems GameMaker:
    Studio has built-in and is the most robust. While it is possible to track anything
    and everything, it is generally better to focus on things that are most relevant
    to the user experience. For our game we are going to track each level''s score,
    equipment used, and times played. We will only send this data out upon the player
    successfully completing a level. This will allow us to see how often each level
    is played, what equipment is used the most, the variation in scores, how hard
    each level is, and where people quit the game on average.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将实施Flurry Analytics，这是GameMaker: Studio内置的两个系统中最强大的一个。虽然可以跟踪任何事物，但通常最好专注于对用户体验最相关的事物。对于我们的游戏，我们将跟踪每个级别的得分、使用的装备和游玩次数。我们只会在玩家成功完成一个级别时发送这些数据。这将使我们能够看到每个级别被玩的频率，最常使用的装备，得分的变化，每个级别的难度，以及人们平均在哪里退出游戏。'
- en: Setting up Flurry Analytics
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Flurry Analytics
- en: 'In order to use Flurry Analytics, we need to have an account with the service,
    an application to send the data to, and have it activated in GameMaker: Studio.
    Once that has been done, a new build needs to be uploaded to the site and people
    need to play the game.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使用Flurry Analytics，我们需要在该服务上拥有一个账户，一个要发送数据的应用程序，并在GameMaker: Studio中激活它。一旦完成了这些步骤，就需要上传一个新的构建到网站上，然后人们就可以玩游戏了。'
- en: First, let's sign up for Flurry analytics. Go to [http://www.flurry.com/](http://www.flurry.com/)
    and sign up for a free account, following the site's directions.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们注册Flurry分析。转到[http://www.flurry.com/](http://www.flurry.com/)并按照网站的说明注册一个免费账户。
- en: Once the account has been set up and you have logged in, we should be on the
    developer home page. On the menu bar click on the **Applications** tab to go to
    the **Applications** page as shown in the following screenshot:![Setting up Flurry
    Analytics](img/4100_09_13.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置好账户并登录后，我们应该会进入开发者主页。在菜单栏上点击**应用程序**选项卡，进入**应用程序**页面，如下面的屏幕截图所示：![设置Flurry
    Analytics](img/4100_09_13.jpg)
- en: We don't have any application at this point, so we need to add one. Click on
    **Add a New Application**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时我们还没有任何应用程序，所以需要添加一个。点击**添加新应用程序**。
- en: The next page asks for a platform to be selected. Click on the Java icon.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的页面要求选择一个平台。点击Java图标。
- en: Next we need to add in some basic info for the application. As seen in the next
    screenshot, enter the name of the game, `Destruct`, and choose an appropriate
    category, in our case, **Games - Simulation** seems to fit best. Then click on
    **Create App**.![Setting up Flurry Analytics](img/4100_09_14.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为应用程序添加一些基本信息。如下一张截图所示，输入游戏的名称`Destruct`，并选择一个合适的类别，在我们的情况下，**游戏-模拟**似乎最合适。然后点击**创建应用**。![设置Flurry分析](img/4100_09_14.jpg)
- en: 'On the next page it asks how we want to integrate the SDK with a couple of
    options. GameMaker: Studio already has this integrated into the software, which
    means we can skip this step. Click on **Cancel** to finish this step and return
    to the **Home** page.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在下一页中，它询问我们如何将SDK与几个选项集成。GameMaker: Studio已经将其集成到软件中，这意味着我们可以跳过这一步。点击**取消**完成此步骤，并返回到**主页**。'
- en: We should now see our application in **Application Summary**, as can be seen
    in the next screenshot. We need to get our application ID, so click on **Destruct**.![Setting
    up Flurry Analytics](img/4100_09_15.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们应该在**应用程序摘要**中看到我们的应用程序，如下一张截图所示。我们需要获取我们的应用程序ID，所以点击**Destruct**。![设置Flurry分析](img/4100_09_15.jpg)
- en: 'Next, we need to navigate to **Manage** | **App Info** in the left menu to
    access the page with our application information. At the bottom of the list, as
    seen in the next screenshot, is the **API Key**. This key is needed to connect
    the game in GameMaker: Studio into this analytics app. Copy this key. We are done
    with this site for now.![Setting up Flurry Analytics](img/4100_09_16.jpg)'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，我们需要导航到左侧菜单中的**管理** | **应用信息**，以访问包含我们应用程序信息的页面。在列表底部，如下一张截图所示，是**API密钥**。这个密钥是连接GameMaker:
    Studio中的游戏到这个分析应用程序所需的。复制这个密钥。我们现在暂时完成了这个网站。![设置Flurry分析](img/4100_09_16.jpg)'
- en: Reopen the project file and open **Global Game Settings**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开项目文件并打开**全局游戏设置**。
- en: Click on the right arrow at the top of the **Global Game Settings** until you
    see the **Analytics** tab as shown in the next screenshot. Click on the **Analytics**
    tab.![Setting up Flurry Analytics](img/4100_09_17.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**全局游戏设置**顶部的右箭头，直到看到**Analytics**选项卡，如下一张截图所示。点击**Analytics**选项卡。![设置Flurry分析](img/4100_09_17.jpg)
- en: In the **HTML5** subtab, set **Analytics Provider:** to **Flurry**, check the
    box for **Enable Flurry**, and paste the API Key into **Flurry Id**. We now have
    everything set up and ready to output some data.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**HTML5**子选项卡中，将**分析提供程序**设置为**Flurry**，选中**启用Flurry**复选框，并将API密钥粘贴到**Flurry
    Id**中。现在我们已经设置好并准备输出一些数据。
- en: Tracking events in the game
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪游戏中的事件
- en: Now that we can send out data we just need to implement it into the existing
    game. We need to add some bits of code into several scripts, plus create some
    new ones, in order to get useful, trackable information. We want to track the
    level being played, usage of each piece of equipment, how many times the level
    has been played, and the score of the level.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以发送数据，我们只需要将其实现到现有游戏中。我们需要在几个脚本中添加一些代码，并创建一些新的脚本，以便获得有用的可跟踪信息。我们想要跟踪正在玩的级别，每个装备的使用情况，级别被玩的次数以及级别的得分。
- en: 'We already have constants for tracking the equipment (`TNT: 0, WRECKINGBALL:
    1`, `MAGNET: 2`) that can be reused for tracking purposes. That leaves us needing
    some additional constants for the level, the attempts, and the score. Navigate
    to **Resources** | **Define Constants** and add `LEVEL: 3, ATTEMPTS: 4, LVLSCORE:
    5`.'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们已经有了用于跟踪装备（`TNT: 0, WRECKINGBALL: 1`，`MAGNET: 2`）的常量，可以用于跟踪目的。这使我们需要一些额外的常量来跟踪级别，尝试次数和得分。导航到**资源**
    | **定义常量**，并添加`LEVEL: 3, ATTEMPTS: 4, LVLSCORE: 5`。'
- en: We need to keep this data in a grid accessible globally. Create a new Script,
    `scr_Global_Analytics`, and initialize values for the whole game.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将这些数据保存在全局可访问的网格中。创建一个新的脚本`scr_Global_Analytics`，并初始化整个游戏的值。
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We start by creating a global data structure that has six values for each level
    in the game. We run a loop to set the initial values for each piece of equipment,
    the level by grabbing the level name from the previously created level array,
    the amount of attempts, and the level score, all set to zero.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个全局数据结构，为游戏中的每个级别设置六个值。我们运行一个循环，为每个装备的初始值设置，通过从先前创建的级别数组中获取级别名称，尝试次数和级别得分，全部设置为零。
- en: Reopen `scr_Global_GameStart` and execute this script.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`scr_Global_GameStart`并执行此脚本。
- en: 'Next, we need to insert some code to change these values for each level. We
    will start with tracking the attempts for each level. This is going to require
    changes to several scripts. The first one we will change is `scr_Button_LevelSelect_MousePressed`,
    where we need to add an attempt when the player selects a level. In the `else`
    statement, before we change rooms, add the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要插入一些代码来改变每个级别的这些值。我们将从跟踪每个级别的尝试开始。这将需要更改几个脚本。我们将更改的第一个是`scr_Button_LevelSelect_MousePressed`，在玩家选择级别时，我们需要添加一次尝试。在`else`语句中，在更改房间之前，添加以下代码：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We search through the levelData grid for the room that has been selected in
    order to find out what row we need to change. Once we have the row, we add one
    attempt to that level's data.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们搜索levelData网格，以找出已选择的房间，以便找出我们需要更改的行。一旦我们有了行，我们就为该级别的数据添加一次尝试。
- en: As we are tracking attempts, we need to insert the same code into `scr_Menu_Button_Restart`
    just before we restart the room.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们正在跟踪尝试，我们需要在重新启动房间之前将相同的代码插入`scr_Menu_Button_Restart`中。
- en: 'Finally, we also need to add similar code to `scr_Menu_Button_NextLevel`, except
    we cannot use `myLevel` to find the room. Instead, we need to look ahead to the
    next room. Just before we change rooms, insert the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们还需要在`scr_Menu_Button_NextLevel`中添加类似的代码，除了我们不能使用`myLevel`来找到房间。相反，我们需要向下查找到下一个房间。在更改房间之前，插入以下代码：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With the attempts now being tracked, we can move onto tracking the rest of the
    desired data. Create a new Script, `scr_Level_Stats`, and update all the relevant
    stats.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试已经被跟踪，我们可以继续跟踪其他所需的数据。创建一个新的脚本`scr_Level_Stats`，并更新所有相关的统计数据。
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We start by finding the row for the level that has just been completed. We then
    run a loop through the equipment to see how many were used in the level, by subtracting
    the remaining equipment from how many the player started with. To ensure we get
    a positive number we use the abs function which returns an absolute value. We
    also grab the final score of the level and update the grid.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先找到刚刚完成的级别的行。然后，我们通过循环运行设备，看看在级别中使用了多少设备，通过从玩家开始使用的设备数量中减去剩余设备数量来实现。为了确保我们得到一个正数，我们使用绝对值函数，它返回一个绝对值。我们还获取级别的最终得分并更新网格。
- en: We want to run this script only upon the successful completion of a level, and
    the easiest place to put this is into `scr_WinCondition`, just before the last
    line of code where we return a true value.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望仅在成功完成级别时运行此脚本，而将其放置的最简单的地方是在`scr_WinCondition`中，在我们返回一个真值的最后一行代码之前。
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sending the data to Flurry
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据发送到Flurry
- en: The data is now properly updated each time the level is played and successfully
    completed. All we need to do now is send the data to Flurry. Flurry does not update
    in real time, but instead compiles the data several times a day. If we send bits
    and pieces of data individually throughout the entire play session, that data
    might be separated when it is compiled, resulting in anomalies. To help prevent
    this, we are going to send all the relevant data of every level each time we want
    to update. Flurry will recognize the changes and keep the data together.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据在每次玩级别并成功完成后都会得到正确更新。现在我们需要做的就是将数据发送到Flurry。Flurry不是实时更新的，而是每天编译数据几次。如果我们在整个游戏会话期间逐个发送数据的各个部分，那么当编译时，这些数据可能会被分开，导致异常。为了帮助防止这种情况发生，我们将在每次更新时发送每个级别的所有相关数据。Flurry将识别更改并保持数据在一起。
- en: Create a new Script, `scr_Analytics_Send`, and run a loop through all the level
    data and send it out.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的脚本，`scr_Analytics_Send`，并通过所有级别数据运行一个循环并发送出去。
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this loop, we start by grabbing the name of the room stored in the grid and
    all the values for each piece of data. Using the function `analytics_event_ext`
    we can send up to 10 different pieces of data to Flurry. The first parameter is
    the category of data, sent as a string, in this case we are using the name of
    the levels as categories. All the following parameters are key/value pairs with
    the name of the data we are tracking and its associated value.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个循环中，我们首先获取网格中存储的房间名称以及每个数据的所有值。使用函数`analytics_event_ext`，我们可以向Flurry发送多达10个不同的数据。第一个参数是数据的类别，以字符串形式发送，这里我们使用级别的名称作为类别。所有接下来的参数都是键/值对，其中包括我们正在跟踪的数据的名称及其关联值。
- en: We need to send an initial set of analytics upon the start of the game, so we
    can start with a clean slate. Reopen `scr_Global_Analytics` and send the data
    at the end of the script.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在游戏开始时发送一组初始分析数据，这样我们就可以从干净的状态开始。重新打开`scr_Global_Analytics`并在脚本的最后发送数据。
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We also need to send the data out upon completion of the level. Reopen `scr_Level_Stats`
    and send the data at the end of the script as well.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在完成级别时发送数据。重新打开`scr_Level_Stats`并在脚本的最后发送数据。
- en: We are now finished implementing the analytics. All that is left is to put it
    up on the web. Save the game, click on **Create Application**, and upload the
    new version of the game to the server.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经完成了分析的实施。现在剩下的就是将其放到网络上。保存游戏，单击**创建应用程序**，并将游戏的新版本上传到服务器。
- en: Play the game several times, making sure to use differing amounts of equipment
    and retrying levels each time. We want to have some basic data tracked, so we
    can see what it all means.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多次玩游戏，确保使用不同数量的设备并在每次重试级别。我们希望跟踪一些基本数据，以便我们可以看到这一切意味着什么。
- en: Understanding the Analytics
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解分析
- en: We are tracking several pieces of data, and Flurry will be compiling this information
    into event logs. We can see when a session has occurred and what happened during
    that play session. While this is somewhat useful, Flurry breaks things down even
    further on a global scale that will show us how each level is played on average.
    Let's take a moment to see what Flurry provides us with. Before we get started,
    it is important to know that Flurry Analytics are not updated in real time, and
    it may take a few hours before we see any data appear.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在跟踪几个数据，并且Flurry将把这些信息编译成事件日志。我们可以看到会话何时发生以及在播放会话期间发生了什么。虽然这有些有用，但Flurry甚至在全球范围内进一步细分，以显示每个级别的平均游玩情况。让我们花点时间看看Flurry为我们提供了什么。在开始之前，重要的是要知道Flurry
    Analytics不是实时更新的，可能需要几个小时才能看到任何数据出现。
- en: Log in to your Flurry account and go to your **Destruct** application page.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Flurry帐户并转到您的**Destruct**应用程序页面。
- en: The very first statistic you will see on the **Dashboard** is the **Sessions**
    graph, as shown in the next screenshot. Here we can see how many times the game
    was played each day. There is also information, such as average duration of each
    play session, where in the world people are playing the game from, and so on.![Understanding
    the Analytics](img/4100_09_18.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**仪表板**上，您将看到的第一个统计数据是**会话**图表，如下截图所示。在这里，我们可以看到游戏每天被玩的次数。还有一些信息，比如每个游戏会话的平均持续时间，世界各地的人们从哪里玩游戏等。![理解分析](img/4100_09_18.jpg)
- en: Click on **Events** on the left-hand side menu. The first option is the **Event
    Summary**, as shown in the following screenshot, which displays how often the
    level was played and the percentage of users that have completed this level per
    session.![Understanding the Analytics](img/4100_09_19.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单上单击**事件**。第一个选项是**事件摘要**，如下截图所示，显示了级别被玩的频率以及每个会话中完成该级别的用户百分比。![理解分析](img/4100_09_19.jpg)
- en: If we click on the little pie icon of a level, we will get a breakdown of the
    individual event parameters. Each parameter will show the total usage of all sessions.
    As can be seen in the following screenshot, one player used three pieces of TNT,
    another needed only two, and six players did not use any TNT at all.![Understanding
    the Analytics](img/4100_09_20.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们点击一个级别的小饼图标，我们将得到单个事件参数的详细信息。每个参数将显示所有会话的总使用量。如下面的截图所示，一个玩家使用了三个TNT，另一个只需要两个，还有六个玩家根本没有使用任何TNT。![理解分析](img/4100_09_20.jpg)
- en: Having this type of information is incredibly valuable. Knowing where players
    stop playing the game can tell us where improvements can be made. Tracking what
    the player is using during the game lets us know if the game is balanced properly.
    The more useful data we can gather, the better we can apply the lessons learned
    to future games.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这种类型的信息非常有价值。知道玩家在哪里停止玩游戏可以告诉我们哪里可以做出改进。跟踪玩家在游戏中使用的内容让我们知道游戏是否平衡。我们能够收集的数据越多，我们就能更好地将所学到的经验应用到未来的游戏中。
- en: Making money with your games
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用你的游戏赚钱
- en: Releasing a game is a fantastic accomplishment, but every developer at some
    point is going to want to earn some money from their efforts. The most common
    way to monetize a game is to place advertising on the site, but there are a few
    drawbacks with this when it comes to HTML5 games. The first problem is that the
    site will need a very high volume of traffic before enough clicks have accrued
    to earn any money. This affects the second problem, which is that advertising
    only works if people play the game on the specific site's web page. Unfortunately,
    other sites can embed HTML5 games through an **iframe** , which is a window inside
    a web page that allows content from another site to be displayed, and place their
    own advertising around it. This can be quite frustrating, as it means we are not
    earning money even though the game is running on our site. Happily, there are
    other ways to monetize a game, such as sponsorship.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 发布游戏是一个了不起的成就，但是每个开发者都会在某个时候希望从自己的努力中赚点钱。赚钱的最常见方式是在网站上放置广告，但是当涉及到HTML5游戏时，这种方式有一些缺点。第一个问题是网站需要非常高的流量才能够积累足够的点击量来赚钱。这影响了第二个问题，即广告只有在人们在特定网站的网页上玩游戏时才会起作用。不幸的是，其他网站可以通过iframe嵌入HTML5游戏，并在周围放置自己的广告。这可能会令人沮丧，因为这意味着尽管游戏在我们的网站上运行，但我们却没有赚到钱。幸运的是，还有其他赚钱的方式，比如赞助。
- en: '**Sponsors** are game portals that will pay money to place their brand on a
    game. The branding is usually the sponsor''s logo as the splash screen seen at
    the start of the game, but can also include things such as a button that links
    back to their site or what the Facebook post shows. The only downside to sponsorship
    is that there aren''t many game portals that currently host HTML5 games, which
    means fewer potential offers. Looking to the future, expect more and more portals
    to jump onboard as HTML5 games mature and demand increases.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**赞助商**是愿意支付费用将他们的品牌放在游戏上的游戏门户。品牌通常是赞助商的标志，显示在游戏开始时的闪屏上，但也可以包括诸如一个按钮，链接回他们的网站或者Facebook帖子显示的内容等。赞助的唯一缺点是目前没有许多游戏门户托管HTML5游戏，这意味着较少的潜在报价。展望未来，随着HTML5游戏的成熟和需求的增加，预计会有越来越多的门户加入。'
- en: One of the best places to attempt to find sponsorship isn't a game portal at
    all, but rather a marketplace for all types of browser-based games. FGL, [http://www.fgl.com](http://www.fgl.com),
    was originally created as a place to connect flash game developers with sponsors,
    but recently it has expanded into HTML5 and Unity games, as well as accepting
    games for iOS and Android devices. This marketplace allows developers to expose
    their game privately to sponsors and other game developers, gain feedback, and
    when ready, put the game up for bidding. Unlike a traditional auction house where
    the highest bid wins, the developer can choose which offer they prefer and can
    negotiate with bidders over the exact terms of the deal. There is no guarantee
    that a game will be offered any money, but if there is a chance to get money up
    front, this is where it will likely happen.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找赞助的最佳地方并不是游戏门户，而是各种基于浏览器的游戏的市场。FGL，[http://www.fgl.com](http://www.fgl.com)，最初是作为一个连接Flash游戏开发者和赞助商的地方创建的，但最近它已经扩展到HTML5和Unity游戏，并接受iOS和Android设备的游戏。这个市场允许开发者私下向赞助商和其他游戏开发者展示他们的游戏，获得反馈，并在准备好时进行竞标。与传统的拍卖行不同，最高出价者获胜，开发者可以选择他们更喜欢的报价，并可以与出价者就交易的具体条款进行协商。不能保证游戏会被提供任何资金，但如果有机会提前获得资金，那么很可能会在这里发生。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There we have it! In this chapter we covered a wide range of things. We started
    by uploading a game to a web server using an FTP client. We then integrated Facebook
    into the game, allowing players to log into their account and post level scores
    to their walls. We then implemented analytics using Flurry to track how players
    are playing the game. Finally, we briefly spoke about making money off our games
    through sponsorship.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的全部内容！在本章中，我们涵盖了各种事情。我们首先使用FTP客户端将游戏上传到Web服务器。然后我们将Facebook集成到游戏中，允许玩家登录他们的账户并将级别分数发布到他们的动态。然后我们使用Flurry实施了分析，跟踪玩家如何玩游戏。最后，我们简要谈到了通过赞助赚钱的问题。
- en: 'Now that you have completed this book, you should have a very solid foundation
    to build your own games. We started by exploring the GameMaker: Studio interface
    and building the simplest of games. We took a look at creating art and audio so
    that we could improve the quality of our games. We then focused on using the GameMaker
    Language to code several games. We started with a simple side-scrolling shooter
    that demonstrated the basics of scripting. We then built upon that knowledge by
    creating an adventure game with multiple rooms and enemies on paths. We learned
    how to better structure our games and improve our scripting efficiency in our
    platforming boss fight. From there we moved onto using Box2D physics to create
    a simple tower toppling game, which we then polished into a full game with a full
    frontend, particle effects, Facebook integration, and Flurry Analytics.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你已经完成了这本书，你应该有一个非常扎实的基础来制作自己的游戏。我们从探索GameMaker: Studio界面和构建最简单的游戏开始。我们看了一下如何创建艺术和音频，以提高游戏的质量。然后，我们专注于使用GameMaker语言来编写几款游戏。我们从一个简单的横向射击游戏开始，展示了脚本编写的基础知识。然后，我们通过创建一个有多个房间和敌人路径的冒险游戏来扩展这些知识。我们学会了如何更好地构建我们的游戏，并在我们的平台Boss战中提高我们的脚本效率。然后，我们开始使用Box2D物理引擎创建一个简单的塔倒游戏，然后将其打磨成一个完整的游戏，包括完整的前端、粒子效果、Facebook集成和Flurry
    Analytics。'
- en: 'GameMaker: Studio still has plenty more to offer and new features are constantly
    being added. It''s up to you to use all of this acquired knowledge to make games
    of your own design. Have fun exploring the possibilities of the HTML5 platform
    and get your games out there. I wish you luck!'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'GameMaker: Studio仍然有很多功能可以提供，新功能也在不断添加。现在轮到你利用所有这些所学知识来制作自己设计的游戏了。玩得开心，探索HTML5平台的可能性，并让你的游戏问世。祝你好运！'
