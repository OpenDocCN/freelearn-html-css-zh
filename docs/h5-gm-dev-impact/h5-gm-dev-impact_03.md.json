["```js\n.requires(\n  'impact.game',\n  'impact.font',\n  'game.levels.level1'\n)\ninit: function() {\n  // Initialize your game here; bind keys etc.\n  this.loadLevel(LevelLevel1);\n},\n```", "```js\nvar x = ig.system.width/2,\nvar y = ig.system.height/2;\nthis.font.draw( 'It Works!', x, y, ig.Font.ALIGN.CENTER );\n```", "```js\nig.module('game.entities.player')\n.requires(\n'impact.entity')\n.defines( function(){\n  EntityPlayer = ig.Entity.extend({\n  });\n});\n```", "```js\n'game.entities.player'\n```", "```js\nEntityPlayer = ig.Entity.extend({\n  size: {x:32,y:48},\n  health: 200,\n  animSheet: new ig.AnimationSheet('media/player.png', 32, 48 ), init: function( x, y, settings ) {\n    this.parent( x, y, settings );\n    // Add the animations\n    this.addAnim( 'idle', 1, [0] );\n  }\n});\n```", "```js\n// move your character\nig.input.bind(ig.KEY.UP_ARROW, 'up');\nig.input.bind(ig.KEY.DOWN_ARROW,'down');\nig.input.bind(ig.KEY.LEFT_ARROW,'left');\nig.input.bind(ig.KEY.RIGHT_ARROW,'right');\n```", "```js\nthis.addAnim('down',0.1,[0,1,2,3,2,1,0]);\nthis.addAnim('left',0.1,[4,5,6,7,6,5,4]);\nthis.addAnim('right',0.1,[8,9,10,11,10,9,8]);\nthis.addAnim('up',0.1,[12,13,14,15,14,13,12]);\n```", "```js\nupdate: function(){\n  this.parent();\n  //player movement\n  if(ig.input.state('up')){\n    this.vel.y = -100;\n    this.currentAnim = this.anims.up;\n  }\n  else if(ig.input.pressed('down')) {\n    this.vel.y = 100;\n    this.currentAnim = this.anims.down;\n  }\n  else if(ig.input.state('left')){\n    this.vel.x = -100;\n      this.currentAnim = this.anims.left;\n  }\n  else if(ig.input.state('right')){\n    this.vel.x = 100;\n    this.currentAnim = this.anims.right;\n  }\n  else{\n    this.vel.y = 0;\n    this.vel.x = 0;\n    this.currentAnim = this.anims.idle;\n  }\n}\n```", "```js\nvar gameviewport= ig.game.screen;\nvar gamecanvas= ig.system;\nvar player = this.getEntitiesByType( EntityPlayer )[0];\ngameviewport.x = player.pos.x - gamecanvas.width /2;\ngameviewport.y = player.pos.y - gamecanvas.height /2;\n```", "```js\n'game.entities.enemy',\n```", "```js\nig.module('game.entities.enemy')\n.requires('impact.entity')\n.defines(function(){\n  EntityEnemy = ig.Entity.extend({\n  }); \n});\n```", "```js\nsize: {x:32,y:48},\nanimSheet: new ig.AnimationSheet('media/enemy.png',32,48),\ninit: function(x, y , settings){\n  this.addAnim('idle',1,[0]);\n  this.addAnim('down',0.1,[0,1,2,3,2,1,0]);\n  this.addAnim('left',0.1,[4,5,6,7,6,5,4]);\n  this.addAnim('right',0.1,[8,9,10,11,10,9,8]);\n  this.addAnim('up',0.1,[12,13,14,15,14,13,12]);\n  this.parent(x,y,settings);\n}\n```", "```js\ncollides: ig.Entity.COLLIDES.ACTIVE,\ntype: ig.Entity.TYPE.A,\ncheckAgainst: ig.Entity.TYPE.B,\n```", "```js\ncollides: ig.Entity.COLLIDES.PASSIVE,\ntype: ig.Entity.TYPE.B,\ncheckAgainst: ig.Entity.TYPE.A,\n```", "```js\n 'impact.debug.debug',\n```", "```js\nsize: {x:18,y:40},\noffset: {x: 7, y: 4},\n```", "```js\nig.input.bind(ig.KEY.MOUSE1,'attack');\n```", "```js\n'game.entities.projectile',\n```", "```js\nig.module('game.entities.projectile')\n.requires('impact.entity')\n.defines( function(){\n  EntityProjectile = ig.Entity.extend({\n    size: {x:8,y:4},\n    vel: {x:100,y:0},\n    animSheetX: new ig.AnimationSheet('media/projectile_x.png',8,4),\n    animSheetY: new ig.AnimationSheet('media/projectile_y.png',4,8),\n    init: function(x, y , settings){\n      this.parent(x,y,settings);\n      this.anims.xaxis = new ig.Animation(this.animSheetX,1,[0]);\n      this.anims.yaxis = new ig.Animation(this.animSheetY,1,[0]);\n      this.currentAnim = this.anims.xaxis;\n    }\n  })\n});\n```", "```js\nif(ig.input.pressed('attack')) {\n  ig.game.spawnEntity('EntityProjectile',this.pos.x,this.pos.y);\n}\n```", "```js\nif (this.direction == 'right'){\n  this.vel.x = this.velocity;\n  this.vel.y = 0;\n  this.currentAnim = this.anims.xaxis;\n  this.anims.xaxis.flip.x = false;\n}\nelse if (this.direction == 'left'){\n  this.vel.x = -this.velocity;\n  this.vel.y = 0;\n  this.currentAnim = this.anims.xaxis;\n  this.anims.xaxis.flip.x = true;\n}\nelse if (this.direction == 'up'){\n  this.vel.x = 0;\n  this.vel.y = -this.velocity;\n  this.currentAnim = this.anims.yaxis;\n  this.anims.yaxis.flip.y = false;\n  }\nelse if (this.direction == 'down'){\n  this.vel.x = 0;\n  this.vel.y = this.velocity;\n  this.currentAnim = this.anims.yaxis;\n  this.anims.yaxis.flip.y = true;\n}\n```", "```js\nvelocity: 100,\n```", "```js\ndirection: 'right',\n```", "```js\nelse if(ig.input.state('right')){\n  this.vel.x = 100;\n  this.currentAnim = this.anims.right;\n  this.lastpressed = 'right';\n}\n```", "```js\nif(ig.input.pressed('attack')) {\n  ig.game.spawnEntity('EntityProjectile',this.pos.x,this.pos.y,{direction:this.lastpressed});\n}\n```", "```js\nlifetime: 0,\nupdate:function(){\n  if(this.lifetime<=100){this.lifetime +=1;}else{this.kill();}\n  this.parent();\n}\n```", "```js\ncollides: ig.Entity.COLLIDES.NONE,\ntype: ig.Entity.TYPE.A,\ncheckAgainst: ig.Entity.TYPE.B,\n```", "```js\ncheck: function(other){\n  other.receiveDamage(100,this);\n  this.kill();\n  this.parent();\n}\n```", "```js\nbounciness: 1,\n```", "```js\nif (this.vel.x< 0 &&this.direction == 'right'){this.anims.xaxis.flip.x = true;}\nelse if (this.vel.x> 0 &&this.direction == 'left'){this.anims.xaxis.flip.x = false;}\nelse if (this.vel.y> 0 &&this.direction == 'up'){this.anims.yaxis.flip.y = true;}\nelse if (this.vel.y< 0 &&this.direction == 'down'){this.anims.yaxis.flip.y = false;}\n```", "```js\nhealth: 200,\n```", "```js\nig.module('plugins.ai').\ndefines(function(){\n  ig.ai = ig.Class.extend({ \n  })\n})\n```", "```js\n'plugins.ai',\n```", "```js\ninit: function(entity){\n  ig.ai.ACTION = { Rest:0,MoveLeft:1,MoveRight:2,MoveUp:3,MoveDown:4,Attack:5,Block:6 };\n  this.entity = entity;\n}\n```", "```js\nupdate: function(){\n/* let the artificial intelligence engine tell us what to do */\n  var action = ai.getAction(this);\n/* listen to the commands with an appropriate animation and velocity */\n  switch(action){\n    case ig.ai.ACTION.Rest:\n    this.currentAnim = this.anims.idle;\n    this.vel.x = 0;\n    this.vel.y = 0;\n    break;\n    case ig.ai.ACTION.MoveLeft:\n    this.currentAnim = this.anims.left;\n    this.vel.x = -this.speed;\n    break;\n    case ig.ai.ACTION.MoveRight :\n    this.currentAnim = this.anims.right;\n    this.vel.x = this.speed;\n    break;\n    case ig.ai.ACTION.MoveUp:\n    this.currentAnim = this.anims.up;\n    this.vel.y = -this.speed;\n    break;\n    case ig.ai.ACTION.MoveDown:\n    this.currentAnim = this.anims.down;\n    this.vel.y = this.speed;\n    break;\n    case ig.ai.ACTION.Attack:\n    this.currentAnim = this.anims.idle;\n    this.vel.x = 0;\n    this.vel.y = 0;\n    ig.game.getEntitiesByType('EntityPlayer')[0].receiveDamage(2,this);\n    break;\n    default: \n    this.currentAnim = this.anims.idle;\n    this.vel.x = 0;\n    this.vel.y = 0;\n    break;\n  }\n  this.parent();\n}\n```", "```js\n.requires('impact.entity','plugins.ai')\n```", "```js\nspeed:50\n```", "```js\ngetAction: function(entity){\n  this.entity = entity;\n  //by default do nothing\n  var playerList= ig.game.getEntitiesByType('EntityPlayer');\n  var player = playerList[0];\n  var distance = this.entity.distanceTo(player);\n  var angle = this.entity.angleTo(player);\n  var x_dist = distance * Math.cos(angle);\n  var y_dist = distance * Math.sin(angle);\n  var collision = ig.game.collisionMap ;\n  //if collision between the player and the enemy occurs\n  //collision.trace is the way ImpactJS simulates line of sight detection. This will be explained after this block of code.\n  var res = collision.trace( this.entity.pos.x,this.entity.pos.y,x_dist,y_dist,\n    this.entity.size.x,this.entity.size.y);\n  if( res.collision.x){\n    if(angle > 0){return this.doAction(ig.ai.ACTION.MoveUp);}else{return this.doAction(ig.ai.ACTION.MoveDown);}\n  }\n  if(res.collision.y){\n    if(Math.abs(angle) >Math.PI / 2){return this.doAction(ig.ai.ACTION.MoveLeft)}else{return this.doAction(ig.ai.ACTION.MoveRight);}\n  }\n  if(distance < 30){\n    //decide between attacking, blocking or just being lazy //\n    var decide = Math.random();\n    if(decide < 0.3){return this.doAction(ig.ai.ACTION.Block);}\n    if(decide < 0.6){return this.doAction(ig.ai.ACTION.Attack);}\n    return this.doAction(ig.ai.ACTION.Rest);\n  }\n  if( distance > 30 && distance < 300) {\n    //if you can walk in a straight line: go for it\n    if(Math.abs(angle) <Math.PI / 4){ return this.doAction(ig.ai.ACTION.MoveRight); }\n    if(Math.abs(angle) > 3 * Math.PI / 4) {return this.doAction(ig.ai.ACTION.MoveLeft);}\n    if(angle < 0){return this.doAction(ig.ai.ACTION.MoveUp);}\n    return this.doAction(ig.ai.ACTION.MoveDown);\n  }\n  return this.doAction(ig.ai.ACTION.Rest);\n}\n```", "```js\nif(distance <entity.range){\n  var decide = Math.random();\n  if(decide < 0.3){return this.doAction(ig.ai.ACTION.Block);}\n  if(decide < 0.02){return this.doAction(ig.ai.ACTION.Attack);}\n  return this.doAction(ig.ai.ACTION.Rest);\n}\n```", "```js\nig.game.getEntitiesByType('EntityPlayer')[0].receiveDamage(40,this);\n```", "```js\ndoAction: function(action){\n  this.lastAction = action;\n  return action;\n},\n```", "```js\n'game.entities.healthpotion',\n```", "```js\nig.module('game.entities.healthpotion')\n.requires('impact.entity')\n.defines( function(){\n  EntityHealthpotion = ig.Entity.extend({\n    size: {x:32,y:32},\n    collides: ig.Entity.COLLIDES.NONE,\n    type: ig.Entity.TYPE.B,\n    checkAgainst: ig.Entity.TYPE.A,\n    animSheet: new ig.AnimationSheet('media /healthpotion.png',20,25),\n    init: function(x, y , settings){\n      this.parent(x,y,settings);\n      this.addAnim('idle',1,[0]);\n    },\n    check: function(other){\n      other.receiveDamage(-500,this);\n      this.kill();\n    }\n  })\n});\n```", "```js\ncheck: function(other){\n  ig.game.addCoin();\n  his.kill();\n}\n```", "```js\nname: \"player\",\n```", "```js\ncheck: function(other){\n  if (other.name == \"player\"){\n  //ig.game.addCoin();\n  this.kill();\n}}\n```", "```js\nGameInfo = new function(){\n  this.coins = 0;\n  this.score = 0;\n},\n```", "```js\naddCoin: function(){\n    GameInfo.coins += 1; //add a coin to the money\n},\nincreaseScore: function(points){\n  GameInfo.score +=points;\n},\n```", "```js\nkill: function(){\n  ig.game.increaseScore(100);\n  this.parent();\n}\n```", "```js\nthis.projectiles = 10;\n```", "```js\naddProjectile: function(nbr_projectiles){\n  GameInfo.projectiles +=nbr_projectiles;\n},\nsubstractProjectile: function(){\n  GameInfo.projectiles -=1;\n}\n```", "```js\nif(ig.input.pressed('attack')) {\n  if (GameInfo.projectiles> 0){ ig.game.spawnEntity('EntityProjectile',this.pos.x,this.pos.y,{direction:this.lastpressed});\n  ig.game.substractProjectile();\n  }\n}\n```", "```js\nig.module('game.entities.pickupprojectile')\n.requires('impact.entity')\n.defines( function(){\n  EntityPickupprojectile = ig.Entity.extend({\n    size: {x:8,y:4},\n    collides: ig.Entity.COLLIDES.NONE,\n    type: ig.Entity.TYPE.B,\n    name: \"pickupprojectile\",\n    checkAgainst: ig.Entity.TYPE.A,\n    animSheet: new ig.AnimationSheet('media /projectile_x.png',8,4),\n    init: function(x, y , settings){\n      this.parent(x,y,settings);\n      this.addAnim('idle',1,[0]);\n    },\n    check: function(other){\n      if (other.name == \"player\"){\n        ig.game.addProjectile(10);\n        this.kill();\n      }}\n  })\n});\n```", "```js\n'game.entities.levelchange',\n'game.entities.trigger',\n'game.entities.void',\n```", "```js\n'game.levels.level1',\n'game.levels.endgame',\n```", "```js\nig.game.player = ig.game.getEntitiesByType( EntityPlayer )[0];\nvar health = ig.game.player.health;\nig.game.loadLevel( ig.global['Level'+levelName] );\nif(this.spawn){\n  var spawnpoint = ig.game.getEntityByName(this.spawn);\n  if(spawnpoint)\n  {\n    ig.game.spawnEntity(EntityPlayer, spawnpoint.pos.x, spawnpoint.pos.y);\n    ig.game.player = ig.game.getEntitiesByType( EntityPlayer )[0];\n    ig.game.player.health = health; \n  }\n}\n```", "```js\nig.module('game.entities.textballoon'\n  )\n.requires('impact.entity','impact.game'\n  )\n.defines( function(){\n});\n```", "```js\nWordWrap = ig.Class.extend({\n  text:\"\",\n  maxWidth:100,\n  cut: false,\n  init:function (text, maxWidth, cut) {\n    this.text = text;\n    this.maxWidth = maxWidth;\n    this.cut = cut;\n  },\n  wrap:function(){\n    var regex = '.{1,' +this.maxWidth+ '}(\\\\s|$)' + (this.cut ? '|.{' +this.maxWidth+ '}|.+$' : '|\\\\S+?(\\\\s|$)');\n    return this.text.match( RegExp(regex, 'g') ).join( '\\n' );\n  }\n}),\n```", "```js\nEntityTextballoon = ig.Entity.extend({\n  pos:{x:0,y:0},// a default position\n  size:{x:100,y:50},// the default size\n  lifeTime:200,// show the balloon for 200 frames\n  //media used by text balloon\n  font : new ig.Font('media/font.png'),// the font sheet\n  animSheet: new ig.AnimationSheet('media/gui_dialog.png',100,50),// the animation\n  wrapper : null,// place holder\n  init: function(x,y,settings){\n    this.zIndex = 1000;// always show on top\n    this.addAnim('idle',1,[0]);// the default graphic\n    this.currentAnim = this.anims.idle;\n    this.parent(x,y,settings);// defaults\n    this.wrapper = new WordWrap('Epicness awaits you!',20);//we only have one text so use it as a default\n  },\n});\n```", "```js\nupdate:function(){\n  this.lifeTime = this.lifeTime -1;// counter for the lifetime\n  if(this.lifeTime< 0){this.kill();}// remove the balloon after 200 frames\n  this.parent();// defaults\n},\n```", "```js\ndraw:function(){\n  this.parent();// defaults\n  var x = this.pos.x - ig.game.screen.x + 5;// x coordinate draw position\n  var y = this.pos.y - ig.game.screen.y + 5;// y coordinate draw position\n  this.font.draw(this.wrapper.wrap(),x, y,ig.Font.ALIGN.LEFT);// put it on the screen\n}\n```", "```js\nig.module('game.entities.Talkie')\n.requires('impact.entity')\n.defines(function(){\nEntityTalkie = ig.Entity.extend({\n  })\n});\n```", "```js\nsize: {x:80,y:40},\noffset:{x:-5,y:0},\n// how to behave when active collision occurs\ncollides: ig.Entity.COLLIDES.PASSIVE,\ntype: ig.Entity.TYPE.B,\ncheckAgainst: ig.Entity.TYPE.A,\nname: 'Talkie',\ntalked:0,\nAnim:'idle', times:200,\n// where to find the animation sheet\nanimSheet: new ig.AnimationSheet('media/Talkie.png',32,48),\ninit: function(x, y , settings){\n  this.addAnim('idle',3,[0,1]);\n  this.addAnim('Talk',0.2,[0,1,2,1]);\n  this.currentAnim = this.anims.idle;\n  this.parent(x,y,settings);\n  },\n```", "```js\nupdate: function(){\n  if(this.times>=0 &&this.Anim == 'Talk'){\n    if(this.times == 200){this.currentAnim = this.anims.Talk;}\n    this.times = this.times -1;\n    }\n  if(this.times == 0){\n    this.currentAnim = this.anims.idle;\n    this.times = -1;\n    }\n  this.parent();\n  },\n```", "```js\ncheck: function(other){\n  if(this.talked == 0){\n    this.Anim = 'Talk';\n    this.talked = 1;\n    ig.game.spawnEntity('EntityTextBalloon',this.pos.x - 10,this.pos.y - 70,null);\n    ig.game.sortEntitiesDeferred();\n  }\n}\n```", "```js\nig.module('game.entities.Boss')\n.requires('plugins.ai','game.entities.enemy')\n.defines(function(){\n  EntityBoss = EntityEnemy.extend({\n    name: 'Boss',/* Let's call him the Boss*/\n    health: 300, /* he has more health than an ordinary enemy*/\n    speed:80, /* The default speed is higher than an enemy*/ \n    animSheet: new ig.AnimationSheet('media/enemyboss.png',32,48)\n    /* different animation sheet for the Boss */\n    receiveDamage: function(amount,from){\n      /* override the default because we want an end screen (or animation) */\n      /* the boss is stronger then everyone, so he doesn't get damaged that fast */\n      amount = amount / 2;\n      if(this.health - amount <= 0){\n      //ig.system.setGame(GameEnd); /*we want an end screen (or animation)*/\n      }\n    /* update the health status */\n    this.health = this.health - amount;\n    }\n  })\n});\n```", "```js\ncheck: function(other){\n  if (other.name == \"enemy\" || other.name == \"Boss\"){\n    other.receiveDamage(100,this);\n    this.kill();\n    this.parent();\n    }\n  }\n```"]