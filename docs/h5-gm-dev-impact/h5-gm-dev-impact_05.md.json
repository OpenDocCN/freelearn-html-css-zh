["```js\n    OpenScreen = ig.Game.extend({\n      StartImage : new ig.Image('media/StartScreen.png'),\n      init:function(){\n      if(ig.ua.mobile){\n        ig.system.setGame(MyGame);\n      }\n        ig.input.bind(ig.KEY.SPACE,'LoadGame');\n      },\n      init:function(){\n        if(ig.ua.mobile){ig.input.bindTouch( '#canvas','LoadGame' );}\n        else {ig.input.bind(ig.KEY.SPACE,'LoadGame');}\n      },\n    ```", "```js\n      update:function(){\n        if(ig.input.pressed('LoadGame')){\n          ig.system.setGame(MyGame);\n        }\n      },\n    ```", "```js\n      draw: function(){\n        this.parent();\n        this.StartImage.draw(0,0);\n        var canvas = document.getElementById('canvas');\n        if(canvas.getContext){\n          var context = canvas.getContext('2d');\n          context.fillStyle = \"rgb(150,29,28)\";\n          context.fillRect (10,10,100,30);\n        }\n        var font = new ig.Font('media/font.png');\n        font.draw('player:' + GameInfo.name,10,10);\n      }\n    }),\n    ```", "```js\n    ig.main( '#canvas', OpenScreen, 60, 320, 240, 2 );\n    ```", "```js\n    GameEnd = ig.Game.extend({\n      EndImage : new ig.Image('media/Winner.png'),\n\n      init:function(){\n        if(ig.ua.mobile){ig.input.bindTouch( '#canvas','LoadGame' );}\n        else {ig.input.bind(ig.KEY.SPACE,'LoadGame');}\n      },\n    ```", "```js\n      update:function(){\n        if(ig.input.pressed('LoadGame')){\n          ig.system.setGame(MyGame);\n        }\n      },\n    ```", "```js\n      draw: function(){\n        this.parent();\n        var font = new ig.Font('media/font.png');\n        this.StartImage.draw(0,0);\n\n      if(ig.ua.mobile){\n        font.draw('HIT THE SCREEN TO RESTART:',100,100);\n      }\n    else font.draw('HIT SPACE TO RESTART:',100,100);\n      }\n    }),\n    ```", "```js\n    kill: function(){\n      ig.game.gameWon();\n    }\n    ```", "```js\n    gameWon: function(){\n      ig.system.setGame(GameEnd);\n    }\n    ```", "```js\n    gameOver = ig.Game.extend({\n      gameOverImage : new ig.Image('media/GameOver.png'),\n      init: function(){\n        ig.input.bind(ig.KEY.SPACE,'LoadGame');\n      },\n      update:function(){\n        if(ig.input.pressed('LoadGame')){\n          ig.system.setGame(MyGame);\n        }\n      },\n      draw: function(){\n        this.parent();\n        var font = new ig.Font('media/font.png');\n        this.gameOverImage.draw(0,0);\n        font.draw('HIT SPACE TO RESTART',150,50);\n      }\n    }),\n    ```", "```js\n    kill: function(){\n        ig.game.gameOver();\n    }\n    ```", "```js\n    gameOver: function(){\n      ig.system.setGame(gameOver);\n    },\n    ```", "```js\ndummyUnitTest: function(inputnumber){\n  var outputnumber= Math.pow(inputnumber,2);\n  return null; // can cause an error in subsequentfunctions,comment out to fix it\n  return outputnumber;\n}\n```", "```js\nig.assert(this.dummyUnitTest('expected')==='expected','you introduced a logical error you should retrieve the same value as the input');\n```", "```js\nig.assert(typeof argument1 === 'number','the input is not a number');\nig.assert(typeof argument2 === 'number','the output is not a number');\nig.assert(typeof argument2 >= 0,'the output is negative');\nig.assert(typeof argument2 != null,'the output is null);\n```", "```js\n    ig.module(\n      'plugins.debug.MyDebugPanel'\n    )\n    .requires(\n      'impact.debug.menu',\n      'impact.entity',\n      'impact.game'\n    )\n    .defines(function(){\n    ig.Game.inject({\n      loadLevel: function( data ) {\n        this.parent(data);\n        ig.debug.panels.fancypanel.load(this);\n      }\n    })\n    })\n    ```", "```js\n    ig.Entity.inject({\n      _shouldUpdate: true,update: function() {if( this._shouldUpdate ) {this.parent();}\n      }\n    });\n    ```", "```js\n    MyFancyDebugPanel = ig.DebugPanel.extend({\n      init: function( name, label ) {\n        this.parent( name, label ); \n        this.container.innerHTML = '<em>Entities not loadedyet.</em>';\n      },\n    }\n    ```", "```js\n    load: function( game ) {\n      this.container.innerHTML = '';\n        for( var i = 0; i < game.entities.length; i++ ) {\n          var ent = game.entities[i];\n          if( ent.name ) {\n            var opt = new ig.DebugOption( 'Entity ' + ent.name, ent,'_shouldUpdate' );\n            this.addOption( opt );\n            this.container.appendChild(document.createTextNode('health: '+ ent.name + ' :' +ent.health));\n          }\n        }\n    },\n    ```", "```js\n    ready: function() {\n      // This function is automatically called when a new gameis created.\n      // ig.game is valid here!\n    },\n    beforeRun: function() {\n      // This function is automatically called BEFORE eachframe is processed.\n    },\n    afterRun: function() {\n      // This function is automatically called AFTER each frameis processed.\n    }\n    });\n    ```", "```js\n    ig.debug.addPanel({\n      type: MyFancyDebugPanel,\n      name: 'fancypanel',\n      label: 'Fancy Panel'\n    });\n    ```", "```js\nig.module('plugins.conversation.npc_con')\n.defines(function(){\nnpc_con=/*JSON[*/{\n  \"NPC_CONVO_KEY\":[1,2,3,4,5,6,7],\n  \"NPC_SPEECH\":[\"Hi, are you allright?\",\"That is great! Bye now!\",\"Ow, why? What is wrong?\",\"You are mean!\",\"Ow. You should see the doctor, he lives in the green house a bitfurther. Good luck!\",\"Please explain. Maybe I can help you?\",\"Bye!\"],\n  \"REPLY_SET_KEY\":[1,0,3,0,0,6,0]\n}\n});\n```", "```js\nig.module( 'plugins.conversation.pc_con' )\n.defines(function(){\npc_con=/*JSON[*/{\n  \"UNIQUE_REPLY_KEY\":[1,2,3,4,5,6,7,8],\n  \"REPLY_SET_KEY\":[1,1,1,3,3,3,6,6],\n  \"PC_SPEECH\":[\"Yes\",\"No\",\"Go away\",\"I am sick\",\"I am sick of you\",\"You know, stuff.\",\"I will be fine! Bye!\",\"Get lost! \"],\n  \"NPC_CONVO_KEY\":[2,3,4,5,4,6,7,4]\n}\n});\n```", "```js\n'plugins.conversation.npc_con',\n'plugins.conversation.pc_con',\n```", "```js\n    ig.module('plugins.data.cookie').\n      defines(function(){\n        ig.cookie = ig.Class.extend({\n        userName : null,\n        init: function(){\n          this.checkCookie();\n      },\n    ```", "```js\n    setCookie: function(c_name,value,exdays){\n      var exdate=new Date();\n      exdate.setDate(exdate.getDate() + exdays);\n      var c_value=escape(value) + ((exdays==null) ? \"\" : \";expires=\"+exdate.toUTCString());\n    document.cookie=c_name + \"=\" + c_value;\n    },\n    ```", "```js\n    getCookie: function(c_name){\n      var i,x,y,ARRcookies=document.cookie.split(\";\");\n      for (i=0;i<ARRcookies.length;i++){\n        x=ARRcookies[i].substr(0,ARRcookies[i].indexOf(\"=\"));\n        y=ARRcookies[i].substr(ARRcookies[i].indexOf(\"=\")+1);\n        x=x.replace(/^\\s+|\\s+$/g,\"\");\n        if (x==c_name){\n          return unescape(y);\n        }\n      }\n    },\n    ```", "```js\n    checkCookie :function(){\n      var username=this.getCookie(\"username\");\n      if (username!=null && username!=\"\"){\n      this.setUserName(username);\n      }\n      else {\n        username=prompt(\"Please enter your name:\",\"\");\n        if (username!=null && username!=\"\"){\n          this.setCookie(\"username\",username,365);\n        }\n      }\n    },\n    ```", "```js\n    getUserName: function(){\n      return this.userName;\n    },\n    setUserName: function(userName){\n      if(userName.length > 10){alert(\"username is too long\");}\n      else { this.userName = userName; }\n    }\n    ```", "```js\n    this.cookie = new ig.cookie();//ask username or retrieve ifnot set\n    this.userName = this.cookie.getUserName();//store theusername\n    ```", "```js\nig.module('plugins.data.local').\ndefines(function(){\n  ig.local = ig.Class.extend({\n    setData: function(key, data){\n      localStorage.setItem(key, data);\n    },\n    getData: function(key){ \n      return localStorage.getItem(key);\n    }\n  });\n})\n```", "```js\nLs = new ig.local(); //localstorage\n  Ls.setData(\"name\",\"Davy\");\n  alert(Ls.getData(\"name\"));\n```", "```js\n    'plugins.data.lawnchair.impact-plugin',\n    ```", "```js\n    this.store = new ig.Lawnchair({adaptor:'dom',table:'allscores'},function() { ig.log('teststore is ready'); }),\n    ```", "```js\n    this.saveScore = function(){\n      this.store.save({score:this.score});\n    }\n    ```", "```js\n    gameOver: function(){\n     GameInfo.saveScore();\n      ig.system.setGame(gameOver); \n    },\n    gameWon: function(){\n     GameInfo.saveScore();\n      ig.system.setGame(GameEnd); \n    }\n    ```", "```js\n        this.setScore = function(score){\n          if(typeof score == 'number')\n          this.score = score;\n        }; \n        ```", "```js\n        this.getScore = function() {\n          return this.score;\n        };\n        ```", "```js\n        this.getSavedScore = function(){\n          this.store.get('score',function(score){GameInfo.setScore(score.value) });\n          return this.getScore();\n        };\n        ```", "```js\n    font.draw('last score: ' + GameInfo.getSavedScore(), 10,20); \n    ```", "```js\n    ig.input.bind(ig.KEY.MOUSE1, 'mouseclick');\n    ```", "```js\n    name: \"player\",\n    movementspeed : 100,\n    mousewalking : 0,\n    takemouseinput : 0,\n    animSheet: new ig.AnimationSheet|( 'media/player.png', 32, 48 ),\n    ```", "```js\n    mousemovement: function(player){\n    if (player.mousewalking == 1 && player.takemouseinput == 1){\n      player.destinationx = ig.input.mouse.x + ig.game.screen.x;\n      player.destinationy = ig.input.mouse.y + ig.game.screen.y;\n      player.takemouseinput = 0;\n    }\n    else if(player.mousewalking == 1){\n      var distancetotargetx = player.destinationx - player.pos.x - (player.size.x/2) ;\n      var distancetotargety = player.destinationy - player.pos.y -(player.size.y/2) ;\n      if (Math.abs(distancetotargetx) > 5 ||Math.abs(distancetotargety) > 5){\n        if (Math.abs(distancetotargetx) > Math.abs(distancetotargety)){\n          if (distancetotargetx > 0){\n            player.vel.x = player.movementspeed;\n            var xydivision = distancetotargety / distancetotargetx;\n            player.vel.y = xydivision * player.movementspeed;\n            player.currentAnim = player.anims.right;\n            player.lastpressed = 'right';\n          }\n          else{\n            player.vel.x = -player.movementspeed;\n            var xydivision = distancetotargety /Math.abs(distancetotargetx);\n            player.vel.y = xydivision * player.movementspeed;\n            player.currentAnim = player.anims.left;\n            player.lastpressed = 'left';\n          }\n          }\n        else{\n          if (distancetotargety > 0){\n            player.vel.y = player.movementspeed;\n            var xydivision = distancetotargetx / distancetotargety;\n            player.vel.x = xydivision * player.movementspeed;\n            player.currentAnim = player.anims.down;\n            player.lastpressed = 'down';\n          }\n          else{\n            player.vel.y = -player.movementspeed;\n            var xydivision = distancetotargetx /Math.abs(distancetotargety);\n            player.vel.x = xydivision * player.movementspeed;\n            player.currentAnim = player.anims.up;\n            player.lastpressed = 'up';\n          }\n          }\n        }\n      else{\n        player.vel.y = 0;\n        player.vel.x = 0;\n        player.mousewalking = 0;\n        player.currentAnim = player.anims.idle;\n      }\n    }\n    },\n    ```", "```js\n    if( ig.input.pressed('mouseclick')){\n    this.mousewalking = 1;\n    this.takemouseinput = 1;\n    }\n    ```", "```js\n    mousemovement();\n    ```", "```js\n    if(ig.input.state('up')){\n      this.mousewalking = 0;\n      this.vel.y =this.movementspeed;\n      this.currentAnim = this.anims.up;\n      this.lastpressed = 'up';\n    }\n    ```", "```js\n    Elseif(this.mousewalking == 0){\n      this.vel.y = 0; \n      this.vel.x = 0;\n      this.currentAnim = this.anims.idle;\n    }\n    ```", "```js\n    ig.module('plugins.functions.spawnlocations').defines(function(){\n      ig.spawnlocations = ig.Class.extend({\n      });\n    })\n    ```", "```js\n    spawnIf: function(x, y)\n    {\n      if (this.CollisionAt(x,y) || this.getEntitiesAt(x,y)){\n        var x1 = x + Math.round(Math.random())*10;\n        var x2 = x + Math.round(Math.random())*10;\n        this.spawnIf(x1,x2); //recursion\n      }\n      ig.game.spawnEntity('EntityEnemy', x, y);\n    },\n    ```", "```js\n    getEntitiesAt: function(x, y)\n    {\n      var n = ig.game.entities.length;\n      var ents = [];\n      for (var i=0; i<n; i++)\n      {\n        var ent = ig.game.entities[i],\n        x0 = ent.pos.x,\n        x1 = x0 + ent.size.x,\n        y0 = ent.pos.y,\n        y1 = y0 + ent.size.y;\n        if (x0 <= x && x1 > x && y0 <= y && y1 > y)\n          return true;\n      }\n      return false;\n    },\n    ```", "```js\n    CollisionAt: function(x,y)\n    {\n      var Map = ig.game.collisionMap;\n      var ent = new EntityEnemy();\n      var res = Map.trace( x, y, x+ ent.size.x,y + ent.size.y,ent.size.x,ent.size.y ); // position, distance, size\n      // true if there is a collision on either x or y axis \n      return res.collision.x || res.collision.y;\n    }\n    ```", "```js\n    var spaw = new ig.spawnlocations();\n    spaw.spawnIf(100,200);\n    ```", "```js\n    ig.module(\n      'plugins.conversation.menu'\n    )\n    .defines(function(){\n      window.Menu = ig.Class.extend({\n        init: function(_font,_choice_spacing,_choices,_entity){\n          this.selectedChoice = 0;\n          this.cursorLeft = \">>\";\n          this.cursorRight = \"<<\";\n          this.cursorLeftWidth =_font.widthForString(this.cursorLeft);\n          this.cursorRightWidth =_font.widthForString(this.cursorRight);\n          var i,labeled_choice;\n          for(i=0;i<_choices.length;i++){\n            _choices[i].labelWidth =_font.widthForString(_choices[i].label);\n          } \n          this.font = _font;\n          this.choices = _choices;\n          this.choice_spacing = _choice_spacing;\n          this.entity = _entity;\n          this.MenubackgroundMenubackground = newig.Image('media/black_square.png');\n          this.Menubackground.height = this.choices.length *this.choice_spacing;\n        }\n      }\n    },\n    ```", "```js\n    draw: function(_baseX, _baseY){\n      var _choices = this.choices;\n      var _font = this.font;\n      var i,choice,x,y;\n      if (this.choices.length > 0){\n        var Menubackground = newig.Image('media/black_square.png');\n        Menubackground.height = this.choices.length *this.choice_spacing;\n        Menubackground.width = 1;\n        for(var k=0;k<_choices.length;k++){\n          choice = _choices[k];\n          if(this.font.widthForString(choice.label)>Menubackground.width){\n            Menubackground.width =this.font.widthForString(choice.label);\n          }\n        }\n      Menubackground.width = this.Menubackground.width +this.cursorLeftWidth + this.cursorRightWidth + 16;\n      Menubackground.draw(_baseX-this.Menubackground.width/2,_baseY);\n      };\n    }\n    ```", "```js\n    for(i=0;i<_choices.length;i++){\n      choice = _choices[i];\n      choice.labelWidth = _font.widthForString(choice.label);\n      y = _baseY + i * this.choice_spacing + 2;\n      _font.draw(choice.label, _baseX, y,ig.Font.ALIGN.CENTER);\n      if (this.selectedChoice === i){\n        x = _baseX - (choice.labelWidth / 2) -this.cursorLeftWidth - 8;\n        _font.draw(this.cursorLeft, x, y - 1);\n        x = _baseX + (choice.labelWidth / 2) + 8;\n        _font.draw(this.cursorRight, x, y - 1);\n      }\n    }\n    ```", "```js\n    if(ig.input.pressed('up')){\n      this.selectedChoice--;\n      this.selectedChoice = (this.selectedChoice < 0) ? 0 :this.selectedChoice;\n    }\n    else if(ig.input.pressed('down')){\n      this.selectedChoice++;\n      this.selectedChoice = (this.selectedChoice >=_choices.length) ?_choices.length-1 : this.selectedChoice;\n    }\n    else if(ig.input.pressed('interact')){var chosen_reply_key = _choices[this.selectedChoice].npcreply();ig.game.spawnEntity('EntityTextballoon',this.entity.pos.x -10,this.entity.pos.y - 70,{wrapper:npc_con.NPC_SPEECH[chosen_reply_key]});\n      this.choices =_choices[this.selectedChoice].changechoices(chosen_reply_key);\n    }\n    ```", "```js\n    window.MenuItem = ig.Class.extend({\n      init: function(label,NPC_Response){\n        this.label = label;\n        this.NPC_Response = NPC_Response;\n        this.entity = entity;\n        },\n      });\n    });\n    ```", "```js\n    npcreply: function(){\n      for(var i= 0;i<=npc_con.NPC_CONVO_KEY.length; i++){\n        if (npc_con.NPC_CONVO_KEY[i] == this.NPC_Response){\n        return i;\n        }\n      }\n    },\n    ```", "```js\n    changechoices: function(chosen_reply_key){\n      var choices =  []\n      for(var k= 0;k<=pc_con.REPLY_SET_KEY.length; k++){\n        if (pc_con.REPLY_SET_KEY[k] ==npc_con.REPLY_SET_KEY[chosen_reply_key]){\n          choices.push(new MenuItem(pc_con.PC_SPEECH[k],pc_con.NPC_CONVO_KEY[k]));\n        }\n      }\n    return choices;\n    }\n    ```", "```js\n    var i;\n    this.choices = [\n    new MenuItem(pc_con.PC_SPEECH[0],pc_con.NPC_CONVO_KEY[0],this),\n    new MenuItem(pc_con.PC_SPEECH[1],pc_con.NPC_CONVO_KEY[1],this),\n    new MenuItem(pc_con.PC_SPEECH[2],pc_con.NPC_CONVO_KEY[2],this)\n    ];\n    var menufont = new ig.Font('media/04b03.font.png');\n    this.contextMenu = new Menu(menufont,8,this.choices,this);\n    ```", "```js\n    checkSelection:function(){\n      this.mousecorrectedx = ig.input.mouse.x + ig.game.screen.x;\n      this.mousecorrectedy = ig.input.mouse.y + ig.game.screen.y;\n      return (\n        (this.mousecorrectedx >= this.pos.x && this.mousecorrectedx <=this.pos.x+this.animSheet.width)&& (this.mousecorrectedy >= this.pos.y && this.mousecorrectedy <=this.pos.y+this.animSheet.height)\n        );\n      },\n    }\n    ```", "```js\n    if( ig.input.pressed('mouseclick') ) {\n      this.contexted = this.checkSelection();\n    }\n    ```", "```js\n    draw: function() {\n      if(this.contexted && this.contextMenu){\n        this.contextMenu.draw(this.pos.x+(this.animSheet.width/2)-ig.game.screen.x,this.pos.y+(this.animSheet.height)-ig.game.screen.y);\n      }\n    this.parent();\n    },\n    ```", "```js\n    ig.module('plugins.hud.hud').\n    defines(function(){\n      ig.hud = ig.Class.extend({ \n        canvas \u00a0: document.getElementById('canvas'), //get the canvas\n        context : canvas.getContext('2d'),\n        maxHealth \u00a0: null,\n        init: function(){\n          ig.Game.inject({\n            draw: function(){\n              this.parent();\n              // draw hud if there is a player\n              if(ig.game.getEntitiesByType('EntityPlayer').length \u00a0!=0){\n                if (this.hud){\n                this.hud.number();\n                this.hud.bar();\n                } \n              }\n            }\n          })\n        }, \n      }\n    }\n    ```", "```js\n    number: function(){ \n      if(!this.context) return null;\n      var player =ig.game.getEntitiesByType('EntityPlayer')[0];\n      // draw a transparant black rectangle \n      var context = this.canvas.getContext('2d');\n      context.fillStyle = \"rgb(0,0,0)\";\n      context.setAlpha(0.7); //set transparency \n      context.fillRect(10,10,100,30);\n      //draw text on top of the rectangle \n      context.fillStyle = \"rgb(255,255,255)\";\n      context.font = \"15px Arial\";\n      context.fillText('health: ' + player.health,20,30);\n      //font used is the default canvas font\n      context.setAlpha(1);\n      return null;\n    },\n    ```", "```js\n    bar: function(){\n      if(!this.context) return null;\n      var player = ig.game.getEntitiesByType('EntityPlayer')[0];\n      // draw a transparant black rectangle \n      var h = 100*Math.min(player.health / this.maxHealth,100);\n      var context = this.canvas.getContext('2d');\n      context.fillStyle = \"rgb(0,0,0)\";\n      context.setAlpha(0.7);\n      context.fillRect(10,50,100,10);\n      //either draw a blue or red rectangle on top of theblack one var color = h < 30 ? \"rgb(150,0,0)\" :\"rgb(0,0,150)\";\n      context.fillStyle = color;\n      context.setAlpha(0.9);\n      context.fillRect(10,50,h,10);\n      context.setAlpha(1);\n      return null;\n    },\n    ```", "```js\n    setMaxHealth: function(health){\n      this.maxHealth = health;\n    }\n    ```", "```js\n    MyGame = ig.Game.extend({\n      font: new ig.Font( 'media/04b03.font.png' ),ai: new ig.general_ai(),\n     hud: new ig.hud(),\n      init: function() {\n        this.loadLevel(LevelLevel1);\n     var player = ig.game.getEntitiesByType('EntityPlayer')[0];\n     this.hud.setMaxHealth(player.health);\n      }\n    }\n    ```", "```js\n    ig.module('plugins.ai.general_ai').\n    defines(function(){\n      ig.general_ai = ig.Class.extend({\n        init: function(){\n          ig.ai.STRATEGY = { Rest:0,Approach:1};\n      },\n    }\n    ```", "```js\n    getStrategy: function(ent){\n      // part 1: get player and list of enemies\n      var playerList = ig.game.getEntitiesByType('EntityPlayer');\n      var player = playerList[0];\n      var EnemyList = ig.game.getEntitiesByType('EntityEnemy');\n      // part 2: store distance to player if that enemy has enoughhealth to attack\n      var distance =  [];\n      for(var i = 0;i < EnemyList.length; i++){\n        //for every enemy > 100 health: put in array\n        EnemyList[i].health > 100 ?distance.push(EnemyList[i].distanceTo(player)) : null;\n      }\n      // part 3: decide on strategy: attack or stay put?var Mindist = Math.min.apply(null,distance);\n      var strategy = (ent.distanceTo(player)===Mindist ||distance.length === 0) ? ig.ai.STRATEGY.Approach:ig.ai.STRATEGY.Rest;\n      return strategy;\n    }\n    ```", "```js\n    getAction: function(entity){\n    this.entity = entity;\n    if(ig.game.ai.getStrategy(entity) == ig.ai.STRATEGY.Approach){\n\n    ```", "```js\n    return this.doAction(ig.ai.ACTION.Rest);\n    ```", "```js\n    <body>\n      <canvas id=\"canvas\"></canvas>\n      <script type=\"text/javascript\"src=\"img/playtomic.v2.2.min.js\"></script>\n    </body>\n    ```", "```js\n    'plugins.data.PlayTomic'\n    ```", "```js\n    ig.module('plugins.data.PlayTomic').\n    defines(function(){\n    // module to store and retrieve things with Playtomic\n    ig.PlayTomic= ig.Class.extend({\n    userName : null,\n    success: true,\n    scores: null,\n    init: function(){\n      ig.log('Trying to start Playtomic...');\n      try{\n     Playtomic.Log.View( 951388, 'b05b606fc66742b9','f41f965c47a14bcfa7adee84eff714', document.location );\n        //your login credentials\n        Playtomic.Log.Play();//game start\n        ig.log('loading Playtomic success ...')//could connectmessage\n      }\n      catch(e){\n        this.success = false; //could not connect\n        ig.log('Failed loading Playtomic ...')//could notconnect message\n      }\n    },\n    ```", "```js\n    saveScore: function(name, score1){\n      var score = {Name: name, Points: score1};\n      Playtomic.Leaderboards.Save(score,'highscores',this.submitComplete,{allowduplicates:true});\n    },\n    ```", "```js\n    submitComplete: function( response ){\n      if( response.Success ){\n        ig.log( 'Successfully Logged!' ); //submit success\n        ig.log( response );\n      }\n      else{\n        ig.log( 'Unable to Save High Score!' ); //submit fail\n      }\n    },\n    ```", "```js\n    this.PlayTom = new ig.PlayTomic();\n    this.saveScore = function(){\n      this.store.save({score:this.score});\n      if(this.PlayTom.success){\n        try{\n        //service sometimes failes to load\n          this.PlayTom.saveScore(this.userName,this.score);}\n          catch(e){\n            ig.log(\"Could not load to Playtomic\");\n          }\n        }\n      }\n    }\n    ```"]