["```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Bar Chart</title>\n    <meta charset=\"utf-8\" />\n  <script src=\"img/03.01.bar.js\"></script>\t\t\n  </head>\n  <body onLoad=\"init();\" style=\"background:#fafafa\">\n    <h1>How many cats do they have?</h1>\n    <canvas id=\"bar\" width=\"550\" height=\"400\"> </canvas>\n  </body>\n</html>\n```", "```js\n    var data = [{label:\"David\",\n             value:3,\n             style:\"rgba(241, 178, 225, 0.5)\"},\n             {label:\"Ben\",\n             value:2,\n             style:\"#B1DDF3\"},\n             {label:\"Oren\",\n             value:9,\n             style:\"#FFDE89\"},\n             {label:\"Barbera\",\n             value:6,\n             style:\"#E3675C\"},\n             {label:\"Belann\",\n             value:10,\n             style:\"#C2D985\"}];\n    ```", "```js\n    var can = document.getElementById(\"bar\");\n      var wid = can.width;\n      var hei = can.height;\n      var context = can.getContext(\"2d\");\n      context.fillStyle = \"#eeeeee\";\n      context.strokeStyle = \"#999999\";\n      context.fillRect(0,0,wid,hei);\n    ```", "```js\n    var CHART_PADDING = 20;\n\n      context.font = \"12pt Verdana, sans-serif\";\n      context.fillStyle = \"#999999\";\n\n      context.moveTo(CHART_PADDING,CHART_PADDING);\n      context.lineTo(CHART_PADDING,hei-CHART_PADDING);\n      context.lineTo(wid-CHART_PADDING,hei-CHART_PADDING);\n\n      var stepSize = (hei - CHART_PADDING*2)/10;\n      for(var i=0; i<10; i++){\n        context.moveTo(CHART_PADDING, CHART_PADDING + i*  stepSize);\n        context.lineTo(CHART_PADDING*1.3,CHART_PADDING + i*  stepSize);\n        context.fillText(10-i, CHART_PADDING*1.5, CHART_PADDING + i*  stepSize + 6);\n      }\n      context.stroke();\n    ```", "```js\n    var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n      context.textAlign = \"center\";\n      for(i=0; i<data.length; i++){\n        context.fillStyle = data[i].style;\n        context.fillRect(CHART_PADDING +elementWidth*i ,hei-CHART_PADDING - data[i].value*stepSize,elementWidth,data[i].value*stepSize);\n        context.fillStyle = \"rgba(255, 255, 225, 0.8)\";\n        context.fillText(data[i].label, CHART_PADDING +elementWidth*(i+.5), hei-CHART_PADDING*1.5);\n\n      }\n    ```", "```js\ncontext.moveTo(CHART_PADDING,CHART_PADDING);\ncontext.lineTo(CHART_PADDING,hei-CHART_PADDING);\ncontext.lineTo(wid-CHART_PADDING,hei-CHART_PADDING);\n```", "```js\nvar stepSize = (hei \u2013 CHART_PADDING*2)/10;\n```", "```js\n  for(var i=0; i<10; i++){\n    context.moveTo(CHART_PADDING, CHART_PADDING + i*  stepSize);\ncontext.lineTo(CHART_PADDING*1.3,CHART_PADDING + i*  stepSize);\n    context.fillText(10-i, CHART_PADDING*1.5, CHART_PADDING + i*  stepSize + 6);\n  }\n```", "```js\nvar elementWidth =(wid-CHART_PADDING*2)/ data.length;\n```", "```js\ncontext.fillStyle = data[i].style;\ncontext.fillRect(CHART_PADDING +elementWidth*i ,hei-CHART_PADDING - data[i].value*stepSize,elementWidth,data[i].value*stepSize);\ncontext.fillStyle = \"rgba(255, 255, 225, 0.8)\";\ncontext.fillText(data[i].label, CHART_PADDING +elementWidth*(i+.5), hei-CHART_PADDING*1.5);\n```", "```js\ncontext.textAlign = \"center\";\n```", "```js\nvar stepSize = (hei - CHART_PADDING*2)/10;\nfor(var i=0; i<10; i++){\n```", "```js\nvar stepSize = (hei - CHART_PADDING*2)5;\nfor(var i=0; i<5; i++){\n```", "```js\nvar data = [...];\nvar chartYData = [{label:\"10 cats\", value:1},\n {label:\"5 cats\", value:.5},\n {label:\"3 cats\", value:.3}];\nvar range = {min:0, max:10};\n\nvar CHART_PADDING = 20;\nvar wid;\nvar hei;\nfunction init(){\n```", "```js\nfunction init(){\n  var can = document.getElementById(\"bar\");\n  wid = can.width;\n   hei = can.height;\n  var context = can.getContext(\"2d\");\n  context.fillStyle = \"#eeeeee\";\n  context.strokeStyle = \"#999999\";\n  context.fillRect(0,0,wid,hei);\n\n  context.font = \"12pt Verdana, sans-serif\";\n  context.fillStyle = \"#999999\";\n\n  context.moveTo(CHART_PADDING,CHART_PADDING);\n  context.lineTo(CHART_PADDING,hei-CHART_PADDING);\n  context.lineTo(wid-CHART_PADDING,hei-CHART_PADDING);\n fillChart(context,chartYData);\n createBars(context,data);\n}\n```", "```js\nfunction fillChart(context, stepsData){\n  var steps = stepsData.length;\n  var startY = CHART_PADDING;\n  var endY = hei-CHART_PADDING;\n  var chartHeight = endY-startY;\n  var currentY;\n  var rangeLength = range.max-range.min;\n  for(var i=0; i<steps; i++){\n    currentY = startY + (1-(stepsData[i].value/rangeLength)) *  chartHeight;\n    context.moveTo(CHART_PADDING, currentY );\n    context.lineTo(CHART_PADDING*1.3,currentY);\n    context.fillText(stepsData[i].label, CHART_PADDING*1.5, currentY+6);\n  }\n  context.stroke();\n\n}\n```", "```js\nfunction createBars(context,data){\n  var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n  var startY = CHART_PADDING;\n  var endY = hei-CHART_PADDING;\n  var chartHeight = endY-startY;\n  var rangeLength = range.max-range.min;\n  var stepSize = chartHeight/rangeLength;\n  context.textAlign = \"center\";\n  for(i=0; i<data.length; i++){\n    context.fillStyle = data[i].style;\n    context.fillRect(CHART_PADDING +elementWidth*i ,hei-CHART_PADDING - data[i].value*stepSize,elementWidth,data[i].value*stepSize);\n    context.fillStyle = \"rgba(255, 255, 225, 0.8)\";\n    context.fillText(data[i].label, CHART_PADDING +elementWidth*(i+.5), hei-CHART_PADDING*1.5);\t\n  }\t\n}\n```", "```js\nvar data = [{label:\"David\",\n math:50,\n english:80,\n art:92,\n       style:\"rgba(241, 178, 225, 0.5)\"},\n       {label:\"Ben\",\n math:80,\n english:60,\n art:43,\n       style:\"#B1DDF3\"},\n       {label:\"Oren\",\n math:70,\n english:20,\n art:92,\n       style:\"#FFDE89\"},\n       {label:\"Barbera\",\n math:90,\n english:55,\n art:81,\n       style:\"#E3675C\"},\n       {label:\"Belann\",\n math:50,\n english:50,\n art:50,\n       style:\"#C2D985\"}];\n```", "```js\n    var chartInfo= { y:{min:40, max:100, steps:5,label:\"math\"},\n            x:{min:40, max:100, steps:4,label:\"english\"}\n          };\n    ```", "```js\n    var CHART_PADDING = 30;\n    var wid;\n    var hei;\n    function init(){\n\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n      context.fillStyle = \"#eeeeee\";\n      context.strokeStyle = \"#999999\";\n      context.fillRect(0,0,wid,hei);\n\n      context.font = \"10pt Verdana, sans-serif\";\n      context.fillStyle = \"#999999\";\n\n      context.moveTo(CHART_PADDING,CHART_PADDING);\n      context.lineTo(CHART_PADDING,hei-CHART_PADDING);\n      context.lineTo(wid-CHART_PADDING,hei-CHART_PADDING);\n\n     fillChart(context,chartInfo);\n     createDots(context,data);\n    }\n    ```", "```js\n    function fillChart(context, chartInfo){\n      var yData = chartInfo.y;\n      var steps = yData.steps;\n      var startY = CHART_PADDING;\n      var endY = hei-CHART_PADDING;\n      var chartHeight = endY-startY;\n      var currentY;\n      var rangeLength = yData.max-yData.min;\n      var stepSize = rangeLength/steps;\n      context.textAlign = \"left\";\n      for(var i=0; i<steps; i++){\n        currentY = startY + (i/steps) *\tchartHeight;\n        context.moveTo(wid-CHART_PADDING, currentY );\n        context.lineTo(CHART_PADDING,currentY);\n        context.fillText(yData.min+stepSize*(steps-i), 0, currentY+4);\n      }\n\n      currentY = startY +\tchartHeight;\n      context.moveTo(CHART_PADDING, currentY );\n      context.lineTo(CHART_PADDING/2,currentY);\n      context.fillText(yData.min, 0, currentY-3);\n\n      var xData = chartInfo.x;\n      steps = xData.steps;\n      var startX = CHART_PADDING;\n      var endX = wid-CHART_PADDING;\n      var chartWidth = endX-startX;\n      var currentX;\n      rangeLength = xData.max-xData.min;\n      stepSize = rangeLength/steps;\n      context.textAlign = \"left\";\n      for(var i=0; i<steps; i++){\n        currentX = startX + (i/steps) *\tchartWidth;\n        context.moveTo(currentX, startY );\n        context.lineTo(currentX,endY);\n        context.fillText(xData.min+stepSize*(i), currentX-6, endY+CHART_PADDING/2);\n      }\n\n      currentX = startX +\tchartWidth;\n      context.moveTo(currentX, startY );\n      context.lineTo(currentX,endY);\n      context.fillText(xData.max, currentX-3, endY+CHART_PADDING/2);\n\n      context.stroke();\n\n    }\n    ```", "```js\n    function createDots(context,data){\n      var yDataLabel = chartInfo.y.label;\n      var xDataLabel = chartInfo.x.label;\n      var yDataRange = chartInfo.y.max-chartInfo.y.min;\n      var xDataRange = chartInfo.x.max-chartInfo.x.min;\n      var chartHeight = hei- CHART_PADDING*2;\n      var chartWidth = wid- CHART_PADDING*2;\n\n      var yPos;\n      var xPos;\n      for(var i=0; i<data.length;i++){\n        xPos = CHART_PADDING + (data[i][xDataLabel]-chartInfo.x.min)/xDataRange * chartWidth;\n        yPos = (hei - CHART_PADDING)  -(data[i][yDataLabel]-chartInfo.y.min)/yDataRange * chartHeight;\n\n        context.fillStyle = data[i].style;\n        context.fillRect(xPos-4 ,yPos-4,8,8);\n\n      }  \n    }\n    ```", "```js\nvar chartInfo= { y:{min:40, max:100, steps:5,label:\"math\"},\n        x:{min:40, max:100, steps:4,label:\"english\"}\n      };\n```", "```js\nvar startY = CHART_PADDING;\nvar endY = hei-CHART_PADDING;\nvar chartHeight = endY-startY;\n```", "```js\n  var yData = chartInfo.y;\n  var steps = yData.steps;\n  var rangeLength = yData.max-yData.min;\n  var stepSize = rangeLength/steps;\n```", "```js\nvar currentY;\ncontext.textAlign = \"left\";\n  for(var i=0; i<steps; i++){\n    currentY = startY + (i/steps) *\tchartHeight;\n    context.moveTo(wid-CHART_PADDING, currentY );\n    context.lineTo(CHART_PADDING,currentY);\n    context.fillText(yData.min+stepSize*(steps-i), 0, currentY+4);\n  }\n```", "```js\ncurrentY = startY + (i/steps) *\tchartHeight;\n```", "```js\nyData.min+stepSize*(steps-i)\n```", "```js\nvar yDataLabel = chartInfo.y.label;\nvar xDataLabel = chartInfo.x.label;\n```", "```js\nvar yDataRange = chartInfo.y.max-chartInfo.y.min;\nvar xDataRange = chartInfo.x.max-chartInfo.x.min;\nvar chartHeight = hei- CHART_PADDING*2;\nvar chartWidth = wid- CHART_PADDING*2;\n```", "```js\nvar yPos;\nvar xPos;\n```", "```js\nfor(var i=0; i<data.length;i++){\n xPos = CHART_PADDING + (data[i][xDataLabel]-chartInfo.x.min)/xDataRange * chartWidth;\n yPos = (hei - CHART_PADDING)  -(data[i][yDataLabel]-chartInfo.y.min)/yDataRange * chartHeight;\n\n    context.fillStyle = data[i].style;\n    context.fillRect(xPos-4 ,yPos-4,8,8);\n\n  }\n```", "```js\n(data[i][xDataLabel]-chartInfo.x.min)\n\n```", "```js\nxPos = CHART_PADDING + (data[i][xDataLabel]-chartInfo.x.min)/xDataRange * chartWidth;\n\n```", "```js\nvar a2011 = [38,65,85,111,131,160,187,180,205,146,64,212];\nvar a2010 = [212,146,205,180,187,131,291,42,98,61,74,69];\n```", "```js\nvar chartInfo= { y:{min:0, max:300, steps:5,label:\"users\"},\n        x:{min:1, max:12, steps:11,label:\"months\"}\n      };\n```", "```js\n    var a2011 = [38,65,85,111,131,160,187,180,205,146,64,212];\n    var a2010 = [212,146,205,180,187,131,291,42,98,61,74,69];\n\n    var chartInfo= { y:{min:0, max:300, steps:5,label:\"users\"},\n            x:{min:1, max:12, steps:11,label:\"months\"}\n          };\n\n    var CHART_PADDING = 20;\n    var wid;\n    var hei;\n    ```", "```js\n    function init(){\n\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n      context.fillStyle = \"#eeeeee\";\n      context.strokeStyle = \"#999999\";\n      context.fillRect(0,0,wid,hei);\n\n      context.font = \"10pt Verdana, sans-serif\";\n      context.fillStyle = \"#999999\";\n\n      context.moveTo(CHART_PADDING,CHART_PADDING);\n     context.rect(CHART_PADDING,CHART_PADDING,wid-CHART_PADDING*2,hei-CHART_PADDING*2);\n     context.stroke();\n      context.strokeStyle = \"#cccccc\";\n      fillChart(context,chartInfo);\n     addLine(context,formatData(a2011, \"/2011\",\"#B1DDF3\"),\"#B1DDF3\");\n     addLine(context,formatData(a2010, \"/2010\",\"#FFDE89\"),\"#FFDE89\"); \n    }\n    ```", "```js\n    function addLine(context,data,style){\n      var yDataLabel = chartInfo.y.label;\n      var xDataLabel = chartInfo.x.label;\n      var yDataRange = chartInfo.y.max-chartInfo.y.min;\n      var xDataRange = chartInfo.x.max-chartInfo.x.min;\n      var chartHeight = hei- CHART_PADDING*2;\n      var chartWidth = wid- CHART_PADDING*2;\n\n      var yPos;\n      var xPos;\n     context.strokeStyle = style;\n     context.beginPath();\n     context.lineWidth = 3;\n      for(var i=0; i<data.length;i++){\n        xPos = CHART_PADDING + (data[i][xDataLabel]-chartInfo.x.min)/xDataRange * chartWidth;\n        yPos = (hei - CHART_PADDING)  -(data[i][yDataLabel]-chartInfo.y.min)/yDataRange * chartHeight;\n\n        context.fillStyle = data[i].style;\n        context.fillRect(xPos-4 ,yPos-4,8,8);\n\n     i ? context.lineTo(xPos,yPos):context.moveTo(xPos,yPos);\n\n      }\n     context.stroke();\n    }\n    ```", "```js\n    function formatData(data , labelCopy , style){\n      newData = [];\n      for(var i=0; i<data.length;i++){\n        newData.push({\tlabel:(i+1)+labelCopy,\n                users:data[i],\n                months:i+1,\n                style:style\n                });\t\n      }\n\n      return newData;\t\n    }\n    ```", "```js\naddLine(context,formatData(a2011,\"/2011\",\"#B1DDF3\"),\"#B1DDF3\")\n\n```", "```js\nvar data = [{label:\"David\",\n       math:50,\n       english:80,\n       art:92\n       style:\"rgba(241, 178, 225, 0.5)\"},\n       ...\n       ];\n```", "```js\nvar chartInfo= { y:{min:0, max:300, steps:5,label:\"users\"},\n x:{min:1, max:12, steps:11,label:\"months\"}\n\n```", "```js\nvar data = [{label: \"01/2011\",\n       users:200,\n      months:1,\n      style:\"#ff0000\"} ... ];\n```", "```js\nfunction formatData(data , labelCopy , style){\n  newData = [];\n  for(var i=0; i<data.length;i++){\n    newData.push({\tlabel:(i+1)+labelCopy,\n            users:data[i],\n            months:i+1,\n            style:style\n            });\t\n  }\n\n  return newData;\n}\n```", "```js\ncondition ? ifStatement: elseStatement;\n```", "```js\nif(style)context.stroke();\n```", "```js\nfunction addLine(context,data,style,isFill){\n  var yDataLabel = chartInfo.y.label;\n  var xDataLabel = chartInfo.x.label;\n  var yDataRange = chartInfo.y.max-chartInfo.y.min;\n  var xDataRange = chartInfo.x.max-chartInfo.x.min;\n  var chartHeight = hei- CHART_PADDING*2;\n  var chartWidth = wid- CHART_PADDING*2;\n\n  var yPos;\n  var xPos;\n  context.strokeStyle = style;\n  context.beginPath();\n  context.lineWidth = 3;\n\n if(!isFill){\n    for(var i=0; i<data.length;i++){\n      xPos = CHART_PADDING + (data[i][xDataLabel]-chartInfo.x.min)/xDataRange * chartWidth;\n      yPos = (hei - CHART_PADDING)  -(data[i][yDataLabel]-chartInfo.y.min)/yDataRange * chartHeight;\n\n      context.fillStyle = data[i].style;\n      context.fillRect(xPos-4 ,yPos-4,8,8);\n\n      i==0? context.moveTo(xPos,yPos):context.lineTo(xPos,yPos);\n\n    }\n    if(style)context.stroke();\n }else{\n context.fillStyle = style;\n context.globalAlpha = .6;\n context.moveTo(CHART_PADDING,hei - CHART_PADDING)\n for(var i=0; i<data.length;i++){\n xPos = CHART_PADDING + (data[i][xDataLabel]-chartInfo.x.min)/xDataRange * chartWidth;\n yPos = (hei - CHART_PADDING)  -(data[i][yDataLabel]-chartInfo.y.min)/yDataRange * chartHeight;\n\n context.lineTo(xPos,yPos);\n\n }\n context.lineTo(\tCHART_PADDING + chartWidth, CHART_PADDING+chartHeight);\n context.closePath();\n context.fill(); \n context.globalAlpha = 1;\n }\n}\n```", "```js\nfunction createBars(context,data){\n  var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n  var startY = CHART_PADDING;\n  var endY = hei-CHART_PADDING;\n  var chartHeight = endY-startY;\n  var rangeLength = range.max-range.min;\n  var stepSize = chartHeight/rangeLength;\n  context.textAlign = \"center\";\n  for(i=0; i<data.length; i++){\n    context.fillStyle = data[i].style;\n    context.fillRect(CHART_PADDING +elementWidth*i ,hei-CHART_PADDING - data[i].value*stepSize,elementWidth,data[i].value*stepSize);\n    context.fillStyle = \"rgba(255, 255, 225, 0.8)\";\n    context.fillText(data[i].label, CHART_PADDING +elementWidth*(i+.5), hei-CHART_PADDING*1.5);\n\n  }\n}\n```", "```js\nfunction createBars(context,data){\n\n var range = chartInfo.x;\n  var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n  var startY = CHART_PADDING;\n  var endY = hei-CHART_PADDING;\n  var chartHeight = endY-startY;\n var stepSize = chartHeight/(chartInfo.y.max-chartInfo.y.min);\n  context.textAlign = \"center\";\n  for(i=0; i<data.length; i++){\n    context.fillStyle = data[i].style;\n context.fillRect(CHART_PADDING +elementWidth*i ,endY - data[i][chartInfo.y.label]*stepSize,elementWidth,data[i][chartInfo.y.label]*stepSize);\n    context.fillStyle = \"rgba(255, 255, 225, 0.8)\";\n    context.fillText(data[i].label, CHART_PADDING +elementWidth*(i+.5), hei-CHART_PADDING*1.5);\n\n  }\n\n}\n```", "```js\n    var a2011 = [60,60,60,111,-31,-80,0,-43,-29,14,64,12];\n    var chartInfo= { y:{min:0, max:300, steps:5,label:\"users\"},\n            x:{min:1, max:12, steps:11,label:\"months\"}\n            };\n    var CHART_PADDING = 20;\n    var wid;\n    var hei;\n    ```", "```js\n    function init(){\n\n      ...\n      context.strokeStyle = \"#cccccc\";\n      fillChart(context,chartInfo);\n     createWaterfall(context,formatData(a2011));\n    }\n    ```", "```js\n    function createWaterfall(context,data){\n\n      var range = chartInfo.x;\n      var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n      var startY = CHART_PADDING;\n      var endY = hei-CHART_PADDING;\n      var chartHeight = endY-startY;\n      var stepSize = chartHeight/(chartInfo.y.max-chartInfo.y.min);\n      var currentY= endY;\n     var elementValue ;\n     var total=0;\n      context.textAlign = \"center\";\n    ```", "```js\n      for(i=0; i<data.length; i++){\n     elementValue = data[i][chartInfo.y.label];\n     total +=elementValue;\n     if(elementValue!=0){\n     context.fillStyle = elementValue>0? \"#C2D985\" :\"#E3675C\" ;\n     currentY -=(elementValue*stepSize);\n     context.fillRect(CHART_PADDING +elementWidth*i ,currentY,elementWidth,elementValue*stepSize);\n     }\n\n    ```", "```js\n    else{\n     context.fillStyle = \"#B1DDF3\" ;\n\n     context.fillRect(CHART_PADDING +elementWidth*i ,currentY,elementWidth,endY-currentY);\n     elementValue = total; //hack so we see the right value\n     }\n     context.fillStyle = \"rgba(255, 255, 255, .8)\"\n    ;\n\n    ```", "```js\n     context.fillText(elementValue, CHART_PADDING +elementWidth*(i+.5), endY - (stepSize*total) + (stepSize*elementValue/2) + 6);\n\n      }\n\n    }\n    ```", "```js\n  var elementValue ;\n  var total=0;\n```", "```js\nfor(i=0; i<data.length; i++){\n    elementValue = data[i][chartInfo.y.label];\n    total +=elementValue;\n```", "```js\nif(elementValue>0){\n  //do the positive values\n}else if(elementValue<0){\n  //do the negative values\n}else{\n  //do 0\n}\n```", "```js\nif(elementValue!=0){\n  //do positive/negative values\n}else{\n  // do 0\n}\n```", "```js\ncontext.fillStyle = elementValue>0? \"#C2D985\" :\"#E3675C\" ;\ncurrentY -=(elementValue*stepSize);\ncontext.fillRect(CHART_PADDING +elementWidth*i ,currentY,elementWidth,elementValue*stepSize);\n```", "```js\n}else{\n    context.fillStyle = \"#B1DDF3\" ;\n\n context.fillRect(CHART_PADDING +elementWidth*i ,currentY,elementWidth,endY-currentY);\n    elementValue = total; //hack so we see the right value\n    }\n```", "```js\ncontext.fillStyle = \"rgba(255, 255, 255, .8)\";\ncontext.fillText(elementValue, CHART_PADDING +elementWidth*(i+.5), endY - (stepSize*total) + (stepSize*elementValue/2) + 6);\n\n```", "```js\ncreateWaterfall(context,formatData(a2011));\t\n```", "```js\nvar a2011 = [60,60,60,111,-31,-80,0,-43,-29,14,64,12];\n```", "```js\nvar chartInfo= { y:{steps:5,label:\"users\"},\n        x:{min:1, max:12, steps:11,label:\"months\"}\n        };\n```", "```js\n  fillChart(context,chartInfo);\n  createWaterfall(context,formatData(a2011));\t\n```", "```js\nfunction createWaterfall(context,data){\n  fillChart(context,chartInfo);\n//all the rest the same\n//do to all 3 functions\n```", "```js\nfunction createWaterfall(context,data){\n if(!chartInfo.y.min || !chartInfo.y.max)\n updateCumulativeChartInfo(chartInfo,data);\n  fillChart(context,chartInfo);\n```", "```js\nfunction updateCumulativeChartInfo(chartInfo,data){\n  var aTotal=[];\n  var total = 0;\n  aTotal.push(total);\n  for(i=0; i<data.length; i++){\n    total +=data[i][chartInfo.y.label]\n    aTotal.push(total);\n\n  }\n  chartInfo.y.min = Math.min.apply(this,aTotal);\n  chartInfo.y.max = Math.max.apply(this,aTotal);\n}\n```", "```js\nfunction formatNumber(num,lead){\n  for(var i=0;i<lead;i++) num*=10;\n  num = parseInt(num);\n  for(var i=0;i<lead;i++) num/=10;\n  return num;\n}\n```", "```js\ncontext.fillText(formatNumber(yData.min+stepSize*(steps-i),2), 0, currentY+4);\n\n```", "```js\nDATE,CLOSE,HIGH,LOW,OPEN,VOLUME\n```", "```js\n1309752000000,12479.88,12506.22,12446.05,12505.99,128662688\n```", "```js\n    var chartInfo= { y:{min:11500, max:12900,steps:5,label:\"close\"},\n            x:{min:1, max:12, steps:11,label:\"date\"}\n            };\n    var stockData;\n    var CHART_PADDING = 20;\n    var wid;\n    var hei\n    ```", "```js\n    function init(){\n\n      var client = new XMLHttpRequest();\n      client.open('GET', 'data/DJI.txt');\n\n      client.onreadystatechange = function(e) {\n       if(e.target.readyState==4){\n\n         var aStockInfo = e.target.responseText.split(\"\\n\");\n         stockData = translateCSV(aStockInfo,7);\n\n          startUp()\n\n       }\n      }\n\n      client.send();\n    }\n\n    function startUp(){\n      //old init function\n    }\n    ```", "```js\n    function translateCSV(data,startIndex){\n      startIndex|=1; //if nothing set set to 1\n      var newData = [];\n      var aCurrent;\n      var dataDate;\n      for(var i=startIndex; i<data.length;i++){\n        aCurrent = data[i].split(\",\");\n        dataDate = aCurrent[0].charAt(0)==\"a\"?parseInt(aCurrent[0].slice(1)):parseInt(aCurrent[0]);\n        newData.push({\tdate:dataDate,\n                close:parseFloat(aCurrent[1]),\n                high:parseFloat(aCurrent[2]),\n                low:parseFloat(aCurrent[3]),\n                open:parseFloat(aCurrent[4]),\n                volume:parseFloat(aCurrent[5])\n                });\t\n      }\n\n      return newData;\t\n    }\n    ```", "```js\n    function startUp(){\n      ...\n     addStock(context,stockData); \n    }\n    ```", "```js\n    function addStock(context,data){ \n      fillChart(context,chartInfo);\n      var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n      var startY = CHART_PADDING;\n      var endY = hei-CHART_PADDING;\n      var chartHeight = endY-startY;\n      var stepSize = chartHeight/(chartInfo.y.max-chartInfo.y.min);\n      var openY;\n      var closeYOffset;\n      var highY;\n      var lowY;\n      var currentX;\n      context.strokeStyle = \"#000000\";\n      for(i=0; i<data.length; i++){\n        openY = (data[i].open-chartInfo.y.min)*stepSize;\n        closeYOffset = (data[i].open-data[i].close)*stepSize;\n        highY = (data[i].high-chartInfo.y.min)*stepSize;\n        lowY =(data[i].low-chartInfo.y.min)*stepSize;\n        context.beginPath();\n        currentX = CHART_PADDING +elementWidth*(i+.5);\n        context.moveTo(currentX,endY-highY);\n        context.lineTo(currentX,endY-lowY);\n        context.rect(CHART_PADDING +elementWidth*i ,endY-openY,elementWidth,closeYOffset);\n        context.stroke();\n        context.fillStyle = closeYOffset<0? \"#C2D985\" :\"#E3675C\" ;\n        context.fillRect(CHART_PADDING +elementWidth*i ,endY-openY,elementWidth,closeYOffset);\n      }\n\n    }\n    ```", "```js\nvar client = new XMLHttpRequest();\nclient.open('GET', 'data/DJI.txt');\n```", "```js\nclient.onreadystatechange = function(e) {\n   if(e.target.readyState==4){\n     var aStockInfo = e.target.responseText.split(\"\\n\");\n     stockData = translateCSV(aStockInfo,1);\n      startUp()\n\n   }\n  }\n  client.send();\n```", "```js\nstartIndex||=1; //if nothing set set to 1\n```", "```js\nstartIndex = startIndex || 1;\n```", "```js\n  fillChart(context,chartInfo);\n  var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n  var startY = CHART_PADDING;\n  var endY = hei-CHART_PADDING;\n  var chartHeight = endY-startY;\n  var stepSize = chartHeight/(chartInfo.y.max-chartInfo.y.min);\n```", "```js\n var openY;\n var closeYOffset;\n var highY;\n var lowY;\n var currentX;\n  context.strokeStyle = \"#000000\";\n```", "```js\nfor(i=0; i<data.length; i++){\n    openY = (data[i].open-chartInfo.y.min)*stepSize;\n    closeYOffset = (data[i].open-data[i].close)*stepSize;\n    highY = (data[i].high-chartInfo.y.min)*stepSize;\n    lowY =(data[i].low-chartInfo.y.min)*stepSize;\n```", "```js\n    context.beginPath();\n    currentX = CHART_PADDING +elementWidth*(i+.5);\n    context.moveTo(currentX,endY-highY);\n context.lineTo(currentX,endY-lowY);\n\n```", "```js\n    context.rect(CHART_PADDING +elementWidth*i ,endY-openY,elementWidth,closeYOffset);\n    context.stroke();\n    context.fillStyle = closeYOffset<0? \"#C2D985\" :\"#E3675C\" ;\n    context.fillRect(CHART_PADDING +elementWidth*i ,endY-openY,elementWidth,closeYOffset);\n}\n```", "```js\nvar chartInfo= { y:{min:11500, max:12900,steps:5,label:\"close\"},\n x:{min:1, max:12, steps:11,label:\"date\"}\n        };\n```", "```js\nvar chartInfo= { y:{min:11500, max:12900,steps:5,label:\"close\"},\n x:{label:\"date\",formatter:weeklyCapture}\n        };\n```", "```js\nfunction addStock(context,data){\n if(!chartInfo.x.max){\n chartInfo.x.min = 0;\n chartInfo.x.max = data.length;\n chartInfo.x.steps = data.length; \n }\n\n  fillChart(context,chartInfo);\n\n...\n```", "```js\nfunction fillChart(context, chartInfo){\n  // ....\n var output;\n  for(var i=0; i<steps; i++){\n output = chartInfo.x.formatter && chartInfo.x.formatter(i);\n if(output || !chartInfo.x.formatter){\n      currentX = startX + (i/steps) *\tchartWidth;\n      context.moveTo(currentX, startY );\n      context.lineTo(currentX,endY);\n context.fillText(output?output:xData.min+stepSize*(i), currentX-6, endY+CHART_PADDING/2);\n }\n  }\n\n if(!chartInfo.x.formatter){\n currentX = startX +\tchartWidth;\n context.moveTo(currentX, startY );\n context.lineTo(currentX,endY);\n context.fillText(xData.max, currentX-3, endY+CHART_PADDING/2);\n }\n\n  context.stroke();\n\n}\n```", "```js\noutput = chartInfo.x.formatter && chartInfo.x.formatter(i);\n```", "```js\nif(output || !chartInfo.x.formatter){\n  currentX = startX + (i/steps) *\tchartWidth;\n  context.moveTo(currentX, startY );\n  context.lineTo(currentX,endY);\n  context.fillText(output?output:xData.min+stepSize*(i), currentX-6, endY+CHART_PADDING/2);\n}\n```", "```js\nif(output || !chartInfo.x.formatter){\n  currentX = startX + (i/steps) *\tchartWidth;\n  context.moveTo(currentX, startY );\n  context.lineTo(currentX,endY);\n context.fillText(output?output:xData.min+stepSize*(i), currentX-6, endY+CHART_PADDING/2);\n}\n```", "```js\nvar DAY = 1000*60*60*24;\nfunction weeklyCapture(i){\n  var d;\n  if(i==0){\n    d =  new Date(stockData[i].date);\t\n  }else if ( i>1 && stockData[i].date != stockData[i-1].date+1 ){\n    d = new Date(stockData[i].date + DAY*stockData[i].date );\n  }\n\n  return d? d.getMonth()+1+\"/\"+d.getDate():false;\n\n}\n```", "```js\nvar DAY = 1000*60*60*24;\n```", "```js\nvar d;\n  if(i==0){\n    d =  new Date(stockData[i].date);\t\n  }\n```", "```js\n}else if ( i>1 && stockData[i].date != stockData[i-1].date+1 ){\n    d = new Date(stockData[0].date + DAY*stockData[i].date );\n  }\n```", "```js\nreturn d? d.getMonth()+1+\"/\"+d.getDate():false;\n```", "```js\nfunction addStock(context,data,isCandle){\n```", "```js\nfor(i=0; i<data.length; i++){\n    openY = (data[i].open-chartInfo.y.min)*stepSize;\n    closeYOffset = (data[i].open-data[i].close)*stepSize;\n    highY = (data[i].high-chartInfo.y.min)*stepSize;\n    lowY =(data[i].low-chartInfo.y.min)*stepSize;\n    context.beginPath();\n    currentX = CHART_PADDING +elementWidth*(i+.5);\n    context.moveTo(currentX,endY-highY);\n    context.lineTo(currentX,endY-lowY);\n if(!isCandle){\n context.moveTo(currentX,endY-openY);\n context.lineTo(CHART_PADDING +elementWidth*(i+.25),endY-openY);\n context.moveTo(currentX,endY-openY+closeYOffset);\n context.lineTo(CHART_PADDING +elementWidth*(i+.75),endY-openY+closeYOffset);\n context.stroke();\n }else{\n context.rect(CHART_PADDING +elementWidth*i ,endY-openY,elementWidth,closeYOffset);\n context.stroke();\n context.fillStyle = closeYOffset<0? \"#C2D985\" :\"#E3675C\" ;\n context.fillRect(CHART_PADDING +elementWidth*i ,endY-openY,elementWidth,closeYOffset);\n\n }\n\n  }\n```"]