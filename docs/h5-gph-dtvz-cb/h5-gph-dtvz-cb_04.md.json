["```js\n    var students2001 = [{name:\"Ben\",\n      math:30,\n      english:60,\n      programing:30},\n      {name:\"Joe\",\n      math:40,\n      english:60,\n      programing:40},\n      {name:\"Danny\",\n      math:50,\n      english:90,\n      programing:50},\n      {name:\"Mary\",\n      math:60,\n      english:60,\n      programing:60},\n      {name:\"Jim\",\n      math:80,\n      english:20,\n      programing:80}];\n    ```", "```js\n    var chartInfo= { y:{min:0, max:100,steps:5,label:\"math\"},\n      x:{min:0, max:100,steps:5,label:\"programing\"},\n      bubble:{min:0, max:100, minRaduis:3, maxRaduis:20,label:\"english\"}\n    };\n    ```", "```js\n    var styling = { outlinePadding:4,\n      barSize:16,\n      font:\"12pt Verdana, sans-serif\",\n      background:\"eeeeee\",\n      bar:\"cccccc\",\n      text:\"605050\"\n    };\n    ```", "```js\n    var wid;\n    var hei;\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n\n      createOutline(context,chartInfo);\n      addDots(context,chartInfo,students2001,[\"math\",\"programing\",\"english\"],\"name\");\n    }\n    ```", "```js\n    function createOutline(context,chartInfo){\n      var s = styling;\n      var pad = s.outlinePadding;\n      var barSize = s.barSize;\n      context.fillStyle = s.background;\n      context.fillRect(0,0,wid,hei);\n      context.fillStyle = s.bar;\n      context.fillRect(pad,pad,barSize,hei-pad*2);\n      context.font = s.font;\n      context.fillStyle = s.text;\n    ```", "```js\n    context.save();\n    context.translate(17, hei/2 );\n    context.rotate(-Math.PI/2);\n    context.textAlign = \"center\";\n    context.fillText(chartInfo.y.label, 0, 0);\n    context.restore();\n\n    context.fillStyle = s.bar;\n    context.fillRect(pad+barSize,hei-pad-barSize,wid-pad*2-barSize,barSize);\n    context.font = s.font;\n    context.fillStyle = s.text;\n    context.fillText(chartInfo.x.label,( wid-pad*2-barSize)/2, hei-pad*2);\n\n    context.translate(pad+barSize,hei-pad-barSize);\n    context.scale(1, -1);\n    //SET UP CONSTANTS - NEVER CHANGE AFTER CREATED\n    styling.CHART_HEIGHT = hei-pad*2-barSize;\n    styling.CHART_WIDTH = wid-pad*2-barSize;\n    ```", "```js\n    var steps = chartInfo.y.steps;\n    var ratio;\n    chartInfo.y.range = chartInfo.y.max-chartInfo.y.min;\n    var scope = chartInfo.y.range;\n    context.strokeStyle = s.text;\n    var fontStyle = s.font.split(\"pt\");\n    var pointSize = fontStyle[0]/2;\n    fontStyle[0]=pointSize;\n    fontStyle = fontStyle.join(\"pt\");\n    context.font = fontStyle; // making 1/2 original size of bars\n      for(var i=1; i<=steps; i++){\n        ratio = i/steps;\n        context.moveTo(0,ratio*styling.CHART_HEIGHT-1);\n        context.lineTo(pad*2,ratio*styling.CHART_HEIGHT-1);\n        context.scale(1,-1);\n\n        context.fillText(chartInfo.y.min + (scope/steps)*i,0,(ratio*styling.CHART_HEIGHT-3 -pointSize)*-1);\n        context.scale(1,-1);\n\n      }\n\n      steps = chartInfo.x.steps;\n      chartInfo.x.range = chartInfo.x.max-chartInfo.x.min;\n      scope = chartInfo.x.max-chartInfo.x.min;\n      context.textAlign = \"right\";\n      for(var i=1; i<=steps; i++){\n        ratio = i/steps;\n        context.moveTo(ratio*styling.CHART_WIDTH-1,0);\n        context.lineTo(ratio*styling.CHART_WIDTH-1,pad*2);\n        context.scale(1,-1);\n        context.fillText(chartInfo.x.min + (scope/steps)*i,ratio*styling.CHART_WIDTH-pad,-pad/2);\n        context.scale(1,-1);\n\n      }\n\n    context.stroke();\n    }\n    ```", "```js\n    function addDots(context,chartInfo,data,keys,label){\n      var rangeX = chartInfo.y.range;\n      var _y;\n      var _x; \n\n      var _xoffset=0;\n      var _yoffset=0;\n\n      if(chartInfo.bubble){\n        var range = chartInfo.bubble.max-chartInfo.bubble.min;\n        var radRange = chartInfo.bubble.maxRadius-chartInfo.bubble.minRadius; \n        context.textAlign = \"left\";\n      }\n\n      for(var i=0; i<data.length; i++){\n        _x = ((data[i][keys[0]] - chartInfo.x.min )/ chartInfo.x.range) * styling.CHART_WIDTH;\n        _y = ((data[i][keys[1]] - chartInfo.y.min )/ chartInfo.y.range) * styling.CHART_HEIGHT;\n        context.fillStyle = \"#44ff44\";\n\n        if(data[i][keys[2]]){\n          _xoffset = chartInfo.bubble.minRadius + (data[i][keys[2]]-chartInfo.bubble.min)/range *radRange;\n          _yoffset = -3;\n          context.beginPath();\n          context.arc(_x,_y, _xoffset , 0, Math.PI*2, true); \n          context.closePath();\n          context.fill();\n\n          _xoffset+=styling.outlinePadding;\n        }else{\n          context.fillRect(_x,_y,10,10);\t\n        }\n\n        if(label){\n          _x+=_xoffset;\n          _y+=_yoffset;\n          context.fillStyle = styling.text;\n          context.save();\n          context.translate(_x,_y );\n          context.scale(1,-1);\n          context.fillText(\"Bluping\",0,0);\n          context.restore();\n\n        }\n      }\n    }\n    ```", "```js\ncontext.save();\ncontext.restore();\n```", "```js\ncontext.save();\ncontext.translate(17, hei/2 );\ncontext.rotate(-Math.PI/2);\ncontext.textAlign = \"center\";\ncontext.fillText(chartInfo.y.label, 0, 0);\ncontext.restore();\n```", "```js\ncontext.translate(pad+barSize,hei-pad-barSize);\ncontext.scale(1, -1);\n```", "```js\ncontext.scale(1,-1);\ncontext.fillText(chartInfo.y.min + (scope/steps)*i,0,(ratio*styling.CHART_HEIGHT-3 -pointSize)*-1);\ncontext.scale(1,-1);\n```", "```js\nvar rangeX = chartInfo.y.range;\nvar _y;\nvar _x; \nvar _xoffset=0;\nvar _yoffset=0;\n```", "```js\nif(chartInfo.bubble){\n  var range = chartInfo.bubble.max-chartInfo.bubble.min;\n  var radRange = chartInfo.bubble.maxRaduis-chartInfo.bubble.minRaduis; \n  context.textAlign = \"left\";\n}\n```", "```js\nfor(var i=0; i<data.length; i++){\n  _x = ((data[i][keys[0]] - chartInfo.x.min )/ chartInfo.x.range) * styling.CHART_WIDTH;\n  _y = ((data[i][keys[1]] - chartInfo.y.min )/ chartInfo.y.range) * styling.CHART_HEIGHT;\n  context.fillStyle = \"#44ff44\";\n```", "```js\nif(data[i][keys[2]]){\n  _xoffset = chartInfo.bubble.minRaduis + (data[i][keys[2]]-chartInfo.bubble.min)/range *radRange;\n  _yoffset = -3;\n  context.beginPath();\n  context.arc(_x,_y, _xoffset , 0, Math.PI*2, true); \n  context.closePath();\n  context.fill();\t\n  _xoffset+=styling.outlinePadding;\n}else{\n   context.fillRect(_x,_y,10,10);\t\n}\n```", "```js\nfunction addDots(context,chartInfo,data,keys,label){}\n```", "```js\nif(label){\n  _x+=_xoffset;\n  _y+=_yoffset;\n  context.fillStyle = styling.text;\n  context.save();\n  context.translate(_x,_y );\n  context.scale(1,-1);\n  context.fillText(data[i][label],0,0);\n  context.restore();\t\t\t\t\t\t\n }\n```", "```js\n    var data= [\t{label:\"Asia\", value:3518000000,style:\"#B1DDF3\"},\n      {label:\"Africa\", value:839000000,style:\"#FFDE89\"},\n      {label:\"Europe\", value:803000000,style:\"#E3675C\"},\n      {label:\"Latin America and Caribbean\", value: 539000000,style:\"#C2D985\"},\n      {label:\"North America\", value:320000000,style:\"#eeeeee\"},\n      {label:\"Near East\", value:179000000,style:\"#aaaaaa\"},\n      {label:\"Oceania\", value:32000000,style:\"#444444\"}\n      ];\n    var wid;\n    var hei;\n    var radius = 100;\n    ```", "```js\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n    ...\n    ```", "```js\n    var total=0;\n    for(var i=0; i<data.length; i++) total+=data[i].value;\n    ```", "```js\n    var rad360 = Math.PI*2;\n    context.translate(wid/2,hei/2);\n    ```", "```js\n    var currentTotal=0;\n      for(i=0; i<data.length; i++){\n      context.beginPath();\n      context.moveTo(0,0);\n      context.fillStyle = data[i].style;\n      context.arc( 0,0,radius,currentTotal/total*rad360,(currentTotal+data[i].value)/total*rad360,false);\n      context.lineTo(0,0);\n      context.closePath();\n      context.fill();\t\n\n      currentTotal+=data[i].value;\n      }\n    }\n    ```", "```js\nvar currentTotal=0;\n  for(i=0; i<data.length; i++){\n    context.beginPath();\n    context.moveTo(0,0);\n    context.fillStyle = data[i].style;\n```", "```js\ncontext.arc( 0,0,radius,currentTotal/total*rad360,(currentTotal+data[i].value)/total*rad360,false);\ncontext.lineTo(0,0);\ncontext.closePath();\ncontext.fill();\t\n\ncurrentTotal+=data[i].value;\n```", "```js\ncurrentTotal/total*rad360\n\n```", "```js\n(currentTotal+data[i].value)/total*rad360\n```", "```js\nvar copyStyle = \"#0000000000\";\n```", "```js\ncurrentTotal+=data[i].value;\n```", "```js\ncontext.strokeStype = context.fillStyle =  copyStyle;\n```", "```js\nmidRadian = (currentTotal+data[i].value/2)/total*rad360;\n```", "```js\ncontext.beginPath();\ncontext.moveTo(Math.cos(midRadian)*radius,Math.sin(midRadian)*radius);\ncontext.lineTo(Math.cos(midRadian)*(radius+20),Math.sin(midRadian)*(radius+20));\ncontext.stroke();\n```", "```js\ncontext.fillText(data[i].label,Math.cos(midRadian)*(radius+40),Math.sin(midRadian)*(radius+40));\n```", "```js\ncontext.fillText(formatToMillions(data[i].value) + \"(\" +formatToPercent(data[i].value/total) + \")\" ,Math.cos(midRadian)*(radius+40),Math.sin(midRadian)*(radius+40) + 12);\n```", "```js\nfunction formatToPercent(val){\n  val*=10000;\n  val = parseInt(val);\n  val/=100;\n  return val + \"%\"\t\n}\n\nfunction formatToMillions(val){\n  val/=1000000;\n  return val + \"Million\";\t\n}\n```", "```js\n    var data1= [\t{label:\"Asia\", value:3518000000,style:\"#B1DDF3\"},\n      {label:\"Africa\", value:839000000,style:\"#FFDE89\"},\n      {label:\"Europe\", value:803000000,style:\"#E3675C\"},\n      {label:\"Latin America and Caribbean\", value: 539000000,style:\"#C2D985\"},\n      {label:\"North America\", value:320000000,style:\"#999999\"},\n      {label:\"Near East\", value:179000000,style:\"#666666\"}\n    ];\n\n    var data2= [\t{label:\"Asia\", value:151000,style:\"#B1DDF3\"},\n      {label:\"Africa\", value:232000,style:\"#FFDE89\"},\n      {label:\"Europe\", value:842000,style:\"#E3675C\"},\n      {label:\"Latin America and Caribbean\", value: 538100,style:\"#C2D985\"},\n      {label:\"North America\", value:3200,style:\"#999999\"},\n      {label:\"Near East\", value:17900,style:\"#666666\"}\n    ];\n    ```", "```js\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n      context.translate(wid/2,hei/2);\n\n      createPie(context,data1,190);\n      createPie(context,data2,150);\n      createHole(context,100);\n    }\n    ```", "```js\n    function createPie(context,data,radius){\n      var total=0;\n      for(var i=0; i<data.length;i++) total+=data[i].value;\n\n      var rad360 = Math.PI*2;\n\n      var currentTotal=0;\n      var midRadian;\n      var offset=0;\n      for(i=0; i<data.length; i++){\n        context.beginPath();\n        context.moveTo(0,0);\n        context.fillStyle = data[i].style;\n        context.arc( 0,0,radius,currentTotal/total*rad360,(currentTotal+data[i].value)/total*rad360,false);\n        context.lineTo(0,0);\n        context.closePath();\n        context.fill();\t\n\n        context.strokeStype = context.fillStyle =  copyStyle;\n        midRadian = (currentTotal+data[i].value/2)/total*rad360;\n        context.textAlign = \"center\";\n        context.fillText(formatToPercent(data[i].value/total),Math.cos(midRadian)*(radius-20),Math.sin(midRadian)*(radius-20) );\n\n        currentTotal+=data[i].value;\n\n      }\n\n    }\n    ```", "```js\n    function createHole(context,radius){\n      context.beginPath();\n      context.moveTo(0,0);\n      context.fillStyle = \"#ffffff\";\n      context.arc( 0,0,radius,0,Math.PI*2,false);\n      context.closePath();\n      context.fill();\n\n    }\n    ```", "```js\ncontext.fillText(formatToPercent(data[i].value/total),Math.cos(midRadian)*(radius-20),Math.sin(midRadian)*(radius-20) );\n```", "```js\nfunction init(){\n  var can = document.getElementById(\"bar\");\n\n  wid = can.width;\n  hei = can.height;\n  var context = can.getContext(\"2d\");\n  context.translate(wid/2,hei/2);\n\n context.shadowOffsetX = 0;\n context.shadowOffsetY = 0;\n context.shadowBlur    = 8;\n context.shadowColor   = 'rgba(0, 0, 0, 0.5)';\n\n  createPie(context,data1,190);\n  createPie(context,data2,150);\n  createHole(context,100);\n\n}\n```", "```js\ncontext.shadowColor   = 'rgba(0, 0, 0, 0)';\ncontext.translate(-35,-55);\ncreateLegend(context,data1);\n```", "```js\nfunction createLegend(context,data){\n  context.textAlign=\"left\";\n  for(var i=0;i<data.length;i++){\n    context.fillStyle=data[i].style;\n    context.fillRect(0,i*20,10,10);\t\n    context.fillText(data[i].label,20,i*20+8);\n  }\n}\n```", "```js\n    var data=[{label:\"Ben\", style:\"#E3675C\", math:90,english:45,spanish:25,programing:90,bible:20,art:90},\n      {label:\"Sharon\", style:\"#C2D985\", math:100,english:90,spanish:60,programing:27,bible:80,art:20}];\n\n    var chartInfo= {steps:10, max:100, types:[\"math\",\"english\",\"spanish\",\"programing\",\"bible\",\"art\"]};\n    ```", "```js\n    var wid;\n    var hei;\n    var copyStyle = \"#0000000000\";\n    var radius = 180;\n    var radianOffset = Math.PI/2\n\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n\n      createSpider(context,chartInfo,data);\n    }\n    ```", "```js\n    function createSpider(context,chartInfo,data){\n      drawWeb(context,chartInfo,radius);\n      drawDataWeb(context,chartInfo,data,radius);\n\n    }\n    ```", "```js\n    function drawWeb(context,chartInfo,radius){\n      chartInfo.stepSize = chartInfo.max/chartInfo.steps;\n      var hSteps = chartInfo.types.length;\n      var hStepSize = (Math.PI*2)/hSteps;\n      context.translate(wid/2,hei/2);\n      context.strokeStyle = \"#000000\";\n        for(var i=0; i<hSteps; i++){\n          context.moveTo(0,0);\n          context.lineTo(Math.cos(hStepSize*i + radianOffset)*(radius+20),Math.sin(hStepSize*i + radianOffset)*(radius+20));\n        }\n\n        var stepSize = radius/chartInfo.steps;\n        var cRad;\n\n        for(var i=1; i<=chartInfo.steps; i++){\n          cRad = i*stepSize;\n          context.moveTo(Math.cos(radianOffset)*cRad,Math.sin(radianOffset)*cRad);\n\n        for(var j=0;j<hSteps; j++){\n          context.lineTo(Math.cos(hStepSize*j + radianOffset)*cRad,Math.sin(hStepSize*j + radianOffset)*cRad);\n        }\n        context.lineTo(Math.cos(radianOffset)*cRad,Math.sin(radianOffset)*cRad);\n\n      }\n\n      context.stroke();\n    }\n    ```", "```js\n    function drawDataWeb(context,chartInfo,data,radius){\n      var hSteps = chartInfo.types.length;\n      var hStepSize = (Math.PI*2)/hSteps;\n      for(i=0; i<data.length; i++){\n        context.beginPath();\n        context.strokeStyle = data[i].style;\n        context.lineWidth=3;\n        cRad = radius*(data[i][chartInfo.types[0]]/chartInfo.max);\n        context.moveTo(Math.cos(radianOffset)*cRad,Math.sin(radianOffset)*cRad);\n\n        for(var j=1;j<hSteps; j++){\n          cRad = radius*(data[i][chartInfo.types[j]]/chartInfo.max);\n          context.lineTo(Math.cos(hStepSize*j + radianOffset)*cRad,Math.sin(hStepSize*j + radianOffset)*cRad);\n        }\n        cRad = radius*(data[i][chartInfo.types[0]]/chartInfo.max);\n        context.lineTo(Math.cos(radianOffset)*cRad,Math.sin(radianOffset)*cRad);\n        context.stroke();\n      }\n\n    }\n    ```", "```js\nchartInfo.stepSize = chartInfo.max/chartInfo.steps;\nvar hSteps = chartInfo.types.length;\nvar hStepSize = (Math.PI*2)/hSteps;\ncontext.translate(wid/2,hei/2);\ncontext.strokeStyle = \"#000000\";\n```", "```js\nfor(var i=0; i<hSteps; i++){\n  context.moveTo(0,0);\n  context.lineTo(Math.cos(hStepSize*i + radianOffset)*(radius+20),Math.sin(hStepSize*i + radianOffset)*(radius+20));\n}\n```", "```js\nvar stepSize = radius/chartInfo.steps;\n  var cRad;\n\n  for(var i=1; i<=chartInfo.steps; i++){\n    cRad = i*stepSize;\n    context.moveTo(Math.cos(radianOffset)*cRad,Math.sin(radianOffset)*cRad);\n\n    for(var j=0;j<hSteps; j++){\n      context.lineTo(Math.cos(hStepSize*j + radianOffset)*cRad,Math.sin(hStepSize*j + radianOffset)*cRad);\n    }\n    context.lineTo(Math.cos(radianOffset)*cRad,Math.sin(radianOffset)*cRad);\n\n  }\n\ncontext.stroke();\n```", "```js\nfunction drawWeb(context,chartInfo,radius){\n  chartInfo.stepSize = chartInfo.max/chartInfo.steps;\n  var hSteps = chartInfo.types.length;\n  var hStepSize = (Math.PI*2)/hSteps;\n  context.translate(wid/2,hei/2);\n  context.strokeStyle = \"#000000\";\n  context.textAlign=\"center\";\n  for(var i=0; i<hSteps; i++){\n context.moveTo(0,0);\tcontext.lineTo(Math.cos( radianOffset)*(radius+20),Math.sin( radianOffset)*(radius+20));\n context.fillText(chartInfo.types[i],Math.cos( radianOffset)*(radius+30),Math.sin( radianOffset)*(radius+30));\n  context.rotate(hStepSize);\n}\n```", "```js\n    var xml = <node name =\"Display Object\">\n    <node name=\"AVM1Mobie\" />\n      <node name=\"Bitmap\" />\n      <node name=\"InteractiveObject\" >\n      <node name=\"DisplayObjectContainer\">\n      <node name=\"Loader\" />\t\n      <node name=\"Sprite\" >\n      <node name=\"MovieClip\"/>\n    </node>\t\n    <node name=\"Stage\" />\t\n    </node>\t\n    <node name=\"SimpleButton\" />\t\n      <node name=\"TextField\" />\t\n    </node>\n      <node name=\"MorphShape\" />\n      <node name=\"Shape\" />\n      <node name=\"StaticText\" />\n      <node name=\"Video\" />\n    </node>;\n    ```", "```js\n    var wid;\n    var hei;\n    var style = {boxWidth:90,boxHeight:30, boxColor:\"black\",boxCopy:\"white\", boxSpace:4, lines:\"black\",lineSpace:30 };\n    ```", "```js\n    function init(){\n      var can = document.getElementById(\"bar\");\n      wid = can.width;\n      hei = can.height;\n      var context = can.getContext(\"2d\");\n      context.textAlign = \"center\";\n      context.font = \"6pt Arial\";\n      drawTree(context,wid/2,20, xml );\n    }\n    ```", "```js\n    function drawTree(context,_x,_y,node){\t\n      context.fillStyle=style.boxColor;\n      context.fillRect(_x-style.boxWidth/2,_y-style.boxHeight/2,style.boxWidth,style.boxHeight);\n      context.fillStyle=style.boxCopy;\n      context.fillText(node.@name,_x,_y+8);\n\n      if(node.hasComplexContent()){\n        var nodes = node.node;\n        var totalWidthOfNewLayer = nodes.length()* style.boxWidth;\n        if(nodes.length()>1)totalWidthOfNewLayer += ( nodes.length()-1)* style.boxSpace;\n        var startXPoint = _x-totalWidthOfNewLayer/2 + style.boxWidth/2;\n        var currentY = _y+style.boxHeight/2;\n\n        context.beginPath();\n        context.strokeStyle =\"#000000\";\n        context.lineWidth=3;\n        context.moveTo(_x,currentY);\n        currentY+=style.lineSpace/2;\n        context.lineTo(_x,currentY);\n        context.moveTo(startXPoint,currentY);\n        context.lineTo(startXPoint+totalWidthOfNewLayer- style.boxWidth,currentY); \n        context.stroke();\t\n\n        for(var i=0; i<nodes.length();i++){\n          drawTree(context,startXPoint + i*(style.boxWidth + style.boxSpace) ,_y+50,nodes[i]);\n        }\n      }\n    }\n    ```", "```js\ncontext.fillStyle=style.boxColor;\ncontext.fillRect(_x-style.boxWidth/2,_y-style.boxHeight/2,style.boxWidth,style.boxHeight);\ncontext.fillStyle=style.boxCopy;\ncontext.fillText(node.@name,_x,_y+8);\n```", "```js\nif(node.hasComplexContent()){\n```", "```js\nvar nodes = node.node;\nvar totalWidthOfNewLayer = nodes.length()* style.boxWidth;\nif(nodes.length()>1)\n  totalWidthOfNewLayer += ( nodes.length()-1)* style.boxSpace;\n\n  var startXPoint = _x-totalWidthOfNewLayer/2 + style.boxWidth/2;\n  var currentY = _y+style.boxHeight/2;\n\n  context.beginPath();\n  context.strokeStyle =\"#000000\";\n  context.lineWidth=3;\n  context.moveTo(_x,currentY);\n  currentY+=style.lineSpace/2;\n  context.lineTo(_x,currentY);\n  context.moveTo(startXPoint,currentY);\n  context.lineTo(startXPoint+totalWidthOfNewLayer- style.boxWidth,currentY); \ncontext.stroke();\n```", "```js\nfor(var i=0; i<nodes.length();i++){\n  drawTree(context,startXPoint + i*(style.boxWidth + style.boxSpace) ,_y+50,nodes[i]);\n  }\t\n}\n```", "```js\nvar xml = <node name =\"Display Object\">\n  <node name=\"AVM1Mobie\" />\n  <node name=\"Bitmap\" />\n  <node name=\"InteractiveObject\" >\n  <node name=\"DisplayObjectContainer\">\n <node name=\"Loader\">\n <node name=\"SlideLoader\"/>\n <node name=\"ImageLoader\"/>\n </node> \n  <node name=\"Sprite\" >\n  <node name=\"MovieClip\"/>\n <node name=\"MovieClip2\"/>\n  </node>\t\n  <node name=\"Stage\" />\t\n  </node>\t\n  <node name=\"SimpleButton\" />\t\n  <node name=\"TextField\" />\t\n  </node>\n  <node name=\"MorphShape\" />\n  <node name=\"Shape\" />\n  <node name=\"StaticText\" />\n  <node name=\"Video\" />\n</node>;\n```", "```js\nfunction drawTree(context,_x,_y,node,nextChildX){\n  context.fillStyle=style.boxColor;\n  context.fillRect(_x-style.boxWidth/2,_y-style.boxHeight/2,style.boxWidth,style.boxHeight);\n  context.fillStyle=style.boxCopy;\n  context.fillText(node.@name,_x,_y+8);\n\n  if(node.hasComplexContent()){\n    var nodes = node.node;\n    var totalWidthOfNewLayer = nodes.length()* style.boxWidth;\n    if(nodes.length()>1)totalWidthOfNewLayer += ( nodes.length()-1)* style.boxSpace;\n    var startXPoint = _x-totalWidthOfNewLayer/2 + style.boxWidth/2;\n    var currentY = _y+style.boxHeight/2;\n\n    context.beginPath();\n    context.strokeStyle =\"#000000\";\n    context.lineWidth=3;\n    context.moveTo(_x,currentY);\n\n    if(nextChildX>startXPoint){\n      currentY+=style.lineSpace/4;\n      context.lineTo(_x,currentY);\n      context.lineTo(_x + (nextChildX-startXPoint),currentY);\n\n      currentY+=style.lineSpace/4;\n      context.lineTo(_x + (nextChildX-startXPoint),currentY);\n      startXPoint = nextChildX; // offset correction value\n }else{\n      currentY+=style.lineSpace/2;\n      context.lineTo(_x,currentY);\n }\n    context.moveTo(startXPoint,currentY);\n    context.lineTo(startXPoint+totalWidthOfNewLayer- style.boxWidth,currentY); \n    context.stroke();\n var returnedNextChildX=0;\n    for(var i=0; i<nodes.length();i++){\n      returnedNextChildX = drawTree(context,startXPoint + i*(style.boxWidth + style.boxSpace) ,_y+50,nodes[i],returnedNextChildX);\n    }\n return startXPoint + i*(style.boxWidth + style.boxSpace);\n  }\n\n return 0;\n}\n```"]