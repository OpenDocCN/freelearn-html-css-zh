["```js\n    var layers = [{label:\"Completed Chapter 1\", amount:23},\n      {label:\"Completed Chapter 2\", amount:15},\n      {label:\"Completed Chapter 3\", amount:11},\n      {label:\"Completed Chapter 4\", amount:7},\n      {label:\"Completed Chapter 5\", amount:3} ];\n    ```", "```js\n    var chartInfo= {height:200, width:200};\n\n    var s = { outlinePadding:4,\n      barSize:16,\n      font:\"12pt Verdana, sans-serif\",\n      background:\"eeeeee\",\n      stroke:\"cccccc\",\n      text:\"605050\"\n    };\n    ```", "```js\n    var wid;\n    var hei;\n    var totalPixels;\n    var totalData=0;\n    var pixelsPerData;\n    var currentTriangleHeight = chartInfo.height;\n    ```", "```js\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      totalPixels = (chartInfo.height * chartInfo.width) / 2;\n      for(var i in layers) totalData +=layers[i].amount;\n\n      pixelsPerData = totalPixels/totalData;\n\n      var context = can.getContext(\"2d\");\n      context.fillStyle = s.background;\n      context.strokeStyle = s.stroke;\n\n      context.translate(wid/2,hei/2 - chartInfo.height/2);\n\n      context.moveTo(-chartInfo.width/2 , chartInfo.height);\n      context.lineTo(chartInfo.width/2,chartInfo.height);\n      context.lineTo(0,0);\n      context.lineTo(-chartInfo.width/2 , chartInfo.height);\n\n      for(i=0; i+1<layers.length; i++) findLine(context, layers[i].amount);\n\n      context.stroke();\n    }\n    ```", "```js\n    function findLine(context,val){\n      var newHeight = currentTriangleHeight;\n      var pixels = pixelsPerData * val;\n      var lines = parseInt(pixels/newHeight); //rounded\n\n      pixels = lines*lines/2; //missing pixels\n\n      newHeight-=lines;\n\n      lines += parseInt(pixels/newHeight);\n      currentTriangleHeight-=lines;\n\n      context.moveTo(-currentTriangleHeight/2 , currentTriangleHeight);\n      context.lineTo(currentTriangleHeight/2,currentTriangleHeight);\n    }\n    ```", "```js\ntotalPixels = (chartInfo.height * chartInfo.width) / 2;\n```", "```js\nfor(var i in layers) totalData +=layers[i].amount;\n```", "```js\npixelsPerData = totalPixels/totalData;\n```", "```js\ncontext.translate(wid/2,hei/2 - chartInfo.height/2);\n\ncontext.moveTo(-chartInfo.width/2 , chartInfo.height);\ncontext.lineTo(chartInfo.width/2,chartInfo.height);\ncontext.lineTo(0,0);\ncontext.lineTo(-chartInfo.width/2 , chartInfo.height);\n```", "```js\nfor(i=0; i+1<layers.length; i++) findLine(context, layers[i].amount);\ncontext.stroke();\n```", "```js\nvar layers = [{label:\"Completed Chapter 1\", amount:23, style:\"#B1DDF3\"},  {label:\"Completed Chapter 2\", amount:15, style:\"#FFDE89\"},\n  {label:\"Completed Chapter 3\", amount:11, style:\"#E3675C\"},\n  {label:\"Completed Chapter 4\", amount:7, style:\"#C2D985\"},\n  {label:\"Completed Chapter 5\", amount:3, style:\"#999999\"}];\n```", "```js\nfunction findLine(context,val,isMove){\n  var newHeight = currentTriangleHeight;\n  var pixels = pixelsPerData * val;\n  var lines = parseInt(pixels/newHeight); //rounded\n\n  pixels = lines*lines/2; //missing pixels\n\n  newHeight-=lines;\n\n  lines += parseInt(pixels/newHeight);\n\n  currentTriangleHeight-=lines;\n\n if(isMove){\n    context.moveTo(currentTriangleHeight/2,currentTriangleHeight);\n context.lineTo(-currentTriangleHeight/2 , currentTriangleHeight);\n }else{\n context.lineTo(-currentTriangleHeight/2 , currentTriangleHeight);\n context.lineTo(currentTriangleHeight/2,currentTriangleHeight); \n }\n}\n```", "```js\nfunction findLine(context,val,isMove){\n  var newHeight = currentTriangleHeight;\n  var pixels = pixelsPerData * val;\n  var lines = parseInt(pixels/newHeight); //rounded\n\n  pixels = lines*lines/2; //missing pixels\n\n  newHeight-=lines;\n\n  lines += parseInt(pixels/newHeight);\n\n newHeight = currentTriangleHeight-lines;\n\n if(isMove){\n context.moveTo(newHeight/2,newHeight); \n context.lineTo(-newHeight/2 , newHeight);\n }else{\n context.lineTo(-newHeight/2 , newHeight);\n context.lineTo(newHeight/2,newHeight); \n }\n\nreturn lines;\n}\n```", "```js\nvar secHeight = 0;\n  for(i=0;i<layers.length-1; i++){\n    context.beginPath();\n    findLine(context, 0,true);\n    secHeight = findLine(context, layers[i].amount);\n    currentTriangleHeight -= secHeight;\n    context.fillStyle = layers[i].style;\n    context.fill();\t\n  }\n\n  context.beginPath();\n  findLine(context, 0,true);\n  context.lineTo(0,0);\n  context.fillStyle = layers[i].style;\n  context.fill();\n```", "```js\nvar secHeight = 0;\n  for(i=0;i<layers.length-1; i++){\n    context.beginPath();\n    findLine(context, 0,true);\n    secHeight = findLine(context, layers[i].amount);\n    currentTriangleHeight -= secHeight;\n    context.fillStyle = layers[i].style;\n    context.fill();\t\n context.fillStyle = s.text;\n context.fillText(layers[i].label, currentTriangleHeight/2 +secHeight/2, currentTriangleHeight+secHeight/2);\n  }\n\n  context.beginPath();\n  findLine(context, 0,true);\n  context.lineTo(0,0);\n  context.fillStyle = layers[i].style;\n  context.fill();\n context.fillStyle = s.text;\n context.fillText(layers[i].label, currentTriangleHeight/2 , currentTriangleHeight/2);\n\n```", "```js\n<hr/>\n\n  2009 : <input type=\"radio\" name=\"i2009\" value=\"-1\" /> off\n    <input type=\"radio\" name=\"i2009\" value=\"0\" /> line\n    <input type=\"radio\" name=\"i2009\" value=\"1\" select=\"1\" /> full<br/>\n  2010 : <input type=\"radio\" name=\"i2010\" value=\"-1\" /> off\n    <input type=\"radio\" name=\"i2010\" value=\"0\" /> line\n    <input type=\"radio\" name=\"i2010\" value=\"1\" select=\"1\" /> full<br/>\n  \t2011 : <input type=\"radio\" name=\"i2011\" value=\"-1\" /> off\n    <input type=\"radio\" name=\"i2011\" value=\"0\" /> line\n    <input type=\"radio\" name=\"i2011\" value=\"1\" select=\"1\" /> full<br/>\n```", "```js\n    var HIDE_ELEMENT = -1;\n    var LINE_ELEMENT = 0;\n    var FILL_ELEMENT = 1;\n\n    var elementStatus={ i2009:FILL_ELEMENT,\n      i2010:FILL_ELEMENT,\n      i2011:FILL_ELEMENT};\n    ```", "```js\n    var context;\n\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      context = can.getContext(\"2d\");\n\n      drawChart();\n    }\n    ```", "```js\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      context = can.getContext(\"2d\");\n\n      drawChart();\n\n      var radios ;\n        for(var id in elementStatus){\n          radios = document.getElementsByName(id);\n          for (var rid in radios){\n          radios[rid].onchange = onChangedRadio;\n          if(radios[rid].value == elementStatus[id] )\n          radios[rid].checked = true;\t\n        }\n      }\n\n    }\n    ```", "```js\n    function drawChart(){\n      context.lineWidth = 1;\n      context.fillStyle = \"#eeeeee\";\n      context.strokeStyle = \"#999999\";\n      context.fillRect(0,0,wid,hei);\n      context.font = \"10pt Verdana, sans-serif\";\n      context.fillStyle = \"#999999\";\n\n      context.moveTo(CHART_PADDING,CHART_PADDING);\n      context.rect(CHART_PADDING,CHART_PADDING,wid-CHART_PADDING*2,hei-CHART_PADDING*2);\n      context.stroke();\n      context.strokeStyle = \"#cccccc\";\n      fillChart(context,chartInfo);\n\n      if(elementStatus.i2011>-1) addLine(context,formatData(a2011,   \"/2011\",\"#B1DDF3\"),\"#B1DDF3\",elementStatus.i2011==1);\n      if(elementStatus.i2010>-1) addLine(context,formatData(a2010, \"/2010\",\"#FFDE89\"),\"#FFDE89\",elementStatus.i2010==1);\n      if(elementStatus.i2009>-1) addLine(context,formatData(a2009, \"/2009\",\"#E3675C\"),\"#E3675C\",elementStatus.i2009==1);\n\n    }\n    ```", "```js\n    function onChangedRadio(e){\t\n      elementStatus[e.target.name] = e.target.value;\n      context.clearRect(0,0,wid,hei);\n      context.beginPath();\n      drawChart();\n    }\n    ```", "```js\ncontext.lineWidth = 1;\n```", "```js\nif(elementStatus.i2011>-1) addLine(context,formatData(a2011, \"/2011\",\"#B1DDF3\"),\"#B1DDF3\",elementStatus.i2011==1);\n```", "```js\nif(elementStatus.i2011!=HIDE_ELEMENT)\n  addLine(context,formatData(a2011, \"/2011\",\"#B1DDF3\"),\"#B1DDF3\",elementStatus.i2011==FILL_ELEMENT);\n```", "```js\nvar radios ;\n  for(var id in elementStatus){\n    radios = document.getElementsByName(id);\n    for (var rid in radios){\n      radios[rid].onchange = onChangedRadio;\n if(radios[rid].value == elementStatus[id] ) radios[rid].checked = true; \n    }\n\n  }\n```", "```js\nelementStatus[e.target.name] = e.target.value;\n```", "```js\ncontext.clearRect(0,0,wid,hei);\n```", "```js\ncontext.beginPath();\n```", "```js\ndrawChart();\n```", "```js\nvar chartData = [\n  {name: \"Asia\", value:4216},\n  {name: \"Africa\",value:1051},\n  {name: \"The Americas and the Caribbean\", value:942},\n  {name: \"Europe\", value:740},\n  {name: \"Oceania\", value:37}\n];\n```", "```js\n    var wid;\n    var hei;\n    var context;\n    var total=0;\n    ```", "```js\n    function init(){\n      var can = document.getElementById(\"bar\");\n\n      wid = can.width;\n      hei = can.height;\n      context = can.getContext(\"2d\");\n\n      for(var item in chartData) total += chartData[item].value;\n\n      context.fillRect(0,0,wid,hei);\n      context.fillStyle = \"RGB(255,255,255)\";\n      context.fillRect(5,5,wid-10,hei-10);\n      context.translate(5,5);\n      wid-=10;\n      hei-=10;\n\n      drawTreeMap(chartData);\n\n    }\n    ```", "```js\n    function drawTreeMap(infoArray){\n      var percent=0;\n      var cx=0;\n      var rollingPercent = 0;\n      for(var i=0; i<infoArray.length; i++){\n        percent = infoArray[i].value/total;\n        rollingPercent +=percent\n        context.fillStyle = formatColorObject(getRandomColor(255));\n        context.fillRect(cx,0 ,wid*percent,hei);\n        cx+=wid*percent;\n        if(rollingPercent > 0.7) break;\n\n      }\n\n      var leftOverPercent = 1-rollingPercent;\n      var leftOverWidth = wid*leftOverPercent;\n      var cy=0;\n      for(i=i+1; i<infoArray.length; i++){\n        percent = (infoArray[i].value/total)/leftOverPercent;\n        context.fillStyle = formatColorObject(getRandomColor(255));\n        context.fillRect(cx,cy ,leftOverWidth,hei*percent);\n        cy+=hei*percent;\n      }\n\n    }\n    ```", "```js\n    function formatColorObject(o){\n      return \"rgb(\"+o.r+\",\"+o.g+\",\"+o.b+\")\";\n    }\n\n    function getRandomColor(val){\n      return {r:getRandomInt(255),g:getRandomInt(255),b:getRandomInt(255)};\n    }\n\n    function getRandomInt(val){\n      return parseInt(Math.random()*val)+1\n    }\n    ```", "```js\nfor(var item in chartData) total += chartData[item].value;\n```", "```js\nCONTEXT.FILLRECT(0,0,WID,HEI);\nCONTEXT.FILLSTYLE = \"RGB(255,255,255)\";\nCONTEXT.FILLRECT(5,5,WID-10,HEI-10);\nCONTEXT.TRANSLATE(5,5);\nWID-=10;\nHEI-=10;\n\ndrawTreeMap(chartData);\n```", "```js\nfunction drawTreeMap(infoArray){...}\n```", "```js\nvar percent=0;\nvar cx=0;\nvar rollingPercent = 0;\n```", "```js\nfor(var i=0; i<infoArray.length; i++){\n  percent = infoArray[i].value/total;\n  rollingPercent +=percent\n  context.fillStyle =\n  formatColorObject(getRandomColor(255));\n  context.fillRect(cx,0 ,wid*percent,hei);\n  cx+=wid*percent;\n```", "```js\nif(rollingPercent > 0.7) break;\n}\n```", "```js\nvar leftOverPercent = 1-rollingPercent;\nvar leftOverWidth = wid*leftOverPercent;\nvar cy=0;\n```", "```js\nfor(i=i+1; i<infoArray.length; i++){\n  percent = (infoArray[i].value/total)/leftOverPercent;\n  context.fillStyle = formatColorObject(getRandomColor(255));\n  context.fillRect(cx,cy ,leftOverWidth,hei*percent);\n  cy+=hei*percent;\n}\n```", "```js\nvar chartData = [\n  {name: \"Asia\", data:[\n    {name: \"South Central\",total:1800},\n    {name: \"East\",total:1588},\n    {name: \"South East\",total:602},\n    {name: \"Western\",total:238},\n    {name: \"Northern\",total:143}\n  ]},\n  {name: \"Africa\",total:1051},\n  {name: \"The Americas and the Caribbean\", data:[\n    {name: \"South America\",total:396},\n    {name: \"North America\",total:346},\n    {name: \"Central America\",total:158},\n    {name: \"Caribbean\",total:42}\n  ]},\n  {name: \"Europe\", total:740},\n  {name: \"Oceania\", total:37}\n];\n```", "```js\nvar val;\nvar i;\nfor(var item in chartData) {\n  val = chartData[item];\n  if(!val.total && val.data){\n    val.total = 0;\n    for( i=0; i<val.data.length; i++)\n    val.total+=val.data[i].total;\n  }\n\n  total += val.total;\n}\n```", "```js\ndrawTreeMap(chartData,wid,hei,0,0,total);\n```", "```js\nfunction drawTreeMap(infoArray,wid,hei,x,y,total,clr){\n  var percent=0;\n  var cx=x ;\n  var cy=y;\n\n  var pad = 0;\n  var pad2 = 0;\n\n  var rollingPercent = 0;\n  var keepColor = false;\n if(clr){ //keep color and make darker\n keepColor = true;\n clr.r = parseInt(clr.r *.9);\n clr.g = parseInt(clr.g *.9);\n clr.b = parseInt(clr.b *.9);\n pad = PAD*2; \n pad2 = PAD2*2;\n }\n\n```", "```js\nfor(var i=0; i<infoArray.length; i++){\n  percent = infoArray[i].total/total;\n  rollingPercent +=percent\n if(!keepColor){\n clr = getRandomColor(255);\n }\n\n context.fillStyle = formatColorObject(clr);\n context.fillRect(cx+pad ,cy+pad ,wid*percent - pad2,hei-pad2);\n context.strokeRect(cx+pad ,cy+pad ,wid*percent - pad2,hei-pad2);\n if(infoArray[i].data){\n drawTreeMap(infoArray[i].data,parseInt(wid*percent - PAD2),hei - PAD2,cx+ PAD,cy + PAD,infoArray[i].total,clr);\n }\n  cx+=wid*percent;\n  if(rollingPercent > 0.7) break;\n\n}\n```", "```js\n...\n{name: \"Asia\", data:[\n  {name: \"South Central\",total:1800},\n  {name: \"East\",total:1588},\n  {name: \"South East\",total:602},\n  {name: \"Western\",total:238},\n  {name: \"Northern\",data:[{name: \"1\",data:[\n    {name: \"2\",total:30},\n    {name: \"2\",total:30}\n  ]},\n  {name: \"2\",total:53},\n  {name: \"2\",total:30}\n]}  ...\n```", "```js\nfunction init(){\n  var can = document.getElementById(\"bar\");\n\n  wid = can.width;\n  hei = can.height;\n  context = can.getContext(\"2d\");\n\n  total = calculateTotal(chartData); //recursive function\n...\n```", "```js\nfunction calculateTotal(chartData){\n  var total =0;\n  var val;\n  var i;\n  for(var item in chartData) {\n    val = chartData[item];\n    if(!val.total && val.data)\n      val.total = calculateTotal(val.data);\n\n    total += val.total;\n  }\n\nreturn total;\n\n}\n```", "```js\n    var currentDataset;\n    ```", "```js\n    currentDataset = chartData;\n    drawTreeMap(chartData,wid,hei,0,0,total);\n    ```", "```js\n    can.addEventListener('click', onTreeClicked, false);\n    ```", "```js\n    function onTreeClick(e) {\n      var box;\n      for(var item in currentDataset){\n        if(currentDataset[item].data){\n          box = currentDataset[item].box;\n          if(e.x>= box.x && e.y>= box.y &&\n          e.x<= box.x2 && e.y<= box.y2){\n            context.clearRect(0,0,wid,hei);\n            drawTreeMap(currentDataset[item].data,wid,hei,0,0,currentDataset[item].total);\n            currentDataset = currentDataset[item].data;\n\n          break;\n          }\n\n        }\n      }\n    }\n    ```", "```js\n    drawRect(cx+pad ,cy+pad ,wid*percent \u2013 pad2,hei-pad2,infoArray[i]);\n    ```", "```js\n    function drawRect(x,y,wid,hei,dataSource){\n      context.fillRect(x,y,wid,hei);\n      context.strokeRect(x,y,wid,hei);\n      dataSource.box = {x:x,y:y,x2:x+wid,y2:y+hei};\n\n    }\n    ```", "```js\nfunction onTreeClick(e) {\n   var box;\n  for(var item in currentDataset){\n    if(currentDataset[item].data){\n```", "```js\nbox = currentDataset[item].box;\nif(e.x>= box.x && e.y>= box.y &&\n   e.x<= box.x2 && e.y<= box.y2){\n```", "```js\ncontext.clearRect(0,0,wid,hei);\ndrawTreeMap(currentDataset[item].data,wid,hei,0,0,currentDataset[item].total);\ncurrentDataset = currentDataset[item].data;\n\nbreak;\n```", "```js\nfunction onTreeClick(e) {\n   var box;\n  for(var item in currentDataset){\n    if(currentDataset[item].data){\n      box = currentDataset[item].box;\n      if(e.x>= box.x && e.y>= box.y &&\n      e.x<= box.x2 && e.y<= box.y2){\n        context.clearRect(0,0,wid,hei);\n        drawTreeMap(currentDataset[item].data,wid,hei,0,0,currentDataset[item].total);\n        currentDataset = currentDataset[item].data;\n\n      break;\n      }\n\n    }else{\n      currentDataset = chartData;\n      drawTreeMap(chartData,wid,hei,0,0,total);\n\n    }\n  }\n}\n```", "```js\n    var currentObject = {label:1,\n      value:0,\n      style:\"rgba(241, 178, 225, .5)\"};\n      var colorOptions = [\"rgba(241, 178, 225, 1)\",\"#B1DDF3\",\"#FFDE89\",\"#E3675C\",\"#C2D985\"];\n\n      var data = [];\n\n    var context;\n    var wid;\n    var hei;\n    ```", "```js\n    function init(){\n\n      var can = document.getElementById(\"bar\");\n      wid = can.width;\n      hei = can.height;\n\n      context = can.getContext(\"2d\");\n\n      document.addEventListener(\"click\",onClick);\n      interval = setInterval(onTimeReset,1000);\n      refreshChart();\n    }\n    ```", "```js\n    function onTimeReset(){\n      if(currentObject.value){\n        data.push(currentObject);\n        if(data.length>25) data = data.slice(1);\n        refreshChart();\t\n      }\n      currentObject = {label:currentObject.label+1, value:0, style: colorOptions[currentObject.label%5]};\n\n    }\n    ```", "```js\n    function onClick(e){\n      currentObject.value++;\n      refreshChart();\n    }\n    ```", "```js\n    function refreshChart(){\n      var newData = data.slice(0);\n      newData.push(currentObject);\n\n      drawChart(newData);\n    }\n    ```", "```js\n    function drawChart(data){\n      context.fillStyle = \"#eeeeee\";\n      context.strokeStyle = \"#999999\";\n      context.fillRect(0,0,wid,hei);\n\n      var CHART_PADDING = 20;\n\n      context.font = \"12pt Verdana, sans-serif\";\n      context.fillStyle = \"#999999\";\n\n      context.moveTo(CHART_PADDING,CHART_PADDING);\n      context.lineTo(CHART_PADDING,hei-CHART_PADDING);\n      context.lineTo(wid-CHART_PADDING,hei-CHART_PADDING);\n\n      var stepSize = (hei - CHART_PADDING*2)/10;\n      for(var i=0; i<10; i++){\n        context.moveTo(CHART_PADDING, CHART_PADDING + i*stepSize);\n        context.lineTo(CHART_PADDING*1.3,CHART_PADDING + i*stepSize);\n        context.fillText(10-i, CHART_PADDING*1.5, CHART_PADDING + i*\tstepSize + 6);\n      }\n      context.stroke();\n\n      var elementWidth =(wid-CHART_PADDING*2)/ data.length;\n      context.textAlign = \"center\";\n      for(i=0; i<data.length; i++){\n        context.fillStyle = data[i].style;\n        context.fillRect(CHART_PADDING +elementWidth*i ,hei-CHART_PADDING - data[i].value*stepSize,elementWidth,data[i].value*stepSize);\n        context.fillStyle = \"rgba(255, 255, 225, 0.8)\";\n        context.fillText(data[i].label, CHART_PADDING +elementWidth*(i+.5), hei-CHART_PADDING*1.5);\n\n      }\n    }\n    ```", "```js\nvar currentObject = {label:1,\n  value:0,\n  style:\"rgba(241, 178, 225, .5)\"};\nvar data = [];\n```", "```js\nfunction onClick(e){\n  currentObject.value++;\n  refreshChart();\n}\n```", "```js\ninterval = setInterval(onTimeReset,1000);\n```", "```js\nfunction onTimeReset(){\n  if(currentObject.value){\n    data.push(currentObject);\n    if(data.length>25) data = data.slice(1);\n    refreshChart();\n}\n  currentObject = {label:currentObject.label+1, value:0, style: colorOptions[currentObject.label%5]};\n\n}\n```", "```js\nfunction refreshChart(){\n  var newData = data.slice(0);\n  newData.push(currentObject);\n\n  drawChart(newData);\n\n}\n```"]