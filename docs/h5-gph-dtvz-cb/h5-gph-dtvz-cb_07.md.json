["```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>JQPlot Meter</title>\n        <meta charset=\"utf-8\" />\n        <link rel=\"stylesheet\" href=\"./external/jqplot/jquery.jqplot.min.css\">\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/jquery.jqplot.js\"></script>\n        <script src=\"img/jqplot.meterGaugeRenderer.min.js\"></script>\n\n        <script src=\"img/07.01.jqplot-meter.js\"></script>\t\t\n      </head>\n      <body style=\"background:#fafafa\">\n\n      <div id=\"meter\" style=\"height:400px;width:400px; \"></div>\n      </body>\n    </html>\n    ```", "```js\n    var meter;\n    var meterValue=0;\n    var startingSpeed = parseInt(Math.random()*60) + 30;\n    var isStarting = true;\n    var renderOptions= {\n                   label: 'Miles Per Hour',\n                   labelPosition: 'bottom',\n                   labelHeightAdjust: -10,\n                   intervalOuterRadius: 45,\n                   ticks: [0, 40, 80, 120],\n                   intervals:[25, 90, 120],\n                   intervalColors:[ '#E7E658','#66cc66', '#cc6666']\n                };\n    ```", "```js\n    $(document).ready(function(){\n\n      meter = $.jqplot('meter',[[meterValue]],{\n        seriesDefaults: {\n          renderer: $.jqplot.MeterGaugeRenderer,\n          rendererOptions:renderOptions\n        }\n      });\n\n    });\n    ```", "```js\n    $(document).ready(function(){\n\n      meter = $.jqplot('meter',[[meterValue]],{\n        seriesDefaults: {\n          renderer: $.jqplot.MeterGaugeRenderer,\n          rendererOptions:renderOptions\n        }\n      });\n\n      setInterval(updateMeter,30);\n\n    });\n    ```", "```js\n    function updateMeter(){\n      meter.destroy();  \n\n      if(isStarting && meterValue<startingSpeed){\n        ++meterValue\t\n      }else{\n        meterValue += 1- Math.random()*2;\n        meterValue = Math.max(0,Math.min(meterValue,120)); //keep our value in range no mater what\t\n      }\n\n      meter = $.jqplot('meter',[[meterValue]],{\n        seriesDefaults: {\n          renderer: $.jqplot.MeterGaugeRenderer,\n          rendererOptions:renderOptions\n        }\n      });\n\n    }\n    ```", "```js\nvar meter;\nvar meterValue=0;\nvar startingSpeed = parseInt(Math.random()*60) + 30;\nvar isStarting = true;\n```", "```js\nvar renderOptions= {\n               label: 'Miles Per Hour',\n               labelPosition: 'bottom',\n               labelHeightAdjust: -10,\n               intervalOuterRadius: 45,\n               ticks: [0, 40, 80, 120],\n               intervals:[25, 90, 120],\n               intervalColors:[ '#E7E658','#66cc66', '#cc6666']\n           };\n```", "```js\nvar renderOptions= {\n  label: 'Miles Per Hour',\n  labelPosition: 'bottom',\n  labelHeightAdjust: -10,\n  intervalOuterRadius: 45,\n //ticks: [0, 40, 80, 120],\n intervals:[10,25, 90, 120],\n intervalColors:['#999999', '#E7E658','#66cc66', '#cc6666']\n};\n```", "```js\n$(document).ready(function(){\n\n  meter = $.jqplot('meter',[[meterValue]],{\n    seriesDefaults: {\n      renderer: $.jqplot.MeterGaugeRenderer,\n      rendererOptions:renderOptions\n    }\n  });\n  setInterval(updateMeter,30);\n\n});\n```", "```js\nmeter.destroy();  \n```", "```js\nif(isStarting && meterValue<startingSpeed){\n    ++meterValue;\n}\n```", "```js\n}else{\n    meterValue += 1- Math.random()*2;\n    meterValue = Math.max(0,Math.min(meterValue,120)); //keep our value in range no mater what\t\n}\n```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>canvas3DGraph.js</title>\n        <meta charset=\"utf-8\" />\n        <link rel=\"stylesheet\" href=\"./external/dragan/canvas3DGraph.css\">\n        <script src=\"img/canvas3DGraph.js\"></script>\n        <script src=\"img/07.02.3d.js\"></script>\n\n      </head>\n      <body style=\"background:#fafafa\">\n\n        <div id=\"g-holder\">  \n          <div id=\"canvasDiv\">  \n            <canvas id=\"graph\" width=\"600\" height=\"600\" ></canvas>  \n            <div id=\"gInfo\"></div>   \n          </div>  \n\n        </div>      \n      </body>\n    </html>\n    ```", "```js\n    #g-holder {  \n        height:620px;  \n        position:relative;  \n    }  \n\n    #canvasDiv{  \n        border:solid 1px #e1e1e1;  \n        width:600px;  \n        height:600px;  \n        position:absolute;  \n        top:0px; left:0px;  \n        z-index:10;  \n    }  \n    #x-label{  \n        position:absolute;  \n        z-index:2;  \n        top:340px;  \n        left:580px;  \n    }  \n\n    #y-label{  \n        position:absolute;  \n        z-index:2;  \n        top:10px;  \n        left:220px;  \n    }  \n\n    #z-label{  \n        position:absolute;  \n        z-index:2;  \n        top:540px;  \n        left:10px;  \n    }  \n\n    #gInfo div.gText{  \n        position:absolute;  \n        z-index:-1;  \n        font:normal 10px Arial;  \n    }  \n    ```", "```js\n    var gData = [];\n\n    var curIndex=0;\n    var trailCount = 5;\n    var g;\n    var trailingArray=[];\n    ```", "```js\n    window.onload=function(){  \n      //Initialize Graph  \n      g = new canvasGraph('graph');  \n      g.barStyle = {cap:'rgba(255,255,255,1)',main:'rgba(0,0,0,0.7)', shadow:'rgba(0,0,0,1)',outline:'rgba(0,0,0,0.7)',formater:styleFormater};\t\n      for(i=0;i<100;i++){\n        gData[i] = {x:(Math.cos((i/10)) * 400 + 400), y:(1000-(i*9.2)), z:(i*10)};\n      }\n\n    plotBar();\n    setInterval(plotBar,40);\n\n    }  \n    ```", "```js\n    function plotBar(){\n      trailingArray.push(gData[curIndex]);\n\n      if(trailingArray.length>=5) trailingArray.shift();\n\n      g.drawGraph(trailingArray);//trailingArray);\n      curIndex++\n      if(curIndex>=gData.length) curIndex=0;\n    }\n    ```", "```js\n    function styleFormatter(styleColor,index,total){\n      var clrs = styleColor.split(\",\");\n      var alpha = parseFloat(clrs[3].split(\")\"));\n      alpha *= index/total+.1;\n      clrs[3] = alpha+\")\";\n      return clrs.join(\",\");\n    }\n    ```", "```js\nvar gData = [];\nvar trailingArray=[];\nvar trailCount = 5;\nvar curIndex=0;\n```", "```js\nwindow.onload=function(){  \n  //Initialise Graph  \n  g = new canvasGraph('graph');  \n  g.barStyle = {cap:'rgba(255,255,255,1)',main:'rgba(0,0,0,0.7)', shadow:'rgba(0,0,0,1)',outline:'rgba(0,0,0,0.7)',formatter:styleFormatter};\t\n  for(i=0;i<100;i++){\n    gData[i] = {x:(Math.cos((i/10)) * 400 + 400), y:(1000-(i*9.2)), z:(i*10)};\n  }\n\n  plotBar();\n  setInterval(plotBar,40);\n\n}  \n```", "```js\ntrailingArray.push(gData[curIndex]);\n```", "```js\nif(trailingArray.length>=5) trailingArray.shift();\n```", "```js\ng.drawGraph(trailingArray);//trailingArray);\ncurIndex++\nif(curIndex>=gData.length) curIndex=0;\n```", "```js\nfunction styleFormatter(styleColor,index,total){\n  var clrs = styleColor.split(\",\");\n  var alpha = parseFloat(clrs[3].split(\")\"));\n  alpha *= index/total+.1;\n  clrs[3] = alpha+\")\";\n  return clrs.join(\",\");\n}\n```", "```js\nthis.barStyle = {cap:'rgba(255,255,255,1)',main:'rgba(189,189,243,0.7)', shadow:'rgba(77,77,180,0.7)',outline:'rgba(0,0,0,0.7)',formatter:null};\n```", "```js\ncanvasGraph.prototype.getBarStyle= function(baseStyle,index,total){\n  return this.barStyle.formatter? this.barStyle.formatter(baseStyle,index,total):baseStyle;\n}\n```", "```js\ncanvasGraph.prototype.getBarStyle= function(baseStyle,index,total){\n  return this.barStyle.formatter? this.barStyle.formatter(baseStyle,index,total):baseStyle;\n}\n```", "```js\ncanvasGraph.prototype.drawGraph=function(gData){\n  //moved this to the drawGraph so i can clear each time its called.\n  this.clearCanvas();\n  // Draw XYZ AXIS \n  this.drawAxis();\n  this.drawInfo();\n\n  var len = gData.length;\n\n  for(i=0;i<len;i++){\n    this.drawBar(gData[i].x,gData[i].y,gData[i].z,i,len); \n  }\n}\n```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>flot</title>\n        <meta charset=\"utf-8\" />\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/jquery.flot.js\"></script>\n        <script src=\"img/jquery.flot.fillbetween.js\"></script>    \n\n        <script src=\"img/07.03.flot.js\"></script>\n\n      </head>\n      <body style=\"background:#fafafa\">\n\n        <div id=\"placeholder\" style=\"width:600px;height:300px;\"></div> \n      </body>\n    </html>\n    ```", "```js\n    var males = {\n\n    //...\n    //please grab from source files its a long list of numbers\n    };Create helper variables:\n    var VIEW_LENGTH = 5;\n    var index=0;\n    var plot;\n\n    var formattingData = {\n      xaxis: { tickDecimals: 0, tickFormatter: function (v) { return v%12 + \"/\" + (2009+Math.floor(v/12)); } },\n      yaxis: { tickFormatter: function (v) { return v + \" cm\"; } }\n    };\n    ```", "```js\n    $(document).ready(updateChart);\n    ```", "```js\n    function updateChart() {\n      plot = $.plot($(\"#placeholder\"), getData(), formattingData);\n\n      if(index+5<males['mean'].length){\n        setTimeout(updateChart,500);\n      }\n    }\n    ```", "```js\n    function getData(){\n      var endIndex = index+5>=males.length?males.length-1:index+5;\n      console.log(index,endIndex);\n      var dataset = [\n        { label: 'Male mean', data: males['mean'].slice(index,endIndex), lines: { show: true }, color: \"rgb(50,50,255)\" },\n        { id: 'm15%', data: males['15%'].slice(index,endIndex), lines: { show: true, lineWidth: 0, fill: false }, color: \"rgb(50,50,255)\" },\n        { id: 'm25%', data: males['25%'].slice(index,endIndex), lines: { show: true, lineWidth: 0, fill: 0.2 }, color: \"rgb(50,50,255)\", fillBetween: 'm15%' },\n        { id: 'm50%', data: males['50%'].slice(index,endIndex), lines: { show: true, lineWidth: 0.5, fill: 0.4, shadowSize: 0 }, color: \"rgb(50,50,255)\", fillBetween: 'm25%' },\n        { id: 'm75%', data: males['75%'].slice(index,endIndex), lines: { show: true, lineWidth: 0, fill: 0.4 }, color: \"rgb(50,50,255)\", fillBetween: 'm50%' },\n        { id: 'm85%', data: males['85%'].slice(index,endIndex), lines: { show: true, lineWidth: 0, fill: 0.2 }, color: \"rgb(50,50,255)\", fillBetween: 'm75%' }\n      ];\n\n      index++;\n      return dataset;\n    }\n    ```", "```js\n{'15%': [[yearID, value], [yearID, value]...\n```", "```js\nvar VIEW_LENGTH = 5;\nvar index=0;\n```", "```js\nvar plot;\nvar formattingData = {\n  xaxis: { tickDecimals: 0, tickFormatter: function (v) { return v%12 + \"/\" + (2003+Math.floor(v/12)); } },\n  yaxis: { tickFormatter: function (v) { return v + \" cm\"; } }\n};\n```", "```js\nvar endIndex = index+5>=males.length?males.length-1:index+5;\n```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Raphael</title>\n        <meta charset=\"utf-8\" />\n        <script src=\"img/jquery.min.js\"></script>\n        <script src=\"img/raphael-min.js\"></script> \n        <script src=\"img/07.04.raphael.js\"></script>\n        <style>\n          body {\n            background: #333;\n            color: #fff;\n            font: 300 100.1% \"Helvetica Neue\", Helvetica, \"Arial Unicode MS\", Arial, sans-serif;\n          }\n          #holder {\n            height: 600px;\n            margin: -300px 0 0 -300px;\n            width: 600px;\n            left: 50%;\n            position: absolute;\n            top: 50%;\n          }\n        </style>\n\n      </head>\n      <body>\n\n      <div id=\"holder\"></div>\n      </body>\n    </html>\n    ```", "```js\n    var helveticaForClock = {...};\n    ```", "```js\n    window.onload = function () {\n      //the rest of the code will be put in here from step 3 and on\n    };\n    ```", "```js\n    var r = Raphael(\"holder\", 600, 600);\n    ```", "```js\n    r.customAttributes.arc = function (per,isClock) {\n      var R = this.props.r,\n      baseX = this.props.x,\n      baseY = this.props.y;\n      var degree = 360 *per;\n      if(isClock) degree = 360-degree;\n\n      var a = (90 - degree) * Math.PI / 180,\n      x = baseX + R * Math.cos(a),\n      y = baseY - R * Math.sin(a),\n      path;\n\n      if (per==1) {\n        path = [[\"M\", baseX, baseY - R], [\"A\", R, R, 0, 1, 1, baseX, baseY - R]];\n      } else {\n        path = [[\"M\", baseX, baseY - R], [\"A\", R, R, 0, +(degree > 180), 1, x, y]];\n      }\n\n      var alpha=1;\n\n      if(per<.1 || per>.9) \n        alpha = 0;\n      else  \n        alpha = 1;\n\n      return {path: path,stroke: 'rgba(255,255,255,'+(1-per)+')'};  \n    };\n    ```", "```js\n    var transPath;\n\n    var aTrans = ['T400,100','T320,100','T195,100','T115,100'];\n    var base0 = helveticaForClock[0];\n    var aLast = [0,0,0,0];\n    var aDigits = [];\n\n    var digit;\n    for(i=0; i<aLast.length; i++){\n      digit = r.path(\"M0,0L0,0z\").attr({fill: \"#fff\", stroke: \"#fff\", \"fill-opacity\": .3, \"stroke-width\": 1, \"stroke-linecap\": \"round\", translation: \"100 100\"});\n\n      transPath = Raphael.transformPath(helveticaForClock[aLast[i]], aTrans[i]);\n      digit.attr({path:transPath});\n      aDigits.push(digit);\n    }\n    var dDot = r.path(\"M0,0L0,0z\").attr({fill: \"#fff\", stroke: \"#fff\", \"fill-opacity\": .3, \"stroke-width\": 1, \"stroke-linecap\": \"round\", translation: \"100 100\"});\n    transPath = Raphael.transformPath(helveticaForClock[':'], 'T280,90');\n    dDot.attr({path:transPath});\n    ```", "```js\n    var time;\n    var sec = r.path();\n    sec.props = {r:30,x:300,y:300}; //new mandatory params\n\n    var sec2 = r.path();\n    sec2.props = {r:60,x:300,y:300};\n\n    animateSeconds();\n    animateStrokeWidth(sec,10,60,1000*60);\n    ```", "```js\n    function animateSeconds(){ //will run forever\n      time = new Date();\n\n      sec.attr({arc: [1]});\n      sec.animate({arc: [0]}, 1000, \"=\",animateSeconds);\n      sec2.attr({arc: [1,true]});\n      sec2.animate({arc: [0,true]}, 999, \"=\");\n\n      var newDigits = [time.getMinutes()%10,\n      parseInt(time.getMinutes()/10),\n      time.getHours()%10,\n      parseInt(time.getHours()/10)\t];\n      var path;\n      var transPath;\n      for(var i=0; i<aLast.length; i++){\n        if(aLast[i]!=newDigits[i]){\n          path = aDigits[i];\n          aLast[i] = newDigits[i]; \t\n          transPath = Raphael.transformPath(helveticaForClock[newDigits[i]], aTrans[i]);\n          path.animate({path:transPath}, 500);\n        }\n      }\n\n    }\n    ```", "```js\n    function animateStrokeWidth(that,startWidth,endWidth,time){\n      that.attr({'stroke-width':startWidth});\n      that.animate({'stroke-width':endWidth},time,function(){\n        animateStrokeWidth(that,startWidth,endWidth,time); //repeat forever\n      });\n    }\n    ```", "```js\nvar sec = r.path();sec.props = {r:30,x:300,y:300}; //new mandatory params\n\nvar sec2 = r.path();sec2.props = {r:60,x:300,y:300};\n```", "```js\nsec.attr({arc: [1]});\nsec.animate({arc: [0]}, 1000, \"=\",animateSeconds);\nsec2.attr({arc: [1,true]});\nsec2.animate({arc: [0,true]}, 999, \"=\");\n```", "```js\ntransPath = Raphael.transformPath(helveticaForClock[0], 'T400,100');\n```", "```js\nfor(i=0; i<aLast.length; i++){\n  digit = r.path(\"M0,0L0,0z\").attr({fill: \"#fff\", stroke: \"#fff\", \"fill-opacity\": .3, \"stroke-width\": 1, \"stroke-linecap\": \"round\", translation: \"100 100\"});\n\n  transPath = Raphael.transformPath(helveticaForClock[aLast[i]], aTrans[i]);\n  digit.attr({path:transPath});\n  aDigits.push(digit);\n}\n```", "```js\nvar newDigits = [time.getMinutes()%10,\n  parseInt(time.getMinutes()/10),\n  time.getHours()%10,\n  parseInt(time.getHours()/10)];\nvar path;\nvar transPath;\n  for(var i=0; i<aLast.length; i++){\n    if(aLast[i]!=newDigits[i]){\n    path = aDigits[i];\n    aLast[i] = newDigits[i]; \t\n    transPath = Raphael.transformPath(helveticaForClock[newDigits[i]], aTrans[i]);\n    path.animate({path:transPath}, 500);\n  }\n}\n```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Sunberst - InfoVis</title>\n        <meta charset=\"utf-8\" />\n\n        <style>\n          #infovis {\n            position:relative;\n            width:600px;\n            height:600px;\n            margin:auto;\n            overflow:hidden;\n          }\n        </style>\n\n        <script  src=\"img/jit-yc.js\"></script>\n        <script src=\"img/07.05.jit.js\"></script>\n      </head>\n\n      <body onload=\"init();\">\n        <div id=\"infovis\"></div>    \n      </body>\n    </html>\n    ```", "```js\n    var dataSource = [ {\"id\": \"node0\", \"name\": \"\",\"data\": {\"$type\": \"none\" },\"adjacencies\": []}]; //starting with invisible root\n    ```", "```js\n    function createNode(id,name,wid,hei,clr){\n      var obj = {id:id,name:name,data:{\"$angularWidth\":wid,\"$height\":hei,\"$color\":clr},adjacencies:[]};\n      dataSource[0].adjacencies.push({\"nodeTo\": id,\"data\": {'$type': 'none'}});\n      dataSource.push(obj);\n\n      return obj;\n    }\n    ```", "```js\n    function relate(obj){\n      for(var i=1; i<arguments.length; i++){\n        obj.adjacencies.push({'nodeTo':arguments[i]});\n      }\n    }\n    ```", "```js\n    function highlight(nodeid){\n      var selectedIndex = 0;\n      for(var i=1; i<dataSource.length; i++){\n        if(nodeid!=\tdataSource[i].id){\n          for(var item in dataSource[i].adjacencies)\n          delete dataSource[i].adjacencies[item].data;\n        }else{\n          selectedIndex = i;\n          for(var item in dataSource[i].adjacencies)\n          dataSource[i].adjacencies[item].data =  {\"$color\": \"#ddaacc\",\"$lineWidth\": 4 };\n          }\n\n        }\n\n        if(selectedIndex){ //move selected node to be first (so it will highlight everything)\n        var node = dataSource.splice(selectedIndex,1)[0];\n        dataSource.splice(1,0,node); \n      }\n\n    }\n    ```", "```js\n    function init(){\n    /* or the remainder of the steps \n    all code showcased will be inside the init function  */\n    }\n    ```", "```js\n    function init(){\n      var node = createNode('geek','02geek',100,40,\"#B1DDF3\");\n      relate(node,'ben');\n      node = createNode('packt','PacktBub',100,40,\"#FFDE89\");\n      relate(node,'ben');\n      node = createNode('ben','Ben',100,40,\"#E3675C\");\n      relate(node,'geek','packt','nic');\n\n      node = createNode('nic','Nicolas',100,40,\"#C2D985\");\n      //no known relationships so far ;)\n    ...\n    ```", "```js\n    var sb = new $jit.Sunburst({\n      injectInto: 'infovis', //id container\n      Node: {\n        overridable: true,\n        type: 'multipie'\n      },\n      Edge: {\n        overridable: true,\n        type: 'hyperline',\n        lineWidth: 1,\n        color: '#777'\n      },\n      //Add animations when hovering and clicking nodes\n      NodeStyles: {\n        enable: true,\n        type: 'Native',\n        stylesClick: {\n        'color': '#444444'\n      },\n      stylesHover: {\n        'color': '#777777'\n      },\n        duration: 700\n      },\n      Events: {\n        enable: true,\n        type: 'Native',\n        //List node connections onClick\n        onClick: function(node, eventInfo, e){\n          if (!node) return;\n\n          highlight(node.id);\n          sb.loadJSON(dataSource);\n          sb.refresh()\n        }\n      },\n      levelDistance: 120\n    });\n    ```", "```js\n    sb.loadJSON(dataSource);\n    sb.refresh();\n    ```", "```js\n{\n        \"id\": \"node0\",\n        \"name\": \"\",\n        \"data\": {\n          \"$type\": \"none\"\n        },\n        \"adjacencies\": [\n            {\"nodeTo\": \"node1\",\"data\": {'$type': 'none'}}, \n            {\"nodeTo\": \"node2\",\"data\": {'$type': 'none'}}, \n            {\"nodeTo\": \"node3\",\"data\": {'$type': 'none'}}, \n            {\"nodeTo\": \"node4\",\"data\": {'$type': 'none'}}\n                       ]\n}, \n\n{\n        \"id\": \"node1\",\n        \"name\": \"node 1\",\n        \"data\": {\n          \"$angularWidth\": 300,\n          \"$color\": \"#B1DDF3\",\n          \"$height\": 40\n        },\n        \"adjacencies\": [\n            {\n              \"nodeTo\": \"node3\",\n              \"data\": {\n                \"$color\": \"#ddaacc\",\n                \"$lineWidth\": 4\n              }\n            }\n                    ]\n},\n```", "```js\nfunction createNode(id,name,wid,hei,clr){\n  var obj = {id:id,name:name,data:{\"$angularWidth\":wid,\"$height\":hei,\"$color\":clr},adjacencies:[]};\n  dataSource[0].adjacencies.push({\"nodeTo\": id,\"data\": {'$type': 'none'}});\n  dataSource.push(obj);\n\n  return obj; \t\n}\n```", "```js\nfunction relate(obj){\n  for(var i=1; i<arguments.length; i++){\n    obj.adjacencies.push({'nodeTo':arguments[i]});\n  }\n}\n```", "```js\nfunction highlight(nodeid){\n  var selectedIndex = 0;\n  for(var i=1; i<dataSource.length; i++){\n    if(nodeid!=\tdataSource[i].id){\n      for(var item in dataSource[i].adjacencies)\n      delete dataSource[i].adjacencies[item].data;\n    }else{\n      selectedIndex = i;\n      for(var item in dataSource[i].adjacencies)\n      dataSource[i].adjacencies[item].data =  {\"$color\": \"#ddaacc\",\"$lineWidth\": 4 };\n    }\n\n  }\n}\n```", "```js\nif(selectedIndex){ \n  var node = dataSource.splice(selectedIndex,1)[0];\n  dataSource.splice(1,0,node); \n}\n```", "```js\nvar sb = new $jit.Sunburst({\n  injectInto: 'infovis', //id container\n     ...\n  Events: {\n    enable: true,\n    type: 'Native',\n    //List node connections onClick\n    onClick: function(node, eventInfo, e){\n      if (!node) return;\n\n      highlight(node.id);\n      sb.loadJSON(dataSource);\n        sb.refresh();\n    }\n  },\n  levelDistance: 120\n});\n```", "```js\nvar can = document.getElementById(\"infovis-canvas\");\n  var context = can.getContext(\"2d\"); \n...\n```"]