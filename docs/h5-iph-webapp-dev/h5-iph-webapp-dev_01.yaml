- en: Chapter 1. Application Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。应用程序架构
- en: In this chapter, we will create a standard architecture for our iPhone application.
    We will base it on the HTML5 Mobile Boilerplate and customize it for the needs
    of the several projects in this book. From marking up our content in HTML5 to
    creating a JavaScript framework, we'll create static pages that help us focus
    on the foundations of iPhone Web Application development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为我们的iPhone应用程序创建一个标准架构。我们将以HTML5移动锅炉板为基础，并根据本书中的几个项目的需求进行定制。从在HTML5中标记我们的内容到创建JavaScript框架，我们将创建静态页面，帮助我们专注于iPhone
    Web应用程序开发的基础。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Implementing the HTML5 Mobile Boilerplate
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施HTML5移动锅炉板
- en: Creating a preliminary architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建初步架构
- en: Customizing our framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义我们的框架
- en: Creating semantic markup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建语义标记
- en: Structuring our stylesheets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化我们的样式表
- en: Responsive design principles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式设计原则
- en: Establishing our JavaScript architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立我们的JavaScript架构
- en: Routing to a mobile site
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由到移动站点
- en: Home screen icons
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主屏幕图标
- en: Introducing our build script
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍我们的构建脚本
- en: Deploying our project
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署我们的项目
- en: Implementing the HTML5 Mobile Boilerplate
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施HTML5移动锅炉板
- en: When you begin development, it is always critical to start with a basic framework
    that can be molded to the needs of your project. In many cases, we develop these
    frameworks in-house where we work, or perhaps for our own personal projects. However,
    the open source community has presented us with a great framework we can use in
    our projects—the HTML5 Mobile Boilerplate. This framework is based on the well-known
    HTML5 Boilerplate, and has been optimized for mobile including a lean HTML template;
    the utilization of `Zepto`, and use of tools and helpers optimized for mobile.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始开发时，始终要从一个可以塑造成项目需求的基本框架开始。在许多情况下，我们在工作的地方或者为我们自己的个人项目开发这些框架。然而，开源社区为我们提供了一个可以在项目中使用的优秀框架——HTML5移动锅炉板。这个框架基于著名的HTML5锅炉板，并针对移动进行了优化，包括精简的HTML模板；使用`Zepto`，以及针对移动进行了优化的工具和辅助功能。
- en: Downloading and installing the HTML5 Mobile Boilerplate
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装HTML5移动锅炉板
- en: 'The first step we need to take is to download the HTML5 Mobile Boilerplate,
    which is located here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要采取的第一步是下载HTML5移动锅炉板，位于这里：
- en: '[http://html5boilerplate.com/mobile/](http://html5boilerplate.com/mobile/)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://html5boilerplate.com/mobile/](http://html5boilerplate.com/mobile/)'
- en: 'Once the boilerplate is downloaded, you should see the following structure
    from the unzipped archive file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载了锅炉板，您应该从解压的存档文件中看到以下结构：
- en: '![Downloading and installing the HTML5 Mobile Boilerplate](img/1024_01_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![下载和安装HTML5移动锅炉板](img/1024_01_01.jpg)'
- en: The Preliminary Directory Structure
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 初步目录结构
- en: 'The next step is to take these files and place them in the directory of your
    choice. For example, I have placed my files in the following directory on my Mac:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将这些文件放在您选择的目录中。例如，我已经将我的文件放在Mac上的以下目录中：
- en: '`/Users/alvincrespo/Sites/html5iphonewebapp`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Users/alvincrespo/Sites/html5iphonewebapp`'
- en: Next, we'll want to use a build system that helps us create multiple environments,
    ease the deployment process, and overall make things easier when we want to optimize
    our site for testing and/or production.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用一个构建系统，帮助我们创建多个环境，简化部署过程，并在我们想要为测试和/或生产优化我们的网站时使事情变得更容易。
- en: According to the documentation for the HTML5 Mobile Boilerplate, there are two
    different types of build system, such as the Node Build script and the Ant Build
    script. In this book, we'll be using the Ant Build script. I would recommend using
    the Ant Build script since it has been around for a while and has the appropriate
    features that I use in my projects, including CSS Split, which will help split
    up the main CSS file that comes with the boilerplate.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据HTML5移动锅炉板的文档，有两种不同类型的构建系统，如Node Build脚本和Ant Build脚本。在本书中，我们将使用Ant Build脚本。我建议使用Ant
    Build脚本，因为它已经存在一段时间，并且具有我在项目中使用的适当功能，包括CSS Split，它将帮助拆分锅炉板附带的主CSS文件。
- en: Integrating the build script
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成构建脚本
- en: 'To download the Ant Build script, go to the following link:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载Ant Build脚本，请转到以下链接：
- en: '[https://github.com/h5bp/ant-build-script](https://github.com/h5bp/ant-build-script)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/h5bp/ant-build-script](https://github.com/h5bp/ant-build-script)'
- en: Then, download the zip file by clicking on the **Download as zip** button. When
    you have downloaded the Ant Build script, copy the folder and its contents to
    your project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过单击**Download as zip**按钮下载zip文件。下载Ant Build脚本后，将文件夹及其内容复制到您的项目中。
- en: Once your Ant Build script directory is fully transferred over to your project,
    rename the directory containing the build script to `build`. At this point, you
    should have your project completely set up for the rest of the applications in
    this book. We will cover how to utilize the build script later on in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的Ant Build脚本目录完全转移到您的项目中，将包含构建脚本的目录重命名为`build`。此时，您的项目应该已经完全设置好，以便在本书的其余应用程序中使用。我们将在本章后面介绍如何使用构建脚本。
- en: Creating our application framework
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的应用程序框架
- en: With every project, it's important to create a framework that adjusts to your
    project's needs. It's critical to think about every aspect of the project. From
    the required document to the team's strengths and weaknesses, it's important we
    establish a solid foundation that helps us build and adjust accordingly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个项目，创建一个适应项目需求的框架是很重要的。重要的是要考虑项目的每个方面。从所需的文档到团队的优势和劣势，建立一个坚实的基础对我们构建和相应调整是很重要的。
- en: Modifying the boilerplate
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改锅炉板
- en: 'We''ll now modify our boilerplate for the needs of the projects we will be
    building. For simplicity, we''ll remove the following items from the folder:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改我们的锅炉板，以满足我们将要构建的项目的需求。为简单起见，我们将从文件夹中删除以下项目：
- en: '`CHANGELOG.md`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHANGELOG.md`'
- en: '`crossdomain.xml`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crossdomain.xml`'
- en: '`README.md`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`'
- en: '`/doc (Directory)`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/doc (目录)`'
- en: Now that the directory has been cleaned up, it's time to take a look at some
    of the boilerplate code and customize it for the needs of the projects in this
    book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，目录已经整理好了，是时候看一下一些样板代码，并根据本书项目的需求进行定制了。
- en: Customizing our markup
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制我们的标记
- en: First, open up the application in your favorite text editor. Once we've opened
    up the application in the editor of our choice, let's look at `index.html`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，用你喜欢的文本编辑器打开应用程序。一旦我们用我们选择的编辑器打开了应用程序，让我们看看`index.html`。
- en: The index file needs to be cleaned up in order to focus on iPhone Web Application
    development, and also unused items such as Google Analytics need to be removed.
    So let's remove some code that is not necessary for us.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 索引文件需要进行清理，以便专注于iPhone Web应用程序的开发，并且需要删除Google Analytics等未使用的项目。所以让我们删除一些对我们来说不必要的代码。
- en: 'Look for the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 查找以下代码：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载你购买的所有Packt图书的示例代码文件。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，直接将文件发送到你的邮箱。
- en: 'And modify it to this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其修改为：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What we''ve done here is removed detection for IE Mobile. Although this may
    be helpful for other projects, for us it doesn''t really help in creating a fully
    compatible application just for the iPhone. However, we also need to remove an
    `IEMobile` specific meta tag:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是移除IE Mobile的检测。虽然这对其他项目可能有帮助，但对于我们来说，它并不能真正帮助我们创建一个完全兼容iPhone的应用程序。然而，我们还需要删除一个`IEMobile`特定的meta标记：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous meta tag turns on `cleartype` (a utility that assists with the
    rendering of fonts) for the IE mobile. This isn't necessary for us and is not
    a requirement for our applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的meta标记打开了`cleartype`（一种帮助字体呈现的实用程序）对IE移动的支持。这对我们来说并不是必要的，也不是我们应用程序的要求。
- en: 'Now that we''ve removed some unnecessary markup from our page, we can go ahead
    and start enabling features that will enhance our application. Look for the following
    meta tags and enable them, by removing the comments surrounding them:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从页面中删除了一些不必要的标记，我们可以开始启用一些将增强我们应用程序的功能。查找以下meta标记并启用它们，删除周围的注释：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These directives inform our application that it can run in fullscreen and they
    set the status bar to black.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令告诉我们的应用程序可以在全屏模式下运行，并将状态栏设置为黑色。
- en: 'We can also remove the following code from the `<head>` of the document:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从文档的`<head>`中删除以下代码：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once we''ve removed the previous script, your markup should now look like the
    following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们删除了之前的脚本，你的标记现在应该看起来像下面这样：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we can focus on cleaning up our body. Lucky for us, we only need to remove
    one thing—Google Analytics, since we will not be focusing on tracking for iPhone
    Web Apps.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以专注于清理我们的正文。幸运的是，我们只需要删除一件事情——Google Analytics，因为我们不会专注于iPhone Web应用的跟踪。
- en: 'To do this, find the following code and remove it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，找到以下代码并删除它：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The only scripts that you should have on the page should be the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上应该只有以下脚本：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we''ve completed the previous steps, our markup should be clean and simple
    as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了上述步骤，我们的标记应该变得简洁明了，如下所示：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From here, we should examine our stylesheets and scripts for every project and
    optimize it as much as we can prior to beginning a project. However, this boilerplate
    that we will be using has been optimized by the community and continuously enhanced
    with support from many developers, and for our use here, both styles and scripts
    are good to go. If you are curious, I encourage you to look at the `normalize.css`
    file, which contains excellent directives for resetting a page. It would also
    be beneficial to review the `main.css` file that has been enhanced with this boilerplate
    to support mobile devices.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们应该检查每个项目的样式表和脚本，并在开始项目之前尽可能优化它。然而，我们将使用的这个样板已经由社区优化，并得到了许多开发人员的支持，并且对于我们在这里使用的情况，样式和脚本都已经准备就绪。如果你感兴趣，我鼓励你查看`normalize.css`文件，其中包含了重置页面的优秀指令。还有必要审查已经使用这个样板增强了以支持移动设备的`main.css`文件。
- en: Now, we'll move on to establishing our framework.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续建立我们的框架。
- en: Customizing our framework
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制我们的框架
- en: It's critical for developers to establish a framework for each project they
    are working on, no matter how small or big the project may be. Of course, your
    framework should adjust to the requirements that the project demands as well.
    In this section, we'll establish a simple framework that we can work with throughout
    the use of this book.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员来说，为他们正在进行的每个项目建立一个框架都是至关重要的，无论项目大小如何。当然，你的框架也应该根据项目的要求进行调整。在本节中，我们将建立一个简单的框架，以便在本书的使用过程中使用。
- en: We've gone through and cleaned up the boilerplate for our needs, now we'll go
    through and expand upon the boilerplate to include the files that are critical
    to the applications we will build.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经根据我们的需求整理了样板，现在我们将继续扩展样板，包括对我们将构建的应用程序至关重要的文件。
- en: The first application will be based on the HTML5 Video specification ([http://dev.w3.org/html5/spec-author-view/video.html](http://dev.w3.org/html5/spec-author-view/video.html)).
    In that application we'll create a specific functionality for our video player
    that includes play, pause, and fullscreen functionalities. So let's create a directory
    specific to this application; we'll call this directory `video`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个应用程序将基于HTML5视频规范（[http://dev.w3.org/html5/spec-author-view/video.html](http://dev.w3.org/html5/spec-author-view/video.html)）。在该应用程序中，我们将为我们的视频播放器创建一个特定的功能，包括播放、暂停和全屏功能。所以让我们创建一个专门针对这个应用程序的目录；我们将这个目录称为`video`。
- en: In this directory, we'll create an `index.html` file and copy the contents from
    the homepage of the `index.html` file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个目录中，我们将创建一个`index.html`文件，并从`index.html`文件的主页复制内容。
- en: Now that we have our video section created, let's create the `video.css` file
    inside of our `css` directory.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的视频部分，让我们在我们的`css`目录中创建一个`video.css`文件。
- en: Then, create an `App` directory within our `/js` folder. Within the `/js/App`
    directory, let's create an `App.js` file. Later, we'll explain in detail what
    this file is, but for now it will be our main application namespace that will
    essentially encapsulate global functionality for our application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们的`/js`文件夹中创建一个`App`目录。在`/js/App`目录中，让我们创建一个`App.js`文件。稍后，我们将详细解释这个文件是什么，但现在它将是我们的主要应用程序命名空间，基本上封装了我们应用程序的全局功能。
- en: Finally, let's create an `App.Video.js` file that will contain our video application
    functionality within the `/js/App` directory.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`/js/App`目录中创建一个`App.Video.js`文件，其中将包含我们视频应用程序的功能。
- en: 'You will now repeat the previous steps for each of our applications; including
    Video, Audio, Touch, Forms, Location, Single Page, and Offline. In the end, your
    directory structure should have the following new directories and files:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将为我们的每个应用程序重复之前的步骤；包括视频、音频、触摸、表单、位置、单页和离线。最终，您的目录结构应该包括以下新目录和文件：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this point, we should fix the references to our dependencies, such as our
    JavaScript and stylesheet. So let's open up `/video/index.html`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该修复对依赖项的引用，比如我们的JavaScript和样式表。所以让我们打开`/video/index.html`。
- en: 'Let''s modify the following lines:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改以下行：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Change the previous markup to the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将先前的标记更改为以下内容：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we add `../` to each dependency. This is essentially telling the page
    to go up one level and retrieve the appropriate files. We also need to do this
    for the apple-touch-icon-precomposed links, shortcut icon, and the scripts at
    the bottom of the page.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在每个依赖项中添加了`../`。这本质上是告诉页面向上一级并检索适当的文件。我们还需要对apple-touch-icon-precomposed链接、快捷图标和页面底部的脚本进行同样的操作。
- en: Our framework is now almost complete, except that they aren't connected yet.
    So now that we've got everything organized, let's start hooking up everything
    to one another. It won't look pretty, but at least it will be working and moving
    towards a fully functional application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的框架现在几乎完成了，只是它们还没有连接起来。现在我们已经把一切都组织好了，让我们开始把一切连接起来。它看起来可能不太好看，但至少它将能够工作并朝着一个完全功能的应用程序迈进。
- en: 'Let''s start with the main `index.html` file, `/ourapp/index.html`. Once we''ve
    opened up the main `index.html` file, let''s create a basic site structure inside
    our `<body>` element. We''ll give it a class of `"site-wrapper"` and put it right
    below the comment `Add your site or application content here`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从主`index.html`文件`/ourapp/index.html`开始。一旦我们打开了主`index.html`文件，让我们在`<body>`元素内创建一个基本的站点结构。我们将给它一个类名为`"site-wrapper"`，并将其放在注释`Add
    your site or application content here`的下方：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Within the wrapper containing our site, let''s use the new HTML5 `<nav>` element
    to semantically describe the main navigation bar that will exist across all our
    apps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含我们站点的包装器中，让我们使用新的HTML5`<nav>`元素来语义化地描述将存在于所有应用程序中的主导航栏：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Nothing too special yet, but now we''ll go ahead and use the unordered list
    element and create a navigation bar with no styling:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 还没有什么特别的，但现在我们将继续使用无序列表元素，并创建一个没有样式的导航栏：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we copy the code that we have created in `/video/index.html` and test the
    page, you see that it will not work correctly. For all subdirectories, like video
    and audio, we''ll need to change the relative path from `./` to `../` so that
    we can go up one folder. With this in mind, the `nav` element would look like
    the following within the other applications:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们复制在`/video/index.html`中创建的代码并测试页面，您会发现它不会正确工作。对于所有子目录，如视频和音频，我们需要将相对路径从`./`更改为`../`，以便我们可以向上一级文件夹。考虑到这一点，`nav`元素在其他应用程序中将如下所示：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we can copy the navigation from `/video/index.html` to the rest of the
    application files or to the `index.html` files we created previously. Once this
    is done, we will have a single site that now connects well with each other.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`/video/index.html`中的导航复制到其余的应用程序文件或我们之前创建的`index.html`文件中。完成后，我们将拥有一个连接良好的单一站点。
- en: Believe it or not, we have a very simple website going on here. Our pages are
    set up with basic markup and general styles. At this point, we need a navigation
    that brings our pages together. However, we've barely touched on some important
    aspects, including semantic markup for applications, which we'll discuss next.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，我们这里有一个非常简单的网站。我们的页面已经设置了基本的标记和通用样式。此时，我们需要一个将我们的页面连接在一起的导航。然而，我们几乎没有涉及一些重要的方面，包括应用程序的语义标记，我们将在下一节中讨论。
- en: Creating semantic markup
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建语义标记
- en: Semantic markup is important for several reasons, including search engine optimization,
    creating maintainable architectures, making code easily understandable, and meeting
    accessibility requirements. However, you should be familiar with structuring your
    page with markup that is related to your content. There are new elements within
    the HTML5 specification that help to ease this process, including the `<header>`,
    `<nav>`, `<footer>`, `<section>`, `<article>`, and `<aside>` elements. Each one
    of these elements helps describe the aspects of a page and easily identifies components
    of your application. In this section, let's structure our applications, beginning
    with our Video application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 语义标记之所以重要，原因有几个，包括搜索引擎优化、创建可维护的架构、使代码易于理解以及满足无障碍要求。然而，您应该熟悉使用与您的内容相关的标记来构建页面的结构。HTML5规范中有一些新元素，有助于简化这个过程，包括`<header>`、`<nav>`、`<footer>`、`<section>`、`<article>`和`<aside>`元素。这些元素中的每一个都有助于描述页面的各个方面，并轻松识别应用程序的组件。在本节中，让我们从我们的视频应用程序开始构建我们的应用程序。
- en: Creating the header
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建页眉
- en: First, let's start by giving our main index page a title and a header that describes
    the page we are on. Let's open the main `index.html` file in our application at
    `/index.html`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们给我们的主索引页面一个标题和一个描述我们所在页面的页眉。让我们在应用程序的`/index.html`中打开主`index.html`文件。
- en: Find the `<title>` tag and enter it in `iPhone Web Application Development –
    Home`. Note that we use a hyphen here. This is important since it makes it easier
    for users to scan the content of the page and helps with the ranking for specific
    keywords.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 找到`<title>`标签，并在其中输入`iPhone Web Application Development – Home`。请注意，我们在这里使用连字符。这很重要，因为它使用户更容易扫描页面内容，并有助于特定关键字的排名。
- en: 'You should now have the following `<title>` in the `<head>` tag of your document:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该在文档的`<head>`标签中有以下`<title>`：
- en: '`<title>iPhone Web Application Development - Home</title>`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`<title>iPhone Web Application Development - Home</title>`'
- en: 'Now we want the content of the page to reflect the title as well and alert
    the user of their progress on our site. What we want to do is create a header
    that describes the section they are on. In order to achieve this, let''s place
    the following code before the navigation we created previously. Your code should
    then look like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们希望页面的内容也反映标题，并提醒用户他们在我们网站上的进度。我们想要做的是创建一个描述他们所在部分的页眉。为了实现这一点，让我们在之前创建的导航之前放置以下代码。然后您的代码应如下所示：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `<hgroup>` element is used to group multiple headers for a section. The
    rank of the headers is based on `<h1>` to `<h6>,` with `<h1>` being the highest
    rank and `<h6>` the lowest. Therefore, the highlighted text places our `<h1>`
    content higher than our `<h2>`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`<hgroup>`元素用于对一个部分的多个标题进行分组。标题的等级基于`<h1>`到`<h6>`，其中`<h1>`的等级最高，`<h6>`的等级最低。因此，突出显示的文本将使我们的`<h1>`内容高于我们的`<h2>`。'
- en: Also note that we are not using the `<section>` element yet. However, this page
    does validate using the W3C Markup Validation Service ([http://validator.w3.org/](http://validator.w3.org/)).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，我们尚未使用`<section>`元素。但是，这个页面确实通过W3C标记验证服务（[http://validator.w3.org/](http://validator.w3.org/)）进行验证。
- en: 'We can further describe the page by wrapping our `<hgroup>` and `<nav>` elements
    within a `<header>` element to give the page an introductory aid. Once you do
    this, you should have the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将我们的`<hgroup>`和`<nav>`元素包装在`<header>`元素中来进一步描述页面，以提供页面的介绍性帮助。完成此操作后，您的代码应如下所示：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With the previous code, we have finally given our page some structure. We are
    describing our page with a main header for the site and a sub header for the page.
    We have also given the page a navigation menu, allowing the user to navigate across
    applications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过先前的代码，我们最终为我们的页面提供了一些结构。我们用一个主页眉描述我们的页面，用一个子页眉描述页面。我们还为页面提供了导航菜单，允许用户在应用程序之间导航。
- en: Creating the footer
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建页脚
- en: 'Now let''s add a `<footer>` that contains the name of this book with its copyright
    date:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一个包含本书名称和版权日期的`<footer>`：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous code will basically relate to the nearest sectioning ancestor.
    Thus the footer will relate to the content before it, which we will fill in a
    bit later. At this point, your content should look like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码基本上将与最近的分区祖先相关联。因此，页脚将与其前面的内容相关联，我们稍后会填充。此时，您的内容应该如下所示：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Clearing up section
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理部分
- en: You may be wondering why we are not using the `<section>` element right away
    for the `<div>` element that contains both the `<header>` and `<footer>` element.
    In this case, it's not necessarily useful since we are not creating a page where
    the element's contents would be listed in an outline. This is the suggestion by
    the W3C and is something every developer should be aware of when deciding which
    element to use, `<div>` or `<section>`. In the end, it comes down to the content
    itself and the outline the team wishes to create.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么我们不立即为包含`<header>`和`<footer>`元素的`<div>`元素使用`<section>`元素。在这种情况下，这并不一定有用，因为我们并没有创建一个元素内容会在大纲中列出的页面。这是W3C的建议，每个开发人员在决定使用`<div>`还是`<section>`元素时都应该意识到。最终，这取决于内容本身和团队希望创建的大纲。
- en: Now that we have a basic structure for our pages, we can go ahead and do the
    same for the rest of our applications. This will be done for you in the code provided
    with this book in case you wish to review a final version.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的页面创建了基本结构，我们可以继续为我们的其他应用程序做同样的事情。如果您希望查看最终版本，本书提供的代码将为您完成这些工作。
- en: With this in mind, we will move forward with our application development, making
    sure that we use semantic code when and where it makes sense.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，我们将继续进行应用程序开发，确保在合适的时候使用语义代码。
- en: Structuring our stylesheets
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的样式表
- en: Styling is extremely important in any application we build, especially since
    it is the first aspect of any application the user experiences. In this section,
    we'll start structuring our styles appropriately.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 样式在我们构建的任何应用程序中都非常重要，特别是因为它是用户体验的第一个方面。在这一部分，我们将开始适当地构建我们的样式。
- en: Global styling
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局样式
- en: First, let's open our `main.css` file, located in the `CSS` directory. When
    you open this file, you'll see default boilerplate styles. At this point, let's
    skip through these to create our own styles. We'll review those styles as we continue
    to develop our applications.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们打开位于`CSS`目录中的`main.css`文件。打开此文件后，您将看到默认的样式。在这一点上，让我们跳过这些内容，以创建我们自己的样式。随着我们继续开发我们的应用程序，我们将审查这些样式。
- en: 'Find the following line in `main.css`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.css`中找到以下行：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It's after this comment that we want to include the global styles for the semantic
    code we wrote previously.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这条注释之后，我们希望包括我们之前编写的语义代码的全局样式。
- en: 'Start by defining the global site styling such as the background color:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 首先定义全局站点样式，比如背景颜色：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the previous styling, we are making some stylistic choices like setting our
    background color and some borders. The important part here is that the width is
    defined at 100 percent for the HTML element. This will basically allow us to extend
    to 100 percent of the width of the phone for all our content.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的样式中，我们做了一些样式选择，比如设置背景颜色和一些边框。这里重要的部分是HTML元素的宽度被定义为100％。这基本上允许我们的所有内容扩展到手机宽度的100％。
- en: Defining our global fonts
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义我们的全局字体
- en: 'We then have to define overall fonts on the page. This will be basic for now
    and can continue to extend as design as per our application, but for now take
    a look at the following styles:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要在页面上定义整体字体。目前这只是基本的，可以根据我们的应用程序继续扩展设计，但现在先看看以下样式：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the previous code, you can see that we are working from a higher level down,
    the essential understanding of Cascading Style Sheets. We first define our headers,
    anchors, and paragraphs by using a specific font family and having no decoration.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，你可以看到我们是从更高的层次向下工作的，这是对层叠样式表的基本理解。我们首先通过使用特定的字体系列并且没有装饰来定义我们的标题、锚点和段落。
- en: As we work down the previous styles, we start to define each one more specifically,
    with headers having no padding or margins and a specific color. Then, when we
    go down further, we can see that each type of header has a specific font size
    and we do the same for paragraphs and anchors.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们继续定义之前的样式时，我们开始更具体地定义每一个，标题没有填充或边距，有特定的颜色。然后，当我们继续往下看，我们可以看到每种类型的标题都有特定的字体大小，我们也对段落和锚点做同样的处理。
- en: Our page layout
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的页面布局
- en: 'Once we''ve defined some of our fonts and site styling, we include some basic
    layout information for the `<div>` element containing our content:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了一些字体和站点样式，我们就为包含我们内容的`<div>`元素包含一些基本布局信息：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Since our element automatically scales to 100 percent of the width of the screen,
    we tell the content to have a padding of `5px` at the top, `10px` at the left
    and right, and `10px` on the bottom. Alternatively, we could have written the
    following styles:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的元素自动缩放到屏幕宽度的100％，我们告诉内容在顶部有`5px`的填充，在左右各有`10px`的填充，在底部有`10px`的填充。或者，我们可以写以下样式：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The former is known as a shorthand property setting and is considered best practice.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 前者被称为快捷属性设置，被认为是最佳实践。
- en: Using content with :before and :after
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`:before`和`:after`添加内容
- en: 'Since we also want to make sure our second header is differentiated in some
    form, we can use a CSS3 pseudo class selector and property to define the before
    and after content, as following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还希望确保我们的第二个标题以某种形式有所区别，我们可以使用CSS3伪类选择器和属性来定义之前和之后的内容，如下所示：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that the `:before` and `:after` pseudo selectors are supported
    in Safari 3.2 and above.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Safari 3.2及以上版本支持`:before`和`:after`伪选择器。
- en: The previous selector targets the `<h2>` elements within the `<hgroup>` element
    and appends the content we have defined in the property before and after it, as
    per the `:before` and `:after` pseudo class selector.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的选择器针对`<hgroup>`元素内的`<h2>`元素，并在其之前和之后添加我们在属性中定义的内容，就像`:before`和`:after`伪类选择器一样。
- en: Styling our navigation
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的导航添加样式
- en: Next, let's style our navigation to look and feel a bit more useable.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为我们的导航添加一些样式，使其看起来更加易用。
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here we remove the padding off the `<ul>` element and then remove the default
    styling option from each list element. Finally, we make sure each anchor is displayed
    correctly by setting the font size to `12px` and add padding to the top and bottom
    of each anchor to allow for easy selection on the iPhone.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们去掉了`<ul>`元素的填充，然后移除了每个列表元素的默认样式选项。最后，我们通过将字体大小设置为`12px`并在每个锚点的顶部和底部添加填充来确保每个锚点正确显示，以便在iPhone上轻松选择。
- en: Finally, we'll add some styling to our footer.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将为我们的页脚添加一些样式。
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Very simply, we're aligning the paragraph within the footer to center. Since
    we've defined the default styles for our paragraph in our fonts section, the styling
    gets picked.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，我们将段落在页脚中居中对齐。由于我们在字体部分定义了段落的默认样式，所以样式被应用了。
- en: 'When the previous styles are applied properly, your result should be similar
    to the following display:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当之前的样式被正确应用时，你的结果应该类似于以下显示：
- en: '![Styling our navigation](img/1024_01_02.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![为我们的导航添加样式](img/1024_01_02.jpg)'
- en: Responsive design principles
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式设计原则
- en: Responsive design is the key to our mobile applications. Given the fact that
    many mobile experiences now surpass those viewed on desktop, it is essential we
    create applications that fit our evolving technological landscape. Lucky for us,
    the HTML5 Mobile Boilerplate comes with preliminary styles that we can modify.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计是我们移动应用程序的关键。考虑到许多移动体验现在超过了桌面上的体验，我们必须创建适应不断发展的技术环境的应用程序。幸运的是，HTML5移动样板自带了我们可以修改的初步样式。
- en: Media queries to the rescue
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体查询的拯救
- en: First, let's open up our `main.css` file in our `css` directory.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在`css`目录中打开`main.css`文件。
- en: 'Next, scroll down to the bottom of the file and you should see the following
    styling:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，向文件底部滚动，你应该看到以下样式：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Although this styling gets us off the ground, for iPhone development, we need
    some more customization. The first media query is specific for tablet devices,
    and the second media query helps us by targeting devices with higher resolution,
    such as the iPhone 4.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些样式让我们起步，但对于iPhone开发，我们需要更多的定制。第一个媒体查询是专门针对平板设备的，第二个媒体查询帮助我们针对分辨率更高的设备，比如iPhone
    4。
- en: 'What we want to do is make this a bit simpler. Since we are only targeting
    iPhones, this is what we can replace the previous code with:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的是让这个更简单一些。因为我们只针对iPhone，这就是我们可以用来替换之前代码的内容：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The previous code will target both the iPhone 4 and 5\. We specifically target
    these two devices by checking the `–webkit-min-device-pixel-ratio` property on
    the device, and if it is true it means we can serve high definition graphics.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码将针对iPhone 4和5。我们通过检查设备上的`-webkit-min-device-pixel-ratio`属性来特别针对这两个设备，如果为真，意味着我们可以提供高清图形。
- en: 'Another aspect we want to check is our viewport settings in the `index.html`
    pages we''ve set up. Luckily, we cleaned this up earlier and it should have the
    following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要检查的另一个方面是我们在`index.html`页面中设置的视口设置。幸运的是，我们之前已经清理过这个，它应该有以下内容：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The previous code snippet will basically resize our content based on the width
    of the device.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码片段基本上会根据设备的宽度调整我们的内容。
- en: At this point, we should be set for implementing responsive styling later on
    in our applications. Now that our styling is set for our applications and is general
    enough to expand upon, let's start adding the framework behind the scripts.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该为以后在我们的应用程序中实现响应式样式做好准备。现在我们的样式已经为我们的应用程序设置好，并且足够通用以扩展，让我们开始添加脚本背后的框架。
- en: Responsive images
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式图像
- en: Images are an extremely important part of any application. It helps showcase
    the features of a product and exemplifies information you want the user to understand.
    However, today's varying amount of devices require content to respond correctly.
    On top of that, we need to be able to deliver content that is appropriate for
    the experience, meaning we need to tailor to higher resolution devices so that
    the highest quality content reaches that audience.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图像是任何应用程序的极其重要的部分。它有助于展示产品的特点，并且举例说明您希望用户理解的信息。然而，今天各种各样的设备需要内容正确响应。除此之外，我们需要能够提供适合体验的内容，这意味着我们需要为高分辨率设备量身定制，以便最高质量的内容传达给受众。
- en: There are multiple techniques for delivering the appropriate content. However,
    the one you choose depends on the requirements of your project. In this part,
    we'll review the traditional responsive web design principle of resizing an image
    according to its content and/or container.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种技术可以提供适当的内容。但是，您选择的技术取决于项目的要求。在这部分，我们将回顾根据内容和/或容器调整图像大小的传统响应式网页设计原则。
- en: Fluid images
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流体图像
- en: In this technique, the developer sets all the images to a maximum width of 100
    percent. We then define the container of the image to adjust accordingly.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种技术中，开发人员将所有图像的最大宽度设置为100%。然后我们定义图像的容器相应调整。
- en: Fluid width images
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 流体宽度图像
- en: 'To achieve full width images, we can do the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现全宽度图像，我们可以这样做：
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The markup is pretty simple, we essentially wrap an image into an element that
    extends the full width of what we need. In this case, the body will extend 100
    percent in width.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 标记很简单，基本上我们将图像包装到一个扩展所需全宽度的元素中。在这种情况下，body的宽度将扩展到100%。
- en: 'Next, we''ll define the style of the image as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义图像的样式如下：
- en: '[PRE32]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: With this simple CSS declaration, we are telling our images to have their maximum
    width set to 100 percent of the containing content. This will automatically resize
    the image as the device's width changes, which is essential if we want to make
    sites responsive to the user's device.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这简单的CSS声明，我们告诉我们的图像将其最大宽度设置为包含内容的100%。这将根据设备宽度的变化自动调整图像大小，这对于使网站对用户设备响应是至关重要的。
- en: Full width images
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全宽图像
- en: In this case, we want the image to stay its full width, but we also need it
    to cut off accordingly.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望图像保持其全宽，但我们也需要相应地裁剪它。
- en: 'To achieve this, we can start by simply creating a `div` with a `class`, in
    this case we add a class of `overflow`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们可以简单地创建一个带有`class`的`div`，在这种情况下我们添加一个`overflow`类：
- en: '[PRE33]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can then create the styling that keeps the image at full width and cuts
    off based on the resizing of the content:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以创建保持图像全宽并根据内容调整大小的样式：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is a bit complex, but essentially we attach the image with a `background`
    property. The key here is to make sure we center it using 50 percent. The height
    property is just to show the image, and the width tells the container to be 100
    percent related to its content.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点复杂，但基本上我们使用`background`属性附加图像。关键在于确保使用50%将其居中。高度属性只是为了显示图像，宽度告诉容器与其内容相关的100%。
- en: These are the two techniques we use when implementing a traditional responsive
    design. We'll be implementing these techniques much later when we create the video
    and image galleries.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在实现传统响应式设计时使用的两种技术。当我们创建视频和图像库时，我们将在以后实现这些技术。
- en: Establishing our JavaScript architecture
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立我们的JavaScript架构
- en: When establishing a JavaScript architecture for your application, there's a
    lot to think about, including possible changes in the near or short term, security,
    ease of use and implementation, documentation, and more. Once we can answer the
    various questions we have, we can then decide on the pattern (module, facade and/or
    mediator, and so on). We also need to know what library or framework would be
    best suited for us, such as `jQuery`, `Zepto.js`, `Backbone.js`, or `Angular.js`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在为应用程序建立JavaScript架构时，有很多要考虑的事情，包括近期或短期内可能的变化、安全性、易用性和实施、文档等等。一旦我们能回答我们所提出的各种问题，我们就可以决定采用哪种模式（模块、外观和/或中介等）。我们还需要知道哪种库或框架最适合我们，比如`jQuery`、`Zepto.js`、`Backbone.js`或`Angular.js`。
- en: Luckily for us, we'll be keeping it plain and simple in order to deliver an
    effective application on an iPhone. We'll be utilizing `Zepto.js` as our supported
    library to keep it light. We'll then build upon Zepto by creating a custom JavaScript
    framework that follows a modular pattern.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，为了在iPhone上提供有效的应用程序，我们将保持简单明了。我们将利用`Zepto.js`作为我们支持的库以保持轻量级。然后我们将通过创建遵循模块化模式的自定义JavaScript框架来构建Zepto。
- en: Structuring our app functionality
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建我们的应用功能
- en: First, let's open up our application directory in our preferred text editor.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在我们喜欢的文本编辑器中打开我们的应用程序目录。
- en: Next, open the `App.js` file we created earlier within our JavaScript directory.
    The `App.js` file should be completely empty, and it shouldn't be included anywhere.
    This is where we will begin writing our framework.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开我们之前在JavaScript目录中创建的`App.js`文件。`App.js`文件应该是完全空的，不应该被包含在任何地方。这是我们将开始编写框架的地方。
- en: Namespacing our application
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 给我们的应用程序命名空间
- en: If you're new to JavaScript, you have most likely created most of your code
    in the global scope—perhaps laying out most of your JavaScript inside of script
    tags. Although this may achieve some of your goals, when working on large scale
    applications we want to avoid such practices. Some of the reasons we want to namespace
    our applications is for maintainability, efficiency, and portability.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是JavaScript的新手，你很可能大部分时间都是在全局作用域中编写代码——也许大部分JavaScript都是放在script标签中。虽然这可能实现了你的一些目标，但在开发大规模应用程序时，我们希望避免这样的做法。我们希望给我们的应用程序命名空间是为了可维护性、效率和可移植性。
- en: 'Let''s start out by checking for the `App` namespace; if it exists we''ll use
    what''s there, if it does not exist, then we''ll make an empty object. The following
    code shows how we can achieve this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查`App`命名空间；如果存在，我们将使用其中的内容，如果不存在，那么我们将创建一个空对象。以下代码展示了我们如何实现这一点：
- en: '[PRE35]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Immediately Invoked Function Expressions
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 立即调用的函数表达式
- en: 'Great! We are checking for the `App` namespace, now let''s define it. Let''s
    include the following code after the check:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们正在检查`App`命名空间，现在让我们定义它。在检查后，让我们包含以下代码：
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The previous code is doing several things, let's take it one step at a time.
    First, we're setting the `App` namespace to what is known as an **Immediately
    Invoked Function Expression** (**IIFE**). We are essentially creating a function
    that is wrapped by parentheses and immediately invoking it after the closing brace.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码正在做几件事情，让我们一步一步来。首先，我们将`App`命名空间设置为所谓的**立即调用的函数表达式**（**IIFE**）。我们实质上是创建了一个由括号包裹并在闭括号后立即调用的函数。
- en: When we use the previous technique, or IIFE, we create a new execution context
    or scope. This helps in creating self-containing code that will hopefully, not
    impact other code on the site. It protects us and helps us follow the modular
    pattern efficiently.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用之前的技术或IIFE时，我们创建了一个新的执行上下文或作用域。这有助于创建自包含的代码，希望不会影响站点上的其他代码。它保护我们，并帮助我们有效地遵循模块化模式。
- en: 'Let''s extend the previous functionality by passing in the window, document,
    and Zepto objects, as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过传入window、document和Zepto对象来扩展先前的功能，如下所示：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: I know that this may be a bit confusing, but let's take a second to think through
    what we're doing here. First, we are setting some parameters in the function named
    `window`, `document`, and `$`. Then, we are passing in `window`, `document`, and
    `Zepto` when we invoke this method. Remember, we discussed previously that this
    creates a new scope or execution context? Well, this becomes useful to us because
    we can now pass in references to any object that might be global.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这可能有点令人困惑，但让我们花点时间来思考一下我们在这里做什么。首先，我们在名为`window`、`document`和`$`的函数中设置了一些参数。然后，在调用此方法时，我们传入了`window`、`document`和`Zepto`。记住，我们之前讨论过这会创建一个新的作用域或执行上下文？嗯，这对我们很有用，因为现在我们可以传入任何可能是全局的对象的引用。
- en: How is this useful to us? Well, imagine if you wanted to use the actual `Zepto`
    object over and over again it would be kind of tiring. It's not that difficult
    to type `Zepto`, but you can just namespace it to the dollar sign and keep it
    simple.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们有什么用呢？嗯，想象一下，如果你想一遍又一遍地使用实际的`Zepto`对象，那将会有点累人。虽然输入`Zepto`并不难，但你可以将其命名空间为美元符号，保持简单。
- en: Use strict
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用严格模式
- en: 'Ok, so we''ve got our module setup. Now let''s continue to extend it by including
    the `use strict` directives:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经设置好了我们的模块。现在让我们继续扩展它，包括`use strict`指令：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This directive helps us debug our applications by making changes to how JavaScript
    runs, allowing certain errors to be thrown instead of failing silently.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令通过改变JavaScript的运行方式来帮助我们调试我们的应用程序，允许某些错误被抛出而不是悄悄失败。
- en: Default options
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认选项
- en: 'Default options are a great way of giving your codebase some extensibility.
    If, for example, we want to customize or cache an element related to the application
    itself then following are the defaults we will use:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 默认选项是给你的代码库提供一些可扩展性的好方法。例如，如果我们想要自定义或缓存与应用程序相关的元素，那么以下是我们将使用的默认值：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's look at these defaults briefly. First we will create a `defaults` variable,
    which will contain all the defaults for our application(s). Inside it, we have
    defined a default location to be referenced for our application with the `'element'`
    default set to `document.body`—which gets our body element in **DOM** (**Document
    Object Model**). We then create a custom name for our application called `'App'`.
    After this, we create empty objects for our video, audio, touch, form, location,
    and single page applications—to be built later. These empty objects will be extended
    as we continue through the book.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地看一下这些默认值。首先，我们将创建一个`defaults`变量，其中包含了我们应用程序的所有默认值。在其中，我们已经定义了一个默认位置，用于引用我们应用程序的`'element'`默认设置为`document.body`——这样就可以获取我们在**DOM**（**文档对象模型**）中的body元素。然后，我们为我们的应用程序创建一个自定义名称叫做`'App'`。之后，我们创建了视频、音频、触摸、表单、位置和单页面应用程序的空对象——以后会逐渐扩展这些空对象。当我们继续阅读本书时，这些空对象将被扩展。
- en: Defining the constructor
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义构造函数
- en: Now we need to define our constructor after the `use strict` directive. This
    constructor will take a single parameter named `options`. We will then extend
    the defaults with the parameter `options` and store these settings that can be
    retrieved later, if needed. We will then ultimately cache the `'element'` option
    as a `Zepto` object.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`use strict`指令之后定义我们的构造函数。这个构造函数将接受一个名为`options`的参数。然后我们将用参数`options`扩展默认值，并存储这些设置，以便以后可以检索。最后，我们将把`'element'`选项作为`Zepto`对象进行缓存。
- en: '[PRE40]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here is what the previous code is accomplishing. First, we are using the keyword
    `this`, which is a reference to what will be, an instance of App itself. Thus,
    `this` is the context of the object itself. Hopefully, this is not too confusing
    and will become clear as we go on. In this case, we are using `this` to define
    an object `options`, which will contain the merged contents of `_defaults` and
    any custom options we pass into the constructor.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这是先前代码的完成情况。首先，我们使用关键字`this`，它是对将要成为App实例的引用。因此，`this`是对象本身的上下文。希望这不会太令人困惑，并且随着我们的进行会变得清晰。在这种情况下，我们使用`this`来定义一个对象`options`，它将包含`_defaults`和我们传递给构造函数的任何自定义选项的合并内容。
- en: Note, when we pass an empty object, or `{}` into `$.extend()` as the first parameter,
    we are telling `Zepto` to merge `_defaults` and `options` into a new object, thus
    not overwriting the `_defaults` object. This is useful when we need to do some
    sort of check in the future with the default options.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们将空对象或`{}`作为第一个参数传递给`$.extend()`时，我们告诉`Zepto`将`_defaults`和`options`合并到一个新对象中，因此不会覆盖`_defaults`对象。当我们需要在将来对默认选项进行某种检查时，这是有用的。
- en: Once we've defined the options, we then cache the element with `this.$element`,
    where `$` in front of `element` is just for my reference so that I immediately
    recognize a Zepto object versus a plain JavaScript object.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了选项，我们就使用`this.$element`缓存元素，其中`$`在`element`前面只是为了我的参考，这样我就可以立即识别Zepto对象与普通JavaScript对象。
- en: The prototype
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原型
- en: Ok, so we've created our `App` namespace, constructed an IIFE to contain our
    code and defined our constructor. Now, let's start creating some public methods
    that can be accessed to make this a bit modular. But before we do that, let's
    try to understand JavaScript's `prototype`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经创建了我们的`App`命名空间，构建了一个IIFE来包含我们的代码，并定义了我们的构造函数。现在，让我们开始创建一些可以被访问的公共方法，使其更加模块化。但在我们这样做之前，让我们尝试理解JavaScript的`prototype`。
- en: Think of `prototype` as a live object that can be accessed, modified, and updated
    whenever and however you like. It can also be thought of as a pointer, because
    JavaScript will continue to go down the chain until it finds the object or it
    will return `undefined`. The prototype is simply a way of extending functionality
    to any non-plain object.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 将`prototype`视为可以随时访问、修改和更新的活动对象。它也可以被视为指针，因为JavaScript将继续沿着链路向下查找对象，直到找到对象或返回`undefined`。原型只是一种将功能扩展到任何非普通对象的方法。
- en: 'To make things a bit more confusing, I mentioned that non-plain objects have
    prototypes. These non-plain objects would be Arrays, Strings, Numbers, and so
    on. A plain object is one where we simple declare an empty object as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情变得更加混乱，我提到非普通对象具有原型。这些非普通对象将是数组、字符串、数字等。普通对象是我们简单地声明一个空对象，如下所示：
- en: '[PRE41]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `x` variable does not have a prototype, it is simply there as a key/value
    storage similar to our `_defaults` object.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`变量没有原型，它只是一个键/值存储，类似于我们的`_defaults`对象。'
- en: If you haven't yet understood the prototype, don't worry, it's all about getting
    your hands dirty and getting some experience. So, let's keep moving and getting
    our applications to work.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有理解原型，不要担心，这一切都是关于动手实践和获取一些经验。所以，让我们继续前进，让我们的应用程序开始工作。
- en: 'At this point, your `App.js` file should look like the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的`App.js`文件应该如下所示：
- en: '[PRE42]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Defining public methods
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义公共方法
- en: Now we need to create some public methods by typing into the prototype. We'll
    create a `getDefaults` method, which returns our default options; `toString` will
    overwrite the native `toString` method so we can return a custom name. Then we'll
    create initialization methods to create our other applications, and we'll name
    these `initVideo`, `initAudio`, `initLocalization`, `initTouch`, `initForms`,
    and `initSinglePage` respectively.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要通过在原型中输入来创建一些公共方法。我们将创建一个`getDefaults`方法，它返回我们的默认选项；`toString`将覆盖原生的`toString`方法，以便我们可以返回一个自定义名称。然后我们将创建初始化方法来创建我们的其他应用程序，我们将分别命名这些方法为`initVideo`、`initAudio`、`initLocalization`、`initTouch`、`initForms`和`initSinglePage`。
- en: '[PRE43]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'At this point we have several methods we can access publicly when we create
    an instance of `App`. First, let''s review the code we implemented previously,
    specifically this line that gets duplicated, but customized based on the `init`
    method:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有几种方法可以在创建`App`实例时公开访问。首先，让我们回顾我们之前实现的代码，特别是这一行代码，它被复制，但根据`init`方法进行了定制：
- en: '[PRE44]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: For every `init` method we have created a call to the appropriate application,
    for example, `App.Touch`, `App.Forms`, `App.Video`, and so on. Then we pass it
    the options we've defined in the constructor that merged our defaults, for example,
    `this.options.touchOptions`, `this.options.formOptions`, `this.options.videoOptions`,
    and so on.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们创建的每个`init`方法，我们都调用适当的应用程序，例如`App.Touch`、`App.Forms`、`App.Video`等。然后我们传递在构造函数中定义的选项，例如`this.options.touchOptions`、`this.options.formOptions`、`this.options.videoOptions`等。
- en: Note, we haven't created these classes yet for Video, Forms, Touch, and others,
    but we will be creating these soon.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们尚未为Video、Forms、Touch等创建这些类，但我们将很快创建这些类。
- en: Returning our constructor/function
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回我们的构造函数/函数
- en: 'The last thing we need to do in `App.js` includes returning the constructor.
    So, after all the public methods defined previously, include the following code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App.js`中我们需要做的最后一件事是返回构造函数。因此，在之前定义的所有公共方法之后，包括以下代码：
- en: '[PRE45]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This bit of code, although simple, is extremely important. Let''s look at a
    stripped down version of `App.js` to better understand what''s going on:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码虽然简单，但非常重要。让我们看一个简化版本的`App.js`，以更好地理解正在发生的事情：
- en: '[PRE46]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As mentioned earlier, we are creating an `App` namespace that gets set to the
    immediately invoked function expression. When we do this, we create a new scope
    inside this function.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们正在创建一个`App`命名空间，该命名空间设置为立即调用的函数表达式。当我们这样做时，在这个函数内部创建了一个新的作用域。
- en: This is why we can have a function or constructor with the name `App` as well
    and have no conflicts or errors. But if you recall, our function `App` is also
    an object, just like everything in JavaScript is an object. This is why, when
    we return our function `App` the `App` namespace gets set to the constructor.
    This then allows you to create multiple instances of `App`, while centralizing
    your code inside of a new scope that is untouchable.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们可以有一个名为`App`的函数或构造函数，而没有冲突或错误。但是如果您回忆起来，我们的函数`App`也是一个对象，就像JavaScript中的所有东西一样都是对象。这就是为什么当我们返回我们的函数`App`时，`App`命名空间被设置为构造函数。这样一来，您就可以创建多个`App`的实例，同时将代码集中在一个新的不可触及的范围内。
- en: Integrating a custom module template
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成自定义模块模板
- en: Now, to get the rest of our architecture together we need to open up every other
    `App` file in the JavaScript directory we are in (`/js/App`).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了将我们的架构其余部分放在一起，我们需要打开JavaScript目录中的每个其他`App`文件（`/js/App`）。
- en: 'When we have these files open, we need to paste the following template, which
    is based on the script we''ve written for `App.js`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开这些文件时，我们需要粘贴以下模板，这是基于我们为`App.js`编写的脚本：
- en: '[PRE47]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: When we have each template in, we must then change `Module` to the appropriate
    type, that is Video, Audio, Location, and so on.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们每个模板都放入后，我们必须将`Module`更改为适当的类型，即视频、音频、位置等。
- en: Once you are done with pasting in the section and changing the names, you should
    be all set with the basic JavaScript architecture.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了粘贴部分并更改了名称，基本的JavaScript架构就设置好了。
- en: Including our scripts
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含我们的脚本
- en: 'One of the last items you will need to take care of is including this basic
    architecture into each `index.html` file. In order to do this, you will need to
    paste the following code at the bottom of the page, right after the inclusion
    of `helper.js`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要处理的一项事项是将这个基本架构包含到每个`index.html`文件中。为了做到这一点，您需要在页面底部粘贴以下代码，就在`helper.js`包含之后：
- en: '[PRE48]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We are basically including each script of the framework. What's important here
    is to always include `App.js` first. The reason for this is that `App.js` creates
    the `App` object and directly modifies it. If you include it after all the other
    scripts, then `App.js` will overwrite the other scripts because it's directly
    affecting the `App` object.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上包含了框架的每个脚本。这里重要的是始终首先包含`App.js`。原因在于`App.js`创建了`App`对象并直接修改它。如果您在所有其他脚本之后包含它，那么`App.js`将覆盖其他脚本，因为它直接影响了`App`对象。
- en: Initializing our framework
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化我们的框架
- en: 'The last item we need to take care of is `main.js`, which includes the initialization
    of our application. We do this by wrapping our code in IIFE and then exposing
    the instance to the `window` object. We do this with the following code:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要处理的最后一项事项是`main.js`，其中包括我们应用程序的初始化。我们通过将我们的代码包装在IIFE中，然后将实例暴露给`window`对象来实现这一点。我们使用以下代码来实现这一点：
- en: '[PRE49]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: What we've seen earlier is an IIFE being assigned to an object. Here we don't
    see that because it's not necessary. We just want to make sure our code would
    not affect the rest of the code, which in most cases would not happen because
    of the simplicity of this project. However, as a best practice I try to self contain
    my code in most cases.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到的是将IIFE分配给对象。这里我们看不到，因为这不是必要的。我们只是想确保我们的代码不会影响其余的代码，大多数情况下不会发生，因为这个项目的简单性。然而，作为最佳实践，我尽量在大多数情况下将我的代码自包含起来。
- en: 'The difference in the previous code is that we see the initialization of our
    framework here:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的不同之处在于我们在这里看到了我们框架的初始化：
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We do that by using the `new` keyword, creating a new instance of `App`, and
    then passing it an object, which will be merged into our default options we previously
    wrote.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用`new`关键字创建`App`的新实例，然后将一个对象传递给它，该对象将合并到我们之前编写的默认选项中。
- en: Note
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`querySelector` is a JavaScript method that is attached to the document object.
    This method accepts a selector that we would normally use in CSS, parse DOM, and
    find the appropriate element. In this case, we are telling our application to
    self contain itself to the element with the `site-wrapper` class.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`querySelector`是一个附加到文档对象的JavaScript方法。该方法接受一个我们通常在CSS中使用的选择器，解析DOM，并找到适当的元素。在这种情况下，我们告诉我们的应用程序将自己包含到具有`site-wrapper`类的元素中。'
- en: 'When we finally initialize our application, we then attach `app` to the `window`
    object:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最终初始化我们的应用程序时，我们将`app`附加到`window`对象上：
- en: '[PRE51]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This basically makes it accessible anywhere in our application by attaching
    it to the `window` object.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上使它可以在我们的应用程序中的任何地方访问，通过将其附加到`window`对象上。
- en: We are now done with the framework for our application. Although we don't have
    anything being manipulated on the page, or have attached any events that correlate
    with a user's input, we now have a solid foundation for coding that follows best
    practices, is effective, efficient, and easily accessible.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了应用程序的框架。虽然我们没有在页面上操纵任何内容，也没有附加与用户输入相关的任何事件，但我们现在有了一个遵循最佳实践、高效、有效且易于访问的编码的坚实基础。
- en: Routing to a mobile site
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由到移动站点
- en: Unless we are making a completely responsive site where the styles of the site
    shift based on the dimensions of the device, we most likely will need to do some
    sort of redirect to a mobile friendly version of our site.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们正在制作一个完全响应式的站点，其中站点的样式会根据设备的尺寸而变化，否则我们很可能需要对站点进行某种重定向，以便转到我们站点的移动友好版本。
- en: Lucky for us, this can easily be achieved in several ways. Although I won't
    cover in detail the ways in which we can achieve this, here are a few techniques
    that might help out when deciding how to move forward.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这可以很容易地通过几种方式实现。虽然我不会详细介绍我们可以实现这一点的方式，但以下是一些在决定如何前进时可能有所帮助的技术。
- en: Tip
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Since this book is geared towards the frontend, routing to a mobile site will
    be briefly covered with PHP and htaccess. We can always perform this process on
    the frontend, but it should be avoided for SEO and page-ranking purposes.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书面向前端，将路由到移动站点的过程将简要涵盖PHP和htaccess。我们总是可以在前端执行此过程，但出于SEO和页面排名的目的，应该避免这样做。
- en: Redirecting via PHP
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过PHP进行重定向
- en: 'In PHP we could do the following type of redirect:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，我们可以进行以下类型的重定向：
- en: '[PRE52]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this example we are creating a variable, `$iPhone`, and giving it a Boolean
    value of true or false. If `iPhone` is found in the user agent, which may or may
    not be the best technique to use, then we tell the page to redirect using the
    `header()` method in PHP.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在创建一个变量`$iPhone`，并给它一个布尔值，true或false。如果在用户代理中找到`iPhone`，这可能是或可能不是最好的技术，然后我们告诉页面使用PHP中的`header()`方法进行重定向。
- en: Again, there are other ways of achieving this, but this will get you off the
    ground and running.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，还有其他方法可以实现这一点，但这将让你立即开始并运行起来。
- en: Redirecting via htaccess
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过htaccess进行重定向
- en: 'We can also detect the iPhone and redirect it by putting these instructions
    on the server using an `htaccess` file:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检测iPhone，并通过在服务器上使用`htaccess`文件放置这些指令来进行重定向：
- en: '[PRE53]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In this example, we are turning on the rewrite engine, creating a rewrite condition
    that checks for the `iPhone` text in the user agent, and then creates a rewrite
    rule if the condition is met.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在启用重写引擎，创建一个重写条件，检查用户代理中是否有`iPhone`文本，然后如果条件满足就创建一个重写规则。
- en: In essence, if we want to redirect to a mobile version of our site, we need
    to be able to detect the type of device, not its dimensions, and then redirect
    appropriately.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，如果我们想要重定向到我们网站的移动版本，我们需要能够检测设备的类型，而不是它的尺寸，然后适当地进行重定向。
- en: Home screen icons
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主屏幕图标
- en: If you're creating an application that should mimic the feeling of being a native
    application, or to simply increase the experience of a web app—it is a good idea
    to have bookmark icons that represent your application.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在创建一个应用程序，应该模仿成为本机应用程序的感觉，或者只是增加Web应用程序的体验，那么拥有代表您的应用程序的书签图标是一个好主意。
- en: 'At the moment, we do support this feature with the following markup in our
    `index.html` files:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们支持在我们的`index.html`文件中使用以下标记：
- en: '[PRE54]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: These directives inform Safari that we have home screen icons for the appropriate
    devices. Starting from top to bottom we are supporting retina display, first-generation
    iPad and non-Retina iPhone, iPad Touch, and even Android 2.1+.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令告诉Safari我们有适合相应设备的主屏幕图标。从上到下，我们支持视网膜显示屏、第一代iPad和非视网膜iPhone、iPad Touch，甚至Android
    2.1+。
- en: To put it simply, we have an application that users can bookmark to their home
    screen, allowing them to instantly access the web application from their home
    screen.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地说，我们有一个应用程序，用户可以将其添加到主屏幕的书签中，从而可以立即从主屏幕访问Web应用程序。
- en: Introducing our build script
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍我们的构建脚本
- en: Earlier, we installed our build script along with the HTML5 Mobile Boilerplate.
    We'll now explore the build script a bit further by customizing it for our purposes.
    We'll need to make sure our styles, scripts, images, and markup are optimized
    for deployment. It will also be necessary for us to set up multiple environments
    to test our application thoroughly.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们安装了我们的构建脚本以及HTML5移动样板。现在，我们将通过为我们的目的定制它来进一步探索构建脚本。我们需要确保我们的样式、脚本、图像和标记都经过优化以进行部署。我们还需要设置多个环境来彻底测试我们的应用程序。
- en: Configuring our build script
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置我们的构建脚本
- en: Let's start by configuring the build script for our needs, this way we'll have
    a custom build script that works for us and gets us going immediately.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为我们的需求配置构建脚本开始，这样我们将拥有一个为我们工作并立即启动的自定义构建脚本。
- en: Minifying and concatenating scripts
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩小和连接脚本
- en: 'First, let''s make sure our scripts get concatenated and minified. So let''s
    open all our `index.html` files and wrap all our scripts at the bottom of the
    page with the following comments:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保我们的脚本被连接和缩小。因此，让我们打开所有我们的`index.html`文件，并在页面底部用以下注释包装所有我们的脚本：
- en: '[PRE55]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The previous comments are used by the `ant` task, or build script, to find all
    JavaScript files being used, concatenate, and minify them. The process will also
    use a timestamp for the newly optimized JavaScript file in order to bust caching
    on the server.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的注释被`ant`任务或构建脚本用来查找所有正在使用的JavaScript文件，将它们连接并进行缩小。该过程还将在新优化的JavaScript文件上使用时间戳，以打破服务器上的缓存。
- en: Minifying and concatenating styles
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩小和连接样式
- en: By default, the Ant Build script minifies and concatenates our styles. However,
    if we want to retain comments that identify a particular section of our app, such
    as the video or audio section, then we need to do something that will keep those
    comments.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ant构建脚本会缩小和连接我们的样式。但是，如果我们想保留标识应用程序特定部分的注释，比如视频或音频部分，那么我们需要做一些事情来保留这些注释。
- en: 'The comments can be used to identify a section, and it can be written as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以用来标识一个部分，并且可以写成以下形式：
- en: '[PRE56]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Write the previous comments for each stylesheet.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个样式表写上先前的注释。
- en: We then need to add each of our stylesheets to the project properties so that
    each can be minified by the YUI compressor. To do this, we need to open up the
    `project.properties` file located in `/build/config`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将每个样式表添加到项目属性中，以便可以通过YUI压缩器对每个样式表进行缩小。为此，我们需要打开位于`/build/config`目录中的`project.properties`文件。
- en: 'Then find the following line:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 然后找到以下行：
- en: '[PRE57]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Once we''ve found that line, let''s add all our `css` files as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到了那一行，让我们按照以下方式添加所有我们的`css`文件：
- en: '[PRE58]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note, that there are no spaces after each file. This is necessary for the build
    script to process.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个文件后面没有空格。这对于构建脚本的处理是必要的。
- en: This is all we need to do at the moment for optimizing our styles.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们目前需要做的所有优化样式。
- en: Creating multiple environments
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建多个环境
- en: Typically a project will run on a development, test, and production environment.
    The test environment should be closest to production in terms of configuration,
    allowing us to effectively reproduce any issues that might come up.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个项目将在开发、测试和生产环境上运行。测试环境应该在配置方面最接近生产环境，这样我们就可以有效地重现可能出现的任何问题。
- en: In order to build our environments correctly, let's go through the process of
    building our project. First, let's open up `Terminal`, a program that allows you
    to interact with the operating system of any Unix style computer through a command-line
    interface.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确构建我们的环境，让我们通过构建我们的项目的过程。首先，让我们打开`终端`，这是一个允许你通过命令行界面与任何Unix风格计算机的操作系统进行交互的程序。
- en: Navigating our directories
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航我们的目录
- en: 'Once the terminal is up and running, we have to navigate to our project. Here
    are a couple of commands that will help you navigate:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦终端启动并运行，我们必须导航到我们的项目。以下是一些可以帮助你导航的命令：
- en: '[PRE59]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The previous command means we are changing our directory from the current directory
    to the `somesite` directory, relative to where you're now.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令意味着我们正在从当前目录切换到`Somesite`目录，相对于你现在的位置。
- en: '[PRE60]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This command tells us to change the directory, but going up a level with `../`
    and then going into the `somesite` directory.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令告诉我们要更改目录，但是使用`../`向上一级，然后进入`somesite`目录。
- en: 'As an easier example to understand, my project exists in `/Sites/html5iphonewebapp`.
    So what I can do is use the following command to enter my project:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 举个更容易理解的例子，我的项目存在于`/Sites/html5iphonewebapp`。所以我可以使用以下命令进入我的项目：
- en: '[PRE61]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This changes the directory for me to the project where I am developing this
    application.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将我的目录更改为我正在开发这个应用程序的项目。
- en: Building our project
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建我们的项目
- en: Once we've entered the project directory, we can start building our project.
    By default, the Ant Build script creates a production environment, which optimizes
    all parts of the process.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进入了项目目录，我们就可以开始构建我们的项目。默认情况下，Ant Build脚本会创建一个生产环境，优化整个过程的所有部分。
- en: '[PRE62]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This command tells us to build our project, and as explained creates our production
    version in a directory labeled `publish`. You will also notice that when you run
    that command, your terminal will update, letting you know what step in the process
    the build is in.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令告诉我们要构建我们的项目，并且如解释的那样，在一个名为`publish`的目录中创建我们的生产版本。当你运行该命令时，你会注意到你的终端会更新，让你知道构建过程中的哪个步骤。
- en: 'Once the build is complete, your directory structure should look similar to
    the following screenshot:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，你的目录结构应该类似于以下截图：
- en: '![Building our project](img/1024_01_03.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的项目](img/1024_01_03.jpg)'
- en: The `publish` directory represents the production environment. You will also
    see that an intermediate directory has been created; this is your test environment.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`publish`目录代表生产环境。你还会看到一个中间目录已经被创建；这是你的测试环境。'
- en: 'However, let''s say you wanted to have full control of the build and wanted
    to create your environments manually, then one can do the following in the terminal:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，假设你想要完全控制构建，并且想要手动创建你的环境，那么可以在终端中执行以下操作：
- en: '[PRE63]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: This command, `ant build –Denv=`, lets us define which environment we want to
    build and does it accordingly.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令，`ant build –Denv=`, 让我们定义我们想要构建的环境，并相应地执行。
- en: We now have a project that is ready to be built upon. There were many steps
    in this process, so I encourage you to practice this process in order to develop
    a good architecture and deployment process that works for you and/or your team.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个准备好进行构建的项目。在这个过程中有很多步骤，所以我鼓励你练习这个过程，以便为你和/或你的团队开发一个适合你们的良好架构和部署过程。
- en: Summary
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how to use the HTML5 Mobile Boilerplate for our projects,
    from downloading the default package to customizing it for our needs. We also
    took a couple of simple steps to establish a solid architecture for our JavaScript,
    CSS, and HTML. As a bonus, we went over including a build process and customizing
    it for our project. We then quickly reviewed best practices for JavaScript applications
    and gave a couple of tips on how to direct users to a separate mobile site. We
    are now prepared for in-depth development of the mobile web applications.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何为我们的项目使用HTML5移动样板，从下载默认包到根据我们的需求进行定制。我们还采取了一些简单的步骤来为我们的JavaScript、CSS和HTML建立一个坚实的架构。作为一个额外的奖励，我们还介绍了包括构建过程并为我们的项目进行定制。然后我们快速回顾了JavaScript应用程序的最佳实践，并给出了一些关于如何将用户引导到一个单独的移动站点的建议。我们现在已经准备好深入开发移动Web应用程序了。
