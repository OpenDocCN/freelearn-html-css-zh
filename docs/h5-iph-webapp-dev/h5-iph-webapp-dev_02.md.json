["```html\nAddType video/ogg .ogv\nAddType video/mp4 .mp4\nAddType video/webm .webm\n```", "```html\n<video src=\"img/testvid.mp4\" controls preload></video>\n```", "```html\n<video poster=\"testvid.jpg\" controls preload>\n    <source src=\"img/testvid.webm\" type='video/webm'/>\n    <source src=\"img/testvid.ogv\" type='video/ogg'/>\n    <source src=\"img/textvid.mp4\" type='video/mp4'/>\n    <p>Fallback Content</p>\n</video>\n```", "```html\n<video src=\"img/testvid.mp4\" controls preload>\n    <p>Video is not supported in your browser.</p>\n</video>\n```", "```html\n<div class=\"site-wrapper\">\n    <header>\n        ....\n    </header>\n    <div class=\"gallery\">\n                    <video src=\"img/testvid.mp4\" controls preload></video>\n    </div>\n    <footer>\n        ...\n    </footer>\n</div>\n```", "```html\nfunction Video(options) {\n    // Customizes the options by merging them with whatever is passed in\n    this.options = $.extend({}, _defaults, options);\n\n    //Cache the main element\n    this.$element = $(this.options.element);\n}\n```", "```html\nthis.options.element.addEventListener('canplay', function(e){ \n    console.log('video :: canplay'); \n});\n\nthis.options.element.addEventListener('seeking', function(e){ \n    console.log('video :: seeking'); \n});\n\nthis.options.element.addEventListener('seeked', function(e){ \n    console.log('video :: seeked'); \n});\n\nthis.options.element.addEventListener('ended', function(e){ \n    console.log('video :: ended'); \n});\n\nthis.options.element.addEventListener('play', function(e){ \n    console.log('video :: play'); \n});\n\nthis.options.element.addEventListener('pause', function(e){ \n    console.log('video :: pause'); \n});\n\nthis.options.element.addEventListener('loadeddata', function(e){ \n    console.log('video :: loadeddata'); \n});\n\nthis.options.element.addEventListener('loadedmetadata', function(e){ \n    console.log('video :: loadedmetadata'); \n});\n\nthis.options.element.addEventListener('timeupdate', function(e){ \n    console.log('video :: timeupdate'); \n});\n```", "```html\nfunction Video(options) {\n    // Customizes the options by merging them with whatever is passed in\n    this.options = $.extend({}, _defaults, options);\n\n    // Cache the main element\n    this.element = options.element;\n    this.$element = $(this.options.element);\n\n    this.options.element.addEventListener('canplay', function(e){ \n        console.log('video :: canplay'); \n    });\n\n    this.options.element.addEventListener('seeking', function(e){ \n        console.log('video :: seeking'); \n    });\n\n    this.options.element.addEventListener('seeked', function(e){ \n        console.log('video :: seeked'); \n    });\n\n    this.options.element.addEventListener('ended', function(e){ \n        console.log('video :: ended'); \n    });\n\n    this.options.element.addEventListener('play', function(e){ \n        console.log('video :: play'); \n    });\n\n    this.options.element.addEventListener('pause', function(e){ \n        console.log('video :: pause'); \n    });\n\n    this.options.element.addEventListener('loadeddata', function(e){ \n        console.log('video :: loadeddata'); \n    });\n\n    this.options.element.addEventListener('loadedmetadata', function(e){ \n        console.log('video :: loadedmetadata'); \n    });\n\n    this.options.element.addEventListener('timeupdate', function(e){ \n        console.log('video :: timeupdate'); \n    });\n}\n```", "```html\n(function(window, document) {\n    'use strict';\n\n    // Create an instance of our framework\n    var app = new App({\n        // Custom Option, allowing us to centralize our framework\n        // around the site-wrapper class\n        'element': document.querySelector('.site-wrapper')\n    });\n    // Expose our framework globally\n    window.app = app;\n}(window, document));\n```", "```html\nnew App.Video({\n    'element': document.getElementsByTagName('video')[0]\n});\n```", "```html\nfunction Video(options) {\n    this.options = $.extend({}, _defaults, options);\n\n    // Cache the main element\n    this.element = options.element;\n    this.$element = $(this.options.element);\n\n    attachEvents();\n}\n\nfunction attachEvents() {\n    // All your event handlers go here\n}\n```", "```html\n// Global Scope\nvar x = 10;\n(function($){ \n    // New Scope\n    console.log(x);\n}(Zepto));\n```", "```html\nattachEvents.call(this);\n```", "```html\nVideo.prototype.play = function() {\n    return this;\n}\n\nVideo.prototype.pause = function() {\n    return this;\n}\n\nVideo.prototype.stop = function() {\n    return this.pause();\n}\n\nVideo.prototype.mute = function() {\n    return this;\n};\n\nVideo.prototype.unmute = function() {\n    return this;\n};\n\nVideo.prototype.fullscreen = function() {\n    return this;\n}\n```", "```html\nVideo.prototype.play = function() {\n    this.element.play();\n\n    return this;\n}\n```", "```html\nVideo.prototype.pause = function() {\n    this.element.pause();\n    return this;\n}\n```", "```html\nVideo.prototype.stop = function() {\n    return this.pause();\n}\n```", "```html\nVideo.prototype.mute = function() {\n    this.element.muted = true;\n    return this;\n};\nVideo.prototype.unmute = function() {\n    this.element.muted = false;\n    return this;\n};\n```", "```html\nVideo.prototype.fullscreen = function() {\n    if (typeof this.element.requestFullscreen === 'undefined') {\n        this.element.webkitRequestFullScreen();\n    } else {\n        this.element.requestFullscreen();\n    }\n    return this;\n}\n```", "```html\n$('.some-class').fadeout('fast', function(){\n    // Do something when fading is complete\n});\n```", "```html\n$('.some-class').fadeOut('fast', someFadeOutFunc);\nfunction someFadeOutFunc(){\n    // Do something when fading is complete\n}\n```", "```html\nthis.callbacks = {\n    'onCanPlay': function(){ },\n    'onSeeking': function(){},\n    'onSeeked': function(){},\n    'onEnded': function(){},\n    'onPlay': function(){},\n    'onPause': function(){},\n    'onLoadedData': function(){},\n    'onLoadedMetaData': function(){},\n    'onTimeUpdate': function(){},\n    'onFullScreen': function(){}\n};\n```", "```html\nvar _defaults = {\n    'element': 'video',\n    'name': 'Video',\n    'callbacks': {\n        'onCanPlay': function(){ },\n        'onSeeking': function(){},\n        'onSeeked': function(){},\n        'onEnded': function(){},\n        'onPlay': function(){},\n        'onPause': function(){},\n        'onLoadedData': function(){},\n        'onLoadedMetaData': function(){},\n        'onTimeUpdate': function(){},\n        'onFullScreen': function(){}\n    }\n};\n```", "```html\nthis.callbacks = this.options.callbacks;\n```", "```html\nfunction onCanPlay(e, ele) {\n    this.callbacks.onCanPlay();\n}\n\nfunction onSeeking(e, ele) {\n\n    this.callbacks.onSeeking();\n}\n\nfunction onSeeked(e, ele) {\n\n    this.callbacks.onSeeked();\n}\n\nfunction onEnded(e, ele) {\n\n    this.callbacks.onEnded();\n}\n\nfunction onPlay(e, ele) {\n\n    this.callbacks.onPlay();\n}\n\nfunction onPause(e, ele) {\n\n    this.callbacks.onPause();\n}\n\nfunction onLoadedData(e, ele) {\n    this.callbacks.onLoadedData();\n}\n\nfunction onLoadedMetaData(e, ele) {\n    this.callbacks.onLoadedMetaData();\n}\n\nfunction onTimeUpdate(e, ele) {\n    this.callbacks.onTimeUpdate();\n}\n```", "```html\nfunction attachEvents() {\n        var that = this;\n        this.element.addEventListener('canplay', function(e){ onCanPlay.call(that, e, this);  });\n        this.element.addEventListener('seeking', function(e){ onSeeking.call(that, e, this); });\n        this.element.addEventListener('seeked', function(e){ onSeeked.call(that, e, this);  });\n        this.element.addEventListener('ended', function(e){ onEnded.call(that, e, this);  });\n        this.element.addEventListener('play', function(e){ onPlay.call(that, e, this);  });\n        this.element.addEventListener('pause', function(e){ onPause.call(that, e, this);  });\n        this.element.addEventListener('loadeddata', function(e){ onLoadedData.call(that, e, this);  });\n        this.element.addEventListener('loadedmetadata', function(e){ onLoadedMetaData.call(that, e, this);  });\n        this.element.addEventListener('timeupdate', function(e){ onTimeUpdate.call(that, e, this);  });\n    }\n```", "```html\nvar App = window.App || {};\n\nApp.Video = (function(window, document, $){\n    'use strict';\n\n    var _defaults = { ... };\n\n    // Constructor\n    function Video(options) {\n        this.options = $.extend({}, _defaults, options);\n\n        this.element = options.element;\n        this.$element = $(this.options.element);\n\n        this.callbacks = this.options.callbacks;\n\n        attachEvents.call(this);\n    }\n\n    // Private Methods\n    function attachEvents() { ... }\n\n    // Event Handlers\n    function onCanPlay(e, ele) { ... }\n    function onSeeking(e, ele) { ... }\n    function onSeeked(e, ele) { ... }\n    function onEnded(e, ele) { ... }\n    function onPlay(e, ele) { ... }\n    function onPause(e, ele) { ... }\n    function onLoadedData(e, ele) { ... }\n    function onLoadedMetaData(e, ele) { ... }\n    function onTimeUpdate(e, ele) { ... }\n\n    // Public Methods\n    Video.prototype.getDefaults = function() { ... };\n    Video.prototype.toString = function() { ... };\n    Video.prototype.play = function() { ... }\n    Video.prototype.pause = function() { ... }\n    Video.prototype.stop = function() { ... }\n    Video.prototype.mute = function() { ... };\n    Video.prototype.unmute = function() { ... };\n    Video.prototype.fullscreen = function() { ... }\n\n    return Video;\n\n}(window, document, Zepto));\n```", "```html\nnew App.Video({\n    'element': document.getElementsByTagName('video')[0],\n    'callbacks': {\n        'onCanPlay': function(){ console.log('onCanPlay'); },\n        'onSeeking': function(){ console.log('onSeeking'); },\n        'onSeeked': function(){ console.log('onSeeked'); },\n        'onEnded': function(){ console.log('onEnded'); },\n        'onPlay': function(){ console.log('onPlay'); },\n        'onPause': function(){ console.log('onPause'); },\n        'onLoadedData': function(){ console.log('onLoadedData'); },\n        'onLoadedMetaData': function(){ console.log('onLoadedMetaData'); },\n        'onTimeUpdate': function(){ console.log('onTimeUpdate'); },\n        'onFullScreen': function(){ console.log('onFullScreen'); }\n    }\n});\n```", "```html\nif(document.querySelector('video') !== 'null') {\n    new App.Video({\n        'element': document.getElementsByTagName('video')[0],\n        'callbacks': {\n            ...\n        }\n    });\n}\n```", "```html\n<div class=\"video-container\">\n    <video src=\"img/testvid.mp4\" controls preload>\n        <p>Video is not supported in your browser.</p>\n    </video>\n</div>\n```", "```html\nvideo {\n    display: block;\n    width: 100%;\n    max-width: 640px;\n    margin: 0 auto;\n}\n\n.video-container {\n    width: 100%;\n}\n```", "```html\n<div class=\"video-controls\">\n    <div class=\"vc-state\">\n        <a class=\"vc-play vc-state-play\" href=\"#play\">Play</a>\n        <a class=\"vc-pause vc-state-pause\" href=\"#pause\">Pause</a>\n    </div>\n    <div class=\"vc-track\">\n        <div class=\"vc-progress vc-track-progress\"></div>\n        <div class=\"vc-handle vc-track-handle\"></div>\n    </div>\n    <div class=\"vc-volume\">\n        <a class=\"vc-unmute vc-volume-unmute\" href=\"#volume\">Volume On</a>\n        <a class=\"vc-mute vc-volume-mute\" href=\"#volume\">Volume Off</a>\n    </div>\n    <a class=\"vc-fullscreen\" href=\"#fullscreen\">Fullscreen</a>\n</div>\n```", "```html\n.video-controls {\n    margin: 12px auto;\n    width: 100%;\n    text-align: center;\n}\n\n.video-controls .vc-state,\n.video-controls .vc-track,\n.video-controls .vc-volume,\n.video-controls .vc-fullscreen {\n    display: inline-block;\n    margin-right: 10px;\n}\n\n.video-controls .vc-fullscreen {\n    margin-right: 0;\n}\n\n.video-controls .vc-state-pause,\n.video-controls .vc-volume-unmute {\n    display: none;\n}\n```", "```html\nvar App = window.App || {};\n\nApp.VideoControls = (function(window, document, $){\n    'use strict';\n\n    var _defaults = { };\n\n    function VideoControls(ele, options) {\n        this.options = $.extend({}, _defaults, options);\n        this.ele = ele;\n        this.$ele = $(ele);\n\n        this.init();\n    }\n    return VideoControls;\n\n}(window, document, Zepto));\n```", "```html\nvar _defaults = {\n    // Supported Features\n    'features': ['play', 'pause', 'fullscreen', 'mute', 'unmute', 'playpause'],\n    // State of the controls\n    'state': 'paused',\n    // State of the sound\n    'sound': 'unmuted',\n    // Customizable Classes or Classes associated with Elements\n    'classes': {\n        'state': {\n            'holder': 'vc-state',\n            'play': 'vc-state-play',\n            'pause': 'vc-state-pause'\n        },\n        'track': {\n            'holder': 'vc-track',\n            'progress': 'vc-track-progress',\n            'handle': 'vc-track-handle'\n        },\n        'volume': {\n            'holder': 'vc-volume',\n            'mute': 'vc-volume-mute',\n            'unmute': 'vc-volume-unmute'\n        }\n    },\n    // Customizable Events or Dispatched Events\n    'events': {\n        'onPlay': 'videocontrols:play',\n        'onPause': 'videocontrols:pause',\n        'onFullScreen': 'videocontrols:fullscreen',\n        'onMute': 'videocontrols:mute',\n        'onUnmute': 'videocontrols:onUnmute'\n    }\n};\n```", "```html\nif(document.querySelector('video') !== 'null') {\n    new App.Video({\n        'element': document.getElementsByTagName('video')[0],\n        'callbacks': {\n            ...\n        }\n    });\n}\n```", "```html\nVideoController.prototype.initControls = function() {\n    // Remove Default control\n    // Comment this out if you want native controls\n    $(videoEle).removeAttr('controls');\n\n    controlsEle = document.querySelector('.video-controls');\n\n    controls = new App.VideoControls(controlsEle);\n\n    $(controlsEle).\n         on('videocontrols:play', function(){\n            video.play();\n        }).\n        on('videocontrols:pause', function(){\n            video.pause();\n        }).\n        on('videocontrols:fullscreen', function(){\n            video.fullscreen();\n        }).\n        on('videocontrols:mute', function(){\n            video.mute();\n        }).\n        on('videocontrols:onUnmute', function(){\n            video.unmute();\n        });\n\n    return this;\n}\n```", "```html\n<script>\n    new App.VideoController(true);\n</script>\n```"]