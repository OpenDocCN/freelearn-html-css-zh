["```html\ninterface Geolocation { \n    void getCurrentPosition(PositionCallback successCallback,\n            optional PositionErrorCallback errorCallback,\n            optional PositionOptions options);\n\n    long watchPosition(PositionCallback successCallback,\n            optional PositionErrorCallback errorCallback,\n            optional PositionOptions options);\n\n    void clearWatch(long watchId);\n};\n```", "```html\ninterface PositionOptions {\n    attribute boolean enableHighAccuracy;\n    attribute long timeout;\n    attribute long maximumAge;\n};\n```", "```html\nvar positionOptions = {\n    'enableHighAccuracy': false,\n    'timeout': Infinity,\n    'maximumAge': 0\n};\n```", "```html\nvar positionOptions = {\n    'enableHighAccuracy': false,\n    'timeout': Infinity,\n    'maximumAge': 0\n};\n\nfunction successCallback(position) {}\n\nfunction errorCallback(positionError) {}\n\n// Get the current position\nnavigator.geolocation.getCurrentPosition(successCallback, errorCallback, positionOptions);\n\n// Watch for position changes\nnavigator.geolocation.watchPosition(successCallback, errorCallback, positionOptions);\n```", "```html\ninterface Position {\n    readonly attribute Coordinates coords;\n    readonly attribute DOMTimeStamp timestamp;\n};\n```", "```html\nfunction successCallback(position) {\n    console.log(position.coords);\n    console.log(position.timestamp);\n}\n```", "```html\nfunction successCallback(position) {\n    console.log(position.coords);\n    console.log(position.coords.lattitude);\n    console.log(position.coords.longitude);\n    console.log(position.timestamp);\n}\n```", "```html\ninterface PositionError {\n    const unsigned short PERMISSION_DENIED = 1;\n    const unsigned short POSITION_UNAVAILABLE = 2;\n    const unsigned short TIMEOUT = 3;\n    readonly attribute unsigned short code;\n    readonly attribute DOMString message;\n};\n```", "```html\nfunction errorCallback(positionError) {\n    if (positionError.code === 3) {\n        console.log(\"A Timeout has occurred\");\n        console.log(\"Additional Details: \" + positionError.message);\n    }\n}\n```", "```html\n<!DOCTYPE html>\n<html class=\"no-js\">\n<head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"HandheldFriendly\" content=\"True\">\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <!-- IOS THUMBS -->\n\n    <!-- APPLE META TAGS -->\n\n    <link rel=\"stylesheet\" href=\"../css/normalize.css\">\n    <link rel=\"stylesheet\" href=\"../css/main.css\">\n    <link rel=\"stylesheet\" href=\"../css/location.css\">\n    <script src=\"img/modernizr-2.6.1.min.js\"></script>\n</head>\n    <body>\n        <!-- Add your site or application content here -->\n        <div class=\"site-wrapper\">\n            <header>\n                <hgroup>\n                    <h1>iPhone Web Application Development</h1>\n                    <h2>Location Aware Apps</h2>\n                </hgroup>\n                <nav>\n                    <select>\n                        <!-- OPTIONS HERE -->\n                    </select>\n                </nav>\n            </header>\n            <footer>\n                <p>iPhone Web Application Development &copy; 2013</p>\n            </footer>\n        </div>\n\n        <script src=\"img/zepto.min.js\"></script>\n        <script src=\"img/helper.js\"></script>\n        <!-- BEGIN: Our Framework -->\n        <script src=\"img/App.js\"></script>\n        <script src=\"img/App.Nav.js\"></script>\n        <script src=\"img/App.Location.js\"></script>\n        <!-- END: Our Framework -->\n        <script src=\"img/main.js\"></script>\n        <script> new App.Location({ 'element': document.body }); </script> \n    </body>\n</html>\n```", "```html\n<!DOCTYPE html>\n<html class=\"no-js\">\n<head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"HandheldFriendly\" content=\"True\">\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n\n    <!-- IOS THUMBS -->\n\n    <!-- APPLE META TAGS -->\n\n    <link rel=\"stylesheet\" href=\"../css/normalize.css\">\n    <link rel=\"stylesheet\" href=\"../css/main.css\">\n    <link rel=\"stylesheet\" href=\"../css/location.css\">\n    <script src=\"img/modernizr-2.6.1.min.js\"></script>\n</head>\n    <body>\n        <!-- Add your site or application content here -->\n        <div class=\"site-wrapper\">\n            <header>\n                <hgroup>\n                    <h1>iPhone Web Application Development</h1>\n                    <h2>Location Aware Apps</h2>\n                </hgroup>\n                <nav>\n                    <select>\n                        <!-- OPTIONS HERE -->\n                    </select>\n                </nav>\n            </header>\n            <div id=\"map_canvas\"></div>\n            <footer>\n                <p>iPhone Web Application Development &copy; 2013</p>\n            </footer>\n        </div>\n\n        <script src=\"img/js?key=YOUR_API_KEY&sensor=SET_TO_TRUE_OR_FALSE\"></script>\n        <script src=\"img/zepto.min.js\"></script>\n        <script src=\"img/helper.js\"></script>\n  <script src=\"img/Geolocation.js\"></script>\n        <!-- BEGIN: Our Framework -->\n        <script src=\"img/App.js\"></script>\n        <script src=\"img/App.Nav.js\"></script>\n        <script src=\"img/App.Location.js\"></script>\n        <!-- END: Our Framework -->\n        <script src=\"img/main.js\"></script>\n        <script> new App.Location({ 'element': document.body }); </script> \n    </body>\n</html>\n```", "```html\n(function($){\n\n    var _self, _defaults, _callbacks;\n\n    // Default options\n    _defaults = {};\n\n    // Stores custom callbacks\n    _callbacks = {};\n\n    /**\n        @constructor\n    */\n    function Geolocation(options) {\n        this.options = $.extend({}, _defaults, options);\n\n        _self = this;\n    }\n\n    Geolocation.prototype.toString = function() {\n        return \"[object \" + this.constructor.name + \"]\";\n    }\n\n    // Exposess the Geolocation Function\n    window.Geolocation = new Geolocation();\n\n}(Zepto));\n```", "```html\nwindow.Geolocation = new Geolocation();\n```", "```html\n    // Default options\n    _defaults = {\n        'currentPositionOptions': {\n            'enableHighAccuracy': false,\n            'timeout': 9000,\n            'maximumAge': Infinity\n        },\n        'props': {}\n    };\n```", "```html\n    // Stores custom callbacks\n    _callbacks = {\n        'getCurrentPositionCallback': function(){}\n    };\n```", "```html\n    /**\n        @constructor\n    */\n    function Geolocation(options) {\n        this.options = $.extend({}, _defaults, options);\n\n        if(navigator.geolocation) {\n            this.geolocation = navigator.geolocation;\n        }\n\n        _self = this;\n        _self.props = this.options.props;\n    }\n```", "```html\nGeolocation.prototype.getCurrentPosition = function(callback) {\n    if (typeof callback !== 'undefined') {\n        _callbacks.getCurrentPositionCallback = callback;\n    }\n\n    if (typeof this.geolocation !== 'undefined') {\n    this.geolocation.getCurrentPosition(currentPositionSuccess, currentPositionError, _self.options.currentPositionOptions);\n\n        return this;\n    }\n\n    return false;\n};\n```", "```html\nfunction currentPositionSuccess(position) {\n    _self.props.coords = position.coords;\n    _self.props.timestamp = position.timestamp;\n\n    _callbacks.getCurrentPositionCallback.call(_self, _self.props);\n}\n```", "```html\n    function currentPositionError(positionError) {\n        _callbacks.getCurrentPositionCallback.call(_self, positionError);\n    }\n```", "```html\nvar App = window.App || {};\n\nApp.Location = (function(window, document, $){\n    'use strict';\n\n    var _defaults = {\n        'name': 'Location'\n    }, _self;\n\n    function Location(options) {\n        this.options = $.extend({}, _defaults, options);\n\n        this.$element = $(this.options.element);\n    }\n\n    Location.prototype.getDefaults = function() {\n        return _defaults;\n    };\n\n    Location.prototype.toString = function() {\n        return '[ ' + (this.options.name || 'Location') + ' ]';\n    };\n\n    Location.prototype.init = function() {\n        // Initialization Code\n\n        return this;\n    };\n\n    return Location;\n\n}(window, document, Zepto));\n```", "```html\nfunction Location(options) {\n    this.options = $.extend({}, _defaults, options);\n\n    this.$element = $(this.options.element);\n\n    // Cache the map element\n    this.$cache = {\n        'map': this.$element.find('#map_canvas')\n    };\n\n    _self = this;\n\n    this.init();\n}\n```", "```html\nLocation.prototype.init = function() {\n    // Initialization Code\n    Geolocation.getCurrentPosition(function(args){\n        if(args.toString() !== '[object PositionError]') {\n            _self.initGoogleMaps();\n        } else {\n            console.log(\"An ERROR has occurred: \" + args.message);\n        }\n    });\n\n    return this;\n};\n```", "```html\nLocation.prototype.initGoogleMaps = function() {\n    this.latlng = new google.maps.LatLng(Geolocation.props.coords.latitude, Geolocation.props.coords.longitude);\n\n    this.options.mapOptions.center = this.latlng;\n\n    this.map = new google.maps.Map(this.$cache.map[0], this.options.mapOptions);\n\n    this.marker = new google.maps.Marker({\n        'position': this.latlng,\n        'map': this.map,\n        'title': 'My Location'\n    });\n\n    this.infowindow = new google.maps.InfoWindow({\n        'map': this.map,\n        'position': this.latlng,\n        'content': 'My Location!',\n        'maxWidth': '140'\n    });\n```", "```html\nvar _defaults = {\n    'name': 'Location',\n    'mapOptions': {\n        'center': '',\n        'zoom': 8,\n        'mapTypeId': google.maps.MapTypeId.ROADMAP,\n        'mapTypeControl': true,\n        'mapTypeControlOptions': {\n            'style': google.maps.MapTypeControlStyle.DROPDOWN_MENU\n        },\n        'draggable': true,\n        'scaleControl': false,\n        'zoomControl': true,\n        'zoomControlOptions': {\n            'style': google.maps.ZoomControlStyle.SMALL,\n            'position': google.maps.ControlPosition.TOP_LEFT\n        },\n        'streetViewControl': false\n    }\n}, _self;\n```", "```html\nthis.options.mapOptions.center = this.latlng;\n```", "```html\nthis.map = new google.maps.Map(this.$cache.map[0], this.options.mapOptions);\n```"]