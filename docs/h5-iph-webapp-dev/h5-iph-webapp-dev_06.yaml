- en: Chapter 6. Location-aware Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。位置感知应用程序
- en: Geolocation is a widely requested feature in today's applications, giving accurate
    location-specific information to the user. In this chapter, we'll review the Geolocation
    API in the HTML5 specification. With this knowledge, we'll go ahead and build
    a wrapper that allows us to easily tap into this feature. Once we have a thorough
    understanding of how we can retrieve the user's location, we put our newly found
    knowledge to use with a simple application that uses the Google Maps API. At the
    end of this chapter you should have a thorough understanding of the Geolocation
    specification, have a simple example of its implementation, and as a bonus you
    should have gained some experience in using the Google Maps API. So let's start
    out by exploring the specification.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 地理位置是当今应用程序中广泛请求的功能，为用户提供准确的位置特定信息。在本章中，我们将回顾HTML5规范中的地理位置API。有了这些知识，我们将继续构建一个包装器，使我们能够轻松地利用这一功能。一旦我们彻底了解了如何获取用户的位置，我们将利用一个简单的应用程序来使用我们新发现的知识，该应用程序使用谷歌地图API。在本章结束时，您应该对地理位置规范有透彻的了解，有一个其实现的简单示例，并且作为奖励，您应该获得了使用谷歌地图API的一些经验。因此，让我们开始探索规范。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Geolocation specification
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理位置规范
- en: Retrieving the user's current location
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索用户当前位置
- en: Watching the user's location
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视用户的位置
- en: Handling geolocation errors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理地理位置错误
- en: Google Maps API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌地图API
- en: Tying Google Maps with geolocation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将谷歌地图与地理位置联系起来
- en: Customizing Google Maps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义谷歌地图
- en: Geolocation specification
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理位置规范
- en: Location-based services have been around for quite a while and have evolved
    over time. In essence these services strive to provide features that allow the
    use of time and location in various types of programs. However, until now there
    has not been a useful set of tools for the frontend. Therefore, the **W3C** (**World
    Wide Web Consortium**), has tried to standardize the API that retrieves geographical
    location from a client-side device, whether that is your desktop computer, mobile
    phone, or tablet.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基于位置的服务已经存在了相当长的时间，并且随着时间的推移而发展。实质上，这些服务努力提供功能，允许在各种类型的程序中使用时间和位置。然而，直到现在，前端还没有一个有用的工具集。因此，**W3C**（**万维网联盟**）试图标准化从客户端设备检索地理位置的API，无论是您的台式电脑、手机还是平板电脑。
- en: Implementation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: The Geolocation API defines a high-level interface to location information associated
    only with the device hosting the implementation, such as latitude and longitude.
    The API itself is agnostic of the underlying location information sources.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 地理位置API定义了与托管实现的设备相关联的位置信息的高级接口，例如纬度和经度。API本身对底层位置信息源是不可知的。
- en: (As mentioned at [http://dev.w3.org/geo/api/spec-source.html#introduction](http://dev.w3.org/geo/api/spec-source.html#introduction).)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: （如[http://dev.w3.org/geo/api/spec-source.html#introduction](http://dev.w3.org/geo/api/spec-source.html#introduction)所述。）
- en: Common ways that browsers have implemented the Geolocation API involve **Global
    Positioning Systems** (**GPS**), IP addresses, WIFI and Bluetooth MAC addresses,
    and basic user input. Due to the various ways these technologies work and the
    varying degrees browser vendors choose to implement the specification, there is
    no guarantee that this API will return the location of the user or device. Therefore
    it is up to you, as the developer, to make sure your users are also aware of this
    limitation and that reasonable expectations are explained to all involved.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器实现地理位置API的常见方式涉及**全球定位系统**（**GPS**）、IP地址、WIFI和蓝牙MAC地址以及基本用户输入。由于这些技术工作的方式各不相同，以及浏览器供应商选择实施规范的程度不同，无法保证此API将返回用户或设备的位置。因此，作为开发人员，您需要确保用户也意识到这一限制，并向所有相关方解释合理的期望。
- en: Scope, security, and privacy
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围、安全性和隐私
- en: When it comes to implementing Geolocation into our apps the only part we'll
    need to worry about is the scripts. There is no need to provide any sort of markup
    and there's no need to query or tap some external resource or API. The implementation
    of Geolocation is strictly on the scripting side and is directly associated with
    the device in use. It is also useful to know that the position is delivered in
    terms of World Geodetic System coordinates or latitude and longitude.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现地理位置到我们的应用程序时，我们唯一需要担心的是脚本。无需提供任何标记，也无需查询或点击某些外部资源或API。地理位置的实现严格限于脚本方面，并直接与正在使用的设备相关联。还有一点需要知道的是，位置是以世界大地测量系统坐标或纬度和经度的形式提供的。
- en: 'Security and privacy concerns must also be considered when exposing a user''s
    location. From the security methods used to retrieve and store this information
    to how it is distributed among other parties, each device implementing it must
    provide a mechanism that protects the user''s privacy. Therefore, the following
    considerations are required by the W3C specification:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在暴露用户位置时，还必须考虑安全性和隐私问题。从用于检索和存储此信息的安全方法到如何在其他方之间分发它，每个实施它的设备都必须提供一种保护用户隐私的机制。因此，W3C规范要求考虑以下问题：
- en: Permission from the user is required to send the location information.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要用户的许可才能发送位置信息。
- en: Location information must only be requested when necessary.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在必要时才能请求位置信息。
- en: The user must approve of retransmitting location information.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须批准重新传输位置信息。
- en: The party holding this information must disclose to the user that they are collecting
    location data, including its purpose, security, accessibility, sharing (if the
    data will be shared among other parties), and the length of time such data will
    be stored.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持有此信息的一方必须向用户披露他们正在收集位置数据，包括其目的、安全性、可访问性、共享（如果数据将与其他方共享）以及此类数据将被存储的时间长度。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that applications written for mobile Safari do not have direct
    access to the device. They can only query the browser to access the device on
    their behalf. Therefore, your application is requesting the browser for specific
    information and the browser does the work for you, but you never have one-on-one
    communication with the device itself.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，为移动 Safari 编写的应用程序无法直接访问设备。它们只能查询浏览器代表它们访问设备。因此，您的应用程序正在请求浏览器获取特定信息，浏览器会为您完成工作，但您永远不会与设备本身进行一对一的通信。
- en: 'Overall, the specification takes into account the concerns that arise with
    sharing personal information, such as Geolocation, with other parties. However,
    these considerations do not take into account the complexity that might arise
    when a user inadvertently grants permission or if the users decides to change
    their mind. For these reasons, the specification does make the following recommendation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，该规范考虑了与其他方分享个人信息（如地理位置）时出现的问题。然而，这些考虑并未考虑到当用户无意中授予权限或用户决定改变主意时可能出现的复杂性。因此，该规范提出了以下建议：
- en: Mitigation and in-depth defensive measures are an implementation responsibility
    and not prescribed by this specification. However, in designing these measures,
    implementers are advised to enable user awareness of location sharing, and to
    provide easy access to interfaces that enable revocation of permissions.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 缓解和深入的防御措施是实施责任，而不是由本规范规定。然而，在设计这些措施时，建议实施者启用用户对位置共享的意识，并提供易于访问的接口，以启用撤销权限。
- en: (As mentioned at [http://www.w3.org/TR/geolocation-API/#implementation_considerations](http://www.w3.org/TR/geolocation-API/#implementation_considerations).)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （如在 [http://www.w3.org/TR/geolocation-API/#implementation_considerations](http://www.w3.org/TR/geolocation-API/#implementation_considerations)
    中提到的。）
- en: With these concerns and considerations in mind, we now briefly dive into describing
    API. In the following section, we'll look at how API is built and specifically
    look at parts that will be utilized in the application built in this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些问题和考虑，我们现在简要地描述 API。在接下来的部分中，我们将看看 API 是如何构建的，特别是看看在本章构建的应用程序中将使用的部分。
- en: API descriptions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 描述
- en: At this point of the chapter you may be wondering why we haven't looked at the
    code yet, and although that is a valid concern, my goal here is to help you understand
    the Geolocation API thoroughly and to guide you through the actual W3C specification.
    So in this chapter we look at four interfaces or exposed behaviors that define
    the `Geolocation` specification, including the `Geolocation`, `PositionOptions`,
    `Position`, `Coordinates` and `PositionError` interfaces. If you get confused
    by any of the information provided here, there's no need to worry. Consider this
    section more of reference material that can help you increase your knowledge on
    the subject.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，您可能会想知道为什么我们还没有看代码，尽管这是一个合理的担忧，但我的目标是帮助您彻底理解 Geolocation API，并指导您了解实际的
    W3C 规范。因此，在本章中，我们将查看定义 `Geolocation` 规范的四个接口或公开行为，包括 `Geolocation`、`PositionOptions`、`Position`、`Coordinates`
    和 `PositionError` 接口。如果您对此提供的任何信息感到困惑，不用担心。请将本节视为可以帮助您增加对该主题的了解的参考资料。
- en: The Geolocation interface
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Geolocation 接口
- en: 'The Geolocation object is used to determine the location of the device. When
    we instantiate the Geolocation object a user-agent algorithm is used to determine
    the location, then a `position` object is created and populated with the data.
    If we look at the W3C specification, the Geolocation is defined as this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Geolocation 对象用于确定设备的位置。当我们实例化 Geolocation 对象时，会使用用户代理算法来确定位置，然后创建并填充一个 `position`
    对象。如果我们查看 W3C 规范，Geolocation 被定义为：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#geolocation](http://www.w3.org/TR/geolocation-API/#geolocation).)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: （如在 [http://www.w3.org/TR/geolocation-API/#geolocation](http://www.w3.org/TR/geolocation-API/#geolocation)
    中所见。）
- en: 'The previous code is not JavaScript and is a description of the API or **Interface
    Definition Language** (**IDL**). If its confusing, don''t worry, I felt the same
    way when I first looked at a specification page. However, what you are looking
    at here is the description of the Geolocation object. When you read the previous
    code, you should gather the following information:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码不是 JavaScript，而是 API 或 **接口定义语言** (**IDL**) 的描述。如果它令人困惑，不用担心，当我第一次看规范页面时，我也有同样的感觉。然而，您在这里看到的是
    Geolocation 对象的描述。当您阅读先前的代码时，您应该收集以下信息：
- en: 'There are three methods:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法：
- en: '`getCurrentPosition`, which accepts three parameters, two of which are optional'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCurrentPosition`，接受三个参数，其中两个是可选的'
- en: '`watchPosition`, which accepts three parameters, two of which are optional'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`watchPosition`，接受三个参数，其中两个是可选的'
- en: '`clearWatch`, which accepts one parameter'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clearWatch`，接受一个参数'
- en: You should now know that there are three methods associated with the Geolocation
    object and each has a specific purpose as described by the function name. So let's
    go over these three methods, beginning with `getCurrentPosition`, which as you
    may have guessed obtains the current location of the device or attempts to.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该知道与 Geolocation 对象关联的有三个方法，每个方法都有一个特定的目的，如函数名称所述。因此，让我们来看看这三种方法，从 `getCurrentPosition`
    开始，您可能已经猜到它获取设备的当前位置或尝试获取。
- en: The getCurrentPosition method
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: getCurrentPosition 方法
- en: As described earlier, this method accepts three parameters, two of which are
    optional. The first parameter should be a `callback` method for a successful request.
    The second and third parameters are completely optional. The second parameter,
    if defined, is another `callback` method for when an error occurs. The last parameter
    is an `options` object as defined by the `PositionsOptions` interface.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，此方法接受三个参数，其中两个是可选的。第一个参数应该是一个成功请求的 `callback` 方法。第二个和第三个参数是完全可选的。如果定义了第二个参数，那么它是另一个当发生错误时的
    `callback` 方法。最后一个参数是由 `PositionsOptions` 接口定义的 `options` 对象。
- en: The watchPosition method
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: watchPosition 方法
- en: The `watchPosition` method also accepts three parameters, which are the same
    as the `getCurrentPosition` method parameters. The only difference here is that
    this method will continuously fire the `successCallback`, or the first parameter,
    until the `clearWatch` method is called. Keep in mind that the `successCallback`
    will only fire if the position has changed and is thus not dependent on any time
    option. This method also returns a long value that defines the watch operation—this
    is what is used to clear it with the `clearWatch` method.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`watchPosition`方法也接受三个参数，与`getCurrentPosition`方法的参数相同。唯一的区别是，这个方法将持续触发`successCallback`，或者第一个参数，直到调用`clearWatch`方法。请记住，只有在位置发生变化时，`successCallback`才会触发，因此不依赖于任何时间选项。此方法还返回一个长值，用于定义观察操作，这是用`clearWatch`方法清除的。'
- en: The clearWatch method
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: clearWatch方法
- en: As we've already discussed, `clearWatch` is used to stop the process set by
    `watchPosition`. To use this method we must use the long value returned by `watchPosition`
    and send it in as a parameter to `clearWatch`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经讨论过的，`clearWatch`用于停止`watchPosition`设置的过程。要使用这个方法，我们必须使用`watchPosition`返回的长值，并将其作为参数发送给`clearWatch`。
- en: The PositionOptions interface
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PositionOptions接口
- en: 'We have seen that the `PositionOptions` object is used to pass an optional
    parameter to both the `getCurrentPosition` and `watchPosition` methods. This object
    is defined by W3C as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到`PositionOptions`对象用于向`getCurrentPosition`和`watchPosition`方法传递可选参数。这个对象由W3C定义如下：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#position-options](http://www.w3.org/TR/geolocation-API/#position-options).)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: （见[http://www.w3.org/TR/geolocation-API/#position-options](http://www.w3.org/TR/geolocation-API/#position-options)。）
- en: 'What we should take from this is that we can create an object with the key/value
    pairs for `enableHighAccuracy`, `timeout`, and `maximumAge`. This object would
    look like the following in our JavaScript code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们应该得出的结论是，我们可以创建一个包含`enableHighAccuracy`、`timeout`和`maximumAge`键/值对的对象。这个对象在我们的JavaScript代码中看起来像下面这样：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But what do these values mean? Well, lucky for us this is all defined in the
    specification. Don't worry though, here's a simple explanation for each of these
    options.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这些值代表什么呢？幸运的是，这一切都在规范中定义了。不过，别担心，这里有每个选项的简单解释。
- en: The enableHighAccuracy option
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: enableHighAccuracy选项
- en: This option basically hints to the device that the application would like to
    receive the best possible results. The default is set to `false`, because if set
    to `true` it may result in slower response times and/or increased power consumption.
    Keep in mind that the user might deny this feature and that the device may not
    be able to provide more accurate results.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项基本上是向设备提示应用程序希望接收到最好的可能结果。默认设置为`false`，因为如果设置为`true`，可能会导致响应时间变慢和/或增加功耗。请记住，用户可能会拒绝此功能，设备可能无法提供更准确的结果。
- en: The timeout option
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 超时选项
- en: Timeout is defined as the amount of time, in milliseconds, to wait until the
    successCallback is invoked. If the amount of time to get location data exceeds
    this value then the error callback is invoked and a `PositionError` code of `TIMEOUT`
    is sent. By default, the value is set to `Infinity`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 超时被定义为等待成功回调被调用的时间，以毫秒为单位。如果获取位置数据的时间超过这个值，那么将调用错误回调，并发送`PositionError`代码`TIMEOUT`。默认情况下，该值设置为`Infinity`。
- en: The maximumAge option
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最大年龄选项
- en: The maximum age option is in reference to using a cached position whose age
    is not greater than the amount set by this option. By default this attribute is
    set to `0` and therefore an attempt to acquire a new position object is made each
    time. If this option is set to `Infinity` then the cached position is returned
    each time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最大年龄选项是指使用缓存位置的年龄不大于此选项设置的时间。默认情况下，此属性设置为`0`，因此每次都会尝试获取新的位置对象。如果此选项设置为`Infinity`，则每次都返回缓存位置。
- en: 'Now that we understand the options, we could pass this object as the third
    parameter to the `getCurrentPosition` and `watchPosition` methods. A simple implementation
    of the API would look something like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了这些选项，我们可以将这个对象作为第三个参数传递给`getCurrentPosition`和`watchPosition`方法。API的一个简单实现看起来可能是这样的：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we know how to customize our calls to the Geolocation API, but what does
    the data look like when a success call is made? Or, what does an error return
    back? These are extremely useful to know in order to develop a good wrapper around
    the Geolocation API. So let's take a look at the coordinates and position error
    interfaces.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何自定义对地理位置API的调用，但是当成功调用时，数据是什么样子的呢？或者，错误返回是什么样子的？了解这些对于开发地理位置API的良好封装非常有用。所以让我们来看一下坐标和位置错误接口。
- en: The Position interface
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置接口
- en: 'The Position interface is just a container for the information returned by
    device implementation of the Geolocation API. It returns a `Coordinates` object
    and `Timestamp`. This is described in the W3C specification as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 位置接口只是设备实现地理位置API返回的信息的容器。它返回一个`Coordinates`对象和`Timestamp`。这在W3C规范中描述如下：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#position](http://www.w3.org/TR/geolocation-API/#position).)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: （见[http://www.w3.org/TR/geolocation-API/#position](http://www.w3.org/TR/geolocation-API/#position)。）
- en: 'In context of what we have discussed up to this point, the position interface
    comes into play on the `successCallback` of the `getCurrentPosition` method. If
    you recall, this method accepts one parameter called `options` that is of the
    `position` object defined earlier. In practice, if we wanted to log out the coordinates
    and timestamp we could do the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们到目前为止讨论的内容中，位置接口在`getCurrentPosition`方法的`successCallback`中发挥作用。如果你还记得，这个方法接受一个名为`options`的参数，它是之前定义的`position`对象。实际上，如果我们想要记录坐标和时间戳，我们可以这样做：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The timestamp returned is represented as `DOMTimeStamp` and the `coords` object
    contains the geographic coordinates with additional information, which is defined
    by the `Coordinates` interface.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的时间戳表示为`DOMTimeStamp`，`coords`对象包含地理坐标和其他信息，由`Coordinates`接口定义。
- en: The Coordinates interface
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Coordinates接口
- en: 'As we have discussed previously, the `successCallback` for `getCurrentPosition`
    and `watchPosition` returns a `position` object that contains the `Coordinates`
    object. This `Coordinates` object contains multiple attributes, which are described
    in the following table:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论过的，`getCurrentPosition`和`watchPosition`的`successCallback`返回一个包含`Coordinates`对象的`position`对象。这个`Coordinates`对象包含多个属性，这些属性在下表中描述：
- en: '| Attribute | Description |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `latitude` | Geographic coordinate in decimal degrees. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `latitude` | 十进制度的地理坐标。'
- en: '| `longitude` | Geographic coordinate in decimal degrees. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `longitude` | 十进制度的地理坐标。'
- en: '| `altitude` | Height of the position in meters. Null if not present. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `altitude` | 位置的高度，以米为单位。如果不存在则为null。'
- en: '| `accuracy` | Accuracy of longitude and latitude in meters. Null if not present.
    Must be a non-negative real number. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `accuracy` | 经度和纬度的精度，以米为单位。如果不存在则为null。必须是非负实数。'
- en: '| `altitudeAccuracy` | Accuracy of altitude in meters. Null if not present.
    Must be a non-negative real number. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `altitudeAccuracy` | 海拔精度，以米为单位。如果不存在则为null。必须是非负实数。'
- en: '| `heading` | Direction of travel in degrees (0° ≤ heading ≤ 360°) clockwise.
    Null if not present. If stationary value must be NaN. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `heading` | 行进方向，以度为单位（0° ≤ heading ≤ 360°），顺时针方向。如果不存在则为null。如果静止则值必须为NaN。'
- en: '| `speed` | Magnitude of current velocity in meters per second. Null if not
    present. Must be a non-negative real number. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `speed` | 当前速度的大小，以米/秒为单位。如果不存在则为null。必须是非负实数。'
- en: (Seen at [http://www.w3.org/TR/geolocation-API/#coordinates](http://www.w3.org/TR/geolocation-API/#coordinates).)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: （见[http://www.w3.org/TR/geolocation-API/#coordinates](http://www.w3.org/TR/geolocation-API/#coordinates)。）
- en: Now that we know the properties available through the `Coordinates` interface,
    we can access these properties with the following implementation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道了通过`Coordinates`接口可用的属性，我们可以通过以下实现访问这些属性。
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, we can access the attributes via the `position.coords` object.
    In this way it is extremely easy for us to access the user's current location
    and tie it to other APIs, which is what we will be doing shortly with the Google
    Maps API. Lastly, let's discuss the `PositionError` interface so that we know
    how to handle errors efficiently within our applications.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们可以通过`position.coords`对象访问属性。这样，我们可以非常容易地访问用户的当前位置并将其与其他API绑定，这正是我们很快将要使用Google
    Maps API做的事情。最后，让我们讨论`PositionError`接口，以便我们知道如何在应用程序中高效处理错误。
- en: The PositionError interface
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PositionError接口
- en: 'The `PositionError` interface comes into play when an error occurs on the `getCurrentPosition`
    or `watchPosition` method(s). This interface describes the codes that are sent
    to our error handler or callback, and a message. The W3C explains the `PositionError`
    interface as following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当`getCurrentPosition`或`watchPosition`方法出现错误时，`PositionError`接口就会发挥作用。该接口描述了发送到我们的错误处理程序或回调的代码和消息。W3C将`PositionError`接口解释如下：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (As seen at [http://www.w3.org/TR/geolocation-API/#position-error](http://www.w3.org/TR/geolocation-API/#position-error).)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: （见[http://www.w3.org/TR/geolocation-API/#position-error](http://www.w3.org/TR/geolocation-API/#position-error)。）
- en: The previous code describes two attributes that are sent over as an object to
    the error handler, the two attributes being `code` and `message`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码描述了作为对象发送到错误处理程序的两个属性，这两个属性分别是`code`和`message`。
- en: The `code` attribute could be any of the three constants,
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`code`属性可以是以下三个常量之一，'
- en: '`PERMISSION_DENIED` (error code 1): The user chose not to let the browser have
    access to the location information.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PERMISSION_DENIED`（错误代码1）：用户选择不让浏览器访问位置信息。'
- en: '`POSITION_UNAVAILABLE` (error code 2): The location of the device could not
    be determined by the browser.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POSITION_UNAVAILABLE`（错误代码2）：浏览器无法确定设备的位置。'
- en: '`TIMEOUT` (error code 3): The total time in acquiring the location information
    has surpassed the specified timeout property in the PositionOptions interface.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMEOUT`（错误代码3）：获取位置信息的总时间已超过PositionOptions接口中指定的超时属性。'
- en: The second parameter, `message`, would be a DOMstring or String describing the
    problem.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数`message`将是一个描述问题的DOM字符串或字符串。
- en: 'In our implementation we could then do something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，我们可以这样做：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, we can easily determine an error using the `PositionError` interface
    and customize our error messages based on the codes provided. At this point, you
    should have a solid foundation on which you can build. We'll now briefly go over
    some use cases for implementing the Geolocation API into our applications and
    then move into building our application for this book. You can skim over the next
    section, as it will only give you ideas of how Geolocation can or has been implemented.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们可以很容易地使用`PositionError`接口确定错误，并根据提供的代码自定义我们的错误消息。在这一点上，您应该已经有了一个坚实的基础，可以在其上构建。现在我们将简要讨论一些将地理位置API实现到我们的应用程序中的用例，然后开始构建本书的应用程序。您可以略过下一节，因为它只会给您提供有关地理位置如何实现或已经实现的想法。
- en: Use cases
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例
- en: Before we jump into building our application, I'd like to review some instances
    in which Geolocation can be implemented into our applications. This will be sweet
    and short, but it will help you formulate ideas on how to efficiently implement
    this feature. Much of this is already located in the W3C specification, but I
    hope this will give you more insight into how useful the specification is and
    why you should definitely check it out when exploring new features.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用程序之前，我想回顾一些可以将地理位置信息实现到我们的应用程序中的情况。这将是简短而有用的，但它将帮助您构思如何高效地实现此功能。这些大部分已经在W3C规范中，但我希望这将让您更深入地了解规范的用处，以及在探索新功能时为什么一定要查看它。
- en: Points of interest
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 兴趣点
- en: We have always been interested in our surroundings whether that is food, beer,
    or entertainment. So wouldn't it be cool if we could list out possible points
    of interest in our applications that relate to the content the user is accessing?
    We can do this with the Geolocation API. By finding the user's current location
    and tapping into open APIs from third-party vendors we can easily find where the
    user is and present relevant information about the area they are currently located
    in.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直对我们周围的环境感兴趣，无论是食物、啤酒还是娱乐。所以如果我们能列出与用户正在访问的内容相关的可能的兴趣点，那不是很酷吗？我们可以使用地理位置API来实现这一点。通过找到用户的当前位置并利用第三方供应商的开放API，我们可以轻松地找到用户所在地区的相关信息并呈现相关信息。
- en: Route navigation
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由导航
- en: We've seen this being done before, plenty of times with native applications
    on our phones. It's even possible that your phone comes preloaded with this feature
    for which so many have paid hundreds of dollars before. Now, with the HTML5 Geolocation
    API we can build this using the `currentPosition` method and tie it to something
    like Google Maps so that we can present the user with a route. If we wanted to,
    we could even possibly make it a live application using the `watchPosition` method,
    although you may run into API access limits, so keep that in mind when building
    your apps.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前已经看到这样的情况发生了很多次，手机上的原生应用程序也是如此。甚至可能您的手机预装了这个功能，许多人在之前支付了数百美元。现在，使用HTML5地理位置API，我们可以使用`currentPosition`方法构建这个功能，并将其与Google
    Maps之类的东西绑定在一起，以便我们可以向用户呈现路线。如果我们愿意，甚至可能使用`watchPosition`方法制作一个实时应用程序，尽管在构建应用程序时可能会遇到API访问限制，所以请记住这一点。
- en: Latest information
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最新信息
- en: Another useful feature in this application is to present the user with the latest
    information. This can be easily created if we expose an API from a backend system,
    but what if we went further and implemented information outside our own application
    based on the current position of the user. For example, if I lived in Boston and
    went on a trip to Seattle, I would probably want to know what's going on in Seattle
    and not Boston, so my application should probably handle that scenario. With the
    HTML5 Geolocation API we can achieve this very easily without much complication.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序中的另一个有用功能是向用户提供最新信息。如果我们从后端系统公开API，这将很容易实现，但如果我们进一步根据用户的当前位置在我们自己的应用程序之外实现信息，会怎么样呢？例如，如果我住在波士顿，去西雅图旅行，我可能想知道西雅图发生了什么，而不是波士顿，所以我的应用程序可能应该处理这种情况。使用HTML5地理位置API，我们可以很容易地实现这一点，而不会有太多复杂性。
- en: We now have a solid understanding of the Geolocation API, from theoretical understanding
    to simple implementation, we have gone over everything we need to know about Geolocation
    and how to work with it. Use cases have also been defined to help us find a way
    of integrating it into our applications, more likely than not you'll find new
    and innovative ways of using this piece of technology in your applications. As
    for now, let's gear ourselves for a simple use case scenario of pointing out the
    user's current location using the Google Maps API. So let's get started.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对地理位置API有了扎实的理解，从理论理解到简单实现，我们已经了解了关于地理位置和如何使用它的一切。使用案例也已经定义，以帮助我们找到一种将其集成到我们的应用程序中的方法，很可能你会发现在应用程序中使用这项技术的新颖和创新的方式。就目前而言，让我们为指出用户当前位置的简单使用案例场景做好准备，使用Google
    Maps API。所以让我们开始吧。
- en: Google Maps API
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌地图API
- en: Before we get on to implementing Geolocation with Google Maps, we need to do
    some setup work that is pretty simple. As you may already know, Google Maps provides
    an API that you can tap into to implement their maps into your application, making
    it easy for you to display information relative to a user's input or even better—their
    current location. However, for several reasons we need to use an API key from
    Google to authorize our application and keep track of the requests made from your
    application. In this section we'll cover the setup work and hopefully move you
    along quickly.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Google Maps实现地理位置之前，我们需要做一些相当简单的设置工作。您可能已经知道，Google Maps提供了一个API，您可以利用它将他们的地图实现到您的应用程序中，这样您就可以轻松地显示与用户输入相关的信息，甚至更好的是，他们的当前位置。然而，出于几个原因，我们需要使用谷歌的API密钥来授权我们的应用程序，并跟踪从您的应用程序发出的请求。在本节中，我们将介绍设置工作，并希望能够快速帮助您。
- en: The API(s)
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API(s)
- en: 'First of all, you need to know that there are several APIs related to Maps,
    including JavaScript v3, Places, iOS SDK, Android API, Earth API, and more. For
    our purposes we''ll be using the JavaScript API v3; note that we will be using
    using version 3 of the API. If you would like more information on the several
    APIs you can visit the following page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要知道与地图相关的几个API，包括JavaScript v3、Places、iOS SDK、Android API、Earth API等。对于我们的目的，我们将使用JavaScript
    API v3；请注意，我们将使用API的第3版。如果您想了解更多关于几个API的信息，您可以访问以下页面：
- en: '[https://developers.google.com/maps/](https://developers.google.com/maps/)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/maps/](https://developers.google.com/maps/)'
- en: Obtaining an API key
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取API密钥
- en: 'If you have been following along you''ll notice that we need an API key for
    our application. Google has provided the following reasoning for this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一直在关注，您会注意到我们的应用程序需要一个API密钥。谷歌为此提供了以下理由：
- en: Using an API key enables you to monitor your application's Maps API usage, and
    ensures that Google can contact you about your application if necessary. If your
    application's Maps API usage exceeds the Usage Limits, you must load the Maps
    API using an API key in order to purchase additional quota.
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用API密钥可以让您监视应用程序的地图API使用情况，并确保Google在必要时可以联系您的应用程序。如果您的应用程序的地图API使用超过使用限制，您必须使用API密钥加载地图API以购买额外的配额。
- en: (As seen at [https://developers.google.com/maps/documentation/javascript/tutorial#api_key](https://developers.google.com/maps/documentation/javascript/tutorial#api_key).)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: （如[https://developers.google.com/maps/documentation/javascript/tutorial#api_key](https://developers.google.com/maps/documentation/javascript/tutorial#api_key)所示。）
- en: Activating the service
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活服务
- en: 'Now let''s get started on creating the API key. First, log in to your Google
    account at the following URL:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始创建API密钥。首先，在以下URL登录到您的Google账户：
- en: '[https://code.google.com/apis/console](https://code.google.com/apis/console)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://code.google.com/apis/console](https://code.google.com/apis/console)'
- en: Once we log in at the previous URL, we select the **Services** tab.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在之前的URL登录，我们选择**服务**选项卡。
- en: '![Activating the service](img/1024_06_01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![激活服务](img/1024_06_01.jpg)'
- en: The Services tab
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 服务选项卡
- en: 'In the **Services** tab, we are presented with all the services provided by
    Google. In this list we need to activate the Google Maps API v3\. It should look
    like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在**服务**选项卡中，我们看到了Google提供的所有服务。在这个列表中，我们需要激活Google Maps API v3。它应该看起来像这样：
- en: '![Activating the service](img/1024_06_02.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![激活服务](img/1024_06_02.jpg)'
- en: Inactive Google Maps API
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 未激活的Google Maps API
- en: 'When you click on the **OFF** button, the service will activate and should
    look like the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击**关闭**按钮时，服务将激活，并应该如下所示：
- en: '![Activating the service](img/1024_06_03.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![激活服务](img/1024_06_03.jpg)'
- en: Active Google Maps API
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 激活Google Maps API
- en: The Google Maps API v3 service is now activated under your Google account. The
    next step is to retrieve the key that will be used in our implementation of the
    Geolocation API.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps API v3服务现在已在您的Google账户下激活。下一步是检索将在我们的Geolocation API实现中使用的密钥。
- en: Retrieving the key
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检索密钥
- en: Now that the service has been activated under our Google account, let's get
    the key—the final step. To do this, switch to the **API Access** tab in the left-hand
    navigation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，服务已在我们的Google账户下激活，让我们获取密钥——最后一步。为此，请切换到左侧导航中的**API访问**选项卡。
- en: '![Retrieving the key](img/1024_06_04.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![检索密钥](img/1024_06_04.jpg)'
- en: The API Access tab
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: API访问选项卡
- en: When we access this page we'll be presented with a **Simple API Access** section
    that will contain our generated key. This is the key you'll want to use to authorize
    your Google Maps implementation in the next section. Along with the key you'll
    notice that it will list the referrers, when it was activated, and who activated
    the key (you). To the right of all this information, you'll also notice a couple
    of options. These options include the ability to generate a new key, edit the
    referrers, and ultimately delete the key generated.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问这个页面时，我们将看到一个**简单API访问**部分，其中包含我们生成的密钥。这是您要用来授权您的Google Maps实现的密钥。除了密钥，您还会注意到它将列出引用者、激活时间以及激活密钥的人（您）。在所有这些信息的右侧，您还会注意到一些选项。这些选项包括生成新密钥、编辑引用者，以及最终删除生成的密钥。
- en: Tip
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note you also have the ability to set up an OAuth 2.0 Client ID, which will
    secure your applications. This is definitely recommended if you'll be dealing
    with sensitive information, which in a way you would be because you will be working
    with user location. However, the setup and use of OAuth is beyond the scope of
    this book, but I recommend that you take some time to learn this new authentication
    method and implement it within your own application once you get a solid foundation
    working with APIs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您还可以设置OAuth 2.0客户端ID，这将保护您的应用程序。如果您将处理敏感信息，这绝对是推荐的，因为您将处理用户位置。然而，OAuth的设置和使用超出了本书的范围，但我建议您花些时间学习这种新的身份验证方法，并在您自己的应用程序中实现它，一旦您在API方面有了坚实的基础。
- en: With the API key in hand we are now all set to start implementing Geolocation
    with Google Maps. The following section will take what we've learned and use the
    simple methods available to us for putting a Google Map on our page. In this regard
    I hope it sparks your interest into the Google Maps API as it has been developed
    over time and is a great framework to use in almost any application. Now let's
    get started developing some cool stuff.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有了API密钥，我们现在已经准备好开始使用Google Maps实现Geolocation。接下来的部分将利用我们学到的知识，并使用我们可用的简单方法在页面上放置Google地图。在这方面，我希望它能激发您对Google
    Maps API的兴趣，因为它经过时间的发展，是一个几乎可以在任何应用程序中使用的优秀框架。现在让我们开始开发一些很酷的东西。
- en: Geolocation and Google Maps
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Geolocation和Google Maps
- en: If you have been following along from the beginning of this chapter you should
    have a thorough understanding of the Geolocation API and have your Google account
    set up to tap into the Google Maps JavaScript API. If you haven't been following
    along that's okay as well, since this section is primarily driven to show how
    to implement both technologies. This section will prepare our location page within
    our application and then move quickly to implement Geolocation with Google Maps.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从本章的开头一直跟随下来，您应该对Geolocation API有了全面的了解，并且已经设置好了您的Google账户以便利用Google Maps
    JavaScript API。如果您一直没有跟随，也没关系，因为本节主要是为了展示如何实现这两种技术。本节将准备我们应用程序中的位置页面，然后快速转移到使用Google
    Maps实现Geolocation。
- en: Markup preparation
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记准备
- en: 'In the previous chapter, we did some setup work to get our application going;
    we will follow the same setup work here to make sure all our pages are consistent.
    So let''s open up the markup page related to `location` `in` `/location/index.html`
    of the source files accompanying this book. When we have this page open in our
    text editor, let''s make the following updates to the markup:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们做了一些设置工作来启动我们的应用程序；我们将在这里遵循相同的设置工作，以确保我们所有的页面都是一致的。因此，让我们打开与本书附带的源文件中的`location`相关的标记页面`/location/index.html`。当我们在文本编辑器中打开这个页面时，让我们对标记进行以下更新：
- en: Update the navigation to reflect a select menu.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新导航以反映选择菜单。
- en: Include the `location.css` file that will have the page specific styling for
    this page.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`location.css`文件，该文件将为此页面提供特定的页面样式。
- en: Remove unused scripts from the bottom of the page.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从页面底部删除未使用的脚本。
- en: Include `App.Location.js`.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`App.Location.js`。
- en: Initialize `App.Location` after the inclusion of `main.js`.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在包含`main.js`之后初始化`App.Location`。
- en: 'Once we have made these updates, your markup should look like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进行了这些更新，您的标记应该如下所示：
- en: '[PRE9]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that comments were added where more markup should exist. The markup that
    pertains to these sections is in the source code provided with the book. Please
    look there for more on what should exist in those sections.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在应该存在更多标记的地方添加了注释。与这些部分相关的标记在提供的书籍源代码中。请在那里查找更多关于这些部分应该存在什么的信息。
- en: 'Now that we have brought the markup up to the consistent layout of our previous
    pages we are ready to start customizing this application for location awareness.
    The next step in the process is to prepare the markup for the additional functionality
    we''ll build in. To do this, here is what we need to do:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将标记调整到了先前页面的一致布局，我们准备开始为位置感知定制此应用程序。该过程的下一步是准备标记，以便我们将构建的附加功能。为此，我们需要做以下事情：
- en: Include the Google Maps API JavaScript.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括Google Maps API JavaScript。
- en: Include the `Geolocation` wrapper we'll be building.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括我们将要构建的`Geolocation`包装器。
- en: Create a `div` that will contain our map.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含我们地图的`div`。
- en: 'When we follow the previous directions, our markup will look like this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按照先前的指示进行操作时，我们的标记将如下所示：
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, there is not much of a difference. What we have done here is
    include in a new script that includes the Google Maps JavaScript. We then include
    another script named `Geolocation.js`, which will exist in `/js/` and finally
    we create a `div` with an ID of `map_canvas` that exists between the header and
    footer.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这并没有太大的区别。我们在这里所做的是包含一个包含Google Maps JavaScript的新脚本。然后我们包含另一个名为`Geolocation.js`的脚本，它将存在于`/js/`中，最后我们创建一个ID为`map_canvas`的`div`，它存在于页眉和页脚之间。
- en: Tip
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you will need to include the API key, which you created in the last
    section, into the Google Maps JavaScript URL string, replacing `YOUR_API_KEY`
    with the key you were provided earlier. Also keep in mind that you must set the
    sensor parameter to either true or false. The sensor parameter tells Google Maps
    that the application uses a sensor, such as a GPS, for the user's location.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您需要将在上一节中创建的API密钥包含在Google Maps JavaScript URL字符串中，用您之前提供的密钥替换`YOUR_API_KEY`。还要记住，您必须将传感器参数设置为true或false。传感器参数告诉Google
    Maps应用程序使用传感器（例如GPS）来获取用户位置。
- en: Okay, so our markup is now ready. We don't need to do anything else here and
    so now we'll move to the JavaScript, creating our `Geolocation` wrapper first
    and then implementing it into our `App.Location` class. So let's take a look at
    how we can make tapping into Geolocation easier within our applications.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们的标记已经准备好了。我们在这里不需要做任何其他事情，所以现在我们将转向JavaScript，首先创建我们的`Geolocation`包装器，然后将其实现到我们的`App.Location`类中。让我们看看如何在我们的应用程序中更轻松地利用地理位置。
- en: The Geolocation wrapper
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理位置包装器
- en: In most cases, we don't want to rewrite the same methods over and over for every
    use case. So we create wrappers that abstract the functionality of certain technologies
    so we can use them easily within our apps. This is what we're going to do now,
    abstract the Geolocation API so we can use it with the Google Maps API.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们不希望为每种用例反复重写相同的方法。因此，我们创建了包装器，抽象了某些技术的功能，以便我们可以在应用程序中轻松使用它们。这就是我们现在要做的事情，抽象地理位置API，以便我们可以在Google
    Maps API中使用它。
- en: Let's get started by creating a `Geolocation.js` file inside of our `JavaScript`
    directory. As you may have already noticed this is not going to exist under the
    `App` namespace; this is because it is an abstract class that any application
    might be able to use. For our purpose we'll only want to get the current position
    of the user and we want to be able to use this information across our application,
    so we'll make it global.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个`Geolocation.js`文件，放在我们的`JavaScript`目录中。您可能已经注意到，这不会存在于`App`命名空间下；这是因为它是任何应用程序都可能使用的抽象类。对于我们的目的，我们只想要获取用户的当前位置，并且希望能够在整个应用程序中使用这些信息，因此我们将其设置为全局对象。
- en: 'Here is the basic template for our `Geolocation` class:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`Geolocation`类的基本模板：
- en: '[PRE11]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is not different from any of the code we''ve written previously except
    for how we expose this class with the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们先前编写的任何代码都没有什么不同，只是我们用以下代码公开了这个类：
- en: '[PRE12]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Instead of returning the `Geolocation` object we basically just initialize
    it and set it to the `window` object, which makes it global. You''ll also notice
    the addition of a closure scoped variable named `_callbacks`, which will contain
    callbacks that the user can override when extending Geolocation functionality.
    Now let''s extend this even further by including default values for retrieving
    the current position, and a general properties object that will hold all returned
    data from the Geolocation API:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上只是初始化`Geolocation`对象并将其设置为`window`对象，而不是返回`Geolocation`对象，这使其成为全局对象。您还会注意到添加了一个名为`_callbacks`的闭包作用域变量，它将包含用户在扩展地理位置功能时可以覆盖的回调。现在让我们通过包括用于检索当前位置的默认值以及一个将保存地理位置API返回的所有数据的一般属性对象来进一步扩展这一点：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'These options will be used when we retrieve the user''s location. As for now,
    let''s leave these as it is, and create a callback that the user can override
    when a success or error occurs with the Geolocation API:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检索用户位置时，将使用这些选项。目前，让我们将这些保留为原样，并创建一个回调，用户可以在地理位置API发生成功或错误时覆盖：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''ll see how to implement this shortly, but for now this will be a default
    method that will be used to do callbacks. Next, let''s check if the device/browser
    actually supports the Geolocation API:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快将看到如何实现这一点，但现在这将是一个默认方法，用于执行回调。接下来，让我们检查设备/浏览器是否实际支持地理位置API：
- en: '[PRE15]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is a fairly simple check for geolocation support, and essentially we just
    create a property on Geolocation called `geolocation` that will be set to the
    API if it exists. In this way, we don''t have to do `navigator.geolcation` every
    time within the class. Also, it will make it easier to double-check if the geolocation
    functionality exists later on. At this point, we''re ready to expose the `getCurrentPosition`
    method from the Geolocation API:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的地理位置支持检查，基本上我们只是在Geolocation上创建一个叫做`geolocation`的属性，如果存在API就会设置它。这样，我们就不必在类内部每次都写`navigator.geolcation`。而且，这样做将更容易在以后检查地理位置功能是否存在。在这一点上，我们准备从Geolocation
    API中公开`getCurrentPosition`方法。
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous method is public and accessible because we have attached it to
    the prototype of Geolocation. This method will accept one parameter, a function
    callback that will be called on success or error of the `getCurrentPosition` call
    on the Geolocation API. This method checks to see if the parameter is not undefined
    and then reassigns based on what was sent in. We then do a check on the `geolocation`
    property we set in the constructor; if it's not undefined we call the `getCurrentPosition`
    method on the Geolocation API and send in the appropriate parameters. We then
    return the instance of our `Geolocation` class. If the `geolocation` property
    is not defined we return a Boolean of false, so error checking could also be done
    at the time the developer uses this method.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的方法是公共的并且可访问，因为我们已经将它附加到了Geolocation的原型上。这个方法将接受一个参数，一个在Geolocation API的`getCurrentPosition`调用成功或失败时将被调用的回调函数。这个方法检查参数是否不是未定义的，然后根据发送的内容重新分配。然后我们检查在构造函数中设置的`geolocation`属性；如果它不是未定义的，我们就调用Geolocation
    API上的`getCurrentPosition`方法并发送适当的参数。然后我们返回我们的`Geolocation`类的实例。如果`geolocation`属性未定义，我们返回一个false的布尔值，因此开发人员在使用这个方法时也可以进行错误检查。
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note we are passing two undefined methods `currentPositionSuccess` and `currentPositionError`,
    which will be defined shortly. However, also notice we sent in the default properties
    we defined previously into this method as its third parameter. By doing this we
    give the developer the ability to further customize the experience of Geolocation
    functionality easily. You'll see how easy it will be to customize these values
    when we start developing the `App.Location.js` file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在传递两个未定义的方法`currentPositionSuccess`和`currentPositionError`，这些方法将很快被定义。但是，也请注意，我们将之前定义的默认属性作为它的第三个参数发送到这个方法中。通过这样做，我们使开发人员能够轻松地进一步定制地理位置功能的体验。当我们开始开发`App.Location.js`文件时，你会看到定制这些值是多么容易。
- en: 'At this point, all that''s left is creating the earlier callbacks. So let''s
    create the following `successCallback`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，唯一剩下的就是创建之前的回调。所以让我们创建以下`successCallback`：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The last callback is called, as you may have guessed, when we have successfully
    retrieved the user's location. As defined by the W3C specification, this method
    accepts a single parameter—a `Position` object containing the coordinates and
    timestamp. We expose the returned information using the property `props` defined
    in the constructor. Once all this information is retrieved and set, the callback
    `getCurrentPositionCallback` is invoked and passed the retrieved properties.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个回调被称为，你可能已经猜到了，当我们成功获取用户位置时调用。根据W3C规范的定义，这个方法接受一个参数——一个包含坐标和时间戳的`Position`对象。我们使用构造函数中定义的`props`属性来公开返回的信息。一旦所有这些信息都被检索和设置，回调`getCurrentPositionCallback`被调用并传递检索到的属性。
- en: Tip
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note we are also changing the meaning of `this` inside the callback to be that
    of the instance of Geolocation by passing in `_self` as the first parameter to
    call.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还将回调中的`this`的含义更改为Geolocation实例的含义，通过将`_self`作为第一个参数传递来调用。
- en: 'Lastly, lets create our error callback:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建我们的错误回调：
- en: '[PRE18]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This callback, as defined by the W3C specification, accepts one parameter, a
    `PositionError` object that has an error code along with a brief message. However,
    all we have to do is use the callback and pass this information along, similar
    to what was done in the `successCallback`. Except here, all we are doing is passing
    the `PositionError` object so that custom messages can be created outside of this
    wrapper.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个回调，根据W3C规范的定义，接受一个参数，一个带有错误代码和简短消息的`PositionError`对象。然而，我们所要做的就是使用回调并传递这些信息，类似于`successCallback`中所做的。不同的是，这里我们只是传递`PositionError`对象，以便在这个包装器之外创建自定义消息。
- en: And with that, we are done creating a simple wrapper for the Geolocation API.
    We can now easily tap into the API from within `App.Location.js`. So let's move
    on to extending the `App.Location` object and start using the Google Maps API
    with Geolocation.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就完成了对地理位置API的简单包装。现在我们可以轻松地从`App.Location.js`中调用API。所以让我们继续扩展`App.Location`对象，并开始使用带有地理位置的Google
    Maps API。
- en: Geolocation with Google Maps
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google Maps的地理位置
- en: 'So we''re now ready to start implementing Geolocation with Google Maps using
    `App.Location`. We''ll use the same boilerplate that has been used throughout
    the book to connect our `Geolocation` wrapper with the Google Maps API. To get
    started let''s open up `App.Location.js` provided with the book''s source code.
    When you have this open, it should look similar to the following code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在准备开始使用`App.Location`来实现使用Google Maps的地理位置。我们将使用本书中一直使用的相同样板来将我们的`Geolocation`包装器与Google
    Maps API连接起来。让我们开始打开提供的`App.Location.js`，当你打开它时，它应该看起来类似于以下代码：
- en: '[PRE19]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There''s nothing new here if you have been following the book in order. But
    as a review, we have declared a new namespace called `Location` under the general
    `App` object. This namespace will contain all the functionality for our location
    page so it''s perfect as a controller between Google Maps and Geolocation functionality.
    So let''s start by caching the map element creating a closure scoped reference
    to the `Location` instance and then initializing it. The constructor should then
    look like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按顺序阅读本书，这里没有什么新内容。但是作为回顾，我们在`App`对象下声明了一个名为`Location`的新命名空间。这个命名空间将包含我们位置页面的所有功能，因此它非常适合作为Google地图和地理位置功能之间的控制器。因此，让我们从缓存地图元素开始，创建一个闭包作用域的`Location`实例引用，然后对其进行初始化。构造函数应该如下所示：
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here we have created a `$cache` property onto the instance of `Location`, this
    `$cache` property will contain the reference to the `map` element and can thus
    be accessed using this property. We then create a closure scoped self variable
    that reference the instance of `Location`. Finally we initialize our code by calling
    the `init` method located on the instance's prototype.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`Location`实例上创建了一个`$cache`属性，这个`$cache`属性将包含对`map`元素的引用，因此可以使用这个属性进行访问。然后我们创建了一个闭包作用域的self变量，引用了`Location`实例。最后，我们通过调用实例原型上的`init`方法来初始化我们的代码。
- en: 'The next step in the process is to retrieve the user''s current location using
    our `Geolocation` wrapper. We''ll add this bit of code to the `initialize` method,
    as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中的下一步是使用我们的`Geolocation`包装器来获取用户的当前位置。我们将把这段代码添加到`initialize`方法中，如下所示：
- en: '[PRE21]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here we can finally see the implementation of our `Geolocation` wrapper and
    how easy it is to integrate within our applications since the `Geolocation` class
    has taken care of validating and verifying the setup. The great part about this
    is that our callback actually handles the errors; by checking the object type
    of `PositionError` we are able to continue with the integration of Google Maps
    or logging out the error returned. Of course our way of handling the error should
    be more elaborate for the user, but for this case it helps identify how easy it
    is to go with this approach in our applications.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们最终可以看到我们的`Geolocation`包装器的实现，以及它在应用程序中集成的简易程度，因为`Geolocation`类已经处理了验证和验证设置。这其中的重要部分是我们的回调实际上处理了错误；通过检查`PositionError`的对象类型，我们能够继续集成Google地图或记录返回的错误。当然，我们处理错误的方式应该更加详细，但对于这种情况，它有助于确定在我们的应用程序中采用这种方法有多么简单。
- en: 'Now, let''s take a look at how we can implement Google Maps with a successful
    callback by looking at the `initGoogleMaps` method called earlier:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何通过查看之前调用的`initGoogleMaps`方法来实现Google地图的成功回调：
- en: '[PRE22]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There's a lot going on here but, believe it or not, we're pretty much done.
    So let's go through this step by step.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了很多事情，但信不信由你，我们几乎已经完成了。所以让我们一步一步地进行。
- en: First, we are setting the `latlng` property to a new instance of the `LatLng`
    class that is part of the Google Maps API. This `class` constructor returns an
    object representing a geographic point ([https://developers.google.com/maps/documentation/javascript/reference#LatLng](https://developers.google.com/maps/documentation/javascript/reference#LatLng)).
    Although we already have the coordinates from the Geolocation API, we need to
    make sure that we create a Google Maps instance of `LatLng` because it will be
    used in the following methods.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`latlng`属性设置为Google Maps API的`LatLng`类的一个新实例。这个`class`构造函数返回一个表示地理点的对象。尽管我们已经从Geolocation
    API中获得了坐标，但我们需要确保创建一个Google地图的`LatLng`实例，因为它将在接下来的方法中使用。
- en: 'Now, before moving on we need to sidestep for a moment. The Google Maps API
    is extremely extensive and customizable, allowing us to customize the look and
    feel of the map in pretty much every area. To explore this a bit more, let''s
    create a `mapOptions` object on the defaults that will customize our map for mobile:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在继续之前，我们需要暂时绕过一下。Google Maps API非常广泛和可定制，允许我们在几乎每个区域自定义地图的外观和感觉。为了更深入地探索这一点，让我们在默认设置上创建一个`mapOptions`对象，它将为我们的地图定制移动端的外观：
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we won''t jump into this extensively but keep in mind that there are many
    options available to you that can be explored and optimized for our iPhone web
    application. I encourage you to visit the following URL and explore these options
    so that you are familiar with what is available to you:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不会深入讨论这一点，但请记住，有许多选项可供您探索和优化，以适用于我们的iPhone Web应用程序。我鼓励您访问以下网址并探索这些选项，以便熟悉可用的内容：
- en: '[https://developers.google.com/maps/documentation/javascript/reference#MapOptions](https://developers.google.com/maps/documentation/javascript/reference#MapOptions)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/maps/documentation/javascript/reference#MapOptions](https://developers.google.com/maps/documentation/javascript/reference#MapOptions)'
- en: 'Let''s return to the `initGoogleMaps` method that we were describing previously.
    Continuing from the initialization of the `LatLng` class, we now define the center
    property on the `mapOptions` object we just created. This property is set to the
    instance of `LatLng`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到之前描述的`initGoogleMaps`方法。在初始化`LatLng`类之后，我们现在在刚刚创建的`mapOptions`对象上定义了center属性。这个属性设置为`LatLng`的实例：
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we have defined all the properties we need to create Google Map, we
    initialize the `Map` class part of the Google Maps API:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了创建Google地图所需的所有属性，我们初始化了Google Maps API的`Map`类：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This method accepts the `div` element we created and have cached in our JavaScript,
    as its first parameter. The second parameter will be the `options` object we created.
    The reason we set the `center` property on the `mapOptions` object is because
    the initialization of the map would display the user's location. We have now completed
    the implementation of the Geolocation and Google Maps API.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法接受我们在JavaScript中创建并缓存的`div`元素作为它的第一个参数。第二个参数将是我们创建的`options`对象。我们在`mapOptions`对象上设置`center`属性的原因是因为地图的初始化将显示用户的位置。我们现在已经完成了地理定位和Google
    Maps API的实现。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed the Geolocation specification as defined by the
    W3C. We then used this information to build a wrapper so we could tap into the
    API easily. As a bonus we reviewed the Google Maps API, created an access key
    and then used our Geolocation wrapper to determine the user's location and display
    it to the user. You should now have a good understanding of determining a user's
    location and using it effectively. In the next chapter, we'll get into one-page
    application development, using the concepts we've learned and extending it using
    some additional open source libraries.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了由W3C定义的地理定位规范。然后，我们利用这些信息构建了一个包装器，以便我们可以轻松地利用API。作为一个额外的奖励，我们还回顾了Google
    Maps API，创建了一个访问密钥，然后使用我们的地理定位包装器来确定用户的位置并将其显示给用户。现在你应该对确定用户位置并有效使用它有了很好的理解。在下一章中，我们将进入单页应用程序开发，利用我们学到的概念并使用一些额外的开源库进行扩展。
