- en: Chapter 8. Offline Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。离线应用程序
- en: In this chapter, we will cover the basics of offline application development.
    Specifically, we’ll discuss the application manifest, including the advantages
    and disadvantages, and see how we can handle offline interactions. Then we’ll
    jump into how `localStorage` and `IndexedDB` can be used to temporarily store
    data on the client side. The content in this chapter will be supplemented with
    basic examples that will help you get up and going quickly. So, let’s start out
    by covering how the application manifest is beneficial for us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍离线应用程序开发的基础知识。具体来说，我们将讨论应用程序清单，包括其优缺点，并看看我们如何处理离线交互。然后我们将深入研究如何使用`localStorage`和`IndexedDB`在客户端临时存储数据。本章的内容将以基本示例进行补充，这将帮助您快速上手。因此，让我们首先来看看应用程序清单对我们有什么好处。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The application manifest
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序清单
- en: Handling offline interactions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理离线交互
- en: The `localStorage` and `IndexedDB` APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localStorage`和`IndexedDB`API'
- en: Application Cache
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序缓存
- en: '**Application Cache**, or otherwise known as **AppCache** , allows you to define
    the resources that should be cached and available during offline use. This essentially
    makes your web application usable when the user is offline, and thus losing network
    connectivity or even refreshing the page will not affect your users'' connectivity,
    and they will still be able to interact with your application. Let’s get started
    by taking a look at what the application cache manifest looks like.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序缓存**，又称为**AppCache**，允许您定义应该在离线使用期间缓存和可用的资源。这基本上使您的Web应用程序在用户离线时可用，因此失去网络连接甚至刷新页面都不会影响用户的连接，他们仍然能够与您的应用程序进行交互。让我们首先来看看应用程序缓存清单是什么样子。'
- en: The manifest file
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清单文件
- en: 'Our application manifest file contains the information regarding what resources
    will be cached by the file. It explicitly informs the browser of the resources
    you want to be made available offline, making it accessible for offline use, but
    also speeding up the page load through caching. The following code showcases a
    basic example of what a cache manifest looks like for the examples that accompany
    this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序清单文件包含了有关哪些资源将被文件缓存的信息。它明确告知浏览器您希望离线使用的资源，使其可供离线使用，同时通过缓存加快页面加载速度。以下代码展示了本章附带示例的缓存清单的基本示例：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding example, there are a couple of things happening. First, we
    identify the cache manifest using the all-caps word, `CACHE MANIFEST`. This line
    is required and read by the browser to be exactly what it is, a cache manifest.
    The next line defines a file we would like to cache, `index.html`. Now, there
    is something we need to keep in mind; this manifest file is relative to where
    we are. This means that our file is located where `index.html` is in a directory
    (for example, `offline.appcache` is located at `localhost/`, just like `index.html`).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，发生了一些事情。首先，我们使用全大写单词`CACHE MANIFEST`来标识缓存清单。这一行是必需的，并且被浏览器读取为确切的缓存清单。接下来的一行定义了一个我们想要缓存的文件，`index.html`。现在，有一件事情我们需要记住；这个清单文件是相对于我们所在的位置的。这意味着我们的文件位于`index.html`所在的目录中（例如，`offline.appcache`位于`localhost/`，就像`index.html`一样）。
- en: Moving on, we find that we can include comments in our manifest file by including
    the pound sign in front (`#stylesheets`). This helps us keep track of what’s going
    on in this file. From here on out, we define the stylesheets and scripts that
    we would like to define relative to the page being viewed. At this time, we are
    looking at a real manifest file and breaking it down to understand it. As we progress
    through the chapter, we’ll come back to this file and see how it affects the example
    built in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们发现我们可以在我们的清单文件中包含注释，只需在前面加上井号（`#stylesheets`）。这有助于我们跟踪这个文件中发生的事情。从这里开始，我们定义我们想要相对于正在查看的页面定义的样式表和脚本。此时，我们正在查看一个真正的清单文件，并对其进行分解以理解它。随着我们在本章中的进展，我们将回到这个文件，看看它如何影响本章中构建的示例。
- en: Manifest implementation
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清单实现
- en: In order to effectively use our cache manifest, we need to be able to associate
    it with the current page. But to do this, we also need to set up our server to
    handle the manifest correctly by sending over the correct MIME-type. Each type
    of server handles this a bit differently, and the directives may seem different,
    but they all achieve the same results—sending the correct type of header associated
    with that file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地使用我们的缓存清单，我们需要能够将其与当前页面关联起来。但是为了做到这一点，我们还需要设置我们的服务器以正确处理清单，通过发送正确的MIME类型。每种类型的服务器处理方式都有些不同，指令可能看起来不同，但它们都能实现相同的结果——发送与该文件相关联的正确类型的标头。
- en: 'In Apache, our configuration would look something like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache中，我们的配置看起来可能是这样的：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we have defined all files of type `.appcache` to be delivered
    with a content type of `text`/`cache-manifest`. This allows the browser to interpret
    the file correctly, and thus the browser associates it as `cache-manifest`. Although
    this is great, we are not yet done. To finish up, we need our page to define this
    file so that it is associated correctly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经定义了所有类型为`.appcache`的文件以`text`/`cache-manifest`的内容类型进行传递。这使得浏览器能够正确解释文件，因此浏览器将其关联为`cache-manifest`。尽管这很好，但我们还没有完成。为了完成，我们需要让我们的页面定义这个文件，以便它能够正确关联。
- en: 'To make our cache manifest related to our page, we need to set the `manifest`
    attribute on our HTML tag like so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的缓存清单与我们的页面相关联，我们需要在我们的HTML标签上设置`manifest`属性，如下所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now done defining our application cache manifest and delivering it with
    the related page, but we have only briefly touched upon this technology. To fully
    understand its power, we need to see this in use. So we’ll go ahead and create
    a simple example that gets us using what we have learned so far.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经定义了我们的应用程序缓存清单，并将其与相关页面一起交付，但我们只是简要地涉及了这项技术。要充分理解其功能，我们需要看到它的使用。因此，我们将继续创建一个简单的示例，让我们使用到目前为止学到的知识。
- en: A simple example
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: Our example for this chapter will be based on the previous chapter. For this
    reason, we won’t go into detail on the structure, styling, or scripts used to
    create this sample. However, it will be stripped down to an essential profile
    view that will allow you to understand offline applications without any additional
    knowledge needed from previous chapters. To begin with, let’s look at our markup.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例将基于上一章。因此，我们不会详细介绍用于创建此示例的结构、样式或脚本。但是，它将被简化为一个基本的个人资料视图，让您能够理解离线应用程序，而无需从前几章获取额外的知识。首先，让我们看看我们的标记。
- en: The markup
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记
- en: 'As always, the source code accompanying this book contains everything you need
    to get started with this chapter’s goals. So, let’s look at the meat of this sample
    and examine how this example will function, starting with the markup. If you open
    the index file located in the `offline` directory, you’ll notice that our content
    should look something like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书一起提供的源代码包含了您开始本章目标所需的一切。因此，让我们看看这个示例的实质，并检查这个示例将如何运行，从标记开始。如果您打开位于`offline`目录中的索引文件，您会注意到我们的内容应该看起来像这样：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As with any web application, especially those written in this book, this is
    just an excerpt of the overall application architecture, which would contain a
    header, footer, stylesheets, and scripts. But, the preceding markup describes
    a profile view that displays a user’s information, including a short bio, age,
    and birth date. Along with this information is a form that allows you to update
    such information.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何网页应用程序一样，特别是本书中编写的应用程序，这只是整体应用架构的一部分，其中包括页眉、页脚、样式表和脚本。但是，前面的标记描述了一个显示用户信息的个人资料视图，包括简短的个人简介、年龄和出生日期。除了这些信息外，还有一个表单，允许您更新这些信息。
- en: The experience for this application is as follows. First, when the user loads
    the page they should see all the information associated with them. Secondly, they
    will have the option to edit this information using a hyperlink with the text
    **Edit**. When the hyperlink is clicked, a form will appear that allows the user
    to edit their information. Accordingly, the **Edit** hyperlink will update to
    **View Profile**. Lastly, when the user clicks on **View Profile**, the form will
    hide and the display of the user’s information will reappear.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的体验如下。首先，当用户加载页面时，他们应该看到与他们相关的所有信息。其次，他们将有选择使用文本**编辑**的超链接来编辑这些信息。当单击超链接时，将出现一个表单，允许用户编辑他们的信息。相应地，**编辑**超链接将更新为**查看个人资料**。最后，当用户单击**查看个人资料**时，表单将隐藏，用户信息的显示将重新出现。
- en: The JavaScript
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript
- en: 'This isn’t as complicated as it sounds. In fact, the script that is used to
    create the functionality of the page is dependent on the following script:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不像听起来那么复杂。事实上，用于创建页面功能的脚本依赖于以下脚本：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s look at what’s going on in the preceding code to make sure no one is lost.
    First, we cache the elements appropriate to our page. In this way, we are optimizing
    the performance by not traversing the DOM every time we need to look something
    up. Then, we define our `onEditClick` and `onViewClick` event handlers, which
    show or hide the appropriate content blocks and then update the `text` and `href`
    properties of the anchor tag it relates to. Finally, we attach the `click` event
    on the anchor tags to the cached `$viewProfile` element.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前面的代码中发生了什么，以确保没有人迷失方向。首先，我们缓存适合我们页面的元素。通过这种方式，我们通过不是每次需要查找东西时都遍历DOM来优化性能。然后，我们定义了`onEditClick`和`onViewClick`事件处理程序，它们显示或隐藏适当的内容块，然后更新与之相关的锚点标签的`text`和`href`属性。最后，我们将`click`事件附加到缓存的`$viewProfile`元素上。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the preceding JavaScript is an excerpt of the book’s accompanying
    source code for this chapter. For simplicity, we have removed the closure and
    `Offline` class in order to better explain the meat and bones of the application
    being built here. Of course, you are welcome to either use the preceding code
    as is, or continue using the book’s source code. Whichever way you choose, the
    desired outcome will be an application that shows or hides content based on the
    current state.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的JavaScript是本章书籍附带源代码的一部分。为了更好地解释正在构建的应用程序的实质，我们已经删除了闭包和`Offline`类。当然，您可以选择使用前面的代码，或者继续使用本书的源代码。无论您选择哪种方式，期望的结果都将是一个根据当前状态显示或隐藏内容的应用程序。
- en: 'When the preceding code is executed and the page is loaded, these are the following
    states of the application:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行前面的代码并加载页面时，应用程序的状态如下：
- en: '![The JavaScript](img/1024OT_08_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript](img/1024OT_08_01.jpg)'
- en: Initial application state and application edit state
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 初始应用程序状态和应用程序编辑状态
- en: Now that we have a solid foundation of what the application should look like
    when we interact with it, we want to make sure that it gets cached. By implementing
    the techniques given at the beginning of our application, we should have an application
    that now functions offline.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经建立了应用程序与交互时应该看起来的坚实基础，我们希望确保它被缓存。通过实施我们应用程序开头给出的技术，我们现在应该有一个可以离线运行的应用程序。
- en: Remember that we need to place the application cache manifest in the same directory
    as the sample application that is being built here. So, our application manifest
    needs to exist in the offline directory along with our `index.html` file. If you
    look at the source code for this chapter, you should see a working example of
    the structure and layout of our manifest and source files. Running this application
    on a server configured correctly will render our page offline. But the question
    is, how do we debug something like this? Well, this is what the next section tackles.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们需要将应用程序缓存清单放在与正在构建的示例应用程序相同的目录中。因此，我们的应用程序清单需要存在于离线目录中，与我们的`index.html`文件一起。如果您查看本章的源代码，您应该会看到我们的清单和源文件的结构和布局的工作示例。在正确配置的服务器上运行此应用程序将使我们的页面离线呈现。但问题是，我们如何调试这样的东西呢？好吧，这就是下一节要解决的问题。
- en: Debugging the cache manifest
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试缓存清单
- en: Debugging our offline applications is extremely important, after all, if our
    application depends on network connectivity, it’s crucial we deliver an alternative
    experience that is successful to our users. However, it is not easy to debug an
    offline application. There are several reasons for this, but it’s mostly based
    on the implementation of the application cache interface.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调试我们的离线应用程序非常重要，毕竟，如果我们的应用程序依赖于网络连接，我们必须提供一个成功的替代体验给我们的用户。然而，调试离线应用程序并不容易。有几个原因，但主要是基于应用程序缓存接口的实现。
- en: When Safari revisits your site, the site is loaded from the cache. If the cache
    manifest has changed, Safari checks the HTML file that declares the cache, as
    well as each resource listed in the manifest, to see if any of them has changed.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当Safari重新访问您的站点时，站点将从缓存中加载。如果缓存清单已更改，Safari将检查声明缓存的HTML文件，以及清单中列出的每个资源，以查看它们是否有任何更改。
- en: '>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: A file is considered unchanged if it is byte-for-byte identical to the previous
    version; changing the modification date of a file does not trigger an update.
    You must change the contents of the file. (Changing a comment is sufficient.)
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果文件与先前版本的文件在字节上完全相同，则认为文件未更改；更改文件的修改日期不会触发更新。您必须更改文件的内容。（更改注释就足够了。）
- en: 'This can be found in the Apple documentation at: [https://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html#//apple_ref/doc/uid/TP40007256-CH7-SW5](https://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在苹果文档中找到：[https://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html#//apple_ref/doc/uid/TP40007256-CH7-SW5](https://developer.apple.com/library/safari/#documentation/iPhone/Conceptual/SafariJSDatabaseGuide/OfflineApplicationCache/OfflineApplicationCache.html)
- en: Debugging in the browser
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在浏览器中调试
- en: 'Based on the previous documentation, we can improve the debugging process by
    clearing the cache with updated resources. This could be as simple as updating
    a comment in our code, but to ensure that the correct assets are being cached,
    we can use modern browsers and use the debugger tools to review the assets being
    cached. Review the following screenshots to see how you can test that your assets
    are being cached:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据先前的文档，我们可以通过清除具有更新资源的缓存来改进调试过程。这可能只是在我们的代码中更新注释，但为了确保正确的资产被缓存，我们可以使用现代浏览器和调试器工具来查看被缓存的资产。查看以下截图，了解如何测试您的资产是否被缓存：
- en: '![Debugging in the browser](img/1024OT_08_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![在浏览器中调试](img/1024OT_08_02.jpg)'
- en: Safari developer tools – resources
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Safari开发者工具 - 资源
- en: The developer tools in Safari, shown in the preceding screenshot, help us debug
    our application cache by providing a **Resource** tab that allows us to analyze
    the application cache for multiple domains. In this example, we can see the resources
    related to the domain for our sample application. When we review the application
    cache, we can see a list of files associated with the cache to the right. Additionally,
    we can see the location of the file and the status of the user; in this case,
    we are online and idle.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Safari中的开发者工具（如前面的截图所示）通过提供一个**资源**选项卡来帮助我们调试应用程序缓存，允许我们分析多个域的应用程序缓存。在这个例子中，我们可以看到与我们示例应用程序域相关的资源。当我们审查应用程序缓存时，我们可以看到与缓存相关的文件列表在右侧。此外，我们还可以看到文件的位置和用户的状态；在这种情况下，我们是在线且空闲。
- en: '![Debugging in the browser](img/1024OT_08_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![在浏览器中调试](img/1024OT_08_03.jpg)'
- en: Chrome developer tools – resources
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具 - 资源
- en: The Chrome developer tools similarly help display information related to the
    application cache. Although the user interface is a bit different, it contains
    all the same components needed to review the assets associated with your application
    cache. This view also includes the online status of your application; in this
    example, we are not online and idle.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具同样有助于显示与应用程序缓存相关的信息。虽然用户界面有点不同，但它包含了审查与您的应用程序缓存相关的所有必要组件。此视图还包括您的应用程序的在线状态；在这个例子中，我们不在线且空闲。
- en: Debugging using JavaScript
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript进行调试
- en: The application cache can also be debugged using JavaScript, and luckily for
    us, the implementation of the application cache manifest is extremely easy to
    interact with. There are multiple events we can listen to, including `progress`,
    `error`, and `updateready`. When we listen to these events, we can choose to implement
    a supplementary experience, but for our use case here, we’ll just log out the
    event.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序缓存也可以使用JavaScript进行调试，幸运的是，应用程序缓存清单的实现非常容易与之交互。我们可以监听多个事件，包括`progress`、`error`和`updateready`。当我们监听这些事件时，我们可以选择实现一个补充体验，但在这里，我们只是记录事件。
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding script, we listen to the events defined by the specification
    ([http://www.whatwg.org/specs/web-apps/current-work/#appcacheevents](http://www.whatwg.org/specs/web-apps/current-work/#appcacheevents))
    and call either the `handleCacheEvent` or `handleCacheError` methods. In each
    of these methods, we just log out the event itself; however, if we wanted to,
    we could create an alternate experience.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，我们监听规范定义的事件（[http://www.whatwg.org/specs/web-apps/current-work/#appcacheevents](http://www.whatwg.org/specs/web-apps/current-work/#appcacheevents)），并调用“handleCacheEvent”或“handleCacheError”方法。在这些方法中，我们只是记录事件本身；但是，如果我们愿意，我们可以创建一种替代体验。
- en: There are also a number of action methods that can be employed during the implementation
    of the application cache process. For example, we could manually update the cache
    using the `update` method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序缓存过程的实施过程中还有许多可以使用的操作方法。例如，我们可以使用“update”方法手动更新缓存。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although the preceding method could be helpful for us, remember that the cache
    will only update if the contents themselves have changed. In reality, the `update`
    method triggers the download process ([http://www.whatwg.org/specs/web-apps/current-work/#application-cache-download-process](http://www.whatwg.org/specs/web-apps/current-work/#application-cache-download-process)),
    which does not tell the browser to get the latest cache. The `swapCache` method
    is another action call that can be used to debug our applications by switching
    the cache to the latest version.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的方法对我们可能有所帮助，但请记住，只有内容本身发生了变化，缓存才会更新。实际上，“update”方法触发了下载过程（[http://www.whatwg.org/specs/web-apps/current-work/#application-cache-download-process](http://www.whatwg.org/specs/web-apps/current-work/#application-cache-download-process)），这并不会告诉浏览器获取最新的缓存。
    “swapCache”方法是另一个可以用来调试我们的应用程序的操作调用，它将缓存切换到最新版本。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Keep in mind that if we make this call, the assets are not updated automatically.
    The way we get the updated assets are on a page refresh. Based on the specification,
    an easier way to do what we need here would be to do `location.reload()` ([http://www.whatwg.org/specs/web-apps/current-work/#dom-appcache-swapcache](http://www.whatwg.org/specs/web-apps/current-work/#dom-appcache-swapcache)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果我们进行此调用，资产不会自动更新。获取更新后的资产的方法是刷新页面。根据规范，实现我们需要的更简单的方法是执行`location.reload()`（[http://www.whatwg.org/specs/web-apps/current-work/#dom-appcache-swapcache](http://www.whatwg.org/specs/web-apps/current-work/#dom-appcache-swapcache)）。
- en: At this point, we have a good idea about the application cache manifest, including
    how it functions, the implementation details, and ultimately how to debug it.
    Now we need to know how to handle offline interactions using the preceding methods
    and more. When we have a good understanding of both aspects, we’ll be able to
    create simple offline applications that utilize this technology.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们对应用程序缓存清单有了一个很好的了解，包括它的功能、实施细节以及最终如何调试它。现在我们需要知道如何使用前面的方法以及更多方法来处理离线交互。当我们对这两个方面有了很好的理解后，我们就能够创建利用这项技术的简单离线应用程序。
- en: Handling offline applications
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理离线应用程序
- en: At this point, we have learned how to cache our files on the client side using
    the application manifest interface to not only speed up our site, but also make
    it available to our users when they are offline. However, this technique doesn’t
    take into account what you should do to handle interactions by the user. In this
    case, we need to make sure our application has usable parts that can make the
    application seamless when they lose connection.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何使用应用程序清单接口在客户端缓存我们的文件，以加快网站速度，同时使其在用户离线时可用。然而，这种技术并没有考虑到用户交互时应该做些什么。在这种情况下，我们需要确保我们的应用程序具有可用的部分，以使应用程序在失去连接时无缝运行。
- en: A simple use case
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的用例
- en: Before we proceed, let’s define a simple use case for why handling an offline
    application is useful to both the user and us. Let’s say we have a user named
    John, and John is commuting to work and is currently updating his profile in a
    web application on his iPhone. The commute involves some spotty network connections,
    and sometimes he does lose connection. He would like to be able to continue using
    the application while he is on his way to work, instead of waiting to do so at
    work.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们定义一个简单的用例，说明为什么处理离线应用对用户和我们都有用。假设我们有一个名叫约翰的用户，约翰正在通勤上班，目前正在iPhone上的Web应用程序中更新他的个人资料。通勤途中的网络连接有时不太稳定，有时会失去连接。他希望能够在上班途中继续使用应用程序，而不是等到上班后再使用。
- en: Given the world we live in today, and how a spotty interaction could really
    cost a company a customer, we definitely want to handle this gracefully. It doesn’t
    mean that we will provide all the services to the user while they are offline,
    that would be unreasonable. What this does mean is that we need to inform the
    user that they are offline and that certain features are currently disabled for
    this reason.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们今天生活的世界，一个不稳定的交互可能会让公司失去一个客户，我们肯定希望能够优雅地处理这种情况。这并不意味着我们会在用户离线时为其提供所有服务，那是不合理的。这意味着我们需要告知用户他们处于离线状态，由于这个原因，某些功能目前被禁用。
- en: Detecting network connectivity
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测网络连接
- en: 'Now, you may be asking, “How do you detect a network connection?” Well, it’s
    actually pretty simple. Let’s take a look at the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会问：“如何检测网络连接？”嗯，实际上很简单。让我们看一下下面的代码：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s review the preceding code briefly. The first part of this code creates
    a cached element in memory and stores it in the `$p` variable. The next line,
    which is the most important, detects online connectivity by checking the `navigator`
    object’s `onLine` property. If the person is not online, we finally set the text
    of that cached element and append it to our previous code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下前面的代码。这段代码的第一部分在内存中创建了一个缓存元素，并将其存储在变量`$p`中。接下来的一行是最重要的，它通过检查`navigator`对象的`onLine`属性来检测在线连接。如果用户不在线，我们最终设置了缓存元素的文本，并将其附加到我们之前的代码中。
- en: 'If our application were offline, it would look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序处于离线状态，它将如下所示：
- en: '![Detecting network connectivity](img/1024OT_08_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![检测网络连接](img/1024OT_08_04.jpg)'
- en: Detecting network connectivity
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 检测网络连接
- en: Of course, this is a stripped down version of how you would handle network connectivity
    in your real-world applications, but it showcases that you can pick up the status
    of the network and determine the experience offline. This is great for us because
    it opens up a new world in web development that we haven’t been able to explore.
    But of course, this also entails some complex forethought into how such experiences
    are handled.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是你在现实世界应用中处理网络连接的简化版本，但它展示了你可以获取网络状态并确定离线体验。这对我们来说很棒，因为它为我们打开了一个我们以前无法探索的网络开发新世界。但当然，这也需要一些复杂的预先考虑，以确定如何处理这样的体验。
- en: Going back to the use case we defined, the user wanted to update his/her profile
    information, and obviously this would be extremely difficult to achieve without
    the necessary resources. Fortunately for us, there are two new technologies we
    can use to accomplish simple tasks similar to this use case. So, let’s briefly
    go over these two technologies.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们定义的用例，用户想要更新他/她的个人资料信息，显然如果没有必要的资源，这将是非常困难的。幸运的是，我们有两种新技术可以用来完成类似这个用例的简单任务。因此，让我们简要地介绍一下这两种技术。
- en: The localStorage API
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: localStorage API
- en: Although offline status is a feature of the new HTML5 specification, it goes
    hand in hand with another feature of HTML5, namely storage ([http://dev.w3.org/html5/webstorage/](http://dev.w3.org/html5/webstorage/)).
    Storage is something that many developers have thought previously to be a one-to-one
    relationship with a backend system. This is no longer true, since we are now able
    to save data on the client device using the `localStorage` API.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管离线状态是新的HTML5规范的一个特性，但它与HTML5的另一个特性——存储（[http://dev.w3.org/html5/webstorage/](http://dev.w3.org/html5/webstorage/)）密切相关。存储是许多开发人员之前认为与后端系统有一对一关系的东西。这不再是真的，因为现在我们能够使用`localStorage`API在客户端设备上保存数据。
- en: 'Let’s cover a brief example using `localStorage` to see how it works:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简短的例子来使用`localStorage`，看看它是如何工作的：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code we just wrote here has multiple parts to it. First, there is a global
    object named `localStorage`. This object has methods that a developer can interact
    with, including the `setItem` method. Lastly, the `setItem` method takes two parameters,
    both of which are strings.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚写的代码有多个部分。首先，有一个名为`localStorage`的全局对象。这个对象有开发人员可以交互的方法，包括`setItem`方法。最后，`setItem`方法接受两个参数，都是字符串。
- en: 'To retrieve the value of the item we just set, we would do this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索我们刚刚设置的项目的值，我们会这样做：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Pretty cool, huh? The only downside is that the current implementation of this
    describes the API as only accepting strings for each key/value pair, similar to
    a JavaScript object. However, we can go beyond this limitation by doing the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，对吧？唯一的缺点是，当前的实现描述了API只接受每个键/值对的字符串，类似于JavaScript对象。然而，我们可以通过以下方式克服这个限制：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The difference here is that we are also accessing the built-in `JSON` object
    that turns the object into a string so that the `localStorage` API can efficiently
    store this as a plain string. Otherwise, you would store `[object Object]`, which
    is just the type of the object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的区别在于，我们还访问了内置的`JSON`对象，将对象转换为字符串，以便`localStorage`API可以高效地将其存储为纯字符串。否则，你会存储`[object
    Object]`，这只是对象的类型。
- en: 'To access this information, we would do the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问这些信息，我们需要做以下操作：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you run this code in the console, you should then see an object. What the
    `JSON` functionality has done is turn the “stringified” object into a traditional
    JavaScript object. This makes accessing the data we have stored easy and efficient.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在控制台中运行这段代码时，你应该会看到一个对象。`JSON`功能所做的是将“字符串化”的对象转换为传统的JavaScript对象。这使得访问我们存储的数据变得简单和高效。
- en: As you can start to gather, we have the power to store information on the client
    side that we could not in the past, allowing us to temporarily allow the user
    to interact with certain aspects of the site while the application is offline.
    Combining the storage and offline features of HTML5 allows us to bring deeper
    interactions to our applications while meeting client and user expectations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你开始了解的那样，我们有能力在客户端存储信息，这是过去无法做到的，这使得我们能够在应用离线时暂时允许用户与网站的某些方面进行交互。结合HTML5的存储和离线功能，使我们能够为我们的应用带来更深入的交互，同时满足客户和用户的期望。
- en: However, the limitation to `localStorage` is the amount of information that
    can be stored. For this reason, another technology exists, called `IndexedDB`.
    Although its support is not consistent and the technology is still in experimental
    stages across browsers, it’s worth taking a look at. Unfortunately, we won’t cover
    that technology in this book, due to its lack of support in iOS Safari, but it’s
    still worth some review ([https://developer.mozilla.org/en-US/docs/IndexedDB](https://developer.mozilla.org/en-US/docs/IndexedDB)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`localStorage`的限制在于可以存储的信息量。因此，另一种技术被称为`IndexedDB`。尽管它的支持在各个浏览器中并不一致，而且技术仍处于实验阶段，但它值得一看。不幸的是，由于在iOS
    Safari中缺乏支持，我们在本书中不会涉及这项技术，但它仍然值得一些审查（[https://developer.mozilla.org/en-US/docs/IndexedDB](https://developer.mozilla.org/en-US/docs/IndexedDB)）。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the basics of application cache including an example
    of its implementation. Our review pointed out the benefits of using this new technology,
    but also discussed the downsides, such as the inconsistent support, mostly with
    older browsers, and the issues we face when testing it. We learned how to handle
    offline interactions and how `localStorage` and `IndexedDB` allow us to store
    information temporarily on the client side as a solution. In the next chapter,
    we’ll discuss performance optimization and see how this has played out in the
    application developed in this book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了应用程序缓存的基础知识，包括其实施示例。我们的回顾指出了使用这项新技术的好处，但也讨论了缺点，比如不一致的支持，主要是在旧版浏览器中，以及在测试时面临的问题。我们学会了如何处理离线交互，以及`localStorage`和`IndexedDB`如何允许我们在客户端临时存储信息作为解决方案。在下一章中，我们将讨论性能优化，并看看这在本书中开发的应用程序中是如何发挥作用的。
