["```html\n<canvas width=\"600\" height=\"400\">\n  Sorry, your browser doesn't support canvas.\n</canvas>\n```", "```html\nvar context = $(\"canvas\")[0].getContext(\"2d\");\n```", "```html\ncontext.clearRect(0, 0, canvas.width, canvas.height);\n```", "```html\n<div id=\"main\">\n  <canvas width=\"600\" height=\"400\">\n    Sorry, your browser doesn't support canvas.\n  </canvas>\n</div>\n```", "```html\n#main\n{\n    text-align: center;\n}\n#main>canvas\n{\n    cursor: crosshair;\n    margin: 1em auto;\n    background-color: white;\n    box-shadow: 0 0 8px 2px #555;\n}\n```", "```html\nfunction Canvas2D($canvas)\n{\n    var context = $canvas[0].getContext(\"2d\"),\n        width = $canvas[0].width,\n        height = $canvas[0].height;\n}\n```", "```html\nvar pageOffset = $canvas.offset();\n```", "```html\nthis.getCanvasPoint = function(pageX, pageY)\n{\n    return {\n        x: pageX - pageOffset.left,\n        y: pageY - pageOffset.top\n    }\n};\n```", "```html\n$(window).resize(function() { pageOffset = $canvas.offset(); });\n```", "```html\nfunction CanvasPadApp()\n{\n    var version = \"4.1\",\n canvas2d = new Canvas2D($(\"#main>canvas\"));\n    // ...\n```", "```html\n<footer>\n <span id=\"coords\">0, 0</span>\n</footer>\n```", "```html\nthis.start = function()\n{\n    $(\"#app header\").append(version);\n    $(\"#main>canvas\").mousemove(onMouseMove);\n}\n```", "```html\nfunction onMouseMove(e)\n{\n    var canvasPoint = canvas2d.getCanvasPoint(e.pageX, e.pageY);\n    showCoordinates(canvasPoint);\n}\nfunction showCoordinates(point)\n{\n    $(\"#coords\").text(point.x + \", \" + point.y);\n}\n```", "```html\ncontext.beginPath();\ncontext.moveTo(10, 10);\ncontext.lineTo(80, 100);\ncontext.stroke();\n```", "```html\ncontext.beginPath();\ncontext.moveTo(100, 10);\ncontext.lineTo(150, 90);\ncontext.lineTo(200, 20);\ncontext.closePath();\ncontext.stroke();\n```", "```html\ncontext.beginPath();\ncontext.moveTo(100, 10);\ncontext.lineTo(150, 90);\ncontext.lineTo(200, 20);\ncontext.closePath();\ncontext.fill();\ncontext.stroke();\n\n```", "```html\n$(\"#main>canvas\").mousemove(onMouseMove)\n    .mousedown(onMouseDown)\n    .mouseup(onMouseUp)\n    .mouseout(onMouseUp);\n```", "```html\nvar version = \"4.1\",\ncanvas2d = new Canvas2D($(\"#main>canvas\")),\ndrawing = false,\n points = [],\n actions = [];\n```", "```html\nfunction onMouseDown(e)\n{\n e.preventDefault();\n    penDown(e.pageX, e.pageY);\n}\nfunction penDown(pageX, pageY)\n{\n    drawing = true;\n    points = [];\n    points.push(canvas2d.getCanvasPoint(pageX, pageY));\n    actions.push(points);\n}\n```", "```html\nfunction onMouseMove(e)\n{\n    penMoved(e.pageX, e.pageY);\n}\nfunction penMoved(pageX, pageY)\n{\n    var canvasPoint = canvas2d.getCanvasPoint(pageX, pageY);\n    showCoordinates(canvasPoint);\n\n    if (drawing)\n    {\n        points.push(canvasPoint);\n        redraw();\n    }\n}\n```", "```html\nfunction redraw()\n{\n    canvas2d.clear();\n    for (var i in actions)\n    {\n        canvas2d.drawPoints(actions[i]);\n    }\n}\n```", "```html\nthis.clear = function()\n{\n    context.clearRect(0, 0, width, height);\n    return this;\n};\n```", "```html\nthis.drawPoints = function(points)\n{\n    context.beginPath();\n    context.moveTo(points[0].x, points[0].y);\n    for (var i = 1; i < points.length; i++)\n    {\n        context.lineTo(points[i].x, points[i].y);\n    }\n    context.stroke();\n    return this;\n};\n```", "```html\nfunction onMouseUp(e)\n{\n    penUp();\n}\nfunction penUp()\n{\n    drawing = false;\n}\n```", "```html\ncontext.lineWidth = 4;\ncontext.strokeStyle = \"black\";\ncontext.fillStyle = \"black\";\ncontext.globalAlpha = 1.0;\ncontext.lineJoin = \"round\";\ncontext.lineCap = \"round\";\n```", "```html\nthis.penWidth = function(newWidth)\n{\n    if (arguments.length)\n    {\n        context.lineWidth = newWidth;\n        return this;\n    }\n    return context.lineWidth;\n};\nthis.penColor = function(newColor)\n{\n    if (arguments.length)\n    {\n        context.strokeStyle = newColor;\n        context.fillStyle = newColor;\n        return this;\n    }\n    return context.strokeStyle;\n};\nthis.penOpacity = function(newOpacity)\n{\n    if (arguments.length)\n    {\n        context.globalAlpha = newOpacity;\n        return this;\n    }\n    return context\n};\n```", "```html\n<div id=\"toolbar\">\n  <div class=\"dropdown-menu\">\n    <button data-action=\"menu\">Color</button>\n    <ul id=\"color-menu\"data-option=\"penColor\" class=\"menu\">\n      <li data-value=\"red\"></li>\n      <li data-value=\"orange\"></li>\n      <li data-value=\"yellow\"></li>\n      <li data-value=\"green\"></li>\n      <li data-value=\"blue\"></li>\n      <li data-value=\"purple\"></li>\n      <li data-value=\"black\" class=\"selected\"></li>\n      <li data-value=\"white\"></li>\n    </ul>\n  </div>\n<div class=\"dropdown-menu\">\n    <button data-action=\"menu\">Opacity</button>\n      <ul data-option=\"penOpacity\" class=\"menu\">\n        <li data-value=\".1\">10%</li>\n        <li data-value=\".2\">20%</li>\n        <li data-value=\".3\">30%</li>\n        <li data-value=\".4\">40%</li>\n        <li data-value=\".5\">50%</li>\n        <li data-value=\".6\">60%</li>\n        <li data-value=\".7\">70%</li>\n        <li data-value=\".8\">80%</li>\n        <li data-value=\".9\">90%</li>\n        <li data-value=\"1\" class=\"selected\">100%</li>\n      </ul>\n  </div>\n  <div class=\"dropdown-menu\">\n    <button data-action=\"menu\">Width</button>\n      <ul id=\"width-menu\" data-option=\"penWidth\" class=\"menu\">\n        <li data-value=\"1\">1</li>\n        <li data-value=\"2\">2</li>\n        <li data-value=\"4\" class=\"selected\">4</li>\n        <li data-value=\"6\">6</li>\n        <li data-value=\"8\">8</li>\n        <li data-value=\"10\">10</li>\n        <li data-value=\"12\">12</li>\n        <li data-value=\"14\">14</li>\n        <li data-value=\"16\">16</li>\n      </ul>\n  </div> |\n  <button data-action=\"undo\">Undo</button> |\n  <button data-action=\"clear\">Clear</button>\n</div>\n```", "```html\n#toolbar\n{\n    padding: 2px;\n    background-color: rgba(0, 0, 0, 0.5);\n}\n#toolbar button\n{\n    border: none;\n    background-color: transparent;\n    color: white;\n    font-size: 1em;\n}\n\n```", "```html\n#toolbar .dropdown-menu\n{\n    display: inline-block;\n    position: relative;\n}\n#toolbar ul.menu\n{\n    display: none;\n    position: absolute;\n    top: 100%;\n    left: 0;\n```", "```html\n    margin: 0;\n    padding-left: 1.5em;\n    border: 1px solid black;\n    box-shadow: 2px 2px 8px 1px rgba(0, 0, 0, 0.5);\n    background-color: silver;\n    color: black;\n    list-style-type: none;\n}\n```", "```html\n#toolbar ul.menu>li\n{\n    margin: 0;\n    min-width: 4em;\n    height: 2em;\n    border-width: 0;\n    background-color: WhiteSmoke;\n    font-size: .75em;\n    cursor: pointer;\n}\n#toolbar ul.menu>li.selected\n{\n    list-style-type: circle;\n    background-color: lightblue;\n}\n```", "```html\nfunction Toolbar($toolbar)\n{\n    var _this = this;\n```", "```html\nthis.toolbarButtonClicked = function(action)\n{\n    return false;\n};\nthis.menuItemClicked = function(option, value)\n{\n    return false;\n};\n```", "```html\nthis.hideMenus = function()\n{\n    $(\".menu\", $toolbar).hide();\n}\n```", "```html\n$(\"button\", $toolbar).click(function(e) {\n  onToolbarButtonClicked($(this));\n});\n```", "```html\nfunction onToolbarButtonClicked($button)\n{\n    var action = $button.data(\"action\");\n    if (!_this.toolbarButtonClicked(action))\n    {\n        if (action == \"menu\")\n        {\n            showMenu($button.siblings(\"ul.menu\"));\n        }\n        else\n        {\n            _this.hideMenus();\n        }\n    }\n}\n```", "```html\nfunction showMenu($menu)\n{\n    if ($menu.is(\":visible\"))\n    {\n        $menu.fadeOut(\"fast\");\n    }\n    else\n    {\n        // Hide any open menus\n        _this.hideMenus();\n        // Show this menu\n        $menu.fadeIn(\"fast\");\n    }\n}\n```", "```html\n$(\".menu>li\", $toolbar).click(function(e) {\n  onMenuItemClicked($(this));\n});\n```", "```html\nfunction onMenuItemClicked($item)\n{\n    var $menu = $item.parent();\n    var option = $menu.data(\"option\");\n    var value = $item.data(\"value\");\n    if (!_this.menuItemClicked(option, value))\n    {\n        $item.addClass(\"selected\")\n             .siblings().removeClass(\"selected\");\n        $menu.fadeOut(\"fast\");\n    }\n}\n```", "```html\nvar version = \"4.2\",\ncanvas2d = new Canvas2D($(\"#main>canvas\")),\ntoolbar = new Toolbar($(\"#toolbar\")),\n        // code not shown...\n```", "```html\ntoolbar.toolbarButtonClicked = toolbarButtonClicked;\ntoolbar.menuItemClicked = menuItemClicked;\n```", "```html\nfunction toolbarButtonClicked(action)\n{\n    switch (action)\n    {\n        case \"clear\":\n            if (confirm(\"Clear the canvas?\"))\n            {\n                actions = [];\n                redraw();\n            }\n            break;\n        case \"undo\":\n            actions.pop();\n            redraw();\n            break;\n    }\n}\n```", "```html\nfunction menuItemClicked(option, value)\n{\n    canvas2d[option](value);\n}\n```", "```html\nfunction initColorMenu()\n{\n    $(\"#color-menu li\").each(function(i, e) {\n        $(e).css(\"background-color\", $(e).data(\"value\"));\n    });\n}\n```", "```html\nfunction initWidthMenu()\n{\n    $(\"#width-menu li\").each(function(i, e) {\n        $(e).css(\"border-bottom\",\n                 $(e).data(\"value\") + \"px solid black\");\n    });\n}\n```", "```html\nfunction newAction(tool)\n{\n    return {\n        tool: tool,\n        color: canvas2d.penColor(),\n        width: canvas2d.penWidth(),\n        opacity: canvas2d.penOpacity(),\n        points: []\n    };\n}\n```", "```html\nvarversion = \"4.2\",\n    // code not shown...\n  curTool = \"pen\",\n  curAction = newAction(curTool),\n    actions = [];\n```", "```html\nfunction penDown(pageX, pageY)\n{\n    drawing = true;\n curAction = newAction(curTool);\n curAction.points.push(\n canvas2d.getCanvasPoint(pageX, pageY));\n actions.push(curAction);\n}\n```", "```html\nfunction penMoved(pageX, pageY)\n{\n    var canvasPoint = canvas2d.getCanvasPoint(pageX, pageY);\n    showCoordinates(canvasPoint);\n    if (drawing)\n    {\n        curAction.points.push(canvasPoint);\n        redraw();\n    }\n}\n```", "```html\nfunction penUp()\n{\n    if (drawing)\n    {\n        drawing = false;\n        if (curAction.points.length < 2)\n        {\n            actions.pop();\n        }\n    }\n}\n```", "```html\nfunction redraw()\n{\n    canvas2d.clear();\n canvas2d.savePen();\n\n    for (var i in actions)\n    {\n var action = actions[i];\n canvas2d.penColor(action.color)\n .penWidth(action.width)\n .penOpacity(action.opacity);\n\n        canvas2d.drawPoints(action.points);\n    }\n\n canvas2d.restorePen();\n}\n```", "```html\nthis.savePen = function()\n{\n    context.save();\n    return this;\n};\nthis.restorePen = function()\n{\n    context.restore();\n    return this;\n};\n```", "```html\n<div id=\"toolbar\">\n  <div class=\"dropdown-menu\">\n    <button data-action=\"menu\">Tool</button>\n      <uldata-option=\"drawingTool\" class=\"menu\">\n        <li data-value=\"pen\" class=\"selected\">Pen</li>\n        <li data-value=\"line\">Line</li>\n      </ul>\n    </div>\n```", "```html\nfunction menuItemClicked(option, value)\n{\n    switch (option)\n    {\n        case \"drawingTool\":\n            curTool = value;\n            break;\n        default;\n            canvas2d[option](value);\n    } \n}\n```", "```html\nfunction penMoved(pageX, pageY)\n{\n    var canvasPoint = canvas2d.getCanvasPoint(pageX, pageY);\n    showCoordinates(canvasPoint);\n\n    if (drawing)\n    {\n if (curTool == \"pen\")\n {\n // Add another point\n curAction.points.push(canvasPoint);\n }\n else\n {\n // Change the second point\n curAction.points[1] = canvasPoint;\n }\n        redraw();\n    }\n}\n```", "```html\nfunction redraw()\n{\n    canvas2d.clear();\n    canvas2d.savePen();\n\n    for (var i in actions)\n    {\n        var action = actions[i];\n        canvas2d.penColor(action.color)\n                .penWidth(action.width)\n                .penOpacity(action.opacity);\n\n switch (action.tool)\n        {\n case \"pen\":\n canvas2d.drawPoints(action.points);\n break;\n case \"line\":\n canvas2d.drawLine(action.points[0], \n action.points[1]);\n break;\n }\n    }\n    canvas2d.restorePen();\n}\n```", "```html\nthis.drawLine = function(point1, point2)\n{\n    context.beginPath();\n    context.moveTo(point1.x, point1.y);\n context.lineTo(point2.x, point2.y);\n    context.stroke();\n    return this;\n};\n```", "```html\ncontext.strokeRect(350, 10, 50, 90);\n```", "```html\ncontext.fillRect(425, 10, 50, 90);\n```", "```html\n<li data-value=\"rect\">Rectangle</li>\n\n```", "```html\nthis.drawRect = function(point1, point2, fill)\n{\n    var w = point2.x - point1.x,\n        h = point2.y - point1.y;\n    if (fill) context.fillRect(point1.x, point1.y, w, h);\n    else context.strokeRect(point1.x, point1.y, w, h);\n    return this;\n};\n```", "```html\n<div class=\"dropdown-menu\">\n  <button data-action=\"menu\">Fill</button>\n    <ul data-option=\"fillShapes\" class=\"menu\">\n      <li data-value=\"true\" class=\"selected\">Yes</li>\n      <li data-value=\"false\">No</li>\n    </ul>\n</div>\n```", "```html\nvar version = \"4.3\",\n    // code not shown...\n  fillShapes = true;\n```", "```html\nfunction newAction(tool)\n{\n    return {\n        tool: tool,\n        color: canvas2d.penColor(),\n        width: canvas2d.penWidth(),\n        opacity: canvas2d.penOpacity(),\n fill: fillShapes,\n        points: []\n    };\n  }\n```", "```html\nfunction menuItemClicked(option, value)\n{\n    switch (option)\n    {\n        case \"drawingTool\":\n            curTool = value;\n            break;\n case \"fillShapes\":\n fillShapes = Boolean(value);\n break;\n        default:\n            canvas2d[option](value);\n    }\n}\n```", "```html\nswitch (action.tool)\n{\n    // code not shown...\n case \"rect\":\n canvas2d.drawRect(action.points[0],\n action.points[1],\n action.fill);\n break;\n}\n```", "```html\narc(centerX, centerY, radius, startAngle, endAngle, clockwise)\n```", "```html\ncontext.beginPath();\ncontext.arc(100, 200, 40, 0, Math.PI / 2, false);\ncontext.stroke();\n```", "```html\ncontext.beginPath();\ncontext.arc(100, 200, 40, 0, 2 * Math.PI, false);\ncontext.stroke();\n```", "```html\nfunction toRadians(deg)\n{\n    return deg * Math.PI / 180;\n}\n```", "```html\n<li data-value=\"circle\">Circle</li>\n```", "```html\nthis.drawCircle = function(center, radius, fill)\n{\n    context.beginPath();\n    context.arc(center.x, center.y, radius, 0, 2 * Math.PI, true)\n    if (fill) context.fill();\n    else context.stroke();\n    return this;\n};\n```", "```html\nswitch (action.tool)\n{\n    // code not shown...\n case \"circle\":\n var dx = Math.abs(action.points[1].x \u2013 \n action.points[0].x);\n var dy = Math.abs(action.points[1].y \u2013 \n action.points[0].y);\n var radius = Math.min(dx, dy);\n canvas2d.drawRect(action.points[0], radius, \n action.fill);\n break;\n}\n```"]