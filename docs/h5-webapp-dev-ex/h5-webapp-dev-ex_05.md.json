["```html\n<li data-value=\"text\">Text</li>\n```", "```html\nthis.drawText = function(text, point, fill)\n{\n    if (fill)\n    {\n        context.fillText(text, point.x, point.y);\n    }\n    else\n    {\n        context.strokeText(text, point.x, point.y);\n    }\n};\n```", "```html\ncontext.font = \"24px Verdana, Geneva, sans-serif\";\ncontext.textBaseline = \"top\";\n```", "```html\n<div id=\"text-input\">\n    <input type=\"text\" />\n</div>\n```", "```html\n#text-input\n{\n    display: none;\n    position: absolute;\n    width: 8em; \n}\n#text-input>input\n{\n    font-size: 24px;\n}\n```", "```html\nfunction penDown(pageX, pageY)\n{\n    if (curTool == \"text\")\n {\n // Check if it's already visible\n if ($(\"#text-input\").is(\":visible\")) return;\n showTextInput(pageX, pageY);\n }\n    else\n    {\n        drawing = true;\n    }\n\n    // code not shown...\n}\n```", "```html\nfunction showTextInput(pageX, pageY)\n{\n    $(\"#text-input\").css(\"top\", pageY)\n                    .css(\"left\", pageX)\n                    .fadeIn(\"fast\");\n    $(\"#text-input input\").val(\"\").focus();\n}\n```", "```html\n$(\"#text-input input\").keydown(function(e) { \n    checkTextInput(e.which);\n});\n```", "```html\nfunction checkTextInput(key)\n{\n    if (key == 13) // Enter key\n    {\n        curAction.text =  $(\"#text-input input\").val();\n        $(\"#text-input\").hide();\n        redraw();\n    }\n    else if (key == 27) // Escape\n    {\n        actions.pop();\n        $(\"#text-input\").hide();\n    }\n}\n```", "```html\nswitch (action.tool)\n{\n    // code not shown...\n    case \"text\":\n canvas2d.drawText(action.text, action.points[0],\n action.fill);\n break;\n}\n```", "```html\nthis.drawEllipse = function(center, endPoint, fill)\n{\n    var rx = Math.abs(endPoint.x - center.x);\n    var ry = Math.abs(endPoint.y - center.y);\n    var radius = Math.max(rx, ry);\n    var scaleX = rx / radius;\n    var scaleY = ry / radius;\n\n    context.save();\n    context.translate(center.x, center.y);\n    context.scale(scaleX, scaleY);\n    context.beginPath();\n    context.arc(0, 0, radius, 0, Math.PI * 2, true);\n    context.closePath();\n    if (fill) context.fill();\n    else context.stroke();\n    context.restore();\n\n    return this;\n};\n```", "```html\n<li data-value=\"ellipse\">Ellipse</li>\n```", "```html\nswitch (action.tool)\n{\n    // code not shown...\n    case \"ellipse\":\n        canvas2d.drawEllipse(action.points[0], action.points[1], \n            action.fill);\n        break;\n}\n```", "```html\n<button data-action=\"save\">Save</button>\n```", "```html\nswitch (action.tool)\n{\n    // code not shown...\n    case \"save\":\n        var url = $(\"#main>canvas\")[0].toDataURL();\n        window.open(url, \"CanvasPadImage\");\n        break;\n}\n```", "```html\nvar touchSupported = \"ontouchstart\" in document.documentElement;\n```", "```html\n(function($)\n{\n    $.fn.touchstart = function(handler)\n    {\n        this.each(function(i, e) { \n            e.addEventListener(\"touchstart\", handler); });\n        return this;\n    };\n    $.fn.touchmove = function(handler)\n    {\n        this.each(function(i, e) { \n            e.addEventListener(\"touchmove\", handler); });\n        return this;\n    };\n\n    $.fn.touchend = function(handler)\n    {\n        this.each(function(i, e) { \n            e.addEventListener(\"touchend\", handler); });\n        return this;\n    };\n\n    $.isTouchSupported =\n        (\"ontouchstart\" in document.documentElement);\n})(jQuery);\n```", "```html\nif ($.isTouchSupported)\n{\n    $(\"#main>canvas\").touchstart(onTouchStart)\n        .touchmove(onTouchMove)\n        .touchend(onTouchEnd);\n}\nelse\n{\n    $(\"#main>canvas\").mousedown(onMouseDown)\n        .mousemove(onMouseMove)\n        .mouseup(onMouseUp)\n        .mouseout(onMouseUp);\n}\n```", "```html\nfunction onTouchStart(e)\n{\n    e.stopPropagation();\n    e.preventDefault();\n    penDown(e.touches[0].pageX, e.touches[0].pageY);\n}\n```", "```html\nfunction onTouchMove(e)\n{\n    e.stopPropagation();\n    e.preventDefault();\n    penMoved(e.touches[0].pageX, e.touches[0].pageY);\n}\n```", "```html\nfunction onTouchEnd(e)\n{\n    penUp();\n}\n```", "```html\n<body>\n    <div id=\"app\">\n        <header>Photo Pad </header>\n        <div id=\"main\">\n            <div id=\"toolbar\">\n                <div class=\"dropdown-menu\">\n                    <button data-action=\"menu\">Load</button>\n                    <ul id=\"load-menu\" data-option=\"file-picker\"\n                        class=\"file-picker menu\">\n                        <li data-value=\"file-picker\">\n                            <input type=\"file\" />\n                        </li>\n                    </ul>\n                </div>\n                <button data-action=\"save\">Save</button>\n                <div class=\"dropdown-menu\">\n                    <button data-action=\"menu\">Effects</button>\n                    <ul data-option=\"applyEffect\" class=\"menu\">\n                        <li data-value=\"invert\">Invert</li>\n                    </ul>\n                </div>\n            </div>\n            <canvas width=\"0\" height=\"0\">\n                Sorry, your browser doesn't support canvas.\n            </canvas>\n        </div>\n        <footer>Click load to choose a file</footer>\n    </div>\n</body>\n```", "```html\nfunction PhotoPadApp()\n{\n    var version = \"5.2\",\n        canvas = $(\"#main>canvas\")[0],\n        context = canvas.getContext(\"2d\"),\n        $img = $(\"<img>\");\n```", "```html\nfunction toolbarButtonClicked(action)\n{\n    switch (action)\n    {\n        case \"save\":\n            var url = canvas.toDataURL();\n            window.open(url, \"PhotoPadImage\");\n            break;\n    }\n}\n```", "```html\nthis.start = function()\n{\n    // code not shown...\n    if (window.File && window.FileReader)\n    {\n        $(\"#load-menu input[type=file]\").change(function(e) {\n            onLoadFile($(this));\n        });\n    }\n    else\n    {\n        loadImage(\"images/default.jpg\");\n    }\n}\n```", "```html\nfunction onLoadFile($input)\n{\n    var file = $input[0].files[0];\n    if (file.type.match(\"image.*\"))\n    {\n        var reader = new FileReader();\n        reader.onload = function() { loadImage(reader.result); };\n        reader.readAsDataURL(file);        \n    }\n    else\n    {\n        alert(\"Not a valid image type: \" + file.type);\n        setStatus(\"Error loading image!\");\n    }\n}\n```", "```html\nfunction loadImage(url)\n{\n    setStatus(\"Loading image\");\n    $img.attr(\"src\", url);\n    $img[0].onload = function()\n    {\n        // Here \"this\" is the image\n        canvas.width = this.width;\n        canvas.height = this.height;\n        context.drawImage(this, 0, 0);\n        setStatus(\"Choose an effect\");\n    }\n    $img[0].onerror = function()\n    {\n        setStatus(\"Error loading image!\");\n    }\n}\n```", "```html\nvar data = context.getImageData(0, 0, width, height);\n```", "```html\ncontext.putImageData(data, 0, 0);\n```", "```html\nvar imageEffects = function()\n{\n    function getImageData(canvas)\n    {\n        return canvas.getContext(\"2d\").getImageData(0, 0,\n            canvas.width, canvas.height)\n    }\n\n    function putImageData(canvas, imageData)\n    {\n        canvas.getContext(\"2d\").putImageData(imageData, 0, 0);\n    }\n```", "```html\n    function invert(canvas)\n    {\n        var imageData = getImageData(canvas);\n        var data = imageData.data;\n        for (var i = 0; i < data.length; i += 4)\n        {\n            data[i]   = 255 - data[i];   //red\n            data[i+1] = 255 - data[i+1]; //green\n            data[i+2] = 255 - data[i+2]; //blue\n            //data[i+3] is alpha\n        }\n\n        putImageData(canvas, imageData);\n    }\n```", "```html\n    return {\n        invert: invert\n    };\n}();\n```", "```html\nfunction menuItemClicked(option, value)\n{\n    if (option == \"applyEffect\")\n    {\n        imageEffects[value](canvas);\n    }\n}\n```", "```html\nfunction toBlackAndWhite(canvas)\n{\n    var imageData = getImageData(canvas);\n    var data = imageData.data;\n    for (var i = 0; i < data.length; i += 4)\n    {\n        var grayscale = (data[i] * 0.3) +\n            (data[i + 1] * .59) +\n            (data[i + 2] * .11);\n        data[i]   = grayscale;\n        data[i+1] = grayscale;\n        data[i+2] = grayscale;\n    }\n\n    putImageData(canvas, imageData);\n}\n```", "```html\n<li data-value=\"toBlackAndWhite\">B&amp;W</li>\n```", "```html\n<li data-value=\"toSpeia\">Sepia</li>\n```", "```html\nfunction toSepia(canvas, depth, intensity)\n{\n    depth = depth || 20;\n    intensity = intensity || 10;\n\n    var imageData = getImageData(canvas);\n    var data = imageData.data;\n    for (var i = 0; i < data.length; i += 4)\n    {\n        var grayscale = (data[i] * 0.3) +\n            (data[i + 1] * .59) +\n            (data[i + 2] * .11);\n        data[i]   = Math.min(255, grayscale + (depth * 2));\n        data[i+1] = Math.min(255, grayscale + depth);\n        data[i+2] = Math.max(0, grayscale - intensity);\n    }\n\n    putImageData(canvas, imageData);\n}\n```", "```html\n<li data-value=\"makeWaves\">Waves</li>\n```", "```html\nfunction makeWaves(canvas, amplitude, frequency, phase)\n{\n    amplitude = amplitude || 10;\n    frequency = frequency || 4;\n    phase = phase || 0;\n\n    var data = getImageData(canvas).data;\n    var newImageData = getImageData(canvas);\n    var newData = newImageData.data;\n    var width = newImageData.width;\n    var height = newImageData.height;\n\n    // Adjust frequency to height of image\n    frequency = frequency * 2 * Math.PI / height;\n\n    for (var y = 0; y < height; y++)\n    {\n        var xoff = 4 * Math.floor(amplitude *\n            Math.sin(y * frequency + phase));\n        var yoff = y * 4 * width;\n\n        for (var x = 0; x < width; x++)\n        {\n            var pos = yoff + x * 4;\n            newData[pos + xoff]     = data[pos];\n            newData[pos + xoff + 1] = data[pos+1];\n            newData[pos + xoff + 2] = data[pos+2];\n            newData[pos + xoff + 3] = data[pos+3];\n        }\n    }\n\n    putImageData(canvas, newImageData);\n}\n```"]