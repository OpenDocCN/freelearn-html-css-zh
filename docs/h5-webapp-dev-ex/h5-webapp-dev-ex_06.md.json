["```html\n<audio src=\"img/audioFile.mp3\" autoplay controls>\n    Your browser doesn't support audio.\n</audio>\n```", "```html\n<audio controls>\n    <source src=\"img/audioFile.mp3\">\n    <source src=\"img/audioFile.ogg\">\n    <source src=\"img/audioFile.wav\">\n</audio>\n```", "```html\nvar audio = $(\"<audio>\")[0];\naudio.src = \"2C.mp3\";\n```", "```html\naudio.addEventListener(\"canplaythrough\", function()\n{\n    audio.play();\n});\n```", "```html\nfunction AudioManager(audioPath)\n{\n    audioPath = audioPath || \"\";\n    var audios = {},\n        audioExt = getSupportedFileTypeExt();\n```", "```html\n    function getSupportedFileTypeExt()\n    {\n        var audio = $(\"<audio>\")[0];\n        if (audio.canPlayType(\"audio/ogg\")) return \".ogg\";\n        if (audio.canPlayType(\"audio/mpeg\")) return \".mp3\";\n        if (audio.canPlayType(\"audio/wav\")) return \".wav\";\n        return \"\";\n    };\n```", "```html\n    this.getAudio = function(name, onLoaded, onError)\n    {\n        var audio = audios[name];\n        if (!audio)\n        {\n            audio = createAudio(name, onLoaded, onError);\n            // Add to cache\n            audios[name] = audio;\n        }\n        else if (onLoaded)\n        {\n            onLoaded(audio);\n        }\n        return audio;\n    };\n```", "```html\n    function createAudio(name, onLoaded, onError)\n    {\n        var audio = $(\"<audio>\")[0];\n        audio.addEventListener(\"canplaythrough\", function()\n        {\n            if (onLoaded) onLoaded(audio);\n            audio.removeEventListener(\"canplaythrough\",\n                arguments.callee);\n        });\n        audio.onerror = function()\n        {\n            if (onError) onError(audio);\n        };\n        audio.src = audioPath + \"/\" + name + audioExt;\n        return audio;\n    }\n}\n```", "```html\nvar audioManager = new AudioManager(\"audio\");\nvar audio = audioManager.getAudio(\"2C\");\n```", "```html\nfunction PianoApp()\n{\n    var version = \"6.1\",\n        audioManager = new AudioManager(\"audio\");\n```", "```html\n<div id=\"keyboard\">\n    <div id=\"backboard\"></div>\n    <div class=\"keys\">\n        <div data-note=\"2C\" class=\"piano-key white\"></div>\n        <div data-note=\"2C#\" class=\"piano-key black\"></div>\n        <div data-note=\"2D\" class=\"piano-key white\"></div>\n        <div data-note=\"2D#\" class=\"piano-key black\"></div>\n        <div data-note=\"2E\" class=\"piano-key white\"></div>\n        <div data-note=\"2F\" class=\"piano-key white\"></div>\n        <div data-note=\"2F#\" class=\"piano-key black\"></div>\n        <div data-note=\"2G\" class=\"piano-key white\"></div>\n        <div data-note=\"2G#\" class=\"piano-key black\"></div>\n        <div data-note=\"2A\" class=\"piano-key white\"></div>\n        <div data-note=\"2A#\" class=\"piano-key black\"></div>\n        <div data-note=\"2B\" class=\"piano-key white\"></div>\n        <!-- third octave not shown -->\n        <div data-note=\"4C\" class=\"piano-key white\"></div>\n    </div>\n</div>\n```", "```html\n#app\n{\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: 4px;\n    background-color: #999;\n    /* browser specific gradients not shown */\n    background: linear-gradient(top, white, #003);\n}\n```", "```html\n#app>footer\n{\n    position: absolute;\n    bottom: 0;\n    padding: 0.25em;\n    color: WhiteSmoke;\n}\n```", "```html\n#main\n{\n    padding: 4px;\n    text-align: center;\n}\n```", "```html\n#keyboard\n{\n    padding-bottom: 6px;\n    background-color: saddlebrown;\n    /* browser specific gradients not shown */\n    background: linear-gradient(top, #2A1506, saddlebrown);\n    box-shadow: 3px 3px 4px 1px rgba(0, 0, 0, 0.9);\n}\n```", "```html\n#backboard\n{\n    position: relative;\n    height: 32px;\n    background-color: #2A1506;\n    border-bottom: 2px solid black;\n    box-shadow: 3px 3px 4px 1px rgba(0, 0, 0, 0.9);\n}\n```", "```html\n#keyboard .piano-key\n{\n    display: inline-block;\n    border-bottom-right-radius: 4px;\n    border-bottom-left-radius: 4px;\n    cursor: pointer;\n}\n```", "```html\n#keyboard .piano-key.white\n{\n    width: 50px;\n    height: 300px;\n    background-color: Ivory;\n    box-shadow: 3px 3px 4px 1px rgba(0, 0, 0, 0.7);\n    z-index: 1;\n}\n```", "```html\n#keyboard .piano-key.black\n{\n    position: relative;\n    width: 40px;\n    height: 200px;\n    left: -23px;\n    margin-right: -46px;\n    vertical-align: top;\n    background-color: black;\n    box-shadow: 2px 2px 3px 1px rgba(0, 0, 0, 0.6);\n    z-index: 2;\n}\n```", "```html\nfunction loadAudio()\n{\n    var count = 0,\n        loaded = 0,\n        error = false;\n\n    $(\".keyboard .piano-key\").each(function()\n    {\n        count++;\n        var noteName = escape($(this).data(\"note\"));\n        audioManager.getAudio(noteName,\n            function()\n            {\n                if (error) return;\n                if (++loaded == count) setStatus(\"Ready.\");\n                else setStatus(\"Loading \" +\n                        Math.floor(100 * loaded / count) + \"%\");\n            },\n            function(audio)\n            {\n                error = true;\n                setStatus(\"Error loading: \" + audio.src);\n            }\n        );\n    });\n}\n```", "```html\nfunction initKeyboard()\n{\n    var $keys = $(\".keyboard .piano-key\");\n    if ($.isTouchSupported)\n    {\n        $keys.touchstart(function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            keyDown($(this));\n        })\n        .touchend(function() { keyUp($(this)); })\n    }\n    else\n    {\n        $keys.mousedown(function() {\n            keyDown($(this));\n            return false;\n        })\n        .mouseup(function() { keyUp($(this)); })\n        .mouseleave(function() { keyUp($(this)); });\n    }\n}\n```", "```html\nfunction keyDown($key)\n{\n    if (!$key.hasClass(\"down\"))\n    {\n        $key.addClass(\"down\");\n        var noteName = $key.data(\"note\");\n        var audio = audioManager.getAudio(escape(noteName));\n        audio.currentTime = 0;\n        audio.play();\n    }\n}\n```", "```html\nfunction keyUp($key)\n{\n    $key.removeClass(\"down\");\n}\n```", "```html\n.keyboard .piano-key.white.down\n{\n    background-color: #F1F1F0;\n    /* Browser-specific gradients not shown */\n    background: linear-gradient(top, Ivory, #D5D5D0);\n    box-shadow: 2px 2px 3px 1px rgba(0, 0, 0, 0.6);\n}\n.keyboard .piano-key.black.down\n{\n    background-color: #111;\n    /* Browser-specific gradients not shown */\n    background: linear-gradient(top, Black, #222);\n    box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.6);\n}\n```", "```html\n<div data-note=\"2C\" data-keycode=\"Q\" class=\"piano-key white\" title=\"C2\"></div>\n<!\u2014elements not shown -->\n<div data-note=\"4C\" data-keycode=\"COMMA\" class=\"piano-key white\" title=\"C4\"></div>\n```", "```html\nfunction initKeyboard()\n{\n    // Code not shown...\n    $keys.each(function() {\n        var $key = $(this);\n        var keyCode = keyCodes[$key.data(\"keycode\")];\n        keyCodesToNotes[keyCode] = $key.data(\"note\");\n    });\n}\n```", "```html\nthis.start = function()\n{\n  // Code not shown... \n    $(document).keydown(onKeyDown)\n               .keyup(onKeyUp);\n}\n```", "```html\nfunction onKeyDown(e)\n{\n    var note = keyCodesToNotes[e.which];\n    if (note)\n    {\n        pressPianoKey(note);\n    }\n}\n```", "```html\nfunction onKeyUp(e)\n{\n    var note = keyCodesToNotes[e.which];\n    if (note)\n    {\n        releasePianoKey(note);\n    }\n}\n```", "```html\nfunction pressPianoKey(note)\n{\n    var $key = getPianoKeyElement(note);\n    keyDown($key);\n}\n```", "```html\nfunction releasePianoKey(note)\n{\n    var $key = getPianoKeyElement(note);\n    keyUp($key);\n}\n```", "```html\nfunction getPianoKeyElement(note)\n{\n    return $(\".keyboard .piano-key[data-note=\" + note + \"]\");\n}\n```", "```html\n<div id=\"main\">\n    <!-- keyboard not shown... -->\n    <div class=\"controls\">\n        <label for=\"sustain\">Sustain: </label>\n        <input type=\"checkbox\" id=\"sustain\" checked /><br />\n    </div>\n</div>\n```", "```html\nfunction PianoApp()\n{\n    var version = \"6.3\",\n    // Code not shown...\n    sustain = true;\n```", "```html\n$(\"#sustain\").change(function() { sustain = $(this).is(\":checked\"); });\n```", "```html\nfunction keyUp($key)\n{\n    $key.removeClass(\"down\");\n    if (!sustain)\n    {\n        var noteName = $key.data(\"note\");\n        var audio = audioManager.getAudio(escape(noteName));\n        audio.pause();\n    }\n}\n```", "```html\n<label for=\"volume\">Volume: </label>\n<input type=\"range\" id=\"volume\" min=\"1\" max=\"100\" value=\"100\" step=\"1\" />\n```", "```html\nfunction PianoApp()\n{\n    var version = \"6.3\",\n    // Code not shown...\n    sustain = true,\n    volume = 1.0;\n```", "```html\n$(\"#volume\").change(function() {\n    volume = parseInt($(this).val()) / 100;\n});\n```", "```html\naudio.currentTime = 0;\naudio.volume = volume;\naudio.play();\n```", "```html\n.controls\n{\n    margin-top: 2em;\n    color: white; \n}\n.controls input\n{\n    vertical-align: middle;\n}\n.controls input[type=range]\n{\n    width: 10em;\n}\n```", "```html\nfunction isInputTypeSupported(type)\n{\n    var $test = $(\"<input>\");\n    // Set input element to the type we're testing for\n    $test.attr(\"type\", type);\n    return ($test[0].type == type);\n}\n```", "```html\nif (!isInputTypeSupported(\"range\")) $(\"#volume\").css(\"width\", \"3em\");\n```"]