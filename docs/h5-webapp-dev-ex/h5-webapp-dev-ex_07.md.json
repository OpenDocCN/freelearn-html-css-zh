["```html\n<div id=\"splash\">\n    <h1>Piano Hero</h1>\n    <section class=\"loading\">\n        Loading audio...<br/>\n        <progress max=\"100\" value=\"0\"></progress>\n    </section>\n```", "```html\n    <section class=\"error\">\n        There was an error loading the audio.\n    </section>\n```", "```html\n    <section class=\"loaded hidden\">\n        <label>Choose a song</label>\n        <select id=\"select-song\">\n            <option value=\"rowBoat\">Row Your Boat</option>\n            <option value=\"littleStar\">\n              Twinkle, Twinkle, Little Star</option>\n            <option value=\"londonBridge\">London Bridge</option>\n            <option value=\"furElise\">Fur Elise</option>\n        </select><br/>\n        <label>Choose difficulty</label>\n        <select id=\"select-rate\">\n            <option value=\"0.5\">Slow (60bpm)</option>\n            <option value=\"1\" selected>Normal (120bpm)</option>\n            <option value=\"1.5\">Fast (180bpm)</option>\n        </select>\n        <p>\n            <button id=\"start-game\">Start Game</button>\n            <button id=\"start-song\">Play Song</button>\n        </p>\n    </section>\n</div>\n```", "```html\n#splash h1\n{\n    font-size: 6em;\n    color: #003;\n    text-transform: uppercase;\n    text-shadow: 3px 3px 0px #fff, 5px 5px 0px #003;\n}\n```", "```html\nfunction SplashPanel(audioManager)\n{\n    var $div = $(\"#splash\"),\n    error = false;\n```", "```html\n    this.show = function()\n    {\n        $div.fadeIn();\n        return this;\n    };\n    this.hide = function()\n    {\n        $div.hide();\n        return this;\n    };\n}\n```", "```html\naudioManager.getAudio(noteName,\n    function()\n    {\n        if (error) return;\n        if (++loaded == count) showOptions();\n        else updateProgress(loaded, count);\n    },\n    function(audio) { showError(audio); }\n);\n```", "```html\nfunction updateProgress(loadedCount, totalCount)\n{\n    var pctComplete = parseInt(100 * loadedCount / totalCount);\n    $(\"progress\", $div)\n        .val(pctComplete)\n        .text(pctComplete + \"%\");\n}\n```", "```html\nfunction showOptions()\n{\n    $(\".loading\", $div).hide();\n    $(\".options\", $div).fadeIn();\n}\n```", "```html\nfunction showError(audio)\n{\n    error = true;\n    $(\".loading\", $div).hide();\n    $(\".error\", $div)\n        .append(\"<div>\" + audio.src + \"<div>\")\n        .show();\n}\n```", "```html\n$(\".options button\", $div).click(function()\n{\n    var songName = $(\"#select-song>option:selected\", $div).val();\n    var rate = Number($(\"#select-rate>option:selected\", $div).val());\n    var playGame = ($(this).attr(\"id\") == \"start-game\");\n    app.startGame(songName, rate, playGame);\n});\n```", "```html\n<div id=\"game\">\n    <div id=\"notes-panel\">\n        <div class=\"title\">PIANO HERO</div>\n    </div>\n```", "```html\n    <div id=\"results-panel\">\n        <h1>Score: <span class=\"score\"></span></h1>\n        <p>\n            You got <span class=\"correct\"></span>\n            out of <span class=\"count\"></span> notes correct.\n        </p>\n        <p>\n            Note accuracy: <span class=\"note-accuracy\"></span>%<br/>\n            Timing accuracy: <span class=\"timing-accuracy\"></span>%\n        </p>\n    </div>\n```", "```html\n    <div class=\"keyboard\">\n        <div class=\"keys\">\n            <!-- Code not shown... -->\n        </div>\n        <div class=\"controls\">\n            <button id=\"stop-button\">Stop</button>\n            <button id=\"restart-button\">Restart</button>\n            <button id=\"quit-button\">Quit</button><br/>\n            <label for=\"sustain\">Sustain: </label>\n            <input type=\"checkbox\" id=\"sustain\" checked /><br />\n            <label for=\"volume\">Volume: </label>\n            <input type=\"range\" id=\"volume\" min=\"1\" max=\"100\"\n                value=\"100\" step=\"1\" />\n        </div>\n    </div>\n</div>\n```", "```html\nfunction GamePanel(audioManager)\n{\n    var $panel = $(\"#game\"),\n        $notesPanel = $(\"#notes-panel\"),\n        $resultsPanel = $(\"#results-panel\"),\n        practiceMode = false,\n        noteCount = 0,\n        notesCorrect = 0,\n        score = 0,\n        keyCodesToNotes = {},\n        sustain = true,\n        volume = 1.0;\n```", "```html\nthis.show = function()\n{\n    $panel.fadeIn(startGame);\n    return this;\n};\nthis.hide = function()\n{\n    $panel.hide();\n    return this;\n};\n```", "```html\nfunction PianoHeroApp()\n{\n    var version = \"7.1\",\n        audioManager = new AudioManager(\"audio\"),\n        splashPanel = new SplashPanel(audioManager),\n        gamePanel = new GamePanel(audioManager),\n        curPanel = undefined;\n```", "```html\n    function showPanel(panel)\n    {\n        if (curPanel) curPanel.hide();\n        curPanel = panel;\n        curPanel.show();\n    }\n```", "```html\n    this.startGame = function(songName, rate, playGame)\n    {\n        gamePanel.setOptions(songName, rate, playGame);\n        showPanel(gamePanel);\n    };\n```", "```html\n    this.quitGame = function()\n    {\n        showPanel(splashPanel);\n    };\n```", "```html\n    this.start = function()\n    {\n        $(document).keydown(function(e) { curPanel.onKeyDown(e); })\n                   .keyup(function(e) { curPanel.onKeyUp(e); });\n\n        showPanel(splashPanel);\n        splashPanel.loadAudio();\n    };\n```", "```html\nfunction AudioSequencer()\n{\n    var _events = [],\n        _playbackRate = 1,\n        _playing = false,\n        eventHandler = undefined,\n        timeoutID = 0;\n```", "```html\n    this.events = function(newEvents)\n    {\n        if (newEvents) {\n            _events = newEvents;\n            return this;\n        }\n        return _events;\n    };\n```", "```html\n    this.playbackRate = function(newRate)\n    {\n        if (newRate) {\n            _playbackRate = newRate;\n            return this;\n        }\n        return _playbackRate;\n    };\n```", "```html\n    this.isPlaying = function()\n    {\n        return _playing;\n    };\n```", "```html\n    this.startPlayback = function(callback, startPos)\n    {\n        startPos = startPos || 0;\n\n        if (!_playing && _events.length > 0)\n        {\n            _playing = true;\n            eventHandler = callback;\n            playEvent(startPos);\n            return true;\n        }\n        return false;\n    };\n```", "```html\n    function playEvent(index)\n    {\n        var event = _events[index];\n        eventHandler(event.event, event.note, index);\n\n        index++;\n        if (index < _events.length)\n        {\n            timeoutID = setTimeout(function()\n            {\n                playEvent(index);\n            },\n            _events[index].deltaTime * (1 / _playbackRate));\n        }\n        else _playing = false; // all done\n    }\n```", "```html\n    this.stopPlayback = function()\n    {\n        if (_playing)\n        {\n            _playing = false;\n            if (timeoutID) clearTimeout(timeoutID);\n            eventHandler = undefined;\n        }\n    };\n```", "```html\nAudioSequencer.eventCodes =\n{\n    noteOn: 1,\n    noteOff: 2,\n    cuePoint: 3,\n    endOfTrack: 4\n};\n```", "```html\nfunction GamePanel(audioManager)\n{\n    var sequencer = new AudioSequencer();\n```", "```html\n    this.setOptions = function(songName, rate, playGame)\n    {\n        sequencer.events(musicData[songName])\n                 .playbackRate(rate);\n        practiceMode = !playGame;\n        return this;\n    };\n```", "```html\nvar musicData =\n{\n    littleStar: [\n        { deltaTime: 0, event: 3, note: null },\n        { deltaTime: 0, event: 1, note: \"3C\" },\n        { deltaTime: 500, event: 2, note: \"3C\" },\n        { deltaTime: 0, event: 1, note: \"3C\" },\n        { deltaTime: 500, event: 2, note: \"3C\" },\n        { deltaTime: 0, event: 1, note: \"3G\" },\n        { deltaTime: 500, event: 2, note: \"3G\" },\n        // ...\n        { deltaTime: 0, event: 4, note: null }\n    ]\n};\n```", "```html\nfunction startGame()\n{\n    $resultsPanel.hide();\n    $notesPanel.show();\n    // Reset score\n    noteCount = 0;\n    notesCorrect = 0;\n    score = 0;\n    // Start interval for notes animation\n    intervalId = setInterval(function() { updateNotes(); },\n        1000 / framesPerSecond);\n    // Start playback of the song\n    sequencer.startPlayback(onAudioEvent, 0);\n}\n```", "```html\nfunction onAudioEvent(eventCode, note)\n{\n    switch (eventCode)\n    {\n        case AudioSequencer.eventCodes.noteOn:\n            addNote(note);\n            break;\n        case AudioSequencer.eventCodes.endOfTrack:\n            sequencer.stopPlayback();\n            break;\n    }\n}\n```", "```html\nfunction addNote(note)\n{\n    noteCount++;\n    // Add a new note element\n    var $note = $(\"<div class='note'></div>\");\n    $note.data(\"note\", note);\n    $notesPanel.append($note);\n\n    var $key = getPianoKeyElement(note);\n    // Position the note element over the piano key\n    $note.css(\"top\", \"0\")\n         .css(\"left\", $key.position().left)\n         .css(\"width\", $key.css(\"width\"));\n\n    if ($key.hasClass(\"black\"))\n    {\n        $note.addClass(\"black\");\n    }\n}\n```", "```html\n#notes-panel .note\n{\n    position: absolute;\n    display: block;\n    width: 50px;\n    height: 20px;\n    background-color: cyan;\n    /* browser specific gradients not shown */\n    background: linear-gradient(left, white, cyan);\n    box-shadow: 0 0 4px 4px rgba(255, 255, 255, 0.7);\n}\n```", "```html\n#notes-panel .note.black\n{\n    background-color: magenta;\n    /* browser specific gradients not shown */\n    background: linear-gradient(left, white, magenta);\n}\n```", "```html\nfunction updateNotes()\n{\n    $(\".note\", $notesPanel).each(function()\n    {\n        var $note = $(this);\n        var top = $note.position().top;\n        if (top <= 200)\n        {\n            // Move the note down\n            top += pixelsPerFrame;\n            $note.css(\"top\", top);\n            if (top + 20 > 200)\n            {\n                // The note hit the bottom of the panel\n                currentNote.note = $note.data(\"note\");\n                currentNote.time = getCurrentTime();\n                currentNote.$note = $note;\n                if (practiceMode) pressPianoKey($note.data(\"note\"));\n            }\n        }\n        else\n        {\n            // Note is below the panel, remove it\n            if (practiceMode) releasePianoKey($note.data(\"note\"));\n            $note.remove();\n        }\n    });\n\n    // Check if there are any notes left\n    if ($(\".note\", $notesPanel).length == 0)\n    {\n        // No more notes, game over man\n        if (!practiceMode) showScore();\n        endGame();\n    }\n}\n```", "```html\nfunction checkNote(note)\n{\n    if (currentNote.note == note)\n    {\n        var dif = getCurrentTime() - currentNote.time;\n        if (dif < gracePeriod)\n        {\n            notesCorrect++;\n            score += Math.round(10 * (gracePeriod - dif) / gracePeriod);\n            currentNote.$note.css(\"background\", \"green\");\n            addHitEffect();\n        }\n    }\n}\n```", "```html\nfunction addHitEffect()\n{\n    var $title = $(\".title\", $notesPanel);\n    $title.css(\"color\", \"#012\");\n    setTimeout(function() { $title.css(\"color\", \"black\"); }, 100);\n}\n```", "```html\nfunction showScore()\n{\n    $notesPanel.hide();\n    $resultsPanel.fadeIn();\n    $(\".score\", $resultsPanel).text(score);\n    $(\".correct\", $resultsPanel).text(notesCorrect);\n    $(\".count\", $resultsPanel).text(noteCount);\n    $(\".note-accuracy\", $resultsPanel).text(\n        Math.round(100 * notesCorrect / noteCount));\n    $(\".timing-accuracy\", $resultsPanel).text(\n        Math.round(10 * score / notesCorrect));\n}\n```"]