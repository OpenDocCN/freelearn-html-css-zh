- en: Chapter 10. Releasing an App into the Wild
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。将应用程序发布到野外
- en: '"The Internet is a wild land with its own games, languages, and gestures through
    which we are starting to share common feelings."'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “互联网是一个充满了自己的游戏、语言和手势的荒野，通过它们我们开始分享共同的感受。”
- en: '>'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: – Ai Weiwei
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 艾未未'
- en: '*In this chapter we will learn how to prepare a web application for release.
    First we will discuss how to compress and combine JavaScript files for faster
    download times. Then we will look at how to use the HTML5 Application Cache interface
    to make your applications available offline.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将学习如何为发布准备Web应用程序。首先，我们将讨论如何压缩和合并JavaScript文件以加快下载速度。然后，我们将看看如何使用HTML5应用程序缓存接口使您的应用程序离线可用。*'
- en: 'In this chapter we will learn:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: How to combine and compress JavaScript files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何合并和压缩JavaScript文件
- en: How to create a command-line script to prepare an application for release
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个命令行脚本来准备一个应用程序发布
- en: How to use the HTML5 Application Cache API to make a page and its resources
    available offline
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用HTML5应用程序缓存API使页面及其资源离线可用
- en: How to create a cache manifest file to determine what resources get cached
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个缓存清单文件来确定哪些资源被缓存
- en: How to determine when an application's cache has been updated
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确定应用程序的缓存何时已更新
- en: Combining and compressing JavaScript
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并和压缩JavaScript
- en: In the past, the conventional wisdom among JavaScript developers was that you
    should write all of your code in one file, because downloading multiple script
    files causes a lot of unnecessary network traffic and slows down the load time.
    While reducing the number of files to download is indeed better, writing all of
    your code in one file is difficult to read and maintain. We don't write code like
    that in other languages, so why should we do it in JavaScript?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，JavaScript开发人员的共识是你应该将所有的代码写在一个文件中，因为下载多个脚本文件会导致大量不必要的网络流量，并减慢加载时间。虽然减少下载文件的数量确实更好，但在一个文件中编写所有的代码很难阅读和维护。我们在其他语言中不会这样写代码，那么为什么我们在JavaScript中要这样做呢？
- en: 'Fortunately there is a solution to this problem: the JavaScript compressor.
    A compressor takes all of the JavaScript source files for an application, combines
    them into one file, and compresses them by renaming local variables to the smallest
    name possible, removing white space and comments. We get all of the benefits of
    using multiple source code files for development, plus all of the benefits of
    a single JavaScript file when releasing an application. You can think of it as
    compiling your source code into a compact executable package.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个问题有一个解决方案：JavaScript压缩器。压缩器将应用程序的所有JavaScript源文件合并成一个文件，并通过将本地变量重命名为最小可能的名称，删除空格和注释来压缩它们。我们既可以利用多个源代码文件进行开发的好处，又可以在发布应用程序时获得单个JavaScript文件的所有好处。你可以把它看作是将你的源代码编译成一个紧凑的可执行包。
- en: 'There are a number of JavaScript compressors available out there. You can find
    many of them online. The problem with those is that you have to copy your source
    code and paste it into a web form, then copy it back out into a file. That doesn''t
    work too well for large applications. I suggest you use one of the compression
    applications that can be run from a command prompt, such as Yahoo''s YUI Compressor
    or Google''s Closure Compiler:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多JavaScript压缩器可供选择。你可以在网上找到许多。这些压缩器的问题在于你必须复制你的源代码并将其粘贴到一个网页表单中，然后再将其复制回到一个文件中。这对于大型应用程序来说效果不太好。我建议你使用可以从命令提示符运行的压缩应用程序之一，比如雅虎的YUI压缩器或谷歌的Closure编译器：
- en: '[https://developers.google.com/closure/](https://developers.google.com/closure/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/closure/](https://developers.google.com/closure/)'
- en: '[http://yui.github.io/yuicompressor/](http://yui.github.io/yuicompressor/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://yui.github.io/yuicompressor/](http://yui.github.io/yuicompressor/)'
- en: YUI and Closure are both easy to use and work extremely well. They both provide
    warnings about bad code (but not the same warnings). Both are written in Java
    and therefore require that you have the Java Runtime installed. I can't say one
    is better than the other. The only reason I would choose YUI would be if I also
    want to compress CSS, as Closure doesn't support it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: YUI和Closure都很容易使用，并且工作得非常好。它们都提供有关糟糕代码的警告（但不是相同的警告）。它们都是用Java编写的，因此需要安装Java运行时。我不能说哪一个比另一个更好。我选择YUI的唯一原因是如果我还想要压缩CSS，因为Closure不支持它。
- en: Time for action – creating a release script
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建一个发布脚本
- en: The easiest way to prepare your JavaScript for release is to create a script
    that can be run from the command line. In this example we will use the YUI Compressor,
    but it works almost identically for Closure. The only difference is the command-line
    parameters. In this example we create a command-line script that can be run from
    the Windows command line, that will take the Piano Hero application we wrote in
    [Chapter 7](ch07.html "Chapter 7. Piano Hero"), *Piano Hero*, and package it up
    for release. You can find the code for this section in `Chapter 10/example10.1`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为JavaScript准备发布，最简单的方法是创建一个可以从命令行运行的脚本。在这个例子中，我们将使用YUI压缩器，但它几乎与Closure相同。唯一的区别是命令行参数。在这个例子中，我们创建一个可以从Windows命令行运行的命令行脚本，它将获取我们在[第7章](ch07.html
    "第7章。钢琴英雄")中编写的钢琴英雄应用程序，*钢琴英雄*，并将其打包发布。您可以在`第10章/example10.1`中找到本节的代码。
- en: 'Before we start, we need to define a folder structure for the application.
    I like to create a base folder for the application that contains a `src` folder
    and a `release` folder. The base folder contains the command-line batch script.
    The `src` folder contains all of the source code and resources. The `release`
    folder will contain the compressed JavaScript file and all other resources necessary
    to run the application:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要为应用程序定义一个文件夹结构。我喜欢为应用程序创建一个基本文件夹，其中包含一个`src`文件夹和一个`release`文件夹。基本文件夹包含命令行批处理脚本。`src`文件夹包含所有的源代码和资源。`release`文件夹将包含压缩的JavaScript文件和运行应用程序所需的所有其他资源：
- en: '![Time for action – creating a release script](img/5947OT_10_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-创建一个发布脚本](img/5947OT_10_01.jpg)'
- en: Now let's create our batch script file and name it `release.bat`. The first
    thing we need to tell YUI is what files to compress. There are a couple of ways
    to do this. We can either concatenate all of our JavaScript files into one file
    and then reference that one file, or pass in a list of all the individual files.
    The method you use depends on your needs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的批处理脚本文件，并将其命名为`release.bat`。我们需要告诉YUI要压缩哪些文件。有几种方法可以做到这一点。我们可以将所有JavaScript文件连接成一个文件，然后引用该文件，或者传入所有单独的文件列表。您使用的方法取决于您的需求。
- en: 'If you need the files to be processed in a certain order, or you don''t have
    a lot of files, then you can specify them individually as parameters. If you have
    a lot of files in your application and you''re not worried about order, then it''s
    probably easiest to just concatenate them into one file. For this example, we
    will use the `type` command to concatenate all JavaScript files into one file
    named `pianoHero.collated.js`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要按特定顺序处理文件，或者文件不多，那么您可以将它们作为参数单独指定。如果您的应用程序中有很多文件，并且您不担心顺序，那么最简单的方法可能就是将它们连接成一个文件。在这个例子中，我们将使用`type`命令将所有JavaScript文件连接成一个名为`pianoHero.collated.js`的文件。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We use the `type` command to find all `.js` files in the `src` folder and write
    them out to a file named `pianoHero.collated.js`. Note this does not include the
    files in the `lib` folder. I like to keep them separate, but you can certainly
    include any external libraries if you prefer (and if their license permits it).
    Now we will execute the compressor passing in the collated JavaScript file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`type`命令在`src`文件夹中找到所有`.js`文件，并将它们写入一个名为`pianoHero.collated.js`的文件中。请注意，这不包括`lib`文件夹中的文件。我喜欢将它们分开，但如果你愿意的话，你当然可以包括任何外部库（如果它们的许可证允许）。现在我们将执行压缩器，传入合并的JavaScript文件：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We start the Java runtime telling it where to find the YUI Compressor's JAR
    file. We pass in a file type parameter of `js` since we are compressing JavaScript
    (YUI can also compress CSS). The `-o` parameter tells it where to write the output
    to. The last is the JavaScript file (or files if more than one) we want to compress.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动Java运行时，告诉它在哪里找到YUI压缩器的JAR文件。我们传入一个文件类型参数`js`，因为我们正在压缩JavaScript（YUI也可以压缩CSS）。`-o`参数告诉它输出的位置。最后是JavaScript文件（如果有多个文件）。
- en: 'Now we have a `pianoHero.min.js` file in the `release` folder. We still need
    to copy all of the other resources to the `release` folder including the HTML
    and CSS files, the jQuery library, and the audio files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在`release`文件夹中有一个`pianoHero.min.js`文件。我们仍然需要将所有其他资源复制到`release`文件夹，包括HTML和CSS文件，jQuery库和音频文件：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We use the `xcopy` command to copy `pianoHero.html`, `pianoHero.css`, everything
    in the `lib` folder, and everything in the `audio` folder to the `release` folder.
    At this point we have everything we need in the `release` folder to run the application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`xcopy`命令将`pianoHero.html`，`pianoHero.css`，`lib`文件夹中的所有内容以及`audio`文件夹中的所有内容复制到`release`文件夹中。此时，我们在`release`文件夹中有运行应用程序所需的一切。
- en: 'There''s one last thing to do. We need to remove the obsolete `<script>` elements
    in the HTML file and replace them with one that points to our compressed JavaScript
    file. This part isn''t easy to automate, so we need to crack the file open and
    do this manually:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还有最后一件事要做。我们需要删除HTML文件中过时的`<script>`元素，并用指向我们压缩后的JavaScript文件的元素替换它们。这部分不容易自动化，所以我们需要打开文件并手动操作：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's it. Now open the application in your browser and do a smoke test to make
    sure everything still works the way you expect it and then ship it!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在在浏览器中打开应用程序，进行一次烟雾测试，确保一切仍然按照您的期望工作，然后发布它！
- en: '*What just happened?*'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We created a Windows command-line script to combine all of our JavaScript source
    files into one and compress it using the YUI Compressor. We also copied all of
    the resources necessary to run the application to the `release` folder. Lastly,
    we changed the script reference to the compressed JavaScript file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个Windows命令行脚本，将所有JavaScript源文件合并为一个文件，并使用YUI压缩器进行压缩。我们还将运行应用程序所需的所有资源复制到`release`文件夹中。最后，我们将脚本引用更改为压缩后的JavaScript文件。
- en: Have a go hero
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下
- en: The YUI Compressor also minifies CSS. Add code to the release script to compress
    the CSS file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: YUI压缩器还可以压缩CSS。在发布脚本中添加代码来压缩CSS文件。
- en: HTML5 Application Cache
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5应用程序缓存
- en: The HTML5 Application Cache API provides a mechanism for caching the files and
    resources used by a web page. Once cached, it's as if the user downloaded and
    installed your application on their device. This allows the application to be
    used offline when the user is not connected to the Internet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5应用程序缓存API提供了一种缓存网页使用的文件和资源的机制。一旦缓存，就好像用户在他们的设备上下载并安装了您的应用程序。这允许应用程序在用户未连接到互联网时离线使用。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Browsers may limit the amount of data that can be cached. Some browsers limit
    it to 5 MB.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器可能会限制可以缓存的数据量。一些浏览器将其限制为5MB。
- en: 'The key to getting your application cached is the cache manifest file. This
    file is a simple text file that contains information about what resources should
    be cached. It is referenced by the `manifest` attribute on the `<html>` element
    of your web page:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使应用程序被缓存的关键是缓存清单文件。这个文件是一个简单的文本文件，包含了应该被缓存的资源的信息。它被`<html>`元素的`manifest`属性引用：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside the manifest file, you can specify the resources to cache or not cache.
    The file can have three sections:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中，您可以指定要缓存或不缓存的资源。该文件可以有三个部分：
- en: '`CACHE`: This is the default section and lists the files to be cached. Declaring
    this section header is optional. Wildcards are not allowed in URIs.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CACHE`：这是默认部分，列出要缓存的文件。声明此部分标题是可选的。在URI中不允许使用通配符。'
- en: '`NETWORK`: This section lists the files that require a network connection.
    Requests for these files bypass the cache. Wildcards are allowed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`网络`：此部分列出需要网络连接的文件。对这些文件的请求将绕过缓存。允许使用通配符。'
- en: '`FALLBACK`: This section lists fallback files if a resource is not available
    offline. Each entry contains the URI of the original file and the URI of the fallback
    file. Wildcards are allowed. Both URIs must be relative and from the same domain
    as the application.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FALLBACK`：这个部分列出了如果资源在离线状态下不可用的备用文件。每个条目包含原始文件的URI和备用文件的URI。通配符是允许的。两个URI必须是相对的，并且来自应用程序的同一个域。'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The cache manifest file can have any file extension, but it must be delivered
    with a MIME type of text/cache-manifest. You may need to associate the extension
    you use with this MIME type in your web server.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存清单文件可以有任何文件扩展名，但必须以text/cache-manifest的MIME类型传递。你可能需要在你的Web服务器中将你使用的扩展名与这个MIME类型关联起来。
- en: 'One important thing to note is that once the files for an application are cached
    only those versions of the files will be used, even if they change on the server.
    There are only two ways that the resources in the application cache can be updated:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件重要的事情是，一旦应用程序的文件被缓存，只有这些文件的版本会被使用，即使它们在服务器上发生了变化。应用程序缓存中的资源可以更新的方式只有两种：
- en: When the manifest file changes
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当清单文件发生变化时
- en: When the user clears the browser's data storage for your application
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户清除浏览器对你的应用程序的数据存储时
- en: I recommend keeping the cache manifest file out of the same folder as your HTML
    file while developing your application. You don't want files cached while you
    are writing code. Put it in the base folder of your application along with your
    release script and copy it to the `release` folder in your script.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在开发应用程序时，将缓存清单文件放在与HTML文件不同的文件夹中。你不希望在编写代码时缓存文件。将它放在应用程序的基本文件夹中，以及你的发布脚本，并将它复制到你的脚本中的`release`文件夹中。
- en: Whether you cache your application or not depends on the nature of your application.
    If it heavily depends upon Ajax calls to the server to work then making it available
    offline would be pointless. However, if you can write your application so that
    it stores data locally while offline, then it might be worthwhile. You should
    determine if the overhead of maintaining a cache manifest provides a benefit to
    your application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 是否缓存你的应用程序取决于你的应用程序的性质。如果它严重依赖于对服务器的Ajax调用来工作，那么使它离线可用就没有意义。然而，如果你可以编写你的应用程序，使其在离线状态下本地存储数据，那么这可能是值得的。你应该确定维护缓存清单的开销是否对你的应用程序有益。
- en: Time for action – creating a cache manifest
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建缓存清单
- en: Let's create a simple application from our template to demonstrate how to use
    the cache manifest. It has HTML, CSS, and JavaScript files, and a couple of images
    in an `image` folder. You can find the source code for this example in `Chapter
    10/example10.2`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们的模板中创建一个简单的应用程序，以演示如何使用缓存清单。它包含HTML、CSS和JavaScript文件，以及一个`image`文件夹中的一些图片。你可以在`Chapter
    10/example10.2`中找到这个示例的源代码。
- en: 'Now let''s create a cache manifest file named `app.appcache`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个名为`app.appcache`的缓存清单文件：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The manifest file must always begin with `CACHE MANIFEST` on the first line.
    On the second line we have a comment. Lines that start with a hash mark (`#`)
    are comments. It's recommended that you have some type of version identifier or
    the release date in the comments of your manifest file. As noted previously, the
    only way to cause your application to be reloaded into the cache is to change
    the manifest file. Each time you release a new version you will need to update
    this version identifier.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件必须始终以`CACHE MANIFEST`开头。在第二行我们有一个注释。以井号(`#`)开头的行是注释。建议在清单文件的注释中有某种版本标识或发布日期。正如之前所述，导致应用程序重新加载到缓存中的唯一方法是更改清单文件。每次发布新版本时，你都需要更新这个版本标识。
- en: 'Next, we add the files that we want cached. You can add the `CACHE` section
    header if you like, but it''s not required:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加我们想要缓存的文件。如果你愿意，你可以添加`CACHE`部分的标题，但这不是必需的：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Unfortunately wildcards are not allowed in this section, so you will need to
    explicitly list each file. For some applications, like Piano Hero with all of
    its audio files, that could be a lot of typing!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在这个部分中不允许使用通配符，所以你需要明确列出每个文件。对于一些应用程序，比如带有所有音频文件的钢琴英雄，可能需要大量输入！
- en: Next let's define the `NETWORK` section. Right about now you may be thinking,
    what's the point of this section? We already listed all of the files we want to
    be cached. So why the need to list files that you don't want to be cached? The
    reason is that once cached, your application will only get files from the cache,
    even when online. If you want to use non-cached resources in your application
    you will need to include them in this section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们定义`NETWORK`部分。现在你可能会想，这部分有什么意义？我们已经列出了所有我们想要被缓存的文件。那么为什么需要列出你不想被缓存的文件呢？原因是一旦被缓存，你的应用程序将只从缓存中获取文件，即使在线。如果你想在应用程序中使用非缓存资源，你需要在这个部分中包含它们。
- en: 'For example, let''s say that we have a site tracking image on our page to keep
    track of page hits. If we don''t add it to the `NETWORK` section, the request
    for it will never get to the server, even when the user is online. For the sake
    of this example we will use a static image file. In practice this would be PHP
    or some other server-side request handler that returns an image:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们在页面上有一个用于跟踪页面点击的站点跟踪图像。如果我们不将它添加到`NETWORK`部分，即使用户在线，对它的请求也永远不会到达服务器。出于这个例子的目的，我们将使用一个静态图像文件。实际上，这可能是PHP或其他服务器端请求处理程序，返回一个图像：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now let''s define the `FALLBACK` section. Say we want to display an image in
    our application that lets the user know if they are online or offline. This is
    where we specify a fallback from an online to an offline image:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义`FALLBACK`部分。假设我们想在我们的应用程序中显示一张图片，让用户知道他们是在线还是离线。这就是我们指定从在线到离线图片的备用的地方：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That's it for our manifest file. Now open the application in the browser so
    it gets cached. Then go into the JavaScript file and change the value of the `version`
    variable in the application object. Now refresh the page; nothing should change.
    Next go into the manifest file and change the version and refresh again. It still
    didn't change. What happened?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的清单文件。现在在浏览器中打开应用程序以便它被缓存。然后进入JavaScript文件并更改应用程序对象中`version`变量的值。现在刷新页面；什么都不应该改变。接下来进入清单文件并更改版本，再次刷新。仍然没有改变。发生了什么？
- en: Remember how I said earlier that when the manifest file changes, it causes the
    application to be reloaded? While this is true, the manifest file does not get
    checked for changes until after the page has been loaded from the cache. Therefore
    the user would need to reload the page twice to get the updated version. Fortunately
    there is a way we can detect in JavaScript when the manifest file has changed
    and give the user a message that a newer version is available.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我之前说过的吗？清单文件发生更改会导致应用程序重新加载？虽然这是真的，但在页面从缓存加载后，清单文件不会被检查是否有更改。因此用户需要两次重新加载页面才能获得更新的版本。幸运的是，我们可以在JavaScript中检测清单文件何时发生更改，并向用户提供消息，表明有新版本可用的方法。
- en: 'Let''s add a JavaScript method called `checkIfUpdateAvailable()` to check when
    the cache has been updated:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个名为`checkIfUpdateAvailable()`的JavaScript方法来检查缓存何时已更新：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First we add an `updateready` event listener to the `applicationCache` object.
    This gets fired after the browser finds that the manifest file has changed and
    has downloaded the updated resources. When we receive a notification that the
    cache has been updated, we display a message telling the user to reload the page.
    Now all we have to do is add a call to this method in the `start()` method of
    our application and we are ready to go.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们向`applicationCache`对象添加一个`updateready`事件监听器。这在浏览器发现清单文件已更改并下载了更新资源后触发。当我们收到缓存已更新的通知时，我们显示一条消息告诉用户重新加载页面。现在我们只需要在应用程序的`start()`方法中调用这个方法，我们就准备好了。
- en: 'Now go update the version number in the application and the manifest file and
    refresh the page. You should see the update message displayed. Refresh the page
    again and you will see that the version has changed:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在去更新应用程序和清单文件中的版本号并刷新页面。你应该看到更新消息显示。再次刷新页面，你会看到版本已经改变：
- en: '![Time for action – creating a cache manifest](img/5947OT_10_02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-创建缓存清单](img/5947OT_10_02.jpg)'
- en: 'Lastly, let''s check our fallback. Disconnect your Internet connection and
    reload the page. You should see that the offline image is shown instead of online.
    Also notice that it couldn''t load the tracking image because we marked it as
    a non-cached resource:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们检查我们的回退。断开互联网连接并重新加载页面。你应该看到离线图像显示而不是在线图像。还要注意，它无法加载跟踪图像，因为我们将其标记为非缓存资源：
- en: '![Time for action – creating a cache manifest](img/5947OT_10_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-创建缓存清单](img/5947OT_10_03.jpg)'
- en: '*What just happened?*'
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We learned how to use the HTML Application Cache to cache a web application.
    We used a manifest file to define resources that should be cached, a resource
    that was not cached, and another with a fallback when the application is offline.
    We also learned how to programmatically check when the cache has been updated.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用HTML应用程序缓存来缓存Web应用程序。我们使用清单文件定义了应该被缓存的资源，一个不被缓存的资源，以及应用程序离线时的回退资源。我们还学习了如何以编程方式检查缓存何时已更新。
- en: Pop quiz
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出测验
- en: Q1\. What does a JavaScript compressor *not* do?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. JavaScript压缩器*不*做什么？
- en: Zip your code up into a compressed file
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的代码压缩成一个压缩文件
- en: Combine your JavaScript files into one file
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的JavaScript文件合并成一个文件
- en: Remove all white space and comments from JavaScript files
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从JavaScript文件中删除所有空格和注释
- en: Rename local variables to the smallest name possible
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本地变量重命名为尽可能小的名称
- en: Q2\. When are resources updated in the application cache?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 资源何时在应用程序缓存中更新？
- en: When a file changes on the server
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当服务器上的文件发生变化时
- en: When the manifest file changes
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当清单文件发生更改时
- en: Resources are never updated
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源永远不会更新
- en: Every time the user starts the application
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次用户启动应用程序时
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we learned how to take our finished applications and prepare
    them for release to the world. We used a JavaScript compressor to combine and
    compress all of our JavaScript files into one compact file. Then we used the Application
    Cache API to make an application available offline.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将我们完成的应用程序准备好发布到世界上。我们使用JavaScript压缩器将所有JavaScript文件合并压缩成一个紧凑的文件。然后我们使用应用程序缓存API使应用程序离线可用。
- en: 'We covered the following concepts in this chapter:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了以下概念：
- en: How to combine and compress JavaScript files using the YUI Compressor
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用YUI压缩器合并和压缩JavaScript文件
- en: How to create a command-line script that packages up our applications and gets
    them ready for release
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个命令行脚本，打包我们的应用程序并准备发布
- en: How to use the Application Cache API to cache an application and make it available
    offline
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用应用程序缓存API缓存应用程序并使其离线可用
- en: How to create a cache manifest file and define cached, non-cached, and fallback
    files
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建缓存清单文件并定义缓存、非缓存和回退文件
- en: How to programmatically check when the manifest file has changed and alert the
    user that an update is available
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以编程方式检查清单文件何时发生更改并提醒用户更新可用
- en: There you have it. We have covered HTML5 web application development from creating
    a starting template to preparing your application for release. Now go out there
    and start writing your own HTML5 web applications. I look forward to seeing how
    you use HTML5 to create the next big thing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已经从创建起始模板到准备应用程序发布，覆盖了HTML5 Web应用程序开发。现在去开始编写你自己的HTML5 Web应用程序吧。我期待看到你如何使用HTML5来创造下一个大事件。
