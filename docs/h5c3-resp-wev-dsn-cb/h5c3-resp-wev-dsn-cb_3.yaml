- en: Chapter 3. Responsive Layout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。响应式布局
- en: 'In this chapter, you will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Responsive layout with the min-width and max-width properties
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用min-width和max-width属性创建响应式布局
- en: Controlling your layout with relative padding
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相对填充控制布局
- en: Adding a media query to your CSS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向你的CSS添加媒体查询
- en: Creating a responsive width layout with media queries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询创建响应式宽度布局
- en: Changing image sizes with media queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询更改图像大小
- en: Hiding an element with media queries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用媒体查询隐藏元素
- en: Making a smoothly transitioning responsive layout
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建平稳过渡的响应式布局
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter has some challenging recipes. Responsive layouts often present
    some difficult challenges that can push you to create a great solution. With responsive
    design methods you can do much more, and do it more efficiently. Responsive layouts
    have introduced a whole new area of challenges to web development and a new dimension
    of excitement.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章有一些具有挑战性的示例。响应式布局经常会带来一些困难的挑战，这可能会促使你创造一个很好的解决方案。通过响应式设计方法，你可以做更多的事情，而且更有效率。响应式布局为网页开发引入了全新的挑战领域和新的激动人心的维度。
- en: Responsive layout with the min-width and max-width properties
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用min-width和max-width属性创建响应式布局
- en: Many responsive layout techniques can be quite complex and overwhelming, but
    in this recipe you will see a fairly simple layout using the `min-width` and `max-width`
    properties applied to three floating elements. With this very simple responsive
    layout feature of CSS, you are ready to display your site on mobile devices and
    desktop screens of various sizes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多响应式布局技术可能非常复杂和令人不知所措，但在这个示例中，你将看到应用于三个浮动元素的`min-width`和`max-width`属性的相当简单的布局。通过CSS的这个非常简单的响应式布局特性，你可以准备好在各种大小的移动设备和桌面屏幕上显示你的网站。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Floating elements that collapse from multiple columns into one column on a small
    viewport is not a new trick. This has been around for years as a standard property
    of CSS1, however, there was never any reason to consider it useful until the mobile
    devices became common. So let's combine this old, stale property with some other
    fresh CSS properties to make a responsive layout.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在小视口上从多列折叠为一列的浮动元素并不是一个新的技巧。这已经作为CSS1的标准属性存在多年了，然而，直到移动设备变得普遍之前，从来没有理由认为它有用。因此，让我们将这个古老的、陈旧的属性与一些其他新鲜的CSS属性结合起来，制作一个响应式布局。
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a simple HTML page enclosed in an `article` element, containing a `h1`
    header and three elements. The first element will contain an image and the second
    and third will contain filler text. Assign to all of the inner elements a class
    of `float` and respectively `one`, `two`, and `three` as their IDs:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个简单的HTML页面，包含在`article`元素中，包含一个`h1`标题和三个元素。第一个元素将包含一个图像，第二个和第三个将包含填充文本。给所有内部元素分配一个`float`类，分别将它们的ID分配为`one`、`two`和`three`：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create your style for the `.article` element and assign the properties:
    `width: 100%;`, `max-width: 1280px;`, and auto side margins. Then, center the
    `h1` title. Assign the `img` element the `width: 100%` and `height: auto;` properties
    to make it responsive to its parent element. For the floating element containing
    the `img` element, give it a `min-width` value of `500px`. You could also give
    each floating element a different background color to make them more discernible,
    but this is not vital to the layout. To all the floating elements in the `.float`
    class, add a `max-width: 350px` property, left float, and for clean looks, justify
    the text.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，为`.article`元素创建样式，并分配属性：`width: 100%;`、`max-width: 1280px;`和自动边距。然后，将`h1`标题居中。给`img`元素分配`width:
    100%`和`height: auto;`属性，使其对父元素响应。对包含`img`元素的浮动元素，给它一个`min-width`值为`500px`。你也可以给每个浮动元素分配不同的背景颜色，以使它们更加可辨认，但这对布局并不是必要的。对于`.float`类中的所有浮动元素，添加`max-width:
    350px`属性，左浮动，并为了清晰的外观，调整文本对齐方式。'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once everything is put together and you have the HTML document open in your
    browser, you will see how the layout smoothly goes from a three-column layout
    to a two-column layout, and then finally to a single-column layout, as shown in
    the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有东西都放在一起，你在浏览器中打开HTML文档，你会看到布局如何平稳地从三列布局变成两列布局，最后变成单列布局，如下面的屏幕截图所示：
- en: '![How to do it…](img/5442OT_03_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_03_01.jpg)'
- en: How it works…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `max-width` property of the columns allows them to have a fluid but a maximum
    width. This gives you more flexibility in the layout of the columns than you would
    have with a static width. The image column utilizes the `min-width` property so
    it can respond to parent element width's changes by growing and shrinking. Finally,
    the whole layout can smoothly break down from three columns to one column by using
    the `float` property; once there is not enough room for the elements to float
    side by side, the last element drops to a new row.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列的`max-width`属性允许它们具有流动但最大宽度。这使得列的布局比静态宽度更加灵活。图像列利用`min-width`属性，因此它可以根据父元素宽度的变化而增长和收缩。最后，整个布局可以通过使用`float`属性从三列平滑地变成一列；一旦元素无法并排浮动，最后一个元素就会跳到新的一行。
- en: Controlling your layout with relative padding
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相对填充控制布局
- en: Let's put together a simple layout for a blog with comments and comment replies.
    This is possible using only relative padding for the layout. You say, "That's
    crazy! How can you control a page layout with nothing but padding?" Let's find
    out.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为一个带有评论和评论回复的博客设计一个简单的布局。这可以只使用相对填充来实现。你可能会说，“这太疯狂了！你怎么可能只用填充来控制页面布局？”我们来看看。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Of course, a blog is much more dynamic than a static HTML page, so this would
    be a good part of a comments template section for your favorite blogging software.
    That being said, this recipe is remarkably easy, and yet effective. So, go get
    yourself some Ipsum filler text and get ready to troll yourself.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，博客比静态HTML页面要动态得多，所以这将是你最喜欢的博客软件的评论模板部分的一部分。话虽如此，这个方法非常简单，但却非常有效。所以，去找一些 Ipsum
    填充文本，准备好自己吧。
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: The first step is to create a very simple blog style page with comments embedded
    in the `div` element. In your HTML body, create the element that will hold everything,
    the `.content` div. Give it a `h1` title, a paragraph of Ipsum filler text, and
    follow it with a `.comments` element. Inside the `.comments` element you will
    build your embedded comments layout.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个非常简单的博客风格页面，其中评论嵌入在`div`元素中。在你的HTML body中，创建一个将包含所有内容的元素，`.content`
    div。给它一个`h1`标题，一个 Ipsum 填充文本段落，然后跟一个`.comments`元素。在`.comments`元素内，你将构建嵌入式评论布局。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Under the `.comments` title, you will add your first comment. And next, inside
    that comment, immediately after the closing paragraph tag add a comment to that
    comment:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.comments`标题下，你将添加你的第一个评论。接下来，在那个评论里，在闭合段落标签后立即添加一个评论：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Continuing from there, you can insert more comments the same way to a comment
    on the parent comment, or add a comment outside of the parent `div` element to
    make the comment to the parents'' parent, all the way up to the original blog
    post:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，你可以以同样的方式插入更多的评论到父评论中，或者在父`div`元素之外添加评论，使评论到达父级的父级，一直到原始博客帖子：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Eventually, you can have many comments and a good looking working layout built
    simply with only relative padding.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你可以有很多评论和一个漂亮的工作布局，只需使用相对填充就可以构建。
- en: 'The CSS to make this work is surprisingly easy. Simply add the classes: `.content`,
    `.comments`, and `.comment`. In the `content` class add some side padding, and
    in the `comment` add heavier padding to the left.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使这个方法生效的CSS非常简单。只需添加类：`.content`、`.comments`和`.comment`。在`content`类中添加一些侧边填充，在`comment`中添加更重的左填充。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示：
- en: '![How to do it…](img/5442OT_03_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_03_02.jpg)'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The relative padding attribute responds to page width changes by adjusting its
    own width.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 相对填充属性通过调整自身宽度来响应页面宽度的变化。
- en: Adding a media query to your CSS
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的CSS添加媒体查询
- en: In this recipe, we will explore the awesome power of the media query by rendering
    a simple web page with every permutation and device available in the universe.
    Okay, I'm exaggerating a little, I admit. But we will create a simple web page
    that will respond to several browser window sizes, devices, and other possible
    presentation methods.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们将探索媒体查询的强大功能，通过在宇宙中的每个排列和设备上呈现一个简单的网页。好吧，我承认我有点夸张。但我们将创建一个简单的网页，可以响应几种浏览器窗口大小、设备和其他可能的呈现方法。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Solely for the purpose of this recipe, go out and purchase one of each of the
    devices and variations described here. You'll need a new high definition TV, a
    smart phone, a not-so-smart phone, and at least one printer. No way? Okay, but
    I'm just trying to help you and the economy. That being said, of course it will
    be impossible to truly test every media query, but do what you can. There are
    a surprising number of possibilities. But in most real-life scenarios, you are
    unlikely to need or care to use most of these. We will at least try to cover the
    most commonly used media queries.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅为了这个方法，去购买这里描述的每种设备和变体中的一种。你需要一台新的高清电视，一个智能手机，一个不那么智能的手机，以及至少一台打印机。不可能？好吧，但我只是想帮助你和经济。话虽如此，当然，真正测试每个媒体查询是不可能的，但尽力而为。有惊人的可能性。但在大多数现实场景中，你不太可能需要或关心使用其中大多数。我们至少会尝试覆盖最常用的媒体查询。
- en: I will skip over those that I think are unnecessary to you. You can easily access
    information about these if you find yourself in a project with requirements to
    create presentations for one of these obscure devices. You never know! The WC3
    has all of the detailed information and descriptions of these if you need them
    at [http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/).
    I will exclude the examples and just for your reference include numerous devices
    with specific color limitations, including monochrome, print, TV, and handheld.
    The media queries you will need most likely are `screen` and `print`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我会跳过我认为对你不必要的部分。如果你发现自己在一个项目中需要为这些晦涩的设备之一创建演示文稿，你可以很容易地获取关于这些设备的信息。你永远不知道！WC3有关于这些设备的详细信息和描述，如果你需要，可以在[http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/)上找到。我将排除示例，仅供参考，包括具有特定颜色限制的许多设备，包括单色、打印、电视和手持设备。你最有可能需要的媒体查询可能是`screen`和`print`。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create a simple HTML page with a `h1` title, and an element wrapping around
    an image, and a paragraph of text. Get some Ipsum filler text if you don''t have
    any text lying around. It will look just like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个简单的HTML页面，包括一个`h1`标题，一个包裹图片的元素，和一个文字段落。如果你没有文本，可以使用 Ipsum 填充文本。它看起来就像下面这样：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next create a series of media queries. In the following list, I will give a
    brief explanation of what each does:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一系列媒体查询。在下面的列表中，我将简要解释每个查询的作用：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is applied to the web page when it's printed. You can test this by selecting
    **File** | **Print** and then view the print preview. This is useful for web pages
    where users will be printing it as a document to read. You can take advantage
    of this and change or remove the formatting to make this version as simple as
    possible.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '这在打印网页时应用。你可以通过选择**文件** | **打印**，然后查看打印预览来测试这一点。这对用户将其打印为文档阅读的网页非常有用。你可以利用这一点，改变或删除格式，使这个版本尽可能简单。 '
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is generally applied on any device that shows the document in portrait
    mode. You can use it for mobile devices to change the look for different orientations.
    Be cautious because this also will be applied to desktop screens unless you specify
    it to smaller screens or devices only. The media query orientation's other possible
    value is landscape.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常适用于以纵向模式显示文档的任何设备。你可以用它来为移动设备改变不同方向的外观。要小心，因为这也会应用于桌面屏幕，除非你指定它只适用于较小的屏幕或设备。媒体查询方向的其他可能值是横向。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `height` and `width` media query allows you to specify style for specific
    screen dimensions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`和`width`媒体查询允许你为特定的屏幕尺寸指定样式。'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This media query will apply a style to any page, regardless of browser's window
    size, that is viewed on a device of the specified dimensions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个媒体查询将应用样式到任何页面，不管浏览器窗口大小如何，只要在指定尺寸的设备上查看。
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This media query can be used to define styles for screens (not print) with a
    view window of the `16/9` ratio.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个媒体查询可以用来定义`16/9`比例的屏幕（非打印）的样式。
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This aspect ratio would apply only to a device using a television to view.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个纵横比只适用于使用电视观看的设备。
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `min-width` and `max-width` media queries are the most useful one. Here,
    you can define a responsive style for any window size including the small-screen
    mobile devices. I typically start by defining the smallest—or mobiles—viewports
    breakpoint, and define their styles, and then create breakpoint ranges for the
    most popular screen sizes, ending with a `min-width` media query to apply to the
    largest screen sizes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`min-width`和`max-width`媒体查询是最有用的。在这里，你可以为任何窗口大小定义响应式样式，包括小屏幕移动设备。我通常从定义最小的——或移动设备——视口断点开始，并定义它们的样式，然后为最流行的屏幕尺寸创建断点范围，最后使用`min-width`媒体查询应用于最大的屏幕尺寸。'
- en: 'Once you have created the media queries that you think are useful for your
    current project, add styles to the media queries with different values:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了你认为对当前项目有用的媒体查询，就为媒体查询添加不同值的样式：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The final version of the page is displayed in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 页面的最终版本显示在以下截图中：
- en: '![How to do it…](img/5442OT_03_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法…](img/5442OT_03_03.jpg)'
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Apply these styles and you will find that a different style is applied to different
    devices. You can combine a number of these in a clever way to create magic responsiveness
    in your site.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 应用这些样式，你会发现不同的设备应用了不同的样式。你可以巧妙地结合一些媒体查询来在你的网站上创建魔术般的响应性。
- en: Creating a responsive width layout with media queries
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体查询创建响应式宽度布局
- en: In this recipe we will make a simple responsive width layout that adjusts itself
    to various screen widths. This layout would be a good starter template for a personal
    blog or news magazine, where you would want your readers to comment on your content
    and on each other's comments. It may even be a great theme starter to attract
    trolls to a flame war. This paragraph just sounds silly, sorry!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将制作一个简单的响应式宽度布局，它会根据不同的屏幕宽度进行调整。这个布局将是一个很好的起始模板，用于个人博客或新闻杂志，你希望读者评论你的内容和彼此的评论。它甚至可能是一个吸引喷子参与激烈争论的绝佳主题起点。这段话听起来有点傻，抱歉！
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This template will work great in a dynamic CMS or blog software, but might not
    make much sense as a plain HTML page. But most themes work in the same as HTML
    as far as presentation goes. In most cases, you would simply replace the text
    and static navigation with template tags. This recipe will need some filler text
    to demonstrate. If you do not already have some text to work with, go to our old
    standby Ipsum generator to get some filler text.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板在动态CMS或博客软件中效果很好，但作为一个纯HTML页面可能没有太多意义。但大多数主题在呈现方面与HTML一样工作。在大多数情况下，你只需用模板标签替换文本和静态导航。这个配方将需要一些填充文本来演示。如果你还没有一些文本可以使用，可以去我们的老朋友Ipsum生成器获取一些填充文本。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'To begin, create a simple web page, and in the `style` element create your
    media queries. You can always link to an external stylesheet, but for the sake
    of simplicity, this and most of the recipes contain the CSS in the `<style>...</style>`
    section of your header. Include these standard breakpoints at screen sizes: `960`,
    `1024`, and `1280`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个简单的网页，在`style`元素中创建你的媒体查询。你可以随时链接到外部样式表，但为了简单起见，这个和大多数的配方都包含在你的头部`<style>...</style>`部分的CSS中。在屏幕尺寸上包括这些标准断点：`960`，`1024`和`1280`。
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first media query affects all viewports narrower than `960px`. The second
    from `961px` to `1024px`, the third from `1025px` to `1280px`, and the last affects,
    all screen sizes larger than `1281px`. Within each media query, you will write
    a CSS for a different layout. There will be some layout CSS outside of the media
    query along with your style presentation, but most of them will be defined in
    the media queries.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个媒体查询影响所有窄于`960px`的视口。第二个从`961px`到`1024px`，第三个从`1025px`到`1280px`，最后一个影响所有大于`1281px`的屏幕尺寸。在每个媒体查询中，你将为不同的布局编写CSS。除了媒体查询之外，还会有一些布局CSS以及你的样式呈现，但大多数都会在媒体查询中定义。
- en: 'The next step is to create your HTML layout. The basic structure starts with
    these basic `div` elements—`nav`, `content`, and `comments`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是创建你的HTML布局。基本结构从这些基本的`div`元素开始——`nav`，`content`和`comments`：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next add some filler content to your page. This will aid in the demonstration
    of the layout.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在你的页面中添加一些填充内容。这将有助于演示布局。
- en: In the `nav` element, add an unordered list with sample menu links. This will
    serve as a responsive menu. At the pages' narrowest width, the menu will display
    vertically. In widths ranging from 961px to 1280px, the menu is displayed inline
    horizontally on top. For larger widths, we want the menu to return to a vertical
    display and return to the left-hand side.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`nav`元素中，添加一个带有示例菜单链接的无序列表。这将作为一个响应式菜单。在页面最窄的宽度上，菜单将垂直显示。在宽度范围从961px到1280px之间，菜单以水平方式显示在顶部。对于更大的宽度，我们希望菜单返回到垂直显示并返回到左侧。
- en: In the first two media queries, the `content` and `comments` elements will float
    left, but with different width ratios. In `960px`, these elements should have
    a width of `90%`. In the larger widths, set the `content` and `comments` elements
    at `60%` and `20%`, respectively.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个媒体查询中，`content`和`comments`元素将向左浮动，但宽度比例不同。在`960px`时，这些元素的宽度应为`90%`。在更大的宽度上，将`content`和`comments`元素分别设置为`60%`和`20%`。
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To make the menu slide back to the left on the large screens, we will use positioning
    to create a three column layout. In the `min-width:1281px` media query, add the
    `.nav` element and styles for absolute positioning and width:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使菜单在大屏幕上滑回左侧，我们将使用定位来创建一个三列布局。在`min-width:1281px`媒体查询中，添加`.nav`元素和绝对定位和宽度的样式：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That's almost all the steps necessary to build a responsive layout. To tidy
    things up, let's add some padding to the layouts. Add the `.nav`, `.content`,
    and `.comments` elements to the other media queries, and then add padding to those.
    Refer to the following CSS. The `min-width:1281px` media query will not have a
    padding for the `.nav` element, and the padding for the `.content` and `.comments`
    elements are reduced to allow for the vertical menu.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是构建响应式布局所需的所有步骤。为了使布局更整洁，让我们为布局添加一些填充。将`.nav`、`.content`和`.comments`元素添加到其他媒体查询中，然后为这些元素添加填充。参考以下CSS。`min-width:1281px`媒体查询不会为`.nav`元素添加填充，而`.content`和`.comments`元素的填充会减少以适应垂直菜单。
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also style the inline menu however you want. For now let''s simply
    add some margins to the `li` elements. Add this element and styles outside of
    the media queries, `.nav ul li{margin: 2px 10px;}`.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '你也可以按照自己的喜好对内联菜单进行样式设置。现在让我们简单地为`li`元素添加一些边距。在媒体查询之外添加这些元素和样式，`.nav ul li{margin:
    2px 10px;}`。'
- en: Finally, on to the content and comments, paste your filler text inside the `.content`
    element. I also added the header and paragraph tags inside. We will do something
    similar for the comments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于内容和评论，将你的占位文本粘贴到`.content`元素内。我还在里面添加了标题和段落标签。我们将对评论做类似的操作。
- en: 'Remember that we want to allow for embedded comments, or people to comment
    on comments. There will be a possible inherited hierarchy of comments, and we
    still need this to look good in all browser sizes, so we should add some padding.
    Adding a static padding to the `.comment` element will not look good in all browser
    sizes. Instead, add a relative padding to each media query''s `.comments` element,
    so that they take less space as the browser window gets smaller: `90%` for the
    `max-width:960px` media query and `20%` for all larger sizes. Add outside of the
    media queries, `padding-left: 8%` to the `.comment` element, and float the `.content`
    and `.comments` elements to the `left`. You can also `text-align:justify` them
    to make the text look like a block.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '记住，我们希望允许嵌入式评论，或者允许人们对评论进行评论。评论可能会有继承的层次结构，我们仍然希望在所有浏览器大小下都能看起来不错，所以我们应该添加一些填充。在每个媒体查询的`.comments`元素中添加相对填充，以便随着浏览器窗口变小而占用更少的空间：对于`max-width:960px`媒体查询，填充为`90%`，对于所有更大的尺寸，填充为`20%`。在媒体查询之外，为`.comment`元素添加`padding-left:
    8%`，并将`.content`和`.comments`元素向左浮动。你还可以使用`text-align:justify`使文本看起来像一个块。'
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This CSS will make the padding on comments and embedded comments adjust to
    the changes in the browser window sizes. As a result, the comments section of
    your page will show the comment parent-and-child hierarchy, as well as a consistent
    and workable layout for each browser window size. You can see the code in action
    demonstrated in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS将使评论和嵌入式评论的填充根据浏览器窗口大小的变化而调整。因此，你的页面的评论部分将显示评论的父子层次结构，以及每个浏览器窗口大小的一致且可操作的布局。你可以在以下截图中看到代码的实际演示：
- en: '![How to do it…](img/5442OT_03_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/5442OT_03_04.jpg)'
- en: How it works…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this responsive layout we used a few different techniques. First, the media
    query offers us limited but useful logic to deploy different layout techniques
    for different browser window sizes. Second, the fluid and floating elements with
    size ratios adjust with ease to the new layouts. And last but not least, fluid's
    percent-based padding gives a consistent ratio of padding to the screen size and
    layout.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个响应式布局中，我们使用了一些不同的技术。首先，媒体查询为我们提供了有限但有用的逻辑，可以针对不同的浏览器窗口大小部署不同的布局技术。其次，流体和浮动元素的大小比例可以轻松调整到新的布局。最后，流体的百分比填充给出了与屏幕大小和布局一致的填充比例。
- en: Changing image sizes with media queries
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体查询更改图像大小
- en: In this recipe, you will learn how to resize an image with a CSS media query.
    This can be useful in a number of situations, especially those where you want
    to download only one image and use it in different size versions in your responsive
    layout.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，你将学习如何使用CSS媒体查询调整图像大小。这在许多情况下都很有用，特别是当你想要下载一个图像并在响应式布局中使用不同尺寸的版本时。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This is a good method for size variation that can be handled on the client side,
    but be careful not to abuse this method by causing the client to download a really
    large image file and do heavy resizing in their browser. There are better ways
    to do that, which were discussed in [Chapter 1](ch01.html "Chapter 1. Responsive
    Elements and Media"), *Responsive Elements and Media*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种可以在客户端处理的尺寸变化的好方法，但要小心不要滥用这种方法，导致客户端下载一个非常大的图像文件并在他们的浏览器中进行大量调整。有更好的方法来做到这一点，在[第1章](ch01.html
    "第1章.响应式元素和媒体")中已经讨论过，*响应式元素和媒体*。
- en: How to do it…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: I recommend putting together a small HTML page with a `h1` title, the `wrap`
    element, and inside `wrap`, an image and a paragraph of text. You really don't
    need all of this extra stuff to make an image size change in an image query, however,
    it will help you demonstrate the use of changing an image size in the media query.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议创建一个小的HTML页面，包括一个`h1`标题，`wrap`元素，以及在`wrap`内部，一个图像和一个文字段落。实际上，在媒体查询中更改图像大小并不需要所有这些额外的东西，但是这将帮助你演示在媒体查询中更改图像大小的用法。
- en: 'Next, create your media queries for the most frequent browser window size breakpoints:
    `960px`, `1024px`, `1280px`, `1366px`, `1440px`, and last but not least `1680px`.
    In each of these media queries, add your styles for the elements. In my example,
    I created media queries at `960px` and `1280px`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为最常见的浏览器窗口大小断点创建您的媒体查询：`960px`、`1024px`、`1280px`、`1366px`、`1440px`，最后是`1680px`。在每个媒体查询中，添加您的元素样式。在我的示例中，我在`960px`和`1280px`处创建了媒体查询：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now as you resize your page you can see how the image resizes as the browser
    resizes through the various media queries. This is illustrated in the following
    screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您调整页面大小时，您可以看到图片在浏览器通过各种媒体查询调整大小时的变化。这在下面的截图中有所说明：
- en: '![How to do it…](img/5442OT_03_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_03_05.jpg)'
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The different media queries, when called by the browser, present different sizes
    for the element's `width` and `height` property. This allows you to optimize your
    image size for different devices. Use your judgment, and if the original image
    is too large, look into some server-side resizing as an alternate method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器调用不同的媒体查询时，元素的`width`和`height`属性会呈现不同的大小。这使您能够为不同的设备优化图像大小。请根据您的判断，如果原始图像太大，可以考虑一些服务器端的调整大小作为替代方法。
- en: Hiding an element with media queries
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体查询隐藏元素
- en: This recipe will show you some very useful tricks with media queries to make
    elements disappear off the screen, depending on the browser window's size. There
    are a few different methods of hiding an element on the screen, I will go through
    three of them in this recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将向您展示一些非常有用的媒体查询技巧，以使元素根据浏览器窗口的大小消失。有几种不同的方法可以隐藏屏幕上的元素，我将在这个教程中介绍其中三种。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This method can have a number of use cases. One very helpful case is using it
    to switch out menus on the fly when scaling a page down to a smaller device. You
    could also use this to change the way your content areas or aside contents are
    displayed. The possibilities are unlimited when you get creative with the methods.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以有很多用例。一个非常有用的用例是在将页面缩小到较小的设备时，使用它来动态切换菜单。您还可以使用它来改变内容区域或侧边内容的显示方式。当您用这些方法进行创意时，可能性是无限的。
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Set up a simple page for demonstration. In my example, I wrote up a page with
    a `h1` header, an image, and then two elements with text inside them. Next, add
    some style to those elements. I added a different background color and width properties
    to each element, mostly, so that I could keep them apart when they disappeared.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个简单的演示页面。在我的示例中，我编写了一个带有`h1`标题、一张图片，然后两个带有文本的元素的页面。接下来，为这些元素添加一些样式。我为每个元素添加了不同的背景颜色和宽度属性，主要是为了在它们消失时能够保持它们的间隔。
- en: And then add your media queries at a breakpoint. In the example, I'll add a
    breakpoint at `960px`. And inside the media queries, we're going to take a look
    at some different methods of getting the element to disappear.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在断点处添加您的媒体查询。在示例中，我将在`960px`处添加一个断点。在媒体查询内，我们将看一下一些不同的方法来使元素消失。
- en: 'In your first media query, `max-width: 960px`, add the position: absolute and
    left: 5000px properties for the `img` element; This style will move the element
    far enough to the left of the screen that it has for all practical purposes, disappeared.
    Add to that media query a `display: none` style to the `.bar` element. This leaves
    the element where it is, but renders it invisible. Both of these elements are
    are effectively gone from the page, leaving only the title and `.foo` elements.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '在您的第一个媒体查询`max-width: 960px`中，为`img`元素添加`position: absolute`和`left: 5000px`属性；这个样式将把元素移动到屏幕左侧足够远的地方，实际上，它已经消失了。在该媒体查询中添加`display:
    none`样式到`.bar`元素。这将使元素保持在原位，但使其不可见。这两个元素实际上已经从页面上消失了，只留下标题和`.foo`元素。'
- en: 'In the second media query, you will try a different way to remove an element
    from the screen. First, add the `.foo` element to the media query and give it
    a left margin of `5000px`. That removes it from the screen, however, the next
    element clears its vertical space and leaves an obvious white space where the
    element was. Then, float the element to the left and the white space will disappear.
    This is illustrated in the following code snippet:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个媒体查询中，您将尝试另一种方法来从屏幕上移除一个元素。首先，将`.foo`元素添加到媒体查询中，并给它一个左边距为`5000px`。这将把它从屏幕上移除，但是下一个元素会清除它的垂直空间，留下一个明显的白色空间。然后，将元素浮动到左侧，白色空间将消失。这在下面的代码片段中有所说明：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Congratulations! Open the project in your browser and see if it looks like
    the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！在浏览器中打开项目，看看是否像下面的截图一样：
- en: '![How to do it…](img/5442OT_03_06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/5442OT_03_06.jpg)'
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Both the absolute position and float do not have a height property, so once
    applied to an element, they will not occupy any vertical space. This can be an
    especially useful trick to move elements around on your page. It can also cause
    some problems when you use floating elements for layout. This behavior can be
    fixed by inserting a break with a `clear:both` property after the element.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对定位和浮动都没有高度属性，因此一旦应用到一个元素上，它们将不占据任何垂直空间。这可以是一个特别有用的技巧，用来在页面上移动元素。但当您使用浮动元素进行布局时，可能会出现一些问题。这种行为可以通过在元素后插入一个带有`clear:both`属性的换行来解决。
- en: Making a smoothly transitioning responsive layout
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个平滑过渡的响应式布局
- en: In this recipe I will guide you through the creation of a multi-zoned and responsive
    front page. This one will have a number of elements that are responsive in different
    ways; giving a rich user experience that delivers an impressive layout. I developed
    this for a startup I was working on and found that I liked it so much that I continued
    to develop it further to share with you in this recipe.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我将指导您创建一个多区域和响应式的首页。这个首页将有一些以不同方式响应的元素；提供丰富的用户体验，呈现出令人印象深刻的布局。我为一家初创公司开发了这个，发现我非常喜欢它，所以我继续进一步开发，与您分享在这个教程中。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will be a good template for a homepage to a content-heavy site.
    If you have been building content for a while, this will be perfect for the landing
    page, and can be modified for a single-item content page easily. If you are just
    getting started with your site, you can go get some generated text at [http://lipsum.com](http://lipsum.com)
    like I did for this recipe.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将是内容丰富网站的主页的良好模板。如果你已经建立了一段时间的内容，这将是完美的登陆页面，并且可以很容易地修改为单个内容页面。如果你刚刚开始建立你的网站，你可以像我为这个配方做的那样去[http://lipsum.com](http://lipsum.com)获取一些生成的文本。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'This site breaks down into three HTML elements or a footer, and two elements
    that sometimes are vertical and sometimes are left and right floats—depending
    on the screen width. These elements themselves are also divided into smaller elements.
    So, get started and create a basic page with a top-wrap element, a middle-wrap
    element, and a footer:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站分解成三个HTML元素或者页脚，还有两个元素，有时是垂直的，有时是左浮动和右浮动，取决于屏幕宽度。这些元素本身也分成更小的元素。所以，开始创建一个带有顶部包裹元素、中间包裹元素和页脚的基本页面：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we start the CSS for these items. Add some basic CSS and the following
    media queries:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开始这些项目的CSS。添加一些基本的CSS和以下媒体查询：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this basic layout, the `header` and `.content` rows both occupy `100%` of
    the page width, while the page is under `1280px`. When the page is larger, they
    occupy the respective `60%`/`40%` split and the float `left` and `right`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个基本布局中，`header`和`.content`行在页面宽度小于`1280px`时都占据`100%`的页面宽度。当页面更大时，它们占据各自的`60%`/`40%`分割和`left`和`right`浮动。
- en: 'Next let''s build the menus. This menu will employ a responsive trick of using
    a media query to hide and show two different menus. Essentially, we will build
    two different menus, and then use CSS to display the optimized one for each screen.
    The smallest version will use a multi-select drop-down menu, while the larger
    menu contains two inline lists. Here''s what the HTML looks like inside the top-wrap
    element:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们构建菜单。这个菜单将利用响应式技巧，使用媒体查询来隐藏和显示两个不同的菜单。基本上，我们将构建两个不同的菜单，然后使用CSS来为每个屏幕显示优化的菜单。最小版本将使用多选下拉菜单，而较大的菜单包含两个内联列表。在`top-wrap`元素内部的HTML如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following CSS for the header elements:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为头部元素添加以下CSS：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will display two different versions of the menu until we add to our media
    queries. Add media queries to switch between displaying the drop-down menu on
    small browser windows and the larger inline list menu on larger browser window
    sizes. Use the `display` property to show and hide the menus.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示菜单的两个不同版本，直到我们添加到我们的媒体查询。添加媒体查询以在小浏览器窗口和较大浏览器窗口尺寸上切换显示下拉菜单和较大的内联列表菜单。使用`display`属性来显示和隐藏菜单。
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Under the menus, before the closing `</header>` tag create a space for a large
    high-quality photo to display on the site. And to prevent it from becoming a wasted
    space let''s put a search box right in the middle of it. We can actually make
    this search form stick closely to the center of the picture and responsively adjust
    to screen size changes. This is illustrated in the following simple code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单下，在闭合的`</header>`标签之前，为网站上显示的大高质量照片创建一个空间。为了防止它成为浪费的空间，让我们把一个搜索框放在它的中间。我们实际上可以使这个搜索表单紧贴图片中心，并对屏幕尺寸的变化做出响应性调整。这在下面的简单代码中有所说明：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: And of course the magic is in the CSS. Let's use some tricks to make the search
    form hover in the same spot. First give the outer `div` element a width of `100%`,
    then the `search` element will get an absolute position and few different properties
    under different media queries. This combination will keep the search form floating
    above the middle of the `img` area. Keep in mind that we are adding new CSS to
    the media queries. The following CSS code reflects only the additions, not what
    was already there. It gets rather long if I show the entire CSS expanding each
    time. At the end, I will include the entire CSS as it should be in its final state.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是CSS的魔力。让我们使用一些技巧使搜索表单在同一位置悬停。首先给外部`div`元素一个`100%`的宽度，然后`search`元素将在不同的媒体查询下获得绝对位置和几个不同的属性。这种组合将使搜索表单悬浮在`img`区域的中间。请记住，我们正在向媒体查询添加新的CSS。以下CSS代码仅反映了新增内容，而不是已经存在的内容。如果每次都展开整个CSS，它会变得相当长。最后，我将包括整个CSS，以便它以最终状态呈现。
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `.img-search` image element will receive a dynamic width of `100%`, and
    auto height. And that's it for the large image search field.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`.img-search`图像元素将获得`100%`的动态宽度和自动高度。这就是大图搜索字段的全部内容。'
- en: 'Give the next element, `.flip-tab`, a width of `100%`, and any height or other
    properties you want. You won''t have to worry about this again:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 给下一个元素`.flip-tab`一个`100%`的宽度，以及任何高度或其他你想要的属性。你不必再担心这个了：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The next element, `.teasers`, will get a `max-width: 1280px` property so it
    will auto-magically be at `100%` width of its parent element, `top-wrap`, limited
    to `1280px`. This element is simply a container for the three left-floating `.teaser`
    elements. These `.teaser` elements will have two different property sets under
    different media queries for a `600px` breakpoint.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来的元素`.teasers`将获得一个`max-width: 1280px`属性，因此它将自动占据其父元素`top-wrap`的`100%`宽度，限制为`1280px`。这个元素只是三个左浮动的`.teaser`元素的容器。这些`.teaser`元素在不同的媒体查询下会有两组不同的属性集，用于`600px`断点。'
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'That concludes everything you will be doing in the `header` element. Up next
    is the `content` element, which wraps the content that will float in the right-hand
    side columns. What''s inside this element is nothing more than a two-column float
    split at a 60/40 ratio, or if the parent element is narrow, each is `100%` wide.
    The `content` element will have two different property sets under media queries
    with a breakpoint at `1280px`. These elements have some limited sample content.
    You can add much more once you deploy the layout:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了你在`header`元素中要做的一切。接下来是`content`元素，它包裹着将在右侧列中浮动的内容。这个元素里面的内容只是一个60/40比例的两列浮动，或者如果父元素很窄，每个都是`100%`宽。`content`元素将在断点为`1280px`的媒体查询下有两组不同的属性集。这些元素有一些有限的示例内容。一旦部署了布局，你可以添加更多内容：
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This CSS is more complicated, but remember, you can access this entire work
    online. As you can see, the elements do zig and zag around a bit, but each breakpoint
    will have an optimized display.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS更加复杂，但是记住，你可以在线访问整个工作。正如你所看到的，元素会在周围来回移动一下，但是每个断点都会有一个优化的显示。
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, the footer! (The end of the page!) The footer breaks down into a `100%`
    wide outer `<footer>`, and then a `footer-wrap` wrap with a `100%` width, `max-width`
    of `1280px`, dynamic side margins, and inline-block display. Inside are three
    elements that always have the property `display:inline-block`. When the display
    is small, these elements are each `100%` wide, otherwise they are `33%` wide,
    left-floating, with a minimum width of `144px`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，页脚！（页面的结尾！）页脚分解为`100%`宽的外部`<footer>`，然后是一个`footer-wrap`包裹，宽度为`100%`，`max-width`为`1280px`，动态的边距，并且内联块显示。里面有三个元素，它们始终具有`display:inline-block`属性。当显示较小时，这些元素每个都是`100%`宽，否则它们是`33%`宽，左浮动，最小宽度为`144px`：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As I promised previously, here is the full CSS code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我之前承诺的那样，这里是完整的CSS代码：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This one was long and difficult; thanks for hanging in there! The effect is
    illustrated in the following screenshot, compare this with your output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分又长又难，感谢你的耐心等待！效果如下截图所示，请与你的输出进行比较：
- en: '![How to do it...](img/5442OT_03_07.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/5442OT_03_07.jpg)'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: These CSS and media queries, when combined together, make a responsive footer
    that can stay centered through all the screen sizes, and collapse down for small
    mobile-sized browser windows.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些CSS和媒体查询结合在一起，可以制作一个响应式页脚，可以在所有屏幕尺寸下保持居中，并且可以在小型移动浏览器窗口中折叠。
- en: Responsive layout is an exciting new area of web development methodology. The
    responsive methodology allows the designer and developer to create for multiple
    devices, especially mobile devices, without the expense of developing native apps.
    Very soon, if not already, you can expect many companies to want to take a responsive
    approach to their site redesigns.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式布局是Web开发方法的一个令人兴奋的新领域。响应式方法允许设计师和开发人员为多个设备创建，特别是移动设备，而无需开发原生应用程序。很快，如果还没有的话，你可以期待许多公司希望采用响应式方法来重新设计他们的网站。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You created a very simple method of responsive almost completely using CSS.
    I would challenge you to take this one step further by eliminating the dual menus
    in the `nav` element. Look in the *Adding JavaScript for mobile browsers only*
    recipe, in [Chapter 5](ch05.html "Chapter 5. Making Mobile-first Web Applications"),
    *Making Mobile-first Web Applications*, to add a jQuery method to replace the
    large menus with the `<select>` element in mobile browsers. This will prevent
    any potential search engine penalty from having duplicate content in the menus.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用了一种非常简单的方法，几乎完全使用CSS来实现响应式。我要求你进一步挑战自己，通过在*为移动浏览器添加JavaScript*配方中查看[第5章](ch05.html
    "第5章。制作移动优先的Web应用程序")中的*制作移动优先的Web应用程序*，添加一个jQuery方法，以在移动浏览器中用`<select>`元素替换大菜单。这将防止在菜单中有重复内容时可能导致的潜在搜索引擎惩罚。
- en: First, cut out the `smallMenu` div element and its children, and paste it somewhere
    in the header, or top of the body, inside a `<script> </script>` element as a
    variable, `smallMenu`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，剪切`smallMenu` div元素及其子元素，并将其粘贴到头部的某个地方，或者在`<script> </script>`元素中作为变量`smallMenu`。
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Next write the script that will be called to remove the `large-menu` div element
    and append to the `nav` element the `smallMenu` variable.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来编写脚本，将调用以删除`large-menu` div元素，并将`smallMenu`变量附加到`nav`元素。
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, when the page loads on a mobile device, the script will replace the navigation
    with a scaled-down mobile version, and you will not lose any sleep over your SEO!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当页面在移动设备上加载时，脚本将用缩小的移动版本替换导航，你不会因为SEO而失眠！
