- en: Chapter 4. Avoid Reinventing the Wheel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。避免重复造轮子
- en: In the preceding chapters, you learned how to use *Less* to compile your CSS.
    *Less* helps you create reusable and maintainable CSS code. You have learned how
    to organize your files and the previous chapter also showed you the role of namespaces
    to make your code portable. *Less* helps you write efficient code to handle browser
    incompatibility. *Less* doesn't solve problems with browser incompatibility on
    its own but makes your solutions reusable, although the reusable mixins can still
    be complex for this reason. In this chapter, you will learn that you won't have
    to write all this complex code yourself. There are some libraries of prebuilt
    mixins out there which can help you work faster and create more stable code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，你学会了如何使用*Less*来编译你的CSS。*Less*帮助你创建可重用和可维护的CSS代码。你已经学会了如何组织你的文件，前一章还向你展示了命名空间的作用，使你的代码具有可移植性。*Less*帮助你编写高效的代码来处理浏览器的不兼容性。*Less*不能单独解决浏览器的不兼容性问题，但可以使你的解决方案可重用，尽管由于这个原因，可重用的混合仍然可能很复杂。在本章中，你将学会你不必自己编写所有这些复杂的代码。有一些预构建混合的库可以帮助你更快地工作并创建更稳定的代码。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Background gradients
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景渐变
- en: Preventing unused code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止未使用的代码
- en: Testing your code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试你的代码
- en: The iconic fonts of prebuilt mixins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预构建混合的标志性字体
- en: Retina.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Retina.js
- en: Revisiting background gradients
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视背景渐变
- en: Remember the CSS3 background gradient that was discussed in [Chapter 2](ch02.html
    "Chapter 2. Using Variables and Mixins"), *Using Variables and Mixins*? To show
    a better or the same gradient on different browsers, you have to use vendor-specific
    rules. Different sets of rules make your mixins more complex. In this case, more
    complex also means more difficult to maintain.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得[第2章](ch02.html "第2章。使用变量和混合")中讨论的CSS3背景渐变吗，*使用变量和混合*？为了在不同的浏览器上显示更好或相同的渐变，你必须使用特定于供应商的规则。不同的规则集会使你的混合更加复杂。在这种情况下，更复杂也意味着更难以维护。
- en: In practice, your mixins grow with outdated code or with code that is no longer
    supported on the one hand, while you have to update your mixins for newer browsers
    on the other. Of course, we can only hope that new browser versions support CSS3
    specifications without any further changes to the code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，你的混合会随着过时的代码或不再受支持的代码而增长，另一方面，你必须更新你的混合以适应更新的浏览器。当然，我们只能希望新的浏览器版本支持CSS3规范，而不需要对代码进行进一步的更改。
- en: The **Can I use...** website ([http://caniuse.com/](http://caniuse.com/)) provides
    compatibility tables for HTML5, CSS3, and SVG support, and also for desktop and
    mobile browsers. It will show you that most of the current browsers have support
    for CSS gradients in their current version. At the time of writing this book,
    the Android browser for mobile still relies on the `-webkit` vendor rule, and
    Opera Mini doesn't support it at all.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Can I use...**网站([http://caniuse.com/](http://caniuse.com/))提供了HTML5、CSS3和SVG支持的兼容性表，还有桌面和移动浏览器的兼容性表。它会告诉你，大多数当前浏览器在其当前版本中都支持CSS渐变。在撰写本书时，移动设备的Android浏览器仍然依赖于`-webkit`供应商规则，而Opera
    Mini根本不支持它。'
- en: 'If you drop the support for older browsers, your mixin can be reduced to the
    following code snippet:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果放弃对旧版浏览器的支持，你的混合可以简化为以下代码片段：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code also drops support for IE8 and IE9\. If you choose to support
    these browsers too, you have to add an additional IE-specific rule. The **Can
    I use…** website also shows you market shares of the most common browsers. In
    some cases, it can also be useful to only provide functional support for older
    browsers and not expect everything to look exactly the same on all browsers. For
    instance, a navigation structure without advanced animations can still help the
    user navigate through your site. People who use an older browser do not always
    expect the newest techniques. These techniques also do not always have added value.
    Older browsers mostly don't run on the newest hardware; on these browsers, support
    for features such as gradients will only slow down your website instead of adding
    any value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码还放弃了对IE8和IE9的支持。如果你选择支持这些浏览器，你必须添加额外的IE特定规则。**Can I use…**网站还向你展示了最常见浏览器的市场份额。在某些情况下，只为旧版浏览器提供功能支持而不指望所有浏览器看起来完全一样也是有用的。例如，一个没有高级动画的导航结构仍然可以帮助用户浏览你的网站。使用旧版浏览器的人并不总是期望最新的技术。这些技术也并不总是有附加值。旧版浏览器大多不运行在最新的硬件上；在这些浏览器上，对渐变等功能的支持只会减慢你的网站速度，而不会增加任何价值。
- en: Unused code
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未使用代码
- en: Even when using *Less* for long running and growing projects, it's almost impossible
    to not find some unused pieces of code in your code. Browser tools can help detect
    this unused code in your final CSS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在长期运行和不断增长的项目中使用*Less*，也几乎不可能在你的代码中找不到一些未使用的代码。浏览器工具可以帮助检测最终CSS中的未使用代码。
- en: Chrome's developer tools
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chrome的开发者工具
- en: Google Chrome's developer tools have an option to find unused CSS. In Google
    Chrome, navigate to **Tools** | **Developers Tools**, select the **Audits** tab,
    and click on **Run**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌Chrome的开发者工具有一个选项可以找到未使用的CSS。在谷歌Chrome中，导航到**工具** | **开发者工具**，选择**审核**选项卡，然后点击**运行**。
- en: Now use this tool to test the demo code from the preceding chapters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用这个工具来测试前几章的演示代码。
- en: 'To start, open `http://localhost/index.html` in your browser and run the test.
    You will see the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在浏览器中打开`http://localhost/index.html`并运行测试。你会看到以下截图：
- en: '![Chrome''s developer tools](img/1465OS_04_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome的开发者工具](img/1465OS_04_01.jpg)'
- en: Unused code shown by Chrome's developer tools
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome的开发者工具显示的未使用代码
- en: The list of unused code starts with a long list of styles defined in `less/normalize.less`,
    as seen in [Chapter 1](ch01.html "Chapter 1. Improving Web Development with Less"),
    *Improve Web Development with Less*; these are the styles of the **CSS reset**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用代码列表以`less/normalize.less`中定义的一长串样式开始，如[第1章](ch01.html "第1章。使用Less改进Web开发")中所示，*使用Less改进Web开发*；这些是**CSS重置**的样式。
- en: In most projects, the same base of CSS code (the same file) is used for every
    page. For this reason, you cannot always guarantee that a page includes only the
    code that it really uses. Some of this code won't be used on every page but will
    have to be used on other or future pages. Web browsers are able to cache CSS files,
    for this reason it is better to use the same CSS file to style different pages
    from your website. Some pages will not use all the cached style rules which will
    be shown as unused code on that page. Cached code is loaded once and used on every
    page. The CSS reset seems useful for all pages, so you should not change or remove
    it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数项目中，每个页面都使用相同的CSS代码基础（相同的文件）。因此，您不能总是保证页面只包含真正使用的代码。其中一些代码不会在每个页面上使用，但将必须在其他或未来的页面上使用。Web浏览器能够缓存CSS文件，因此最好使用相同的CSS文件来为网站的不同页面设置样式。某些页面将不使用所有缓存的样式规则，这将显示为该页面上未使用的代码。缓存的代码只加载一次并在每个页面上使用。CSS重置似乎对所有页面都有用，因此您不应更改或删除它。
- en: As you can also see, `.centercontent` and `.screen-readeronly` are unused. Remember
    that classes are compiled into your CSS while mixins are not. Now, `.centercontent`
    and `.screen-readeronly` are defined as classes. Having a `.screen-readeronly`
    class seems useful, but `.centercontent` can be changed to a mixin.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`.centercontent`和`.screen-readeronly`是未使用的。请记住，类被编译到您的CSS中，而mixin则不是。现在，`.centercontent`和`.screen-readeronly`被定义为类。拥有`.screen-readeronly`类似乎是有用的，但`.centercontent`可以更改为mixin。
- en: Firebug CSS usage add-on
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Firebug CSS使用附加组件
- en: For Firefox, an add-on for Firebug is available. This helps you find the unused
    code. You can download this plugin at [https://addons.mozilla.org/en-US/firefox/addon/css-usage/](https://addons.mozilla.org/en-US/firefox/addon/css-usage/).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Firefox，可以使用Firebug的附加组件。这将帮助您找到未使用的代码。您可以在[https://addons.mozilla.org/en-US/firefox/addon/css-usage/](https://addons.mozilla.org/en-US/firefox/addon/css-usage/)下载此插件。
- en: Testing your code
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的代码
- en: You don't have to write all the *Less* code yourself as it is reusable and portable.
    Mixins and snippets of *Less* code can be found on the Web and (re)used in your
    projects. Search for *Less* mixin background gradients and you will get many useful
    hits. Try to find code that offers support for browsers and meets your requirements.
    If you have any doubts about the browser support of a mixin, consider asking questions
    on Stackoverflow.com ([http://www.stackoverflow.com/](http://www.stackoverflow.com/)).
    Always show your code and what you have done; don't just ask for a solution. Also,
    other questions regarding *Less* can be asked on Stackoverflow.com.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必自己编写所有的Less代码，因为它是可重用和可移植的。在Web上可以找到Less代码的mixin和片段，并在您的项目中（重新）使用。搜索*Less*
    mixin背景渐变，您将得到许多有用的结果。尝试找到支持浏览器并满足您要求的代码。如果对mixin的浏览器支持有任何疑问，请考虑在Stackoverflow.com上提问。始终展示您的代码和您所做的事情；不要只是寻求解决方案。此外，关于*Less*的其他问题也可以在Stackoverflow.com上提问。
- en: Integration of code snippets or even complete namespaces will make the testing
    of your code more important.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 集成代码片段甚至完整的命名空间将使您的代码测试更加重要。
- en: Understanding TDD
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解TDD
- en: '**Test-driven development** (**TDD**) is a proven method for software development.
    In TDD, you write tests for every piece of code in your project. All tests should
    pass after changing your code when adding or improving functionalities or refactoring
    the code. All tests should run automatically. While automatically testing *Less*
    and CSS code, you need to manually look at the exact appearance of the pages in
    different browsers and devices, although other aspects such as correctness and
    performance can be tested automatically. You can, for instance, automatically
    test your code with tools such as **CSS Lint** ([http://ccslint.net/](http://ccslint.net/)).
    CSS Lint validates and tests your code, among other things, for performance, maintainability,
    and accessibility. These tools test the compiled CSS and not your *Less* code.
    The **Less Lint Grunt** plugin compiles your *Less* files, runs the generated
    CSS through CSS Lint, and outputs the offending *Less* line for any CSS Lint errors
    that are found. More information can be found by visiting [https://www.npmjs.org/package/grunt-lesslint](https://www.npmjs.org/package/grunt-lesslint).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）是软件开发的一种经过验证的方法。在TDD中，您为项目中的每一段代码编写测试。在添加或改进功能或重构代码时，更改代码后，所有测试都应该通过。所有测试应该自动运行。虽然可以自动测试Less和CSS代码，但您需要手动查看不同浏览器和设备上页面的确切外观，尽管其他方面，如正确性和性能可以自动测试。例如，您可以使用CSS
    Lint等工具自动测试您的代码。CSS Lint验证和测试您的代码，包括性能、可维护性和可访问性等方面。这些工具测试编译后的CSS而不是您的Less代码。Less
    Lint Grunt插件编译您的Less文件，通过CSS Lint运行生成的CSS，并输出任何发现的CSS Lint错误的冒犯的Less行。可以通过访问[https://www.npmjs.org/package/grunt-lesslint](https://www.npmjs.org/package/grunt-lesslint)获取更多信息。
- en: All about style guides
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于样式指南的一切
- en: A **style guide** gives an oversight of your website's elements, such as buttons,
    navigation structures, headings, and fonts. It shows the elements in the right
    presentation and colors. Creating style guides for your project and website can
    help you test your *Less* code. Style guides will also help other developers and
    content publishers of your project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 样式指南提供了网站元素的概述，如按钮、导航结构、标题和字体。它展示了正确的呈现和颜色。为您的项目和网站创建样式指南可以帮助您测试您的Less代码。样式指南还将帮助项目的其他开发人员和内容发布者。
- en: 'You may be thinking now that style guides are indeed useful but also time consuming;
    for this reason, two tools will be discussed in the following sections. These
    tools generate your style guides automatically based on your *Less* (or compiled
    CSS) code. Both tools still require some additional code and effort, but it won''t
    take too much of your time. Testing your code nearly always pays you back. Also,
    realize the big win here: you only have to test the effect of your styles. *Less*
    guarantees that your CSS is already valid, and the *Less* compiler handles it''s
    optimization. As promised, it provides more time for your real design tasks.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可能会认为样式指南确实很有用，但也很耗时；因此，接下来将讨论两种工具。这些工具根据您的 *Less*（或编译后的 CSS）代码自动生成样式指南。这两种工具仍然需要一些额外的代码和努力，但不会花费太多时间。几乎总是值得测试您的代码。还要意识到这里的重大收益：您只需测试样式的效果。*Less*
    保证您的 CSS 已经有效，并且 *Less* 编译器处理了它的优化。正如承诺的那样，这为您的真正设计任务提供了更多时间。
- en: Building a style guide with StyleDocco
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 StyleDocco 构建样式指南
- en: StyleDocco generates documentation and style guide documents from your style
    sheets. StyleDocco works very well with *Less* files too. To create a style guide
    with StyleDocco, you will have to add comments to your *Less* files. The comments
    should explain what the style does and also contain HTML example code. The comments
    need to be written in **Markdown**. Markdown is a plain text format that can be
    easily converted into HTML. StackOverflow.com uses Markdown for posts and comments.
    You can use its help guide to learn more; you will find it by visiting [http://www.stackoverflow.com/editing-help/](http://www.stackoverflow.com/editing-help/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: StyleDocco 从样式表中生成文档和样式指南文档。StyleDocco 也非常适用于 *Less* 文件。要使用 StyleDocco 创建样式指南，您需要在
    *Less* 文件中添加注释。注释应该解释样式的作用，并包含 HTML 示例代码。注释需要用 **Markdown** 编写。Markdown 是一种纯文本格式，可以轻松转换为
    HTML。StackOverflow.com 使用 Markdown 发表和评论。您可以使用其帮助指南了解更多信息；您可以通过访问 [http://www.stackoverflow.com/editing-help/](http://www.stackoverflow.com/editing-help/)
    找到它。
- en: 'StyleDocco can be installed with **npm** using the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令使用 **npm** 安装 StyleDocco：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You have read about npm in [Chapter 1](ch01.html "Chapter 1. Improving Web Development
    with Less"), *Improving Web Development with Less*. After installing StyleDocco,
    you will have to add the Markdown comments to your *Less* files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在 [第 1 章](ch01.html "第 1 章。使用 Less 改进 Web 开发") 中了解了 npm，*使用 Less 改进 Web 开发*。安装
    StyleDocco 后，您需要在 *Less* 文件中添加 Markdown 注释。
- en: 'To see an example of a style guide generated with StyleDocco, open `less/nav.less`
    in your text editor and add the description in Markdown followed by the HTML test
    code, as shown in the following code snippet:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看使用 StyleDocco 生成的样式指南示例，请在文本编辑器中打开 `less/nav.less`，并按照下面的代码片段添加 Markdown
    描述，然后是 HTML 测试代码：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To build your style guide, navigate to your *Less* folder (`lessc`) in the
    terminal and run the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建样式指南，请在终端中导航到您的 *Less* 文件夹（`lessc`）并运行以下命令：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, the name of the style guide is set with `-n`. Mostly,
    you don''t have to set the `–preprocessor` option if your file path contains *Less*
    files only. To build a style guide for your *Less* files, the command should look
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，使用 `-n` 设置了样式指南的名称。通常情况下，如果您的文件路径只包含 *Less* 文件，则不必设置 `–preprocessor`
    选项。要为您的 *Less* 文件构建样式指南，命令应该如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `styledocco` command generates a new folder named `docs/`. This folder
    contains an `index.html` file, which can be opened in your browser. The final
    result should look like the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`styledocco` 命令会生成一个名为 `docs/` 的新文件夹。这个文件夹包含一个 `index.html` 文件，可以在浏览器中打开。最终结果应该看起来像下面的截图：'
- en: '![Building a style guide with StyleDocco](img/1465OS_04_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![使用 StyleDocco 构建样式指南](img/1465OS_04_02.jpg)'
- en: Example of a style guide built with StyleDocco
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 StyleDocco 构建的样式指南示例
- en: Testing your code with tdcss.js
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 tdcss.js 测试您的代码
- en: 'The `tdcss.js` framework is another style guide tool that works well with *Less*
    and promotes the usage of test-driven development. The `tdcss.js` framework can
    be downloaded free of charge from GitHub at [https://github.com/jakobloekke/tdcss.js](https://github.com/jakobloekke/tdcss.js).
    Also, see [http://jakobloekke.github.io/tdcss.js/](http://jakobloekke.github.io/tdcss.js/)
    for further information. Unlike StyleDocco, using `tdcss.js` doesn''t change your
    *Less* files. You generate your style guide with snippets of relevant source code
    from your project. You can use HTML-comment-style coding, for instance, `<!--
    : Navigation -->`, to separate them. Snippets are copied and pasted to an HTML
    document which forms your style guide and includes styles from your *Less* code
    and `tdcss.js`. The `head` section of the HTML document of the example navigation
    will have the following structure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`tdcss.js` 框架是另一个与 *Less* 配合良好并促进测试驱动开发的样式指南工具。`tdcss.js` 框架可以从 GitHub 免费下载，网址为
    [https://github.com/jakobloekke/tdcss.js](https://github.com/jakobloekke/tdcss.js)。另请参阅
    [http://jakobloekke.github.io/tdcss.js/](http://jakobloekke.github.io/tdcss.js/)
    以获取更多信息。与 StyleDocco 不同，使用 `tdcss.js` 不会更改您的 *Less* 文件。您可以使用项目中相关源代码的片段生成样式指南。例如，您可以使用
    HTML 注释样式编码，如 `<!-- : 导航 -->`，将它们分隔开。然后将片段复制并粘贴到一个 HTML 文档中，形成您的样式指南，并包含来自您的 *Less*
    代码和 `tdcss.js` 的样式。示例导航的 HTML 文档的 `head` 部分应具有以下结构：'
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The markup in the body is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: body 中的标记如下：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'See the result of the preceding code by opening `http://localhost/tdcss.html`
    in your browser. The result should finally look like the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在浏览器中打开 `http://localhost/tdcss.html` 查看上述代码的结果。最终结果应该看起来像下面的截图：
- en: '![Testing your code with tdcss.js](img/1465OS_04_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![使用 tdcss.js 测试您的代码](img/1465OS_04_03.jpg)'
- en: Example of a style guide built with tdcss.js
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 tdcss.js 构建的样式指南示例
- en: Prebuilt mixins
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预构建的混合
- en: 'You already know about searching and finding mixins on the Web. However, using
    and reusing well-tested mixins will be a lot easier than that. Other developers
    have already built complete libraries and prebuilt mixins which you can use for
    your projects. These prebuilt mixins help you write *Less* code without having
    to think about vendor-specific rules that make CSS3 complex. You will be introduced
    to the five most used libraries in the following sections. These libraries are
    as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解了在网络上搜索和找到mixin。然而，使用和重用经过充分测试的mixin将比那更容易。其他开发人员已经构建了完整的库和预构建的mixin，您可以在项目中使用。这些预构建的mixin帮助您编写*Less*代码，而无需考虑使CSS3复杂的供应商特定规则。在接下来的章节中，您将了解到五个最常用的库。这些库如下：
- en: Less Elements ([http://lesselements.com](http://lesselements.com))
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Less Elements ([http://lesselements.com](http://lesselements.com))
- en: Less Hat ([http://lesshat.madebysource.com/](http://lesshat.madebysource.com/))
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Less Hat ([http://lesshat.madebysource.com/](http://lesshat.madebysource.com/))
- en: 3L ([http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/))
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3L ([http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/))
- en: ClearLess ([http://clearleft.github.com/clearless/](http://clearleft.github.com/clearless/))
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ClearLess ([http://clearleft.github.com/clearless/](http://clearleft.github.com/clearless/))
- en: Preboot ([http://markdotto.com/bootstrap/](http://markdotto.com/bootstrap/))
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Preboot ([http://markdotto.com/bootstrap/](http://markdotto.com/bootstrap/))
- en: A more comprehensive list of mixin libraries can also be found at [http://lesscss.org/usage/#frameworks-using-less](http://lesscss.org/usage/#frameworks-using-less).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在[http://lesscss.org/usage/#frameworks-using-less](http://lesscss.org/usage/#frameworks-using-less)找到更全面的mixin库列表。
- en: Please understand that you don't have to choose; there is no restriction that
    you have to use only one of these libraries. All these libraries have pros and
    cons; you have to choose the libraries that best fit your project requirements.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请理解，您不必选择；没有限制您只能使用这些库中的一个。所有这些库都有优缺点；您必须选择最适合您项目需求的库。
- en: Globally, all libraries offer you a *Less* file, which contains the mixins that
    you can import in your project. Although some libraries also have some settings,
    in all cases, `@import "{library-name}";` will be enough to make its mixins available
    for your project. *Less* has no restrictions on including more than one library,
    but doing this will give you problems with clashing mixin names. All mixins with
    the same name will be compiled into the CSS (if their parameters also match).
    For this reason, some libraries also have a prefixed version of these mixins.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 全局上，所有库都为您提供一个*Less*文件，其中包含您可以在项目中导入的mixin。虽然一些库也有一些设置，在所有情况下，`@import "{library-name}";`就足以使其mixin可用于您的项目。*Less*没有限制包含多个库，但这样做会导致mixin名称冲突的问题。所有具有相同名称的mixin将被编译为CSS（如果它们的参数也匹配）。因此，一些库还具有这些mixin的带前缀版本。
- en: 'Instead of the prefixed versions, using namespaces, as explained in [Chapter
    3](ch03.html "Chapter 3. Nested Rules, Operations, and Built-in Functions"), *Nested
    Rules, Operations, and Built-in Functions*, offers a more stable solution in most
    cases, as shown in the following code snippet:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与带前缀版本不同，使用命名空间，如[第3章](ch03.html "第3章。嵌套规则、操作和内置函数")中所解释的，*嵌套规则、操作和内置函数*，在大多数情况下提供了更稳定的解决方案，如下面的代码片段所示：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Make the mixins available using `#{library-name} > mixin()`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`#{library-name} > mixin()`使mixin可用。
- en: Using single-line declarations for vendor-specific rules with Less Elements
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Less Elements为供应商特定规则提供单行声明
- en: Less Elements is perhaps the most compact library of the ones discussed in this
    chapter. Compact doesn't mean it is not useful. The focus of this library is on
    the consolidation of cross-browser prefixes into single, concise declarations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Less Elements可能是本章讨论的库中最紧凑的一个。紧凑并不意味着它没有用处。这个库的重点是将跨浏览器前缀合并为单一简洁的声明。
- en: Remember the vertical background gradient from the beginning of the chapter?
    You have seen that you will need at least three declarations, including vendor-specific
    rules, when you are supporting modern browsers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得本章开头的垂直背景渐变吗？您已经看到，当您支持现代浏览器时，您将需要至少三个声明，包括供应商特定规则。
- en: 'With Less Elements, you can do the same with a single declaration of *Less*
    code with three parameters, as shown in the following code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Less Elements，您可以使用三个参数的单行声明来完成相同的操作，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first parameter defines the fallback color used for browsers that don't
    support gradients. The gradient goes from bottom to top, where the second parameter
    sets the bottom color and the third parameter sets the top color.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数定义了在不支持渐变的浏览器中使用的回退颜色。渐变从底部到顶部，第二个参数设置底部颜色，第三个参数设置顶部颜色。
- en: 'The preceding *Less* code will finally compile into CSS as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的*Less*代码最终将编译为以下CSS：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In its simplicity, Less Elements offers many useful mixins to build your project
    with **CSS3 techniques**. It provides single-line declarations for all CSS3 properties
    with vendor-specific rules and extends this with declarations for layout.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在其简单性中，Less Elements提供了许多有用的mixin，用于使用**CSS3技术**构建您的项目。它为所有CSS3属性提供了供应商特定规则的单行声明，并通过布局声明扩展了这一点。
- en: The `.columns()` mixin divides an element into columns, including a border and
    a gap between the columns. Variables for the `.columns()` mixin are in the order
    of column width, column count, column gap, column border color, column border
    style, and column border width.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`.columns()` mixin将元素分成列，包括列之间的边框和间隙。`.columns()` mixin的变量顺序为列宽、列数、列间隙、列边框颜色、列边框样式和列边框宽度。'
- en: This mixin can be applied on nonreplaced block-level elements (except table
    elements), table cells, and inline-block elements such as the `body` or `div`
    elements.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个mixin可以应用于非替换的块级元素（除表元素外）、表单元格和内联块元素，如`body`或`div`元素。
- en: 'To divide a `div` element in to three columns with a width of 150 px, you can
    now write the following code in *Less*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`div`元素分成宽度为150像素的三列，您现在可以在*Less*中编写以下代码：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code compiles into CSS and looks as shown in the following code
    snippet:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码编译成 CSS，并如下所示：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also test this by loading `http://localhost/columns.html` in your browser.
    Please also resize your browser window from small screens to full screen to see
    that these columns are responsive by default. The compiled `.div.threecolumns`
    class can be used with the following HTML code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在浏览器中加载 `http://localhost/columns.html` 来测试这一点。还请将浏览器窗口从小屏幕调整到全屏幕，以查看这些列默认情况下是响应式的。编译后的
    `.div.threecolumns` 类可以与以下 HTML 代码一起使用：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code will result in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将产生以下截图：
- en: '![Using single-line declarations for vendor-specific rules with Less Elements](img/1465OS_04_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Less Elements 为特定供应商的规则使用单行声明](img/1465OS_04_04.jpg)'
- en: Example of a multi-column layout built with the columns mixin of Less Elements
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Less Elements 的 columns mixin 构建的多列布局示例
- en: The `.columns()` mixin makes use of the **CSS Multi-column Layout Module**.
    More information about this module can be found at [http://www.w3.org/TR/css3-multicol/](http://www.w3.org/TR/css3-multicol/).
    Unfortunately, the support for this module by most modern browsers is not good
    yet.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`.columns()` mixin 使用了 **CSS 多列布局模块**。有关此模块的更多信息可以在 [http://www.w3.org/TR/css3-multicol/](http://www.w3.org/TR/css3-multicol/)
    找到。不幸的是，大多数现代浏览器对该模块的支持还不够好。'
- en: Less Elements does not provide any information about the browser support of
    the compiled CSS. You must have realized this when using Less Elements in your
    project. As mentioned earlier, you can check browser support on the [caniuse.com](http://caniuse.com)
    website. To find out which browsers support this Multi-column Layout Module, you
    will have to visit [http://caniuse.com/multicolumn](http://caniuse.com/multicolumn).
    Always check the preceding module with the requirements of your project. Also,
    this example shows you why style guides can be very useful.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Less Elements 不提供有关编译后的 CSS 的浏览器支持的任何信息。在使用 Less Elements 时，您必须已经意识到了这一点。如前所述，您可以在
    [caniuse.com](http://caniuse.com) 网站上检查浏览器支持情况。要找出哪些浏览器支持此多列布局模块，您将需要访问 [http://caniuse.com/multicolumn](http://caniuse.com/multicolumn)。始终检查前面的模块与您的项目的要求是否匹配。此外，此示例向您展示了为什么样式指南非常有用。
- en: Less Hat – a comprehensive library of mixins
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Less Hat – a comprehensive library of mixins
- en: Unlike Less Elements, **Less Hat** is very comprehensive. At the time of writing
    this book, Less Hat contains 86 prebuilt mixins. Less Hat also has a strong relationship
    with CSS Hat. CSS Hat is a commercial licensed tool that converts Adobe Photoshop
    layers into CSS.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Less Elements 不同，**Less Hat** 非常全面。在撰写本书时，Less Hat 包含了 86 个预构建 mixin。Less
    Hat 还与 CSS Hat 有着密切的关系。CSS Hat 是一款商业许可的工具，可以将 Adobe Photoshop 图层转换为 CSS。
- en: 'The Less Hat mixins offer the possibility of disabling some browser-specific
    prefixes. You should not use this unless you have extremely solid reasons for
    doing so. By default, Less Hat uses all the browser prefixes by setting the *Less*
    variables to `true` as shown in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Less Hat mixin 提供了禁用一些特定于浏览器的前缀的可能性。除非您有非常充分的理由这样做，否则不应该使用这个功能。默认情况下，Less Hat
    通过将 *Less* 变量设置为 `true` 来使用所有浏览器前缀，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, `@w3c` refers to the nonprefixed rules that define the
    standard property names described by the **W3C specification**. Less Hat advertises
    itself as having mixins that create an unlimited number of shadows, gradients,
    and animations. **Box-shadow** is an example of this. With Less Hat, the box-shadow
    mixin can be written as `.box-shadow(<offset-x> <offset-y> spread blur-radius
    color inset, …)`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`@w3c` 指的是定义了 **W3C 规范** 描述的标准属性名称的非前缀规则。Less Hat 宣传自己具有可以创建无限数量的阴影、渐变和动画的
    mixin。**Box-shadow** 就是一个例子。使用 Less Hat，box-shadow mixin 可以写成 `.box-shadow(<offset-x>
    <offset-y> spread blur-radius color inset, …)`。
- en: 'To try the preceding `.box-shadow` mixin, you could write it in *Less* with
    Less Hat as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试前面的 `.box-shadow` mixin，您可以使用 Less Hat 在 *Less* 中编写如下：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code compiles into the following code snippet:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码编译成以下代码片段：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To inspect this, open `http://localhost/boxshadow.html` in your browser and
    you will see the result of the `.box-shadow` mixin, as shown in the following
    screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查这一点，请在浏览器中打开 `http://localhost/boxshadow.html`，您将看到 `.box-shadow` mixin 的结果，如下截图所示：
- en: '![Less Hat – a comprehensive library of mixins](img/1465OS_04_05.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Less Hat – a comprehensive library of mixins](img/1465OS_04_05.jpg)'
- en: Example of the effect of the box-shadow mixin of Less Hat
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Less Hat 的 box-shadow mixin 的效果示例
- en: Indeed, the `.box-shadow()` mixin of Less Elements doesn't accept multiple shadows,
    but the mixin of 3L, discussed in the following section, works with multiple shadows
    separated with commas.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Less Elements 的 `.box-shadow()` mixin 不接受多个阴影，但在下一节讨论的 3L 的 mixin 可以处理用逗号分隔的多个阴影。
- en: Using the 3L library of prebuilt mixins
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用预构建 mixin 的 3L 库
- en: '**3L** (**Lots of Love for Less**) is another collection of prebuilt mixins.
    Besides the standard single-line declarations, 3L offers something extra. 3L provides
    mixins for CSS reset or normalization, as discussed earlier in [Chapter 1](ch01.html
    "Chapter 1. Improving Web Development with Less"), *Improving Web Development
    with Less*. You can call these mixins without placing them inside selector blocks
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**3L** (**Lots of Love for Less**) 是另一个预构建 mixin 集合。除了标准的单行声明，3L 还提供了额外的功能。3L
    提供了用于 CSS 重置或规范化的 mixin，如 [第 1 章](ch01.html "第 1 章。使用 Less 改进 Web 开发") 中所讨论的 *使用
    Less 改进 Web 开发*。您可以在不将它们放在选择器块内的情况下调用这些 mixin，如下所示：'
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding `.h5bp()` reset, your CSS is based on **HTML5 Boilerplate**.
    HTML5 Boilerplate is a professional frontend template for building fast, robust,
    and adaptable web applications or sites. You will find more information on Boilerplate
    by visiting [http://html5boilerplate.com/](http://html5boilerplate.com/). 3L not
    only offers a mixin for HTML5 Boilerplate's reset, but also contains mixins for
    HTML5 Boilerplate's helper classes. These mixins contain a clearfix and mixins
    for hidden content for browsers or screen readers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`.h5bp()`重置中，您的CSS基于**HTML5 Boilerplate**。HTML5 Boilerplate是一个专业的前端模板，用于构建快速、健壮和适应性强的Web应用程序或站点。您可以通过访问[http://html5boilerplate.com/](http://html5boilerplate.com/)获取有关Boilerplate的更多信息。3L不仅提供了用于HTML5
    Boilerplate重置的mixin，还包含了用于HTML5 Boilerplate辅助类的mixin。这些mixin包含了清除浮动和用于隐藏内容的mixin，适用于浏览器或屏幕阅读器。
- en: For instance, `.visuallyhidden()` can be used to hide the content for browsers
    but have this content available for screen readers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`.visuallyhidden()`可以用于隐藏浏览器中的内容，但对于屏幕阅读器来说，这些内容是可用的。
- en: SEO and HTML debugging
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SEO和HTML调试
- en: '**SEO** (**search engine optimization**) plays an important role in modern
    web design. Correct and valid HTML5 is the requirement for SEO. Also, setting
    proper titles, using meta tags for keywords, and descriptions and alt attributes
    for images will help your website rank higher.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**SEO**（搜索引擎优化）在现代网页设计中扮演着重要角色。正确和有效的HTML5是SEO的要求。此外，设置适当的标题，使用关键字的meta标签和描述以及图像的alt属性将有助于您的网站排名更高。'
- en: 3L's `.seo-helper()` mixin will give you a quick insight into the missing elements
    and attributes of a web page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 3L的`.seo-helper()` mixin将快速了解网页缺少的元素和属性。
- en: 'To use this mixin—after importing 3L—you can write it in *Less* as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个mixin - 在导入3L后，您可以在*Less*中编写如下：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After using the `.seo-helper()` mixin, your HTML page will contain warnings
    about missing titles or meta tags and show a red border around images with a missing
    alt attribute, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.seo-helper()` mixin后，您的HTML页面将包含有关缺少标题或meta标签的警告，并在缺少alt属性的图像周围显示红色边框，如下面的屏幕截图所示：
- en: '![SEO and HTML debugging](img/1465OS_04_06.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![SEO and HTML debugging](img/1465OS_04_06.jpg)'
- en: 3L's helper class makes missing alt attributes visible
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 3L的辅助类使缺少的alt属性可见
- en: Also, visit `http://localhost/indexseo.html` to get more insight on how this
    class works. After this, you can judge for yourself whether this class is useful
    or not. Independent of your judgment, the `.seo-helper()` mixin shows you how
    *Less* can also be applied for functions other than a website's styles.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，访问`http://localhost/indexseo.html`以获取有关此类如何工作的更多见解。之后，您可以自行判断这个类是否有用。独立于您的判断，`.seo-helper()`
    mixin向您展示了*Less*如何可以应用于网站样式之外的功能。
- en: ClearLess – another library of prebuilt mixins
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ClearLess - 另一个预构建mixin库
- en: 'ClearLess also has a relationship with HTML5 Boilerplate. Just like 3L, ClearLess
    offers mixins for HTML5 Boilerplate and helper classes. Besides this, ClearLess
    also makes use of **Modernizr**. Modernizr is a JavaScript library that detects
    HTML5 and CSS3 features in the user''s browser. Modernizr adds additional classes
    to the `html` element of your HTML for detected features. With Modernizr, your
    `html` element will look as shown in the following code snippet:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ClearLess还与HTML5 Boilerplate有关。与3L一样，ClearLess提供了用于HTML5 Boilerplate和辅助类的mixin。除此之外，ClearLess还使用**Modernizr**。Modernizr是一个JavaScript库，用于检测用户浏览器中的HTML5和CSS3功能。Modernizr会为检测到的功能在您的HTML的`html`元素中添加额外的类。使用Modernizr，您的`html`元素将如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This list of class names tells you whether a feature is available or not. So,
    the browser used to produce the preceding code offers support for box-shadow,
    opacity, and so on. With Modernizr, you will have conditional classes that can
    be used in your *Less* code. Also, ClearLess makes use of these classes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类名列表告诉您一个功能是否可用。因此，用于生成前面代码的浏览器支持box-shadow、opacity等。使用Modernizr，您将拥有可以在*Less*代码中使用的条件类。此外，ClearLess还使用这些类。
- en: Alongside the Modernizr mixins, ClearLess has mixins for icons and **CSS sprite
    images**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Modernizr mixin外，ClearLess还有用于图标和**CSS精灵图像**的mixin。
- en: CSS sprite images is a technique that dates back to at least seven years ago.
    A website's images are added to a single image, the sprite. If the browser requests
    an image, the sprite will be loaded as the background image. **SpriteMe** ([http://spriteme.org/](http://spriteme.org/))
    can help you create sprites for your projects. CSS is used to show the requested
    image containing a part of the sprite. Loading one big sprite, which can be cached,
    instead of several small images will reduce the number of HTTP requests needed
    by the browser to show the page. The fewer the HTTP requests, the faster the page
    will load.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: CSS精灵图像是一种至少可以追溯到七年前的技术。网站的图像被添加到单个图像中，即精灵。如果浏览器请求图像，精灵将作为背景图像加载。**SpriteMe**
    ([http://spriteme.org/](http://spriteme.org/))可以帮助您为您的项目创建精灵。CSS用于显示包含精灵部分的请求图像。加载一个大的精灵，可以被缓存，而不是几个小图像，将减少浏览器显示页面所需的HTTP请求的数量。HTTP请求越少，页面加载速度就越快。
- en: 'To demonstrate this, use the simple sprite of the *Less* image from the code
    bundle of this chapter (`less-sprite.png`) as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，请使用本章的代码包中的*Less*图像的简单精灵（`less-sprite.png`），如下面的屏幕截图所示：
- en: '![ClearLess – another library of prebuilt mixins](img/1465OS_04_07.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![ClearLess - 另一个预构建mixin库](img/1465OS_04_07.jpg)'
- en: Example of a simple sprite image
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 简单精灵图像的示例
- en: 'To use the sprite image, you could write it in *Less* as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用精灵图像，您可以在*Less*中编写如下：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This code is also available in `less/sprite.less`. Please notice that the `#clearless`
    namespace got its own scope, so `@sprite-grid` and `@sprite-grid` should be defined
    inside the namespace. Variables are set by redeclaration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码也可以在`less/sprite.less`中找到。请注意，`#clearless`命名空间有自己的作用域，因此`@sprite-grid`和`@sprite-grid`应该在命名空间内定义。变量通过重新声明进行设置。
- en: 'The compiled CSS of the preceding code will look as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的编译CSS将如下所示：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Load `http://localhost/index.html` to see the effect of the preceding code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 加载`http://localhost/index.html`以查看前面代码的效果。
- en: Finally, it should be mentioned that ClearLess defines some mixins to construct
    a grid. These mixins will be explained to you in the next section because they
    are adopted from **Preboot**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应该提到ClearLess定义了一些混合来构建网格。这些混合将在下一节中向您解释，因为它们是从**Preboot**中采用的。
- en: Using Preboot's prebuilt mixins for your project
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Preboot的预构建混合来构建您的项目
- en: Preboot was originally written by Mark Otto (`@mdo`) and is a comprehensive
    and flexible collection of *Less* utilities. Preboot is the predecessor of Twitter's
    **Bootstrap**. Bootstrap is a frontend framework for developing responsive, mobile-first
    projects on the Web. You will learn more about Bootstrap in [Chapter 6](ch06.html
    "Chapter 6. Bootstrap 3, WordPress, and Other Applications"), *Bootstrap 3, WordPress,
    and Other Applications*. Bootstrap improved the original Preboot code. Finally,
    many of the *Less* variable and mixin improvements from Bootstrap were brought
    back in Preboot 2.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Preboot最初是由Mark Otto (`@mdo`)编写的，是一个全面灵活的*Less*实用工具集。Preboot是Twitter的**Bootstrap**的前身。Bootstrap是用于在Web上开发响应式、移动优先项目的前端框架。您将在[第6章](ch06.html
    "第6章 Bootstrap 3、WordPress和其他应用")中了解更多关于Bootstrap的内容，*Bootstrap 3、WordPress和其他应用*。Bootstrap改进了原始的Preboot代码。最后，Bootstrap中的许多*Less*变量和混合改进被带回到了Preboot
    2中。
- en: Preboot comes with mixins to build a grid system because of its relationship
    with Bootstrap. This grid system creates a row that contains 12 columns. Open
    `http://localhost/prebootgrid.html` from the downloaded code bundle in your browser
    to see an example with two rows. The first grid row contains three columns and
    the second row contains two columns. This grid is responsive by default; you can
    see this by making your browser window smaller using the example grid. If the
    screen width is less than 768 pixels, the columns in the grid will stack under
    each other instead of being horizontal. The following code example only shows
    the compiled CSS without the responsive classes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Preboot带有混合来构建网格系统，因为它与Bootstrap有关。这个网格系统创建一个包含12列的行。在浏览器中打开从下载的代码包中的`http://localhost/prebootgrid.html`，以查看一个包含两行的示例。第一行网格包含三列，第二行包含两列。这个网格默认是响应式的；您可以通过使用示例网格使浏览器窗口变小来看到这一点。如果屏幕宽度小于768像素，网格中的列将堆叠在彼此下面，而不是水平排列。以下代码示例只显示了编译后的CSS，没有响应式类。
- en: 'With Preboot, you can write the following code in *Less*:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Preboot，您可以在*Less*中编写以下代码：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding code compiles into CSS as follows (it is nonresponsive):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码编译成CSS如下（它是非响应式的）：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In [Chapter 5](ch05.html "Chapter 5. Integrate Less in Your Own Projects"),
    *Integrate Less in Your Own Projects*, you will find another example that makes
    use of Preboot's grid and discusses the responsive nature of it in more detail.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章 将Less集成到您自己的项目中")中，*将Less集成到您自己的项目中*，您将找到另一个示例，该示例使用了Preboot的网格，并更详细地讨论了其响应性特性。
- en: 'Preboot sets some variables to define the grid as shown in the following code
    snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Preboot设置了一些变量来定义网格，如下面的代码片段所示：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Also, other values such as basic colors are predefined as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，其他值，如基本颜色，已预先定义如下：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In fact, Preboot is not a complete CSS framework; on the other hand, it's more
    than just a library of prebuilt mixins.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Preboot不是一个完整的CSS框架；另一方面，它不仅仅是一个预构建混合的库。
- en: Integrating other techniques into your projects using Less
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Less将其他技术集成到您的项目中
- en: As well as prebuilt mixins, there are some other techniques that can be easily
    integrated in to your projects using *Less*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预构建的混合，还有一些其他技术可以轻松集成到您的项目中使用*Less*。
- en: Using iconic fonts
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图标字体
- en: As the name suggests, iconic fonts are sets of icons defined as a font. Iconic
    fonts can replace image icons in your projects. The main reason for using iconic
    fonts instead of images and the reason they are discussed here is that iconic
    fonts, just like any normal font, can be fully manipulated with CSS. In your project,
    you can set the size, color, and shadows of the used iconic fonts with *Less*.
    The primary reason for using iconic fonts is to benefit the load time of your
    website; only one HTTP request is needed to load them all. Iconic fonts will look
    good on different resolutions and displays too.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，图标字体是作为字体定义的一组图标。图标字体可以替换项目中的图像图标。使用图标字体而不是图像的主要原因，以及它们在这里讨论的原因是，就像任何普通字体一样，图标字体可以完全通过CSS进行操作。在您的项目中，您可以使用*Less*设置所使用的图标字体的大小、颜色和阴影。使用图标字体的主要原因是为了提高网站的加载时间；只需要一个HTTP请求就可以加载它们。图标字体在不同的分辨率和显示器上看起来也很好。
- en: 'In this book, iconic fonts were already used in [Chapter 3](ch03.html "Chapter 3. Nested
    Rules, Operations, and Built-in Functions"), *Nested Rules, Operations, and Built-in
    Functions*. Font Awesome was loaded from CDN in these examples. Font Awesome also
    provides a bundle of *Less* files from GitHub at [https://github.com/FortAwesome/Font-Awesome/tree/master/less](https://github.com/FortAwesome/Font-Awesome/tree/master/less).
    You can use these files to integrate Font Awesome in your project by performing
    the following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，图标字体已经在[第3章](ch03.html "第3章 嵌套规则、操作和内置函数")中使用过，*嵌套规则、操作和内置函数*。这些示例中使用了CDN加载Font
    Awesome。Font Awesome还在GitHub上提供了一组*Less*文件，网址为[https://github.com/FortAwesome/Font-Awesome/tree/master/less](https://github.com/FortAwesome/Font-Awesome/tree/master/less)。您可以通过以下步骤使用这些文件在项目中集成Font
    Awesome：
- en: Copy the `font-awesome/` directory into your project.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`font-awesome/`目录复制到您的项目中。
- en: 'Open your project''s `font-awesome/less/variables.less` file and edit the `@fa-font-path`
    variable to point to your font directory, `@fa-font-path: "../font";`.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开项目的 `font-awesome/less/variables.less` 文件，并编辑 `@fa-font-path` 变量，将其指向字体目录，`@fa-font-path:
    "../font";`。'
- en: Import the Font Awesome *Less* file in your main *Less* file, `@import "font-awesome-4.0.3/less/font-awesome.less";`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主*Less*文件中导入Font Awesome的*Less*文件，`@import "font-awesome-4.0.3/less/font-awesome.less";`。
- en: 'After performing the preceding steps, you can use the following snippet of
    code in your HTML document:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '执行前面的步骤后，您可以在HTML文档中使用以下代码片段： '
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code when opened in your web browser will result in the following
    screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开前面的代码将得到以下截图：
- en: '![Using iconic fonts](img/1465OS_04_08.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![使用图标字体](img/1465OS_04_08.jpg)'
- en: HTML list with Font Awesome items
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 具有Font Awesome项目的HTML列表
- en: You will find the *Less* code of the preceding HTML list in `less/font-awsome.less`
    of the downloadable files. Please inspect this file. You will see that you don't
    have to change Font Awesome's original files to set `@fa-font-path`. The `@fa-font-path`
    variable will be set by redeclaration and uses the last declaration wins rule
    as explained before in [Chapter 2](ch02.html "Chapter 2. Using Variables and Mixins"),
    *Using Variables and Mixins*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在可下载文件的`less/font-awsome.less`中找到前面HTML列表的*Less*代码。请检查此文件。您将看到您无需更改Font Awesome的原始文件来设置`@fa-font-path`。`@fa-font-path`变量将通过重新声明进行设置，并使用上一次声明获胜的规则，如前面在[第2章](ch02.html
    "第2章。使用变量和mixin")中所解释的，*使用变量和mixin*。
- en: You can find more examples of Font Awesome usage by visiting [http://fontawesome.io/examples/](http://fontawesome.io/examples/).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[http://fontawesome.io/examples/](http://fontawesome.io/examples/)找到更多Font
    Awesome用法的例子。
- en: Also, other iconic fonts such as Glyphicons for Bootstrap can be used with *Less*
    (see [https://github.com/twbs/bootstrap/blob/master/less/glyphicons.less](https://github.com/twbs/bootstrap/blob/master/less/glyphicons.less)).
    However, in cases where you find iconic fonts without *Less* files, you now have
    enough knowledge to create the required *Less* code yourself.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，其他图标字体，如Bootstrap的Glyphicons，也可以与*Less*一起使用（请参阅[https://github.com/twbs/bootstrap/blob/master/less/glyphicons.less](https://github.com/twbs/bootstrap/blob/master/less/glyphicons.less)）。但是，在找不到*Less*文件的图标字体的情况下，您现在已经有足够的知识来自己创建所需的*Less*代码。
- en: 'Try to write the required *Less* code to integrate Meteocons ([http://www.alessioatzeni.com/meteocons/](http://www.alessioatzeni.com/meteocons/))
    into your project as an exercise or perform the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试编写所需的*Less*代码，将Meteocons ([http://www.alessioatzeni.com/meteocons/](http://www.alessioatzeni.com/meteocons/))集成到您的项目中作为练习，或执行以下步骤：
- en: Start by downloading the fonts from [http://www.alessioatzeni.com/meteocons/res/download/meteocons-font.zip](http://www.alessioatzeni.com/meteocons/res/download/meteocons-font.zip).
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从[http://www.alessioatzeni.com/meteocons/res/download/meteocons-font.zip](http://www.alessioatzeni.com/meteocons/res/download/meteocons-font.zip)下载字体。
- en: 'In this zip file, you will find four files: `meteocons-webfont.eot`, `meteocons-webfont.svg`,
    `meteocons-webfont.ttf`, and `meteocons-webfont.woff`. These are the different
    formats required to show the Meteocons in different browsers.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个压缩文件中，您将找到四个文件：`meteocons-webfont.eot`，`meteocons-webfont.svg`，`meteocons-webfont.ttf`和`meteocons-webfont.woff`。这些是在不同浏览器中显示Meteocons所需的不同格式。
- en: Copy these files to the `fonts/` folder of your project. You will also find
    `stylesheet.css` included with these font files. This file contains the `@fontface`
    styles for Meteocons. If you inspect the Font Awesome *Less* files, you will find
    the same kind of styles. The `@fontface` declaration is required to use the font
    in your project.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些文件复制到您项目的`fonts/`文件夹中。您还将找到包含这些字体文件的`stylesheet.css`。此文件包含Meteocons的`@fontface`样式。如果您检查Font
    Awesome的*Less*文件，您将找到相同类型的样式。在您的项目中使用字体，需要`@fontface`声明。
- en: Now, you should remember the Less Hat prebuilt mixins. Less Hat has the fontface
    mixin, `.font-face(@fontname, @fontfile, @fontweight:normal, @fontstyle:normal)`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该记住Less Hat预构建的mixin。Less Hat具有fontface mixin，`.font-face(@fontname, @fontfile,
    @fontweight:normal, @fontstyle:normal)`。
- en: 'Using this fontface mixin, you can add the following code to your *Less* code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此fontface mixin，您可以将以下代码添加到您的*Less*代码中：
- en: '[PRE26]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding code will compile into CSS as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将编译为以下CSS：
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding CSS code enables you to use the following HTML code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的CSS代码使您可以使用以下HTML代码：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The preceding code in HTML will look like the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中的前面代码将如下截图所示：
- en: '![Using iconic fonts](img/1465OS_04_09.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![使用图标字体](img/1465OS_04_09.jpg)'
- en: Hyperlink with Meteocon
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Meteocon的超链接
- en: 'Earlier, you saw how Font Awesome icons can be added by class name. To add
    this functionality to the Meteocons, you will have to write some *Less* code.
    The following diagram shows the letter for each icon of this font:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，您已经看到了如何通过类名添加Font Awesome图标。要将此功能添加到Meteocons，您将需要编写一些*Less*代码。以下图表显示了该字体的每个图标的字母：
- en: '![Using iconic fonts](img/1465OS_04_10.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![使用图标字体](img/1465OS_04_10.jpg)'
- en: Meteocons font
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 气象字体
- en: 'Now, add a class declaration into your *Less* code for each icon as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据以下方式为每个图标在您的*Less*代码中添加一个类声明：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding example, `.meteocons-sun` is your class name, and `\2a` represents
    the hexadecimal value of a similar character. 2A hexadecimal is 42 decimal, and
    the `*` (asterisk) has an ASCII value of 42\. Instead of a hexadecimal value,
    you can also use octal or decimal (for the first 128 printable characters). Sometimes,
    the `\u` of unicode is prepended, such as `\u002a` in the preceding code.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`.meteocons-sun`是您的类名，`\2a`表示类似字符的十六进制值。 2A十六进制是42十进制，`*`（星号）的ASCII值为42。您还可以使用八进制或十进制（对于前128个可打印字符）。有时，unicode的`\u`会被添加，例如在前面的代码中的`\u002a`。
- en: 'If you do add these class declarations, your list will look like the following
    code snippet:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您添加这些类声明，您的列表将如下代码片段所示：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, you have the basics for an iconic font, and you can extend your code.
    For instance, add the following code to set the size of the font:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经掌握了图标字体的基础知识，并且可以扩展您的代码。例如，添加以下代码以设置字体的大小：
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the download section of this chapter, you will find the complete *Less* code
    to use Meteocons the same way as Font Awesome in `less/meteocons`. As you see,
    most of Font Awesome's code can be reused. Please visit `http://localhost/indexmeteo.html`
    to find out how to use this code.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下载部分，您将找到完整的*Less*代码，以便像Font Awesome一样在`less/meteocons`中使用Meteocons。正如您所看到的，大部分Font
    Awesome的代码可以被重用。请访问`http://localhost/indexmeteo.html`以了解如何使用此代码。
- en: Retina.js
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Retina.js
- en: High-density devices have more pixels per inch or centimeter than normal displays.
    Apple introduced the term **Retina** for its double-density displays. If you zoom
    in on an image (or scale it up), it will become blurred. This is the problem web
    designers have to solve when designing for high-density devices. You may be wondering
    what this has to do with *Less*. CSS, in combination with media queries (you will
    learn more about media queries in [Chapter 5](ch05.html "Chapter 5. Integrate
    Less in Your Own Projects"), *Integrate Less in Your Own Projects*), can prevent
    your images from becoming blurred on high-density displays.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 高密度设备的每英寸或每厘米像素比普通显示屏多。苹果为其双倍密度显示屏引入了**Retina**一词。如果您放大图像（或将其放大），它将变得模糊。这是网页设计师在为高密度设备设计时必须解决的问题。您可能想知道这与*Less*有什么关系。
    CSS结合媒体查询（您将在[第5章](ch05.html "第5章。将Less集成到您自己的项目中")中了解更多关于媒体查询的信息，*将Less集成到您自己的项目中*），可以防止您的图像在高密度显示屏上变得模糊。
- en: To understand what happens, you have to realize that CSS pixels are, in fact,
    device independent. CSS pixels are used to give physical dimensions to the elements
    in the browser. On normal screens, a CSS pixel matches a device pixel. High-density
    displays have more device pixels than a CSS pixel; in the case of Retina, they
    have four times the number of pixels. More and smaller pixels make it impossible
    to see the individual pixels with the human eye and should give a better user
    experience.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解发生了什么，您必须意识到CSS像素实际上是设备独立的。CSS像素用于在浏览器中给元素赋予物理尺寸。在普通屏幕上，一个CSS像素匹配一个设备像素。高密度显示屏比CSS像素有更多的设备像素；在Retina的情况下，它们的像素数量是CSS像素的四倍。更多和更小的像素使人眼无法看到单个像素，并且应该提供更好的用户体验。
- en: Retina displays an image of 300 CSS pixels width that requires 600 device pixels
    in order to keep the same physical size. Now you can prevent your images from
    blurring by using a bitmap with a higher resolution (CSS pixels) and scale it
    down with HTML or CSS.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Retina显示屏上的图像宽度为300个CSS像素，需要600个设备像素才能保持相同的物理尺寸。现在，您可以通过使用更高分辨率（CSS像素）的位图，并通过HTML或CSS进行缩小，来防止图像模糊。
- en: 'On a normal display, your HTML will look as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通显示屏上，您的HTML将如下所示：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'While on a Retina display, you will show the same image with the following
    code snippet:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在Retina显示屏上，您将使用以下代码片段显示相同的图像：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Currently, there is a convention of adding `@2x` to the names of high-density
    images, such as `example@2x.png`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，有一个惯例，即在高密度图像的名称中添加`@2x`，例如`example@2x.png`。
- en: You should now understand that you can use *Less* to write efficient code to
    give these different images the right CSS dimensions. The `retina.js` library
    ([https://github.com/imulus/retinajs](https://github.com/imulus/retinajs)) helps
    you handle high-density images and displays; it combines JavaScript and *Less*
    to write your Retina code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该明白，您可以使用*Less*编写高效的代码，为这些不同的图像提供正确的CSS尺寸。`retina.js`库（[https://github.com/imulus/retinajs](https://github.com/imulus/retinajs)）帮助您处理高密度图像和显示屏；它结合了JavaScript和*Less*来编写您的Retina代码。
- en: 'For normal images, you have to use the following code snippet:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通图像，您必须使用以下代码片段：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding code will be handled by JavaScript, but you will have to use *Less*
    to set your background images. Here, background refers not only to the page background,
    but to every background set by CSS. Most modern designs use background images
    for layout; also, accessibility rules require decorative images set by CSS.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将由JavaScript处理，但您将需要使用*Less*来设置背景图像。这里，背景不仅指页面背景，还指由CSS设置的每个背景。大多数现代设计都使用背景图像进行布局；此外，辅助功能规则要求由CSS设置装饰性图像。
- en: 'With `retina.js`, you can write the following code in *Less*:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`retina.js`，您可以在*Less*中编写以下代码：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The preceding code will compile into CSS as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将编译为以下CSS：
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Also, the other libraries of prebuilt mixins mentioned earlier will have mixins
    to set Retina backgrounds.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，之前提到的其他预构建mixin库将具有用于设置Retina背景的mixin。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned how to keep your code clean and test it using
    style guides. You have learned how to use libraries with prebuilt mixins, which
    help you develop your *Less* code faster and more securely. Last but not least,
    you have learned how to use *Less* and iconic fonts and make your projects Retina-ready.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了如何保持代码清晰，并使用样式指南进行测试。您已经学会了如何使用具有预构建mixin的库，这有助于更快、更安全地开发您的*Less*代码。最后但同样重要的是，您已经学会了如何使用*Less*和图标字体，并使您的项目准备好Retina。
- en: In the next chapter, you will learn how to integrate *Less* in your projects
    or start a project from scratch with *Less*. You will also learn how to organize
    your project files and reuse your old CSS code. And finally, you will build a
    responsive grid with media queries.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在您的项目中集成*Less*，或者如何从头开始使用*Less*开始一个项目。您还将学习如何组织项目文件并重用旧的CSS代码。最后，您将使用媒体查询构建一个响应式网格。
