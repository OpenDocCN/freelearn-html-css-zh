["```js\n<input type=\"date\"\n  min=\"1935-12-16\"\n  max=\"2013-08-19\"\n/>\n```", "```js\n<input type=\"month\"\n  min=\"1935-12\"\n  max=\"2013-08\"\n/>\n```", "```js\n<input type=\"week\"\n  min=\"1935-W51\"\n  max=\"2013-W34\"\n/>\n```", "```js\n<input type=\"time\"\n  min=\"16:23:42.108\"\n  max=\"23:59:59.999\"\n/>\n```", "```js\n<input type=\"datetime\"\n  min=\"1935-12-16T16:23:42-08:00\"\n  max=\"2013-08-19T23:59:59-09:00\"\n/>\n```", "```js\n<input type=\"datetime-local\"\n  min=\"1935-12-16T16:23:42\"\n  max=\"2013-08-19T23:59:59\"\n/>\n```", "```js\n<input type=\"color\"\n  value=\"#900CC1\"\n/>\n```", "```js\n<input type=\"email\"\n  placeholder=\"Enter an email address\"\n  pattern=\"\\w{3,}@packtpub\\.com\"\n  maxlength=\"23\"\n/>\n```", "```js\n<input type=\"number\"\n  min=\"42\"\n  max=\"108\"\n  step=\"2\"\n/>\n```", "```js\n<input type=\"range\"\n  min=\"42\"\n  max=\"108\"\n  step=\"0.5\"\n/>\n```", "```js\n<input type=\"search\"\n  placeholder=\"Search\"\n  pattern=\"[^!\\?]\"\n/>\n```", "```js\n<input type=\"tel\"\n  placeholder=\"Enter your phone number\"\n  required\n/>\n```", "```js\n<input type=\"url\"\n  placeholder=\"Enter your website address\"\n  required\n/>\n```", "```js\nvar firstName = document.querySelector(\"#myForm input[name='firstName']\");\n//firstName.validity == ValidityState {\n  valid : false,\n  customError : false,\n  badInput : false,\n  stepMismatch : false,\n  rangeOverflow : false,\n  rangeUnderflow : false,\n  tooLong : false,\n  patternMismatch : false,\n  typeMismatch : false,\n  valueMissing : false\n}\n```", "```js\nvar email = document.querySelector(\"#myForm input[type='email']\");\nemail.pattern = \"\\\\w{3,}@packtpub\\\\.com\";\nemail.setCustomValidity(\"Please enter a valid Packt email address...\");\n```", "```js\n<nav id=\"navOptions\">\n  <div>\n    <p>Difficulty &raquo; <span>1</span></p>\n    <input type=\"range\" step=\"1\" min=\"1\" max=\"3\" value=\"1\" />\n  </div>\n  <img src=\"img/options-icon.png\" />\n</nav>\n```", "```js\n<form>\n  <input type=\"text\" name=\"fullName\"\n    pattern=\"\\w{2,16}\\s\\w{2,16}\"\n    placeholder=\"Full Name (Ex: John Doe)\"\n    autofocus\n  />\n  <input type=\"email\" name=\"email\"\n    placeholder=\"Email address\"\n  />\n  <input type=\"submit\" value=\"Save\" />\n</form>\n```", "```js\n<!-- Indicates an element that display some sort of score -->\n<input type=\"text\" id=\"scoreDisplay\"\n  <!-- Indicates that this score is not yet a new high score -->\n  data-is-high-score=\"false\"\n  <!-- Indicates the current high score -->\n  data-score-to-beat=\"891,958\"\n  <!-- Not a good use of data attributes, since the disabledattribute is a better choice -->\n  data-enabled=\"false\"\n/>\n```", "```js\nvar myInput = document.getElementById(\"scoreDisplay\");\n\n// Check for the presence of an attribute\nif (myInput.getAttribute(\"data-is-high-score\") == null) {\n\n  // If attribute is not present, add it to the element with somedefault value\n  myInput.setAttribute(\"data-is-high-score\", false);\n}\n\n// If attribute is present, check its value\nelse {\n\n  var isHighScore = myInput.getAttribute(\"data-is-high-score\");\n\n  if (isHighScore) {\n    // Do something with this new high score\n  } else {\n    // The current score is not yet a new high score\n  }\n}\n```", "```js\n<section class=\"tracks\">\n  <div class=\"track\">\n    <span data-name=\"badGuy\" data-speed=\"0\"></span>\n  </div>\n\n  <div class=\"track\">\n    <span data-name=\"goodGuy\" data-speed=\"0\"></span>\n  </div>\n</section>\n```", "```js\n<button data-intent=\"play\">Play Again</button>\n<section id=\"mainContainer\">\n  <div id=\"wordsToWrite\"></div>\n  <div id=\"wordsWritten\"></div>\n  <button data-intent=\"play\">Play</button>\n</section>\n```", "```js\n// Select all buttons with a custom data attribute of intent anda value of play\nvar playBtns = document.querySelectorAll(\"button[data-intent='play']\");\n// Assign the same click handler to all of these buttons\nfor (var i = 0, len = playBtns.length; i < len; i++) {\n  playBtns[i].addEventListener(\"click\", doOnPlayClicked);\n}\n\n// Now every button with data-intent=\"play\" executes thisfunction when clicked\nfunction  doOnPlayClicked(event) {\n  event.preventDefault();\n\n  // Play button click behavior goes here\n}\n```", "```js\n<nav id=\"navOptions\">\n  <div>\n    <p>Difficulty &raquo; <span>1</span></p>\n    <input type=\"range\" step=\"1\" min=\"1\" max=\"3\" value=\"1\" />\n  </div>\n  <img src=\"img/options-icon.png\" />\n</nav>\n\n<script>\n// 1\\. Capture the image element inside that nav structurewith id=\"navOptions\"\n\n// ----------------------------------\n// Without query selectors:\n// ----------------------------------\nvar nav = document.getElementById(\"navOptions\");\nvar img = null;\n\n// Iterate through every child node of nav instead ofdirectly targeting the current\n// position of that image element in case the structureof #navOptions change,\n// in which case this code wouldn't need to be updated.\nfor (var i = 0, len = nav.children.length; i < len; i++) {\n  if (nav.children[i].tagName == \"IMG\") {\n    img = nav.children[i];\n    break;\n  }\n}\n\n// -----------------------------------\n// With the query selectors:\n// -----------------------------------\nvar img = document.querySelector(\"#navOptions img\");\n\n// 2\\. Set the click handler\nif (img) {\n  img.addEventListener(\"click\", doOnOptionsClicked);\n}\n</script>\n```", "```js\n<div id=\"wordsWritten\">\n  <span class=\"correct\">I</span>\n  <span class=\"correct\">love</span>\n  <span class=\"correct\">HTML5</span>\n  <span class=\"wrong\">?</span>\n</div>\n\n<script>\nvar correctWords = document.querySelectorAll(\"#wordsWritten .correct\");\n// correctWords == [\n//  <span class=\"correct\">I</span>,\n//  <span class=\"correct\">love</span>,\n//  <span class=\"correct\">HTML5</span>]\n\nvar wrongWords = document.querySelectorAll(\"#wordsWritten .wrong\");\n//  wrongWords == [\n//    <span class=\"wrong\">?</span>]\n</script>\n```", "```js\n// Select a collection of zero, one, or more buttons\nvar playBtns = document.querySelectorAll(\"button[data-intent='play']\");\n\n// Assign the same click handler to all of these buttons\nfor (var i = 0, len = playBtns.length; i < len; i++) {\n  playBtns[i].addEventListener(\"click\", doOnPlayClicked);\n}\n\n// This does not work >> TypeError: Object [object Array] hasno method 'addEventListener'\n  playBtns.addEventListener(\"click\", doOnPlayClicked);\n```", "```js\n@font-face {\n  font-family: \"Lemon\",\n  src: url(\"/fonts/lemon.woff\") format(\"woff\");\n}\n\nh1 {\n  font-family: \"Lemon\", Arial, sans-serif;\n}\n```", "```js\n@font-face {\n  font-family: \"Lemon\",\n  src:url(\"/fonts/lemon.woff\") format(\"woff\"),\n      url(\"/fonts/lemon.eot\") format(\"eot\"),\n      url(\"/fonts/lemon.ttf\") format(\"truetype\"),\n      url(\"/fonts/lemon.svg#font\") format(\"svg\");\n}\n```", "```js\n@font-face {\n  font-family: \"Lemon\";\n  src: url(\"data:font/opentype;base64,d09GRgABAAAAA...\");\n}\n```", "```js\n#navOptions {\n  position: relative;\n  top: 10px;\n  left: -230px;\n  width: 325px;\n  overflow: auto;\n  padding: 10px;\n  border-radius: 0 10px 10px 0;\n  -webkit-transition: all 0.3s;\n}\n\n#navOptions.open {\n  left: 0;\n  background: rgba(100, 100, 100, 0.5);\n  padding-right: 15px;\n}\n```", "```js\n#navOptions {\n  position: relative;\n  top: 10px;\n  left: -230px;\n  width: 325px;\n  overflow: auto;\n  padding: 10px;\n  border-radius: 0 10px 10px 0;\n\n  -webkit-transition: all 0.3s; /* Webkit-based browsers */\n  -moz-transition: all 0.3s;     /* Mozilla Firefox */\n  -o-transition: all 0.3s;          /* Opera */\n  transition: all 0.3s;              /* One day, every browser. Today, any browser not in experimental */\n}\n```", "```js\n#navOptions {\n  position: relative;\n  top: 10px;\n  left: -230px;\n  width: 325px;\n  overflow: auto;\n  padding: 10px;\n  border-radius: 0 10px 10px 0;\n\n  transition-property: padding;\n  transition-duration: 0.3s;\n  transition-timing-function: linear;\n  transition-delay: 1s;\n}\n```", "```js\n#navOptions {\n  position: relative;\n  top: 10px;\n  left: -230px;\n  width: 325px;\n  overflow: auto;\n  padding: 10px;\n  border-radius: 0 10px 10px 0;\n\n  transition: padding 0.3s ease-out 0.1s, left 0.5s linear,background ease-in 1s 1s;\n}\n```", "```js\n@keyframes myAnimation {\n}\n```", "```js\n@keyframes myAnimation {\n  from {\n    background: #ffffff;\n  }\n\n  to {\n    background: #000000;\n  }\n}\n```", "```js\n@keyframes myAnimation {\n  0% {\n    left: 0px;\n    top: 0px;\n  }\n\n  25% {\n    left: 0px;\n    top: 50%;\n  }\n\n  50% {\n    left: 50px;\n    top: 100%;\n  }\n\n  75% {\n    left: 50px;\n    top: 100%;\n  }\n\n  100% {\n    left: 0px;\n    top: 0px;\n  }\n}\n```", "```js\n-webkit-@keyframes myAnimation {\n  from {\n    background: #ffffff;\n  }\n\n  to {\n    background: #000000;\n  }\n}\n\n#sky {\n  -webkit-animation-name: myAnimation; \n  /* This is how you link a keyframe sequence to an element */\n  -webkit-animation-duration: 3s; \n  /* Can be a value in seconds (s) or milliseconds (m) */\n  -webkit-animation-timing-function: ease-out; \n  /* Can be linear, ease, ease-in, or ease-out */\n  -webkit-animation-iteration-count: 23; \n  /* Can be any non-negative integer or \"infinite\" */\n  -webkit-animation-direction: alternate; \n  /* Default is \"normal\" */\n  -webkit-animation-play-state: running; \n  /* Can also be \"paused\" */\n}\n```", "```js\nh1 {\n  text-shadow: -5px 5px 0 #000;\n}\n```", "```js\nh1 {\n  text-shadow: -5px 5px 0 #000, 5px -5px 0 rgba(50, 50, 50, 0.3);\n}\n```", "```js\nh1 {\n  text-shadow: 1px 1px 5px #000;\n  font-family: \"Lemon\";\n}\n```", "```js\ndiv {\n  box-shadow: 5px 5px 3px #aaa;\n}\n```", "```js\ndiv {\n  box-shadow: 5px 5px 3px #aaa, -10px -10px 30px rgba(255, 255, 255, 0.01);\n}\n```", "```js\ndiv {\n  box-shadow: 5px 5px 0 #cc0000, 5px 5px 0 #0000cc;\n}\n```", "```js\ndiv {\n  box-shadow: inset 5px 5px 3px #aaa;\n}\n```", "```js\ndiv {\n  box-shadow: inset 5px 5px 3px #aaa, \n  /* This shadow is drawn inside the div */\n    5px 5px 3px #aaa; /* And this shadow is drawn outside it */\n}\n```", "```js\ndiv.one {\n  border-radius: 5px; /* Make all four corners round by 5px */\n}\n\ndiv.two {\n  border-radius: 5px 10px \n  /* Top left and bottom right = 5px, top right andbottom left = 10px */\n\ndiv.three {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 8px;\n  border-bottom-left-radius: 15px;\n  border-bottom-right-radius: 16px;\n}\n```", "```js\n<section class=\"tracks\">\n  <div class=\"track\">\n    <span data-name=\"badGuy\" data-speed=\"0\"></span>\n  </div>\n\n  <div class=\"track\">\n    <span data-name=\"goodGuy\" data-speed=\"0\"></span>\n  </div>\n</section>\n\n<section id=\"mainContainer\">\n  <div id=\"wordsToWrite\"></div>\n  <div id=\"wordsWritten\"></div>\n  <button data-intent=\"play\">Play</button>\n</section>\n```", "```js\nfunction Player(query) {\n  // Hold a reference to the DOM element that they playerwill control\n  var element = document.querySelector(query);\n  var trackWidth = parseInt(element.parentElement.offsetWidth);\n  var minLeft = 0 - parseInt(element.offsetWidth / 2);\n  var maxLeft = trackWidth - parseInt(element.offsetWidth / 2);\n\n  // Move the player based on whatever speed is set inits custom data attribute\n  this.move = function() {\n    var left = parseInt(element.style.left);\n    var speed = parseInt(element.attributes.getNamedItem(\"data-speed\").value);\n\n    element.style.left = (left + speed) + \"px\";\n\n    if (left > maxLeft) {\n      this.moveToFinish();\n    } else if (left < minLeft) {\n      this.moveToStart();\n    }\n  };\n\n  // Manually move the player to a certain point along its track,independent of\n  // what its speed data attribute is.\n  this.moveToPercent = function(percent) {\n    element.style.left = parseInt(percent * maxLeft) + \"px\";\n\n    if (percent >= 100) {\n      this.moveToFinish();\n    } else if (percent <= 0) {\n      this.moveToStart();\n    }\n  };\n\n  // Determine if the player has reached the end of its track\n  this.isFinished = function() {\n    return parseInt(element.style.left) >= maxLeft;\n  };\n\n  // Place the player at the beginning of its track\n  this.moveToStart = function() {\n    element.style.left = this.getMinLeft() + \"px\";\n  };\n\n  // Move the player to the very end of its track\n  this.moveToFinish = function() {\n    element.style.left = this.getMaxLeft() + \"px\";\n  };\n}\n```", "```js\nvar hero = new Player(\"[data-name='goodGuy']\");\nvar enemy = new Player(\"[data-name='badGuy']\");\n```", "```js\nfunction handleKeyPress(event) {\n\n  var keyCodes = {\n    SHIFT_KEY: 16,\n    BACKSPACE_KEY: 8, \n    SPACEBAR_KEY: 32, \n    COMMA_KEY: 188, \n    PERIOD_KEY: 190\n  };\n\n  var wordsLen = wordsWritten.children.length;\n\n  // If the Shift key was entered, just ignore it\n  if (event.keyCode == keyCodes.SHIFT_KEY)\n    return false;\n\n  // If the backspace key was entered, don't let thebrowser navigate away\n  if (event.keyCode == keyCodes.BACKSPACE_KEY) {\n    event.preventDefault();\n\n    // If we have deleted every letter entered by the user,don't do anything else\n      if (wordsLen < 1)\n        return false;\n\n      // If the user has pressed the backspace key, andthere is at least one letter\n      // that the user had typed in before, delete thatletter from where it was output.\n      // Note that some browsers might not supportthe .remove() function on a node,\n      // but rather use the removeChild() function onthe node's parent element.\n    wordsWritten.children[wordsLen - 1].remove();\n    return false;\n  }\n\n  // Determine what character the user has typed in\n  var letter = String.fromCharCode(event.keyCode);\n\n  // If the charactered enterd by the user is a letter,capitalize it if the Shift key was pressed\n  if (!event.shiftKey && event.keyCode >= 65 &&event.keyCode <= 90)   \n    letter = String.fromCharCode(event.keyCode + keyCodes.SPACEBAR_KEY);\n\n  // Convert special character codes into their corresponding character\n  if (event.keyCode == keyCodes.COMMA_KEY)\n    letter = \",\";\n\n  if (event.keyCode == keyCodes.PERIOD_KEY)\n    letter = \".\";\n\n  // Determine if they letter entered is right or wrong,and print special HTML to\n  // indicate that. Move the hero if the letterentered was correct.\n  if (letter == words[wordsLen]) {\n    wordsWritten.innerHTML += \"<span class='correct'>\"+ letter + \"</span>\";\n    var correct = document.querySelectorAll(\"#wordsWritten .correct\").length;\n    var percent = correct / words.length;\n    hero.moveToPercent(percent);\n  } else {\n    wordsWritten.innerHTML += \"<span class='wrong'>\"+ letter + \"</span>\";\n  }\n\n  // By returning false from a key press event,we further prevent the browser\n  // from taking any default action based on thekey combination entered.\n  return false;\n}\n```", "```js\nfunction tick() {\n\n  hero.move();\n  enemy.move();\n\n  if (isGameOver()) {\n    document.body.removeEventListener(\"keydown\", handleKeyPress);\n\n    if (hero.isFinished()) {\n      gamesWon++;\n      showWinPanel();\n    } else if (enemy.isFinished()) {\n      showLosePanel();\n    }\n  } else {\n    setTimeout(tick, tickPeriod);\n  }\n}\n```"]