["```js\nvar xhr = null;\n\n// Attempt to create the xhr object the popular way\ntry {\n  xhr = new XMLHttpRequest();\n}\n// If the browser doesn't support that construct, try a different one\ncatch (e) {\n  try {\n    xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n  // If it still doesn't support the previous 2 xhr constructs, just give up\n  catch (e) {\n    throw new Error(\"This browser doesn't support AJAX\");\n  }\n\n// If we made it this far, then the xhr object is set, and the rest\n// of the API is identical independent of which version we ended up with\nxhr.open(\"GET\", \"//www.some-website.com\", true);\nxhr.onreadystatechange = function(response) {\n  // Process response\n  // (...)\n};\n\nxhr.send();\n```", "```js\n$.ajax({\n  type: \"GET\",\n  url: \"//www.some-website.com\",\n  async: true,  /* This parameter is optional, as its default value is true */\n  complete: function(response) {\n    // Process response\n    // (\u2026)\n  }\n});\n```", "```js\n$.get(\"//www.some-website.com\", function(response) {\n  // Process response\n  // (\u2026)\n});\n```", "```js\nlocalStorage.setItem(\"name\", \"Rodrigo Silveira\");\nlocalStorage.length == 1; // true\nlocalStorage.getItem(\"name\"); // \"Rodrigo Silveira\"\nlocalStorage.removeItem(\"name\");\nlocalStorage.length; // == 0\n```", "```js\n// If the browser doesn't know anything about localStorage,\n// we create our own, or at least an interface that respond\n// to the calls we'd make to the real storage object.\nif (window.localStorage === undefined) {\n  var FauxLocalStorage = function() {\n    var items = {};\n    this.length = 0;\n\n    this.setItem = function(key, value) {\n      items[key] = value;\n      this.length++;\n      };\n\n    this.getItem = function(key) {\n      if (items[key] === undefined)\n        return undefined;\n\n        return items[key];\n      };\n\n    this.removeItem = function(key) {\n      if (items[key] === undefined)\n        return undefined;\n\n      this.length--;\n        return delete items[key];\n      };\n  };\n\n  // Now there exists a property of window that behaves just like\n  // one would expect the local storage object to (although in this example\n  // the functionality is reduced in order to make the point)\n  window.localStorage = new FauxStorage();\n}\n\n// This code will work just fine whether or not the browser supports the real\n// HTML5 API for local storage. No exceptions will be thrown.\nlocalStorage.setItem(\"name\", \"Rodrigo Silveira\");\nlocalStorage.length == 1; // true\nlocalStorage.getItem(\"name\"); // \"Rodrigo Silveira\"\nlocalStorage.removeItem(\"name\");\nlocalStorage.length; // == 0\n```", "```js\n<body>\n  <div class=\"health-bar\">\n    <span></span>\n  </div>\n\n    <h1 id=\"message\"></h1>\n\n    <div id=\"table\"></div>\n    <div id=\"bowl\"></div>\n    <div id=\"bowl-top-faux-target\"></div>\n    <div id=\"bowl-top\" class=\"dragging-icon bowl-closed\"\n      draggable=\"true\"\n      ondragstart=\"doOnDragStart(event)\"\n      ondragend=\"doOnDragEnd(event)\"></div>\n    <div id=\"bowl-top-target\"\n      ondrop=\"startGame()\"\n      ondragover=\"doOnDrop(event)\"\n      ondragleave=\"doOnDragLeave(event)\"></div>\n\n    <div class=\"dom-recs\">\n      <svg class=\"hero-svg\">\n      (\u2026)\n      </svg>\n      <svg class=\"jelly-svg\">\n      (\u2026)\n      </svg>\n    </div>\n</body>\n```", "```js\n// ** By assigning an anonymous function to a variable, JavaScript\n// allows us to later call the variable's referenced function with\n// the keyword 'new'. This style co function creation essentially \n// makes the function behave like a constructor, which allows us to\n// simulate classes in JavaScript\nvar SoundFx = function() {\n  // Every sound entity will be stored here for future use\n  var sounds = {};\n\n  // ------------------------------------------------------------\n  // Register a new sound entity with some basic configurations\n  // ------------------------------------------------------------\n  function addSound(name, file, loop, autoplay) {\n\n    // Don't create two entities with the same name\n    if (sounds[name] instanceof Audio)\n      return false;\n\n      // Behold, the new HTML5 Audio element!\n      sounds[name] = new Audio();\n      sounds[name].src = file;\n      sounds[name].controls = false;\n      sounds[name].loop = loop;\n      sounds[name].autoplay = autoplay;\n    }\n\n    // -----------------------------------------------------------\n    // Play a file from the beginning, even if it's already playing\n    // -----------------------------------------------------------\n  function play(name) {\n    sounds[name].currentTime = 0;\n    sounds[name].play();\n  }\n\n    // -----------------------------------------------------------\n    // Gradually adjust the volume, either up or down\n    // -----------------------------------------------------------\n  function fade(name, fadeTo, speed, inOut) {\n    if (fadeTo > 1.0)\n      return fadeOut(name, 1.0, speed, inOut);\n\n    if (fadeTo < 0.000)\n      return fadeOut(name, 0.0, speed, inOut);\n\n      var newVolume = parseFloat(sounds[name].volume + 0.01 * inOut);\n\n    if (newVolume < parseFloat(0.0))\n      newVolume = parseFloat(0.0);\n\n      sounds[name].volume = newVolume;\n\n    if (sounds[name].volume > fadeTo)\n      setTimeout(function(){ fadeOut(name, fadeTo, speed, inOut); }, speed);\n    else\n      sounds[name].volume = parseFloat(fadeTo);\n\n      return sounds[name].volume;\n  }\n\n    // -----------------------------------------------------------\n    // A wrapper function for fade()\n    // ------------------------------------------------------------\n    function fadeOut(name, fadeTo, speed) {\n      fade(name, fadeTo, speed, -1);\n    }\n\n    // -----------------------------------------------------------\n    // A wrapper function for fade()\n    // -----------------------------------------------------------\n    function fadeIn(name, fadeTo, speed) {\n      fade(name, fadeTo, speed, 1);\n    }\n\n    // -----------------------------------------------------------\n    // The public interface through which the client can use the class\n    // -----------------------------------------------------------\n    return {\n      add: addSound,\n      play: play,\n      fadeOut: fadeOut,\n      fadeIn: fadeIn\n    };\n};\n```", "```js\n// Hold every sound effect in the same object for easy access\nvar sounds = new SoundFx();\n\n// Sound.add() Parameters:\n// string: hash key\n// string: file url\n// bool: loop this sound on play?\n// bool: play this sound automatically as soon as it's loaded?\nsounds.add(\"background\", \"sound/techno-loop-2.mp3\", true,  true);\nsounds.add(\"game-over\",  \"sound/game-over.mp3\",     false, false);\nsounds.add(\"splash\",     \"sound/slurp.mp3\",         false, false);\nsounds.add(\"boing\",      \"sound/boing.mp3\",         false, false);\nsounds.add(\"hit\",        \"sound/swallow.mp3\",       false, false);\nsounds.add(\"bounce\",     \"sound/bounce.mp3\",        false, false);\n```", "```js\n.jelly-svg-off g.jelly-block, .jelly-svg-on g.splash {\n    display: none;\n}\n\n.jelly-svg-off g.splash, .jelly-svg-on g.jelly-block {\n    display: block;\n}\n```", "```js\n// Iterate through each jelly and check its state\nfor (var i in jellies) {\n\n  // Don't do anything to this jelly entity if it's outside the screen,\n  // was eaten, or smashed on the floor\n  if (!jellies[i].isInPlay())\n    continue;\n\n    // Determine if a jelly has already hit the floor\n    stillFalling = jellies[i].getY() + jellies[i].getHeight() * 2.5 < document.body.offsetHeight;\n\n    // If it hasn't hit the floor, let gravity move it down\n    if (stillFalling) {\n      jellies[i].move();\n    } else {\n\n    // Stop the jelly from falling\n    jellies[i].setY(document.body.offsetHeight - jellies[i].getHeight() - 75);\n\n      // Swap the vectors\n      jellies[i].swapClass(\"jelly-svg-on\", \"jelly-svg-off\");\n      jellies[i].setInPlay(false);\n\n      // Play the corresponding sound to this action\n      sounds.play(\"splash\");\n    }\n}\n```", "```js\n// ------------------------------------------------------------\n// Fired when draggable starts being dragged (onDragStart)\n// ------------------------------------------------------------\nfunction doOnDragStart(event) {\n  if (bowlTop.isReady) {\n    event.target.style.opacity = 0.0;\n    event.dataTransfer.setDragImage(bowlTop, 100, 60);\n  }\n}\n\n// ------------------------------------------------------------\n// Fired when draggable is released outside a target (onDragEnd)\n// ------------------------------------------------------------\nfunction doOnDragEnd(event) {\n  event.target.style.opacity = 1.0;\n  document.querySelector(\"#bowl-top-faux-target\").style.opacity = 0.0;\n}\n\n// ------------------------------------------------------------\n// Fired when draggable enters target (onDragOver)\n// ------------------------------------------------------------\nfunction doOnDragOver(event) {\n  event.preventDefault();\n  document.querySelector(\"#bowl-top-faux-target\").style.opacity = 1.0;\n}\n\n// ------------------------------------------------------------\n// Fired when draggable is hovered away from a target (onDragLeave)\n// ------------------------------------------------------------\nfunction doOnDragLeave(event) {\n  document.querySelector(\"#bowl-top-faux-target\").style.opacity = 0.0;\n}\n\n// ------------------------------------------------------------\n// Fired when draggable is dropped inside a target (onDrop)\n// ------------------------------------------------------------\nfunction startGame() {\n\n  // Keep the game from starting more than once\n  if (!isPlaying) {\n\n    // Register input handlers\n    document.body.addEventListener(\"keyup\", doOnKeyUp);\n    document.body.addEventListener(\"keydown\", doOnKeyDown);\n\n    // Reposition the bowl lid\n    var bowlTop = document.querySelector(\"#bowl-top\");\n    bowlTop.classList.remove(\"bowl-closed\");\n    bowlTop.style.left = (event.screenX - bowlTop.offsetWidth + 65) + \"px\";\n    bowlTop.style.top = (event.screenY - bowlTop.offsetHeight + 65 * 0) + \"px\";\n\n    // Disable dragging on the lid by removing the HTML5 draggable attribute\n    bowlTop.removeAttribute(\"draggable\");\n    bowlTop.classList.remove(\"dragging-icon\");\n\n    newJelly();\n      isPlaying = true;\n\n      // Start out the main game loop\n      gameTimer = setInterval(tick, 15);\n    }\n};\n```", "```js\n<audio>\n  <source src=\"img/sound-file.mp3\" type=\"audio/mpeg\" />\n  <source src=\"img/sound-file.ogg\" type=\"audio/ogg\" />\n</audio>\n```", "```js\n// Creating an audio file from a DOM element\nvar soundOne = document.createElement(\"audio\");\nsoundOne.setAttribute(\"controls\", \"controls\");\n\nsoundOneSource = document.createElement(\"source\");\nsoundOneSource.setAttribute(\"src\", \"sound-file.mp3\");\nsoundOneSource.setAttribute(\"type\", \"audio/mpeg\");\n\nsoundOne.appendChild(soundOneSource);\n\ndocument.body.appendChild(soundOne);\n\n// Creating an audio file from Audio\nvar soundTwo = new Audio(\"sound-file.mp3\");\nsoundTwo.setAttribute(\"controls\", \"controls\");\n\ndocument.body.appendChild(soundTwo);\n```", "```js\n<body>\n  <svg\n\n    version=\"1.1\"\n    width=\"150\"\n    height=\"150\">\n\n    <circle\n      cx=\"75\"\n      cy=\"75\"\n      r=\"50\"\n      stroke=\"black\"\n      stroke-width=\"2\"\n      fill=\"red\"></circle></svg>\n</body>\n```", "```js\n<body>\n  <object type=\"image/svg+xml\" data=\"red-circle.svg\"\n    width=\"100\" height=\"100\">\n  </object>\n\n  <img src=\"img/red-circle.svg\" width=\"100\" height=\"100\" />\n</body>\n```", "```js\n<body>\n  <object type=\"image/svg+xml\" data=\"red-circle.svg\"\n    width=\"100\" height=\"100\">\n  </object>\n\n  <script>\n    var obj = document.querySelector(\"object\");\n\n    // Very important step! Before calling getSVGDocument, we must register\n        // a callback to be fired once the SVG document is loaded.\n    obj.onload = function(){\n      init(obj.getSVGDocument());\n    };\n\n    function init(svg) {\n      var circles = svg.getElementsByTagName(\"circle\");\n\n      // Register click handler on all circles\n      for (var i = 0, len = circles.length; i < len; i++) {\n        circles[i].addEventListener(\"click\", doOnCircleClick);\n      }\n\n      // When a circle element is clicked, it adds a CSS class \"blue\"\n            // to itself.\n    function doOnCircleClick(event) {\n      this.classList.add(\"blue\");\n    }\n  }\n  </script>\n</body>\n```", "```js\n<svg\n\n  version=\"1.1\"\n  width=\"150\"\n  height=\"150\">\n\n<style type=\"text/css\">\n.blue {\n  /* CSS Specific to SVG */\n  fill: #0000ff;\n\n  /* CSS Specific to the browser */\n  cursor: pointer;\n  -webkit-transition: fill 1.25s;\n}\n</style>\n  <circle\n    cx=\"75\"\n    cy=\"75\"\n    r=\"50\"\n    stroke=\"black\"\n    stroke-width=\"2\"\n    fill=\"red\"></circle>\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <rect\n    width=\"400\"\n    height=\"150\" />\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <circle\n    cx=\"0\"\n    cy=\"0\"\n    r=\"300\"\n    fill=\"#ff3\" />\n\n  <circle\n    cx=\"200\"\n    cy=\"200\"\n    r=\"100\"\n    fill=\"#a0a\" />\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <ellipse\n    cx=\"400\"\n    cy=\"300\"\n    rx=\"300\"\n    ry=\"100\"\n    fill=\"#ff3\" />\n\n  <ellipse\n    cx=\"230\"\n    cy=\"200\"\n    rx=\"75\"\n    ry=\"75\"\n    fill=\"#a0a\" />\n  <ellipse\n    cx=\"560\"\n    cy=\"200\"\n    rx=\"75\"\n    ry=\"75\"\n    fill=\"#a0a\" />\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <line\n    x1=\"50\"\n    y1=\"50\"\n    x2=\"300\"\n    y2=\"500\"\n    stroke-width=\"50\"\n    stroke=\"#c00\" />\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <polyline\n    points=\"50, 10, 100, 50, 30, 100, 175, 300, 250, 10, 10, 400\"\n    fill=\"#fff\"\n    stroke=\"#c00\"\n    stroke-width=\"10\"/>\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n    <polygon\n        points=\"50, 10, 100, 50, 30, 100, 175, 300, 250, 10, 10, 400\"\n        fill=\"#fff\"\n        stroke=\"#c00\"\n        stroke-width=\"10\"/>\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <path\n    d=\"M 100 100\n    L 100 300\n    M 250 100\n    L 250 300\n    M 400 100\n    L 400 300\"\n    fill=\"transparent\"\n    stroke-width=\"45\"\n    stroke=\"#333\" />\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <path\n    d=\"M 250 100\n    L 250 300\n    M 400 100\n    L 400 300\"\n    fill=\"transparent\"\n    stroke-width=\"45\"\n    stroke=\"#333\" />\n  <path\n    d=\"M 150 300\n    C 200 500,\n    450 500,\n    500 300\"\n\n    fill=\"transparent\"\n    stroke-width=\"45\"\n    stroke=\"#333\" />\n\n  <circle\n    cx=\"150\"\n    cy=\"300\"\n    r=\"8\"\n    fill=\"#c00\" />\n  <circle\n    cx=\"200\"\n    cy=\"500\"\n    r=\"8\"\n    fill=\"#c00\" />\n  <line\n    x1=\"150\"\n    y1=\"300\"\n    x2=\"200\"\n    y2=\"500\"\n    stroke-width=\"5\"\n    stroke=\"#c00\" />\n\n  <circle\n    cx=\"450\"\n    cy=\"500\"\n    r=\"8\"\n    fill=\"#c00\" />\n  <circle\n    cx=\"500\"\n    cy=\"300\"\n    r=\"8\"\n    fill=\"#c00\" />\n  <line\n    x1=\"450\"\n    y1=\"500\"\n    x2=\"500\"\n    y2=\"300\"\n    stroke-width=\"5\"\n    stroke=\"#c00\" />\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <text\n    x=\"100\"\n    y=\"300\"\n    fill=\"#c00\"\n    stroke=\"#333\"\n    stroke-width=\"2\"\n    style=\"font-size: 175px\">I Love HTML5!</text>\n</svg>\n```", "```js\n<svg  version=\"1.1\" width=\"1000\" height=\"1000\">\n  <rect\n    x=\"500\"\n    y=\"500\"\n    width=\"900\"\n    height=\"600\"\n    fill=\"#c00\"\n    stroke=\"#333\"\n    stroke-width=\"2\"\n    transform=\"translate(800, 50)\n      rotate(55, 0, 0)\n      scale(0.25)\">\n\n    <animate\n      dur=\"1.5s\"\n      attributeName=\"x\"\n      values=\"-50; 100; -50\"\n      repeatCount=\"indefinite\" />\n\n    <animate\n      dur=\"1.5s\"\n      attributeName=\"height\"\n      values=\"50; 300; 50\"\n      repeatCount=\"indefinite\" />\n  </rect>\n</svg>\n```", "```js\n<ul>\n  <li draggable=\"true\" class=\"block\"\n    ondragstart=\"doOnDragStart(event)\"\n    data-name=\"Block 1\">Block #1</li>\n</ul>\n```", "```js\ndocument.body.ondragover = doOnDragOver;\ndocument.body.ondragleave = doOnDragLeave;\ndocument.body.ondrop = doOnDrop;\n\nfunction doOnDragOver(event) {\n  event.preventDefault();\n  document.body.classList.add(\"dropme\");\n}\n\nfunction doOnDragLeave(event) {\n  event.preventDefault();\n  document.body.classList.remove(\"dropme\");\n}\n\nfunction doOnDrop(event) {\n  event.preventDefault();\n  document.body.classList.remove(\"dropme\");\n  var newItem = document.createElement(\"li\");\n  newItem.setAttribute(\"draggable\", true);\n  newItem.classList.add(\"block\");\n\n  document.querySelector(\"ul\").appendChild(newItem);\n}\n```", "```js\nfunction doOnDragStart(event) {\n    // First we set the data when the drag event first starts\n event.dataTransfer.setData(\"who-built-me\", event.target.getAttribute(\"data-name\"));\n}\n\nfunction doOnDrop(event) {\n    event.preventDefault();\n    document.body.classList.remove(\"dropme\");\n\n    var num = document.querySelectorAll(\"li\").length + 1;\n\n    // Then we retrieve that data when the drop event is fired by the browser\n var builtBy = event.dataTransfer.getData(\"who-built-me\");\n\n    var newItem = document.createElement(\"li\");\n    newItem.ondragstart = doOnDragStart;\n    newItem.setAttribute(\"draggable\", true);\n    newItem.setAttribute(\"data-name\", \"Block \" + num);\n    newItem.innerText = \"Block #\" + num + \", built by \" + builtBy;\n\n    newItem.classList.add(\"block\");\n\n    document.querySelector(\"ul\").appendChild(newItem);\n}\n```"]