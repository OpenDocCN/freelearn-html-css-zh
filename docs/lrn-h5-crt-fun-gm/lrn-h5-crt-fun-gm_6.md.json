["```js\n<body>\n\n  <script type=\"glsl-shader/x-fragment\" id=\"glsl-frag-simple\">\n    precision mediump float;\n\n    void main(void) {\n      gl_FragColor = vec4(1.0, 1.0, 0.3, 1.0);\n    }\n  </script>\n\n  <script type=\"glsl-shader/x-vertex\" id=\"glsl-vert-simple\">\n    attribute vec3 aVertPos;\n\n    uniform mat4 uMVMat;\n    uniform mat4 uPMat;\n\n    void main(void) {\n      gl_Position = uPMat * uMVMat * vec4(aVertPos, 1.0);\n    }\n  </script>\n\n  <script>\n    (function main() {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = 700;\n      canvas.height = 400;\n      document.body.appendChild(canvas);\n\n      var gl = null;\n      try {\n        gl = canvas.getContext(\"experimental-webgl\") ||\n          canvas.getContext(\"webgl\");\n        gl.viewportWidth = canvas.width;\n        gl.viewportHeight = canvas.height;\n      } catch (e) {}\n\n      if (!gl) {\n        document.body.innerHTML =\n          \"<h1>This browser doesn't support WebGl</h1>\";\n      }\n\n      var shaderFrag = document.getElementById\n        (\"glsl-frag-simple\").textContent;\n      var shaderVert = document.getElementById\n      (\"glsl-frag-simple\").textContent;\n    })();\n  </script>\n</body>\n```", "```js\nfunction getShader(gl, code, type) {\n  // Step 1: Create a specific type of shader\n  var shader = gl.createShader(type);\n\n  // Step 2: Link source code to program\n  gl.shaderSource(shader, code);\n\n  // Step 3: Compile source code\n  gl.compileShader(shader);\n\n  return shader;\n}\n\nfunction getShaderProgram(gl, shaderFrag, shaderVert) {\n\n  // Step 1: Create a shader program\n  var program = gl.createProgram();\n\n  // Step 2: Attach both shaders into the program\n  gl.attachShader(program, shaderFrag);\n  gl.attachShader(program, shaderVert);\n\n  // Step 3: Link the program\n  gl.linkProgram(program);\n\n  return program;\n}\n\n(function main() {\n  // ...\n\n  var shaderFrag = getShader(gl,\n    document.getElementById(\"glsl-frag-simple\").textContent,\n    gl.FRAGMENT_SHADER);\n\n  var shaderVert = getShader(gl,\n    document.getElementById(\"glsl-vert-simple\").textContent,\n    gl.VERTEX_SHADER);\n\n  var shader = getShaderProgram(gl, shaderFrag, shaderVert);\n\n  // Specify which shader program is to be used\n  gl.useProgram(shader);\n\n  // Allocate space in GPU for variables\n  shader.attribVertPos = gl.getAttribLocation(shader, \"aVertPos\");\n  gl.enableVertexAttribArray(shader.attribVertPos);\n\n  shader.pMatrixUniform = gl.getUniformLocation\n    (shader, \"uPMatrix\");\n  shader.mvMatrixUniform = gl.getUniformLocation\n    (shader, \"uMVMatrix\");\n})();\n```", "```js\nfunction initTriangleBuffer(gl) {\n  // Step 1: Create a buffer\n  var buffer = gl.createBuffer();\n\n  // Step 2: Bind the buffer with WebGL\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n  // Step 3: Specify 3D model vertices\n  var vertices = [\n    0.0,   0.1, 0.0,\n    -1.0, -1.0, 0.0,\n    1.0,  -1.0, 0.0\n  ];\n\n  // Step 4: Fill the buffer with the data from the model\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices),\n    gl.STATIC_DRAW);\n\n  // Step 5: Create some variables with information about the\n    vertex buffer\n  // to simplify calculations later on\n\n  // Each vertex has an X, Y, Z component\n  buffer.itemSize = 3;\n\n  // There are 3 unique vertices\n  buffer.numItems = parseInt(vertices.length / buffer.itemSize);\n\n  return buffer;\n}\n\n(function main() {\n  // ...\n\n  var triangleVertBuf = initTriangleBuffer(gl);\n})();\n```", "```js\n<script src=\"img/glmatrix.js\"></script>\n\u2026\n\nfunction drawScene(gl, entityBuf, shader) {\n  // Step 1: Create the Model, View and Projection matrices\n  var mvMat = mat4.create();\n  var pMat = mat4.create();\n\n  // Step 2: Initialize matrices\n  mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1,\n    100.0, pMat);\n  mat4.identity(mvMat);\n  mat4.translate(mvMat, [0.0, 0.5, -3.0]);\n\n  // Step 3: Set up the rendering viewport\n  gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Step 4: Send buffers to GPU\n  gl.bindBuffer(gl.ARRAY_BUFFER, entityBuf);\n  gl.vertexAttribPointer(shader.attribVertPos,\n    entityBuf.itemSize, gl.FLOAT, false, 0, 0);\n  gl.uniformMatrix4fv(shader.pMatrixUniform, false, pMat);\n  gl.uniformMatrix4fv(shader.mvMatrixUniform, false, mvMat);\n\n  // Step 5: Get this over with, and render the triangle already!\n  gl.drawArrays(gl.TRIANGLES, 0, entityBuf.numItems);\n}\n\n(function main() {\n  // ...\n\n  // Clear the WebGL canvas context to some background color\n  gl.clearColor(0.2, 0.8, 0.2, 1.0);\n  gl.enable(gl.DEPTH_TEST);\n\n  // WebGL: Please draw this triangle on the gl object,\n    using this shader...\n  drawScene(gl, triangleVertBuf, shader);\n})();\n```", "```js\n// Step 1: Open connection\nvar con = new WebSocket\n  (\"ws://localhost:8888/packt/sockets/multiplayer-game-server\");\n\n// Step 2: Register callbacks\ncon.addEventListener(\"open\", doOnOpen);\ncon.addEventListener(\"error\", doOnError);\ncon.addEventListener(\"message\", doOnMessage);\ncon.addEventListener(\"close\", doOnClose);\n\nfunction doOnOpen(event) {\n  var msg = document.createElement(\"p\");\n  msg.textContent = \"Socket connected to \" + event.srcElement.URL;\n  document.body.appendChild(msg);\n}\n\nfunction doOnError(event) {\n  var msg = document.createElement(\"p\");\n  msg.textContent = \"Error: \" + event;\n  document.body.appendChild(msg);\n}\u2029\nfunction doOnMessage(event) {\n  var response = JSON.parse(event.data);\n\n  var msg = document.createElement(\"p\");\n  msg.textContent = \"Message received: \" + response.message;\n  document.body.appendChild(msg);\n}\n\nfunction doOnClose(event) {\n  var msg = document.createElement(\"p\");\n  msg.textContent = \"Socket connection closed at \" +\n    event.timeStamp;\n  document.body.appendChild(msg);\n}\n\n// Step 3: Send a message to the server\ncon.send(\"Hello!\");\n```", "```js\n// Client code\nvar con = new WebSocket\n  (\"ws://localhost:8888/packt/sockets/multiplayer-game-server\");\n// \u2026\n\ncon.send({name: \"Rodrigo\"});\n\n// Server code\nString input = get_input_from_socket();\ninput.toString() == \"[object Object]\";\n```", "```js\n<style>\nvideo {\n  -webkit-box-reflect: below 1px;\n  -webkit-transition: all 1.5s;\n}\n\nvideo {\n  -webkit-filter: contrast(250%);\n}\n\ndiv {\n  position: relative;\n}\n\ndiv img {\n  position: absolute;\n  left: 0;\n  top: 221px;\n  width: 400px;\n  height: 220px;\n}\n</style>\n\n<div>\n  <video controls width=\"400\" height=\"220\"\n    poster=\"bunny-poster.png\">\n    <!-- Video courtesy of http://www.bigbuckbunny.org -->\n    <source src=\"img/bunny.ogg\" type=\"video/ogg\" />\n    <source src=\"img/bunny.mp4\" type=\"video/mp4\" />\n    <source src=\"img/bunny.webm\" type=\"video/webm\" />\n  </video>\n  <img src=\"img/semi-transparent-mask.png\" />\n</div>\n```", "```js\n// Step 1: Create the video object\nvar video = document.createElement(\"video\");\nvideo.width = 400;\nvideo.height = 220;\nvideo.controls = true;\nvideo.poster = \"bunny-poster.png\";\n\n// Step 2: Add one or more sources\nvar sources = [\n  {src: \"bunny.ogg\", type: \"video/ogg\"},\n  {src: \"bunny.mp4\", type: \"video/mp4\"},\n  {src: \"bunny.webm\", type: \"webm\"}\n];\n\nfor (var i in sources) {\n  var source = document.createElement(\"source\");\n  source.src = sources[i].src;\n  source.type = sources[i].type;\n\n  video.appendChild(source);\n}\n\n// Step 3: Make video player visible\ndocument.body.appendChild(video);\n```", "```js\nvar ctx = null;\nvar ctxOff = null;\n\nvar poster = new Image();\nposter.src = \"bunny-poster.jpg\";\nposter.addEventListener(\"click\", initVideo);\ndocument.body.appendChild(poster);\n\n// Step 1: When the video plays, call our custom drawing function\nvideo.autoplay = false;\nvideo.loop = false;\n\n// Step 2: Add one or more sources\nvar sources = [\n  {src: \"bunny.ogg\", type: \"video/ogg\"},\n  {src: \"bunny.mp4\", type: \"video/mp4\"},\n  {src: \"bunny.webm\", type: \"webm\"}\n];\n\nfor (var i in sources) {\n  var source = document.createElement(\"source\");\n  source.src = sources[i].src;\n  source.type = sources[i].type;\n\n  video.appendChild(source);\n}\n\n// Step 3: Initialize the video\nfunction initVideo() {\n  video.addEventListener(\"play\", initCanvas);\n  video.play();\n}\n\n// Step 4: Only initialize our canvases once\nfunction initCanvas() {\n  // Step 1: Initialize canvas, if needed\n  if (ctx == null) {\n    var canvas = document.createElement(\"canvas\");\n    var canvasOff = document.createElement(\"canvas\");\n\n    canvas.width = canvasOff.width = video.videoWidth;\n    canvas.height = canvasOff.height = video.videoHeight;\n\n    ctx = canvas.getContext(\"2d\");\n    ctxOff = canvasOff.getContext(\"2d\");\n\n    // Make the canvas - not video player \u2013 visible\n    poster.parentNode.removeChild(poster);\n    document.body.appendChild(canvas);\n  }\n\n  renderOnCanvas();\n}\n\nfunction renderOnCanvas() {\n  // Draw frame to canvas if video is still playing\n  if (!video.paused && !video.ended) {\n\n    // Draw original frame to offscreen canvas\n    ctxOff.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Manipulate frames offscreen\n    var frame = getVideoFrame();\n\n    // Draw new frame to visible video player\n    ctx.putImageData(frame, 0, 0);\n    requestAnimationFrame(renderOnCanvas);\n  }\n}\n\nfunction getVideoFrame() {\n  var img = ctxOff.getImageData\n    (0, 0, canvas.width, canvas.height);\n\n  // Invert the color of every pixel in the canvas context\n  for (var i = 0, len = img.data.length; i < len; i += 4) {\n    img.data[i] = 255 - img.data[i];\n    img.data[i + 1] = 255 - img.data[i + 1];\n    img.data[i + 2] = 255 - img.data[i + 2];\n  }\n\n  return img;\n}\n```", "```js\nfunction getGeo(position) {\n  var geo = document.createElement(\"ul\");\n  var lat = document.createElement(\"li\");\n  var lon = document.createElement(\"li\");\n\n  lat.textContent = \"Latitude: \" + position.coords.latitude;\n  lon.textContent = \"Longitude: \" + position.coords.longitude;\n\n  geo.appendChild(lat);\n  geo.appendChild(lon);\n  document.body.appendChild(geo);\n}\n\nfunction doOnPermissionDenied(message) {\n  var p = document.createElement(\"p\");\n\n  p.textContent = \"Permission Denied Error: \" + message;\n  document.body.appendChild(p);\n}\n\nfunction doOnPositionUnavailable(message) {\n  var p = document.createElement(\"p\");\n\n  p.textContent = \"Position Unavailable Error: \" + message;\n  document.body.appendChild(p);\n}\n\nfunction doOnTimeout(message) {\n  var p = document.createElement(\"p\");\n\n  p.textContent = \"Operation Timeout Error: \" + message;\n  document.body.appendChild(p);\n}\n\nfunction doNoGeo(positionError) {\n  switch (positionError.code) {\n    case positionError.PERMISSION_DENIED:\n      doOnPermissionDenied(positionError.message);\n      break;\n\n    case positionError.POSITION_UNAVAILABLE:\n      doOnPositionUnavailable(positionError.message);\n      break;\n\n    case positionError.TIMEOUT:\n      doOnTimeout(positionError.message);\n      break;\n  }\n}\n\n// Ask the user if you may use Geolocation\nnavigator.geolocation.getCurrentPosition(getGeo, doNoGeo);\n```", "```js\n// Step 1: Request permission to get the user's location\nfunction initGeo() {\n  navigator.geolocation.getCurrentPosition(renderToMap, doNoGeo);\n}\n\n// Step 2: Render the user's location on a map\nfunction renderToMap(position) {\n  var container = document.createElement(\"div\");\n  container.id = \"myContaier\";\n  container.style.width = window.innerWidth + \"px\";\n  container.style.height = window.innerHeight + \"px\";\n\n  document.body.appendChild(container);\n\n  // Define some point based on a GPS coordinate\n  var coords = new google.maps.LatLng(\n    position.coords.latitude,\n    position.coords.longitude);\n\n  // Specify how we want the map to look\n  var options = {\n    zoom: 16,\n    center: coords,\n    mapTypeControl: false,\n    mapTypeId: google.maps.MapTypeId.ROADMAP\n  };\n\n  // Create a map, and inject it into the DOM element referenced\n  var map = new google.maps.Map(container, options);\n\n  // Create a marker and associate it with our map\n  var marker = new google.maps.Marker({\n    position: coords,\n    map: map,\n    title: \"Where's me?\"\n  });\n}\n```", "```js\n<style>\ndiv {\n  margin: 10px;\n  padding: 0;\n  border: 1px solid #ddd;\n  background: #fafafa;\n  width: 400px;\n\n  transition: all 3.3s;\n  filter: invert(1);\n}\n\ndiv:hover {\n  -webkit-filter: invert(0) blur(3px) contrast(150%);\n}\n\nh2 {\n  margin: 0;\n  padding: 10px;\n  font-size: 4.75em;\n  color: #aaa;\n  text-shadow: 0 -1px 0 #555, 0 1px 0 #fff;\n}\n</style>\n\n<div>\n  <h2>CSS Filters</h2>\n  <img src=\"img/strawberry.jpg\" width=\"400\" height=\"350\" />\n</div>\n```", "```js\ndiv {\n  margin: 10px;\n  padding: 0;\n  border: 1px solid #ddd;\n  background: #fafafa;\n  width: 400px;\n\n  filter: custom(url(simple-vert-shader.glsl)\n    mix(url(simple-frag-shader.glsl) normal source-atop,\n    16 32,\n    lightPosition 0.0 0.0 1.0;\n}\n```", "```js\n// ----------------------------------------------------\n// Vertex shader: simple-vert-shader.glsl\n// ----------------------------------------------------\nprecision mediump float;\n\n// Built-in attribute\nattribute vec4 a_position;\n\n// Built-in uniform\nuniform mat4 u_projectionMatrix;\n\n// Values sent in from CSS\nuniform float red;\nuniform float green;\nuniform float blue;\n\n// Send values to fragment shader\nvarying float v_r;\nvarying float v_g;\nvarying float v_b;\n\nvoid main() {\n\n  v_r = red;\n  v_g = green;\n  v_b = blue;\n\n  // Set the position of each vertex\n  gl_Position = u_projectionMatrix * a_position;\n}\n```", "```js\n// ----------------------------------------------------\n// Vertex shader: simple-vert-shader.glsl\n// ----------------------------------------------------\nprecision mediump float;\n\n// Input from vertex shader\nvarying float v_r;\nvarying float v_g;\nvarying float v_b;\n\nvoid main() {\n\n  // Set the color of each fragment\n  css_ColorMatrix = mat4(v_r, 0.0, 0.0, 0.0,\n    0.0, v_g, 0.0, 0.0,\n    0.0, 0.0, v_b, 0.0,\n    0.0, 0.0, 0.0, 1.0);\n}\n```", "```js\n<style>\ndiv {\n  margin: 10px;\n  padding: 0;\n  border: 1px solid #ddd;\n  background: #fafafa;\n  width: 400px;\n\n  /**\n   * We can leverage CSS transitions to make our simple\n   * shaders seem even more impressive\n   */\n  transition: filter 1.0s;\n\n  filter: custom(url(simple-vert-shader.glsl)\n    mix(url(simple-frag-shader.glsl)\n    normal source-atop),\n    16 32,\n    red 1.0, green 0.0, blue 0.0);\n}\n\ndiv:hover {\n  filter: custom(url(simple-vert-shader.glsl)\n    mix(url(simple-frag-shader.glsl)\n    normal source-atop),\n    16 32,\n    red 1.0, green 1.0, blue 0.0);\n}\n\nh2 {\n  margin: 0;\n  padding: 10px;\n  font-size: 4.75em;\n  color: #aaa;\n  text-shadow: 0 -1px 0 #555, 0 1px 0 #fff;\n}\n</style>\n\n<div>\n  <h2>CSS Filters</h2>\n  <img src=\"img/strawberry.jpg\" width=\"400\" height=\"350\" />\n</div>\n```", "```js\n<style>\ndiv {\n  column-count: 4;\n  column-gap: 20px;\n</style>\n\n<div>\n  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n\n  <p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius.</p>\n\n  <p>Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>\n</div>\n```", "```js\n<style>\ndiv {\n  column-width: 200px;\n  column-gap: 20px;\n</style>\n```", "```js\n<style>\ndiv {\n  column-count: 3;\n  column-gap: 20px;\n  column-rule-width: 1px;\n  column-rule-style: dashed;\n  column-rule-color: rgb(255, 10, 10);\n</style>\n```", "```js\n<style>\ndiv {\n  -webkit-column-count: 3;\n  -webkit-column-gap: 20px;\n  -webkit-column-rule: 1px solid #fff;\n  padding: 20px;\n  margin: 10px;\n  background: #eee;\n}\n\ndiv p {\n  margin: 0 0 10px;\n -webkit-column-break-inside: auto;\n}\n\ndiv h2 {\n  margin: 0 0 10px;\n  color: #55c;\n  text-shadow: 0 1px 0 #fff;\n -webkit-column-break-before: always;\n}\n</style>\n\n<div>\n  <h2>Lorem Ipsum</h2>\n  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n\n  <h2>Nam Liber Tempor</h2>\n  <p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius.</p>\n\n  <h2>Claritas est etiam</h2>\n  <p>Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>\n</div>\n```", "```js\n<style>\nh2, p {\n  margin: 0 0 10px;\n}\n\n#src {\n  flow-into: mydiv;\n}\n\n.container {\n  flow-from: mydiv;\n\n  border: 1px solid #c00;\n  padding: 0.5em;\n  margin: 0.5em;\n}\n\n.col1, .col2, .col3 {\n  float: left;\n  width: 50%;\n}\n\n#one {\n  height: 250px;\n}\n\n#two, #three {\n  height: 111px;\n}\n\n.col3 {\n  clear: both;\n  width: 100%;\n}\n</style>\n\n<div id=\"src\">\n  <h2>Lorem Ipsum</h2>\n  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n\n  <h2>Nam Liber Tempor</h2>\n  <p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius.</p>\n\n  <h2>Claritas est etiam</h2>\n  <p>Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>\n</div>\n\n<div class=\"col1\">\n  <div class=\"container\" id=\"one\"></div>\n</div>\n<div class=\"col2\">\n  <div class=\"container\" id=\"two\"></div>\n  <div class=\"container\" id=\"three\"></div>\n</div>\n<div class=\"col3\">\n  <div class=\"container\" id=\"four\"></div>\n</div>\n```", "```js\n#src {\n  flow-into: description-text;\n}\n\ndiv.description {\n  flow-from: description-text;\n}\n```", "```js\n<style>\nimg {\n  width: 300px;\n  height: 60px;\n  display: inline-block;\n  float: left;\n}\n</style>\n\n<div>\n  <img src=\"img/lipsum-logo.png\" />\n  <h2>Lorem Ipsum</h2>\n  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n</div>\n```", "```js\n<style>\nh2, p {\n  margin: 0 0 10px;\n}\n\nsvg {\n  float: left;\n  width: 300px;\n  height: 400px;\n shape-outside: polygon(0 0, 100% 50%, 0 100%);\n}\n\nsvg polygon {\n  fill: #c33;\n}\n</style>\n\n<div>\n  <svg >\n<polygon points=\"0, 0, 300, 200, 0, 400\"></polygon></svg>\n\n  <h2>Lorem Ipsum</h2>\n  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n</div>\n```", "```js\n<style>\n.shape {\n  display: inline-block;\n  float: left;\n  width: 300px;\n  height: 400px;\n  shape-outside: polygon(0 0, 100% 50%, 0 100%);\n}\n</style>\n\n<div>\n  <span class=\"shape\"> </span>\n\n  <h2>Lorem Ipsum</h2>\n  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n</div>\n```", "```js\n<style>\n.shape {\n  display: block;\n  width: 300px;\n  height: 400px;\n  shape-inside: polygon(0 0, 100% 50%, 0 100%);\n}\n</style>\n\n<div>\n  <h2>Lorem Ipsum</h2>\n  <span class=\"shape\">\n    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n  </span>\n</div>\n```", "```js\n<style>\nh2, p {\n  margin: 0 0 10px;\n}\n\n#wrap {\n  width: 50%;\n  height: 100%;\n  float: left;\n\n  shape-inside: polygon(0 0, 100% 50%, 0 100%);\n  shape-outside: polygon(0 0, 100% 50%, 0 100%);\n}\n</style>\n\n<div>\n  <h2>Lorem Ipsum</h2>\n\n  <div id=\"wrap\">\n    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.</p>\n  </div>\n\n  <h2>Nam Liber Tempor</h2>\n  <p>Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius.</p>\n\n  <h2>Claritas est etiam</h2>\n  <p>Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.</p>\n</div>\n```"]