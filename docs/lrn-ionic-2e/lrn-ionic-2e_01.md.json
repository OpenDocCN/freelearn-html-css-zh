["```html\nx = 20; \n// after a few meaningful minutes  \nx = 'nah! It's not a number any more';\n\n```", "```html\nname: string = 'Arvind'; \nage: number  = 99; \nisAlive: boolean = true; \nhobbies: string[]; \nanyType: any; \nnoType = 50; \nnoType = 'Random String';\n\n```", "```html\nclass Person { \n  name: string; \n\nconstructor(personName: string) {  \nthis.name = personName;  \n} \n\ngetName { \n    return \"The Name: \" + this.greeting; \n}   \n} \n// somewhere else \narvind:Person = new Person('Arvind');\n\n```", "```html\nInterface ICar { \n  engine : String; \n  color: String; \n  price : Number; \n} \n\nclass CarInfo implements ICar{ \n  engine : String; \n  color: String; \n  price : Number; \n\n  constructor(){ /* ... */} \n}\n\n```", "```html\n(function(){ \n  var x = 20; \n  var y = x * 30; \n})(); //IIFE \n// x & y are both undefined here.\n\n```", "```html\nlogic.ts\nexport function process(){ \n  x = 20; \n  y = x * 30; \n} \n\nexec.ts \nimport { process } from './logic'; \nprocess();\n\n```", "```html\n@Component({ \n  selector: 'app-root', \n  templateUrl: './app.component.html', \n  styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent { \n  // This is where we write the component logic! \n  title = 'Hello World!'; \n}\n\n```", "```html\n@Component({ \n  selector: 'app-root', \n  templateUrl: './app.component.html', \n  styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent { \n  // This is where we write the component logic! \n  title = 'Hello World!'; \n}\n\n```", "```html\n<h1>\n{{title}} <!-- This value gets bound from app.component.ts -->\n</h1>\n\n```", "```html\n @Component({ \n  selector: 'app-root', \n  template: '<h1>{{title}}</h1>', \n  styleUrls: ['./app.component.css'] \n}) \nexport class AppComponent { \n  // This is where we write the component logic! \n  title = 'Hello World!'; \n}\n\n```", "```html\n<div [class.highlight]=\"shouldHighlight\">Hair!</div>\n\n```", "```html\n<button (click)=pullHair($event)\">Pull Hair</button>\n\n```", "```html\n<input type=\"text\" [(ngModel)]=\"name\">\n\n```", "```html\n<ul> \n  <li *ngFor=\"let todo in todos\">{{todo.title}}</li> \n\n</ul>\n\n```", "```html\nnpm install -g @angular/cli\n\n```", "```html\nng new giphy-app\n\n```", "```html\n. \n\u251c\u2500\u2500 .angular-cli.json \n\u251c\u2500\u2500 .editorconfig \n\u251c\u2500\u2500 README.md \n\u251c\u2500\u2500 e2e \n\u2502   \u251c\u2500\u2500 app.e2e-spec.ts \n\u2502   \u251c\u2500\u2500 app.po.ts \n\u2502   \u251c\u2500\u2500 tsconfig.e2e.json \n\u251c\u2500\u2500 karma.conf.js \n\u251c\u2500\u2500 node_modules \n\u251c\u2500\u2500 package.json \n\u251c\u2500\u2500 protractor.conf.js \n\u251c\u2500\u2500 src \n\u2502   \u251c\u2500\u2500 app \n\u2502   \u2502   \u251c\u2500\u2500 app.component.css \n\u2502   \u2502   \u251c\u2500\u2500 app.component.html \n\u2502   \u2502   \u251c\u2500\u2500 app.component.spec.ts \n\u2502   \u2502   \u251c\u2500\u2500 app.component.ts \n\u2502   \u2502   \u251c\u2500\u2500 app.module.ts \n\u2502   \u251c\u2500\u2500 assets \n\u2502   \u2502   \u251c\u2500\u2500 .gitkeep \n\u2502   \u251c\u2500\u2500 environments \n\u2502   \u2502   \u251c\u2500\u2500 environment.prod.ts \n\u2502   \u2502   \u251c\u2500\u2500 environment.ts \n\u2502   \u251c\u2500\u2500 favicon.ico \n\u2502   \u251c\u2500\u2500 index.html \n\u2502   \u251c\u2500\u2500 main.ts \n\u2502   \u251c\u2500\u2500 polyfills.ts \n\u2502   \u251c\u2500\u2500 styles.css \n\u2502   \u251c\u2500\u2500 test.ts \n\u2502   \u251c\u2500\u2500 tsconfig.app.json \n\u2502   \u251c\u2500\u2500 tsconfig.spec.json \n\u2502   \u251c\u2500\u2500 typings.d.ts \n\u251c\u2500\u2500 tsconfig.json \n\u251c\u2500\u2500 tslint.json\n\n```", "```html\nng serve\n\n```", "```html\n@import \"https://bootswatch.com/cosmo/bootstrap.min.css\";\n\n```", "```html\nng generate component nav-bar\n\n```", "```html\ncreate src/app/nav-bar/nav-bar.component.css\ncreate src/app/nav-bar/nav-bar.component.html\ncreate src/app/nav-bar/nav-bar.component.spec.ts\ncreate src/app/nav-bar/nav-bar.component.ts\nupdate src/app/app.module.ts\n\n```", "```html\n<nav class=\"navbar navbar-inverse navbar-fixed-top\"> \n    <div class=\"container\"> \n        <div class=\"navbar-header\"> \n            <a class=\"navbar-brand\" [routerLink]=\"['/']\">Giphy App</a> \n        </div> \n        <div id=\"navbar\" class=\"collapse navbar-collapse\"> \n            <ul class=\"nav navbar-nav\"> \n                <li [routerLinkActive]=\"['active']\"><a [routerLink]=\"\n                  ['/trending']\">Trending</a></li> \n                <li [routerLinkActive]=\"['active']\"><a [routerLink]=\"\n                  ['/search']\">Search</a></li> \n            </ul> \n        </div> \n    </div> \n</nav>\n\n```", "```html\n<nav-bar></nav-bar>\n\n```", "```html\nimport { HomeComponent } from './home/home.component'; \nimport { TrendingComponent } from './trending/trending.component'; \nimport { SearchComponent } from './search/search.component'; \nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component'; \n\nexport const ROUTES = [ \n  { path: '', component: HomeComponent }, \n  { path: 'trending', component: TrendingComponent }, \n  { path: 'search', component: SearchComponent }, \n  { path: '**', component: PageNotFoundComponent } \n];\n\n```", "```html\nng generate component home\nng generate component trending\nng generate component search\nng generate component pageNotFound\n\n```", "```html\nimport { RouterModule }   from '@angular/router'; \nimport { ROUTES } from './app.routes';\n\n```", "```html\n//.. snipp \nimports: [ \n    BrowserModule, \n    FormsModule, \n    HttpModule, \n    RouterModule.forRoot(ROUTES) \n  ], \n//.. snipp \n\n```", "```html\nimport { BrowserModule } from '@angular/platform-browser'; \nimport { NgModule } from '@angular/core'; \nimport { FormsModule } from '@angular/forms'; \nimport { HttpModule } from '@angular/http'; \nimport { RouterModule }   from '@angular/router'; \n\nimport { AppComponent } from './app.component'; \nimport { NavBarComponent } from './nav-bar/nav-bar.component'; \nimport { HomeComponent } from './home/home.component'; \nimport { TrendingComponent } from './trending/trending.component'; \nimport { SearchComponent } from './search/search.component'; \nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component'; \n\nimport { ROUTES } from './app.routes'; \n\n@NgModule({ \n  declarations: [ \n    AppComponent, \n    NavBarComponent, \n    HomeComponent, \n    TrendingComponent, \n    SearchComponent, \n    PageNotFoundComponent \n  ], \n  imports: [ \n    BrowserModule, \n    FormsModule, \n    HttpModule, \n    RouterModule.forRoot(ROUTES) \n  ], \n  providers: [], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { }\n\n```", "```html\n<app-nav-bar></app-nav-bar> \n<router-outlet></router-outlet>\n\n```", "```html\n<div class=\"container\"> \n    <div class=\"starter-template\"> \n        <h1>Giphy App</h1> \n        <p class=\"lead\">This app uses the JSON API provided by Giphy to Browse and Search Gifs. \n            <br> To know more checkout : <a href=\"https://github.com/Giphy/GiphyAPI#trending-gifs-endpoint\">Giphy API</a> </p> \n    </div> \n</div>\n\n```", "```html\nng  serve\n\n```", "```html\nbody {\n  padding-top: 50px; \n  padding-bottom: 20px; \n} \n\n.starter-template { \n  padding: 40px 15px; \n  text-align: center; \n}\n\n```", "```html\nng generate service giphy\n\n```", "```html\nWARNING Service is generated but not provided, it must be provided to be used\n\n```", "```html\nimport { GiphyService } from './giphy.service';\n\n```", "```html\n//.. snipp \nproviders: [ \n    GiphyService \n  ], \n//..snipp\n\n```", "```html\nimport { BrowserModule } from '@angular/platform-browser'; \nimport { NgModule } from '@angular/core'; \nimport { FormsModule } from '@angular/forms'; \nimport { HttpModule } from '@angular/http'; \nimport { RouterModule }   from '@angular/router'; \n\nimport { AppComponent } from './app.component'; \nimport { NavBarComponent } from './nav-bar/nav-bar.component'; \nimport { HomeComponent } from './home/home.component'; \nimport { TrendingComponent } from './trending/trending.component'; \nimport { SearchComponent } from './search/search.component'; \nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component'; \n\nimport { ROUTES } from './app.routes'; \n\nimport { GiphyService } from './giphy.service'; \n\n@NgModule({ \n  declarations: [ \n    AppComponent, \n    NavBarComponent, \n    HomeComponent, \n    TrendingComponent, \n    SearchComponent, \n    PageNotFoundComponent \n  ], \n  imports: [ \n    BrowserModule, \n    FormsModule, \n    HttpModule, \n    RouterModule.forRoot(ROUTES) \n  ], \n  providers: [ \n    GiphyService \n  ], \n  bootstrap: [AppComponent] \n}) \nexport class AppModule { }\n\n```", "```html\nimport { Injectable } from '@angular/core'; \nimport { Http, Response, Jsonp } from '@angular/http'; \nimport { Observable } from 'rxjs/Rx'; \nimport 'rxjs/Rx'; \n\n@Injectable() \nexport class GiphyService { \n  private giphyAPIBase = 'http://api.giphy.com/v1/gifs'; \n  private APIKEY = 'dc6zaTOxFJmzC'; \n\n  constructor(private http: Http) { } \n\n  getRandomGif(): Observable<Response> { \n    return this.http.get(this.giphyAPIBase + \n      '/random?api_key=' + this.APIKEY) \n      .map((res) => res.json()); \n  } \n\n  getTrendingGifs(offset, limit): Observable<Response> { \n    return this.http.get(this.giphyAPIBase + \n      '/trending?api_key=' + this.APIKEY + '&offset=' + offset + \n      '&limit=' + limit) \n      .map((res) => res.json()); \n  } \n\n  searchGifs(offset, limit, text): Observable<Response> { \n    return this.http.get(this.giphyAPIBase + '/search?api_key=' + \n      this.APIKEY + '&offset=' + offset + \n      '&limit=' + limit + '&q=' + text) \n      .map((res) => res.json()); \n  } \n}\n\n```", "```html\nimport { Component, OnInit } from '@angular/core'; \nimport { GiphyService } from '../giphy.service'; \n\n@Component({ \n  selector: 'app-home', \n  templateUrl: './home.component.html', \n  styleUrls: ['./home.component.css'] \n}) \nexport class HomeComponent implements OnInit { \n  public gif: string; \n  public result: any; \n  public isLoading: boolean = true; \n\n  constructor(private giphyService: GiphyService) { \n    this.getRandomGif(); \n  } \n\n  ngOnInit() { \n  } \n\n  getRandomGif() { \n    this.giphyService.getRandomGif().subscribe( \n      (data) => { \n        this.result = data; \n        this.gif = this.result.data.image_url; \n        this.isLoading = false; \n      }, \n      (err) => console.log('Oops!', err), \n      () => console.log('Response', this.result) \n    ) \n  } \n}\n\n```", "```html\nng generate component gif-viewr\n\n```", "```html\n<div class=\"item\"> \n  <div class=\"well\"> \n    <img src=\"img/{{imgUrl}}\"> \n  </div> \n</div>\n\n```", "```html\nimport { Component, OnInit, Input} from '@angular/core';\n\n```", "```html\n@Input() imgUrl: string;\n\n```", "```html\nimport { Component, OnInit, Input} from '@angular/core'; \n\n@Component({ \n  selector: 'app-gif-viewr', \n  templateUrl: './gif-viewr.component.html', \n  styleUrls: ['./gif-viewr.component.css'] \n}) \nexport class GifViewrComponent implements OnInit { \n  @Input() imgUrl: string; \n\n  constructor() { } \n\n  ngOnInit() { \n  } \n}\n\n```", "```html\n<app-gif-viewr class=\"home\" [imgUrl]=\"gif\"></app-gif-viewr>\n\n```", "```html\n<div class=\"container\"> \n    <div class=\"starter-template\"> \n        <h1>Giphy App</h1> \n        <p class=\"lead\">This app uses the JSON API provided by Giphy to \n          Browse and Search Gifs. \n            <br> To know more checkout : \n            <a href=\n            \"https://github.com/Giphy/GiphyAPI#trending-gifs-endpoint\">\n            Giphy API</a> </p> \n    </div> \n\n  <app-gif-viewr class=\"home\" [imgUrl]=\"gif\"></app-gif-viewr> \n</div>\n\n```", "```html\n.home .well{ \n   width: 70%; \n    margin: 0 auto; \n} \n\nimg{ \n  width: 100%; \n}\n\n```", "```html\nimport { GiphyService } from '../giphy.service';\n\n```", "```html\nconstructor(private giphyService: GiphyService) { } \nIn ngOnInit(), we will call the getTrendingGifs() API: \n  ngOnInit() { \n    this.getTrendingGifs(this.offset, this.perPage); \n  } \nNext, we will add the required class variables:  \nprivate offset = 0; \nprivate perPage = 12; \npublic results: any; \npublic gifs: Array<any> = []; \npublic isLoading: boolean = true;\n\n```", "```html\ngetTrendingGifs(offset, limit) { \n    this.giphyService.getTrendingGifs(offset, limit).subscribe( \n      (data) => { \n        this.results = data; \n        this.gifs = this.gifs.concat(this.results.data); \n        this.isLoading = false; \n      }, \n      (err) => console.log('Oops!', err), \n      () => console.log('Response', this.results) \n    ) \n  } \nAnd finally getMore(), which will be invoked by the Load More button: \n getMore() { \n    this.isLoading = true; \n    this.offset = this.offset + this.perPage; \n    this.getTrendingGifs(this.offset, this.perPage); \n  }\n\n```", "```html\n<div class=\"container\"> \n    <h1 class=\"text-center\">Trending Gifs</h1> \n    <div class=\"wrapper\"> \n        <app-gif-viewr [imgUrl]=\"gif.images.original.url\" *ngFor=\"let gif of gifs\"></app-gif-viewr> \n    </div> \n    <input type=\"button\" value=\"Load More\" class=\"btn btn-primary btn-block\" *ngIf=\"!isLoading\" (click)=\"getMore()\"> \n</div>\n\n```", "```html\n*, *:before, *:after { \n  box-sizing: border-box !important; \n} \n\n.wrapper { \n  column-width: 18em; \n  column-gap: 1em; \n} \n\n.item { \n  display: inline-block; \n  padding: .25rem; \n  width: 100%; \n} \n\n.well { \n  position: relative; \n  display: block; \n}\n\n```", "```html\nimport { GiphyService } from '../giphy.service';\n\n```", "```html\nconstructor(private giphyService: GiphyService) { }\n\n```", "```html\n  private offset = 0; \n  private perPage = 12; \n  public results: any; \n  public query: string; \n  public gifs: Array<any> = []; \n  public isLoading: boolean = true;\n\n```", "```html\nsearchGifs(offset, limit, query) { \n    this.giphyService.searchGifs(offset, limit, query).subscribe( \n      (data) => { \n        this.results = data; \n        this.gifs = this.gifs.concat(this.results.data); \n        this.isLoading = false; \n      }, \n      (err) => console.log('Oops!', err), \n      () => console.log('Response', this.results) \n    ) \n  }\n\n```", "```html\n  search(query) { \n    this.query = query; \n    this.isLoading = true; \n    this.searchGifs(this.offset, this.perPage, this.query); \n  }\n\n```", "```html\ngetMore() { \n    this.isLoading = true; \n    this.offset = this.offset + this.perPage; \n    this.searchGifs(this.offset, this.perPage, this.query); \n  }\n\n```", "```html\nimport { Component, OnInit } from '@angular/core'; \nimport { GiphyService } from '../giphy.service'; \n\n@Component({ \n  selector: 'app-search', \n  templateUrl: './search.component.html', \n  styleUrls: ['./search.component.css'] \n}) \nexport class SearchComponent implements OnInit { \n  private offset = 0; \n  private perPage = 12; \n  public results: any; \n  public query: string; \n  public gifs: Array<any> = []; \n  public isLoading: boolean = true; \n\n  constructor(private giphyService: GiphyService) { } \n\n  ngOnInit() { \n  } \n\n  searchGifs(offset, limit, query) { \n    this.giphyService.searchGifs(offset, limit, query).subscribe( \n      (data) => { \n        this.results = data; \n        this.gifs = this.gifs.concat(this.results.data); \n        this.isLoading = false; \n      }, \n      (err) => console.log('Oops!', err), \n      () => console.log('Response', this.results) \n    ) \n  } \n\n  search(query) { \n    this.query = query; \n    this.isLoading = true; \n    this.searchGifs(this.offset, this.perPage, this.query); \n  } \n\n  getMore() { \n    this.isLoading = true; \n    this.offset = this.offset + this.perPage; \n    this.searchGifs(this.offset, this.perPage, this.query); \n  } \n}\n\n```", "```html\n<div class=\"container\"> \n    <h1 class=\"text-center\">Search Giphy</h1> \n    <div class=\"row\"> \n        <input class=\"form-control\" type=\"text\" placeholder=\"Search \n          something.. Like.. LOL or Space or Wow\" #searchText \n          (keyup.enter)=\"search(searchText.value)\"> \n    </div> \n    <br> \n    <div class=\"wrapper\"> \n        <app-gif-viewr [imgUrl]=\"gif.images.original.url\" *ngFor=\"let \n          gif of gifs\"></app-gif-viewr> \n    </div> \n    <input type=\"button\" value=\"Load More\" class=\"btn btn-primary btn-block\" *ngIf=\"!isLoading\" (click)=\"getMore()\"> \n</div>\n\n```", "```html\n<div class=\"container\"> \n    <div class=\"starter-template\"> \n        <h1>404 Not Found</h1> \n        <p class=\"lead\">Looks Like We Were Not Able To Find What You Are Looking For. \n            <br>Back to : <a [routerLink]=\"['/']\">Home</a>? </p> \n    </div> \n</div>\n\n```"]