- en: Welcome to Ionic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎来到Ionic
- en: In the previous chapter, we went through Angular 2 with the help of an example.
    In this chapter, we will look at the big picture of Mobile Hybrid apps, set up
    the required software to develop Ionic apps, and finally scaffold a few apps and
    explore them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过一个例子学习了Angular 2。在本章中，我们将看一下移动混合应用的大局，设置所需的软件来开发Ionic应用，最后搭建一些应用并探索它们。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Mobile Hybrid architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动混合架构
- en: What is Apache Cordova?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Cordova是什么？
- en: What is Ionic?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic是什么？
- en: Setting up the tools needed to develop and run Ionic apps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发和运行Ionic应用所需的工具
- en: Working with Ionic templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ionic模板
- en: Mobile Hybrid architecture
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动混合架构
- en: Before we start working with Ionic, we need to understand the bigger picture
    of Mobile Hybrid development.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Ionic之前，我们需要了解移动混合开发的大局。
- en: The concept is pretty simple. Almost every mobile operating system (also called
    platform, when working with Cordova) has an API to develop apps. This API consists
    of a component named WebView. A WebView is typically a browser that runs inside
    the scope of a mobile application. This browser runs the HTML, CSS, and JS code.
    This means that we can build a web page using the preceding technologies and then
    execute it inside our app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念非常简单。几乎每个移动操作系统（在使用Cordova时也称为平台）都有一个用于开发应用程序的API。这个API包括一个名为WebView的组件。WebView通常是一个在移动应用程序范围内运行的浏览器。这个浏览器运行HTML、CSS和JS代码。这意味着我们可以使用上述技术构建一个网页，然后在我们的应用程序内执行它。
- en: 'We can use the same knowledge of web development to build native-hybrid mobile
    apps (here, native refers to installing the platform-specific format file on the
    device after it has been packaged along with the assets), for instance:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的Web开发知识来构建本地混合移动应用程序（这里，本地是指在打包后与资产一起安装在设备上的特定于平台的格式文件），例如：
- en: Android uses Android Application Package (`.apk`)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android使用Android应用程序包（`.apk`）
- en: iOS uses iPhone Application Archive (`.ipa`)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS使用iPhone应用程序存档（`.ipa`）
- en: Windows Phone uses Application Package (`.xap`)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Phone使用应用程序包（`.xap`）
- en: The package/installer consists of a piece of native code that initializes the
    web page and a bunch of assets needed to show the web page content.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 包/安装程序由一段初始化网页和一堆显示网页内容所需的资产的本地代码组成。
- en: This setup of showing a web page inside the mobile app container that consists
    of our application business logic is called a Hybrid App.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动应用程序容器内显示网页的这种设置，其中包含我们的应用程序业务逻辑，被称为混合应用。
- en: What is Apache Cordova?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Cordova是什么？
- en: 'In simple terms, Cordova is the piece of software that stitches the web application
    and the native application together. The Apache Cordova website states that:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，Cordova是将Web应用程序和本地应用程序拼接在一起的软件。Apache Cordova的网站表示：
- en: '"Apache Cordova is a platform for building native mobile apps using HTML, CSS
    and JavaScript."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “Apache Cordova是使用HTML、CSS和JavaScript构建本地移动应用程序的平台。”
- en: Apache Cordova does not just stitch the web app with the native app--but it
    also provides a set of APIs written in JavaScript to interact with the native
    features of the device. Yes, we can use JavaScript to access our camera, take
    a picture, and send it in an e-mail. Sounds exciting, right?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Cordova不仅仅是将Web应用程序与本地应用程序拼接在一起，而且还提供了一组用JavaScript编写的API，以与设备的本地功能进行交互。是的，我们可以使用JavaScript访问我们的相机，拍照并通过电子邮件发送。听起来很激动人心，对吧？
- en: 'To get a better understanding of what is happening, let''s take a look at the
    following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解发生了什么，让我们看一下以下的截图：
- en: '![](img/00018.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: As we can see, we have a WebView where the HTML/CSS/JS code gets executed. This
    code can be a simple standalone piece of user interface; at best we are making
    an AJAX request to get some data from a remote server. Or, this code can do much
    more, such as talk to the Bluetooth of the device and get the list of devices
    in the vicinity.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们有一个WebView，HTML/CSS/JS代码在其中执行。这段代码可以是一个简单的独立用户界面；在最好的情况下，我们正在通过AJAX请求从远程服务器获取一些数据。或者，这段代码可以做更多的事情，比如与设备的蓝牙通信并获取附近设备的列表。
- en: 'In the latter case, Cordova has a bunch of APIs that interface with the WebView
    using JavaScript and then talk to the device in its native language (for example,
    Java for Android), thus providing a bridge between Java and JavaScript in this
    scenario. For instance, if we would like to know more about the device, which
    is running our app, all we need to do is write the following code inside the JS
    file and launch the app:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在后一种情况下，Cordova有一堆API，用JavaScript与WebView进行接口，然后以其本地语言（例如，Android的Java）与设备进行通信，从而在这种情况下为Java和JavaScript提供了桥梁。例如，如果我们想了解正在运行我们的应用程序的设备更多信息，我们只需要在JS文件中编写以下代码并启动应用程序：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After installing the device plugin, we can also access the UUID, model, OS
    version, and the Cordova version of the device from inside the WebView using JavaScript
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 安装设备插件后，我们还可以使用JavaScript从WebView内部访问设备的UUID、型号、操作系统版本和Cordova版本，如下所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will deal more with Cordova plugins in [Chapter 6](part0097.html#2SG6I0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Native*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](part0097.html#2SG6I0-9757c8e51afd47e0a7a9ced32db749b8) *Ionic Native*中更多地处理Cordova插件。
- en: The preceding explanation was to give you an idea of how Mobile Hybrid apps
    are structured and how we can use device features from the WebView using JavaScript.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的解释是为了让你了解移动混合应用的结构以及我们如何使用JavaScript从WebView中使用设备功能。
- en: Cordova does not convert the HTML, CSS, and JS code to an OS-specific binary
    code. All it does is wrap the HTML, CSS, and JS code and execute it inside a WebView.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova不会将HTML、CSS和JS代码转换为特定于操作系统的二进制代码。它所做的只是包装HTML、CSS和JS代码，并在WebView内执行它。
- en: So you must have guessed by now that Ionic is the framework with which we build
    the HTML/CSS/JS code that runs in the WebView and talks with Cordova to access
    device-specific APIs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你现在一定已经猜到了，Ionic是我们用来构建在WebView中运行并与Cordova通信以访问设备特定API的HTML/CSS/JS代码的框架。
- en: What is Ionic 2?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 2是什么？
- en: Ionic 2 is a beautiful, open source, frontend SDK for developing Hybrid Mobile
    apps with HTML5\. Ionic provides mobile-optimized HTML, CSS, and JS components,
    as well as gestures and tools for building highly interactive apps.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 2是一个用于开发混合移动应用程序的美观的开源前端SDK，提供了移动优化的HTML、CSS和JS组件，以及用于构建高度交互式应用程序的手势和工具。
- en: Ionic 2 is performance efficient with its minimal DOM manipulation and hardware-accelerated
    transitions as compared to other frameworks in this league. Ionic uses Angular
    2 as its JavaScript framework.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架相比，Ionic 2通过最小化DOM操作和硬件加速的转换，具有高性能效率。Ionic使用Angular 2作为其JavaScript框架。
- en: With the power of Angular inside a framework like Ionic 2, the possibilities
    are unlimited (we can use any Angular component inside Ionic as long as it makes
    sense in a mobile app). Ionic 2 has a very good integration with Cordova's device
    API. This means that we can access device APIs using Ionic Native and integrate
    it with the beautiful user interface components of Ionic.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在像Ionic 2这样的框架中使用Angular的强大功能，可能性是无限的（只要在移动应用程序中有意义，我们可以在Ionic中使用任何Angular组件）。
    Ionic 2与Cordova的设备API集成非常好。这意味着我们可以使用Ionic Native访问设备API，并将其与Ionic的美观用户界面组件集成。
- en: Ionic has its own command-line interface (CLI) to scaffold, develop, and deploy
    Ionic apps. Before we start working with the Ionic CLI, we need to set up a few
    pieces of software.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic有自己的命令行界面（CLI）来搭建、开发和部署Ionic应用程序。在开始使用Ionic CLI之前，我们需要设置一些软件。
- en: Ionic 3
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 3
- en: The latest version of Ionic at the time of this book's release is 3\. I have
    put together another chapter named Ionic 3 (Chapter 11), to which you can refer
    to know more about Ionic 3 and its changes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书发布时，Ionic的最新版本是3。我已经准备了另一章名为Ionic 3（第11章），您可以参考了解更多关于Ionic 3及其变化的信息。
- en: Also, please note that the examples in this book are still valid when working
    with Ionic 3 as well. There may be few syntactic and structural changes, but the
    overall gist should ideally remain the same.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，本书中的示例在使用Ionic 3时仍然有效。可能会有一些语法和结构上的变化，但总体意思应该保持不变。
- en: Software setup
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件设置
- en: Now we are going to set up all the required software needed to develop and run
    an Ionic app smoothly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将设置所有开发和运行Ionic应用程序所需的必要软件。
- en: Installing Node.js
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: 'Since Ionic uses Node.js for its CLI as well as for the build tasks, we will
    first install it as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ionic使用Node.js作为其CLI以及构建任务，我们将首先安装它如下：
- en: Navigate to [https://nodejs.org/](https://nodejs.org/).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://nodejs.org/](https://nodejs.org/)。
- en: Click on the Install button on the homepage and an installer for our OS will
    automatically be downloaded. We can also navigate to [https://nodejs.org/download/](https://nodejs.org/download/)
    and download a specific copy.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 单击主页上的安装按钮，将自动下载适用于我们操作系统的安装程序。我们也可以导航到[https://nodejs.org/download/](https://nodejs.org/download/)并下载特定的副本。
- en: Install Node.js by executing the downloaded installer.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行下载的安装程序安装Node.js。
- en: 'To verify that Node.js has been successfully installed, open a new Terminal
    (`*nix` systems) or Command Prompt (Windows systems) and run the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证Node.js是否已成功安装，请打开新的终端（*nix系统）或命令提示符（Windows系统）并运行以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now execute the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在执行以下命令：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`npm` is a **Node Package Manager** that we will be using to download various
    dependencies for our Ionic project.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`是一个**Node Package Manager**，我们将使用它来下载我们Ionic项目的各种依赖项。'
- en: We need Node.js only during the development. The version specified is only for
    illustration. You may have the same version or the latest version of the software.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在开发过程中使用Node.js。指定的版本仅用于说明。您可能有相同版本或软件的最新版本。
- en: Installing Git
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Git
- en: Git is a free and open source distributed version control system designed to
    handle everything from small to very large projects with speed and efficiency.
    In our case, we will be using a package manager named Bower, which uses Git to
    download the required libraries. Also, the Ionic CLI uses Git to download the
    project templates.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个免费的开源分布式版本控制系统，旨在处理从小型到非常大型的项目，并具有速度和效率。在我们的情况下，我们将使用一个名为Bower的包管理器，它使用Git来下载所需的库。此外，Ionic
    CLI使用Git来下载项目模板。
- en: 'To install Git, navigate to [http://git-scm.com/downloads](http://git-scm.com/downloads)
    and download the installer for your platform. Once you have successfully installed
    it, we can navigate to the command prompt/terminal and run the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Git，请导航到[http://git-scm.com/downloads](http://git-scm.com/downloads)并下载适用于您平台的安装程序。安装成功后，我们可以导航到命令提示符/终端并运行以下命令：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We should see the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Text editors
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: This is a totally optional installation. Everyone has their own preferred text
    editor. After running around many text editors, I fell in love with Sublime Text,
    purely for its simplicity and the number of Plug and Play packages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完全可选的安装。每个人都有自己喜欢的文本编辑器。在尝试了许多文本编辑器之后，我纯粹因为其简单性和插拔包的数量而爱上了Sublime Text。
- en: If you would like to give this editor a try, you can navigate to [http://www.sublimetext.com/3](http://www.sublimetext.com/3)
    to download Sublime Text 3.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试这个编辑器，可以导航到[http://www.sublimetext.com/3](http://www.sublimetext.com/3)下载Sublime
    Text 3。
- en: Since we will be writing our JavaScript code in TypeScript, Microsoft's Visual
    Studio Code is another good option.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将用TypeScript编写JavaScript代码，Microsoft的Visual Studio Code是另一个不错的选择。
- en: If you would like to give this editor a try, you can navigate to [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试这个编辑器，可以导航到[https://code.visualstudio.com/](https://code.visualstudio.com/)。
- en: You can also check out Atom as another alternative.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以尝试Atom作为另一种选择。
- en: If you would like to give this editor a try, you can navigate to [https://atom.io/](https://atom.io/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试这个编辑器，可以导航到[https://atom.io/](https://atom.io/)。
- en: Installing TypeScript
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装TypeScript
- en: 'Next, we will be installing the TypeScript compiler. As mentioned in Chapter
    1, *Angular - A Primer*, we will be using TypeScript to write the JavaScript code.
    To install the TypeScript compiler, run the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装TypeScript编译器。如第1章“Angular - A Primer”中所述，我们将使用TypeScript编写JavaScript代码。要安装TypeScript编译器，请运行以下命令：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once TypeScript is successfully installed, we can verify it by running this
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦TypeScript成功安装，我们可以通过运行此命令来验证：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The latest version of TypeScript at the time of release of Ionic 3 is 2.2.2\.
    You may need to update the version of TSC to 2.2.2 or higher when working with
    Ionic 3.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ionic 3发布时，TypeScript的最新版本是2.2.2。在使用Ionic 3时，您可能需要将TSC的版本更新为2.2.2或更高版本。
- en: Installing Cordova and Ionic CLI
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Cordova和Ionic CLI
- en: Finally, to complete the Ionic 2 setup, we will install the Ionic and Cordova
    CLI. Ionic CLI is a wrapper around the Cordova CLI with some additional features.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了完成Ionic 2的设置，我们将安装Ionic和Cordova CLI。Ionic CLI是Cordova CLI的包装器，具有一些附加功能。
- en: All the code examples in this book use Cordova version 6.4.0, Ionic CLI version
    2.1.14, and Ionic version 2.1.17. But the same should work with latest version
    of Ionic as well.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有代码示例使用Cordova版本6.4.0，Ionic CLI版本2.1.14和Ionic版本2.1.17。但是最新版本的Ionic也应该可以使用相同的代码。
- en: 'To install the Ionic CLI, run the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Ionic CLI，请运行以下命令：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To verify the install, run the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证安装，请运行以下命令：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also run this command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以运行此命令：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can run the following command to get the complete information regarding
    the Ionic setup:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行以下命令获取有关Ionic设置的完整信息：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you see an Ionic CLI version greater than or equal to 2.2.2, you have an
    Ionic CLI that can work with Ionic 3 apps. Nonetheless, the commands and examples
    in this book will work the same way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到的Ionic CLI版本大于或等于2.2.2，则您有一个可以处理Ionic 3应用程序的Ionic CLI。尽管如此，本书中的命令和示例将以相同的方式工作。
- en: 'To get a feel of what Ionic CLI is packed with, run the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Ionic CLI包含的功能，运行以下命令：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We should see a list of tasks, as seen in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到一系列任务，如下截图所示：
- en: '![](img/00019.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: There are a few more tasks apart from the ones seen in the preceding screenshot.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在上述截图中看到的任务之外，还有一些其他任务。
- en: We can read through the tasks and explanations to get an idea about what they
    do. Also, note that some of the tasks are still in beta, as of today.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以阅读任务和解释，了解它们的作用。还要注意，截至今天，其中一些任务仍处于测试阶段。
- en: With this, we have completed the installation of all the software needed to
    develop apps using Ionic.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了使用Ionic开发应用所需的所有软件的安装。
- en: The platform guide
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台指南
- en: By the end of this book, we will be building apps that are ready to be deployed
    on the device. Since Cordova takes HTML, CSS, and JS code as input and generates
    a platform-specific installer, we need to have the build environments available
    on our machine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书结束时，我们将构建可以部署到设备上的应用程序。由于Cordova接受HTML、CSS和JS代码作为输入并生成特定于平台的安装程序，我们需要在我们的机器上有构建环境。
- en: Android users can follow the instructions in the Android Platform Guide at [http://cordova.apache.org/docs/en/edge/guide_platforms_andr](http://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html#Android%2520Platform%2520Guide)[oid_index.md.html#Android%20Platform%20Guide](http://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html#Android%2520Platform%2520Guide)
    to set up SDK on your local machine.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Android用户可以按照Android平台指南中的说明在本地机器上设置SDK：[http://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html#Android%2520Platform%2520Guide](http://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html#Android%2520Platform%2520Guide)。
- en: iOS users can follow the instructions in the iOS Platform Guide at [http://cordova.apache.org/docs/en/edge/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide](http://cordova.apache.org/docs/en/edge/guide_platforms_ios_index.md.html#iOS%2520Platform%2520Guide)
    to set up SDK on your local machine.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: iOS用户可以按照iOS平台指南中的说明在本地机器上设置SDK：[http://cordova.apache.org/docs/en/edge/guide_platforms_ios_index.md.html#iOS%20Platform%20Guide](http://cordova.apache.org/docs/en/edge/guide_platforms_ios_index.md.html#iOS%2520Platform%2520Guide)。
- en: You would need an macOS environment to develop iOS apps.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要macOS环境来开发iOS应用程序。
- en: As of today, Ionic supports only Android 4.0+ (although it works on 2.3 as well)
    and iOS 6+ mobile platforms. But Cordova supports a few more.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 截至今天，Ionic仅支持Android 4.0+（尽管在2.3上也可以工作）和iOS 6+移动平台。但Cordova支持更多平台。
- en: 'You can check out the other supported platforms at: [http://cordova.apache.org/docs/en/edge/guide_platforms_index.md.html#Platform%20Guides](http://cordova.apache.org/docs/en/edge/guide_platforms_index.md.html#Platform%2520Guides).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址查看其他支持的平台：[http://cordova.apache.org/docs/en/edge/guide_platforms_index.md.html#Platform%20Guides](http://cordova.apache.org/docs/en/edge/guide_platforms_index.md.html#Platform%2520Guides)。
- en: Hello Ionic
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好Ionic
- en: Now that we are done with the software setup, we will scaffold a few Ionic apps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了软件设置，我们将创建一些Ionic应用程序的脚手架。
- en: 'Ionic has three main/go-to templates, using which we can quickly start developing
    apps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic有三个主要/常用模板，我们可以使用这些模板快速开始开发应用程序：
- en: 'Blank: This is a blank Ionic project with one page'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空白：这是一个空白的Ionic项目，有一个页面
- en: 'Tabs: This is a sample app that is built using Ionic tabs'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项卡：这是一个使用Ionic选项卡构建的示例应用程序
- en: 'Side menu: This is a sample app that is built to consume side menu driven navigation'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边菜单：这是一个使用侧边菜单驱动导航的示例应用程序
- en: To understand the basics of scaffolding, we will start with the blank template.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解脚手架的基础知识，我们将从空白模板开始。
- en: To keep our learning process clean, we will create a folder structure to work
    with Ionic projects. Create a folder named `chapter2`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持我们的学习过程清晰，我们将创建一个文件夹结构来处理Ionic项目。创建一个名为`chapter2`的文件夹。
- en: 'Next, open a new command prompt/terminal and change the directory (`cd`) to
    the `chapter2` folder. Now run the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开一个新的命令提示符/终端，并将目录（`cd`）更改为`chapter2`文件夹。现在运行以下命令：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command has the following features:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令具有以下功能：
- en: '`-a "Example 1"`: This is the human-readable name of the app.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a "Example 1"`：这是应用程序的可读名称。'
- en: '`-i app.example.one`: This is the app ID/reverse domain name.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i app.example.one`：这是应用程序ID/反向域名。'
- en: '`example1`: This is the name of the folder.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`example1`：这是文件夹的名称。'
- en: '`blank`: This is the name of the template.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blank`：这是模板的名称。'
- en: '`--v2`: This flag indicates that the project will be scaffolded with the latest
    version of Ionic. This may be removed in the future.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--v2`：此标志表示项目将使用最新版本的Ionic进行脚手架。这可能会在将来被移除。'
- en: Refer to the [Appendix](part0179.html#5AMKM0-9757c8e51afd47e0a7a9ced32db749b8),
    Additional Topics, and Tips, to know more about the Ionic start task.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[附录](part0179.html#5AMKM0-9757c8e51afd47e0a7a9ced32db749b8)，附加主题和提示，了解更多关于Ionic
    start 任务的信息。
- en: Ionic CLI is very verbose when it comes to performing tasks. As we can see from
    the command prompt/terminal, while the project is being created, a lot of information
    is printed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic CLI 在执行任务时非常冗长。正如我们从命令提示符/终端中所看到的，项目正在创建时会打印出大量信息。
- en: To start off, `ionic2-app-base` is downloaded from the `ionic2-app-base` GitHub
    repository, [https://github.com/driftyco/ionic2-app-base](https://github.com/driftyco/ionic2-app-base).
    After that, `ionic2-starter-blank` is downloaded from the `ionic-starter-blank`
    GitHub repository at [https://github.com/driftyco/ionic2-starter-blank](https://github.com/driftyco/ionic2-starter-blank). Then
    all the required dependencies are installed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从`ionic2-app-base` GitHub存储库[https://github.com/driftyco/ionic2-app-base](https://github.com/driftyco/ionic2-app-base)下载`ionic2-app-base`。之后，从`ionic-starter-blank`
    GitHub存储库[https://github.com/driftyco/ionic2-starter-blank](https://github.com/driftyco/ionic2-starter-blank)下载`ionic2-starter-blank`。然后安装所有必需的依赖项。
- en: 'Once the project has been successfully created, we will see a bunch of instructions
    on how to proceed further. Our output should look something like the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目成功创建，我们将看到一堆关于如何进一步进行的说明。我们的输出应该看起来类似以下内容：
- en: '![](img/00020.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00020.jpeg)
- en: To proceed further, we will use the `cd` command to navigate to the `example1`
    folder. We will not follow the instructions provided in the command prompt/terminal,
    as we are yet to understand the project setup. Once we have a fair idea of Ionic,
    we can start using the commands from the command prompt/terminal output after
    we have scaffold, a new Ionic app.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步进行，我们将使用`cd`命令导航到`example1`文件夹。我们不会按照命令提示符/终端中提供的说明进行，因为我们还没有理解项目设置。一旦我们对Ionic有一个大致的了解，我们可以在脚手架一个新的Ionic应用程序后，开始使用命令提示符/终端输出中提供的命令。
- en: 'Once we have changed the directory to the `example1` folder, we will serve
    the app by giving the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们已经切换到`example1`文件夹，我们将通过以下命令提供应用程序：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will start a new `dev` server on port `8100`, and will then launch the
    app in our default browser. I highly recommend setting Google Chrome or Mozilla
    Firefox as your default browser while working with Ionic.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在端口`8100`上启动一个新的`dev`服务器，然后在我们的默认浏览器中启动应用程序。我强烈建议在使用Ionic时将Google Chrome或Mozilla
    Firefox设置为默认浏览器。
- en: When the browser launches, we should see the blank template's home page.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器启动时，我们应该看到空模板的主页。
- en: If we run `ionic serve` and port `8100` is already taken, Ionic will launch
    the app on `8101`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行`ionic serve`并且端口`8100`已被占用，Ionic将在`8101`上启动应用程序。
- en: 'We can also serve the Ionic app on any other port using the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令在任何其他端口上提供Ionic应用程序：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the application is successfully launched and we have seen the output in
    the browser, we will navigate back to the command prompt/terminal and we should
    see something like the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序成功启动并且我们在浏览器中看到输出，我们将返回到命令提示符/终端，应该会看到类似以下截图的内容：
- en: '![](img/00021.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00021.jpeg)
- en: The browser developer tools setup
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器开发者工具设置
- en: Before we proceed further, I would recommend setting up the developer tools
    in your browser in the following format.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步进行之前，我建议按照以下格式在浏览器中设置开发者工具。
- en: Google Chrome
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Chrome
- en: 'Once the Ionic app is launched, open the developer tools by pressing *Command*
    + *Option* + *I* on Mac and *Ctrl* + *Shift* + *I* on Windows/Linux. Then click
    on the last but one icon in the top row, next to the close button, as seen in
    the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Ionic应用程序启动，按下Mac上的*Command* + *Option* + *I*，或者在Windows/Linux上按下*Ctrl* +
    *Shift* + *I*，打开开发者工具。然后点击顶部行中倒数第二个图标，靠近关闭按钮，如下截图所示：
- en: '![](img/00022.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00022.jpeg)
- en: This will dock developer tools to the side of the current page. Drag the demarcation
    line between the browser and the developer tools until the view starts to resemble
    that of a mobile.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把开发者工具停靠在当前页面的一侧。拖动浏览器和开发者工具之间的分界线，直到视图开始类似于移动设备。
- en: 'If you click on the Elements tab in the developer tools, you can easily inspect
    the page and see the output in one go, as shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在开发者工具中点击“元素”选项卡，您可以轻松地检查页面并一次看到输出，如下截图所示：
- en: '![](img/00023.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00023.jpeg)
- en: This view is very helpful for fixing errors and debugging issues.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图对于修复错误和调试问题非常有帮助。
- en: Mozilla Firefox
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mozilla Firefox
- en: 'If you are a Mozilla Firefox fan, we can achieve the preceding result using
    Firefox as well. Once the Ionic app is launched, open developer tools (not Firebug,
    Firefox''s native development tools) by pressing *Command* + *Option* + *I* on
    Mac and *Ctrl* + *Shift* + *I* on Windows/Linux. Then click on the dock to the
    side of the browser window icon, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Mozilla Firefox的粉丝，我们也可以使用Firefox来实现前面的结果。一旦Ionic应用程序启动，按下Mac上的*Command*
    + *Option* + *I*，或者在Windows/Linux上按下*Ctrl* + *Shift* + *I*，打开开发者工具（不是Firebug，Firefox的本机开发工具）。然后点击浏览器窗口旁边的停靠图标，如下截图所示：
- en: '![](img/00024.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00024.jpeg)
- en: 'Now we can drag the demarcation line to achieve the same result as that we
    saw in Chrome:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以拖动分界线，以实现与Chrome中看到的相同结果：
- en: '![](img/00025.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00025.jpeg)
- en: The Ionic project structure
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 项目结构
- en: So far, we have scaffolded a blank Ionic app and launched it in a browser. Now,
    we will walk through the scaffolded project structure.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经搭建了一个空白的Ionic应用程序并在浏览器中启动了它。现在，我们将浏览搭建好的项目结构。
- en: 'If we open the `chapter2 example1` folder in our text editor, we should see
    the following folder structure at the root of the project:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在文本编辑器中打开`chapter2 example1`文件夹，我们应该在项目的根目录看到以下文件夹结构：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is a quick explanation of each of the items:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每个项目的快速解释：
- en: '`src`: This is the folder where all the development happens. The app source
    code will be placed here. If you are coming from Ionic 1 to Ionic 2, this is the
    first change you would notice. For me, this is a very good upgrade to the folder
    structure, as it keeps the development code separate from the deployment code.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这是所有开发发生的文件夹。应用程序源代码将放在这里。如果您从Ionic 1转到Ionic 2，这是您会注意到的第一个变化。对我来说，这是文件夹结构的一个很好的升级，因为它将开发代码与部署代码分开。'
- en: '`hooks`: This folder consists of scripts that get executed when a particular
    Cordova task is performed. A Cordova task can be any of the following: `after_platform_add`
    (after a new platform is added), `after_plugin_add` (after a new plugin is added),
    `before_emulate` (before emulation begins), `after_run` (before the app is run),
    and so on. Each task is placed inside a folder named after the Cordova task.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hooks`：这个文件夹包含了在执行特定的Cordova任务时执行的脚本。Cordova任务可以是以下任何一种：`after_platform_add`（添加新平台后）、`after_plugin_add`（添加新插件后）、`before_emulate`（模拟开始前）、`after_run`（应用程序运行前）等。每个任务都放在以Cordova任务命名的文件夹内。'
- en: '`resources`: This folder consists of the various versions of the application
    icon and splash screen based on the mobile operating system.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`：这个文件夹包含了基于移动操作系统的应用程序图标和启动画面的各种版本。'
- en: '`www`: This folder consists of the build Ionic code, written inside the `src`
    folder. All the code present inside this folder is intended to land inside the
    WebView.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www`：这个文件夹包含了在`src`文件夹中编写的构建Ionic代码。这个文件夹中的所有代码都打算放在WebView中。'
- en: '`config.xml`: This file consists of all the meta information needed by Cordova
    while converting our Ionic app to a platform-specific installer. If you open `config.xml`,
    you will see a bunch of XML tags that describe our project. We will take a look
    at this file in detail again.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.xml`：这个文件包含了Cordova在将我们的Ionic应用程序转换为特定于平台的安装程序时所需的所有元信息。如果您打开`config.xml`，您将看到一堆描述我们项目的XML标签。我们将再次详细查看这个文件。'
- en: '`ionic.config.js`: This file consists of the configuration that is needed for
    the build task.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ionic.config.js`：这个文件包含了构建任务所需的配置。'
- en: '`package.json`: This file consists of the project-level node dependencies.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：这个文件包含了项目级别的node依赖项。'
- en: '`tsconfig.json`: This file consists of the TypeScript configuration.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.json`：这个文件包含了TypeScript的配置。'
- en: '`tslint.json`: This file consists of TS lint rules. To know more about these
    rules, refer to: [https://palantir.github.io/tslint/rules/](https://palantir.github.io/tslint/rules/).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tslint.json`：这个文件包含了TS lint规则。要了解更多关于这些规则的信息，请参考：[https://palantir.github.io/tslint/rules/](https://palantir.github.io/tslint/rules/)。'
- en: The config.xml file
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: config.xml文件
- en: The `config.xml` file is a platform-agnostic configuration file. As mentioned
    earlier, this file consists of all the information needed by Cordova to convert
    the code in the `www` folder to the platform-specific installer.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`config.xml`文件是一个与平台无关的配置文件。如前所述，这个文件包含了Cordova在将`www`文件夹中的代码转换为特定于平台的安装程序时所需的所有信息。'
- en: The setting up of the `config.xml` file is based on W3C's packaged web apps
    (widgets) specification ([http://www.w3.org/TR/widgets/](http://www.w3.org/TR/widgets/)),
    and it is extended to specify core Cordova API features, plugins, and platform-specific
    settings. There are two types of configurations that we can add to this file.
    One is global, that is, common to all devices, and the other is specific to the
    platform.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`config.xml`文件的设置基于W3C的打包Web应用程序（小部件）规范（[http://www.w3.org/TR/widgets/](http://www.w3.org/TR/widgets/)），并扩展为指定核心Cordova
    API功能、插件和特定于平台的设置。我们可以向该文件添加两种类型的配置。一种是全局的，即对所有设备通用，另一种是特定于平台的。'
- en: 'If we open `config.xml`, the first tag we encounter is the XML root tag. Next,
    we can see the widget tag:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开`config.xml`，我们会遇到的第一个标签是XML根标签。接下来，我们可以看到widget标签：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `id` specified previously is the reverse domain name of our app, which we
    provided while scaffolding. Other specifications are defined inside the widget
    tag as its children. The children tags include the app name (which gets displayed
    below the app icon when installed on the device), app description, and author
    details.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 之前指定的`id`是我们应用程序的反向域名，我们在脚手架时提供的。其他规范是在widget标签内定义的其子级。子级标签包括应用程序名称（在设备上安装时显示在应用程序图标下方）、应用程序描述和作者详细信息。
- en: It also consists of the configuration that needs to be adhered to while converting
    code in the `src` folder to a native installer.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含了在将`src`文件夹中的代码转换为本机安装程序时需要遵守的配置。
- en: The content tag defines the starting page of the application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 内容标签定义了应用程序的起始页面。
- en: The access tag defines the URLs that are allowed to load in the app. By default,
    it loads all the URLs.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 访问标签定义了应用程序中允许加载的URL。默认情况下，它会加载所有的URL。
- en: The preference tag sets the various options as name value pairs. For instance,
    `DisallowOverscroll` describes weather there should be any visual feedback when
    the user scrolls past the beginning or end of the document.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: preference标签设置了各种选项的名称值对。例如，`DisallowOverscroll`描述了当用户滚动文档的开头或结尾时是否应该有任何视觉反馈。
- en: 'You can read more about platform-specific configurations at the following links:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中阅读有关特定于平台的配置的更多信息：
- en: 'Android: [http://docs.phonegap.com/en/edge/guide_platforms_android_config.md.html#Android%20Configuration](http://docs.phonegap.com/en/4.0.0edge/guide_platforms_android_config.md.html#Android%2520Configuration)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android：[http://docs.phonegap.com/en/edge/guide_platforms_android_config.md.html#Android%20Configuration](http://docs.phonegap.com/en/4.0.0edge/guide_platforms_android_config.md.html#Android%2520Configuration)
- en: 'iOS: [http://docs.phonegap.com/en/edge/guide_platforms_ios_config.md.html#iOS%20Configuration](http://docs.phonegap.com/en/4.0.0edge/guide_platforms_ios_config.md.html#iOS%2520Configuration)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS：[http://docs.phonegap.com/en/edge/guide_platforms_ios_config.md.html#iOS%20Configuration](http://docs.phonegap.com/en/4.0.0edge/guide_platforms_ios_config.md.html#iOS%2520Configuration)
- en: The importance of platform-specific configurations and global configurations
    is the same. You can read more about global configuration at [http://docs.phonegap.com/en/edge/config_ref_index.md.html#The%20config.xml%20File](http://docs.phonegap.com/en/4.0.0edge/config_ref_index.md.html#The%2520config.xml%2520File).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 平台特定配置和全局配置的重要性是一样的。您可以在[http://docs.phonegap.com/en/edge/config_ref_index.md.html#The%20config.xml%20File](http://docs.phonegap.com/en/4.0.0edge/config_ref_index.md.html#The%2520config.xml%2520File)了解更多关于全局配置的信息。
- en: The src folder
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: src文件夹
- en: 'As mentioned earlier, this folder consists of our Ionic app, the HTML, CSS,
    and JS codes. If we open the `src` folder, we will find the following file structure:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，该文件夹包括我们的Ionic应用程序，HTML、CSS和JS代码。如果我们打开`src`文件夹，我们将找到以下文件结构：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s look at each of these in detail:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每一个：
- en: '`app folder`: The app folder consists of the environment specific initializing
    files. This folder consists of `app.module.ts` where the `@NgModule` module is
    defined. `app.component.ts` consists of the root component.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app文件夹`：app文件夹包括特定环境的初始化文件。该文件夹包括`app.module.ts`，其中定义了`@NgModule`模块。`app.component.ts`包括根组件。'
- en: '`assets folder`: This folder consists of all the static assets.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets文件夹`：该文件夹包括所有静态资产。'
- en: '`pages folder:` This folder consists of the pages that we are going to create.
    In this example, we already have a sample page named `home`. Each page is a component,
    which consist of the business logic - `home.ts`, the markup - `home.html` and
    the component related styles - `home.scss`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pages文件夹`：该文件夹包括我们将要创建的页面。在这个例子中，我们已经有一个名为`home`的示例页面。每个页面都是一个组件，其中包括业务逻辑-`home.ts`，标记-`home.html`和与组件相关的样式-`home.scss`。'
- en: '`theme folder`: This folder consists of `variables.scss`, overriding which
    will change the look and feel of the Ionic components.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme文件夹`：该文件夹包括`variables.scss`，覆盖它将改变Ionic组件的外观和感觉。'
- en: '`index.html`: This is where everything starts from.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：这是一切的起点。'
- en: This completes our tour of the blank template. Before we scaffold the next template,
    let us take a quick peek at the `src/app/app.component.ts` file.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对空白模板的介绍。在我们搭建下一个模板之前，让我们快速查看一下`src/app/app.component.ts`文件。
- en: As you can see, we are creating a new app/root component. The `@Component` decorator
    needs a `template` or `templateUrl` property to correctly load the Ionic 2 application.
    As part of the template, we add the `ion-nav` component.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在创建一个新的应用/根组件。`@Component`装饰器需要一个`template`或`templateUrl`属性来正确加载Ionic
    2应用程序。作为模板的一部分，我们添加了`ion-nav`组件。
- en: Inside the class definition, we have declared a `rootPage` and assigned it to
    the home page, and inside the constructor, we have the platform ready callback,
    which will be called when the platform is ready.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在类定义内部，我们声明了一个`rootPage`并将其分配给主页，并在构造函数内部，我们有平台准备好的回调，当平台准备就绪时将调用它。
- en: This is a very simple and basic Ionic app. So far you must have worked on Angular
    code related to the web. But when you are dealing with Ionic, you would be working
    with scripts related to device features as well. Ionic provides us services to
    make these things happen in a more organized fashion.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单和基本的Ionic应用程序。到目前为止，您一定已经在与Web相关的Angular代码上工作过。但是当您处理Ionic时，您将与与设备功能相关的脚本一起工作。Ionic为我们提供了服务，以更有条理地实现这些功能。
- en: Scaffolding the tabs template
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建选项卡模板
- en: To get a good feel for the Ionic CLI and the project structure, we will scaffold
    the other two starter templates as well. First we will scaffold the tabs template.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解Ionic CLI和项目结构，我们还将搭建其他两个起始模板。首先我们将搭建选项卡模板。
- en: 'Using the `cd` command, go back to the `chapter2` folder and run the following
    command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cd`命令，返回到`chapter2`文件夹并运行以下命令：
- en: '[PRE19]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The tabs project is scaffolded inside the `example2` folder. Using the `cd`
    command, go to the `example2` folder and execute the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡项目被搭建在`example2`文件夹内。使用`cd`命令，进入`example2`文件夹并执行以下命令：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We should see the tabbed interface app built using Ionic, as seen in the following
    screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到使用Ionic构建的选项卡界面应用程序，如下面的屏幕截图所示：
- en: '![](img/00026.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.jpeg)'
- en: The tabs are located at the bottom of the page. We will talk more about customizations
    in [Chapter 3](part0064.html#1T1400-9757c8e51afd47e0a7a9ced32db749b8), *Ionic
    Components and Navigation*, and [Chapter 4](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Decorators and Services*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡位于页面底部。我们将在[第3章](part0064.html#1T1400-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic组件和导航*，以及[第4章](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic装饰器和服务*中更多地讨论自定义。
- en: If you go back to the `example2` folder and analyze the project structure, everything
    would be the same except for the contents of the `src`/`pages` folder.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回到`example2`文件夹并分析项目结构，除了`src`/`pages`文件夹的内容外，其他都是一样的。
- en: This time, you will see four folders in the pages folder. The tabs folder consists
    of the tabs definition and the about, contact, and home folders consist of the
    definition for each of the tabs.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，在pages文件夹中您将看到四个文件夹。tabs文件夹包括选项卡定义，about、contact和home文件夹包括每个选项卡的定义。
- en: Now you can get a good idea of how Ionic is integrated with Angular, and how
    all the components go hand-in-hand. When we deal with a few more pieces of Ionic,
    this structure will make a lot more sense.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以很好地了解Ionic是如何与Angular集成的，以及所有组件是如何相辅相成的。当我们处理更多Ionic的部分时，这种结构将更加有意义。
- en: Scaffolding the side menu template
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建侧边菜单模板
- en: 'Now we will scaffold the final template. Using the `cd` command, go back to
    the `chapter2` folder and run the following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将搭建最终的模板。使用`cd`命令，返回到`chapter2`文件夹并运行以下命令：
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To execute the scaffolded project, using the `cd` command, go to the `example3`
    folder and give the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 执行脚手架项目，使用`cd`命令，进入`example3`文件夹并输入以下命令：
- en: '[PRE22]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output should be similar to the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下截图：
- en: '![](img/00027.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: You can analyze the project structure yourself and see the difference.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自行分析项目结构并查看区别。
- en: You can run `ionic start -l` or `ionic templates` to view the list of available
    templates. You can also use the `ionic start task` with the template name from
    the list to scaffold the app.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行`ionic start -l`或`ionic templates`来查看可用模板的列表。您还可以使用`ionic start task`和列表中的模板名称来搭建应用程序。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we gained some knowledge on Mobile Hybrid architecture. We
    have also learned how a hybrid app works. We saw how Cordova stitches the HTML,
    CSS, and JS code to be executed inside the WebView of a native app. Then we installed
    the required software to develop Ionic apps locally. We scaffolded a blank template
    using the Ionic CLI and analyzed the project structure. Later on, we scaffolded
    the other two templates and observed the difference.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了移动混合架构的一些知识。我们还学习了混合应用程序的工作原理。我们看到了Cordova如何将HTML、CSS和JS代码拼接在一起，以在本地应用程序的WebView中执行。然后我们安装了开发Ionic应用程序所需的软件。我们使用Ionic
    CLI搭建了一个空白模板并分析了项目结构。随后，我们搭建了另外两个模板并观察了它们之间的区别。
- en: You can also refer to Ionic slides at [http://ionicframework.com/present-ionic/slides](http://ionicframework.com/present-ionic/slides)
    for some more information.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以参考Ionic幻灯片[http://ionicframework.com/present-ionic/slides](http://ionicframework.com/present-ionic/slides)获取更多信息。
- en: In the next chapter, *Ionic Components and Navigation*, we will look at Ionic
    components and how to build a simple two page application and navigate between
    them. This will help us in building interesting user interfaces and multipage
    apps using the Ionic API.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节*Ionic组件和导航*中，我们将学习Ionic组件以及如何构建一个简单的两页应用程序并在它们之间进行导航。这将帮助我们使用Ionic API构建有趣的用户界面和多页面应用程序。
