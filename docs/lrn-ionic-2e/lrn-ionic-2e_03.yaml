- en: Ionic Components and Navigation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic组件和导航
- en: So far we have seen what Ionic is and where it fits in the big picture of Mobile
    Hybrid application development. We have also seen how to scaffold an Ionic app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了Ionic是什么，以及它在移动混合应用开发的大局中扮演的角色。我们还看到了如何搭建一个Ionic应用程序。
- en: In this chapter, we will work with Ionic components, the Ionic Grid system,
    and navigation in Ionic. We will look at the various components of Ionic, using
    which we can build apps that provide a great user experience out of the box
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Ionic组件、Ionic网格系统和Ionic中的导航。我们将查看Ionic的各种组件，使用这些组件可以构建提供出色用户体验的应用程序。
- en: 'We will be covering the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Ionic Grid system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic网格系统
- en: Ionic components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic组件
- en: Ionic navigation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic导航
- en: Core components
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心组件
- en: Ionic is a combination of a powerful mobile CSS framework and Angular. With
    Ionic, the time taken to market any idea is quite minimal. The Ionic CSS framework
    consists of most of the components you need to build an app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic是一个强大的移动CSS框架和Angular的结合。使用Ionic，将任何想法推向市场所需的时间非常短。Ionic CSS框架包含了构建应用程序所需的大多数组件。
- en: To test drive the available components, we will scaffold a blank starter template
    and then add the visual components of Ionic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试可用组件，我们将搭建一个空白的起始模板，然后添加Ionic的可视组件。
- en: Before we start scaffolding, we will create a new folder named `chapter3`, and
    scaffold all the examples from this chapter in that folder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始搭建之前，我们将创建一个名为`chapter3`的新文件夹，并在该文件夹中搭建本章的所有示例。
- en: 'To scaffold a blank app, run the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要搭建一个空白应用程序，请运行以下代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Ionic Grid system
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic网格系统
- en: To get fine-grained control of your layout, in terms of positioning the components
    on the page or aligning elements next to each other with consistency, you need
    a grid system and Ionic provides one.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要对布局进行精细控制，以便在页面上定位组件或以一致的方式将元素排列在一起，您需要一个网格系统，Ionic提供了这样一个系统。
- en: The beauty of the Ionic Grid system is that it is FlexBox-based. FlexBox--or
    the CSS Flexible Box Layout Module--provides a box model for an optimized user
    interface design.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic网格系统的美妙之处在于它是基于FlexBox的。FlexBox——或CSS柔性盒布局模块——为优化的用户界面设计提供了一个盒模型。
- en: 'You can read more about FlexBox at:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解更多关于FlexBox的信息：
- en: '[http://www.w3.org/TR/css3-flexBox/](http://www.w3.org/TR/css3-flexBox/)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/TR/css3-flexBox/](http://www.w3.org/TR/css3-flexBox/)'
- en: 'You can find an amazing tutorial about FlexBox at:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到有关FlexBox的精彩教程：
- en: '[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)'
- en: The advantage of a FlexBox-based grid system is that you need not have a fixed-column
    grid. You can define as many columns as you want inside a row and they will be
    automatically assigned with equal width. This way, unlike any other CSS-based
    grid systems, you need not worry about the sum of class names adding up to the
    total number of columns in the grid system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基于FlexBox的网格系统的优势在于，您不需要固定列网格。您可以在一行内定义尽可能多的列，并且它们将自动分配相等的宽度。这样，与任何其他基于CSS的网格系统不同，您不需要担心类名的总和是否等于网格系统中的总列数。
- en: 'To get a feel for the grid system, open the `home.html` file that is present
    inside the `example4/src/pages/home` folder. Delete all the content inside the
    `ion-content` directive and add the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解网格系统的工作原理，请打开`example4/src/pages/home`文件夹中的`home.html`文件。删除`ion-content`指令内的所有内容，并添加以下代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And, to visually see the difference, we add the following style in the `home.scss`
    present inside the `src/pages/home` folder:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了直观地看到区别，我们在`src/pages/home`文件夹中的`home.scss`中添加以下样式：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding style is not needed to use the grid system; it is merely to show
    the visual demarcation of each column in the layout.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述样式不是使用网格系统所必需的；它只是为了显示布局中每个列的视觉分隔。
- en: 'Save the `home.html` and `home.scss` files, and, using the `cd` command, go
    to the `example4` folder and run this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`home.html`和`home.scss`文件，并使用`cd`命令进入`example4`文件夹，然后运行以下命令：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then you should see the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该看到以下内容：
- en: '![](img/00028.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: 'To check whether the width varies automatically, we reduce the number of child
    divs to three, as shown here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查宽度是否会自动变化，我们将子div的数量减少到三个，如下所示：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then you should see the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该看到以下内容：
- en: '![](img/00029.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: No hassle, no counting; all you need to do is add the ion-col that you want
    to use, and they are automatically allocated with equal width.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无需麻烦，无需计算；您只需要添加要使用的ion-col，它们将自动分配相等的宽度。
- en: But this does mean that you cannot apply custom widths. You can do that easily
    with the width attribute provided by Ionic.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着您不能应用自定义宽度。您可以使用Ionic提供的宽度属性轻松实现这一点。
- en: 'For instance, let''s say that, in the preceding three columns scenario, you
    want the first column to span 50 percent and the remaining two columns to take
    the remaining width; all you need to do is add an attribute named `width-50` to
    the first `ion-col`, as shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设在前面的三列情况下，您希望第一列跨越50%，剩下的两列占据剩余的宽度；您只需要在第一个`ion-col`中添加一个名为`width-50`的属性，如下所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then you should see the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该看到以下内容：
- en: '![](img/00030.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: 'You can refer to the following table for a list of predefined width attributes
    and their implied widths:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下表格，了解预定义宽度属性及其隐含宽度的列表：
- en: '| **Attribute Name** | **Percentage Width** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **属性名称** | **百分比宽度** |'
- en: '| `width-10` | 10% |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `width-10` | 10% |'
- en: '| `width-20` | 20% |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `width-20` | 20% |'
- en: '| `width-25` | 25% |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `width-25` | 25% |'
- en: '| `width-33` | 33.333% |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `width-33` | 33.333% |'
- en: '| `width-34` | 33.333% |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `width-34` | 33.333% |'
- en: '| `width-50` | 50% |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `width-50` | 50% |'
- en: '| `width-66` | 66.666% |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `width-66` | 66.666% |'
- en: '| `width-67` | 66.666% |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `width-67` | 66.666% |'
- en: '| `width-75` | 75% |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `width-75` | 75% |'
- en: '| `width-80` | 80% |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `width-80` | 80% |'
- en: '| `width-90` | 90% |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `width-90` | 90% |'
- en: 'You can also offset a column by a certain percentage. For instance, append
    the following markup to our current example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过一定的百分比来偏移列。例如，将以下标记附加到我们当前的示例中：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then you should see the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该会看到以下内容：
- en: '![](img/00031.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: The first div is offset by 33 percent, and the remaining 66 percent will be
    split between the two divs. All the offset attribute does is add a margin of the
    specified percentage to the left of the div.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个div偏移了33%，剩下的66%将在两个div之间分配。偏移属性所做的就是在div的左侧添加指定百分比的边距。
- en: 'You can refer to the following table for a list of predefined classes and their
    implied offset width:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下表格，了解预定义类及其隐含的偏移宽度：
- en: '| **Attribute Name** | **Percentage Width** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **属性名称** | **百分比宽度** |'
- en: '| `offset-10` | 10% |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `offset-10` | 10% |'
- en: '| `offset -20` | 20% |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `offset -20` | 20% |'
- en: '| `offset -25` | 25% |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `offset -25` | 25% |'
- en: '| `offset -33` | 33.333% |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `offset -33` | 33.333% |'
- en: '| `offset -34` | 33.333% |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `offset -34` | 33.333% |'
- en: '| `offset -50` | 50% |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `offset -50` | 50% |'
- en: '| `offset -66` | 66.666% |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `offset -66` | 66.666% |'
- en: '| `offset -67` | 66.666% |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `offset -67` | 66.666% |'
- en: '| `offset -75` | 75% |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `offset -75` | 75% |'
- en: '| `offset -80` | 80% |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `offset -80` | 80% |'
- en: '| `offset -90` | 90% |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `offset -90` | 90% |'
- en: You can also align the columns in the grid vertically. This is another advantage
    of using FlexBox for a grid system.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以垂直对齐网格中的列。这是使用FlexBox网格系统的另一个优势。
- en: 'Add the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then you should see the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该会看到以下内容：
- en: '![](img/00032.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.jpeg)'
- en: If one of the columns is tall, you can either add top, center, or bottom attributes
    on the `ion-row` tag, and things will fall into place, as shown in the preceding
    figure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个列很高，你可以在`ion-row`标记上添加top、center或bottom属性，事情就会如前面的图所示的那样落实到位。
- en: With such a simple and powerful grid system, the layout possibilities are unlimited.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这样一个简单而强大的网格系统，布局可能是无限的。
- en: 'To know more about the Ionic Grid system, you can refer to the following link:
    [http://ionicframework.com/docs/components/#grid](http://ionicframework.com/docs/components/#grid)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Ionic网格系统的信息，你可以参考以下链接：[http://ionicframework.com/docs/components/#grid](http://ionicframework.com/docs/components/#grid)
- en: Ionic components
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic组件
- en: In this section, we are going to go over a few of the Ionic components. These
    components include buttons, lists, cards, and forms. Ionic components automatically
    adapt to the iOS theme, or Material Design for Android or Windows theme based
    on the device they are running on. When we are working with Ionic components,
    we will see the output in all three platforms.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些Ionic组件。这些组件包括按钮、列表、卡片和表单。Ionic组件会根据运行设备自动适应iOS主题，或者根据Android或Windows主题的Material
    Design。当我们使用Ionic组件时，我们将在所有三个平台上看到输出。
- en: 'To proceed further, we create a new project for working with buttons. You can
    `cd` into the `chapter3` folder and run the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步进行，我们为按钮创建一个新项目。你可以`cd`到`chapter3`文件夹，并运行以下命令：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we serve the app in lab mode. Use, `cd` command to navigate into the
    `example5` folder and run the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在实验室模式下为应用提供服务。使用`cd`命令导航到`example5`文件夹，并运行以下命令：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will serve the Ionic app in lab mode, which would look something like
    this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在实验室模式下为Ionic应用提供服务，看起来会像这样：
- en: '![](img/00033.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00033.jpeg)'
- en: With this view, we can see the output of all our components in all three platforms.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个视图，我们可以在所有三个平台上看到所有组件的输出。
- en: Buttons
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮
- en: Ionic provides different variations on the buttons, by size and style.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic提供了不同的按钮变化，包括大小和样式。
- en: 'Update the `ion-content` directive inside `src/pages/home/home.html` with the
    following code and we should see different button variations:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/pages/home/home.html`中更新`ion-content`指令，使用以下代码，我们应该会看到不同的按钮变化：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Do you notice the padding attribute on the `ion-content` directive? This will
    add `16px` padding to the `ion-content` directive. If you save the file, you should
    see this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到了`ion-content`指令上的填充属性吗？这将为`ion-content`指令添加`16px`的填充。如果你保存文件，你应该会看到这个：
- en: '![](img/00034.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00034.jpeg)'
- en: The preceding screenshot covers your entire button needs based on the default
    Ionic color swatch.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图涵盖了基于默认Ionic颜色样本的所有按钮需求。
- en: Also, do you notice how the look and feel of the button varies between iOS,
    Android, and Windows? We will talk more about customizing these components in
    [Chapter 5](part0089.html#2KS220-9757c8e51afd47e0a7a9ced32db749b8)*, Ionic and
    SCSS*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你是否注意到按钮的外观在iOS、Android和Windows之间有所不同？我们将在[第5章](part0089.html#2KS220-9757c8e51afd47e0a7a9ced32db749b8)*Ionic和SCSS*中更多地讨论如何自定义这些组件。
- en: 'For more information about the buttons components, refer to: [http://ionicframework.com/docs/api/components/button/Button](http://ionicframework.com/docs/api/components/button/Button)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有关按钮组件的更多信息，请参考：[http://ionicframework.com/docs/api/components/button/Button](http://ionicframework.com/docs/api/components/button/Button)
- en: Lists
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到以下内容：
- en: '![](img/00035.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: 'By adding an attribute called `no-lines` to the `ion-list` directive, the line
    will disappear. If you update the preceding snippet to the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`ion-list`指令添加一个名为`no-lines`的属性，线条将消失。如果你将前面的代码片段更新为以下内容：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should be able to see the following screen:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到以下屏幕：
- en: '![](img/00036.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: 'You can also group the list items together using the `ion-item-group`. The
    code for this is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`ion-item-group`将列表项分组在一起。其代码如下：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For this, `ion-list` will be replaced with `ion-item-group`, as shown in the
    preceding snippet. You should see the following screen:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，`ion-list`将被替换为`ion-item-group`，如前面的代码片段所示。你应该会看到以下屏幕：
- en: '![](img/00037.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: A new addition to the Ionic Lists is the sliding List. In this type of list,
    each item can be swiped to the left to reveal new options.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic列表的新添加是滑动列表。在这种类型的列表中，每个项目都可以向左滑动以显示新选项。
- en: 'The code snippet for this looks as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的片段如下所示：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding code looks as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出如下所示：
- en: '![](img/00038.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: 'For more information about the list component, you can refer to the following
    link: [http://ionicframework.com/docs/components/#lists](http://ionicframework.com/docs/components/#lists)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有关列表组件的更多信息，您可以参考以下链接：[http://ionicframework.com/docs/components/#lists](http://ionicframework.com/docs/components/#lists)
- en: Cards
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡片
- en: Cards are one of the best design patterns for showcasing content on a mobile
    device. For any page or app that displays a user's personalized content, cards
    are the way to go. The world is moving towards cards to display content on mobiles,
    and, in some cases, on desktops too. Examples include Twitter ([https://dev.twitter.com/cards/overview](https://dev.twitter.com/cards/overview))
    and Google Now.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片是在移动设备上展示内容的最佳设计模式之一。对于显示用户个性化内容的任何页面或应用程序，卡片都是最佳选择。世界正在向卡片展示内容的方式发展，包括在某些情况下也在桌面上。例如Twitter
    ([https://dev.twitter.com/cards/overview](https://dev.twitter.com/cards/overview))和Google
    Now。
- en: 'So, you can simply port that design pattern to your app as well. All you need
    to do is design the personalized content that fits into a card and place it inside
    an `ion-card` component:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您也可以将该设计模式简单地移植到您的应用程序中。您需要做的就是设计适合卡片的个性化内容，并将其放入`ion-card`组件中：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/00039.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: 'You can get creative with cards by adding images to the cards as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过向卡片添加图像来为卡片增添创意：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This would look as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这将如下所示：
- en: '![](img/00040.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: 'You can also use cards to display maps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用卡片来显示地图：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And you should be able to see the following screen:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到以下屏幕：
- en: '![](img/00041.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00041.jpeg)'
- en: With the power of `ion-card`, you can take your application to a new level!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`ion-card`的强大功能，您可以将应用程序提升到一个新水平！
- en: Ionic icons
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic图标
- en: 'Ionic has its own set of 700+ font icons. The simplest way to add an icon is
    as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic拥有自己的700多个字体图标。添加图标的最简单方法如下：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can find the name of the icon from here: [http://ionicons.com](http://ionicons.com).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从这里找到图标的名称：[http://ionicons.com](http://ionicons.com)。
- en: 'You can mark an icon as active or inactive using the `is-active` attribute.
    Active icons are typically full and thick, whereas inactive icons are outlined
    and thin:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`is-active`属性将图标标记为活动或非活动。活动图标通常是完整和粗的，而非活动图标是轮廓和细的：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Icons can also be made platform specific; the following snippet shows how:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图标也可以根据平台进行设置；以下片段显示了如何设置：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can also set the icon name programmatically, too, by first creating an
    attribute assigned to a variable and then populating that variable in the constructor.
    The HTML snippet would look as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过首先创建一个分配给变量的属性，然后在构造函数中填充该变量，以编程方式设置图标名称。HTML片段如下所示：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The TypeScript code (in `home.ts`) would look as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript代码（在`home.ts`中）如下所示：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The consolidated output for the preceding snippets would look as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 前面片段的整合输出如下：
- en: '![](img/00042.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: Modals
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模态框
- en: 'In this section, we will take a look at modals in Ionic and how to implement
    them. To work with this example, we scaffold a new project:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下Ionic中的模态框以及如何实现它们。要使用此示例，我们需要搭建一个新项目：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`cd` into `example6` folder and run `ionic serve --lab`, and you should see
    the homepage of blank template.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd`进入`example6`文件夹并运行`ionic serve --lab`，您应该看到空白模板的主页。'
- en: To work with modals, we need to first create a component that we want to display
    as a modal.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用模态框，我们需要首先创建一个要显示为模态框的组件。
- en: 'From inside the `example6` folder, run the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从`example6`文件夹内运行以下命令：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note: We will look at sub-generators at a later point in this chapter.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们将在本章的后面部分讨论子生成器。
- en: 'Note: If you are using the latest Ionic CLI, you will see a file named `hello-modal.module.ts`
    generated along with the `hello-modal.html`, `hello-modal.scss`, and `hello-modal.ts`.
    To know more about `hello-modal.module.ts`, refer to [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您使用的是最新的Ionic CLI，您将看到一个名为`hello-modal.module.ts`的文件与`hello-modal.html`、`hello-modal.scss`和`hello-modal.ts`一起生成。要了解有关`hello-modal.module.ts`的更多信息，请参考[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic
    3*。
- en: 'Once the component is generated, we need to add it to the `@NgModule`. Open
    `src/app/app.module.ts` and add the `import` statement:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 生成组件后，我们需要将其添加到`@NgModule`中。打开`src/app/app.module.ts`并添加`import`语句：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note: The scaffolded component may have a class name of `HelloModal` and not
    `HelloModalComponent`. If that is the case, please update accordingly.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：生成的组件可能具有`HelloModal`而不是`HelloModalComponent`的类名。如果是这种情况，请相应更新。
- en: 'Next, add `HelloModalComponent` to the declarations and `entryComponents` as
    follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`HelloModalComponent`添加到`declarations`和`entryComponents`中，如下所示：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now that it is done, we start configuring the component. Open `src/pages/home/home.ts`
    and update it as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经完成，我们开始配置组件。打开`src/pages/home/home.ts`并更新如下：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, for working with the `modal` component, we have a `ModalController`.
    Using `create()` of the `ModalController` instance, we can register a modal. Then,
    using `present()`, we display the modal.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，对于使用`modal`组件，我们有一个`ModalController`。使用`ModalController`实例的`create()`，我们可以注册一个模态框。然后，使用`present()`，我们显示模态框。
- en: 'Update `src/pages/home/home.html` to show a button. Clicking on which will
    present the modal:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`src/pages/home/home.html`以显示一个按钮。点击该按钮将呈现模态框：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we update the `HelloModalComponent`. Open `src/components/hello-modal/hello-modal.ts`
    and update it as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们更新`HelloModalComponent`。打开`src/components/hello-modal/hello-modal.ts`并更新如下：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, we are using the instance of `ViewController` to manage the popup. Finally,
    for the popup content, open `src/components/hello-modal/hello-modal.html` and
    update it as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`ViewController`的实例来管理弹出窗口。最后，对于弹出窗口的内容，打开`src/components/hello-modal/hello-modal.html`并更新如下：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: With this, we have added all the code needed. Save all the files and run `ionic
    serve -lab` to see the output.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经添加了所有需要的代码。保存所有文件并运行`ionic serve -lab`以查看输出。
- en: 'The output should look as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![](img/00043.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: Segment
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分段
- en: 'Segment is another new introduction to Ionic. This component is used to control
    radio selections. We will be scaffolding another application to work with this
    example. From inside the `chapter3` folder, run the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Segment是Ionic的另一个新功能。这个组件用于控制单选按钮的选择。我们将搭建另一个应用程序来使用这个示例。从`chapter3`文件夹内，运行以下命令：
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`cd` into `example7` folder and run `ionic serve --lab`, and you should see
    the home page of the blank template.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd`进入`example7`文件夹，运行`ionic serve --lab`，你应该会看到空模板的主页。'
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We initialize the food property as `pizza` in the `src/pages/home/home.ts`
    file as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`src/pages/home/home.ts`文件中将food属性初始化为`pizza`，如下所示：
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output should look as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![](img/00044.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: Ionic navigation
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic导航
- en: In this section, we are going to take a look at Ionic navigation. We are going
    to scaffold a blank template, and then add more pages and see how to navigate
    between them.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看Ionic导航。我们将搭建一个空模板，然后添加更多页面，看看如何在它们之间导航。
- en: Ionic 3 has introduced the `@IonicPage` decorator for simplified and improved
    navigation, centered around native mobile experience. Do check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3* for this.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 3引入了`@IonicPage`装饰器，用于简化和改进导航，围绕原生移动体验。请查看[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic
    3*。
- en: Basic navigation
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本导航
- en: 'To get started, we scaffold a new project. Run the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要搭建一个新项目。运行以下命令：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Run the Ionic app using the `ionic serve` command and you should see the home
    page of the blank template.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ionic serve`命令运行Ionic应用，你应该会看到空模板的主页。
- en: Navigation in Ionic does not require URLs; instead, pages are pushed and popped
    from the navigation controller's page stack. This approach is very much in line
    with how one would achieve navigation in a native mobile app, when compared to
    browser-based navigation. You can, however, deeplink pages with URLs, but that
    does not define the navigation.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic中的导航不需要URL；相反，页面是从导航控制器的页面堆栈中推送和弹出的。与基于浏览器的导航相比，这种方法非常符合在原生移动应用中实现导航的方式。但是，你可以使用URL进行页面深度链接，但这并不定义导航。
- en: 'To understand basic navigation, we open the `src/app/app.html` file and we
    should find the template as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解基本导航，我们打开`src/app/app.html`文件，应该会找到以下模板：
- en: '[PRE37]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`ion-nav` is the subclass of `NavController`, whose purpose is to work with
    the navigation page stack. For the `ion-nav` to work properly, we must set the
    root page to be loaded initially, where the root page is any `@component`.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`ion-nav`是`NavController`的子类，其目的是与导航页面堆栈一起工作。为了让`ion-nav`正常工作，我们必须将根页面设置为最初加载的页面，其中根页面是任何`@component`。'
- en: So if we look at `app.component.ts`, it is pointing to a local variable named
    rootPage and that is set to HomePage .
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们看`app.component.ts`，它指向一个名为rootPage的局部变量，并且设置为HomePage。
- en: 'Now, in `src/pages/home/home.html`, we will see a section at the very top,
    which looks as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`src/pages/home/home.html`中，我们会看到顶部有一个部分，如下所示：
- en: '[PRE38]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This is the dynamic nav bar.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是动态导航栏。
- en: 'Inside the `src/pages/home/home.ts`, we can access the `NavController` as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/pages/home/home.ts`内，我们可以按如下方式访问`NavController`：
- en: '[PRE39]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now we can access the nav properties.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以访问导航属性。
- en: Ionic CLI Sub-Generator
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic CLI子生成器
- en: 'The all-new Ionic CLI for v2 is now power packed with sub-generators, which
    can be helpful for scaffolding pages, components, providers, and so on. To view
    the list of available sub-generators, you can run the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 全新的Ionic CLI v2现在充满了子生成器，可以帮助搭建页面、组件、提供者等。要查看可用子生成器的列表，可以运行以下命令：
- en: '[PRE40]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You will see the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到以下内容：
- en: '![](img/00045.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: 'Now we are going to use the preceding sub generator and generate a couple of
    pages inside the `example8` project. Run the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用前面的子生成器，在`example8`项目内生成两个页面。运行以下命令：
- en: '[PRE41]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Also run the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 还要运行以下命令：
- en: '[PRE42]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Inside the `app/pages` folder, you should see two new folders, the about and
    contact folders, which have their own `html`, `ts`, and `scss` files, along with
    the `module.ts` files.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/pages`文件夹内，你应该会看到两个新文件夹，about和contact文件夹，它们有自己的`html`、`ts`和`scss`文件，以及`module.ts`文件。
- en: Class name of `About` and not `AboutPage`. If that is the case, please update
    the preceding accordingly.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 类名为`About`而不是`AboutPage`。如果是这样，请相应地更新前面的内容。
- en: 'Before we proceed further, we need to add `AboutPage` and `ContactPage` to
    the `src/app/app.module.ts` as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要按如下方式将`AboutPage`和`ContactPage`添加到`src/app/app.module.ts`中：
- en: '[PRE43]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Multi page navigation
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多页面导航
- en: Now that we have three pages, we will see how to implement the navigation between
    them. The idea is that from the Home page, a user should be able to go to the
    About and Contact pages, and from the About page to Contact and Home, and, finally,
    from the Contact page to Home and About.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了三个页面，我们将看看如何在它们之间实现导航。从主页，用户应该能够转到关于和联系页面，从关于页面转到联系和主页，最后从联系页面转到主页和关于页面。
- en: 'First we update `home.html` as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们按如下方式更新`home.html`：
- en: '[PRE44]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, we update `home.ts` as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们按如下方式更新`home.ts`：
- en: '[PRE45]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Do you notice the `goTo` and `back` functions? This is how we navigate from
    one page to another.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到`goTo`和`back`函数了吗？这就是我们从一个页面导航到另一个页面的方式。
- en: 'Next, we will update the `about.html` as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将按如下方式更新`about.html`：
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And `about.ts` as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`about.ts`如下：'
- en: '[PRE47]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'And finally, `contact.html`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`contact.html`：
- en: '[PRE48]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And `contact.ts` as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以及`contact.ts`如下：
- en: '[PRE49]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If we save all the files and go back to the browser, we should see the following:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存所有文件并返回浏览器，我们应该会看到以下内容：
- en: '![](img/00046.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: 'When we click on About button, we should see the following screen:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击About按钮时，我们应该会看到以下屏幕：
- en: '![](img/00047.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: 'As we can see, the Back button is automatically added to the navigation bar.
    Now, when we click on the back button, we will go back to the Home page. If you
    did notice the back function, we added a condition to check if there is more than
    one view in the stack to pop the view. If there is only one view, it will be removed
    and the user will see a black screen, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，返回按钮会自动添加到导航栏中。现在，当我们点击返回按钮时，我们将返回到主页。如果你注意到了返回功能，我们添加了一个条件来检查堆栈中是否有多个视图以弹出视图。如果只有一个视图，它将被移除，用户将看到一个黑屏，如下所示：
- en: '![](img/00048.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: To avoid the **Black Screen of Death** in an app, we have added this condition.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免应用程序中的**黑屏死机**，我们添加了这个条件。
- en: Now that we are aware of Navigation in an Ionic app, you can go back to the
    Tabs template and the Side menu template and take a look at the `src` folder to
    get started.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了Ionic应用程序中的导航，你可以回到标签模板和侧边菜单模板，并查看`src`文件夹以开始。
- en: Also, do check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to find out more about `@IonicPage` decorator and to know more about
    deeplinking.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请查看[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic 3*，了解更多关于`@IonicPage`修饰符以及深度链接的信息。
- en: Summary
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone through the Ionic Grid system and a few of the
    main Ionic components, and have seen how to work with them. We went through buttons,
    lists, cards, icons, and segments. Next, we saw how to work with the Navigation
    component and how to navigate between pages.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了Ionic网格系统和一些主要的Ionic组件，并且看到了如何使用它们。我们介绍了按钮、列表、卡片、图标和段落。接下来，我们将看到如何使用导航组件以及如何在页面之间导航。
- en: In the next chapter, we will work with Ionic decorators and Services, and we
    will look at the decorators and services offered by Ionic.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Ionic修饰符和服务，并且我们将看看Ionic提供的修饰符和服务。
