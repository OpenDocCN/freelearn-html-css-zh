- en: Ionic Decorators and Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic装饰器和服务
- en: 'In the last chapter, we went through a few Ionic components, using which one
    could easily build classy Mobile Hybrid apps. In this chapter, we will be working
    with Ionic 2 decorators and services. The entire Ionic 2 ecosystem is divided
    into two parts: the Components and the Service APIs. Components include buttons,
    cards, and lists, as we saw in the last chapter, and Service APIs include platform,
    `config`, `NavController`, `Storage`, and so on.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过了一些Ionic组件，使用这些组件可以轻松构建时尚的移动混合应用程序。在这一章中，我们将使用Ionic 2的装饰器和服务。整个Ionic
    2生态系统分为两部分：组件和服务API。组件包括按钮、卡片和列表，正如我们在上一章中看到的，服务API包括平台、`config`、`NavController`、`Storage`等等。
- en: 'In this chapter, we are going to take a look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看一下以下主题：
- en: Ionic module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic模块
- en: Component decorator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件装饰器
- en: Config service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置服务
- en: Platform service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台服务
- en: Storage API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储API
- en: Decorators
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装饰器
- en: Before we start working with Ionic built-in decorators, we will quickly get
    an understanding of what decorators are and how they can make our life easy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Ionic内置装饰器之前，我们将快速了解装饰器是什么，以及它们如何让我们的生活变得更容易。
- en: In simple words, a decorator is a function that takes a class and extend its
    behavior without actually modifying it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，装饰器是一个接受类并扩展其行为而不实际修改它的函数。
- en: For instance, if we had a person class and we want to add more information about
    the person to the class, such as age and gender, we can do so quite easily.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个人类，并且我们想要向类中添加关于这个人的更多信息，比如年龄和性别，我们可以很容易地做到这一点。
- en: 'The following is an example of how we can write our own decorator in TypeScript:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何在TypeScript中编写自己的装饰器的示例：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And the `MoreInfo` decorator would look something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`MoreInfo`装饰器看起来会像这样：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the same way, Ionic also provides two decorators:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Ionic还提供了两个装饰器：
- en: Ionic Module or `NgModule` decorator
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic模块或`NgModule`装饰器
- en: Component decorator
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件装饰器
- en: Ionic module
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic模块
- en: 'The Ionic module or `NgModule` decorator bootstraps the Ionic app. If we open
    up any of the existing Ionic projects and look up `src/app/app.module.ts` file,
    we will see the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic模块或`NgModule`装饰器引导Ionic应用程序。如果我们打开任何现有的Ionic项目并查看`src/app/app.module.ts`文件，我们会看到以下内容：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is the place where we bootstrap the Ionic app. This app can also be configured
    by using `forRoot` on the `IonicModule`. `forRoot` takes care of providing and
    configuring services at the same time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们引导Ionic应用程序的地方。这个应用程序也可以通过在`IonicModule`上使用`forRoot`来配置。`forRoot`同时负责提供和配置服务。
- en: 'An example implementation of `forRoot` on `IonicModule` would look like the
    following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`IonicModule`上实现`forRoot`的一个示例看起来像这样：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Platform-specific configuration can also be passed, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 平台特定的配置也可以被传递，如下所示：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can read more about the Ionic Module at [https://ionicframework.com/docs/v2/api/IonicModule/](https://ionicframework.com/docs/v2/api/IonicModule/),
    about config at: [https://ionicframework.com/docs/v2/api/config/Config/](https://ionicframework.com/docs/v2/api/config/Config/)
    , and about `NgModule` at [https://angular.io/docs/ts/latest/guide/ngmodule.html](https://angular.io/docs/ts/latest/guide/ngmodule.html).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://ionicframework.com/docs/v2/api/IonicModule/](https://ionicframework.com/docs/v2/api/IonicModule/)了解更多关于Ionic模块的信息，关于配置请访问：[https://ionicframework.com/docs/v2/api/config/Config/](https://ionicframework.com/docs/v2/api/config/Config/)，关于`NgModule`请访问[https://angular.io/docs/ts/latest/guide/ngmodule.html](https://angular.io/docs/ts/latest/guide/ngmodule.html)。
- en: Component decorator
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件装饰器
- en: 'The `Component` decorator marks a class as an Angular component and collects
    component configuration metadata. A simple component decorator would look like
    this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component`装饰器标记一个类为Angular组件，并收集组件配置元数据。一个简单的组件装饰器看起来像这样：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Components have all the Ionic and Angular core components and directives included,
    so we need not explicitly declare the directive property. Only the dependent properties
    on the child/parent component need to be explicitly specified.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 组件包括所有Ionic和Angular核心组件和指令，因此我们不需要显式声明指令属性。只有子/父组件上的依赖属性需要显式指定。
- en: To know more about the `Component` decorator, refer to [https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`Component`装饰器的信息，请参考[https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html)。
- en: Navigation
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: In the previous chapter, we saw a basic implementation of navigation between
    two pages. In this section, we will dig deeper into the same.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了在两个页面之间进行导航的基本实现。在本节中，我们将更深入地研究相同的内容。
- en: 'To start off, we will scaffold a blank Ionic app. Create a new folder named
    `chapter4` and, inside that folder, open a new command prompt/terminal and run
    the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将脚手架一个空白的Ionic应用程序。创建一个名为`chapter4`的新文件夹，在该文件夹内打开一个新的命令提示符/终端，并运行以下命令：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once the app has been scaffolded, `cd` into the `example9` folder. If we navigate
    to `example9/src/app/app.component.ts`, we should see the App component defined
    by a class named `MyApp`. And if we navigate to the corresponding template `example9/src/app/app.html`,
    we should see the `ion-nav` component.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序被脚手架化，`cd`进入`example9`文件夹。如果我们导航到`example9/src/app/app.component.ts`，我们应该看到由名为`MyApp`的类定义的App组件。如果我们导航到相应的模板`example9/src/app/app.html`，我们应该看到`ion-nav`组件。
- en: The `ion-nav` component takes in an input property named root. The root property
    indicates which component will act as the root component/root page. In this example,
    we have indicated Home Page as the `root` from our `MyApp` class (`example9/src/app/app.component.ts`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ion-nav`组件接受一个名为root的输入属性。root属性指示哪个组件将充当根组件/根页面。在这个例子中，我们已经从我们的`MyApp`类(`example9/src/app/app.component.ts`)中指定了Home
    Page作为`root`。'
- en: 'Now we are going to generate one new page named about, using the Ionic CLI''s
    generate command. Run the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将生成一个名为about的新页面，使用Ionic CLI的generate命令。运行以下命令：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command will create a new component inside the `src/pages` folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在`src/pages`文件夹内创建一个新的组件。
- en: If we look at the `example9/src/pages/home/` and `example9/src/pages/about/`
    contents, we should see two standalone components.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`example9/src/pages/home/`和`example9/src/pages/about/`的内容，我们应该会看到两个独立的组件。
- en: 'Before we start stitching these two pages together, we will first need to register
    the about page with the `@NgModule`. Open `example9/src/app/app.module.ts` and
    update it as shown follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将这两个页面连接在一起之前，我们首先需要使用`@NgModule`注册关于页面。打开`example9/src/app/app.module.ts`并按照以下方式更新它：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we will add a button on the Home Page and when we click on it, we will
    show the about page. Update `example9/src/pages/home/home.html` as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在主页上添加一个按钮，当我们点击它时，我们将显示关于页面。按照以下方式更新`example9/src/pages/home/home.html`：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we will add the logic to navigate between pages. Update `example9/src/pages/home/home.ts`
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加页面之间导航的逻辑。按照以下方式更新`example9/src/pages/home/home.ts`：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using `this.navCtrl.push(AboutPage);`, we move from the Home Page to the about
    page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`this.navCtrl.push(AboutPage);`，我们从主页跳转到关于页面。
- en: 'If we save the files and execute `ionic serve`, we should see the home page
    with the button. And when we click on the button, we should see the about page:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存文件并执行`ionic serve`，我们应该会看到带有按钮的主页。当我们点击按钮时，我们应该会看到关于页面：
- en: '![](img/00049.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: 'Now, if we want to navigate back, we can use the auto-generated back button
    or we can create a button on the About page to go back. To do that, update `example9/src/pages/about/about.html`
    as shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要导航回去，我们可以使用自动生成的返回按钮，或者我们可以在关于页面上创建一个按钮返回。为了做到这一点，请按照以下方式更新`example9/src/pages/about/about.html`：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And update `example9/src/pages/about/about.ts` as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并按照以下方式更新`example9/src/pages/about/about.ts`：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Do note `this.navCtrl.pop();` --that is how we pop a page from the view.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`this.navCtrl.pop();`--这是我们从视图中弹出页面的方法。
- en: If we save all the files and go back to the browser, then navigate from Home
    to About, we should see a Back button. Clicking on this will lead us back to the
    Home page.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存所有文件并返回浏览器，然后从主页导航到关于，我们应该会看到一个返回按钮。点击它将会带我们回到主页。
- en: This is a simple example of how we can stitch two pages together.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子，说明了我们如何将两个页面连接在一起。
- en: 'Along with this, we have page events that indicate the various stages of a
    page. To understand this better, we will update `example9/src/pages/about/about.ts`
    as shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还有页面事件，指示页面的各个阶段。为了更好地理解这一点，我们将按照以下方式更新`example9/src/pages/about/about.ts`：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Save all the files, navigate to the browser, and navigate from Home to About
    and back, and we should see the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，导航到浏览器，从主页导航到关于，然后返回，我们应该会看到以下内容：
- en: '![](img/00050.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: Based on this, we can hook onto various events and act accordingly if needed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，我们可以挂接到各种事件，并在需要时采取相应的行动。
- en: Passing data between pages
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面之间传递数据
- en: So far, we have seen how we can move from one page to another. Now, using `NavParams`,
    we will be passing data from one page to another.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何从一个页面移动到另一个页面。现在，使用`NavParams`，我们将从一个页面传递数据到另一个页面。
- en: In the same `example9` project, we will be adding on this functionality. On
    the home page, we will present a textbox for the user to enter data. Once the
    user enters the data and clicks on Go to About, we will take the value of the
    `textbox` and pass it on to the About page and print the text that we have captured
    on the Home page in the About page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的`example9`项目中，我们将添加这个功能。在主页上，我们将呈现一个文本框，供用户输入数据。一旦用户输入数据并点击转到关于，我们将获取`textbox`的值，并将其传递到关于页面，并在关于页面中打印我们在主页上捕获的文本。
- en: 'To get started, we will update `example9/src/pages/home/home.html` as shown
    here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将按照以下方式更新`example9/src/pages/home/home.html`：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Do note that we have updated the `openAbout` method to take the text value.
    Next, we will update `example9/src/pages/home/home.ts`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经更新了`openAbout`方法以获取文本值。接下来，我们将更新`example9/src/pages/home/home.ts`：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Do notice the second argument that we are passing to the push method of the
    `navCtrl`. This is how we pass the data from the Home page. Now we will update
    `example9/src/pages/about/about.ts` to catch the data:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们传递给`navCtrl`的push方法的第二个参数。这是我们如何从主页传递数据。现在我们将更新`example9/src/pages/about/about.ts`以捕获数据：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To catch the data, we need to import `NavParams` from `ionic-angular`. And using
    `navParams.get(data);`, we fetch the data that is passed from the Home Page inside
    the constructor.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获数据，我们需要从`ionic-angular`中导入`NavParams`。并且使用`navParams.get(data);`，我们在构造函数中获取从主页传递过来的数据。
- en: 'And finally, to display the data in the About page, update `example9/src/pages/about/about.html`
    as shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在关于页面中显示数据，请按照以下方式更新`example9/src/pages/about/about.html`：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save all the files and head back to the browser and we should be able to see
    the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并返回浏览器，我们应该能够看到以下内容：
- en: '![](img/00051.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Now we know how to stitch two pages together and pass data between them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何将两个页面连接在一起并在它们之间传递数据。
- en: We can implement navigation and lazy loading using the `@IonicPage` decorator.
    You can find more information about the same in [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`@IonicPage`装饰器实现导航和延迟加载。您可以在[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)中找到更多关于此的信息，*Ionic
    3*。
- en: Config service
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务
- en: This service lets you configure and set up app-specific preferences.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务允许您配置和设置特定于应用程序的首选项。
- en: To customize the look and feel of the app across platforms or within the same
    platform for various components, we use the config service.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在各种组件中跨平台或在同一平台内定制应用程序的外观和感觉，我们使用配置服务。
- en: 'To understand this service better, we will scaffold a new app and work with
    it. Run the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这项服务，我们将搭建一个新的应用程序并与之一起工作。运行以下命令：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And then run `ionic serve --lab`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行`ionic serve --lab`。
- en: This will run the tabs app in the lab view, where we can see the Android iOS
    and Windows apps side by side.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在实验室视图中运行选项卡应用程序，我们可以在其中同时看到Android iOS和Windows应用程序。
- en: 'We can view the Ionic app in any of the three platform views by using the following
    URLs as well:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下URL在三个平台视图中查看Ionic应用程序：
- en: 'iOS: [http://localhost:8100/?ionicplatform=ios](http://localhost:8100/?ionicplatform=ios)
    Android: [http://localhost:8100/?ionicplatform=android](http://localhost:8100/?ionicplatform=android)
    Windows: [http://localhost:8100/?ionicplatform=windows](http://localhost:8100/?ionicplatform=windows)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: iOS：[http://localhost:8100/?ionicplatform=ios](http://localhost:8100/?ionicplatform=ios)
    Android：[http://localhost:8100/?ionicplatform=android](http://localhost:8100/?ionicplatform=android)
    Windows：[http://localhost:8100/?ionicplatform=windows](http://localhost:8100/?ionicplatform=windows)
- en: 'And we should see something like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到类似于这样的东西：
- en: '![](img/00052.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: Config is set up on the `@NgModule`. If we open `example10/src/app/app.module.ts`,
    we should find the `NgModule` decorator, inside which we can find `IonicModule.forRoot(MyApp)`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 配置设置在`@NgModule`上。如果我们打开`example10/src/app/app.module.ts`，我们应该找到`NgModule`装饰器，在其中我们可以找到`IonicModule.forRoot(MyApp)`。
- en: 'A simple config would look like the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的配置看起来像这样：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will make the look and feel default to the material design irrespective
    of the platform. We should be able to see the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使外观和感觉默认为材料设计，而不考虑平台。我们应该能够看到以下内容：
- en: '![](img/00053.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: 'You can also set other config values like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以像这样设置其他配置值：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding values are quite self-explanatory.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的值相当自明。
- en: The properties in the config can be overwritten at the app level, platform level,
    and component level.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 配置中的属性可以在应用程序级别、平台级别和组件级别进行覆盖。
- en: 'For instance, you can overwrite the `tabberPlacement` property at the app level
    as well as the platform level, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以在应用程序级别以及平台级别覆盖`tabberPlacement`属性，如下所示：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And we will see the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下内容：
- en: '![](img/00054.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: 'And we can also overwrite at the component level as well. Update `example10/src/pages/tabs/tabs.html`
    as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在组件级别进行覆盖。更新`example10/src/pages/tabs/tabs.html`如下：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And we should see the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下内容：
- en: '![](img/00055.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: For quick testing, we can also set the config property in the URL, without any
    overrides defined. For instance, to test how tabs would look when placed on top,
    we can navigate to this URL: [http://localhost:8100/?ionicTabsPlacement=top](http://localhost:8100/?ionicTabsPlacement=top)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速测试，我们还可以在URL中设置配置属性，而不定义任何覆盖。例如，要测试将选项卡放在顶部时的外观，我们可以转到此URL：[http://localhost:8100/?ionicTabsPlacement=top](http://localhost:8100/?ionicTabsPlacement=top)
- en: 'We can also set custom properties to the config and extract them later on.
    For instance, we can set the following properties:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在配置中设置自定义属性，并在以后提取它们。例如，我们可以设置以下属性：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And then we can get the value using the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用以下方法获取值：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can import `config` from `ionic-angular`, for example `import {Config} from
    ''ionic-angular'';` and then initialize `config` in the constructor: `constructor(private
    config : Config) { //**// }`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以从`ionic-angular`导入`config`，例如`import {Config} from ''ionic-angular'';`，然后在构造函数中初始化`config`：`constructor(private
    config : Config) { //**// }`'
- en: Platform service
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台服务
- en: The platform service returns the available information about the current platform.
    The new and improved platform service of Ionic has more information that helps
    us to customize the app based on the device type.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 平台服务返回有关当前平台的可用信息。Ionic的新版平台服务提供了更多信息，帮助我们根据设备类型定制应用程序。
- en: 'To understand the platform service better, we will scaffold a blank app. Run
    the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解平台服务，我们将创建一个空白应用程序。运行以下命令：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: And then run `ionic serve` to launch the blank app.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行`ionic serve`启动空白应用程序。
- en: 'Now we are going to add a reference to the Platform class in `example11/src/pages/home/home.ts`.
    Update `home.ts` as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在`example11/src/pages/home/home.ts`中添加对Platform类的引用。更新`home.ts`如下：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And now we will start working with various features of the `Platform` class.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始使用`Platform`类的各种功能。
- en: The first one we are going to look at is the `userAgent` string. To access the
    `userAgent`, we can execute `userAgent()` on the platform.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要查看的第一个是`userAgent`字符串。要访问`userAgent`，我们可以在平台上执行`userAgent()`。
- en: 'Update the `example11/src/pages/home/home.html` content section as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`example11/src/pages/home/home.html`内容部分如下：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We should see the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下内容：
- en: '![](img/00056.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: 'Next, we will find out the platform on which the app is running; for that,
    we update the `ion-content` contents in `home.html` as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将找出应用程序正在运行的平台；为此，我们将更新`home.html`中的`ion-content`内容如下：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And when the browser refreshes, we should see the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器刷新时，我们应该看到以下内容：
- en: '![](img/00057.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: As we can see from the screenshot, when run in the browser, the preceding platform
    names are the values.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从屏幕截图中看到的，当在浏览器中运行时，前面的平台名称是这些值。
- en: 'Now, let us add the browser platform and see if anything changes. Run the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加浏览器平台并查看是否有任何更改。运行以下命令：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And then run:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should be able to see the Ionic app launch in the browser with Cordova
    support and now the output should look like the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在浏览器中看到Ionic应用程序启动，并且现在输出应该如下所示：
- en: '![](img/00058.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: If we notice carefully, we can see that in the preceding screenshot, that cordova
    is now set to true.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察，我们可以看到在前面的屏幕截图中，`cordova`现在设置为`true`。
- en: Using the preceding cross-section of platform names, we can easily customize
    the app and tailor the user experience.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的平台名称，我们可以轻松定制应用程序并调整用户体验。
- en: To find out more about the platform service, refer to [http://ionicframework.com/docs/api/platform/Platform/](http://ionicframework.com/docs/api/platform/Platform/)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关平台服务的更多信息，请参阅[http://ionicframework.com/docs/api/platform/Platform/](http://ionicframework.com/docs/api/platform/Platform/)
- en: Storage service
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储服务
- en: In this section, we are going to take a look at the Storage service. The Storage
    class from Ionic helps us interact with various storage options that are available
    when the app runs in the native container.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究存储服务。Ionic的Storage类帮助我们与应用程序在原生容器中运行时可用的各种存储选项进行交互。
- en: 'Quoting the Ionic documentation:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 引用Ionic文档：
- en: Storage is an easy way to store key/value pairs and JSON objects. Storage uses
    a variety of storage engines underneath, picking the best one available depending
    on the platform.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Storage是一种存储键/值对和JSON对象的简单方法。Storage在底层使用各种存储引擎，根据平台选择最佳的存储引擎。
- en: When running in a native app context, Storage will prioritize using SQLite,
    as it's one of the most stable and widely used file-based databases, and avoids
    some of the pitfalls of things like localstorage and IndexedDB, such as the OS
    deciding to clear out such data in low disk-space situations.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本机应用上下文中运行时，Storage将优先使用SQLite，因为它是最稳定和广泛使用的基于文件的数据库之一，并且避免了一些像localstorage和IndexedDB这样的问题，比如操作系统决定在低磁盘空间情况下清除这些数据。
- en: When running in the web or as a Progressive Web App, Storage will attempt to
    use IndexedDB, WebSQL, and localstorage, in that order.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web或作为渐进式Web应用运行时，Storage将尝试使用IndexedDB、WebSQL和localstorage，按照这个顺序。
- en: 'Now, to start working with the Storage class, we will create a new app. Run
    the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要开始使用Storage类，我们将创建一个新的应用。运行以下命令：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: And then run `ionic serve` to launch it in the browser.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行`ionic serve`在浏览器中启动它。
- en: To understand how to use Storage, we will be building a simple user management
    app. In this app, we can add a user, persist that data in storage, and then remove
    it later on. The main purpose of this app is to explore the storage class.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何使用Storage，我们将构建一个简单的用户管理应用。在这个应用中，我们可以添加用户，将数据持久化存储，然后稍后删除它。这个应用的主要目的是探索Storage类。
- en: 'The final app will look something like the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的应用将看起来像下面这样：
- en: '![](img/00059.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'Before we start working with the `Storage` class, we need to add it to our
    `Ionic` project. Run the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用`Storage`类之前，我们需要将其添加到我们的`Ionic`项目中。运行以下命令：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we need to add it as a provider. Update `example12/src/app/app.module.ts`
    as shown here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将其添加为提供者。按照以下方式更新`example12/src/app/app.module.ts`：
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, we will build the interface. Open `example12/src/pages/home/home.html`.
    We will update the header first to the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建界面。打开`example12/src/pages/home/home.html`。首先我们将更新头部如下：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, in the content section, we will create two divisions, one for the form
    where the user will enter the name and age, and one more division for displaying
    the list of users:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在内容部分，我们将创建两个部分，一个用于用户输入姓名和年龄的表单，另一个用于显示用户列表的部分：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Next, we will start working with the logic. Update `example12/src/pages/home/home.ts`
    as shown here
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始处理逻辑。按照以下方式更新`example12/src/pages/home/home.ts`：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the preceding code, first we have imported the `Storage` from `@ionic/storage`.
    Next, we have instantiated the same in the constructor.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，首先我们从`@ionic/storage`中导入了`Storage`。接下来，在构造函数中实例化了相同的内容。
- en: We have created a class variable named `users` that will be used to store all
    the users we are creating in memory. Inside the constructor, we are invoking `getUsers()`
    to fetch the users from the storage on load. We have created two functions, `addUser()`
    and `removeUser()`, to add a user and remove a user.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`users`的类变量，用于在内存中存储我们创建的所有用户。在构造函数内部，我们调用`getUsers()`来在加载时从存储中获取用户。我们创建了两个函数，`addUser()`和`removeUser()`，用于添加用户和删除用户。
- en: Since the storage is a key value store, we are creating the keys of the user
    we are storing using the ID of the user. For instance, if the ID of the user is
    1, we create the key as `user-1`. This way, we know that all keys in the storage
    belonging to our app start with *user*, in case there are other entities using
    Storage in the same app.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存储是一个键值存储，我们使用用户的ID创建存储的键。例如，如果用户的ID是1，我们将键创建为`user-1`。这样，我们知道存储中属于我们应用的所有键都以*user*开头，以防其他实体在同一个应用中使用Storage。
- en: We are using `genRandomId()` to generate a random number between 1 and 9,999.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`genRandomId()`来生成一个1到9999之间的随机数。
- en: 'If we save all the files, go back to the browser, and open the console, we
    should see something like the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存所有文件，返回浏览器，并打开控制台，我们应该看到类似以下的内容：
- en: '![](img/00060.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: Do notice the message in the console. This message shows us the data will be
    stored in asynStorage. So, in Chrome, it would be IndexedDB.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意控制台中的消息。这条消息告诉我们数据将被存储在asynStorage中。因此，在Chrome中，它将是IndexedDB。
- en: 'So, in Chrome, if we click on the Applications tab in the development tools
    and navigate to IndexedDB, we should see something like the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在Chrome中，如果我们在开发工具中点击应用程序选项卡并导航到IndexedDB，我们应该看到类似以下的内容：
- en: '![](img/00061.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.jpeg)'
- en: 'Now, let us add a user using the form. And the updated screen and storage should
    look like the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用表单添加一个用户。更新后的屏幕和存储应该如下所示：
- en: '![](img/00062.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: Now, on clicking on delete, we should see the storage cleared and the UI updated
    without any users.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击删除后，我们应该看到存储已清除，并且UI更新后没有任何用户。
- en: So, using storage, we can easily start working with data persistence in our
    Ionic app, without worrying about the underlying implementation.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用存储，我们可以在Ionic应用中轻松开始处理数据持久性，而不必担心底层实现。
- en: 'If needed, we can override `IonicStorageModule.forRoot()` as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以覆盖`IonicStorageModule.forRoot()`如下：
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You can find more configurations and properties here: [https://ionicframework.com/docs/storage/](https://ionicframework.com/docs/storage/)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到更多配置和属性：[https://ionicframework.com/docs/storage/](https://ionicframework.com/docs/storage/)
- en: With this, we complete the overview of Storage in Ionic.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了Ionic中Storage的概述。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone through the two main decorators of Ionic. Then
    we have gone through the config and platform services and seen how we can customize
    the app based on the platform and configuration. After that, we have gone through
    the Storage API in Ionic.  Refer to [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to take a look at the all new `IonicPage` directive and `IonicPage`
    module.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了Ionic的两个主要装饰器。然后我们介绍了配置和平台服务，并看到了如何根据平台和配置自定义应用程序。之后，我们介绍了Ionic中的存储API。请参考[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic
    3*，了解全新的`IonicPage`指令和`IonicPage`模块。
- en: In the next chapter, we will be working with theming Ionic apps.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为Ionic应用创建主题。
