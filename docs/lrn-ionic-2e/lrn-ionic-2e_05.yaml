- en: Ionic and SCSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic和SCSS
- en: 'In this chapter, we will take a look at theming with Ionic. Theming in Ionic
    is simple and easy to implement. The Ionic team has taken great efforts in simplifying
    and modularizing theming in Ionic. In a nutshell, theming in Ionic happens at
    component level, as well as platform level (iOS, Android, and WP). Ionic uses
    SCSS to work with theming. We will be going through the following topics in this
    chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用Ionic进行主题设置。Ionic中的主题设置简单且易于实现。Ionic团队在简化和模块化Ionic中的主题设置方面付出了很大的努力。简而言之，Ionic中的主题设置发生在组件级别，以及平台级别（iOS、Android和WP）。Ionic使用SCSS来处理主题设置。在本章中，我们将介绍以下主题：
- en: Sass versus SCSS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sass与SCSS
- en: Working with SCSS variables
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SCSS变量
- en: Platform-level and page/component-level overrides
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台级别和页面/组件级别的覆盖
- en: What is Sass?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Sass？
- en: 'Quoting from the Sass documentation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 引用自Sass文档：
- en: '"Sass is an extension of CSS that adds power and elegance to the basic language."'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “Sass是CSS的扩展，为基本语言增添了力量和优雅。”
- en: It allows us to use variables, nested rules, mixins, inline imports, and more,
    all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well
    organized, and get small stylesheets up and running quickly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们使用变量、嵌套规则、mixin、内联导入等，所有这些都是完全兼容CSS的语法。Sass有助于保持大型样式表的良好组织，并快速启动小型样式表。
- en: In simpler terms, Sass makes CSS programmable. But the chapter is titled SCSS;
    why are we talking about Sass? Well, Sass and SCSS are pretty much the same CSS
    preprocessor, each with its own way of writing the pre-CSS syntax.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，Sass使CSS可编程。但是，本章的标题是SCSS；为什么我们要谈论Sass呢？嗯，Sass和SCSS基本上是相同的CSS预处理器，每个都有自己的编写预CSS语法的方式。
- en: SCSS was developed as part of another preprocessor named HAML ([http://haml.info/](http://haml.info/))
    by Ruby developers, so it inherited a lot of syntax style from Ruby, such as indentation,
    no braces, and no semicolons.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS是作为另一个名为HAML（[http://haml.info/](http://haml.info/)）的预处理器的一部分而开发的，由Ruby开发人员，因此它继承了很多来自Ruby的语法风格，例如缩进、无大括号和无分号。
- en: 'A sample Sass file would look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例的Sass文件看起来像这样：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When ran through the Sass compiler, it would return the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Sass编译器运行，它将返回以下代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Good old CSS. But did you notice that `brand-primary` acting as a variable,
    substituting its value inside the container class? And the `border-radius` acting
    as a function (also called a mixin), generating the required CSS rules when called
    with an argument? Yes, the missing piece in CSS programming. You can try out the
    preceding conversion: [http://sasstocss.appspot.com/](http://sasstocss.appspot.com/)
    and check out how Sass gets compiled to CSS.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好老的CSS。但是你有没有注意到`brand-primary`作为一个变量，在容器类内替换它的值？以及`border-radius`作为一个函数（也称为mixin），在调用时生成所需的CSS规则？是的，这是CSS编程中缺失的一部分。你可以尝试前面的转换：[http://sasstocss.appspot.com/](http://sasstocss.appspot.com/)，看看Sass是如何编译成CSS的。
- en: People who are used to the bracket-based coding languages find this way of writing
    code a bit difficult. So, enter SCSS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯于基于大括号的编码语言的人会觉得这种编写代码的方式有点困难。所以，SCSS应运而生。
- en: 'Sass stands for **Syntactically Awesome Style Sheets** and SCSS stands for
    **Sassy CSS**. So SCSS is pretty much the same as Sass, except for the CSS-like
    syntax. The preceding Sass code, would look like this when written in SCSS:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Sass代表**Syntactically Awesome Style Sheets**，SCSS代表**Sassy CSS**。因此，SCSS基本上与Sass相同，除了类似于CSS的语法。前面的Sass代码，如果用SCSS编写，会变成这样：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This looks a lot closer to CSS itself, right? And it is expressive. And Ionic
    uses SCSS to style its components.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来更接近CSS本身，对吧？而且它很有表现力。Ionic使用SCSS来为其组件设置样式。
- en: 'If you want to know more about SCSS versus Sass, you can look at: [http://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better](http://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于SCSS与Sass的信息，你可以查看：[http://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better](http://thesassway.com/editorial/sass-vs-scss-which-syntax-is-better)。
- en: Now that we have a basic understanding of what SCSS and Sass are and how to
    use them, we will leverage them in our Ionic app to maintain and theme our components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对SCSS和Sass是什么以及如何使用它们有了基本的了解，我们将利用它们在我们的Ionic应用程序中来维护和设置主题。
- en: Ionic and SCSS
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic和SCSS
- en: 'By default, Ionic is packed with SCSS. Unlike the earlier version, where one
    had to set up SCSS in a project, in Ionic 2 the theming has become more modular
    and simpler. There are two levels at which theming can happen:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ionic已经集成了SCSS。与早期版本不同，在那个版本中，人们必须在项目中设置SCSS，在Ionic 2中，主题设置变得更加模块化和简单。主题设置可以发生在两个级别：
- en: At the platform level
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在平台级别
- en: At the page/component level
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面/组件级别
- en: App-level theming is almost always what we need. We would change the colors
    of our app based on our brand, and since Ionic uses a SCSS map, the colors are
    inherited directly by the components. Also, we can add, rename, and remove colors
    as needed. The primary color is the only required color in the map. iOS, MD, and
    WP colors can be further customized if colors are different per mode.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 应用级别的主题设置几乎总是我们所需要的。我们会根据我们的品牌更改应用程序的颜色，由于Ionic使用了SCSS映射，颜色直接被组件继承。此外，我们可以根据需要添加、重命名和删除颜色。映射中唯一需要的颜色是主要颜色。如果颜色因模式而异，iOS、MD和WP颜色可以进一步自定义。
- en: Page/component-level theming is very helpful if we would like to keep our styles
    isolated and specific to those pages/components. This is one of the biggest advantages
    of the component-based approach to app development. We can keep our components
    modular and manageable, and at the same time keep the styles and functionality
    from leaking from one to another, unless intended.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望保持我们的样式与那些页面/组件隔离并特定于它们，页面/组件级别的主题设置非常有帮助。这是应用程序开发的基于组件的方法的最大优势之一。我们可以保持我们的组件模块化和可管理，同时防止样式和功能从一个组件泄漏到另一个组件，除非有意为之。
- en: 'To get the hang of theming in Ionic, we will scaffold a new tabs app and theme
    the same. Create a new folder if needed, named `chapter5`, and then open a new
    command prompt/terminal. Run the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了掌握Ionic中的主题设置，我们将搭建一个新的选项卡应用程序并设置相同的主题。如果需要，创建一个名为`chapter5`的新文件夹，然后打开一个新的命令提示符/终端。运行以下命令：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once the app is scaffolded, run `ionic serve` to view the app in the browser.
    The first thing we are going to work with is the colors. Open `example13/src/theme/variables.scss`
    and we should see a variable map named `$colors`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序被脚手架搭建，运行`ionic serve`在浏览器中查看应用程序。我们要处理的第一件事是颜色。打开`example13/src/theme/variables.scss`，我们应该会看到一个名为`$colors`的变量映射。
- en: 'To quickly test the color scheme, change the value of the primary variable
    inside the `$colors` map from `#387ef5` to `red`. We should see the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速测试颜色方案，将`$colors`映射中的主要变量的值从`#387ef5`更改为`red`。我们应该会看到以下内容：
- en: '![](img/00063.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: As mentioned earlier, primary is the only mandatory value.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，主要是唯一的强制值。
- en: 'The colors map can be extended to add our own colors as well. For instance,
    on `example13/src/pages/home/home.html`, let us add a button with an attribute
    name `purple`, which would look something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色映射也可以扩展以添加我们自己的颜色。例如，在`example13/src/pages/home/home.html`上，让我们添加一个带有属性名称`purple`的按钮，看起来会像这样：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Inside the `$colors` map, add a new key value: `purple: #663399`. The complete
    map would look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '在`$colors`映射中，添加一个新的键值：`purple: #663399`。完整的映射看起来像这样：'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, if we go back to the page, we should see the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们返回到页面，我们应该会看到以下内容：
- en: '![](img/00064.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.jpeg)'
- en: It is indeed that simple to add new colors to our app.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确实很简单地向我们的应用程序添加新颜色。
- en: We can further customize the theme colors by adding in a base and a contrast
    property. The base will be the background of the element and the contrast will
    be the text color.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加基础和对比属性来进一步定制主题颜色。基础将是元素的背景，对比将是文本颜色。
- en: 'To test the preceding feature, open `example13/src/pages/about/about.html`
    and add a floating action button as mentioned in the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试上述功能，打开`example13/src/pages/about/about.html`，并按照下面的代码添加一个浮动操作按钮：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our updated `$colors` map would be as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新的`$colors`映射将如下所示：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note: This will generate styles for all the different Ionic components. Do
    not put SCSS variables in the map if they are not part of the root component.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这将为所有不同的Ionic组件生成样式。如果它们不是根组件的一部分，请不要将SCSS变量放在映射中。
- en: 'When we navigate to the About tab after saving all the files, we should see
    the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件后导航到关于选项卡时，我们应该会看到以下内容：
- en: '![](img/00065.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: Isn't theming simple?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 主题设置很简单吧？
- en: Page-level overrides
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面级别覆盖
- en: We can take the same theming to the next level by applying different styles
    to the same component in two different pages. For instance, we will make a label
    look different in the About page and the Contact page. This is how we will achieve
    it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在两个不同页面中的同一组件上应用不同的样式，将相同的主题应用到下一个级别。例如，我们将使标签在关于页面和联系页面中看起来不同。这是我们将如何实现它的方式。
- en: 'In `example13/src/pages/about/about.html`, we will add a new label inside the
    `ion-content` section, as shown in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`example13/src/pages/about/about.html`中，我们将在`ion-content`部分内添加一个新的标签，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will add the required styles in `example13/src/pages/about/about.scss`,
    as shown in the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`example13/src/pages/about/about.scss`中添加所需的样式，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, we will add another label in `example13/src/pages/contact/contact.html`
    inside the `ion-content` section, as shown in the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将在`example13/src/pages/contact/contact.html`中的`ion-content`部分内添加另一个标签，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will add the required styles inside `example13/src/pages/contact/contact.scss`,
    as shown in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`example13/src/pages/contact/contact.scss`中添加所需的样式，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, if we save all the files and go back to the About page in the browser,
    we should see the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们保存所有文件并返回到浏览器中的关于页面，我们应该会看到以下内容：
- en: '![](img/00066.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: 'And the Contact page will look like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 联系页面将如下所示：
- en: '![](img/00067.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: As we can see from the preceding image, we are using page-level styling to differentiate
    between the two components. The preceding screenshot is a simple example of how
    we can have multiple styles for the same component in different pages.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从上图中看到的，我们正在使用页面级样式来区分这两个组件。上面的截图是一个简单的例子，说明了我们如何在不同页面的同一组件中拥有多种样式。
- en: Platform-level overrides
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台级别覆盖
- en: Now that we have seen how to apply styles at page level, let us see how Ionic
    theming makes it so simple to manage styles at platform level. Platform-level
    styles are applicable when the same app is viewed in multiple devices, which have
    their own distinct styles.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了如何在页面级别应用样式，让我们看看Ionic主题是如何简化在平台级别管理样式的。当在多个具有自己独特样式的设备上查看同一应用程序时，平台级样式是适用的。
- en: While working with Ionic, we define modes, where a mode is the platform in which
    the app is running. By default, Ionic adds a class name, which is the same as
    the mode on the `ion-app` element. For instance, if we are viewing the app on
    Android, the body will have a class named `md`, where `md` stands for **material
    design**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Ionic时，我们定义模式，其中模式是应用程序运行的平台。默认情况下，Ionic会在`ion-app`元素上添加与模式相同的类名。例如，如果我们在Android上查看应用程序，body将具有名为`md`的类，其中`md`代表**material
    design**。
- en: 'To quickly check this out, we will open `http://localhost:8100/?ionicplatform=ios`
    and then inspect the body element in the developer tools. We should see the `ion-app`
    element with a class named `ios`, among other classes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速检查这一点，我们将打开`http://localhost:8100/?ionicplatform=ios`，然后在开发者工具中检查body元素。我们应该会看到`ion-app`元素带有一个名为`ios`的类，以及其他类：
- en: '![](img/00068.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: 'If we open `http://localhost:8100/?ionicplatform=android`, we should see the
    following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开`http://localhost:8100/?ionicplatform=android`，我们应该会看到以下内容：
- en: '![](img/00069.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'And if we open `http://localhost:8100/?ionicplatform=windows`, we should see
    the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开`http://localhost:8100/?ionicplatform=windows`，我们应该会看到以下内容：
- en: '![](img/00070.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: 'As of today, there are three modes in Ionic:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 截至今天，Ionic有三种模式：
- en: '| **Platform** | **Mode** | **Description** |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **平台** | **模式** | **描述** |'
- en: '| iOS | ios | Applies iOS styling to all components |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| iOS | ios | 对所有组件应用iOS样式 |'
- en: '| Android | md | Applies material design styling to all components |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| Android | md | 对所有组件应用Material Design样式 |'
- en: '| Windows | wp | Applies Windows styling to all components |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| Windows | wp | 对所有组件应用Windows样式 |'
- en: '| Core | md | If we are not on one of the aforementioned devices, the app will
    get material design styling by default |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| Core | md | 如果我们不在上述设备中的任何一个上，应用将默认获得Material Design样式 |'
- en: Refer here for more information: [http://ionicframework.com/docs/theming/platform-specific-styles/](http://ionicframework.com/docs/theming/platform-specific-styles/).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅：[http://ionicframework.com/docs/theming/platform-specific-styles/](http://ionicframework.com/docs/theming/platform-specific-styles/)。
- en: We will be defining platform-specific styles inside the `example13/src/theme/variables.scss`
    file in the sections provided by comments.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`example13/src/theme/variables.scss`文件的注释提供的部分中定义特定于平台的样式。
- en: To understand platform-specific styles, we will be applying different background
    colors to the `navbar` and changing the text color.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '为了理解特定于平台的样式，我们将为`navbar`应用不同的背景颜色并更改文本颜色。 '
- en: 'Open `example13/src/theme/variables.scss` and add the following styles under
    the section that says `App Material Design Variables` in comments:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`example13/src/theme/variables.scss`并在注释中说`App Material Design Variables`的部分下添加以下样式：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, when we save the file and navigate to `http://localhost:8100/?ionicplatform=android`,
    we should see the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们保存文件并导航到`http://localhost:8100/?ionicplatform=android`，我们应该看到以下内容：
- en: '![](img/00071.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: Do note the `.md` class, inside which the styles are nested. This is what makes
    the styles platform specific.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`.md`类，其中嵌套了样式。这就是使样式特定于平台的原因。
- en: 'Similarly, we update the `App iOS Variables` section:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们更新`App iOS Variables`部分：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we should see the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到以下内容：
- en: '![](img/00072.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: 'Finally, for Windows, we will update the `App Windows Variables`, section as
    mentioned in the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于Windows，我们将根据以下代码更新`App Windows Variables`部分：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We should see the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下内容：
- en: '![](img/00073.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: We have already seen in [Chapter 4](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Decorators and Services*, how we can change the mode of the app to either
    `md`, `ios`, or `wp` using the `config` properties.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第4章](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8)中看到了如何使用`config`属性将应用的模式更改为`md`、`ios`或`wp`。
- en: We can also set the platform dynamically and apply styles.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以动态设置平台并应用样式。
- en: To understand this, we will work with the badge component. Only on Windows platform,
    the badge component will not have any border radius, but we would like to override
    that behavior using dynamic attributes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一点，我们将使用徽章组件。只有在Windows平台上，徽章组件才不会有任何边框半径，但我们希望使用动态属性来覆盖这种行为。
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we notice that on `ion-badge`, we have a conditional attribute `[attr.round-badge]="isWindows
    ? '''' : null"`. If the platform is Windows, we will add a new attribute named
    `round-badge`, and we will update our `example13/src/pages/contact/contact.ts`
    as mentioned in the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们注意到在`ion-badge`上，我们有一个条件属性`[attr.round-badge]="isWindows ? '''' : null"`。如果平台是Windows，我们将添加一个名为`round-badge`的新属性，并根据以下代码更新`example13/src/pages/contact/contact.ts`：'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We have defined the value for `isWindows` inside the constructor. Now, if we
    save all the files and navigate to `http://localhost:8100/?ionicplatform=windows`,
    we should see the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在构造函数中定义了`isWindows`的值。现在，如果我们保存所有文件并导航到`http://localhost:8100/?ionicplatform=windows`，我们应该看到以下内容：
- en: '![](img/00074.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: 'If we inspect the badge, we should see the attribute `round-badge` added:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查徽章，我们应该看到添加了属性`round-badge`：
- en: '![](img/00075.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: We can navigate to other platforms and validate the same.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以导航到其他平台并验证相同的内容。
- en: If we observe, the border of the badge container has a `0px` border radius.
    Now we will add the required overrides to the `example13/src/theme/variables.scss`
    in the `App Windows Variables` section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察，徽章容器的边框有`0px`的边框半径。现在我们将在`example13/src/theme/variables.scss`的`App Windows
    Variables`部分中添加所需的覆盖。
- en: 'The snippet would look like the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段如下所示：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, even for the Windows platform, we can see the `border-radius` being applied:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使对于Windows平台，我们也可以看到`border-radius`被应用：
- en: '![](img/00076.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: This is another way we can achieve platform-specific overrides.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以实现特定于平台的覆盖的另一种方式。
- en: Component-level overrides
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件级别的覆盖
- en: Whatever customizations we have seen so far are mostly at the page and platform
    level. What if we want to customize the components that are provided by Ionic
    to match our brand's look and feel?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所见到的自定义大多是在页面和平台级别上。如果我们想要自定义Ionic提供的组件以匹配我们品牌的外观和感觉呢？
- en: This can also be achieved quite easily thanks to the Ionic team, who have gone
    the extra mile in exposing the variable names to customize the properties.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以很容易地实现，这要归功于Ionic团队，他们已经在暴露变量名称以自定义属性的方面走了额外的一英里。
- en: 'If we navigate to [http://ionicframework.com/docs/theming/overriding-ionic-variables/](http://ionicframework.com/docs/theming/overriding-ionic-variables/),
    we will see a filterable table where we can find component-specific variables
    that we can override:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到[http://ionicframework.com/docs/theming/overriding-ionic-variables/](http://ionicframework.com/docs/theming/overriding-ionic-variables/)，我们将看到一个可过滤的表格，我们可以在其中找到可以覆盖的特定于组件的变量：
- en: '![](img/00077.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: Theme a sample component
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题一个示例组件
- en: To quickly check this out, we will implement the overlay loading bar on the
    home page of our current app. When a user lands on this tab, we will programmatically
    trigger the loading popup, and depending on the platform, we will customize the
    look and feel of the component to show that components can be customized as we
    please.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速检查这一点，我们将在当前应用的主页上实现覆盖加载栏。当用户登陆到这个标签页时，我们将以编程方式触发加载弹出窗口，并根据平台的不同，我们将自定义组件的外观和感觉，以展示组件可以根据我们的意愿进行自定义。
- en: 'Update `example13/src/pages/home/home.ts` as mentioned in the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下代码更新`example13/src/pages/home/home.ts`：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We have defined a function named `presentLoading` and invoked it inside the
    constructor. This will show the loading bar on page load.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`presentLoading`的函数，并在构造函数中调用它。这将在页面加载时显示加载条。
- en: If we save this page and navigate to the three different platforms, we will
    see styles specific to that particular platform. In this example, we are going
    to make all the loading bars look (almost) alike, irrespective of the platform.
    We are going to achieve the same by messing with the `SCSS` variables.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存此页面并导航到三个不同的平台，我们将看到特定于该特定平台的样式。在这个例子中，我们将使所有的加载条看起来（几乎）一样，不管平台如何。我们将通过搞乱`SCSS`变量来实现相同的效果。
- en: If we navigate to [http://ionicframework.com/docs/theming/overriding-ionic-variables/](http://ionicframework.com/docs/theming/overriding-ionic-variables/)
    and filter `loading-ios`, we will see a bunch of SCSS variables that are related
    to the loading popup styling. Similarly, if we search for `loading-md`, we will
    find SCSS variables related to Android. Finally, if we search for `loading-wp`,
    we find SCSS variables for the Windows platform.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到[http://ionicframework.com/docs/theming/overriding-ionic-variables/](http://ionicframework.com/docs/theming/overriding-ionic-variables/)并过滤`loading-ios`，我们将看到一堆与加载弹出样式相关的SCSS变量。同样，如果我们搜索`loading-md`，我们将找到与Android相关的SCSS变量。最后，如果我们搜索`loading-wp`，我们会找到Windows平台的SCSS变量。
- en: We will use the preceding variable names and customize the look and feel. Open
    `example13/src/theme/variables.scss`. After `@import 'ionic.globals';` is defined
    and before the colors map is defined, we will add the component-level overrides.
    If you are looking at the commented SCSS file, you will see a section named `Shared
    Variables`. This is where we add our variable overrides.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前面的变量名并自定义外观和感觉。打开`example13/src/theme/variables.scss`。在定义了`@import 'ionic.globals';`之后，在定义颜色映射之前，我们将添加组件级别的覆盖。如果你看的是被注释的SCSS文件，你会看到一个名为`Shared
    Variables`的部分。这是我们添加变量覆盖的地方。
- en: 'We have taken a few SCSS variables and modified their properties for each platform,
    as shown in the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取了一些SCSS变量，并修改了它们的属性，如下所示的代码：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, if we navigate to `http://localhost:8100/?ionicplatform=ios`, we should
    see the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们导航到`http://localhost:8100/?ionicplatform=ios`，我们应该会看到以下内容：
- en: '![](img/00078.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: 'If we navigate to `http://localhost:8100/?ionicplatform=android`, we should
    see the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到`http://localhost:8100/?ionicplatform=android`，我们应该会看到以下内容：
- en: '![](img/00079.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: 'And finally, if we navigate to `http://localhost:8100/?ionicplatform=windows`,
    we should see the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们导航到`http://localhost:8100/?ionicplatform=windows`，我们应该会看到以下内容：
- en: '![](img/00080.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: We can add custom CSS as well, to make all three of them look alike.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以添加自定义CSS，使它们看起来都一样。
- en: With this, we complete our overview of theming Ionic apps at platform level
    and page/component-level.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了对Ionic应用在平台级别和页面/组件级别进行主题设置的概述。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how to theme Ionic apps. We have also seen how
    we can easily implement styling at platform level and page/component-level.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何为Ionic应用设置主题。我们还看到了如何可以轻松地在平台级别和页面/组件级别实现样式。
- en: In the next chapter, we will be looking at Ionic Native. Ionic Native is what
    ngCordova is to Ionic 1\. We will dig deeper into integrating device features
    with an Ionic app.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下Ionic Native。Ionic Native对于Ionic 1来说就像ngCordova一样。我们将深入探讨如何将设备功能与Ionic应用集成。
