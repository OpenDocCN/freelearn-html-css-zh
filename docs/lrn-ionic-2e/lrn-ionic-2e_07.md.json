["```html\nionic start -a \"Riderr\" -i app.example.riderr riderr blank --v2\n\n```", "```html\nimport { Injectable } from '@angular/core'; \nimport { LoadingController } from 'ionic-angular'; \nimport { Http, Headers, Response, RequestOptions } from '@angular/http'; \nimport { InAppBrowser } from '@ionic-native/in-app-browser'; \nimport { Storage } from '@ionic/storage'; \nimport { Observable } from 'rxjs/Observable';\n\n```", "```html\n@Injectable() \nexport class UberAPI { \n  private client_secret: string = 'igVTjJAByDAVfKYgaNGX1MgvoWNmsuTI_OYJz7eq'; \n  private client_id: string = '9i2dK88Ovw0WvH3wmS-H0JA6ZF5Z2GP1'; \n  private redirect_uri: string = 'http://localhost/callback'; \n  private scopes: string = 'profile history places request'; \n  // we will be using the sandbox URL for our app \n  private UBERSANDBOXAPIURL = 'https://sandbox-api.uber.com/v1.2/'; \n  // private UBERAPIURL = 'https://api.uber.com/v1.2/'; \n  private TOKENKEY = 'token'; // name of the key in storage \n  private loader; // reference to the loader \n  private token; // copy of token in memory \n}\n\nclient_secret and client_id from the new app\u00a0you have registered with Uber. Do notice the scopes variable. It is here that we are requesting permission to access privileged content from Uber on the user's behalf.\n```", "```html\n//snipp -> Inside the class \n    constructor(private http: Http, \n    private storage: Storage, \n    private loadingCtrl: LoadingController, \n    private inAppBrowser: InAppBrowser) { \n      // fetch the token on load \n      this.storage.get(this.TOKENKEY).then((token) => { \n        this.token = token; \n      }); \n    }\n\n```", "```html\n// snipp \n  private createAuthorizationHeader(headers: Headers) { \n    headers.append('Authorization', 'Bearer ' + this.token); \n    headers.append('Accept-Language', 'en_US'); \n    headers.append('Content-Type', 'application/json'); \n  }\n\n```", "```html\n// snipp \n  isAuthenticated(): Observable<boolean> { \n    this.showLoader('Autenticating...'); \n    return new Observable<boolean>((observer) => { \n      this.storage.ready().then(() => { \n        this.storage.get(this.TOKENKEY).then((token) => { \n          observer.next(!!token); // !! -> converts truthy falsy to \n          boolean. \n          observer.complete(); \n          this.hideLoader(); \n        }); \n      }); \n    }); \n  }\n\n```", "```html\n// snipp \n  logout(): Observable<boolean> { \n    return new Observable<boolean>((observer) => { \n      this.storage.ready().then(() => { \n        this.storage.set(this.TOKENKEY, undefined); \n        this.token = undefined; \n        observer.next(true); \n        observer.complete(); \n      }); \n    }); \n  }\n\n```", "```html\n// snipp \nauth(): Observable<boolean> { \n    return new Observable<boolean>(observer => { \n      this.storage.ready().then(() => { \n        let browser = \n        this.inAppBrowser.create\n        (`https://login.uber.com/oauth/v2/authorize?           \n        client_id=${this.client_id}&\n        response_type=code&scope=${this.scopes}\n        &redirect_uri=${this.redirect_uri}`, '_blank',  \n        'location=no,clearsessioncache=yes,clearcache=yes'); \n        browser.on('loadstart').subscribe((event) => { \n          let url = event.url; \n\n          // console.log(url); \n          // URLS that get fired \n\n          // 1\\. https://login.uber.com/oauth/v2/authorize?\n          client_id=9i2dK88Ovw0WvH3wmS-\n          H0JA6ZF5Z2GP1&response_type=\n          code&scope=profile%20history%20places%20request\n\n          // 2\\. https://auth.uber.com/login/? \n          next_url=https%3A%2F%2Flogin.uber.com\n          %2Foauth%...520places%2520request\n          &state=Pa2ONzlEGsB4M41VLKOosWTlj9snJqJREyCFrEhfjx0%3D \n\n          // 3\\. https://login.uber.com/oauth/v2/authorize?\n          client_id=9i2dK88Ovw0WvH3wmS-\n          H0JA...ry%20places%20request&\n          state=Pa2ONzlEGsB4M41VLKOosWTlj9snJqJREyCFrEhfjx0%3D \n\n          // 4\\. http://localhost/callback?state=\n          Pa2ONzlEGsB4M41VLKOosWTlj9snJqJREyCFrEhfjx0%3D&\n          code=9Xu6ueaNhUN1uZVvqvKyaXPhMj8Bzb#_ \n\n          // we are interested in #4 \n          if (url.indexOf(this.redirect_uri) === 0) { \n            browser.close(); \n            let resp = (url).split(\"?\")[1]; \n            let responseParameters = resp.split(\"&\"); \n            var parameterMap: any = {}; \n\n            for (var i = 0; i < responseParameters.length; i++) { \n              parameterMap[responseParameters[i].split(\"=\")[0]] = \n              responseParameters[i].split(\"=\")[1]; \n            } \n\n            // console.log('parameterMap', parameterMap); \n            /* \n              { \n                \"state\": \n                \"W9Ytf2cicTMPMpMgwh9HfojKv7gQxxhrcOgwffqdrUM%3D\", \n                \"code\": \"HgSjzZHfF4GaG6x1vzS3D96kGtJFNB#_\" \n              } \n            */ \n\n            let headers = new Headers({ \n              'Content-Type': \"application/x-www-form-urlencoded\" \n            }); \n            let options = new RequestOptions({ headers: headers }); \n            let data = \n            `client_secret=${this.client_secret}\n            &client_id=${this.client_id}&grant_type=\n            authorization_code&redirect_uri=\n            ${this.redirect_uri}&code=${parameterMap.code}`; \n\n            return \n            this.http.post\n            ('https://login.uber.com/oauth/v2/token', data, options) \n              .subscribe((data) => { \n                let respJson: any = data.json(); \n                // console.log('respJson', respJson); \n                /* \n                  { \n                    \"last_authenticated\": 0, \n                    \"access_token\": \"snipp\", \n                    \"expires_in\": 2592000, \n                    \"token_type\": \"Bearer\", \n                    \"scope\": \"profile history places request\", \n                    \"refresh_token\": \"26pgA43ZvQkxEQi7qYjMASjfq6lg8F\" \n                  } \n                */ \n\n                this.storage.set(this.TOKENKEY, respJson.access_token); \n                this.token = respJson.access_token; // load it up in \n                memory \n                observer.next(true); \n                observer.complete(); \n              }); \n          } \n        }); \n      }); \n    }); \n  }\n\n```", "```html\n// snipp \n  getMe(): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.get(this.UBERSANDBOXAPIURL + 'me', { \n      headers: headers \n    }); \n  }\n\n```", "```html\n// snipp \n  getHistory(): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.get(this.UBERSANDBOXAPIURL + 'history', { \n      headers: headers \n    }); \n  }\n\n```", "```html\n// snipp \n  getPaymentMethods(): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.get(this.UBERSANDBOXAPIURL + 'payment-methods', { \n      headers: headers \n    }); \n  }\n\n```", "```html\n// snipp \n  getProducts(lat: Number, lon: Number): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.get(this.UBERSANDBOXAPIURL + 'products?latitude=' \n    + lat + '&longitude=' + lon, { \n      headers: headers \n    }); \n  }\n\n```", "```html\n//snipp \n  requestRideEstimates(start_lat: Number, end_lat: Number, start_lon: Number, end_lon: Number): Observable<Response> { \n    this.showLoader(); \n    // before booking \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.post(this.UBERSANDBOXAPIURL + 'requests/estimate', { \n      \"start_latitude\": start_lat, \n      \"start_longitude\": start_lon, \n      \"end_latitude\": end_lat, \n      \"end_longitude\": end_lon \n    }, { headers: headers }); \n  }\n\n```", "```html\n// snipp \n  requestRide(product_id: String, fare_id: String, start_lat: Number, end_lat: Number, start_lon: Number, end_lon: Number): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.post(this.UBERSANDBOXAPIURL + 'requests', { \n      \"product_id\": product_id, \n      \"fare_id\": fare_id, \n      \"start_latitude\": start_lat, \n      \"start_longitude\": start_lon, \n      \"end_latitude\": end_lat, \n      \"end_longitude\": end_lon \n    }, { headers: headers }); \n  }\n\n```", "```html\n//snipp \n  getCurrentRides(lat: Number, lon: Number): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.get(this.UBERSANDBOXAPIURL + 'requests/current', { \n      headers: headers \n    }); \n  }\n\n```", "```html\n// snipp \n  cancelCurrentRide(): Observable<Response> { \n    this.showLoader(); \n    let headers = new Headers(); \n    this.createAuthorizationHeader(headers); \n    return this.http.delete(this.UBERSANDBOXAPIURL + \n    'requests/current', { \n      headers: headers \n    }); \n  }\n\n```", "```html\n// snipp \nprivate showLoader(text?: string) { \n    this.loader = this.loadingCtrl.create({ \n      content: text || 'Loading...' \n    }); \n    this.loader.present(); \n  } \n\n  public hideLoader() { \n    this.loader.dismiss(); \n  }\n\n```", "```html\nionic generate page login\n\n```", "```html\nimport { NgModule, ErrorHandler } from '@angular/core'; \nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular'; \nimport { MyApp } from './app.component'; \nimport { HomePage } from '../pages/home/home'; \nimport { LoginPage } from '../pages/login/login'; \n\nimport { UberAPI } from '../services/uber.service'; \nimport { IonicStorageModule } from '@ionic/storage'; \n\nimport { StatusBar } from '@ionic-native/status-bar'; \nimport { SplashScreen } from '@ionic-native/splash-screen'; \n\n@NgModule({ \n  declarations: [ \n    MyApp, \n    HomePage \n    LoginPage \n  ], \n  imports: [ \n    IonicModule.forRoot(MyApp), \n    IonicStorageModule.forRoot() \n  ], \n  bootstrap: [IonicApp], \n  entryComponents: [ \n    MyApp, \n    HomePage, \n    LoginPage \n  ], \n  providers: [{ provide: ErrorHandler, useClass: IonicErrorHandler }, \n      UberAPI, \n    StatusBar, \n    SplashScreen, \n  ] \n}) \nexport class AppModule { }\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { Platform } from 'ionic-angular'; \nimport { StatusBar } from '@ionic-native/status-bar'; \nimport { SplashScreen } from '@ionic-native/splash-screen'; \n\nimport { LoginPage } from '../pages/login/login'; \n\n@Component({ \n  templateUrl: 'app.html' \n}) \nexport class MyApp { \n  rootPage = LoginPage; \n\n  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) { \n    platform.ready().then(() => { \n      statusBar.styleDefault(); \n      splashScreen.hide(); \n    }); \n  }\n\n```", "```html\n<ion-content padding text-center> \n  <img src=\"img/logo.png\" alt=\"Riderr Logo\"> \n  <h2>Welcome to The Riderr App</h2> \n  <h3>This app uses Uber APIs to help you book a cab</h3> \n  <br><br><br> \n    <button ion-button color=\"primary\" full (click)=\"auth()\">Login with Uber</button> \n</ion-content>\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { NavController } from 'ionic-angular'; \nimport { UberAPI } from '../../services/uber.service'; \nimport { HomePage } from '../home/home'; \n\n@Component({ \n  selector: 'page-login', \n  templateUrl: 'login.html' \n}) \nexport class LoginPage { \n\n  constructor(private api: UberAPI, private navCtrl: NavController) { \n    // check if the user is already authenticated \n    this.api.isAuthenticated().subscribe((isAuth) => { \n      if (isAuth) { \n        this.navCtrl.setRoot(HomePage); \n      } \n      // else relax! \n    }); \n  } \n\n  auth() { \n    this.api.auth().subscribe((isAuthSuccess) => { \n      this.navCtrl.setRoot(HomePage); \n    }, function(e) { \n      // handle this in a user friendly way. \n      console.log('Fail!!', e); \n    }); \n  } \n}\n\n```", "```html\n<ion-menu [content]=\"content\" (ionClose)=\"ionClosed()\" (ionOpen)=\"ionOpened()\"> \n    <ion-header> \n        <ion-toolbar> \n            <ion-title>Menu</ion-title> \n        </ion-toolbar> \n    </ion-header> \n    <ion-content> \n        <ion-list> \n            <button ion-item menuClose \n            (click)=\"openPage(bookRidePage)\"> \n                Book Ride \n            </button> \n            <button ion-item menuClose (click)=\"openPage(profilePage)\"> \n                Profile \n            </button> \n            <button ion-item menuClose (click)=\"openPage(historyPage)\"> \n                Rides \n            </button> \n            <button ion-item menuClose \n            (click)=\"openPage(paymentMethodsPage)\"> \n                Payment Methods \n            </button> \n            <button ion-item menuClose (click)=\"logout()\"> \n                Logout \n            </button> \n        </ion-list> \n    </ion-content> \n</ion-menu> \n<ion-nav #content [root]=\"rootPage\" swipeBackEnabled=\"false\"></ion-nav>\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { BookRidePage } from '../book-ride/book-ride'; \nimport { ProfilePage } from '../profile/profile'; \nimport { HistoryPage } from '../history/history'; \nimport { PaymentMethodsPage } from '../payment-methods/payment-methods'; \nimport { LoginPage } from '../login/login'; \nimport { UberAPI } from '../../services/uber.service'; \nimport { NavController, Events } from 'ionic-angular'; \nimport { ViewChild } from '@angular/core'; \n\n@Component({ \n  selector: 'page-home', \n  templateUrl: 'home.html' \n}) \nexport class HomePage { \n\n  private rootPage; \n  private bookRidePage; \n  private profilePage; \n  private historyPage; \n  private paymentMethodsPage; \n\n  @ViewChild(BookRidePage) bookRide : BookRidePage; \n\n  constructor(private uberApi: UberAPI, \n    private navCtrl: NavController, \n    public events: Events) { \n    this.rootPage = BookRidePage; \n\n    this.bookRidePage = BookRidePage; \n    this.profilePage = ProfilePage; \n    this.historyPage = HistoryPage; \n    this.paymentMethodsPage = PaymentMethodsPage; \n  } \n\n  // http://stackoverflow.com/a/38760731/1015046 \n  ionOpened() { \n    this.events.publish('menu:opened', ''); \n  } \n\n  ionClosed() { \n    this.events.publish('menu:closed', ''); \n  } \n\n  ngAfterViewInit() { \n    this.uberApi.isAuthenticated().subscribe((isAuth) => { \n      if (!isAuth) { \n        this.navCtrl.setRoot(LoginPage); \n        return; \n      } \n    }); \n  } \n\n  openPage(p) { \n    this.rootPage = p; \n  } \n\n  logout(){ \n    this.uberApi.logout().subscribe(() => { \n      this.navCtrl.setRoot(LoginPage); \n    }); \n  } \n}\n\n```", "```html\nionic generate page bookRide\n\n```", "```html\n<ion-header> \n    <ion-navbar> \n        <button ion-button menuToggle> \n            <ion-icon name=\"menu\"></ion-icon> \n        </button> \n        <ion-title>Riderr</ion-title> \n        <ion-buttons end> \n            <button *ngIf=\"isRideinProgress\" ion-button color=\"danger\" \n            (click)=\"cancelRide()\"> \n                Cancel Ride \n            </button> \n        </ion-buttons> \n    </ion-navbar> \n</ion-header> \n<ion-content> \n    <div #map id=\"map\"></div> \n    <div class=\"prods-wrapper\"> \n        <div *ngIf=\"!isRideinProgress\"> \n            <h3 *ngIf=\"!products\">Fetching Products</h3> \n            <ion-grid *ngIf=\"products\"> \n                <ion-row> \n                    <ion-col *ngFor=\"let p of products\" [ngClass]=\"\n                    {'selected' : p.isSelected}\"> \n                        <div class=\"br\" (click)=\"productClick(p)\"> \n                            <h3>{{p.display_name.replace('uber', '')}}\n                            </h3> \n                        </div> \n                    </ion-col> \n                </ion-row> \n            </ion-grid> \n        </div> \n        <div *ngIf=\"isRideinProgress\"> \n            <h3 text-center>Ride In Progress</h3> \n            <p text-center>Ideally the ride information would be \n            displayed here.</p> \n        </div> \n    </div> \n</ion-content>\n\n```", "```html\npage-book-ride { \n    #map { \n        height: 88%; \n    } \n    .prods-wrapper { \n        height: 12%; \n    } \n    .br { \n        padding: 3px; \n        text-align: center; \n    } \n    ion-col.selected { \n        color: #eee; \n        background: #333; \n    } \n    ion-col { \n        background: #eee; \n        color: #333; \n        border: 1px solid #ccc; \n    } \n    ion-col:last-child .br { \n        border: none; \n    } \n}\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { UberAPI } from '../../services/uber.service'; \nimport { \n  Platform, \n  NavController, \n  AlertController, \n  ModalController, \n  Events \n} from 'ionic-angular'; \nimport { Diagnostic } from '@ionic-native/diagnostic'; \nimport { Geolocation } from '@ionic-native/geolocation'; \nimport { \n  GoogleMaps, \n  GoogleMap, \n  GoogleMapsEvent, \n  LatLng, \n  CameraPosition, \n  MarkerOptions, \n  Marker \n} from '@ionic-native/google-maps';  \nimport { AutocompletePage } from '../auto-complete/auto-complete';\n\n```", "```html\n// snipp \n  private map: GoogleMap; \n  private products; \n  private fromGeo; \n  private toGeo; \n  private selectedProduct; \n  private isRideinProgress: boolean = false; \n  private currentRideInfo; \n\n```", "```html\n  // snipp \nconstructor(private uberApi: UberAPI, \n    private platform: Platform, \n    private navCtrl: NavController, \n    private alertCtrl: AlertController, \n    private modalCtrl: ModalController, \n    private diagnostic: Diagnostic, \n    private geoLocation: Geolocation, \n    private googleMaps: GoogleMap, \n    public events: Events) { }\n\n```", "```html\n// snipp \nngAfterViewInit() { \n    //https://github.com/mapsplugin/cordova-plugin-googlemaps/issues/1140 \n    this.platform.ready().then(() => { \n      this.requestPerms(); \n\n      //https://github.com/driftyco/ionic/issues/9942#issuecomment-\n      280941997 \n      this.events.subscribe('menu:opened', () => { \n        this.map.setClickable(false); \n      }); \n      this.events.subscribe('menu:closed', () => { \n        this.map.setClickable(true); \n      }); \n    }); \n  }\n\n```", "```html\n// snipp \nprivate requestPerms() { \n    let that = this; \n    function success(statuses) { \n      for (var permission in statuses) { \n        switch (statuses[permission]) { \n          case that.diagnostic.permissionStatus.GRANTED: \n            // console.log(\"Permission granted to use \" + permission); \n            that.fetCords(); \n            break; \n          case that.diagnostic.permissionStatus.NOT_REQUESTED: \n            console.log(\"Permission to use \" + permission + \" has not \n            been requested yet\"); \n            break; \n          case that.diagnostic.permissionStatus.DENIED: \n            console.log(\"Permission denied to use \" + permission + \" - \n            ask again?\"); \n            break; \n          case that.diagnostic.permissionStatus.DENIED_ALWAYS: \n            console.log(\"Permission permanently denied to use \" + \n            permission + \" - guess we won't be using it then!\"); \n            break; \n        } \n      } \n    } \n\n    function error(e) { \n      console.log(e); \n    } \n\n    this.diagnostic.requestRuntimePermissions([ \n      that.diagnostic.permission.ACCESS_FINE_LOCATION, \n      that.diagnostic.permission.ACCESS_COARSE_LOCATION \n    ]).then(success).catch(error); \n  }\n\n```", "```html\n// snipp \n  private isExecuted = false; \n  private fetCords() { \n    // this needs to be called only once \n    // since we are requesting 2 permission \n    // this will be called twice. \n    // hence the isExecuted \n    if (this.isExecuted) return; \n    this.isExecuted = true; \n    // maps api key : AzaSyCZhTJB1kFAP70RuwDts6uso9e3DCLdRWs \n    // ionic plugin add cordova-plugin-googlemaps --variable \n    API_KEY_FOR_ANDROID=\"AzaSyCZhTJB1kFAP70RuwDts6uso9e3DCLdRWs\" \n    this.geoLocation.getCurrentPosition().then((resp) => { \n      // resp.coords.latitude \n      // resp.coords.longitude \n      // console.log(resp); \n      this.fromGeo = resp.coords; \n      // Get the products at this location \n      this.uberApi.getProducts(this.fromGeo.latitude, \n      this.fromGeo.longitude).subscribe((data) => { \n        this.uberApi.hideLoader(); \n        this.products = data.json().products; \n      }); \n      // Trip in progress? \n      this \n        .uberApi \n        .getCurrentRides(this.fromGeo.latitude, this.fromGeo.longitude) \n        .subscribe((crrRides) => { \n          this.currentRideInfo = crrRides.json(); \n          this.isRideinProgress = true; \n          this.uberApi.hideLoader(); \n          // check for existing rides before processing \n          this.loadMap(this.fromGeo.latitude, this.fromGeo.longitude); \n        }, (err) => { \n          if (err.status === 404) { \n            // no rides availble \n          } \n          this.isRideinProgress = false; \n          this.uberApi.hideLoader(); \n          // check for existing rides before processing \n          this.loadMap(this.fromGeo.latitude, this.fromGeo.longitude); \n        }); \n    }).catch((error) => { \n      console.log('Error getting location', error); \n    }); \n  }\n\n```", "```html\n// snipp \nprivate loadMap(lat: number, lon: number) { \n    let element: HTMLElement = document.getElementById('map'); \n    element.innerHTML = ''; \n    this.map = undefined; \n    this.map = this.googleMaps.create(element); \n    let crrLoc: LatLng = new LatLng(lat, lon); \n    let position: CameraPosition = { \n      target: crrLoc, \n      zoom: 18, \n      tilt: 30 \n    }; \n\n    this.map.one(GoogleMapsEvent.MAP_READY).then(() => { \n      // move the map's camera to position \n      this.map.moveCamera(position); // works on iOS and Android \n\n      let markerOptions: MarkerOptions = { \n        position: crrLoc, \n        draggable: true, \n        title: this.isRideinProgress ? 'Ride in Progess' : 'Select \n        Destination >', \n        infoClick: (() => { \n          if (!this.isRideinProgress) { \n            this.selectDestination(); \n          } \n        }), \n        markerClick: (() => { \n          if (!this.isRideinProgress) { \n            this.selectDestination(); \n          } \n        }) \n      }; \n\n      this.map.addMarker(markerOptions) \n        .then((marker: Marker) => { \n          marker.showInfoWindow(); \n        }); \n\n      // a rare bug \n      // loader doesn't hide \n      this.uberApi.hideLoader(); \n    });\n}\n\n```", "```html\n// snipp \n  private productClick(product) { \n    // console.log(product); \n    // set the active product in the UI \n    for (let i = 0; i < this.products.length; i++) { \n      if (this.products[i].product_id === product.product_id) { \n        this.products[i].isSelected = true; \n      } else { \n        this.products[i].isSelected = false; \n      } \n    } \n\n    this.selectedProduct = product; \n  }\n\n```", "```html\n// snipp \nprivate selectDestination() { \n    if (this.isRideinProgress) { \n      this.map.setClickable(false); \n      let alert = this.alertCtrl.create({ \n        title: 'Only one ride!', \n        subTitle: 'You can book only one ride at a time.', \n        buttons: ['Ok'] \n      }); \n      alert.onDidDismiss(() => { \n        this.map.setClickable(true); \n      }); \n      alert.present(); \n    } else { \n      if (!this.selectedProduct) { \n        // since the alert has a button \n        // we need to first stop the map from  \n        // listening. Then process the alert \n        // then renable \n        this.map.setClickable(false); \n        let alert = this.alertCtrl.create({ \n          title: 'Select Ride', \n          subTitle: 'Select a Ride type to continue (Pool or Go or X)', \n          buttons: ['Ok'] \n        }); \n        alert.onDidDismiss(() => { \n          this.map.setClickable(true); \n        }); \n        alert.present(); \n      } else { \n        this.map.setClickable(false); \n        let modal = this.modalCtrl.create(AutoCompletePage); \n        modal.onDidDismiss((data) => { \n          this.map.setClickable(true); \n          this.toGeo = data; \n          this \n            .uberApi \n            .requestRideEstimates(this.fromGeo.latitude, \n             this.toGeo.latitude, this.fromGeo.longitude, \n             this.toGeo.longitude) \n            .subscribe((data) => { \n              this.uberApi.hideLoader(); \n              this.processRideFares(data.json()); \n            }); \n\n        }); \n        modal.present(); \n      } \n    } \n  }\n\n```", "```html\n// snipp \nprivate processRideFares(fareInfo: any) { \n    // ask the user if the fare is okay,  \n    // if yes, book the cab \n    // else, do nothing \n    console.log('fareInfo', fareInfo); \n    this.map.setClickable(false); \n    let confirm = this.alertCtrl.create({ \n      title: 'Book Ride?', \n      message: 'The fare for this ride would be ' \n      + fareInfo.fare.value \n      + ' ' + fareInfo.fare.currency_code + '.\\n And it will take         \n      approximately ' + \n      (fareInfo.trip.duration_estimate / 60) + ' mins.', \n      buttons: [ \n        { \n          text: 'No', \n          handler: () => { \n            this.map.setClickable(true); \n          } \n        }, \n        { \n          text: 'Yes', \n          handler: () => { \n            this.map.setClickable(true); \n            this \n              .uberApi \n              .requestRide(this.selectedProduct.product_id, \n               fareInfo.fare.fare_id, this.fromGeo.latitude, \n                this.toGeo.latitude, this.fromGeo.longitude, \n                this.toGeo.longitude) \n              .subscribe((rideInfo) => { \n                this.uberApi.hideLoader(); \n                // console.log('rideInfo', rideInfo.json()); \n                // Since we are making requests to the sandbox url \n                // the request will always be in processing. \n                // Once the request has been submitted, we need to  \n                // keep polling the getCurrentRides() API \n                // to get the ride information \n                // WE ARE NOT GOING TO DO THAT! \n                this.isRideinProgress = true; \n                this.currentRideInfo = rideInfo.json(); \n              }); \n          } \n        } \n      ] \n    }); \n    confirm.present(); \n  }\n\n```", "```html\n// snipp \n  private cancelRide() { \n    this \n      .uberApi \n      .cancelCurrentRide() \n      .subscribe((cancelInfo) => { \n        this.uberApi.hideLoader(); \n        this.isRideinProgress = false; \n        this.currentRideInfo = undefined; \n      }); \n  }\n\n```", "```html\nionic generate page autoComplete\n\n```", "```html\nimport { AutoCompletePage } from '../pages/auto-complete/auto-complete';\n\n```", "```html\n<ion-header> \n    <ion-toolbar> \n        <ion-title>Enter address</ion-title> \n        <ion-searchbar id=\"q\" [(ngModel)]=\"autocomplete.query\" [showCancelButton]=\"true\" (ionInput)=\"updateSearch()\" (ionCancel)=\"dismiss()\"></ion-searchbar> \n    </ion-toolbar> \n</ion-header> \n<ion-content> \n    <ion-list> \n        <!-- (click) is buggy at times, hmmm? --> \n        <ion-item *ngFor=\"let item of autocompleteItems\" tappable (click)=\"chooseItem(item)\"> \n            {{ item.description }} \n        </ion-item> \n    </ion-list> \n</ion-content>\n\n```", "```html\nimport { Component, NgZone } from '@angular/core'; \nimport { ViewController } from 'ionic-angular'; \n\n@Component({ \n  templateUrl: 'auto-complete.html' \n}) \n\n// http://stackoverflow.com/a/40854384/1015046 \nexport class AutocompletePage { \n  autocompleteItems; \n  autocomplete; \n  ctr: HTMLElement = document.getElementById(\"q\"); \n  service = new google.maps.places.AutocompleteService(); \n  geocoder = new google.maps.Geocoder(); \n\n  constructor(public viewCtrl: ViewController, private zone: NgZone) { \n    this.autocompleteItems = []; \n    this.autocomplete = { \n      query: '' \n    }; \n  } \n\n  dismiss() { \n    this.viewCtrl.dismiss(); \n  } \n\n  chooseItem(item: any) { \n    // we need the lat long \n    // so we will make use of the  \n    // geocoder service \n    this.geocoder.geocode({ \n      'placeId': item.place_id \n    }, (responses) => { \n      // send the place name \n      // & latlng back \n      this.viewCtrl.dismiss({ \n        description: item.description, \n        latitude: responses[0].geometry.location.lat(), \n        longitude: responses[0].geometry.location.lng() \n      }); \n    }); \n  } \n\n  updateSearch() { \n    if (this.autocomplete.query == '') { \n      this.autocompleteItems = []; \n      return; \n    } \n    let that = this; \n    this.service.getPlacePredictions({ \n      input: that.autocomplete.query, \n      componentRestrictions: { \n        country: 'IN' \n      } \n    }, (predictions, status) => { \n      that.autocompleteItems = []; \n      that.zone.run(function() { \n        predictions = predictions || []; \n        predictions.forEach(function(prediction) { \n          that.autocompleteItems.push(prediction); \n        }); \n      }); \n    }); \n  } \n}\n\n```", "```html\nionic generate page profile \nionic generate page history \nionic generate page paymentMethods\n\n```", "```html\nimport { NgModule, ErrorHandler } from '@angular/core'; \nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular'; \nimport { MyApp } from './app.component'; \nimport { HomePage } from '../pages/home/home'; \nimport { LoginPage } from '../pages/login/login'; \nimport { BookRidePage } from '../pages/book-ride/book-ride'; \nimport { AutocompletePage } from '../pages/auto-complete/auto-complete'; \nimport { ProfilePage } from '../pages/profile/profile'; \nimport { HistoryPage } from '../pages/history/history'; \nimport { PaymentMethodsPage } from '../pages/payment-methods/payment-methods'; \n\nimport { UberAPI } from '../services/uber.service'; \nimport { Storage } from '@ionic/storage'; \n\nimport { StatusBar } from '@ionic-native/status-bar'; \nimport { SplashScreen } from '@ionic-native/splash-screen'; \nimport { Diagnostic } from '@ionic-native/diagnostic'; \n\n// export function provideStorage() { \n//   return new Storage();  \n// } \n\n@NgModule({ \n  declarations: [ \n    MyApp, \n    HomePage, \n    LoginPage, \n    BookRidePage, \n    AutocompletePage, \n    ProfilePage, \n    HistoryPage, \n    PaymentMethodsPage \n  ], \n  imports: [ \n    IonicModule.forRoot(MyApp) \n  ], \n  bootstrap: [IonicApp], \n  entryComponents: [ \n    MyApp, \n    HomePage, \n    LoginPage, \n    BookRidePage, \n    AutocompletePage, \n    ProfilePage, \n    HistoryPage, \n    PaymentMethodsPage \n  ], \n  providers: [{ provide: ErrorHandler, useClass: IonicErrorHandler }, \n    UberAPI, \n    // {provide: Storage, useFactory: provideStorage}, \n    Storage, \n    StatusBar, \n    SplashScreen, \n    Diagnostic \n  ] \n}) \nexport class AppModule { }\n\n```", "```html\n<ion-header> \n    <ion-navbar>s \n        <button ion-button menuToggle> \n            <ion-icon name=\"menu\"></ion-icon> \n        </button> \n        <ion-title>Riderr</ion-title> \n    </ion-navbar> \n</ion-header> \n<ion-content padding> \n    <h2 text-center>Your Profile</h2> \n    <hr> \n    <ion-list *ngIf=\"profile\"> \n        <ion-item> \n            <ion-avatar item-left> \n                <img src=\"img/{{profile.picture}}\"> \n            </ion-avatar> \n            <h2>{{profile.first_name}} {{profile.last_name}}</h2> \n            <h3>{{profile.email}}</h3> \n            <p>{{profile.promo_code}}</p> \n        </ion-item> \n    </ion-list> \n</ion-content>\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { UberAPI } from '../../services/uber.service'; \n\n@Component({ \n  selector: 'page-profile', \n  templateUrl: 'profile.html' \n}) \nexport class ProfilePage { \n  private profile; \n  constructor(private uberApi: UberAPI) { } \n\n  ngAfterViewInit() { \n    this.uberApi.getMe().subscribe((data) => { \n      // console.log(data.json()); \n      this.profile = data.json(); \n      // need a clean way to fix this! \n      this.uberApi.hideLoader(); \n    }, (err) => { \n      console.log(err); \n      this.uberApi.hideLoader(); \n    }); \n  } \n}\n\n```", "```html\n<ion-header> \n    <ion-navbar> \n        <button ion-button menuToggle> \n            <ion-icon name=\"menu\"></ion-icon> \n        </button> \n        <ion-title>Riderr</ion-title> \n    </ion-navbar> \n</ion-header> \n<ion-content padding> \n    <h2 text-center>Your Ride History</h2> \n    <hr> \n    <h3 text-center *ngIf=\"total\">Showing last {{count}} of {{total}} rides</h3> \n    <ion-list> \n        <ion-item *ngFor=\"let h of history\"> \n            <h2>{{ h.start_city.display_name }}</h2> \n            <h3>Completed at {{ h.end_time | date: 'hh:mm a'}}</h3> \n            <p>Distance : {{ h.distance }} Miles</p> \n        </ion-item> \n    </ion-list> \n</ion-content>\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { UberAPI } from '../../services/uber.service'; \n\n@Component({ \n  selector: 'page-history', \n  templateUrl: 'history.html' \n}) \nexport class HistoryPage { \n  history: Array<any>; \n  total: Number; \n  count: Number; \n\n  constructor(private uberApi: UberAPI) { } \n\n  ngAfterViewInit() { \n    this.uberApi.getHistory().subscribe((data) => { \n      // console.log(data.json()); \n      let d = data.json(); \n      this.history = d.history; \n      this.total = d.count; \n      this.count = d.history.length; \n\n      // need a clean way to fix this! \n      this.uberApi.hideLoader(); \n    }, (err) => { \n      console.log(err); \n      this.uberApi.hideLoader(); \n    }); \n  } \n}\n\n```", "```html\n<ion-header> \n    <ion-navbar> \n        <button ion-button menuToggle> \n            <ion-icon name=\"menu\"></ion-icon> \n        </button> \n        <ion-title>Riderr</ion-title> \n    </ion-navbar> \n</ion-header> \n<ion-content padding> \n    <h2 text-center>Your Payment Methods</h2> \n    <hr> \n    <ion-list *ngIf=\"payment_methods\"> \n        <ion-item *ngFor=\"let pm of payment_methods\"> \n            <h2>{{ pm.type }}</h2> \n            <h3>{{ pm.description }}</h3> \n        </ion-item> \n    </ion-list> \n</ion-content>\n\n```", "```html\nimport { Component } from '@angular/core'; \nimport { UberAPI } from '../../services/uber.service'; \n\n@Component({ \n  selector: 'page-payment-methods', \n  templateUrl: 'payment-methods.html' \n}) \nexport class PaymentMethodsPage { \n  payment_methods; \n\n  constructor(private uberApi: UberAPI) { } \n\n  ngAfterViewInit() { \n    this.uberApi.getPaymentMethods().subscribe((data) => { \n      // console.log(data.json()); \n      this.payment_methods = data.json().payment_methods; \n      // need a clean way to fix this! \n      this.uberApi.hideLoader(); \n    }, (err) => { \n      console.log(err); \n      this.uberApi.hideLoader(); \n    }); \n  } \n}\n\n```", "```html\nionic plugin add cordova.plugins.diagnostic \nionic plugin add cordova-plugin-geolocation \nionic plugin add cordova-plugin-inappbrowser \nionic plugin add cordova-sqlite-storage \nionic plugin add cordova-custom-config\n\n```", "```html\nnpm install --save @ionic-native/google-maps \nnpm install --save @ionic-native/Geolocation \nnpm install --save @ionic-native/diagnostic \nnpm install --save @ionic-native/in-app-browser \nnpm install --save @ionic/storage\n\n```", "```html\nionic plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID=\" AIzaSyCZhTJB1kFAP70RuwDtt6uso9e3DCLdRWs\" --variable API_KEY_FOR_IOS=\"AIzaSyCZhTJB1kFAP70RuwDtt6uso9e3DCLdRWs\"\n\n```", "```html\n<script src=\"img/js?v=3&libraries=places&key=AIzaSyDmFpX80vy5p0YTuXGAgVJzWTkZfDqPl_s\"></script>\n\n```", "```html\nnpm install typings --global\n\n```", "```html\ntypings install dt~google.maps --global --save\n\n```", "```html\n{ \n  \"compilerOptions\": { \n    \"allowSyntheticDefaultImports\": true, \n    \"declaration\": false, \n    \"emitDecoratorMetadata\": true, \n    \"experimentalDecorators\": true, \n    \"lib\": [ \n      \"dom\", \n      \"es2015\" \n    ], \n    \"module\": \"es2015\", \n    \"moduleResolution\": \"node\", \n    \"sourceMap\": true, \n    \"target\": \"es5\" \n  }, \n  \"include\": [ \n    \"src/**/*.ts\", \n    \"typings/*.d.ts\" \n  ], \n  \"exclude\": [ \n    \"node_modules\" \n  ], \n  \"compileOnSave\": false, \n  \"atom\": { \n    \"rewriteTsconfig\": false \n  } \n}\n\n```", "```html\n<platform name=\"android\"> \n        <allow-intent href=\"market:*\" /> \n        <config-file target=\"AndroidManifest.xml\" parent=\"/*\"> \n            <uses-permission android:name=\"android.permission.INTERNET\" \n            /> \n            <uses-permission \n            android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> \n            <uses-permission \n            android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /> \n        </config-file> \n    </platform>\n\n```", "```html\n<widget id=\"app.example.riderr\" version=\"0.0.1\"   >\n\n```", "```html\n{ \n    \"status\": \"accepted\", \n    \"product_id\": \"18ba4578-b11b-49a6-a992-a132f540b027\", \n    \"destination\": { \n        \"latitude\": 17.445949, \n        \"eta\": 34, \n        \"longitude\": 78.350058 \n    }, \n    \"driver\": { \n        \"phone_number\": \"+910000000000\", \n        \"rating\": 4.6, \n        \"picture_url\": \n        \"https:\\/\\/d1w2poirtb3as9.cloudfront.net\\\n        /605de11c25139a1de469.jpeg\", \n        \"name\": \"John Doe\", \n        \"sms_number\": null \n    }, \n    \"pickup\": { \n        \"latitude\": 17.4908514, \n        \"eta\": 13, \n        \"longitude\": 78.3375952 \n    }, \n    \"request_id\": \"1beaae05-8d43-4711-951c-25dd5293c2f9\", \n    \"location\": { \n        \"latitude\": 17.4875583, \n        \"bearing\": 338, \n        \"longitude\": 78.33165 \n    }, \n    \"vehicle\": { \n        \"make\": \"Maruti Suzuki\", \n        \"picture_url\": null, \n        \"model\": \"Swift Dzire\", \n        \"license_plate\": \"XXXXXXXX\" \n    }, \n    \"shared\": false \n}\n\n```"]