- en: Ionic 2 Migration Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 2迁移指南
- en: 'In this chapter, we are going to take a look at migrating an existing Ionic
    1 app to Ionic 2/Ionic 3\. We are first going to build a simple Todo app using
    Ionic 1 and then understand how we would go about migrating the same to Ionic
    2:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何将现有的Ionic 1应用迁移到Ionic 2/Ionic 3。我们首先将使用Ionic 1构建一个简单的Todo应用，然后了解如何将其迁移到Ionic
    2：
- en: Why migration?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要迁移？
- en: Building a simple Ionic 1 Todo app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的Ionic 1 Todo应用
- en: Migration game plan
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移计划
- en: Migrating the Ionic 1 Todo app to Ionic 2
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Ionic 1 Todo应用迁移到Ionic 2
- en: This migration guide will still be valid if you would like to migrate from Ionic
    1 to Ionic 3 as well. Refer to [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3* to better understand the changes in Ionic 3.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要从Ionic 1迁移到Ionic 3，本迁移指南仍然有效。请参考[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic
    3*，以更好地了解Ionic 3中的变化。
- en: Why migration?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要迁移？
- en: So far, in this book, we have gone through the process of building apps with
    Ionic 2, without the knowledge of Ionic 1\. But as far as the real world goes,
    there are a few thousand apps already deployed with Ionic 1\. Those apps can take
    advantage of the improved features of Ionic 2 to make the app experience better.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们已经学习了使用Ionic 2构建应用的过程，但并不了解Ionic 1。但就现实世界而言，已经有数千个应用程序使用了Ionic
    1部署。这些应用可以利用Ionic 2的改进功能来提高应用体验。
- en: Migrating code in the world of software is a daunting task. In our case, the
    migration is even more complex because we are not just upgrading the libraries
    of Ionic 1 to Ionic 2 but upgrading the language itself on which these are written
    for example, ES5 to ES6 and TypeScript.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件世界中迁移代码是一项艰巨的任务。在我们的情况下，迁移更加复杂，因为我们不仅要将Ionic 1的库升级到Ionic 2，还要将这些库所写的语言本身升级，例如，从ES5到ES6和TypeScript。
- en: The new ecosystem for JavaScript apps primarily revolves around ES6, TypeScript,
    and Web Components. Adapting to these to take advantage of the latest technologies
    is what Angular 2 has done. Ionic 2 has also done this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript应用程序的新生态主要围绕ES6、TypeScript和Web组件展开。适应这些以利用最新技术就是Angular 2所做的。Ionic
    2也做到了这一点。
- en: IMHO, with so many changes, migrating a fully functioning app from Ionic 1 to
    Ionic 2 should be taken with a pinch of salt and needs to be done only if necessary.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，有这么多的变化，将一个完全运行良好的应用程序从Ionic 1迁移到Ionic 2应该谨慎对待，只有在必要时才需要这样做。
- en: '*If things work, why change?*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果事情顺利，为什么要改变呢？*'
- en: When it comes to changing an app base from Ionic 1 to Ionic 2, some call it
    migration, but I call it rewriting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及将应用程序基础从Ionic 1更改为Ionic 2时，有些人称之为迁移，但我称之为重写。
- en: Todo app - Ionic v1
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Todo应用 - Ionic v1
- en: 'In this section, we are going to build a Todo app using Ionic 1\. The app we
    are going to build is going to have a piece of almost all the features of a typical
    Ionic app. We are going to have:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Ionic 1构建一个Todo应用。我们将构建的应用几乎包含了典型Ionic应用的所有特性。我们将拥有：
- en: Routing
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: Persistence
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久性
- en: Local notifications
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地通知
- en: REST API integration
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API集成
- en: The first page in the two-page Todo app will be a login page and on the second
    page, we work with Todos. We are going to use `LocalStorage` to save the authentication
    status as well as the Todos that we are going to create. We are also going to
    show local notifications when a user creates, updates, or deletes a todo. Showing
    local notifications is more along the lines of interfacing an Ionic app with device
    features. And finally a REST API request to [https://www.ipify.org/](https://www.ipify.org/)
    to fetch the IP address of the device we are accessing this app from.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 两页Todo应用中的第一页将是登录页面，第二页将是我们处理Todos的页面。我们将使用`LocalStorage`来保存认证状态以及我们将创建的Todos。当用户创建、更新或删除待办事项时，我们还将显示本地通知。显示本地通知更多地是与设备功能进行接口的Ionic应用。最后，我们将发出对[https://www.ipify.org/](https://www.ipify.org/)的REST
    API请求，以获取我们从中访问此应用的设备的IP地址。
- en: 'The final app is going to look like the following image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最终应用程序将如下图所示：
- en: '![](img/00109.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: Building the app
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: 'Now that we have an idea as to what we are going to build, let us get started.
    Create a folder named `chapter8` and open a new command prompt/terminal inside
    the `chapter8` folder and run:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个建设的想法，让我们开始吧。创建一个名为`chapter8`的文件夹，并在`chapter8`文件夹内打开一个新的命令提示符/终端并运行：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We are scaffolding a blank project using Ionic v1\. Do notice that we are not
    using the `--v2` flag. Once the project is scaffolded, open it in your favorite
    text editor.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用Ionic v1搭建一个空白项目。请注意，我们没有使用`--v2`标志。一旦项目被搭建，就在你喜欢的文本编辑器中打开它。
- en: 'Before we start working on the two pages, we are going to create the required
    services. We are going to create five services:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理这两个页面之前，我们将创建所需的服务。我们将创建五个服务：
- en: 'LocalStorage Service: To interact with LocalStorage'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LocalStorage服务：与LocalStorage进行交互
- en: 'LocalNotification Service: To interact with `$cordovaLocalNotification`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地通知服务：与`$cordovaLocalNotification`进行交互
- en: 'IP Service: To interact with [https://api.ipify.org](https://api.ipify.org)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP服务：与[https://api.ipify.org](https://api.ipify.org)进行交互
- en: 'Auth Service: To manage authentication'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证服务：管理认证
- en: 'Todos Service: To manage Todos'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todos服务：管理Todos
- en: 'For that, we will create another file named `services.js` inside the `www/js`
    folder. Open `todoapp_v1/www/js/services.js` and add the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将在`www/js`文件夹内创建另一个名为`services.js`的文件。打开`todoapp_v1/www/js/services.js`并添加以下代码：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `LS` service exposes a wrapper to the HTML5 `localStorage`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`LS`服务公开了对HTML5 `localStorage`的包装器。'
- en: 'Next, add a wrapper for the local notification service in the same file, after
    the `LS` service:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在同一文件中为本地通知服务添加一个包装器，在`LS`服务之后：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will add the required dependencies from `ngCordova` at the end of writing
    the code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码结束时，我们将从`ngCordova`添加所需的依赖项。
- en: 'Next, we will add the `IP` service to interact with [https://api.ipify.org](https://api.ipify.org)
    and get the IP address of the user. Append the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加`IP`服务以与[https://api.ipify.org](https://api.ipify.org)进行交互并获取用户的IP地址。追加以下代码：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And finally, the two key services to manage authentication and todos. Add the
    following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，管理身份验证和待办事项的两个关键服务。添加以下代码：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With this, we are done with the required services.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了所需的服务。
- en: 'Since this is going to be a two-page app, we will be working with the State
    router to define and manage routes. Open `todoapp_v1/www/js/app.js` and add the
    following `config` section under the `run` method:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这将是一个双页面应用程序，我们将使用State路由器来定义和管理路由。打开`todoapp_v1/www/js/app.js`并在`run`方法下添加以下`config`部分：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding snippet we have defined two routes - Login and Home. Now we
    need to create the required templates and controllers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述片段中，我们定义了两个路由 - 登录和主页。现在我们需要创建所需的模板和控制器。
- en: 'Create a new file named `controllers.js` inside `www/js` folder. Open `todoapp_v1/www/js/controllers.js`
    and the `LoginCtrl` as shown in the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`www/js`文件夹中创建一个名为`controllers.js`的新文件。打开`todoapp_v1/www/js/controllers.js`和`LoginCtrl`，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we are checking if the user is already authenticated, if yes, we redirect
    the user to the home page. The `login()` takes the user's credentials and validates
    them with `AUTH.login().` If the authentication fails, we show an alert using
    `$ionicPopup` service.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在检查用户是否已经经过身份验证，如果是，我们将用户重定向到主页。`login()`接受用户的凭据并使用`AUTH.login()`验证它们。如果身份验证失败，我们将使用`$ionicPopup`服务显示警报。
- en: 'Next, we will add the `HomeCtrl` as shown in the following code::'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将按照以下代码添加`HomeCtrl`：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We start off by checking authentication. Next, we fetch all the todos. We have
    defined four methods on `HomeCtrl` scope: `add(),``update(),``delete(),` and `logout().`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查身份验证。接下来，我们获取所有的待办事项。我们在`HomeCtrl`范围上定义了四种方法：`add()`，`update()`，`delete()`和`logout()`。
- en: Add method is used to add a new todo. We show a popup using `$ionicPopup` service,
    where the user enters the Todo text. Once the todo is added, we push a local notification
    using the `LN` service.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 添加方法用于添加新的待办事项。我们使用`$ionicPopup`服务显示一个弹出窗口，用户在其中输入待办事项文本。一旦待办事项被添加，我们使用`LN`服务推送一个本地通知。
- en: Update method updates the todo's `isCompleted` property in the local storage
    and pushes a local notification indicating the same.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 更新方法在本地存储中更新待办事项的`isCompleted`属性，并推送一个指示相同内容的本地通知。
- en: Delete method shows a confirm box asking the user to confirm the deletion activity.
    If the user confirms the deletion, we remove the todo from the collection and
    persist the collection back to the local storage. To complete the deletion process,
    we push a local notification indicating that the todo is deleted.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 删除方法显示一个确认框，询问用户确认删除操作。如果用户确认删除，我们将从集合中删除待办事项并将集合持久化到本地存储中。为了完成删除过程，我们推送一个本地通知指示待办事项已被删除。
- en: And finally the logout method clears the authentication status and redirects
    the user back to the login page.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，注销方法清除身份验证状态并将用户重定向回登录页面。
- en: 'Now that we are done with the controllers, we will work on the required templates.
    Create a new folder named `templates` inside the `www` folder. Inside the templates
    folder, create a file named `login.html`. Open `todoapp_v1/www/templates/login.html`
    and update it as shown in the following code::'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了控制器，我们将开始处理所需的模板。在`www`文件夹中创建一个名为`templates`的新文件夹。在模板文件夹中，创建一个名为`login.html`的文件。打开`todoapp_v1/www/templates/login.html`并按照以下代码进行更新：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have a simple login form. In the footer, we will be displaying the IP address
    of the user. To get the IP address of the user, we are going to update the `run`
    method in `todoapp_v1/www/js/app.js` as shown in the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个简单的登录表单。在页脚中，我们将显示用户的IP地址。为了获取用户的IP地址，我们将按照以下代码更新`todoapp_v1/www/js/app.js`中的`run`方法：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We are storing the IP address on the root scope.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将IP地址存储在根作用域上。
- en: 'Next, create a new file named `home.html` inside the `www/templates` folder.
    Update `todoapp_v1/www/templates/home.html` as shown shown in the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`www/templates`文件夹中创建一个名为`home.html`的新文件。按照以下代码更新`todoapp_v1/www/templates/home.html`：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When a user marks a `todo` as completed, for visual effect, we are adding a
    class named `strike`. Open `todoapp_v1/www/css/style.css` and update it as shown in
    the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户标记`todo`为已完成时，为了视觉效果，我们添加了一个名为`strike`的类。打开`todoapp_v1/www/css/style.css`并按照以下代码进行更新：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With this, we are done with implementing the required code. Now, we are going
    to add the required dependencies and update `www/index.html`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了实现所需代码。现在，我们将添加所需的依赖项并更新`www/index.html`。
- en: 'First, we are going to add `ngCordova` ([http://ngcordova.com/](http://ngcordova.com/))
    support to our project. Run the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为我们的项目添加`ngCordova`([http://ngcordova.com/](http://ngcordova.com/))支持。运行以下命令：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, the local notification plugin: ([http://ngcordova.com/docs/plugins/localNotification/](http://ngcordova.com/docs/plugins/localNotification/))
    cordova plugin add: [https://github.com/katzer/cordova-plugin-local-notifications.git](https://github.com/katzer/cordova-plugin-local-notifications.git).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是本地通知插件：([http://ngcordova.com/docs/plugins/localNotification/](http://ngcordova.com/docs/plugins/localNotification/))
    cordova plugin add: [https://github.com/katzer/cordova-plugin-local-notifications.git](https://github.com/katzer/cordova-plugin-local-notifications.git)。
- en: 'Now, we will update `www/index.html` to add the `ngCordova` dependency. Add
    the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更新`www/index.html`以添加`ngCordova`依赖项。添加以下内容：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, add references to `services.js` and `controllers.js:`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加对`services.js`和`controllers.js`的引用：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After `app.js` has been included. Next, will update the body section as shown
    in the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`已经被包含之后。接下来，将按照以下代码更新body部分：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have added `<ion-nav-view></ion-nav-view>` to support routing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了`<ion-nav-view></ion-nav-view>`以支持路由。
- en: 'Now, open `todoapp_v1/www/js/app.js` and update the starter module definition
    to: `angular.module(''starter'', [''ionic'', ''ngCordova''])`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`todoapp_v1/www/js/app.js`并更新启动模块定义为：`angular.module('starter', ['ionic',
    'ngCordova'])`
- en: 'That is it! Now all we need to do is add a platform and start testing the Todo
    app built with Ionic v1:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们需要做的就是添加一个平台并开始测试使用Ionic v1构建的待办事项应用程序：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And then run the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And we should see the Login page come up:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到登录页面出现：
- en: '![](img/00110.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: 'Once successfully logged in, we should be able to add a new todo:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，我们应该能够添加新的待办事项：
- en: '![](img/00111.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: 'We can update the todo or delete the todo:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更新待办事项或删除待办事项：
- en: '![](img/00112.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: 'When a todo is added, updated, or deleted, we push a local notification:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加、更新或删除待办事项时，我们会推送本地通知：
- en: '![](img/00113.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: With this, we complete building an Ionic 1 Todo app.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了构建Ionic 1待办事项应用程序。
- en: Migration plan
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移计划
- en: Now that we are done with our Ionic v1 Todo app, we will be looking at migrating
    the same to Ionic 2.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了Ionic v1待办事项应用程序，我们将开始考虑将其迁移到Ionic 2。
- en: 'Note: If you were planning to migrate from Ionic 1 to Ionic 3, you would be
    following a similar approach.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您计划从Ionic 1迁移到Ionic 3，您将遵循类似的方法。
- en: 'The plan is simple; we are going to scaffold a new blank template using the
    `--v2` flag and start putting stuff together. The following table would be a good
    starting point:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 计划很简单；我们将使用`--v2`标志搭建一个新的空白模板，并开始组合东西。以下表格将是一个很好的起点：
- en: '| **Component** | **Ionic 1** | **Ionic 2** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **Ionic 1** | **Ionic 2** |'
- en: '| Ionic starter template | Blank | Blank |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| Ionic起始模板 | 空白 | 空白 |'
- en: '| Bootstrap application | ng-app | `NgModule` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 引导应用程序 | ng-app | `NgModule` |'
- en: '| Navigation | State router | `NavController` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 导航 | 状态路由器 | `NavController` |'
- en: '| Components | Templates and controllers | `@Component` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 模板和控制器 | `@Component` |'
- en: '| Services/factory | Service provider | `@Injectable Provider` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 服务/工厂 | 服务提供者 | `@Injectable Provider` |'
- en: '| Persistence | Local storage | Storage API |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 持久性 | 本地存储 | Storage API |'
- en: '| Device interaction | `NgCordova` | Ionic Native |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 设备交互 | `NgCordova` | Ionic Native |'
- en: '| Local notifications | `$cordovaLocalNotification` service | LocalNotifications
    class |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 本地通知 | `$cordovaLocalNotification`服务 | LocalNotifications类 |'
- en: Now that we are aware of the high level mapping, we will start by scaffolding
    a new blank template in v2.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了高级映射，我们将从头开始在v2中搭建一个新的空白模板。
- en: 'Inside the `chapter8` folder, open a new command prompt/terminal and run:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapter8`文件夹中，打开一个新的命令提示符/终端并运行：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the scaffolding is completed, `cd` into the `todoapp_v2` folder. We will
    be generating the required components and providers. Run the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成搭建后，`cd`进入`todoapp_v2`文件夹。我们将生成所需的组件和提供者。运行以下命令：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will generate the login page. Next, the three providers:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成登录页面。接下来，三个提供者：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since we are using the Storage API from Ionic 2, we are not going to create
    a separate provider for that.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在Ionic 2中使用了Storage API，我们不会为此创建单独的提供者。
- en: Now that we have the required pages and providers, we will bootstrap the app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了所需的页面和提供者，我们将引导应用程序。
- en: 'Open `todoapp_v2/src/app/app.module.ts` and the required imports:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`todoapp_v2/src/app/app.module.ts`并进行所需的导入：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we will update the `@NgModule` as shown in the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将按照以下代码更新`@NgModule`：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As we did with the Ionic 1 app, we will install the required dependencies at
    the end.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在Ionic 1应用程序中所做的那样，我们将在最后安装所需的依赖项。
- en: Open `todoapp_v2/src/app/app.component.ts` and update the `rootPage` to `LoginPage`.
    We would update the `import { HomePage }` from `'../pages/home/home';` to `import
    { LoginPage }` from `'../pages/login/login';` and `rootPage = HomePage;` to `rootPage
    = LoginPage;`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`todoapp_v2/src/app/app.component.ts`并将`rootPage`更新为`LoginPage`。我们将从`'../pages/home/home';`更新`import
    { HomePage }`到`import { LoginPage }`和`rootPage = HomePage;`到`rootPage = LoginPage;`
- en: 'Now, we will update the providers. Open `todoapp_v2/src/providers/ip.ts` and
    update it as shown in the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更新提供者。打开`todoapp_v2/src/providers/ip.ts`并按照以下代码进行更新：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, open `todoapp_v2/src/providers/auth.ts`. Update it as shown as following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`todoapp_v2/src/providers/auth.ts`。按照以下内容进行更新：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And finally, open `todoapp_v2/src/providers/auth.ts` and update it as following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，打开`todoapp_v2/src/providers/auth.ts`并按照以下内容进行更新：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding three providers are quite simple. They replicate the same logic
    as shown in Ionic 1, except these are written in TypeScript, following Angular
    2 structure.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的三个提供者非常简单。它们复制了Ionic 1中所示的相同逻辑，只是这些是用TypeScript编写的，遵循Angular 2的结构。
- en: 'Now, we are going to work on the pages. First is the login page. Open `todoapp_v2/src/pages/login/login.ts`
    and update it as in the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在页面上进行工作。首先是登录页面。打开`todoapp_v2/src/pages/login/login.ts`并按照以下代码进行更新：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The logic in this file is quite similar to the one from `LoginCtrl` in Ionic
    1 app. Next we will update `todoapp_v2/src/pages/login/login.html` as shown in
    the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中的逻辑与Ionic 1应用程序中的`LoginCtrl`的逻辑非常相似。接下来，我们将按照以下代码更新`todoapp_v2/src/pages/login/login.html`：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The page structure is exactly the same as Ionic 1 except for the way in which
    we interact with the components; `[(ngModel)]` syntax for two-way data binding
    `(ng-model)` and `(click)` syntax for event handling on the button `(ng-click).`
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 页面结构与Ionic 1完全相同，只是我们与组件交互的方式不同；`[(ngModel)]`语法用于双向数据绑定`(ng-model)`和`(click)`语法用于按钮上的事件处理`(ng-click).`
- en: Do notice the class positive on `ion-header`. We will use this to give almost
    the same look and feel for the page as we did for the Ionic 1 app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`ion-header`上的positive类。我们将使用这个类来为页面提供几乎相同的外观和感觉，就像我们在Ionic 1应用程序中所做的那样。
- en: 'Now we are going to work on `todoapp_v2/src/pages/home/home.ts`. Update `todoapp_v2/src/pages/home/home.ts`
    as shown in the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在`todoapp_v2/src/pages/home/home.ts`上进行工作。按照以下代码更新`todoapp_v2/src/pages/home/home.ts`：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The same logic of `HomeCtrl` is replicated here. The only key difference is
    that `notify()` is used as a wrapper to present Local Notifications, unlike in
    Ionic 1 app, where we had a service for the same.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里复制了`HomeCtrl`的相同逻辑。唯一的关键区别是`notify()`被用作包装器来呈现本地通知，不像在Ionic 1应用程序中，我们为此使用了一个服务。
- en: 'The updated `todoapp_v2/src/pages/home/home.html` would be as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的 `todoapp_v2/src/pages/home/home.html` 如下所示：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, the styles. Open `todoapp_v2/src/app/app.scss` and add the following CSS
    rules:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是样式。打开 `todoapp_v2/src/app/app.scss` 并添加以下 CSS 规则：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This wraps our coding part. Now, we will install the required dependencies.
    First storage-related dependencies, run the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了我们的编码部分。现在，我们将安装所需的依赖项。首先是与存储相关的依赖项，运行以下命令：
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, local notification dependencies:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是本地通知的依赖项：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This should take care of the required dependencies.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该满足所需的依赖关系。
- en: 'Now, we will add a platform and test the app:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个平台并测试应用程序：
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And then run the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And you should see the Login page come up:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该看到登录页面弹出：
- en: '![](img/00114.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: 'The home page that manages Todos:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 管理待办事项的主页：
- en: '![](img/00115.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: 'Finally, the notifications that get pushed:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是推送的通知：
- en: '![](img/00116.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: With this, we have completed the migration of our Ionic 1 Todo App to Ionic
    2\. Hopefully, this example has given some idea on how to approach the migration
    of Ionic 1 apps to Ionic 2 as well as Ionic 3.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们已经完成了将我们的 Ionic 1 Todo 应用程序迁移到 Ionic 2。希望这个例子给出了一些关于如何将 Ionic 1 应用程序迁移到
    Ionic 2 以及 Ionic 3 的想法。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone through the process of building a simple Ionic
    1 Todo App. Next, we prepared a rough migration plan and followed the same to
    migrate the Ionic 1 Todo app to Ionic 2\. We have seen some key differences between
    the Ionic 1 and Ionic 2 app, when it comes to migration and taking advantage of
    the latest features such as Ionic Native and Storage API.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了构建一个简单的 Ionic 1 Todo 应用程序的过程。接下来，我们准备了一个粗略的迁移计划，并按照相同的计划将 Ionic
    1 Todo 应用程序迁移到 Ionic 2。我们已经看到了在迁移和利用最新功能（如 Ionic Native 和 Storage API）方面，Ionic
    1 和 Ionic 2 应用程序之间的一些关键区别。
- en: Do check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3* to see the difference between Ionic 2 and Ionic 3.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[第11章](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8)，*Ionic 3*，以了解
    Ionic 2 和 Ionic 3 之间的区别。
- en: In the next chapter, we will be testing the Ionic 2 Todo App that we have migrated.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将测试我们迁移的 Ionic 2 Todo 应用程序。
