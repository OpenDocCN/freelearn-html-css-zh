["```html\ndescribe('Component: MyApp Component', () => { \n  it('should be created', () => { \n     // assertions go here \n  }); \n});\n\n```", "```html\nexpect(1 + 1).toBe(2); \nexpect(!!true).toBeTruthy();\n\n```", "```html\nnpm install -g karma-cli\n\n```", "```html\nnpm install --save-dev @types/jasmine@2.5.41 @types/node html-loader jasmine karma karma-webpack ts-loader karma-sourcemap-loader karma-jasmine karma-jasmine-html-reporter angular2-template-loader karma-chrome-launcher null-loader karma-htmlfile-reporter\n\n```", "```html\nvar webpack = require('webpack'); \nvar path = require('path'); \n\nmodule.exports = {\n    devtool: 'inline-source-map',\n    resolve: {\n        extensions: ['.ts', '.js']\n    },\n    module: {\n        rules: [{\n            test: /.ts$/,\n            loaders: [{\n                loader: 'ts-loader'\n            }, 'angular2-template-loader']\n        }, {\n            test: /.html$/,\n            loader: 'html-loader'\n        }, {\n            test: /.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n            loader: 'null-loader'\n        }]\n    },\n    plugins: [\n        new webpack.ContextReplacementPlugin(\n            // The (|/) piece accounts for \n            path separators in *nix and Windows\n            /angular(|/)core(|/)\n            (esm(|/)src|src)(|/)linker/,\n            root('./src'), // location of your src\n            {} // a map of your routes\n        )\n    ]\n};\n\nfunction root(localPath) { \n    return path.resolve(__dirname, localPath); \n}\n\n```", "```html\nError.stackTraceLimit = Infinity; \n\nrequire('core-js/es6'); \nrequire('core-js/es7/reflect'); \n\nrequire('zone.js/dist/zone'); \nrequire('zone.js/dist/long-stack-trace-zone'); \nrequire('zone.js/dist/proxy'); \nrequire('zone.js/dist/sync-test'); \nrequire('zone.js/dist/jasmine-patch'); \nrequire('zone.js/dist/async-test'); \nrequire('zone.js/dist/fake-async-test'); \n\nvar appContext = require.context('../src', true, /.spec.ts/); \n\nappContext.keys().forEach(appContext); \n\nvar testing = require('@angular/core/testing'); \nvar browser = require('@angular/platform-browser-dynamic/testing'); \n\ntesting.TestBed.initTestEnvironment(browser.BrowserDynamicTestingModule, browser.platformBrowserDynamicTesting());\n\n```", "```html\nvar webpackConfig = require('./webpack.test.js'); \nmodule.exports = function(config) { \n    var _config = { \n        basePath: '', \n        frameworks: ['jasmine'], \n        files: [ \n            { pattern: './karma-test-shim.js', watched: true } \n        ], \n        preprocessors: { \n            './karma-test-shim.js': ['webpack', 'sourcemap'] \n        }, \n        webpack: webpackConfig, \n        webpackMiddleware: { \n            stats: 'errors-only' \n        }, \n        webpackServer: { \n            noInfo: true \n        }, \n        reporters: ['html', 'dots'], \n        htmlReporter: { \n            outputFile: './unit-test-report.html', \n            pageTitle: 'Todo App Unit Tests', \n            subPageTitle: 'Todo App Unit Tests Report', \n            groupSuites: true, \n            useCompactStyle: true, \n            useLegacyStyle: true \n        }, \n        port: 9876, \n        colors: true, \n        logLevel: config.LOG_INFO, \n        autoWatch: true, \n        browsers: ['Chrome'], \n        singleRun: true \n    }; \n    config.set(_config); \n};\n\n```", "```html\nimport { async, TestBed } from '@angular/core/testing'; \nimport { IonicModule } from 'ionic-angular'; \nimport { StatusBar } from '@ionic-native/status-bar'; \nimport { SplashScreen } from '@ionic-native/splash-screen'; \nimport { MyApp } from './app.component'; \nimport { LoginPage } from '../pages/login/login'; \n\ndescribe('Component: MyApp Component', () => { \n  let fixture; \n  let component; \n\n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      declarations: [MyApp], \n      imports: [ \n        IonicModule.forRoot(MyApp) \n      ], \n      providers: [ \n        StatusBar, \n        SplashScreen \n      ] \n    }) \n  })); \n\n  beforeEach(() => { \n    fixture = TestBed.createComponent(MyApp); \n    component = fixture.componentInstance; \n  }); \n\n  it('should be created', () => { \n    expect(component instanceof MyApp).toBe(true); \n  }); \n\n  it('should set the rootPage as LoginPage', () => { \n    expect(component.rootPage).toBe(LoginPage); \n  }); \n\n});\n\n```", "```html\nimport { async, TestBed } from '@angular/core/testing'; \nimport { IonicModule, NavController, AlertController } from 'ionic-angular'; \nimport { IonicStorageModule } from '@ionic/storage'; \nimport { MyApp } from '../../app/app.component'; \nimport { LoginPage } from './login'; \nimport { Auth } from '../../providers/auth'; \nimport { IP } from '../../providers/ip'; \n\ndescribe('Component: Login Component', () => { \n  let fixture; \n  let component; \n\n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      declarations: [ \n        MyApp, \n        LoginPage \n      ], \n      imports: [ \n        IonicModule.forRoot(MyApp), \n        IonicStorageModule.forRoot() \n      ], \n      providers: [ \n        Auth, \n        IP, \n        NavController, \n        AlertController \n      ] \n    }) \n  })); \n\n  beforeEach(() => { \n    fixture = TestBed.createComponent(LoginPage); \n    component = fixture.componentInstance; \n  }); \n\n  it('should be created', () => { \n    expect(component instanceof LoginPage).toBe(true); \n  }); \n\n  it('should initialize `userIp` to ''', () => { \n    expect(component.userIp).toBe(''); \n  }); \n\n  it('should initialize `user`', () => { \n    expect(component.user.email).toBe('a@a.com'); \n    expect(component.user.password).toBe('a'); \n  }); \n\n});\n\n```", "```html\nimport { async, TestBed } from '@angular/core/testing'; \nimport { IonicModule, NavController, AlertController } from 'ionic-angular'; \nimport { MyApp } from '../../app/app.component'; \nimport { HomePage } from './home'; \nimport { LoginPage } from '../login/login'; \nimport { IonicStorageModule } from '@ionic/storage'; \nimport { LocalNotifications } from '@ionic-native/local-notifications'; \nimport { LocalNotificationsMocks } from '../../mocks/localNotificationMocks'; \nimport { Auth } from '../../providers/auth'; \nimport { IP } from '../../providers/ip'; \nimport { Todos } from '../../providers/todos'; \n\ndescribe('Component: Home Component', () => { \n  let fixture; \n  let component; \n  let localNotif; \n\n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      declarations: [ \n        MyApp, \n        HomePage, \n        LoginPage \n      ], \n      imports: [ \n        IonicModule.forRoot(MyApp), \n        IonicStorageModule.forRoot() \n      ], \n      providers: [ \n        Auth, \n        Todos, \n        IP, \n        { provide: LocalNotifications, useClass: \n          LocalNotificationsMocks }, \n        NavController, \n        AlertController \n      ] \n    }) \n  })); \n\n  beforeEach(() => { \n    fixture = TestBed.createComponent(HomePage); \n    component = fixture.componentInstance; \n    localNotif = new LocalNotificationsMocks(); \n  }); \n\n  it('should be created', () => { \n    expect(component instanceof HomePage).toBe(true); \n  }); \n\n  it('should initialize `userIp` to ''', () => { \n    expect(component.userIp).toBe(''); \n  }); \n\n  it('should initialize `userTodos`', () => { \n    expect(component.userTodos.length).toBe(0); \n  }); \n\n  // this is how we mock and test \n  // ionic-native plugins \n  it('should return null when a new notification is scheduled', () => { \n    expect(component.notify()).toBe(localNotif.schedule()); \n  }); \n});\n\n```", "```html\nexport class LocalNotificationsMocks { \n  public schedule(config: any): void { \n    // https://github.com/driftyco/ionic-\n    native/blob/5aa484c024d7cac3b6628c5dd8694395e8a29ed4/src/%40ionic-\n    native/plugins/local-notifications/index.ts#L160 \n    return; \n  } \n}\n\n```", "```html\nimport { async, TestBed, inject } from '@angular/core/testing'; \nimport { IP } from './ip'; \nimport { Headers, Http, HttpModule, BaseRequestOptions, XHRBackend, Response, ResponseOptions } from '@angular/http'; \nimport { MockBackend, MockConnection } from '@angular/http/testing'; \n\n// https://kendaleiv.com/angular-2-mockbackend-service-testing-template-using-testbed/ \ndescribe('Service: IPService', () => { \n  let service; \n  let http; \n\n  const mockResponse = { \n    ip: '11:22:33:44' \n  }; \n\n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      imports: [ \n        HttpModule \n      ], \n      providers: [ \n        MockBackend, \n        BaseRequestOptions, \n        { \n          provide: Http, \n          useFactory: (backend, options) => new Http(backend, options), \n          deps: [MockBackend, BaseRequestOptions] \n        }, \n        IP \n      ] \n    }) \n  })); \n\n  it('should construct', async(inject( \n    [IP, MockBackend], (ipService, mockBackend) => { \n      expect(ipService).toBeDefined(); \n    }))); \n\n  it('should get IP equal to `11:22:33:44`', async(inject( \n    [IP, MockBackend], (ipService, mockBackend) => { \n\n      mockBackend.connections.subscribe(conn => { \n        conn.mockRespond(new Response(new ResponseOptions({ body: JSON.stringify(mockResponse) }))); \n      }); \n\n      const result = ipService.get(); \n\n      result.subscribe((res) => { \n        expect(res.json()).toEqual({ \n          ip: '11:22:33:44' \n        }); \n      }); \n    }))); \n});\n\n```", "```html\nimport { async, TestBed, inject } from '@angular/core/testing'; \nimport { Auth } from './auth'; \nimport { IonicStorageModule } from '@ionic/storage'; \nimport { StorageMocks } from '../mocks/storageMocks'; \n\nlet validUser = { \n  email: 'a@a.com', \n  password: 'a' \n} \n\nlet inValidUser = { \n  email: 'a@a.com', \n  password: 'b' \n} \n\ndescribe('Service: AuthService', () => { \n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      imports: [ \n        IonicStorageModule.forRoot() \n      ], \n      providers: [ \n        Auth, \n        { provide: IonicStorageModule, useClass: StorageMocks }, \n      ] \n    }); \n\n  })); \n\n  it('should construct', async(inject( \n    [Auth, IonicStorageModule], (authService, ionicStorageModule) => { \n      expect(authService).toBeDefined(); \n    }))); \n\n  it('should login user with valid credentials', async(inject( \n    [Auth, IonicStorageModule], (authService, ionicStorageModule) => { \n      expect(authService.login(validUser)).toBeTruthy(); \n    }))); \n\n  it('should not login user with invalid credentials', async(inject( \n    [Auth, IonicStorageModule], (authService, ionicStorageModule) => { \n      expect(authService.login(inValidUser)).toBeFalsy(); \n    }))); \n\n  it('should return the auth status as true', async(inject( \n    [Auth, IonicStorageModule], (authService, ionicStorageModule) => { \n      // log the user in! \n      authService.login(validUser); \n      let result = authService.isAuthenticated(); \n\n      result.then((status) => { \n        expect(status).toBeTruthy(); \n      }) \n    }))); \n\n  it('should set auth to falsy on logout', async(inject( \n    [Auth, IonicStorageModule], (authService, ionicStorageModule) => { \n      // log the user in! \n      let authStatus = authService.login(validUser); \n      // check if login is successful \n      expect(authStatus).toBeTruthy(); \n\n      // trigger logout \n      let result = authService.logout(); \n      result.then((status) => { \n        expect(status).toBeFalsy(); \n      }); \n    }))); \n\n});\n\n```", "```html\nexport class StorageMocks { \n  // mock store   \n  store = {}; \n\n  public get(key) { \n    return new Promise((resolve, reject) => { \n      resolve(this.store[key]); \n    }); \n  } \n\n  public set(key, value){ \n    return new Promise((resolve, reject) => { \n      this.store[key] = value; \n      resolve(this.store[key]); \n    }); \n  } \n}\n\n```", "```html\nimport { async, TestBed, inject } from '@angular/core/testing'; \nimport { Todos } from './todos'; \nimport { IonicStorageModule } from '@ionic/storage'; \nimport { StorageMocks } from '../mocks/storageMocks'; \n\nlet todos = [{ \n  text: 'Buy Eggs', \n  isCompleted: false \n}]; \n\ndescribe('Service: TodoService', () => { \n  beforeEach(async(() => { \n    TestBed.configureTestingModule({ \n      imports: [ \n        IonicStorageModule.forRoot() \n      ], \n      providers: [ \n        Todos, \n        { provide: IonicStorageModule, useClass: StorageMocks }, \n      ] \n    }); \n\n  })); \n\n  it('should construct', async(inject( \n    [Todos, IonicStorageModule], (todoService, ionicStorageModule) => { \n      expect(todoService).toBeDefined(); \n    }))); \n\n  it('should fetch 0 todos initally', async(inject( \n    [Todos, IonicStorageModule], (todoService, ionicStorageModule) => { \n      let result = todoService.get(); \n      result.then((todos) => { \n        expect(todos).toBeFalsy(); \n      }); \n    }))); \n\n  it('should save a todo', async(inject( \n    [Todos, IonicStorageModule], (todoService, ionicStorageModule) => { \n      let result = todoService.set(todos); \n      result.then((_todos) => { \n        expect(_todos).toEqual(todos); \n        expect(_todos.length).toEqual(1); \n      }); \n    }))); \n\n   it('should update a todo', async(inject( \n    [Todos, IonicStorageModule], (todoService, ionicStorageModule) => { \n      let todo = todos[0]; \n      todo.isCompleted = true; \n      todos[0] = todo; \n      let result = todoService.set(todos); \n      result.then((_todos) => { \n        expect(_todos[0].isCompleted).toBeTruthy(); \n      }); \n    })));  \n\n   it('should delete a todo', async(inject( \n    [Todos, IonicStorageModule], (todoService, ionicStorageModule) => { \n      todos.splice(0, 1); \n      let result = todoService.set(todos); \n      result.then((_todos) => { \n        expect(_todos.length).toEqual(0); \n      }); \n    })));  \n\n});\n\n```", "```html\n\"test\": \"karma start --reporters html ./test-config/karma.conf.js\"\n\n```", "```html\nnpm test\n\n```", "```html\ntodoapp_v2 npm test\n\n> ionic-hello-world@ test /chapter9/todoapp_v2\n> karma start --reporters html ./test-config/karma.conf.js\n\nwebpack: Compiled successfully.\nwebpack: Compiling...\nts-loader: Using typescript@2.0.9 and \n    /chapter9/todoapp_v2/tsconfig.json\n\nwebpack: Compiled successfully.\n26 03 2017 23:26:55.201:INFO [karma]: Karma v1.5.0 server started \n    at http://0.0.0.0:9876/\n26 03 2017 23:26:55.204:INFO [launcher]: Launching browser Chrome \n    with unlimited concurrency\n26 03 2017 23:26:55.263:INFO [launcher]: Starting browser Chrome\n26 03 2017 23:26:57.491:INFO [Chrome 56.0.2924 (Mac OS X 10.12.1)]: \n    Connected on socket DHM_DNgQakmVtg7RAAAA with id 44904930\n\n```", "```html\nnpm install protractor --save-dev\n\n```", "```html\nnpm install -g webdriver-manager\nwebdriver-manager update\n\n```", "```html\nnpm install jasmine-spec-reporter ts-node connect @types/jasmine@2.5.41 \n@types/node --save-dev\n\n```", "```html\nvar SpecReporter = require('jasmine-spec-reporter').SpecReporter; \n\nexports.config = { \n    allScriptsTimeout: 11000, \n    directConnect: true, \n    capabilities: { \n        'browserName': 'chrome' \n    }, \n    framework: 'jasmine', \n    jasmineNodeOpts: { \n        showColors: true, \n        defaultTimeoutInterval: 30000, \n        print: function() {} \n    }, \n    specs: ['./e2e/**/*.e2e-spec.ts'], \n    baseUrl: 'http://localhost:8100', \n    useAllAngular2AppRoots: true, \n    beforeLaunch: function() { \n\n        require('ts-node').register({ \n            project: 'e2e' \n        }); \n\n        require('connect')().use(require('serve-static')\n        ('www')).listen(8100); \n\n    }, \n    onPrepare: function() { \n        jasmine.getEnv().addReporter(new SpecReporter()); \n    } \n}\n\n```", "```html\n{ \n  \"compilerOptions\": { \n    \"sourceMap\": true, \n    \"declaration\": false, \n    \"moduleResolution\": \"node\", \n    \"emitDecoratorMetadata\": true, \n    \"experimentalDecorators\": true, \n    \"lib\": [ \n      \"es2016\" \n    ], \n    \"outDir\": \"../dist/out-tsc-e2e\", \n    \"module\": \"commonjs\", \n    \"target\": \"es6\", \n    \"types\":[ \n      \"jasmine\", \n      \"node\" \n    ] \n  } \n}\n\n```", "```html\nimport { browser, element, by, ElementFinder } from 'protractor'; \n\n// https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/ \ndescribe('Check Navigation : ', () => { \n\n  beforeEach(() => { \n    browser.get(''); \n  }); \n\n  it('should have `Todo App (v2)` as the title text on the Login Page', \n  () => { \n      expect(element(by.css('.toolbar-title')) \n        .getAttribute('innerText')) \n        .toContain('Todo App (v2)'); \n\n  }); \n\n  it('should be able to login with prefilled credentials', () => { \n    element(by.css('.scroll-content > button')).click().then(() => { \n      // Wait for the page transition \n      browser.driver.sleep(3000); \n\n      // check if we have really redirected \n      expect(element(by.css('.scroll-content > button')) \n        .getAttribute('innerText')) \n        .toContain('ADD TODO'); \n\n      expect(element(by.css('h2.text-center')) \n        .getAttribute('innerText')) \n        .toContain('No Todos'); \n\n      expect(element(by.css('ion-footer > h3')) \n        .getAttribute('innerText')) \n        .toContain('Your IP : 183.82.232.178'); \n\n    }); \n\n  }); \n\n  it('should be able to logout', () => { \n     element(by.css('ion-buttons > button')).click().then(() => { \n\n      // Wait for the page transition \n      browser.driver.sleep(3000); \n\n      // check if we have really redirected \n      expect(element(by.css('.toolbar-title')) \n        .getAttribute('innerText')) \n        .toContain('Todo App (v2)'); \n    }); \n  }); \n\n});\n\n```", "```html\nprotractor\n\n```", "```html\n// snipp\nError message: Could not find update-config.json. Run 'webdriver-\nmanager update' to download binaries.\n// snipp\n\n```", "```html\n./node_modules/protractor/bin/webdriver-manager update\n\n```", "```html\n![](img/00118.jpeg)  todoapp_v2 ./node_modules/.bin/protractor\n[00:37:27] I/launcher - Running 1 instances of WebDriver\n[00:37:27] I/direct - Using ChromeDriver directly...\nSpec started\n\n Check Navigation :\n![](img/00119.jpeg) should have `Todo App (v2)` as the title text on the Login Page\n![](img/00119.jpeg) should be able to login with prefilled credentials\n![](img/00119.jpeg) should be able to logout\n\nExecuted 3 of 3 specs SUCCESS in 11 secs.\n[00:37:40] I/launcher - 0 instance(s) of WebDriver still running\n[00:37:40] I/launcher - chrome #01 passed\n\n```", "```html\nionic build\n\n```"]