- en: Testing an Ionic 2 App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Ionic 2应用
- en: 'In this chapter, we are going to look at testing a Mobile Hybrid app built
    using Cordova (and Ionic 2). Testing can be done in multiple layers, the first
    being unit testing, followed by end-to-end testing, and finally deploying the
    app on to an actual device and executing tests. In this chapter, we are going
    to take the Ionic 2 Todo app we have built in [Chapter 8](part0133.html#3UQQQ0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 2 Migration Guide* and execute the following tests on it:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何测试使用Cordova（和Ionic 2）构建的移动混合应用。测试可以在多个层面进行，首先是单元测试，然后是端到端测试，最后将应用部署到实际设备上并执行测试。在本章中，我们将对我们在[第8章](part0133.html#3UQQQ0-9757c8e51afd47e0a7a9ced32db749b8)中构建的Ionic
    2 Todo应用执行以下测试：
- en: Unit testing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: End-to-end testing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端测试
- en: Monkey OR Fuzz testing with AWS Device Farm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS设备农场进行猴子或模糊测试
- en: Testing with AWS Device Farm
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS设备农场进行测试
- en: Testing methodologies
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试方法学
- en: 'In the world of app development, there are two ways in which testing comes
    into the app development life cycle. One is the more traditional way where the
    development happens first and then test runs are designed and executed based on
    the requirements. The other and more effective way is to adopt **Test Driven Development**
    (**TDD**). Over a period of time, TDD has proven to produce a more bug-free way
    of developing apps. You can read more about TDD here: [http://agiledata.org/essays/tdd.html](http://agiledata.org/essays/tdd.html).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用开发领域，测试进入应用开发生命周期的两种方式。一种是更传统的方式，其中首先进行开发，然后根据要求设计和执行测试运行。另一种更有效的方式是采用**测试驱动开发**（**TDD**）。经过一段时间的验证，TDD已被证明是一种更无缺陷的应用开发方式。您可以在这里阅读更多关于TDD的信息：[http://agiledata.org/essays/tdd.html](http://agiledata.org/essays/tdd.html)。
- en: The by-product of TDD is **Behavioural Driven Testing** (**BDT**). BDT revolves
    more around behavior testing than requirement testing. A good combination of unit
    testing and automation testing with BDT would yield an excellent product with
    minimal bugs. Since BDT involves more user-centric testing, one can easily discover
    issues that the end user might encounter during the testing phase itself.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TDD的副产品是**行为驱动测试**（**BDT**）。BDT更多地围绕行为测试而不是需求测试。单元测试和BDT的自动化测试的良好组合将产生一个具有最小错误的优秀产品。由于BDT涉及更多以用户为中心的测试，因此可以在测试阶段轻松发现最终用户可能在测试阶段遇到的问题。
- en: In this chapter, we are going to follow the more traditional process of testing
    an app, which is after it is built. We are going to implement unit testing, end-to-end
    testing, and then we will upload the app to AWS Device Farm and perform monkey
    testing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将遵循测试应用的更传统流程，即在构建后进行测试。我们将实施单元测试、端到端测试，然后将应用上传到AWS设备农场并进行猴子测试。
- en: Setting up the unit testing environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置单元测试环境
- en: The app scaffolded by Ionic CLI does not include any test setup as of the day
    of writing this chapter. So, we need to add the required testing setup ourselves.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic CLI构建的应用在撰写本章的当天不包括任何测试设置。因此，我们需要自己添加所需的测试设置。
- en: Setting up the project
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: To start with, we will create a new folder named `chapter9` and copy the `todoapp_v2`
    from `chapter8` folder to the `chapter9` folder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为`chapter9`的新文件夹，并将`chapter8`文件夹中的`todoapp_v2`复制到`chapter9`文件夹中。
- en: Install the dependencies if they are missing by running `npm install` from the
    root of the `chapter9/todoapp_v2` folder.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从`chapter9/todoapp_v2`文件夹的根目录运行`npm install`来安装依赖项（如果缺少）。
- en: Run `ionic serve` and see if the app is working as expected. When you create,
    update, and delete a `todo`, you may see a warning in the console mentioning that
    the Cordova environment is not present. This is because we are using the local
    notification plugin inside the browser.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`ionic serve`，查看应用是否按预期工作。当您创建、更新和删除`todo`时，您可能会在控制台中看到警告，指出Cordova环境不存在。这是因为我们在浏览器中使用本地通知插件。
- en: 'The environment setup we are going to do for unit testing our Todo app is going
    to be based on the article: *Ionic 2 Unit Testing Setup: The Best Way* ([http://www.roblouie.com/article/376/ionic-2-set-up-unit-testing-the-best-way/](http://www.roblouie.com/article/376/ionic-2-set-up-unit-testing-the-best-way/)).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将为单元测试我们的Todo应用进行环境设置，该设置基于文章：*Ionic 2 Unit Testing Setup: The Best Way*
    ([http://www.roblouie.com/article/376/ionic-2-set-up-unit-testing-the-best-way/](http://www.roblouie.com/article/376/ionic-2-set-up-unit-testing-the-best-way/))。'
- en: 'To get started we are going to install Karma and Jasmine:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将安装Karma和Jasmine：
- en: '**Karma**: Karma is a JavaScript test runner that runs on Node.js. Quoting
    from Karma''s documentation, *Karma is essentially a tool which spawns a web server
    that executes source code against test code for each of the browsers connected.
    The results of each test against each browser are examined and displayed via the
    command line to the developer such that they can see which browsers and tests
    passed or failed.*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Karma**：Karma是一个在Node.js上运行的JavaScript测试运行器。引用Karma的文档，*Karma本质上是一个工具，它生成一个Web服务器，针对连接的每个浏览器执行源代码与测试代码。对每个浏览器的每个测试的结果进行检查，并通过命令行显示给开发人员，以便他们可以看到哪些浏览器和测试通过或失败。*'
- en: 'We are going to use Karma to execute the test cases we are going to write:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Karma来执行我们将要编写的测试用例：
- en: '**Jasmine**: Jasmine is a behavior-driven development framework for testing
    JavaScript code. It does not depend on any other JavaScript frameworks. It does
    not require a DOM. And it has a clean, obvious syntax so that we can easily write
    tests.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jasmine**：Jasmine是一个用于测试JavaScript代码的行为驱动开发框架。它不依赖于任何其他JavaScript框架。它不需要DOM。它具有清晰明了的语法，因此我们可以轻松编写测试。'
- en: We are going to use Jasmine to define our tests and write assertions. We would
    generally start off a test by writing a describe block. And then we start defining
    our test cases using the `it` construct.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Jasmine来定义我们的测试并编写断言。通常我们会通过编写一个描述块来开始测试。然后我们开始使用`it`构造定义我们的测试用例。
- en: 'For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Assertions are simple comparison statements that validate the actual result
    and expected result:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 断言是简单的比较语句，用于验证实际结果和期望结果：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推。
- en: Now that we have a basic understanding of Karma and Jasmine, we will install
    the required dependencies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Karma和Jasmine有了基本的了解，我们将安装所需的依赖项。
- en: During the installation, if you see any errors, please update to the latest
    version of Node.js.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，如果出现任何错误，请更新到最新版本的Node.js。
- en: 'To install Karma run the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Karma，请运行以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, install Jasmine and the related dependencies:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装Jasmine和相关依赖项：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once this is done, we will add the required configuration files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们将添加所需的配置文件。
- en: 'Create a new folder named `test-config` at the root of the `todoapp_v2` folder.
    Inside the `test-config` folder, create a file named `webpack.test.js`. Update
    `todoapp_v2/test-config/webpack.test.js` with the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`todoapp_v2`文件夹的根目录下创建一个名为`test-config`的新文件夹。在`test-config`文件夹内，创建一个名为`webpack.test.js`的文件。使用以下代码更新`todoapp_v2/test-config/webpack.test.js`：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, create another file named `karma-test-shim.js` inside the `test-config`
    folder. Update `todoapp_v2/test-config/karma-test-shim.js` with the following
    code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`test-config`文件夹内创建另一个名为`karma-test-shim.js`的文件。使用以下代码更新`todoapp_v2/test-config/karma-test-shim.js`：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, create a file named `karma.conf.js` inside the `test-config` folder.
    Update `todoapp_v2/test-config/karma.conf.js` with the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`test-config`文件夹内创建一个名为`karma.conf.js`的文件。使用以下代码更新`todoapp_v2/test-config/karma.conf.js`：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With this we finish the basic configuration needed to run unit tests.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们完成了运行单元测试所需的基本配置。
- en: 'The article mentioned earlier itself has the required information about the
    three configuration files we have added. For more information, refer to: [https://angular.io/docs/ts/latest/guide/webpack.html#!#test-configuration](https://angular.io/docs/ts/latest/guide/webpack.html#!#test-configuration).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的文章本身包含了我们添加的三个配置文件的所需信息。有关更多信息，请参阅：[https://angular.io/docs/ts/latest/guide/webpack.html#!#test-configuration](https://angular.io/docs/ts/latest/guide/webpack.html#!#test-configuration)。
- en: Writing unit tests
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: Now that we have the required setup, we are going to start writing the unit
    tests. Unit tests are written in a file next to the source file with `.spec` added
    to the filename. For example, if we are writing test cases for `app.component.ts`,
    we would create a file named `app.component.spec.ts` in the same folder and write
    the required test cases.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所需的设置，我们将开始编写单元测试。单元测试写在与源文件相邻的文件中，文件名后面加上`.spec`。例如，如果我们为`app.component.ts`编写测试用例，我们将在相同的文件夹中创建一个名为`app.component.spec.ts`的文件，并编写所需的测试用例。
- en: Refer to [https://angular.io/docs/ts/latest/guide/testing.html#!#q-spec-file-location](https://angular.io/docs/ts/latest/guide/testing.html#!#q-spec-file-location)
    and [https://angular.io/docs/ts/latest/guide/style-guide.html#!#02-10](https://angular.io/docs/ts/latest/guide/style-guide.html#!#02-10)
    for more information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[https://angular.io/docs/ts/latest/guide/testing.html#!#q-spec-file-location](https://angular.io/docs/ts/latest/guide/testing.html#!#q-spec-file-location)和[https://angular.io/docs/ts/latest/guide/style-guide.html#!#02-10](https://angular.io/docs/ts/latest/guide/style-guide.html#!#02-10)。
- en: 'First, we would start off by writing tests for the app component. We are going
    to test the following cases:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始编写应用组件的测试。我们将测试以下情况：
- en: If the component has been created.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果组件已创建。
- en: If `rootPage` is set as `LoginPage`.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`rootPage`设置为`LoginPage`。
- en: 'Now, create a file named `app.component.spec.ts` inside the `todoapp_v2/src/app`
    folder. Update `todoapp_v2/src/app/app.component.spec.ts` with the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`todoapp_v2/src/app`文件夹内创建一个名为`app.component.spec.ts`的文件。使用以下代码更新`todoapp_v2/src/app/app.component.spec.ts`：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There is quite a lot going on. First, we have imported the required dependencies.
    Next, we have added the describe block. Inside the describe block, we have added
    `beforeEach()`. `beforeEach()` runs before each test gets executed. In the first
    `beforeEach()`, we are defining the `TestBed`. In the second `beforeEach()`, we
    are creating the required component and getting its instance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情要做。首先，我们导入了所需的依赖项。接下来，我们添加了描述块。在描述块内，我们添加了`beforeEach()`。`beforeEach()`在每次测试执行之前运行。在第一个`beforeEach()`中，我们定义了`TestBed`。在第二个`beforeEach()`中，我们创建了所需的组件并获取了它的实例。
- en: '`TestBed` configures and initializes the environment for unit tests. To know
    in-depth on how testing is set up and performed in Angular 2, check out: *Testing
    Angular 2, Julie Ralph* available at: [https://www.youtube.com/watch?v=f493Xf0F2yU](https://www.youtube.com/watch?v=f493Xf0F2yU).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestBed`配置和初始化了单元测试的环境。要深入了解Angular 2中的测试设置和执行方式，请查看：*Testing Angular 2, Julie
    Ralph*，网址：[https://www.youtube.com/watch?v=f493Xf0F2yU](https://www.youtube.com/watch?v=f493Xf0F2yU)。'
- en: Once the `TestBed` is defined and the components have been initialized, we write
    our test cases.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`TestBed`被定义并且组件被初始化，我们就编写我们的测试用例。
- en: 'Note: we have wrapped the callback function of `beforeEach()` with `async`.
    `async` does not let the next test start till all the pending tasking are completed.
    To know when to use `async` while testing, refer to *Angular 2 Testing -- Async
    function call --when to use*: [http://stackoverflow.com/a/40127164/1015046](http://stackoverflow.com/a/40127164/1015046).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们已经用`async`包装了`beforeEach()`的回调函数。`async`不会让下一个测试开始，直到所有待处理的任务都完成。要了解何时在测试中使用`async`，请参考*Angular
    2 Testing -- Async function call --when to use*：[http://stackoverflow.com/a/40127164/1015046](http://stackoverflow.com/a/40127164/1015046)。
- en: Next, we are going to test the login page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将测试登录页面。
- en: 'Create a filename `login.spec.ts` inside the `todoapp_v2/src/pages/login` folder.
    We are going to test the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`todoapp_v2/src/pages/login`文件夹内创建一个名为`login.spec.ts`的文件。我们将测试以下内容：
- en: That the component has been created
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件已创建
- en: That the `userIp` variable is initialized to an empty string
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userIp`变量被初始化为空字符串。'
- en: That the user object contains an e-mail with the value `a@a.com`
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户对象包含值为`a@a.com`的电子邮件
- en: That the user object contains a password with the value `a`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户对象包含值为`a`的密码
- en: 'Update `todoapp_v2/src/pages/login/login.spec.ts` with the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新`todoapp_v2/src/pages/login/login.spec.ts`：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code is quite self-explanatory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码相当容易理解。
- en: 'Next, we move on to the home page component. Create a file named `home.spec.ts`
    inside the `todoapp_v2/src/pages/home` folder. In this component, we are going
    to test the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转向主页组件。在`todoapp_v2/src/pages/home`文件夹内创建一个名为`home.spec.ts`的文件。在这个组件中，我们将测试以下内容：
- en: That the component has been created
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件是否已创建
- en: That the `userIp` variable is initialized to an empty string
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userIp`变量是否初始化为空字符串'
- en: That the `userTodos` variable is initialized to an empty array
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userTodos`变量是否初始化为空数组'
- en: When a local notification is fired (this is how we do unit testing on Ionic
    Native plugins)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当本地通知被触发时（这是我们对Ionic Native插件进行单元测试的方式）
- en: 'Update `todoapp_v2/src/pages/home/home.spec.ts` with the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新`todoapp_v2/src/pages/home/home.spec.ts`：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The key thing to notice from the preceding code is the provider's property passed
    to `TestBed.configureTestingModule()`. Since we are running the tests inside a
    simulated environment, where there is no Cordova, we need to simulate or mock
    the `LocalNotifications` service.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中需要注意的关键事项是提供者的属性传递给`TestBed.configureTestingModule()`。由于我们在模拟环境中运行测试，其中没有Cordova，我们需要模拟或模拟`LocalNotifications`服务。
- en: The way we do that is to create another class named `LocalNotificationsMocks`
    and use it when `LocalNotifications` is called. In `LocalNotificationsMocks`,
    we implement dummy methods that return predefined values to mock the service.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做的方式是创建另一个名为`LocalNotificationsMocks`的类，并在调用`LocalNotifications`时使用它。在`LocalNotificationsMocks`中，我们实现了返回预定义值的虚拟方法来模拟服务。
- en: 'So, we are going to create a mock service for `LocalNotifications`. Inside
    the `src` folder, create a folder named mocks. Inside the `mocks` folder, create
    a file named `localNotificationMocks.ts`. Update `todoapp_v2/src/mocks/localNotificationMocks.ts` with
    the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将为`LocalNotifications`创建一个模拟服务。在`src`文件夹内创建一个名为mocks的文件夹。在`mocks`文件夹内，创建一个名为`localNotificationMocks.ts`的文件。使用以下代码更新`todoapp_v2/src/mocks/localNotificationMocks.ts`：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are overriding the `schedule()` to return void based on the original definition.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在覆盖`schedule()`以根据原始定义返回void。
- en: With this we are done with testing components. Next, we are going to test the
    providers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完成组件测试后，接下来我们将测试提供者。
- en: 'Create a file named `ip.spec.ts` inside the `todoapp_v2/src/providers` folder.
    In this provider, we are going to mock an HTTP request and compare the output
    of the mock response with a hardcoded response. The cases we are going to test
    are:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`todoapp_v2/src/providers`文件夹内创建一个名为`ip.spec.ts`的文件。在这个提供者中，我们将模拟一个HTTP请求，并将模拟响应的输出与硬编码的响应进行比较。我们将测试以下情况：
- en: The provider is constructed
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者是否被构建
- en: We get an IP address from the mock backend service
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从模拟后端服务获取IP地址
- en: 'Open `todoapp_v2/src/providers/ip.spec.ts` and update it with the following
    code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`todoapp_v2/src/providers/ip.spec.ts`并使用以下代码进行更新：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Do notice the provider for HTTP. We have wired it to `MockBackend` and are returning
    a `mockResponse` when a request is made.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意HTTP的提供者。我们已经将它连接到`MockBackend`，并在发出请求时返回一个`mockResponse`。
- en: 'Next comes the Auth provider. Create a file named `auth.spec.ts` inside the
    `todoapp_v2/src/providers` folder. We are going to test the following in this
    provider:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是Auth提供者。在`todoapp_v2/src/providers`文件夹内创建一个名为`auth.spec.ts`的文件。我们将在这个提供者中测试以下内容：
- en: That the provider is constructed
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者是否被构建
- en: That there is a successful login with valid credentials
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功使用有效凭据登录
- en: That there is a successful failure with invalid credentials
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无效凭据成功失败
- en: The value of `isAuthenticated()`
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isAuthenticated()`的值'
- en: The value of `authStatus` on `logout()`
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logout()`时`authStatus`的值'
- en: 'Open `todoapp_v2/src/providers/auth.spec.ts` and update it with the following
    code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`todoapp_v2/src/providers/auth.spec.ts`并使用以下代码进行更新：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To execute the preceding test cases successfully, we need to mock the `IonicStorageModule`.
    Create a new file named `storageMocks.ts` inside the `todoapp_v2/src/mocks` folder.
    Update `todoapp_v2/src/mocks/storageMocks.ts` with the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功执行上述测试用例，我们需要模拟`IonicStorageModule`。在`todoapp_v2/src/mocks`文件夹内创建一个名为`storageMocks.ts`的新文件。使用以下代码更新`todoapp_v2/src/mocks/storageMocks.ts`：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here we are overriding the behavior of the `IonicStorageModule` using an in-memory
    object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在使用内存对象覆盖`IonicStorageModule`的行为。
- en: 'The last provider that we are going to test is Todos. Create a file named `todos.spec.ts`
    inside the `todoapp_v2/src/providers` folder. We are going to test the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要测试的最后一个提供者是Todos。在`todoapp_v2/src/providers`文件夹内创建一个名为`todos.spec.ts`的文件。我们将测试以下内容：
- en: That the provider is constructed
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者是否被构建
- en: That Todos has an initial length of `0`
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Todos的初始长度为`0`
- en: Saving a todo
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存一个todo
- en: Updating a todo
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新一个todo
- en: Deleting a todo
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个todo
- en: 'Open `todoapp_v2/src/providers/todos.spec.ts` and update it as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`todoapp_v2/src/providers/todos.spec.ts`并进行以下更新：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Do notice the `StorageMocks` setup in the provider. With this, we are done writing
    the test cases. The next step is execution.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意提供者中的`StorageMocks`设置。通过这样做，我们已经完成了编写测试用例。下一步是执行。
- en: Executing unit tests
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行单元测试
- en: To start the execution process, we will add a script to the `package.json` file,
    so we can run tests easily by executing `npm test` from the command prompt/terminal.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始执行过程，我们将在`package.json`文件中添加一个脚本，这样我们就可以通过在命令提示符/终端中执行`npm test`来轻松运行测试。
- en: 'Open `package.json` and add the following line to the scripts section:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`package.json`并在scripts部分添加以下行：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now run the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And you should see a browser launch and our test case execute. The command
    prompt/terminal log should look something like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该看到浏览器启动并执行我们的测试用例。命令提示符/终端日志应该看起来像这样：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And you should also see a file named `unit-test-report.html` created inside
    the `test-config` folder. If you launch this file in the browser, you should see
    the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该看到一个名为`unit-test-report.html`的文件创建在`test-config`文件夹内。如果在浏览器中打开此文件，您应该会看到以下内容：
- en: '![](img/00117.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: The preceding table summarizes the tests that were executed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上表总结了执行的测试。
- en: driftyco/ionic-unit-testing-example
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: driftyco/ionic-unit-testing-example
- en: 'Three days before writing this chapter, the Ionic team released a blog post
    indicating that they are going to support unit and end-to-end testing and this
    will be a part of the Ionic scaffolded project itself. More information can be
    found here: [http://blog.ionic.io/basic-unit-testing-in-ionic/](http://blog.ionic.io/basic-unit-testing-in-ionic/).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本章的三天前，Ionic团队发布了一篇博客文章，表明他们将支持单元测试和端到端测试，并且这将成为Ionic脚手架项目本身的一部分。更多信息可以在这里找到：[http://blog.ionic.io/basic-unit-testing-in-ionic/](http://blog.ionic.io/basic-unit-testing-in-ionic/)。
- en: This project is based on a couple of very valuable contributors in the Ionic
    2 testing space as mentioned in the blog post. As of today, the *driftyco/ionic-unit-testing-example*
    ([https://github.com/driftyco/ionic-unit-testing-example](https://github.com/driftyco/ionic-unit-testing-example))
    repo does not have the complete implementation and supports only unit tests.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目是基于Ionic 2测试领域中的一些非常有价值的贡献者，正如博客文章中所提到的。截至今天，*driftyco/ionic-unit-testing-example*（[https://github.com/driftyco/ionic-unit-testing-example](https://github.com/driftyco/ionic-unit-testing-example)）存储库没有完整的实现，只支持单元测试。
- en: But by the time the book is out, they would have launched it. The setup inside
    `driftyco/ionic-unit-testing-example` should still be along the same lines we
    have followed here. I have brought this to your notice so you can follow the project.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但到书出版时，他们可能已经推出了。`driftyco/ionic-unit-testing-example`内的设置应该仍然与我们在这里遵循的设置相同。我提醒您这一点，以便您可以关注该项目。
- en: E2E testing
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: E2E测试
- en: In unit testing, we have tested units of code. In end-to-end testing, we are
    going to test a complete feature such as login or logout, or fetch IP address,
    and so on. Here we are going to look at the app as a whole instead of just one
    piece of functionality. Some people refer to this as integration testing as well.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试中，我们已经测试了代码单元。在端到端测试中，我们将测试完整的功能，比如登录或注销，或者获取IP地址等等。在这里，我们将整个应用程序作为一个整体来看，而不仅仅是一个功能的一部分。有些人也将这称为集成测试。
- en: We are going to use Protractor to help us with the execution of E2E tests. We
    are still going to use Jasmine to describe our tests, only the test runner changes
    from Karma to Protractor.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Protractor来帮助我们执行E2E测试。我们仍然会使用Jasmine来描述我们的测试，只是测试运行器从Karma变为Protractor。
- en: 'Quoting from [http://www.protractortest.org](http://www.protractortest.org):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 引用自[http://www.protractortest.org](http://www.protractortest.org)：
- en: '"Protractor is an end-to-end test framework for Angular apps. Protractor runs
    tests against your app running in a real browser, interacting with it as a user
    would."'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '"Protractor是一个用于Angular应用程序的端到端测试框架。Protractor在真实浏览器中运行测试，与用户交互。"'
- en: YouTube has quite a lot of videos which explain Protractor and Selenium in depth
    as well as various APIs of Protractor that can be used for testing, in case you
    want more information on Protractor.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube上有很多视频，深入解释了Protractor和Selenium，以及Protractor的各种API，可以用于测试，如果您想了解更多关于Protractor的信息。
- en: 'The testing we are going to do is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要进行的测试如下：
- en: Login to the app
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录到应用程序
- en: Validate login
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证登录
- en: Logout of the app
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注销应用程序
- en: Validate logout
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证注销
- en: Setting up the project
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: I am going to follow the article named E2E (End-to-End) Testing in *Ionic 2
    - An Introduction* ([https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/](https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/))
    to set up the E2E environment.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我将按照名为“E2E（端到端）测试在Ionic 2中的介绍”（[https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/](https://www.joshmorony.com/e2e-end-to-end-testing-in-ionic-2-an-introduction/)）的文章来设置E2E环境。
- en: We will be using the same example on which we have implemented the unit tests.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的示例来实现单元测试。
- en: 'First install protractor by running the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过运行以下命令安装protractor：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, install the `webdriver-manager` and update it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，安装`webdriver-manager`并更新它：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we will install the dependencies for Protractor by running the following
    command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过运行以下命令安装Protractor的依赖项：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Do notice the version of Jasmine types. It is hardcoded to `2.5.41`. At the
    time of writing, there are some conflicts between the TypeScript version of Jasmine
    types and the Ionic 2 project. If you are using Ionic 3.0, this should have been
    fixed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意Jasmine类型的版本。它是硬编码为`2.5.41`。在撰写本文时，TypeScript版本的Jasmine类型与Ionic 2项目存在一些冲突。如果您正在使用Ionic
    3.0，则应该已经解决了这个问题。
- en: 'Next, at the root of the `todoapp_v2` project folder, create a file named `protractor.conf.js`.
    Update `todoapp_v2/protractor.conf.js` with the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`todoapp_v2`项目文件夹的根目录下，创建一个名为`protractor.conf.js`的文件。使用以下代码更新`todoapp_v2/protractor.conf.js`：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This file defines the launch properties of Protractor and Selenium.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件定义了Protractor和Selenium的启动属性。
- en: 'Next, we are going to create a folder named `e2e` at the root of `todoapp_v2` folder.
    Inside the `todoapp_v2/e2e` folder, create a file named `tsconfig.json`. Update
    `todoapp_v2/e2e/tsconfig.json` with the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`todoapp_v2`文件夹的根目录下创建一个名为`e2e`的文件夹。在`todoapp_v2/e2e`文件夹内，创建一个名为`tsconfig.json`的文件。使用以下代码更新`todoapp_v2/e2e/tsconfig.json`：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This completes our setup for end-to-end testing. Now, we will start writing
    the tests.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们的端到端测试设置。现在，我们将开始编写测试。
- en: Writing E2E tests
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写E2E测试
- en: Now that we have the required setup, we will start writing the tests. Create
    a new file named `test.e2e-spec.ts` inside the `todoapp_v2/e2e`folder.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所需的设置，我们将开始编写测试。在`todoapp_v2/e2e`文件夹内创建一个名为`test.e2e-spec.ts`的新文件。
- en: 'As mentioned earlier, we are going to perform a simple test -- login to the
    app, validating login, logging out of the app, and validating logout. The required
    tests should look like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将执行一个简单的测试--登录到应用程序，验证登录，从应用程序注销，并验证注销。所需的测试应该如下所示：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding code is a self-explanatory. Do notice that I have hardcoded my
    IP address to validate the same while testing. Do update the IP address before
    you start executing the E2E tests.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是不言自明的。请注意，我已经将我的IP地址硬编码以在测试时进行验证。在开始执行E2E测试之前，请更新IP地址。
- en: Executing E2E tests
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行E2E测试
- en: 'Now that we have completed writing the tests, we will execute the same. Open
    a command prompt/terminal at the root of the project and run the following command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了测试的编写，我们将执行相同的测试。在项目的根目录下打开命令提示符/终端，并运行以下命令：
- en: '[PRE24]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You may face an error, which looks something like:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会遇到一个错误，看起来像这样：
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If so, run the following command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，请运行以下命令：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And after that run `protractor` or `./node_modules/.bin/protractor`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行`protractor`或`./node_modules/.bin/protractor`。
- en: 'And you should see a browser launch and the app being navigated. If everything
    goes well, you should see the following output in the command prompt/terminal:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该会看到浏览器启动并导航到应用程序。如果一切顺利，您应该会在命令提示符/终端中看到以下输出：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: With this we complete the two major types of testing on an Ionic app.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了对Ionic应用的两种主要测试。
- en: The final test we are going to do is using AWS Device Farm.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的最后一个测试是使用AWS设备农场。
- en: 'Note: While testing Cordova features, you can always mock them like we have
    seen earlier. Instead of updating the test bed, we will update the `app.module.ts`
    directly before executing the E2E tests. But do remember to change it back once
    the testing is completed.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在测试Cordova功能时，您可以像之前看到的那样模拟它们。我们将在执行E2E测试之前直接更新`app.module.ts`，而不是更新测试床。但是请记住在测试完成后将其改回来。
- en: Code coverage
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码覆盖率
- en: Checking code coverage is a very important activity while testing. Code coverage
    helps us understand how much code written by us is tested. You can refer to the *karma-coverage*
    ([https://github.com/karma-runner/karma-coverage](https://github.com/karma-runner/karma-coverage))
    module and the *remap-istanbul* ([https://github.com/SitePen/remap-istanbul](https://github.com/SitePen/remap-istanbul))
    module to implement code coverage.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 检查代码覆盖率是测试过程中非常重要的活动。代码覆盖率帮助我们了解我们编写的代码有多少被测试了。您可以参考*karma-coverage* ([https://github.com/karma-runner/karma-coverage](https://github.com/karma-runner/karma-coverage))
    模块和 *remap-istanbul* ([https://github.com/SitePen/remap-istanbul](https://github.com/SitePen/remap-istanbul))
    模块来实现代码覆盖率。
- en: 'You can also refer to *How to Add a Test Coverage Report to an Angular 2 Project*:
    [https://www.angularonrails.com/add-test-coverage-report-angular-2-project/](https://www.angularonrails.com/add-test-coverage-report-angular-2-project/)
    for further reference.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以参考*如何向Angular 2项目添加测试覆盖报告*：[https://www.angularonrails.com/add-test-coverage-report-angular-2-project/](https://www.angularonrails.com/add-test-coverage-report-angular-2-project/)
    进行进一步参考。
- en: AWS Device Farm
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS设备农场
- en: Now that we have unit tested as well as end-to-end tested our app, we will deploy
    the app on to an actual device and test it.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对我们的应用进行了单元测试和端到端测试，我们将部署应用到实际设备上并进行测试。
- en: To start testing on actual devices, we need to borrow or purchase them, which
    may not seem practical for an one-off app. That is where the concept of device
    farms comes into the picture. Device farms are collections of various devices
    that can be accessed through a web interface. These devices can be accessed and
    tested over the web in a similar way how one would do testing on an actual device.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要在实际设备上开始测试，我们需要借用或购买这些设备，这对于一个一次性的应用来说可能并不实际。这就是设备农场的概念出现的地方。设备农场是各种设备的集合，可以通过Web界面访问。这些设备可以通过Web进行访问和测试，方式类似于在实际设备上进行测试。
- en: There are many providers out there who offer pay-as-you-go device farms. After
    a lot of hits and misses with many device farms, I kind of grew a liking towards
    AWS Device Farm. It is simple, easy to use, and quite verbose with the error logging,
    screenshots, and videos. The latter really helps you in identifying an issue that
    your end user or a bug crash reporter reported on a specific device.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有很多提供按需付费设备农场的供应商。在许多设备农场的试错之后，我对AWS设备农场有了一些好感。它简单易用，并且在错误日志、截图和视频方面非常详细。后者真的可以帮助您在特定设备上识别终端用户或错误崩溃报告中报告的问题。
- en: As of the day of writing this chapter, AWS charges $0.17/device minute with
    the first 250 minutes free. Or if you are a heavy user, you can subscribe for
    an unlimited testing plan based on your usage as well. This starts from $250 a
    month.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本章的日期，AWS每个设备每分钟收费$0.17，前250分钟免费。或者如果您是重度用户，您也可以根据您的使用情况订阅无限测试计划。这从每月$250起。
- en: 'In this topic, using AWS Device Farm, we are going to upload the APK of our
    Todo app that we have migrated in [Chapter 8](part0133.html#3UQQQ0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 2 Migration Guide*, and execute two tests:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，使用AWS设备农场，我们将上传我们在[第8章](part0133.html#3UQQQ0-9757c8e51afd47e0a7a9ced32db749b8)
    *Ionic 2迁移指南*中迁移的Todo应用的APK，并执行两个测试：
- en: Monkey testing the app to see if the app crashes
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Monkey测试应用，看看应用是否崩溃
- en: Manually testing the app on an actual device
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实际设备上手动测试应用
- en: Setting up AWS Device Farm
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置AWS设备农场
- en: Before we get started with testing on actual devices, we will set up a new AWS
    account, if you don't have one. You can navigate to [https://aws.amazon.com/](https://aws.amazon.com/)
    to sign up and sign in.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始在实际设备上测试之前，我们将设置一个新的AWS账户，如果您还没有的话。您可以转到[https://aws.amazon.com/](https://aws.amazon.com/)
    进行注册和登录。
- en: Once you are inside the AWS console, select Device Farm from the Services option
    in the header of the page. Device Farm is AWS region agonistic. You need not be
    in a specific region to access it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入AWS控制台，从页面头部的服务选项中选择设备农场。设备农场是AWS区域不可知的。您不需要在特定区域才能访问它。
- en: 'Once you are at the home page of AWS Device Farm, you should see a screen like
    this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入AWS设备农场的主页，您应该会看到一个像这样的屏幕：
- en: '![](img/00120.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: Click on Get started. This will prompt us to enter a project name. A project
    in Device Farm is a logic grouping of types of tests that we would execute, types
    of devices we want to test, or versions of our app.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“开始”。这将提示我们输入项目名称。在Device Farm中，项目是我们要执行的测试类型、要测试的设备类型或应用程序版本的逻辑分组。
- en: 'I am going to name my project as `Todo App v1`. When I have another release
    I am going to name it as `Todo App v2`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把我的项目命名为`Todo App v1`。当我有另一个版本时，我将把它命名为`Todo App v2`：
- en: '![](img/00121.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: 'Note: Here `v1` refers to the v1 release of our Todo app and not the Todo app
    built with Ionic v1.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这里的“v1”指的是我们的Todo应用的v1版本，而不是使用Ionic v1构建的Todo应用。
- en: Click on Create project and you should land on the project home page.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建项目”，你应该会进入项目主页。
- en: Setting up Todo app
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Todo应用
- en: 'Now that we are ready to test our app, let us go ahead and build it. Navigate
    to the `todoapp_v2` folder and open a new command prompt/terminal. Run `ionic
    platform add android` or `ionic platform add ios` and then build the app:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备测试我们的应用，让我们继续构建它。转到`todoapp_v2`文件夹并打开一个新的命令提示符/终端。运行`ionic platform add
    android`或`ionic platform add ios`，然后构建应用程序：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For this example, I am going to build for Android and use the APK for device
    testing. Once the build is completed, navigate to the `todoapp_v2/platforms/android/build/outputs/apk`
    folder and you should find a file named `android-debug.apk`. We are going to upload
    this APK file for testing.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将为Android构建并使用APK进行设备测试。构建完成后，转到`todoapp_v2/platforms/android/build/outputs/apk`文件夹，你应该会找到一个名为`android-debug.apk`的文件。我们将上传这个APK文件进行测试。
- en: The process for iOS testing is also similar, except we upload an IPA file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: iOS测试的流程也类似，只是我们上传IPA文件。
- en: Monkey testing the Todo app
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对Todo应用进行猴子测试
- en: 'Monkey testing or fuzz testing is an automated testing technique where a test
    executer will enter random inputs, executing random clicks at random parts of
    the app or page to see if the app crashes. To know more about monkey testing,
    refer to: [https://en.wikipedia.org/wiki/Monkey_testing](https://en.wikipedia.org/wiki/Monkey_testing).'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 猴子测试或模糊测试是一种自动化测试技术，测试执行器将输入随机输入，在应用程序或页面的随机部分执行随机点击，以查看应用程序是否崩溃。要了解更多关于猴子测试的信息，请参考：[https://en.wikipedia.org/wiki/Monkey_testing](https://en.wikipedia.org/wiki/Monkey_testing)。
- en: Device Farm offers this as a good starting point for testing an app on a device.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Device Farm将这作为在设备上测试应用程序的良好起点。
- en: 'Once we are on the project home page, we should see two tabs: Automated tests
    and Remote access:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们进入项目主页，我们应该会看到两个选项卡：自动化测试和远程访问：
- en: '![](img/00122.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: 'On the Automated tests tab, click on Create a new run. In the Choose your application
    section, select your choice, as shown in the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化测试选项卡上，点击“创建新运行”。在“选择您的应用程序”部分，选择您的选择，如下面的截图所示：
- en: '![](img/00123.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: 'Next upload the APK or IPA file. Once the app is successfully uploaded, we
    should see something like this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来上传APK或IPA文件。一旦应用程序成功上传，我们应该会看到类似于这样的东西：
- en: '![](img/00124.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: Click Next step.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”。
- en: 'In the configure test section, select Built-in: Fuzz as shown in the following
    screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置测试部分，选择内置：模糊，如下面的截图所示：
- en: '![](img/00125.jpeg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: There are other automation testing frameworks such as Appium or Calabash that
    can be used to build automation testing suites as well. Device Farm supports those
    as well.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他自动化测试框架，如Appium或Calabash，也可以用来构建自动化测试套件。Device Farm也支持这些框架。
- en: Click Next step.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”。
- en: 'This is where we select the targeted devices. By default, AWS Device Farm picks
    Top Devices. We can either go with this or build our own device pool:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们选择目标设备的地方。默认情况下，AWS Device Farm选择顶级设备。我们可以选择这个，也可以构建自己的设备池：
- en: '![](img/00126.jpeg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: For this example, I am going to go with the Top Devices selection.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我将选择顶部设备。
- en: 'Click Next step to move to the Specify device state section. Here, we can override
    device features if needed:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”以进入指定设备状态部分。在这里，如果需要，我们可以覆盖设备功能：
- en: '![](img/00127.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: We are going to leave this as is.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保持现状。
- en: 'Click Next step and here we set the estimates for our test. I have selected
    5 minutes per device as shown:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”，在这里我们设置测试的估计时间。我选择了每个设备5分钟，如下所示：
- en: '![](img/00128.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: Click Confirm and start run to kick off the monkey testing. This will take approximately
    25 minutes to complete. You can go for a run or get a coffee or do some yoga,
    basically you need to kill 25 minutes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确认并开始运行”以启动猴子测试。这将需要大约25分钟才能完成。你可以去跑步，喝咖啡，做瑜伽，基本上你需要度过25分钟。
- en: 'Now that the tests are completed, you should see a screen like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试已经完成，你应该会看到这样的屏幕：
- en: '![](img/00129.jpeg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: 'Looks like the Todo app passed monkey testing on five devices. If we click
    on the row, we should see the in-depth analysis of the results:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来Todo应用在五台设备上通过了猴子测试。如果我们点击该行，我们应该会看到结果的深入分析：
- en: '![](img/00130.jpeg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: 'As you can see from the preceding steps, we have the results per device and
    screenshots of all the devices. To get deeper insights, we will click on a device:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从前面的步骤中看到的那样，我们可以查看每个设备的结果和所有设备的截图。为了获得更深入的见解，我们将点击一个设备：
- en: '![](img/00131.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00131.jpeg)'
- en: 'As you can see from the preceding image, we can view the test execution video,
    logs, performance, and screenshots as well:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从前面的图片中看到的那样，我们还可以查看测试执行视频、日志、性能和截图：
- en: '![](img/00132.jpeg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00132.jpeg)'
- en: An overview of the performance would be as shown in the preceding screenshot.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 性能概述如前面的截图所示。
- en: This kind of helps us quickly to do some random testing of our app on various
    devices.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们快速在各种设备上对我们的应用进行一些随机测试。
- en: Manually testing the Todo app on various devices
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在各种设备上手动测试Todo应用
- en: In this section, we are going to gain remote access to a device and test our
    app on it. This feature is very helpful when a user reports a bug on a specific
    device that you are not able to replicate on other devices.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将远程访问设备并在其上测试我们的应用程序。当用户报告您无法在其他设备上复制的特定设备上的错误时，此功能非常有用。
- en: To start the manual testing, navigate to the project home page and click on
    the Remote Access tab. And then click on the Start a new session button.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始手动测试，请导航到项目主页，然后单击“远程访问”选项卡。然后单击“开始新会话”按钮。
- en: 'This will redirect to another page, where we need to select a device as shown:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重定向到另一个页面，在那里我们需要选择一个设备，如图所示：
- en: '![](img/00133.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00133.jpeg)'
- en: 'I have picked an Android device and initiated a new session by clicking on
    Confirm and start session. This will kick off a new session:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了一个Android设备，并通过单击“确认并开始会话”来启动了一个新会话。这将启动一个新会话：
- en: '![](img/00134.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00134.jpeg)'
- en: 'Once a device is made available, we should see something like this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设备可用，我们应该看到类似于这样的东西：
- en: '![](img/00135.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: By default, the APK we have recently uploaded will be installed on this device.
    Otherwise you can use Install applications in the top right to install a specific
    app as shown in the preceding screenshot.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们最近上传的APK将安装在此设备上。否则，您可以使用右上角的“安装应用程序”来安装特定应用程序，如前面的屏幕截图所示。
- en: 'I have navigated to the `TodoApp-v2` from the menu as shown:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经从菜单中导航到`TodoApp-v2`，如图所示：
- en: '![](img/00136.jpeg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: 'After launching the app, we can perform a login, manage todos, check out notifications,
    and so on:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序后，我们可以进行登录、管理待办事项、查看通知等操作：
- en: '![](img/00137.jpeg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: 'Once the testing is completed, we can stop the session. Once the session has
    been successfully terminated, we can get a copy of logs, videos, and network traffic
    in a downloadable format for further debugging:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完成后，我们可以停止会话。会话成功终止后，我们可以以可下载的格式获取日志、视频和网络流量的副本以进行进一步调试：
- en: '![](img/00138.jpeg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: With this we have seen how to manually test an app on various devices.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经看到了如何在各种设备上手动测试应用程序。
- en: Automation testing
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Apart from the aforementioned ways of testing an app, we can build automated
    test cases using frameworks such as Appium ([http://appium.io/](http://appium.io/)).
    This way, using the Device Farm, we can upload the APK or IPA followed by the
    automation test suite. Then we pick a group of devices and execute the tests on
    them.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述测试应用的方法之外，我们还可以使用诸如Appium（[http://appium.io/](http://appium.io/)）之类的框架构建自动化测试用例。通过使用设备农场，我们可以上传APK或IPA，然后进行自动化测试套件。然后我们选择一组设备并在它们上执行测试。
- en: You can look up *Automating hybrid apps *([http://appium.io/slate/en/master/?ruby#automating-hybrid-apps](http://appium.io/slate/en/master/?ruby#automating-hybrid-apps))
    and *Verifying a Cordova or PhoneGap build with Smoke Tests and Appium *([http://ezosaleh.com/verifying-a-cordovaphonegap-build-with-smoke-tests-appium](http://ezosaleh.com/verifying-a-cordovaphonegap-build-with-smoke-tests-appium))
    to get an idea on writing automated tests for your hybrid app.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查阅*自动化混合应用*（[http://appium.io/slate/en/master/?ruby#automating-hybrid-apps](http://appium.io/slate/en/master/?ruby#automating-hybrid-apps)）和*使用Smoke
    Tests和Appium验证Cordova或PhoneGap构建*（[http://ezosaleh.com/verifying-a-cordovaphonegap-build-with-smoke-tests-appium](http://ezosaleh.com/verifying-a-cordovaphonegap-build-with-smoke-tests-appium)）来了解为混合应用编写自动化测试的想法。
- en: You can run these automated tests locally too in an emulator if you choose to.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择，您也可以在模拟器中本地运行这些自动化测试。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have gone through the two main ways of testing-unit and
    end-to-end testing. We have used Karma with Jasmine to unit test the Todo app.
    We have used Protractor with Jasmine for our end-to-end testing. We have also
    tested our app using AWS Device Farm's fuzz testing as well as by installing an
    app on a remote device of our choice.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了测试的两种主要方法-单元测试和端到端测试。我们使用Karma和Jasmine对Todo应用进行了单元测试。我们使用Protractor和Jasmine进行了端到端测试。我们还使用了AWS设备农场的模糊测试来测试我们的应用，以及通过在我们选择的远程设备上安装应用程序来进行测试。
- en: In the next chapter, we will take a look at releasing and managing an Ionic
    app.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下发布和管理Ionic应用程序。
