- en: Chapter 3. Building the Gallery Page
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。构建画廊页面
- en: In the previous chapter, we did a lot of work and we built quite a base for
    the rest of our portfolio site. With the knowledge we now have and the small amount
    of code we wrote on top of the 320 and Up framework, we can really start to move
    fast. In this chapter, we are going to do just that. We are going to build a gallery
    of panels that will be stacked for narrow screens and tiled for wide screens.
    To do this, we are going to use the same basic approach that we did in the previous
    chapter for the triad of content panels at the bottom of our page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们做了很多工作，为我们的投资组合网站的其余部分建立了相当的基础。有了我们现在拥有的知识和我们在320和Up框架之上编写的少量代码，我们真的可以开始快速前进了。在本章中，我们将做到这一点。我们将构建一个面板画廊，用于窄屏堆叠，用于宽屏平铺。为此，我们将使用与上一章中用于页面底部内容面板三重内容相同的基本方法。
- en: Creating the wireframe
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建线框
- en: 'Before we jump into the code, let''s take a look at some wireframes. The following
    screenshot shows how our screen should look on a small screen:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编码之前，让我们看一些线框图。以下屏幕截图显示了我们在小屏幕上的屏幕应该是什么样子：
- en: '![Creating the wireframe](img/6463_03_08.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![创建线框](img/6463_03_08.jpg)'
- en: 'As the browser gets wider, we''d like those images to get bigger and change
    the layout from stacking to tiling for better use of the screen space. The following
    screenshot is the basic layout of a screen over 992 px wide:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着浏览器变得更宽，我们希望这些图像变得更大，并将布局从堆叠变为平铺，以更好地利用屏幕空间。以下屏幕截图是超过992像素宽的基本布局：
- en: '![Creating the wireframe](img/6463_03_09.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![创建线框](img/6463_03_09.jpg)'
- en: There are a lot of visual breakpoints between the two that I have created above
    that 320 and Up facilitates. The only thing to keep in mind with 320 and Up is
    how to keep the rest of your page consistent with it. As we go along here, let's
    analyze what the layout is doing and get the rest of our page to play nice with
    it by either using styles that already exist in 320 and Up or creating our own.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我在上面创建的320和Up方便的两者之间有很多视觉断点。在使用320和Up时要记住的唯一一件事是如何使页面的其余部分与其保持一致。在这里，让我们分析布局正在做什么，并通过使用320和Up中已经存在的样式或创建我们自己的样式，使我们的页面的其余部分与其友好相处。
- en: 'The way I would create a **Gallery** page for myself is with some kind of hero
    at the top of the page, but not a slideshow. I feel it''s important to orient
    users with a simple, bold statement at the top of most pages for this kind of
    site. The main reason is that you cannot count on the user coming to your **Home**
    page first, so you need to establish quite a bit of background about your website
    on every page. I guess I would compare this strategy to the one that writers of
    serial television use: you have to assume that the viewer may need a little background
    information in every episode or, in this case, page.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我为自己创建**画廊**页面的方式是在页面顶部使用某种英雄，但不是幻灯片。我觉得对于这种网站的大多数页面，重要的是用简单而醒目的陈述来引导用户。主要原因是您不能指望用户首先访问您的**主页**，因此您需要在每个页面上建立关于您的网站的相当多的背景信息。我想我会将这种策略与连续电视节目的编写者使用的策略进行比较：您必须假设观众可能需要在每一集或在这种情况下的每个页面中获得一些背景信息。
- en: So, let's start the page off with a hero that is not quite as tall, but still
    has really bold text—a heading and a short sentence.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从一个不太高的英雄开始页面，但仍然具有非常粗体的文本-标题和简短的句子。
- en: To get started, you can grab the `gallery.html` file from `ch3/before/320andup/gallery.html`.
    This file will have all the items we can re-use from our **Home** page, for example,
    the code in the head of the file, the navigation, the footer, and so on. Take
    a few moments to look at it and see what we are re-using for every page as we
    move forward. Go ahead and open this page in a browser to see what you have to
    start with. You should see the navigation part butted right up against the footer.
    Don't worry, we will fill the space in between them soon.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请从`ch3/before/320andup/gallery.html`获取`gallery.html`文件。该文件将包含我们可以从我们的**主页**中重复使用的所有项目，例如文件头中的代码，导航，页脚等。花点时间看一下它，并查看我们在前进过程中重复使用的内容。继续在浏览器中打开此页面，查看您要开始使用的内容。您应该看到导航部分紧挨着页脚。不用担心，我们很快就会填补它们之间的空间。
- en: Before we move on, I just want to quickly outline what code we are keeping from
    the first page we made and why. Of course, we are keeping everything from the
    top of the file to the closing `</head>` tag. We are also re-using the code that
    begins at the footer and continues to the bottom of the file. This is the entire
    code that we need on every page to do essential work across devices and browsers
    as well as to include our styles, favicons, and JavaScript libraries. We also
    have code that will be the same on every page, such as the markup for navigation
    and the footer. In other words, we are repeating this code on every single page
    we are building. This is true but if, for example, you were using a framework
    such as Django or Rails, or some kind of templating language in another framework,
    you would separate the code that would be repeated on every page out to its own
    file so it could be re-used and shared in other files. This would be a great approach
    to solve the problem of requiring this code to appear on every page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我只想快速概述我们从第一页中保留的代码以及原因。当然，我们保留了从文件顶部到结束的`</head>`标记的所有内容。我们还重复使用从页脚开始并延续到文件底部的代码。这是我们在每个页面上需要的整个代码，以便跨设备和浏览器进行基本工作，以及包括我们的样式，网站图标和JavaScript库。我们还有一些在每个页面上都相同的代码，例如导航和页脚的标记。换句话说，我们在构建的每个页面上都重复使用此代码。这是正确的，但是，例如，如果您使用的是Django或Rails等框架，或者在另一个框架中使用某种模板语言，您将把在每个页面上重复出现的代码分离到自己的文件中，以便可以在其他文件中重复使用和共享。这将是解决需要在每个页面上出现此代码的问题的一个很好的方法。
- en: However, in order for me to make this book platform-agnostic, I have simply
    copied this code over from page to page as we progress. I really do not recommend
    making a site this way. Repeating the same code in different places is just an
    invitation to make a horrible mistake at some point (here's hoping I haven't made
    one).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了使这本书不依赖于特定的平台，我只是简单地在我们进行的过程中将这段代码从一页复制到另一页。我真的不建议以这种方式制作网站。在不同的地方重复相同的代码只是在某个时候犯下可怕的错误的邀请（希望我没有犯下一个）。
- en: Let me explain some of the risks of just manually copying this code over from
    page to page. For example, if you decide to make a change to the navigation part
    on one page, you have to remember to make the same change on every page and also
    make sure you execute it with precision. If you've been programming for a while,
    you will recognize this principle as **Don't Repeat Yourself** (**DRY**). It is
    a bedrock principle of writing code. You should follow it. This principle is a
    major justification as to why I recommended using Sass (or LESS) in the previous
    chapter and why you should be using a framework like 320 and Up!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下仅仅手动从一页复制代码到另一页的一些风险。例如，如果你决定在一页上对导航部分进行更改，你必须记住在每一页上做同样的更改，并确保你精确执行。如果你已经编程一段时间，你会认识到这个原则叫做“不要重复你自己”（DRY）。这是编写代码的基本原则。你应该遵循它。这个原则是我之前推荐使用Sass（或LESS）的主要理由，也是你应该使用320
    and Up这样的框架的主要理由！
- en: Ok, enough of me pontificating.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我说得够多的了。
- en: Other aspects of this page would also do well to be re-used in your framework
    of choice. The header, which contains the navigation, and the footer are highly
    likely to be identical on every page, so I would make these components re-usable,
    too. The last thing I will point out is that you should also re-use the JavaScript
    at the bottom. Many times, developers use strategies to make the inclusion of
    CSS and JavaScript dynamic, based on the page needs, but for our simple site that
    is unnecessary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 页面的其他方面也适合在你选择的框架中重复使用。包含导航的页眉和页脚很可能在每一页上都是相同的，所以我也会使这些组件可重复使用。我要指出的最后一件事是，你还应该在底部重复使用JavaScript。许多时候，开发人员使用策略使CSS和JavaScript的包含动态化，根据页面的需要，但对于我们简单的网站来说，这是不必要的。
- en: Now that we've got that business taken care of, let's move on to taking care
    of the content that will be unique to this page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理好了这些事情，让我们继续处理这个页面上独特的内容。
- en: The slim hero
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纤细的英雄
- en: Now, we need a hero at the top of this page, but we don't want to distract too
    much from the gallery tiles. So, we don't want a big, splashy image. Instead we
    want some bold content that quickly sums up what is happening on the page and
    meets the following requirements (that I also mentioned previously); Assume that
    the visitor may have landed on this page without ever seeing the rest of the site
    while not insulting the intelligence of a person who has already been browsing
    the site.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在这个页面顶部放一个英雄，但我们不想让它太过分散注意力，以至于影响到画廊瓷砖。所以，我们不想要一个大而引人注目的图片。相反，我们想要一些醒目的内容，快速总结一下页面上正在发生的事情，并满足以下要求（我之前也提到过）；假设访问者可能会在没有看到网站其他部分的情况下着陆在这个页面上，同时不侮辱那些已经在浏览网站的人的智慧。
- en: What you actually say is up to you, of course. The real objective is to understand
    the strategy of the content and how it relates to our layout.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你实际说什么取决于你。真正的目标是理解内容的策略以及它如何与我们的布局相关。
- en: 'Here is a mock-up of what we are shooting for in a 320 px-wide device:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在320像素宽设备上所追求的效果图：
- en: '![The slim hero](img/6463_03_10.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![纤细的英雄](img/6463_03_10.jpg)'
- en: 'Here is how it should look on a desktop browser:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在桌面浏览器上应该是这样的：
- en: '![The slim hero](img/6463_03_11.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![纤细的英雄](img/6463_03_11.jpg)'
- en: 'The major differences between the two mockups are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 两个效果图之间的主要区别如下：
- en: The 320 px layout will need smaller font sizes than the wider layout
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 320像素的布局将需要比更宽的布局更小的字体大小
- en: The 320 px layout has the text aligned to the center whereas the wider layout
    has the text aligned left
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 320像素的布局将文本居中对齐，而更宽的布局将文本左对齐
- en: This isn't mandatory or anything; it's just a design decision I have made that
    we can also support with the responsive design, as luck would have it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是强制性的，只是我做出的一个设计决定，碰巧我们也可以通过响应式设计来支持它。
- en: 'Now, let''s write some code for this. Place the following markup just below
    the closing the `</header>` tag. Here is what the markup needs to look like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为此编写一些代码。将以下标记放在`</header>`标签的下面。标记需要如下所示：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, the cool thing is, if you have everything in its right place, your page
    will look close to how we want it to because we are re-using styles from the **Home**
    page. To be precise, it only looks right when we look at it on a 320 px wide screen.
    Take a moment to look at the **Home** page and this new **Gallery** page and get
    your head around how the styles are being re-used. You may notice one thing, now
    that our `<h1>` tag has text that goes over two lines, our `line-height` is too
    high. Let''s tighten that up a bit. Edit the `.hero h1` style by adding the following
    line of code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，很酷的是，如果你把所有东西放在正确的位置，你的页面看起来会接近我们想要的样子，因为我们正在重复使用**主页**页面的样式。准确地说，只有当我们在320像素宽的屏幕上查看时，它才看起来正确。花点时间看看**主页**和这个新的**画廊**页面，理解一下样式是如何被重复使用的。你可能会注意到一件事，现在我们的`<h1>`标签的文本跨越了两行，我们的`line-height`太高了。让我们稍微调整一下。通过添加以下代码行来编辑`.hero
    h1`样式：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, refresh the page and see how that keeps the headline nice and compact.
    It's a cozy look, don't you think?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，刷新页面，看看这样如何保持标题简洁。这是一个舒适的外观，你觉得呢？
- en: Ok, so that was super easy! This just works.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这真的很容易！这很有效。
- en: 'Here''s why that works: You''ll notice I set the height to `1em`. An `em` is
    a unit of measurement different from pixels. Pixels set an explicit measurement
    and `em`s set a relative measurement. Why set a relative height? To make future
    changes easier. An `em` is equal to whatever the current font size is. So, in
    this case the `line-height` ends up being equal to the font size. This is the
    desired outcome, since we want there to be little to no extra white space generated
    by a `line-height` greater than the font size.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为什么这样做有效的原因：您会注意到我将高度设置为`1em`。`em`是一种与像素不同的测量单位。像素设置了一个明确的测量，而`em`设置了一个相对的测量。为什么设置相对高度？为了使未来的更改更容易。一个`em`等于当前的字体大小。因此，在这种情况下，`line-height`最终等于字体大小。这是期望的结果，因为我们希望`line-height`与字体大小几乎没有额外的空白空间。
- en: So, why bother to be so abstract? You don't always have to be but I like to
    use `em`s in places like this because it makes changing the font size less troublesome.
    If I come back later and need to adjust the font size, I won't need to also adjust
    the `line-height` to maintain the current styling effect. `Em`s will continue
    to render a `line-height` that is the same as the font size.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么要如此抽象呢？您并不总是必须这样做，但我喜欢在这样的地方使用`em`，因为这样可以使更改字体大小变得不那么麻烦。如果我以后回来需要调整字体大小，我就不需要同时调整`line-height`以保持当前的样式效果。`em`将继续呈现与字体大小相同的`line-height`。
- en: Next, let's look at how all this works for the desktop view. Using your preferred
    method (the responsive `.html` page or just resizing your browser), go ahead and
    take a look at the widest width we are styling for, 1382 px wide.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看所有这些对于桌面视图是如何工作的。使用您喜欢的方法（响应式`.html`页面或调整浏览器大小），继续查看我们正在为之设计的最宽宽度，1382像素宽。
- en: The trouble is that there are some fine points that are off by just a little
    bit. One thing you will notice is that the font size on the desktop layout is
    just a tad too big to keep the layout slim as we want. So, we need to override
    some of the styles we re-used from the **Home** page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于有一些细微的地方差了一点。您会注意到桌面布局上的字体大小稍微有点太大，以至于无法保持我们想要的紧凑布局。因此，我们需要覆盖一些从**主页**中重复使用的样式。
- en: 'There are two ways to accomplish this. One way is to assign a class somewhere
    above the page elements that we want to style differently and then have some new
    style descend from that class that will override the existing class. For example,
    currently, the `<h1>` element in the hero gets this style:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以实现这一点。一种方法是在我们想要以不同样式进行设计的页面元素之上分配一个类，然后从该类中派生一些新样式，这些新样式将覆盖现有的类。例如，当前，英雄中的`<h1>`元素获得了这种样式：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So, we could just add a new class to our hero as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以向我们的英雄添加一个新类，如下所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, somewhere further down on the stylesheet, have a style that has the following
    properties:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在样式表的更下方，有一个具有以下属性的样式：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, this style would override the `.hero` styles applied above it. However,
    this is not ideal; now that we have two kinds of `hero`, the non-slim one is semantically
    vague. Instead, we can add a class to both kinds of `hero` to make it clear that
    the styles apply to a large version of a `hero`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这种样式将覆盖上面应用的`.hero`样式。然而，这并不理想；现在我们有了两种`hero`，非紧凑型的`hero`在语义上是模糊的。相反，我们可以给两种`hero`都添加一个类，以明确这些样式适用于`hero`的大版本。
- en: 'First, let''s go back and change our **Home** page HTML as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们返回并更改我们**主页**的HTML如下：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice the addition of the class `jumbo`. Now, assuming you are using SCSS,
    we need to edit our stylesheet for screens with dimensions 768 px and above to
    match it. In order to do that, open up the `ch3/before/320andup/scss/_76s.scss`
    file. For future reference, I will just ask you to open up the file by its name
    rather than stating the whole path. So, for this file, I will ask you to open
    up the `768` file. When we need to edit styles that apply to layouts 992 px and
    wider; I will ask you to open up your `992` file, and so on. With that established,
    let''s continue with adding some code to the `768` file. In this file, our SCSS
    used to read is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意添加了`jumbo`类。现在，假设您正在使用SCSS，我们需要编辑我们的样式表，以匹配768像素及以上的屏幕。为了做到这一点，打开`ch3/before/320andup/scss/_76s.scss`文件。以后，我只会要求您按名称打开文件，而不是说明整个路径。因此，对于这个文件，我会要求您打开`768`文件。当我们需要编辑适用于992像素及更宽的布局样式时，我会要求您打开`992`文件，依此类推。有了这个基础，让我们继续向`768`文件添加一些代码。在这个文件中，我们的SCSS读取如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we will replace `.hero` with `.jumbo`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将`.hero`替换为`.jumbo`。
- en: 'So now, the whole section of SCSS file should look like the following code
    snippet (with CSS to follow):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，整个SCSS文件部分应该看起来像以下代码片段（接下来是CSS）：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, add the following CSS in the previous code snippet:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在上一个代码片段中添加以下CSS：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, the cool thing is that `.jumbo h1` and `.jumbo p` are much more re-usable
    now that they are decoupled from `.hero`, which has a pretty specific application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，很酷的是`.jumbo h1`和`.jumbo p`现在更具可重用性，因为它们与`.hero`解耦，后者具有相当特定的应用。
- en: 'Now we need to work on the styles for our **Gallery** page. Let''s make the
    HTML code look as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的**画廊**页面的样式进行处理。让我们将HTML代码修改如下：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We don't assign a `subhead` style for 320 styles, but let's add it for styles
    that need text to use up the available space better. The first stop is the 480
    px visual breakpoint. Take a look at this layout at 480 px; we can get away with
    pumping the font size up a bit. It seems like a small change but let's do this
    not only because we can, but because next year there will almost certainly be
    a tablet that is 520 px wide and your layout is going to be more likely to hold
    up at this resolution now that you took the time to do this!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不为320样式分配`subhead`样式，但让我们为需要更好地利用可用空间的样式添加它。第一站是480像素的视觉断点。查看这个480像素的布局；我们可以适当增加字体大小。这似乎是一个小改变，但让我们这样做不仅是因为我们可以，而且因为明年几乎肯定会有一个宽度为520像素的平板电脑，现在您花时间这样做，您的布局更有可能在这个分辨率下保持稳定！
- en: 'If you are using SCSS (or another preprocessor), add the following code to
    your `480px` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用SCSS（或其他预处理器），请在你的`480px`文件中添加以下代码：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will render CSS that is once again nested inside the query `@media only
    screen and (min. width: 480px)` and looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '这将再次渲染CSS，嵌套在查询`@media only screen and (min. width: 480px)`内，并且看起来像这样：'
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are keeping the text centered at this point, since the rest of the layout
    is going to be centered too. More on this once we add the content panels.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们保持文本居中，因为布局的其余部分也将居中。在我们添加内容面板后再详细讨论这一点。
- en: 'Let''s move on to the next visual breakpoint, that is, 600 px. The heading
    at `48px` looks a bit puny. Let''s go ahead and pump it all the way up to `60px`.
    Add this to your `600px` file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个视觉断点，即600像素。`48px`的标题看起来有点小。让我们把它全部增加到`60px`。将这段代码添加到你的`600px`文件中：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This previous code renders the following CSS:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码渲染了以下CSS：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, moving on to the 768 px visual breakpoint—how does it look to you? I think
    this font size works here and up to the other breakpoints but, if you are so inclined,
    make changes to the larger sizes too. To a certain extent, it depends on how much
    you want to tailor the font size to your content or how much you want some safer,
    more generic styles to work well with the dynamic content. My goal with these
    layouts is to make a layout that is likely to work with a wide range of content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到768像素的视觉断点——你觉得它看起来怎么样？我觉得这个字体大小在这里以及其他断点上都适用，但是如果你愿意的话，也可以对更大的尺寸进行更改。在某种程度上，这取决于你想要多大程度地定制字体大小以适应你的内容，或者你想要一些更安全、更通用的样式来很好地适应动态内容。我设计这些布局的目标是创建一个可能适用于各种内容的布局。
- en: Now, we have the fonts in the `subhead` hero looking good at all sizes! Take
    a moment to re-size your browser and watch how everything changes and uses the
    existing screen space. One thing you may notice is how the space between the text
    and the edge of the viewing area gets dramatically narrower, up to somewhere between
    600 px and 786 px. The reason this happens, you might recall, is because we don't
    style the `div` tag with the `container` class until we hit the 768px breakpoint.
    We will address that in a moment, but let's see how it plays with the content
    panels before we mess with it too much.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`subhead`标题在所有尺寸下看起来都很好！花点时间调整浏览器的大小，看看一切是如何变化并利用现有的屏幕空间。你可能会注意到的一件事是，文本与视图区域边缘之间的空间变得显著变窄，直到在600像素和786像素之间。你可能还记得，这发生的原因是因为我们直到达到768像素的断点之前，才对带有`container`类的`div`标签进行样式设置。我们稍后会解决这个问题，但在我们过多地干扰它之前，让我们看看它与内容面板的搭配效果如何。
- en: At this point, I should mention that my own approach to building responsive
    layouts, whether working alone or with a team, is always recursive like this.
    I try to build one component of a page until I feel like it is either exactly
    what I want or I find that I have questions about how it will play with the rest
    of the content on the page; this is one such juncture for me. While working with
    a team, I might start to code out this page and get feedback from a designer or
    another developer, then tweak it until we are all satisfied enough to ship the
    code or show the client, whatever the case may be. Since, we are making a site
    for ourselves we are just iterating alone (you and me together).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我应该提到，我自己构建响应式布局的方法，无论是独自工作还是与团队合作，总是像这样递归的。我试图构建页面的一个组件，直到我觉得它要么完全符合我的要求，要么我对它如何与页面上其他内容搭配有疑问；对我来说，这是一个这样的关键时刻。在与团队合作时，我可能会开始编写这个页面的代码，并从设计师或其他开发人员那里得到反馈，然后进行调整，直到我们都满意到足以发布代码或向客户展示。因为我们正在为自己制作一个网站，我们只是独自迭代（你和我一起）。
- en: So, on that note, we are going to add our content panels, but then we are going
    to need to loop back around and make sure our `subhead` hero looks Ok.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将添加我们的内容面板，但接着我们需要回过头来确保我们的`subhead`标题看起来不错。
- en: Content panels
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容面板
- en: You may remember that, as with the **Home** page, each content panel will have
    an image, a heading, and a short blurb.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，与**主页**一样，每个内容面板都将有一个图像、一个标题和一个简短的简介。
- en: '![Content panels](img/6463_03_12.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![内容面板](img/6463_03_12.jpg)'
- en: If I were doing this to show off my portfolio of work on websites, I would use
    screen grabs of each project I want to highlight and work on writing fairly short
    headings and blurbs for each. By default 320 and Up has each heading as a link
    to a corresponding page but you could link each panel, instead, if you are worried
    that people won't click on it. Later, we will make an example page to demonstrate
    where a user might land if they were to click the heading.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我这样做是为了展示我在网站上的作品集，我会使用每个我想要突出显示的项目的屏幕截图，并编写相对简短的标题和简介。默认情况下，320 and Up将每个标题作为指向相应页面的链接，但如果你担心人们不会点击它，你也可以将每个面板链接起来。稍后，我们将制作一个示例页面，演示用户如果点击标题会跳转到哪里。
- en: For this example page, we will continue to use the placeholder image and Lorem
    Ipsum, but feel free to make actual, meaningful content if you have some ready.
    Additionally, if you are hooking these layouts up to some kind of content management
    system or blog, you should think through how you will have to change your code
    for those kinds of approaches. For example, you may be building this layout via
    a loop in a template that relies on the number of `gallery` objects you have created.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例页面，我们将继续使用占位图像和Lorem Ipsum，但如果你已经准备好了一些实际的、有意义的内容，也可以随意使用。此外，如果你将这些布局连接到某种内容管理系统或博客，你应该考虑如何改变你的代码以适应这些方法。例如，你可能是通过模板中的循环来构建这个布局，这个模板依赖于你创建的`gallery`对象的数量。
- en: For the panels themselves, all you need to do is use the same ones we put on
    the **Home** page; but instead of only three, you can add as many as you want
    to show off your awesome work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于面板本身，你只需要使用我们放在**主页**上的相同的面板；但是不仅仅是三个，你可以添加任意数量来展示你的出色工作。
- en: 'Here is the HTML code you will need to make the first set of three panels:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你需要制作第一组三个面板的HTML代码：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, you just have to save and refresh your page and you will see it all work!
    Ridiculously efficient, isn't it? Now, of course, for your own content, it is
    critical that you use 410 x 230 pixel-images that you will crop with either image-editing
    software or a nifty editing tool in a CMS or blog. You will notice that there
    is an `<h2>` heading above this group of three panels. I would only include this
    if you have some kind of sensible groupings that will benefit from being titled.
    The layout will work fine with or without this particular heading. I would not
    recommend removing the `<h3>` headings because, along with the images, they will
    really help viewers scan the page and find information quickly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需保存并刷新页面，就会看到一切都运行正常！效率非常高，不是吗？当然，对于您自己的内容，非常重要的是使用410 x 230像素的图像，您可以使用图像编辑软件或CMS或博客中的巧妙编辑工具进行裁剪。您会注意到，在这三个面板的上方有一个`<h2>`标题。如果有一些合理的分组可以受益于标题，我才会包括这个标题。即使没有这个特定的标题，布局也会很好地工作。我不建议删除`<h3>`标题，因为它们和图像一起，将帮助观看者快速浏览页面并快速找到信息。
- en: So, at this point, you can either use the placeholder images in the code sample
    to build this page or start including your own content. If you are doing it statically,
    as opposed to building the page with a loop in some kind of template, you will
    just need to keep copying-and-pasting these panels.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这一点上，您可以使用代码示例中的占位图像来构建此页面，也可以开始包含您自己的内容。如果您是静态地进行操作，而不是在某种模板中使用循环构建页面，那么您只需要不断地复制和粘贴这些面板。
- en: Experiment a bit; however, I would like to give you just some quick thoughts
    about how these panels will work on the page. One thing to consider is how one
    gets the panels to lay out without being separated by headings or additional whitespace.
    All you really need to do is keep repeating the `grid-1`, `grid-2`, and `grid-3`
    blocks as needed (with the entire markup that is inside them, of course). I have
    also shared this in the example code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微尝试一下；不过，我想给您一些关于这些面板在页面上如何工作的快速想法。需要考虑的一件事是如何让面板在没有标题或额外空白的情况下布局。您真正需要做的就是根据需要不断重复`grid-1`、`grid-2`和`grid-3`块（当然，里面的整个标记也是如此）。我也在示例代码中分享了这一点。
- en: Another thing to consider is what to do if you don't have panels in exact multiples
    of three. That is Ok, too! It just works. I have shared this in the example code
    as well. I stopped at just five blocks and it lays out just as you'd want it to.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的问题是，如果您没有完全是三的倍数的面板，该怎么办。没关系！它也可以正常工作。我在示例代码中也分享了这一点。我只停留在了五个块，它的布局正如您所希望的那样。
- en: 'There are only two problems left to solve with regard to this page. The first
    problem, you may notice, is that, in my initial wireframe, I wanted to left-align
    the text for larger layouts. Somewhat arbitrarily, I have decided that we will
    do that for all layouts above 600 px. Go to your `600px` file and add the following
    code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个页面，只剩下两个问题需要解决。第一个问题是，您可能会注意到，在我的初始线框图中，我希望为较大的布局左对齐文本。我随意决定，我们将对所有大于600像素的布局进行左对齐。转到您的`600px`文件并添加以下代码：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or, add the following code in the `600px` `@media` query in your CSS:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在您的CSS中的`600px` `@media`查询中添加以下代码：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, the text is only centered for smaller devices and left-aligned for tablets
    and larger devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，文本只在较小的设备上居中，而在平板电脑和较大的设备上左对齐。
- en: The second problem you might catch as you resize your browser between 600 px
    and 768 px. Hopefully, you've noticed that the text in the hero ends up being
    a lot closer to the edge of the viewing area than the rest of the layout. You
    may recall that we have all the content inside the `content` container, but that
    class doesn't get styled until the `768px` `@media` query fires. Perhaps we should
    try to apply the styles within `768` `@media` query to `600px`-width screens instead
    and see what this does to all layouts at all breakpoints above `600px`. So, right
    now, go ahead and cut that style from the `768px` file and paste it in the `600px`
    file. Or, if you are using plain CSS, you will need to remove this code from the
    `768px` `@media` query and paste into the `600px` one.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题可能是当您在600像素和768像素之间调整浏览器大小时会注意到的。希望您已经注意到，英雄部分的文本最终与视图区域的边缘距离比布局的其余部分要近得多。您可能还记得，我们将所有内容放在`content`容器中，但是该类在`768px`
    `@media`查询触发之前不会被样式化。也许我们应该尝试将`768` `@media`查询中的样式应用于`600px`宽度的屏幕，看看这对大于`600px`的所有布局的所有断点有什么影响。因此，现在，立即从`768px`文件中剪切该样式，并粘贴到`600px`文件中。或者，如果您使用的是纯CSS，您需要从`768px`
    `@media`查询中删除此代码，并将其粘贴到`600px`中。
- en: Now, once you've done that, go back and play around with both the **Home** and
    **Gallery** pages by resizing your browser. The heading in the hero now stays
    nicely aligned with the panels beneath it. This change doesn't seem to adversely
    affect the **Home** page hero or the footer, so it looks like we are good to go.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，完成了这一步之后，回去调整**主页**和**画廊**页面，调整浏览器的大小。主页的标题现在与其下面的面板保持良好的对齐。这个更改似乎并不会对**主页**的标题或页脚产生不利影响，所以看起来我们可以继续了。
- en: To a certain extent, this is how I develop for responsive websites, I see what
    breaks and try to fix it, in a generic, elegant way where possible, without putting
    undue constraints on the content.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，这就是我为响应式网站开发的方式，我看看有什么问题，然后尝试修复它，以一种通用而优雅的方式，尽可能不对内容施加不必要的限制。
- en: Now, the last big task we have for this chapter is to make the page that the
    users will land on when they click on the link for the corresponding content panel.
    We will call this task the gallery detail.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在这一章中的最后一个重要任务是制作用户单击相应内容面板链接时将着陆的页面。我们将称这个任务为画廊详情。
- en: The gallery detail
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 画廊详情
- en: So, let's have a look at the content we want on this page and how to strategize
    the layouts for different devices.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们想要在这个页面上的内容以及如何为不同的设备进行布局策略。
- en: The main things, I think, most people want to see in a portfolio of any kind
    are a few key images and some lengthier, detailed text describing images.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，大多数人希望在任何类型的作品集中看到的主要内容是一些关键图像和一些更详细的文本，用于描述这些图像。
- en: 'Here is the layout we will need for mobile screens:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们移动屏幕所需的布局：
- en: '![The gallery detail](img/6463_03_13.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![画廊详情](img/6463_03_13.jpg)'
- en: The smaller squares, shown in the screenshot, will be the thumbnails that users
    can touch or click on to show the larger image above the smaller images on the
    page. The first thumbnail will be the default image that will be displayed when
    the **Gallery** page loads. We will also highlight the thumbnail that is currently
    active, with a border. In order to do this, we will need to make both full-sized
    and thumbnail-sized images of all the images. The description for each image will
    be below the thumbnails (and that's completely appropriate in my book). If your
    images are compelling enough, people will scroll down to read it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕截图中显示的较小的正方形将是用户可以触摸或单击以显示页面上较小图像上方的较大图像的缩略图。第一个缩略图将是**画廊**页面加载时显示的默认图像。我们还将突出显示当前活动的缩略图，带有边框。为了做到这一点，我们需要制作所有图像的全尺寸和缩略图尺寸的图像。每个图像的描述将显示在缩略图下方（在我看来这完全合适）。如果您的图像足够引人注目，人们会向下滚动以阅读它。
- en: 'Now, let''s look at the opposite end of the spectrum—the desktop view. We will
    want to orient things differently now that we have more screen real estate:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看相反的情况——桌面视图。现在我们有更多的屏幕空间，我们将希望以不同的方式布置事物：
- en: '![The gallery detail](img/6463_03_14.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![画廊详情](img/6463_03_14.jpg)'
- en: With the added space, we can put the text that you worked so hard to write right
    next to the big image below which the thumbnails are placed. Let's assume that,
    as with the other responsive layouts, these two layouts will cover all the breakpoints
    as long as we size key components of the page in percentages.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有了额外的空间，我们可以将您辛苦撰写的文本放在大图像的旁边，下面是缩略图的位置。假设与其他响应式布局一样，只要我们以百分比调整页面的关键组件大小，这两种布局将覆盖所有断点。
- en: As before, let's start with the layout for mobile screens first. The HTML structure
    of the page should be fairly straightforward. We will need to put all the images
    on the page, hiding all but the first featured image, and then we will add our
    text. Again, let's not think too hard about what the desktop page will look like;
    let's just get what the mobile layout needs as simply as possible.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，让我们先从移动屏幕的布局开始。页面的HTML结构应该相当简单。我们需要将所有图像放在页面上，隐藏除第一个特色图像之外的所有图像，然后我们将添加我们的文本。同样，让我们不要过多考虑桌面页面的外观；让我们尽可能简单地获取移动布局所需的内容。
- en: As before, you will need to make sure you re-use the basic structure of our
    page—the header, navigation, and footer. We will be inserting new content below
    the header after the closing `</header>` tag (to be precise). Please make sure
    to carefully investigate where the following code is going in the example code
    at `ch3/320andup/gallery-item.html` so you can follow along.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，您需要确保重复使用我们页面的基本结构——页眉、导航和页脚。在关闭`</header>`标签之后，我们将在页眉下方插入新内容（确切地说）。请务必仔细调查示例代码`ch3/320andup/gallery-item.html`中以下代码的位置，以便您可以跟上。
- en: 'Here is what the HTML code we will add on the gallery item page will look like:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在画廊项目页面上添加的HTML代码的样子：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should notice in the basic structure of the code that we have an outer container
    that holds all our main images and all our thumbnail images. This container has
    the class `gallery-showcase`. Inside this class, there are containers for the
    big images and the smaller thumbnail images—`featured-images` and `thumbnail-images`,
    respectively—that users will click on or touch to see the corresponding larger
    images. The inner `gallery-image-area` container is there to help out with layout,
    mostly. As we did with the slideshow, we will load all the images onto the page
    while hiding the ones that aren't active using CSS. Later, we will hook up some
    simple, elegant JS to make it all interactive. The last bit, you will notice in
    the previous code, is the `gallery-description` container that will hold the text
    you write about the portfolio item.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到代码的基本结构中有一个外部容器，其中包含所有我们的主要图像和所有我们的缩略图像。这个容器具有`gallery-showcase`类。在这个类内部，有用于大图像和较小缩略图像的容器——分别是`featured-images`和`thumbnail-images`，用户可以点击或触摸以查看相应的较大图像。内部的`gallery-image-area`容器主要用于布局。就像我们在幻灯片中所做的那样，我们将使用CSS将所有图像加载到页面上，同时隐藏不活动的图像。稍后，我们将连接一些简单而优雅的JS使其具有互动性。您将在以前的代码中注意到的最后一部分是`gallery-description`容器，它将包含您对作品集项目的描述。
- en: I have included placeholder images for you and they are provided in the shared
    code. The size of the big images is 550 x 550 pixels and that of the thumbnails
    is 80 x 80 pixels. If you want to use these layouts for your own purposes without
    modifying the layout, you will need to edit some images to those sizes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经为您添加了占位图像，并在共享代码中提供了它们。大图像的尺寸为550 x 550像素，缩略图的尺寸为80 x 80像素。如果您想在不修改布局的情况下将这些布局用于自己的目的，您需要编辑一些图像到这些尺寸。
- en: If you are feeling impatient, as I often do, you have already refreshed this
    page and can see that it is not ready for primetime. We have some work to do.
    Let's start off by hiding the large gallery images that won't be seen when the
    page loads. Much as we did for our hero slideshow, we will assign a class to the
    first image; this will make it the only visible image on the page. Go back to
    the HTML file we just made and notice that we have the class `active` assigned
    to the first large image and the first thumbnail.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您感到不耐烦，就像我经常做的那样，您已经刷新了这个页面，并且可以看到它还没有准备好。我们还有一些工作要做。让我们首先隐藏在页面加载时不会看到的大画廊图像。就像我们为英雄幻灯片所做的那样，我们将为第一张图像分配一个类；这将使它成为页面上唯一可见的图像。回到我们刚刚制作的HTML文件，注意我们已经为第一张大图像和第一张缩略图分配了`active`类。
- en: Ok, let's get to styling!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始样式设计！
- en: We are going to add some styles to the `page` file; for me that is the `page.scss`
    file. But, if you are just directly editing CSS, you will need to just add these
    styles into your CSS file. The way they are rendered by the SCSS preprocessor
    includes these styles below the table styles in the code, fairly far down in the
    file. I recommend following this so that these styles are lower in the stylesheet
    than the more general, sitewide styles. I tend to think of the `site` and `page`
    files a little differently from *Andy* (no offense). I think of the `site` styles
    as elements on the page that will appear across the site on every (or nearly every)
    page. Then, I think of the `page` styles as being specific to particular pages,
    with less likelihood of being re-used on another page.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`page`文件添加一些样式；对我来说，那是`page.scss`文件。但是，如果你直接编辑CSS，你只需要把这些样式添加到你的CSS文件中。由于SCSS预处理器的渲染方式，这些样式会在代码中的表格样式下面，文件中的位置相当靠后。我建议遵循这个顺序，这样这些样式会在样式表中比更通用的全站样式更低。我倾向于从*Andy*（无意冒犯）那里有点不同地看待`site`和`page`文件。我认为`site`样式是页面上会在每个（或几乎每个）页面上出现的元素。然后，我认为`page`样式是特定页面的样式，不太可能在其他页面上被重复使用。
- en: 'First, let''s get the headings how we want them. You may notice that we have
    a second `<header>` on this page (yes that is allowed). We want to add some page-specific
    styles to the headings within the page. First, we need to get the text below the
    image to align to the center, so all we need in SCSS or CSS is the following code
    added to the appropriate spot (see the code samples that can be downloaded from
    the Packt Publishing website if you''re not sure):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们把标题弄成我们想要的样子。你可能注意到我们在这个页面上有第二个`<header>`（是的，这是允许的）。我们想要为页面内的标题添加一些特定的样式。首先，我们需要让图片下面的文本居中对齐，所以我们只需要在SCSS或CSS中添加以下代码到适当的位置（如果你不确定，可以从Packt
    Publishing网站下载代码示例）：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we need to apply styles for the fonts:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要为字体应用样式：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The previous code is rendered to this CSS:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码渲染为以下CSS：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s apply styles to hide all the big gallery images that aren''t active.
    To do that, write the following SCSS code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们应用样式来隐藏所有未激活的大图库图片。为此，写入以下SCSS代码：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The previous code renders the following CSS:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码渲染为以下CSS：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Refresh the page and now you should only see the first big gallery image. Progress!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面，现在你应该只能看到第一个大图库图片。进展了！
- en: You should be looking at our layout at 320 px (remember that this is mobile
    first) and will see that, so far, everything is stacked—absolutely everything.
    The only thing that we, for sure, don't want to stack is the thumbnail images.
    So, let's get those laid out correctly. Basically, all we need to do is get the
    `<li>` tags to float left and add some space and we will have most of what we
    need.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在320像素的布局上查看我们的布局（记住这是移动优先），会发现到目前为止，所有的东西都是堆叠的——绝对所有的东西。唯一我们肯定不想堆叠的就是缩略图。所以，让我们把它们正确地布局出来。基本上，我们只需要让`<li>`标签左浮动并添加一些间距，我们就会得到大部分我们需要的东西。
- en: 'Add the following code to your stylesheet:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的样式表中添加以下代码：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this code, we first removed the browser's default bullets for lists (but
    only for lists inside the `gallery-image-container` block) and then we made the
    thumbnails float left. This way, you can potentially have as many thumbnails as
    you want, but I'd keep it down to about three to keep things simple for your site's
    visitors. The trouble, though, is that, if you have three in there as I do with
    the shared code, you will trick yourself into thinking that this layout works
    just fine. If you have three thumbnails in there, temporarily remove the entire
    HTML code for the third one so that you only have two left.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们首先移除了列表的默认项目符号（但仅限于`gallery-image-container`块内的列表），然后我们让缩略图左浮动。这样，你可以潜在地拥有尽可能多的缩略图，但我建议保持在三个左右，以便让你网站的访问者更容易理解。然而，问题在于，如果你像我在共享代码中一样放了三个缩略图，你会误以为这个布局完全没问题。如果你放了三个缩略图，暂时移除第三个的整个HTML代码，这样你就只剩下两个了。
- en: '![The gallery detail](img/6463_03_15.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图库详情](img/6463_03_15.jpg)'
- en: 'See what happens? The text we have below the thumbnails creeps up because the
    thumbnails `<li>` are floats. If you don''t know about all the idiosyncrasies
    of floats, I encourage you to read up on them. Here is the link to a great article
    about floats: [http://alistapart.com/article/css-floats-101](http://alistapart.com/article/css-floats-101)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 看到了吗？我们在缩略图下面的文本会因为缩略图的`<li>`浮动而上移。如果你不了解浮动的所有特性，我建议你去了解一下。这是一个关于浮动的很棒的文章链接：[http://alistapart.com/article/css-floats-101](http://alistapart.com/article/css-floats-101)
- en: 'But, for now, I will just show you one way to fix this. All we need to do is
    clear the container that holds the text. You do that by adding the following SCSS/CSS:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，现在，我只会告诉你一种修复这个问题的方法。我们只需要清除包含文本的容器。你可以通过添加以下SCSS/CSS来实现：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s do just one more thing before we move on to the larger layouts: let''s
    get all the content away from the edges of the screen and get it to a size similar
    to that of navigation. We can do this using a similar approach to what we used
    earlier with the hero.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续处理更大的布局之前，让我们再做一件事：让所有的内容远离屏幕边缘，并使其大小与导航栏类似。我们可以使用与之前处理英雄部分类似的方法来实现这一点。
- en: 'Add the following SCSS/CSS code to your stylesheet:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的样式表中添加以下SCSS/CSS代码：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, it''s looking good! All we need is to make the layout appropriate for
    a larger layout. Once we are above 768 px, we can move the text up to the right
    of the large image. Go ahead and open up your `_768` file or find the `768` `@media`
    query in your CSS and we will move the text up to right with minimal effort. Here
    is the SCSS/CSS code (again; it is the same as the one shown earlier in the chapter):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来不错！我们只需要让布局适应更大的屏幕。一旦超过768像素，我们就可以把文本移到大图像的右侧。打开你的`_768`文件或者找到你的CSS中的`768`
    `@media`查询，我们将以最小的努力把文本移到右侧。以下是SCSS/CSS代码（再次；与本章前面显示的代码相同）：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, drag your browser''s width around and enjoy. There is one last problem
    to solve: you may notice that the headings shift up under the navigation part
    once the size of navigation changes. You may recall that this is due to the navigation
    part being a fixed element. All we need to do is specify a different margin on
    the `page-header` as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，拖动浏览器的宽度并享受吧。还有一个问题要解决：您可能会注意到一旦导航的大小发生变化，标题会向上移动。您可能会记得这是由于导航部分是一个固定元素。我们需要做的就是在`page-header`上指定不同的边距，如下所示：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: And, that should look right. Refresh the page and enjoy!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，页面应该看起来正确。刷新页面并享受吧！
- en: The back link
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回链接
- en: Let's add a simple enhancement to the page in order to make navigation easy.
    Since this Gallery item page isn't in the menu and it wouldn't necessarily be
    practical to add a menu item for every Gallery item, let's just add a back link
    to the top of the page. This makes it easy for users on any device to get back
    to the **Gallery** page.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为页面添加一个简单的增强功能，以便轻松导航。由于这个画廊项目页面不在菜单中，而且为每个画廊项目添加一个菜单项可能并不实际，让我们只是在页面顶部添加一个返回链接。这样可以让任何设备上的用户轻松返回到**画廊**页面。
- en: 'First, let''s add this link to the markup on `gallery-item.html`. Make the
    back link the last thing inside the header:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在`gallery-item.html`的标记中添加这个链接。将返回链接放在页眉内的最后一个位置：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is the code in context:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上下文中的代码：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Refresh your browser and you will notice that you get some nice button styling
    for free, thanks to 320 and Up. We will need to do just a little bit more styling
    but first let me clear up something important. What we just built is one example
    Gallery item page linked from the `gallery.html` page. If you are building this
    as a hand-built, static site (despite my earlier advice not to), you will need
    to build this page manually for all your gallery items and give each page its
    own name that is not `gallery-item.html`. Instead, you might need to name it `company-site.html`
    or whatever the project you are showing off is. Furthermore, you will notice that
    I created the back link back to the **Gallery** page as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新您的浏览器，您会注意到您免费获得了一些漂亮的按钮样式，这要感谢320 and Up。我们需要再做一点点样式，但首先让我澄清一些重要的事情。我们刚刚构建的是一个示例画廊项目页面，链接自`gallery.html`页面。如果您正在手工构建这个静态网站（尽管我之前建议不要这样做），您需要为所有的画廊项目手动构建这个页面，并为每个页面指定一个不是`gallery-item.html`的独特名称。相反，您可能需要将其命名为`company-site.html`或者您要展示的项目的名称。此外，您会注意到我创建了返回链接返回到**画廊**页面，如下所示：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'That is not a typical way to form links; in your own project you are more likely
    to make the link as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是形成链接的典型方式；在您自己的项目中，您更有可能将链接制作如下：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In our example code, we need to use `gallery.html` because the more typical`/gallery.html`
    would take us to the root of our entire project. And, guess what? There is no
    `gallery.html` page at the root of this project because I have broken the project
    up into chapters. So, with this example project, you will get a **404** response
    (**Page Not Found**). Try it out.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例代码中，我们需要使用`gallery.html`，因为更典型的`/gallery.html`会将我们带到整个项目的根目录。而且，猜猜看？在这个项目的根目录中并没有`gallery.html`页面，因为我已经将项目分成了章节。因此，在这个示例项目中，您将会收到**404**响应（**页面未找到**）。试一试吧。
- en: To sum up, you will most likely want your link to look like `href="/gallery.html"`
    not like `href="gallery.html"`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，您很可能希望您的链接看起来像`href="/gallery.html"`而不是`href="gallery.html"`。
- en: 'Now, let''s add some styles to that button so that it isn''t just sitting in
    the middle of the page. The simplest thing to do, for now, is to float it to the
    left. To do this, add the following code of styles to your equivalent of the `_page.scss`
    file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为按钮添加一些样式，这样它就不会只是坐在页面中间了。现在，最简单的做法就是将其浮动到左侧。要做到这一点，请将以下样式代码添加到您的`_page.scss`文件的相应位置：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'I nested this inside the code for `.page-header`. So, in this context, the
    code looks as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这个嵌套在了`.page-header`的代码内部。因此，在这个上下文中，代码如下所示：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And the code in CSS will look as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: CSS中的代码如下所示：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'That isn''t enough, though. Refresh the page after adding this style and you
    will notice that things look broken. That is because we need to clear that float.
    Simple! Add the following line of code to your SCSS or CSS for the `.gallery-showcase`,
    `.gallery-description` style:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这还不够。在添加这个样式后刷新页面，您会注意到页面看起来有问题。这是因为我们需要清除浮动。简单！在`.gallery-showcase`、`.gallery-description`样式的SCSS或CSS中添加以下代码：
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This style will be applied to both elements, which doesn''t affect anything
    adversely for our purposes. If you want to, though, you can always split your
    CSS code up into two separate styles if it bothers you. There is one last thing
    to do now for this button. It is sitting right up next to both the viewport and
    the main image. Let''s go back and add a margin to push it away from everything.
    Here is what the updated `.page-header` `.back` style should look like:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个样式将应用于两个元素，对我们的目的没有任何不利影响。不过，如果您愿意，您可以将您的CSS代码分成两个独立的样式，如果这让您感到不舒服的话。现在，这个按钮还有最后一件事要做。它紧挨着视口和主图。让我们回去，添加一个边距将其推开。更新后的`.page-header`
    `.back`样式应该如下所示：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Next, let's get the gallery item JavaScript happening!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们开始使用画廊项目的JavaScript！
- en: The JavaScript gallery item
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript画廊项目
- en: 'Next, we need to write some JavaScript to meet our needs in this Gallery item
    page. Our needs are very simple; if a user clicks on a thumbnail, we want to show
    the corresponding larger image. There are lots of strategies for this but I am
    going to rely on two things to do this fast and easily: our page structure and
    jQuery''s ability to index things easily. So, let me show you the code first and
    then I will explain how it works. Paste or type this code into your `script.js`
    file, anywhere within the `ready` function (look at the code sample that can be
    downloaded from the Packt Publishing website if you aren''t sure):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要编写一些JavaScript来满足我们在这个画廊项目页面中的需求。我们的需求非常简单；如果用户点击缩略图，我们希望显示相应的较大图像。有很多策略可以做到这一点，但我将依赖两件事情来快速轻松地实现：我们的页面结构和jQuery轻松索引事物的能力。所以，让我先展示代码，然后再解释它是如何工作的。将以下代码粘贴或输入到您的`script.js`文件中，可以放在`ready`函数的任何位置（如果不确定，可以从Packt
    Publishing网站下载代码示例）：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here is what that code does line by line:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码逐行的功能：
- en: 'The following line of code attaches an event listener to the thumbnails so
    that, when it is clicked, the rest of the code inside that function is executed:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行将事件侦听器附加到缩略图上，这样当点击时，函数内的其余代码将被执行：
- en: '[PRE38]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The following line of code gets the zero-based index of the thumbnail you just
    clicked on. In other words, it finds out how many other thumbnails are alongside
    this one and which number it is in the sequence. Zero-based is the way computers
    count. So, if you clicked on the first thumbnail in the list, it will get an index
    of `0`; the second will get an index of `1`. Sorry if that is confusing, but that
    is how computers count many things. Anyway, we are going to use that number to
    target the corresponding image in the list of `featured-images` in a moment.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行获取您刚刚点击的缩略图的从零开始的索引。换句话说，它找出了与此缩略图并排的其他缩略图数量以及它在序列中的编号。从零开始是计算机的计数方式。因此，如果您点击列表中的第一个缩略图，它将获得索引`0`；第二个将获得索引`1`。如果这让您感到困惑，对不起，但这就是计算机计数许多事物的方式。无论如何，我们将使用该数字来定位稍后在`featured-images`列表中的相应图像。
- en: '[PRE39]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following line of code removes the `active` class from the `featured-image-item`
    that currently has the class `active` on it:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行从当前具有`active`类的`featured-image-item`中删除`active`类：
- en: '[PRE40]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following line of code adds the `active` class to the `featured-image-item`
    container that is in the same place in the list as the corresponding thumbnail:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行将`active`类添加到与相应缩略图在列表中相同位置的`featured-image-item`容器中：
- en: '[PRE41]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following two lines of code function the same as the two we just looked
    at and also remove and add the `active` class on thumbnails instead:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两行代码的功能与我们刚刚看到的两行代码相同，并且也在缩略图上删除和添加`active`类：
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: To oversimplify it a bit, the previous code says that, when a user clicks on
    the *n*th thumbnail, the `active` class makes it active, and then makes the *n*th
    featured image active.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，前面的代码表示，当用户点击第*n*个缩略图时，`active`类使其活动，并使第*n*个特色图像活动。
- en: Now that you have the `active` class, another nice enhancement is to add a border
    to highlight the active thumbnail.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有了`active`类，另一个不错的增强是添加边框以突出显示活动缩略图。
- en: 'Update your `_page.scss` file (or its equivalent) to the following code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 更新您的`_page.scss`文件（或其等效文件）为以下代码：
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The CSS code will look as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码如下所示：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: I added a 3 px wide border and chose our theme's base color (choose whatever
    color works best for you, though). Since the border will make each thumb take
    up more space, I reduced the margins by a corresponding amount. It makes the thumbnail
    jump a little, but I don't mind because it gives the user some feedback. If you
    do mind, I encourage you to find a strategy that makes it not do that!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了3像素宽的边框，并选择了我们主题的基础颜色（尽管您可以选择最适合您的颜色）。由于边框会使每个缩略图占用更多空间，我相应地减少了边距。这会使缩略图稍微跳动，但我不介意，因为这会给用户一些反馈。如果您介意，我鼓励您找到一种不会发生这种情况的策略！
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've covered a lot of ground, yet again! In this chapter, we made a gallery
    overview and a gallery detail that will work equally well for devices ranging
    from mobile phones to desktops. We re-used some of 320 and Up's upstarts so that
    we didn't have to build responsive, three-columned layouts from scratch. The columns
    stack nicely on small screens and arrange themselves horizontally to fill the
    width on wider screens. We made a slightly modified hero for the **Gallery** page
    without having to write a ton of override styles and we even wrote some elegant
    JavaScript to make the **Gallery** detail page interactive. In the next chapter,
    we will build a page so site visitors can contact us.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们又走了很多路！在本章中，我们制作了一个画廊概述和一个画廊详细信息，这对于从手机到台式机等各种设备都能很好地工作。我们重复使用了一些320和Up的起步，这样我们就不必从头开始构建响应式的三列布局。列在小屏幕上很好地堆叠，并在更宽的屏幕上水平排列以填充宽度。我们为**画廊**页面制作了一个略微修改的主视觉，而无需编写大量覆盖样式，甚至编写了一些优雅的JavaScript来使**画廊**详细页面交互。在下一章中，我们将制作一个页面，让网站访问者可以与我们联系。
