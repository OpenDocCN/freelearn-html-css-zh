- en: Chapter 4. Building the Contact Form
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。构建联系表格
- en: In [Chapter 3](ch03.html "Chapter 3. Building the Gallery Page"), *Building
    the Gallery Page*, we built pages to show off our work. Hopefully, the quality
    of the work you show off on these pages is so compelling that site visitors will
    want to contact you to hire you for your amazing work.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第三章](ch03.html "第三章。构建画廊页面")中，*构建画廊页面*，我们建立了展示我们作品的页面。希望你在这些页面上展示的作品质量是如此引人注目，以至于网站访客会想要联系你，雇佣你的出色工作。
- en: Let's make the ability to do that easy and attractive!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们让这个能力变得简单和有吸引力！
- en: Making a form plan
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制定表格计划
- en: I know forms aren't exactly exciting, but we must get user info somehow, so
    we might as well make them look nice and not stodgy and cold. A clean and friendly
    form will be easy and minimal, gathering only the info we need. We also need to
    make the process of filling out a form as clear and free of frustration as possible.
    The 320 and Up framework is built to facilitate quite a bit of this, but we will
    still need to do the requisite planning to make sure it is just so.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道表格并不是很令人兴奋，但我们必须以某种方式获取用户信息，所以我们不妨让它们看起来漂亮一些，而不是呆板和冷冰冰。一个干净友好的表格将会简单而且最少，只收集我们需要的信息。我们还需要确保填写表格的过程尽可能清晰和没有挫折感。320和Up框架被设计用来促进这些工作，但我们仍然需要进行必要的规划，以确保一切都恰到好处。
- en: 'Luckily, this isn''t going to be too tough for our rather simple needs. Let''s
    think about the bare minimum we need to collect in order to follow up with a potential
    client. Here are the things we need:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，对于我们相当简单的需求来说，这并不会太困难。让我们考虑一下我们需要收集的最基本信息，以便跟进潜在客户。我们需要以下信息：
- en: The prospect's name
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 潜在客户的姓名
- en: The company
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司
- en: The e-mail address
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件地址
- en: The phone number
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电话号码
- en: A message
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条消息
- en: 'A few important things to keep in mind are to make sure that the labels for
    all fields let users know what to put in which field. I think that the most compelling
    argument for a usable form goes like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记的一些重要事项是，确保所有字段的标签都让用户知道应该在哪个字段中输入什么。我认为一个可用表格最具有说服力的论点是这样的：
- en: People read from left-to-right and top-to-bottom. Therefore, the label should
    appear above the input that it is describing, as the user will read the label
    first and then see the input. This of course is an assumption that our users understand
    the visual cues that define an input in a form. If we have users that don't know
    what form fields are, we are probably out of luck. That said, it's probably worth
    thinking about the fact that our user interfaces heavily rely on people understanding
    conventions!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 人们从左到右，从上到下阅读。因此，标签应该出现在它所描述的输入框的上方，因为用户会先读标签，然后看到输入框。当然，这是一个假设，即我们的用户理解定义表单输入的视觉线索。如果我们的用户不知道表单字段是什么，我们可能就没什么希望了。也就是说，值得思考的是，我们的用户界面在很大程度上依赖于人们理解约定！
- en: There are other conventions we can use for our purpose on this form. A common
    one is the use of placeholders to show users examples of the kind of content that
    is expected in each input. Again, this convention is well-known to anyone who
    has been using the Internet for any significant amount of time. Hopefully, it
    could be a useful cue to someone less familiar with these conventions too.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张表格上，我们可以使用其他约定。一个常见的约定是使用占位符来向用户展示每个输入中期望的内容类型的示例。同样，这个约定对于任何长时间使用互联网的人来说都是众所周知的。希望这也可以对一些不太熟悉这些约定的人有所帮助。
- en: Handling mandatory fields
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理必填字段
- en: The last things we need to let users know are the required fields that we want
    them to enter input into. There are two schools of thought on this; I will introduce
    both, mostly because I see the merit in both and it really depends on what you
    are doing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要让用户知道的最后一件事是我们希望他们输入的必填字段。关于这个问题有两种看法；我会介绍两种，主要是因为我认为两种方法都有其优点，而且这真的取决于你在做什么。
- en: One convention is to place the required `*` next to all the fields that are
    required. This convention again works for most visitors but the problem with this
    approach is that it might prevent gathering some information if we essentially
    annotate a few fields that we have as being optional. This argument basically
    claims that if we don't require a message and don't mark it as required, there
    is an increased likelihood of users skipping over this. Our form should absolutely
    require the user to submit a name and an e-mail; otherwise, we cannot respond
    at all. It's customary to not require a phone number or a message. Leaving the
    **Phone** field as optional is a courtesy in most cases for those who prefer not
    to be contacted via the phone. Leaving the **Message** field as optional is a
    courtesy to users. We don't want to make it mandatory as we can always respond
    once we have a name and e-mail, although our response will have to be really generic.
    It is helpful for our prospective clients to get a context for our next conversation.
    It saves everyone the time and energy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个约定是在所有必填字段旁边放置必填的 `*`。这个约定对大多数访客来说确实有效，但这种方法的问题在于，如果我们基本上注释了一些我们认为是可选的字段，可能会阻止收集一些信息。这个论点基本上声称，如果我们不要求消息并且不将其标记为必填，用户跳过这一部分的可能性就会增加。我们的表格绝对应该要求用户提交姓名和电子邮件；否则，我们根本无法回复。通常不要求电话号码或消息。将**电话**字段留作可选是对大多数人的一种礼貌，因为有些人不希望通过电话联系。将**消息**字段留作可选是对用户的一种礼貌。我们不想强制要求，因为一旦我们有了姓名和电子邮件，我们就可以随时回复，尽管我们的回复可能会非常通用。对于我们的潜在客户来说，了解我们下次交谈的背景是有帮助的。这样可以节省每个人的时间和精力。
- en: 'With that in mind, I want to introduce the argument against following the convention
    of marking fields as required. Here is how the argument goes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我想介绍一下不遵循将字段标记为必填的约定的论点。论点如下：
- en: If we, as creators of the site, put on the form only the input fields that we
    absolutely need to follow up, then the form should be simple enough to not discourage
    a user. In our case, we have five fields, which is quite parsimonious. Then, by
    not marking any fields as required, we suggest that we want all the information
    we are asking for, but we don't actually require it. We can use form validation
    to then make sure we get the bare minimum, which in our case will be the name
    and e-mail.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们作为网站的创建者，只在表单上放上我们绝对需要跟进的输入字段，那么表单应该足够简单，不会让用户感到沮丧。在我们的情况下，我们有五个字段，这是相当节俭的。然后，通过不标记任何字段为必填，我们表明我们想要我们所要求的所有信息，但实际上并不需要。然后我们可以使用表单验证来确保我们得到最基本的信息，而在我们的情况下将是姓名和电子邮件。
- en: Ultimately, these decisions take a lot of other things into account. Since our
    portfolio site is most likely to be for digital media work, our audience should
    be familiar with web conventions, and we can use that to everyone's advantage
    and present them with a clean, simple form. On other projects, you will certainly
    have to cater to different audiences or gather more data. Hopefully, walking you
    through my planning on this form will be of some help in the future decisions
    you make.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，这些决定考虑了许多其他因素。由于我们的作品集网站很可能是用于数字媒体工作，我们的受众应该熟悉网络惯例，我们可以利用这一点，为每个人带来一个干净、简单的表单。在其他项目中，你肯定需要迎合不同的受众或收集更多的数据。希望通过我对这个表单规划的讲解，能对你未来的决策有所帮助。
- en: The form's layout
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单布局
- en: Ok, now let's move on to how we want this form to look at our breakpoints. This
    one will be easy because all our focus on this page is on getting some information
    from the prospective client. For this reason, we can get away with nearly having
    the exact layout from the mobile to the desktop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在让我们继续讨论我们希望在断点上看到这个表单的样子。这将很容易，因为我们在这个页面上的重点是从潜在客户那里获取一些信息。因此，我们几乎可以在移动端和桌面端几乎完全相同的布局上得逞。
- en: 'Here''s the mobile''s layout:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是移动端的布局：
- en: '![The form''s layout](img/6463_04_16.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![表单布局](img/6463_04_16.jpg)'
- en: 'And here''s an example of a layout wider than 992 px:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个宽度大于992像素的布局示例：
- en: '![The form''s layout](img/6463_04_17.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![表单布局](img/6463_04_17.jpg)'
- en: It's pretty hard to tell them apart! I know, the input fields are going to get
    unnecessarily wide if someone has this form open at full width on his/her brand
    new Thunderbolt. But really, we don't need or want any other content on this page
    to interfere, so we will make a small effort to still make the page look pleasing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 很难把它们区分开来！我知道，如果有人在全宽度的新Thunderbolt上打开这个表单，输入字段会变得不必要地宽。但实际上，我们不需要也不希望页面上的其他内容干扰，所以我们会小小努力，让页面看起来仍然令人愉悦。
- en: Ok, enough of talk! Let's write some code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，说了这么多！让我们写些代码。
- en: 'First, let''s put one of those small hero areas just above the form. I always
    like the opportunity to add a human touch to things that I create on the Web,
    so just under the header, let''s place this markup:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在表单上方放一个小的主体区域。我总是喜欢在我在网上创建的东西中添加人情味，所以在标题下方，让我们放置这个标记：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should probably put your own message in there, but you get the idea.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能应该在里面放上你自己的消息，但你明白我的意思。
- en: 'After that, let''s put the markup we''ll need for the form. The markup we''ll
    be using here goes after the hero:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们放置表单所需的标记。我们将在主体之后使用的标记如下：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This markup is mostly straightforward, but I have used markup that is slightly
    opinionated and is good practices. First, you will notice that I have not supplied
    a value for the `action` parameter for the form that is used to post form data
    to a server. I will leave that to you, as we will not be making a backend to handle
    this data (alternatively, you can use one of the many nifty services out there
    that will handle contact and e-mail forms for you).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标记大部分都很直接，但我使用了略微主观的标记和良好的实践。首先，你会注意到，我没有为表单的`action`参数提供值，用于将表单数据提交到服务器。我会留给你来做，因为我们不会制作一个处理这些数据的后端（或者，你可以使用许多巧妙的服务之一，它们会为你处理联系和电子邮件表单）。
- en: Moving down the code, you will notice that I have wrapped every label and input
    pairing in `<p>` `</p>` tags. This isn't uncommon but it is an opinionated way
    to handle the laying out of the form. I prefer not to style inputs and form controls
    if I can avoid it. For sites that grow, these can lead to a lot of work that isn't
    reusable. You can eliminate or reduce this by relying on styling some elements
    that wrap the form controls. As always, keep these elements semantically appropriate.
    I would argue that a label and an input form something of a paragraph, as they
    share the same subject and are a break in the subject of the content that follows.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码下方，你会注意到我用`<p>` `</p>`标签包裹了每个标签和输入配对。这并不罕见，但这是一种处理表单布局的主观方式。如果可以避免，我更倾向于不给输入和表单控件添加样式。对于成长的网站，这可能会导致大量不可重用的工作。你可以通过依赖一些包裹表单控件的元素来消除或减少这一点。始终保持这些元素在语义上适当。我会认为标签和输入表单是段落的一部分，因为它们共享相同的主题，并且是内容主题的一个断点。
- en: Input label magic
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入标签魔法
- en: Also, especially for mobiles, always take advantage of the `for` attribute in
    the label that works only if you set the value of that parameter to mirror the
    value of the ID of the input you want to associate with it. In other words, if
    your label is the **E-mail** input, give that input an ID of `email` (`id=email`)
    and set the label to `email` as well (`name=email`). This practice is not just
    semantic, otherwise, I probably wouldn't bother. Once you have paired an input
    and a label in this way, some magic happens. The label now gets magical powers—when
    a user clicks or touches the label, the input it is paired with will get focus.
    This standard has been around long before the practice of browsing the web with
    touch interfaces was common, but what an awesome feature for touch! Now, users
    with fat fingers, shaky hands, or imprecise movements will be more likely to hit
    their mark. If you never knew this, test it out. If you knew about it already,
    I hope you skipped this paragraph; time is precious.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，特别是对于手机，始终要充分利用标签中的`for`属性，只有在将该参数的值设置为要与其关联的输入的ID的值相匹配时，它才起作用。换句话说，如果您的标签是**电子邮件**输入，给该输入一个ID为`email`（`id=email`），并将标签也设置为`email`（`name=email`）。这种做法不仅仅是语义化的，否则我可能就不会费心了。一旦以这种方式配对了输入和标签，一些神奇的事情就会发生。标签现在具有了魔力——当用户点击或触摸标签时，与其配对的输入将获得焦点。这个标准早在触摸界面上网的实践变得普遍之前就已经存在了，但对于触摸来说，这是一个很棒的功能！现在，手指粗的用户、手抖的用户或者动作不精确的用户更有可能击中目标。如果你以前不知道这一点，可以试一试。如果你已经知道了，希望你跳过了这一段；时间宝贵。
- en: 'I still have a few more things to point out. I have placed the `required` attribute
    on all fields that I want to be mandatory. This attribute is new to the HTML 5
    spec and does some nice magic under the hood. We will need to make a fallback
    for browsers that don''t support this feature, but you can temporarily enjoy the
    fantasy that HTML 5 will make your work as a web developer easier than it was
    before (don''t worry, you still need to write some JavaScript to help validate
    this form). Still, this feature will be a time saver once you get to the point
    where nearly all your potential users are using modern browsers (the question
    is, when will that be?). Anyway, go ahead and try it out. Start up a simple server,
    such as the Python Simple HTTP server, and visit your contact form in its current
    state. Don''t bother filling out the form, then hit **Send It**. If you are using
    Chrome, you will get a nice validation error message, **Please fill out this field**,
    in a tooltip:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我还有一些事情要指出。我在所有我想要强制的字段上放置了`required`属性。这个属性是HTML 5规范中的新内容，在幕后做了一些很好的魔术。我们需要为不支持这一特性的浏览器做一些回退，但是您可以暂时享受HTML
    5会让您作为web开发人员的工作比以前更容易的幻想（不用担心，您仍然需要编写一些JavaScript来帮助验证这个表单）。不过，一旦您的潜在用户几乎都在使用现代浏览器时（问题是，那会是什么时候？），这个功能将节省您的时间。无论如何，试一试吧。启动一个简单的服务器，比如Python
    Simple HTTP服务器，然后访问您当前状态的联系表单。不要费心填写表单，然后点击**发送**。如果您使用的是Chrome，您会得到一个很好的验证错误消息，**请填写此字段**，在一个工具提示中：
- en: '![Input label magic](img/6463_04_18.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![输入标签魔法](img/6463_04_18.jpg)'
- en: Modern versions of other browsers (Firefox, Safari, and Internet Explorer) will
    do something similar. Try it on your mobile too; it's pretty nice!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其他浏览器的现代版本（Firefox、Safari和Internet Explorer）也会做类似的事情。在手机上也试一试吧，效果还不错！
- en: Okay, the fun will be over soon enough, as we will need to make fallbacks for
    browsers that don't support this feature. But we still have a few fun enhancements
    to add, thanks to the HTML 5 spec. Next, I'd like to point out the absolutely
    painless enhancements you get with some HTML 5 form field attributes. You will
    notice that the input for an e-mail is set to `type="email"`. That attribute gets
    you two kinds of special sauces. On both the desktop and mobile (in browsers that
    support it, of course), you get the kind of validation for e-mail addresses that
    we've been writing in JavaScript for years. It looks for an `@` and all that.
    On a mobile, it should open a soft keyboard that features a prominent `@` as well.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，好玩的时间很快就会结束了，因为我们需要为不支持这一特性的浏览器做一些回退。但是，由于HTML 5规范，我们还有一些有趣的增强功能要添加。接下来，我想指出一些绝对轻松的增强功能，这些功能是通过一些HTML
    5表单字段属性获得的。您会注意到，电子邮件输入的`type="email"`。这个属性给你带来了两种特殊的酱料。在桌面和手机上（当然是在支持的浏览器中），你会得到多年来我们在JavaScript中编写的电子邮件地址验证。它会寻找`@`等等。在手机上，它应该会打开一个软键盘，上面有一个醒目的`@`。
- en: The other field we use with a nifty attribute introduced in HTML 5 is the `type="tel"`
    attribute. The only benefit to this is that on mobiles, it will pull up a numeric
    keyboard rather than an alpha keyboard.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在HTML 5中使用的另一个带有新属性的字段是`type="tel"`属性。唯一的好处是，在手机上，它会弹出数字键盘而不是字母键盘。
- en: '![Input label magic](img/6463_04_19.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![输入标签魔法](img/6463_04_19.jpg)'
- en: This is just a really nice thing to do for those poor souls filling out a form
    on a small screen. Your users will thank you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在小屏幕上填写表单的可怜人来说，这真是一件好事。您的用户会感谢您。
- en: Now, let's add the minimal styling that we will need to get this to look consistent
    with the rest of our apps. Everything looks pretty great; the only exception is
    that the borders on the inputs are orange. If you are using SASS, and your compiler
    writes the line numbers of the styles, this is really easy to debug. I've been
    encouraging you to use SASS all along, but one thing I really like is the ability
    to print the line numbers of all the style selectors while you are in development.
    You really need to compile the compressed CSS for production, but for development,
    always switch over to code that is friendly for debugging. I use CodeKit for this
    and for a handful of other reasons. I should add that I generally use open source,
    Command-Line Tools. For example, I use `tmux` and `vim` to write code, not a standalone
    text editor. But Codekit has so many useful features that are effortless to configure
    and I am really addicted to it. I only wish it had a command-line version.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加我们需要的最小样式，使其看起来与我们的其他应用程序一致。一切看起来都很不错；唯一的例外是输入框的边框是橙色的。如果你使用SASS，而且你的编译器写出了样式的行号，这将非常容易调试。我一直鼓励你一直使用SASS，但我真的很喜欢的一点是在开发过程中打印出所有样式选择器的行号。你确实需要为生产编译压缩的CSS，但对于开发，总是切换到便于调试的代码。我用CodeKit做这个，还有其他一些原因。我应该补充说，我通常使用开源的命令行工具。例如，我使用`tmux`和`vim`来编写代码，而不是独立的文本编辑器。但是Codekit有很多有用的功能，而且配置起来非常轻松，我真的很喜欢。我只希望它有一个命令行版本。
- en: CodeKit makes my whole day easier when I have to solve problems in CSS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在CSS中解决问题时，CodeKit让我的整天变得更容易。
- en: 'Here is what I see in Chrome development tools when I look at what is going
    on with these wacky orange borders:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我查看这些古怪的橙色边框时，这是我在Chrome开发工具中看到的：
- en: '![Input label magic](img/6463_04_20.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![输入标签魔术](img/6463_04_20.jpg)'
- en: I see that the border properties are defined at line 79 in _`forms.scss`. Super
    helpful, yes?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到边框属性在`_forms.scss`的第79行定义。非常有帮助，对吧？
- en: 'Unfortunately, that is not the end of the story. When I get to that line of
    code, here is what I see:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这还不是故事的结局。当我到达那行代码时，这是我看到的：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Right off I notice two things. The border color is defined with the variable
    `$inputborder` and the hover color for that border is defined with `$inputhover`.
    In my opinion, these are poorly named variables as they are not semantically accurate,
    but to be fair, I've done worse in the past. At any rate, if I could pick an improvement
    here, it would be to name these variables something in order to point out the
    fact that they are actually variables for color—something such as `$inputbordercolor`
    and `$inputborderhovercolor`. Sure, those are long names, but they are precise.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我立刻注意到两件事。边框颜色是用变量`$inputborder`定义的，悬停时的边框颜色是用`$inputhover`定义的。在我看来，这些变量命名不够准确，但公平地说，我过去做得更糟。无论如何，如果我能在这里做出改进，那就是将这些变量命名为某种指出它们实际上是颜色变量的名称，比如`$inputbordercolor`和`$inputborderhovercolor`。当然，这些名字很长，但它们很准确。
- en: 'Okay, moving on. We need to go to the `_variables.scss` partial to see what
    is going on. Why are these borders orange, for goodness sake? Don''t panic, help
    is on the way. Going into the `_variables.scss` file, I do a quick search for
    `$inputborder` and here is what I see:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，继续。我们需要去`_variables.scss`部分看看发生了什么。这些边框为什么是橙色，天哪？不要惊慌，帮助就在眼前。进入`_variables.scss`文件，我快速搜索了`$inputborder`，这是我看到的：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's think about what is going on in the code. For many designs, using the
    base color for input borders can create a harmonious design. But, in my example,
    I have chosen a yellowish orange color, which makes for pretty low-contrast borders.
    To be honest, they look annoying to me; I can't imagine what they look like to
    someone who has visual challenges. But, furthermore, I would guess that 90 percent
    of the time, I want my input borders to be some shade of grey. Why? Well, with
    something as critical as creating a form, I want to make sure that the fields
    are well defined with a high-contrast color, and with a white background, the
    greatest contrast comes with black. If `#000` black looks too stark, we can always
    choose a darker shade of gray that is near to black. At this point, I think it's
    best for this design (and perhaps others in the future) to go ahead and redefine
    this variable as some shade of gray.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下代码中发生了什么。对于许多设计来说，使用基本颜色作为输入边框可以创建和谐的设计。但是，在我的例子中，我选择了一种略带黄橙色的颜色，这使得边框的对比度相当低。老实说，它们让我感到很烦人；我无法想象对视觉有挑战的人来说会是什么样子。而且，我猜90%的时间，我希望我的输入边框是灰色的。为什么呢？嗯，对于像创建表单这样关键的事情，我希望确保字段用高对比度的颜色清晰定义，而在白色背景下，最大的对比度是黑色。如果`#000`黑色看起来太刺眼，我们总是可以选择接近黑色的深灰色。在这一点上，我认为最好为这个设计（也许将来的其他设计）重新定义这个变量为某种灰色。
- en: 'Let''s try this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试这个：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I actually experimented with all the greys defined in this variable file, and
    I prefer the lighter grey. It helps the rows look more organized. Another thing
    you may have noticed by now is that the border still changes to an orange color
    when you hover over the input. Let''s make that a darker grey instead. Similar
    to what we followed previously, you will notice that the `input:hover` style is
    defined in the `_forms.scss` file. It looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上尝试了这个变量文件中定义的所有灰色，我更喜欢浅灰色。它有助于使行看起来更有条理。到目前为止，你可能已经注意到的另一件事是，当你在输入上悬停时，边框仍然会变成橙色。让我们改成更深的灰色。与之前类似，你会注意到`input:hover`样式是在`_forms.scss`文件中定义的。它看起来是这样的：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So now we go to the `_variables.scss` file to redefine `$inputhover`!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们去`_variables.scss`文件重新定义`$inputhover`！
- en: 'Let''s make it like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们这样做：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Looks good!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错！
- en: We just need a few more things to tune up the styles on this page. Let's make
    the inputs look nicer and more consistent in terms of how inputs are rendered
    in a mobile browser. You will notice in the previous screenshot on the form of
    an iPhone (or on your own mobile, if you are checking your work there) that the
    inputs automatically get rounded corners on the mobile. Let's set a style to do
    that in our forms page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要做一些微调，就可以让这个页面的样式更加完美。让我们让输入框看起来更漂亮，并且在移动浏览器中呈现输入框的方式更加一致。你会注意到在之前的屏幕截图中，iPhone上的表单（或者如果你在自己的移动设备上检查你的工作）自动获得了圆角。让我们设置一个样式在我们的表单页面中做到这一点。
- en: I want to change all inputs across the site, so I am going to go and edit the
    `_forms.scss` file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要改变整个网站上的所有输入框，所以我要去编辑`_forms.scss`文件。
- en: 'Update this style:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更新这个样式：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'While using `rounded mixin`, I like 6 px, but feel free to round it to your
    taste. One more thing that I''d like to change with these inputs is the padding.
    Having a big target is nice, but they could also do with a little breathing room
    between the words and the border of the input. Just below that `rounded mixin`,
    let''s add some padding:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`rounded mixin`时，我喜欢6像素，但随意调整到你喜欢的样子。我想要改变这些输入框的另一件事是填充。拥有一个大目标很好，但它们也可以在单词和输入框边框之间留出一些空间。就在`rounded
    mixin`下面，让我们添加一些填充：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Looking much better!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好多了！
- en: The last styling task we have on this page is to contain the width of the form.
    Let's keep the form from getting any wider than 992 px and keep it centered.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个页面上的最后一个样式任务是限制表单的宽度。让我们保持表单不要超过992像素，并保持它居中。
- en: 'We can do that without having to use any `@` media queries actually. Let''s
    go back to the `site.scss` file and add a style that will work the same if we
    want to reuse it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以在不使用任何`@`媒体查询的情况下做到这一点。让我们回到`site.scss`文件，并添加一个样式，如果我们想要重用它，它将起到相同的作用：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This does exactly what I described previously. This is actually a great example
    of how to think about being responsive without necessarily relying on newer standards.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我之前描述的。这实际上是一个很好的例子，说明了如何考虑响应式而不一定依赖于更新的标准。
- en: Okay, now the last thing we need to do is go hook up the validation that will
    work for browsers that don't yet support the HTML 5 `required` attribute.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们需要做的最后一件事是去连接验证，以便在尚未支持HTML 5`required`属性的浏览器中起作用。
- en: JS validation fallbacks
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JS验证回退
- en: 'Well, we could write all our fallbacks. Knowing how to write fallbacks is super
    useful but that is beyond the scope of this book. Also, there is a really awesome
    way to make fallbacks that have been made already. It is called **webshims** and
    you can find it here: [http://afarkas.github.io/webshim/demos/index.html](http://afarkas.github.io/webshim/demos/index.html).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们可以写出所有的回退。知道如何写回退是非常有用的，但这超出了本书的范围。另外，有一种非常棒的方法可以使用已经制作好的回退。它叫做**webshims**，你可以在这里找到它：[http://afarkas.github.io/webshim/demos/index.html](http://afarkas.github.io/webshim/demos/index.html)。
- en: This library makes it super easy to take advantage of a lot of HTML 5 features
    without writing a ton of support for older browsers. In our case, we will have
    to do very little to support the HTML 5 validation in our form.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库使得非常容易利用许多HTML 5功能，而无需为旧浏览器编写大量支持。在我们的情况下，我们将不需要做太多工作来支持表单中的HTML 5验证。
- en: Download the lib from the site I listed previously. Once you do that, copy the
    `js-webshim` folder to your project. I've already done that in the `after` folder
    for this chapter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从我之前列出的网站上下载库。一旦你这样做了，将`js-webshim`文件夹复制到你的项目中。我已经在本章的`after`文件夹中完成了这个操作。
- en: Now, we need to do two more things and we will be good to go.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还需要做两件事，然后就可以了。
- en: 'Include the `polyfiller` script from the `webshims` lib at the bottom of the
    `contact.html` page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`contact.html`页面的底部包含`webshims`库中的`polyfiller`脚本：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You must put this after jQuery but before the scripts you write.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须把它放在jQuery之后，但在你写的脚本之前。
- en: 'Now in `script.js`, add this line to instantiate the `polyfiller` script:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`script.js`中，添加这一行来实例化`polyfiller`脚本：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I have put this inside the `ready` function to make sure that all the form elements
    are present in the **Document Object Model** (**DOM**) before it fires.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经把它放在`ready`函数中，以确保所有的表单元素在**文档对象模型**（**DOM**）中出现之前就已经触发了。
- en: Now, we're done polyfilling our form validation and it should work in browsers
    that don't support HTML 5 validation. Enjoy!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了对表单验证的polyfill，并且它应该在不支持HTML 5验证的浏览器中起作用。享受吧！
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, in this chapter, we planned our way to a much simpler layout than any of
    our other pages, but for good reason. No one likes filling out forms much, but
    if we can keep the noise down on pages with forms, we can encourage users to give
    us the information to better facilitate communication. Or at the very least, we
    won't discourage people from filling out our form.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们计划了比我们其他页面更简单的布局，但有充分的理由。没有人喜欢填写表单，但如果我们可以在具有表单的页面上减少噪音，我们就可以鼓励用户提供信息，以更好地促进沟通。或者至少，我们不会阻止人们填写我们的表单。
- en: Probably, the biggest challenge here is the cross-browser support for client-side
    validation. Until it is known that the majority of users use modern browsers,
    we still need to shim and polyfill, but as we saw, well-written code makes that
    fairly easy too, unless our requirements are complex.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可能，这里最大的挑战是客户端验证的跨浏览器支持。在大多数用户使用现代浏览器之前，我们仍然需要进行shim和polyfill，但正如我们所看到的，写得很好的代码也使这变得相当容易，除非我们的要求很复杂。
- en: Next, let's move on to the **About Me** page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续**关于我**页面。
