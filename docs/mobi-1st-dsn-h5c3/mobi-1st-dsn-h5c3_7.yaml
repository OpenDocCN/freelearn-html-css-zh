- en: Appendix B. Using CSS Preprocessors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 使用CSS预处理器
- en: If you have already read any part of the book, you already know that I am begging
    you to use a CSS preprocessor, such as Sass or LESS. I prefer Sass for several
    reasons, but I won't really go into the details too much. Instead, I prefer to
    focus on the similarities between the two, and I will leave it to you to decide
    which framework you prefer. I am not being coy or disingenuous; I honestly find
    such arguments exhausting, especially when they come down to individual contexts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读了本书的任何部分，你已经知道我恳求你使用CSS预处理器，比如Sass或LESS。我更喜欢Sass有几个原因，但我不会详细介绍。相反，我更喜欢专注于这两者之间的相似之处，我会留给你决定你更喜欢哪种框架。我并不是在故作神秘或不诚实；我真的觉得这样的争论很累人，尤其是当它们涉及到个人背景时。
- en: I will say for the nth time that I prefer Sass. For me, some of it is the syntax
    but the differences from LESS are fairly minor. For me, another part of it is
    that I work mainly with Ruby on Rails, and Rails supports Sass right out of the
    box. Furthermore, I find the syntax of SCSS (rather than the older Sass that came
    earlier) to be so similar to CSS, which I've been using for about 25 percent of
    my life, so I also prefer it because it's less of a cognitive shift from CSS,
    which I know so well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我要再次说，我更喜欢Sass。对我来说，部分原因是语法，但与LESS的差异相当小。另一个原因是我主要使用Ruby on Rails，而Rails默认支持Sass。此外，我发现SCSS的语法（而不是早期的Sass）与CSS非常相似，而我已经使用CSS大约25%的时间，所以我更喜欢它，因为它与我熟悉的CSS的认知转变较小。
- en: I also find some of the syntax of LESS to be confusing. The two main examples
    are how they use the `@` symbol for global variables, as opposed to the `$` symbol
    that Sass uses, and how LESS uses the notation for a CSS class, `.`(period), to
    call a mixin, whereas Sass uses the more explicit `@include`. These are admittedly
    small quibbles.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我也发现LESS的一些语法很令人困惑。主要的两个例子是它们如何使用`@`符号来表示全局变量，而Sass使用`$`符号，以及LESS如何使用CSS类的表示法`.`来调用mixin，而Sass使用更明确的`@include`。这些都是小小的抱怨。
- en: But, there, those are my reasons. I hope you find them helpful in figuring out
    what works best for you.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这就是我的理由。希望你能从中找到一些有用的东西，来决定哪种方法最适合你。
- en: Now, let's move on to understanding how all of these preprocessors help you
    work fast and efficiently. Hopefully, this is enough to whet your appetite so
    you can learn more. I will end the chapter with a list of resources, where you
    can go to learn more independently.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续了解所有这些预处理器如何帮助你快速高效地工作。希望这足以激发你的兴趣，让你能够学到更多。我将在本章结束时列出一些资源，你可以独立学习更多。
- en: Why?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么？
- en: 'Why do we need something to preprocess CSS? Here are a few simple reasons:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么需要预处理CSS？以下是一些简单的原因：
- en: There are no variables in CSS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS中没有变量
- en: When styling nested elements, your code will not be DRY, that is, you will type
    a lot of classes and/or IDs repeatedly
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当样式化嵌套元素时，你的代码不会符合DRY原则，也就是说，你会重复输入很多类和/或ID
- en: It isn't convenient to re-use code in CSS, so you end up with code that isn't
    DRY
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CSS中重复使用代码并不方便，因此你最终会得到不符合DRY原则的代码
- en: There is no logic at all to CSS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS中根本没有逻辑
- en: Preprocessors allow us to manipulate color relationships in a dynamic way rather
    than statically assigning all color values; this is especially powerful when coupled
    with the ability to use variables
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理器允许我们以动态方式处理颜色关系，而不是静态地分配所有颜色值；当与使用变量的能力结合使用时，这是非常强大的
- en: These are broad explanations. This appendix, and essentially this whole book
    should give you lots of detailed examples of when these are useful.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是宽泛的解释。本附录以及整本书应该会给你很多详细的例子，说明这些预处理器何时有用。
- en: How?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何？
- en: Ok, so you've never tried a preprocessor. How do you get started? Of course,
    that depends on whether you choose LESS over Sass. I will walk you through three
    simple ways to use either of the two.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以你从未尝试过预处理器。你该如何开始呢？当然，这取决于你选择LESS还是Sass。我将带你了解使用这两种方法的三种简单方式。
- en: CodeKit
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CodeKit
- en: The easiest way to get started is with a Mac OS X application called CodeKit.
    I don't get kickbacks from the maker of this app. It's just a solid, simple app
    that does tons of stuff that used to be kind of a pain. It's not that expensive
    and you can get it at [http://incident57.com/codekit/](http://incident57.com).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用一个名为CodeKit的Mac OS X应用程序。我并没有从这个应用的制造商那里得到任何回报。这只是一个稳定、简单的应用程序，可以做很多以前有点麻烦的事情。它的价格也不贵，你可以在[http://incident57.com/codekit/](http://incident57.com)上获取它。
- en: If you use anything other than a Mac, you are sadly out of luck as this app
    is for Mac only.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是用Mac，那么很遗憾，因为这个应用只适用于Mac。
- en: Once you've downloaded and launched it, it is trivial to add a project. The
    app is smart enough to find all the files in your project; more precisely, the
    files that fit into these categories are stylesheets, scripts, pages, and images.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你下载并启动它，添加一个项目就很简单。该应用程序足够智能，可以找到你项目中的所有文件；更准确地说，符合这些类别的文件是样式表、脚本、页面和图像。
- en: CodeKit will preprocess all of these things in various ways; it will even optimize
    your images for you. As much as I am a fan of the command line, the convenience
    of this app has really won me over. I am trying to avoid gushing here but it will
    also do things such as preprocess haml and run JSLint or JSHint; it concatenates
    and minifies all your JavaScipt, optimizes the images, and has many features,
    which I won't go deep into.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CodeKit将以各种方式预处理所有这些内容；它甚至会为你优化图像。尽管我很喜欢命令行，但这个应用程序的便利性确实让我很满意。我尽量避免过分赞美，但它还会做一些其他事情，比如预处理haml并运行JSLint或JSHint；它会合并和压缩所有你的JavaScript，优化图像，并拥有许多功能，我就不深入介绍了。
- en: But, we are not here right now to use all those things; we are here to discuss
    how it facilitates the preprocessing of LESS and Sass. I am going to continue
    to describe how to set this up with the assumption that you don't own this app
    yet but just want to know more about how it works and, more specifically, how
    it works with 320 and Up. If you are using 320 and Up, and already have all your
    project files where they should be, you don't have to do much of anything else
    to get started. Just make sure that you select the appropriate file that essentially
    pulls in all the other files, and make sure it outputs the right file to the right
    location. Since CodeKit has an easy UI, all you have to do is right-click on `320andup-scss.scss`
    (for example, there is an equivalent file for LESS and the others) and set the
    output path, filename, and so on. That's just about it. Now let's look at some
    command-line tools.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们现在不是来使用所有这些东西的，我们是来讨论它如何促进LESS和Sass的预处理的。我将继续描述如何设置这个假设你还没有拥有这个应用，但只是想了解更多关于它是如何工作的，更具体地说，它是如何与320和Up一起工作的。如果你正在使用320和Up，并且已经把所有项目文件放在了它们应该在的地方，你不需要做太多其他的事情就可以开始。只需确保选择适当的文件，它基本上会引入所有其他文件，并确保它将正确的文件输出到正确的位置。由于CodeKit有一个简单的用户界面，你只需要右键单击`320andup-scss.scss`（例如，还有一个等价的文件用于LESS和其他文件），设置输出路径、文件名等。就是这样。现在让我们看看一些命令行工具。
- en: Compass
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指南针
- en: 'Compass is a command-line tool that is community-driven. There are also GUIs
    for it. I have less experience with it, but there are lots of tutorials and guides
    on their site if you want to give it a go: [http://compass-style.org/](http://compass-style.org/).
    Compass is a Ruby gem, so you can install and run it easily on the command line.
    Compass won''t process LESS. But the LESS preprocessor is pretty simple to set
    up with the Node package manager.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 指南针是一个社区驱动的命令行工具。也有图形用户界面。我对它的经验较少，但他们的网站上有很多教程和指南，如果你想尝试一下：[http://compass-style.org/](http://compass-style.org/)。指南针是一个Ruby
    gem，所以你可以在命令行上轻松安装和运行它。指南针不会处理LESS。但是LESS预处理器非常简单，可以通过Node包管理器轻松设置。
- en: The Sass/LESS gem
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sass/LESS gem
- en: This solution is similar to using Compass. You install a gem on the command
    line with a simple configuration. Just as with the previously mentioned Compass
    and CodeKit, it will look for file changes and process your preprocessed code.
    I've had issues with LESS for successfully looking out for any code changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案类似于使用指南针。你可以在命令行上安装一个gem，并进行简单的配置。就像之前提到的指南针和CodeKit一样，它会寻找文件更改并处理你的预处理代码。我曾经遇到过LESS成功寻找任何代码更改的问题。
- en: Rails
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 铁轨
- en: So, this is technically a fourth way and it's a bit redundant to mention Rails
    as a way to preprocess CSS but you can use any of the previously mentioned gems
    within a Rails project. The Sass gems will watch for code changes and process
    them without any further interaction. Again, in the past I've had issues getting
    LESS to watch for file changes and I had to restart the server to get it to process
    the code. This is unacceptable to me, since it just gobbles up time. On the other
    hand, things may have been fixed by now but I have moved on to Sass for additional
    reasons, some of which I previously outlined.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这在技术上是第四种方式，而且把铁轨作为预处理CSS的方式有点多余，但你可以在铁轨项目中使用之前提到的任何一个gem。Sass gem会监视代码更改并在没有进一步交互的情况下处理它们。同样，在过去，我曾经遇到过LESS无法监视文件更改的问题，我不得不重新启动服务器才能处理代码。这对我来说是不可接受的，因为它只会浪费时间。另一方面，现在可能已经修复了一些问题，但我已经因为其他原因转向了Sass，其中一些我之前已经概述过。
- en: We will move on to what is happening in the preprocessed code itself in a moment,
    but I just want to tell you that, if you are intimidated by command-line tools,
    don't be. I entered this profession starting out mainly as a graphics guy, and
    have come to love the simplicity and elegance of the command line. There are many
    simple beginner courses that are free or are very cheap online and that will help
    you to get over your fears or confusion. I am a fan of the *Learn the Hard Way*
    tutorials, but there are tons more, and there will continue to be more. Once you
    know your way around the command line, I can assure that you will be able to work
    more efficiently than before.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快转向预处理代码本身发生的事情，但我只是想告诉你，如果你对命令行工具感到害怕，不要害怕。我最初是作为一个图形设计师开始这个职业的，现在我喜欢上了命令行的简单和优雅。有很多简单的初学者课程是免费的，或者在网上非常便宜，可以帮助你克服恐惧或困惑。我是*学习困难的方法*教程的粉丝，但还有很多其他教程，而且还会有更多。一旦你熟悉了命令行，我可以保证你将能够比以前更有效地工作。
- en: What?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么？
- en: Let's look at the sample project we are working with to see how it all hangs
    together. In this book, I focused on the SCSS variant of 320 and Up, so I will
    continue using the same through this appendix. For the most part, LESS is similar
    but has some syntactic differences. I will point out a few key examples along
    the way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们正在处理的示例项目，看看它是如何组合在一起的。在这本书中，我专注于320和Up的SCSS变体，所以我将在附录中继续使用相同的内容。在很大程度上，LESS是类似的，但有一些语法上的不同。我会在路上指出一些关键的例子。
- en: Let's look at the `before` project file from [Chapter 2](ch02.html "Chapter 2. Building
    the Home Page"), *Building the Home Page*. Take a peek inside the `320andup` directory
    and look at the file structure for the moment. The main things I want to focus
    on are the `css` directory and the `scss` directory. The other siblings such as
    `less`, `sass-compass`, `sass`, and `scss-compass` hold the code to skin this
    cat in a different way.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从[第2章](ch02.html "第2章。构建主页")的`before`项目文件开始，*构建主页*。看一下`320andup`目录里的文件结构。我想要专注的主要事情是`css`目录和`scss`目录。其他的兄弟目录，比如`less`、`sass-compass`、`sass`和`scss-compass`，以不同的方式包含了这只猫的代码。
- en: Moving on to the `scss` folder, you will notice the file `320andup-scss.scss`
    and a bunch of files with underscores in front of them. The files with the underscores
    in front of them, for example, `_1382.scss`, are called partials. The underscore
    lets the preprocessor know not to turn these individual files into CSS. But they
    will have to get processed eventually though, right? That happens after they get
    imported to the one and only file that doesn't have an underscore in front of
    it. (LESS, on the other hand, does not use this underscore convention. For me,
    this is another small advantage I give to Sass. With Sass, I can make a quick
    visual scan of the file tree and know which files are partials and which aren't.)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`scss`文件夹，你会注意到文件`320andup-scss.scss`和一堆文件名前面带下划线的文件。例如，带下划线的文件，比如`_1382.scss`，被称为partials。下划线让预处理器知道不要将这些单独的文件转换为CSS。但它们最终还是要被处理的，对吧？这是在它们被导入到唯一一个没有下划线的文件之后发生的。（另一方面，LESS不使用这种下划线约定。对我来说，这是我给Sass的另一个小优势。使用Sass，我可以快速浏览文件树，知道哪些文件是partials，哪些不是。）
- en: Using the `320andup-scss.scss` file as an example, think of this file as the
    mother ship. All the other little ships dock there and unload their cargo. Once
    it's all there, things begin to happen. To be specific, CSS happens.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以`320andup-scss.scss`文件为例，可以将这个文件看作是母船。所有其他小船都停靠在那里并卸下货物。一旦所有货物都到齐，事情就开始发生了。具体来说，CSS就开始发生了。
- en: To learn how this comes together, let's look at the mother ship—`320andup-scss.scss`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这是如何组合在一起的，让我们看看母船——`320andup-scss.scss`。
- en: You will notice that the file is just a nice clean file that orders `imports`.
    Notice that the partials don't have the underscore in front of them in the `import`
    statements. Also, the ordering is important as, for example, you want to define
    all your variables and mixins before you try to use them. The other `imports`
    are placed inside the `@media` queries so that those files preceded by underscores
    (partials) are only used inside those queries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这个文件只是一个很干净的文件，它对`imports`进行了排序。注意，在`import`语句中，partials没有下划线。此外，排序很重要，例如，你希望在尝试使用它们之前定义所有的变量和mixin。其他的`imports`被放在`@media`查询内，这样那些带下划线的文件（partials）只在这些查询内使用。
- en: What's so great about this? It keeps your code super tidy—easy to work with
    and maintain. This is the benefit of the 320 and Up framework. It takes care of
    the busy work of organizing all of this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么好处呢？它可以让你的代码保持整洁，易于使用和维护。这就是320 and Up框架的好处。它负责组织所有这些繁忙的工作。
- en: Lastly, I want to list some resources for you to check out to learn more about
    the CSS preprocessors and their helpers. Enjoy!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想列出一些资源供你查阅，以了解更多关于CSS预处理器及其辅助工具的信息。享受吧！
- en: Resources
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'The following list is a list of resources for you to learn more about CSS preprocessors
    and their helpers:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些资源列表，供你了解更多关于CSS预处理器及其辅助工具的信息：
- en: 'Sass: [http://sass-lang.com/](http://sass-lang.com/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sass: [http://sass-lang.com/](http://sass-lang.com/)'
- en: 'LESS: [http://lesscss.org/](http://lesscss.org/)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LESS: [http://lesscss.org/](http://lesscss.org/)'
- en: 'Compass: [http://compass-style.org/](http://compass-style.org/)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Compass: [http://compass-style.org/](http://compass-style.org/)'
- en: 'CodeKit: [http://incident57.com/codekit/](http://incident57.com/codekit/)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CodeKit: [http://incident57.com/codekit/](http://incident57.com/codekit/)'
