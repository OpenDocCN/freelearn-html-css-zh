- en: CSS Foundations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS基础
- en: In this first chapter, *CSS Foundations*, we're going to take a look at the
    fundamental concepts necessary to master CSS. You're going to learn about the
    best practices in web development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一章中，*CSS基础*，我们将看一下掌握CSS所必需的基本概念。你将学习到在网页开发中的最佳实践。
- en: In the world of web development, things change often. For instance, in the past,
    tables were the technique of choice when laying out a webpage. Today, using a
    table for layout is definitely not what you want to do. Floats have been the most
    common way to create a layout for a while and will be what we learn about first.
    In the last year or so, flexbox has started to overtake floats for layout and
    we’ll learn about flexbox towards the end of this book. CSS is progressing with
    other new layout modules that are designed to supplant floats for laying out a
    page. Grid layout, and CSS regions may be the way of the future. Since things
    rapidly evolve in the world of frontend web development, our key takeaway is that
    we can't stop learning CSS. In general, once you stop learning, your knowledge
    will becomes outdated very quickly. My intent is to teach the concepts and techniques
    that will benefit you for a long time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页开发的世界中，事物经常变化。例如，在过去，表格是布局网页的首选技术。但今天，使用表格进行布局绝对不是你想要做的事情。浮动一直是创建布局的最常见方式，也是我们首先要学习的内容。在过去的一年左右，flexbox开始取代浮动进行布局，我们将在本书的后期学习flexbox。CSS正在进步，其他新的布局模块被设计来取代浮动进行页面布局。网格布局和CSS区域可能是未来的发展方向。由于前端网页开发领域的事物迅速发展，我们的关键是我们不能停止学习CSS。一般来说，一旦停止学习，你的知识将很快过时。我的目的是教授能够长期受益的概念和技术。
- en: In the two sections of this chapter, we'll review core concepts that are fundamental
    to web design and CSS. We'll start by reviewing how to create the most fundamental
    thing in CSS–the rule set-and go over the different places we can write those
    rule sets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的两个部分中，我们将回顾对网页设计和CSS至关重要的核心概念。我们将首先回顾如何创建CSS中最基本的东西-规则集-并讨论我们可以写这些规则集的不同位置。
- en: The anatomy of a rule set and the three types of style sheets
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则集的解剖和三种类型的样式表
- en: 'We''re now a little more familiar with the content of the book and the website
    we''re going to build. Before we start delving into more advanced topics, let''s
    review a few CSS foundations. Going forward in this book, I''ll use terms such
    as selector, property, and value, and you''ll need to understand exactly what
    these terms mean in order to follow along. Here''s what we''ll do: we''ll review
    a rule set first, and then we''ll look at the three different places we can write
    those rule sets. So let''s get started.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对这本书的内容和我们将要构建的网站有了更多的了解。在我们开始深入研究更高级的主题之前，让我们回顾一下一些CSS基础知识。在本书中，我会使用诸如选择器、属性和值等术语，你需要确切理解这些术语的含义，以便跟上进度。我们将首先回顾一个规则集，然后再看看我们可以写这些规则集的三个不同位置。所以让我们开始吧。
- en: Dissecting a rule set
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解剖规则集
- en: 'Let''s jump into a CSS file and look at one of the rule sets in the following
    code block. It''s targeting an `h2`-a level two headline. It''s setting a `font-size`
    of `26px`, a `font-style` of `italic`, a `color` to a shade of red, and a `margin-bottom`
    of `10px`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳到一个CSS文件中，看看下面代码块中的一个规则集。它是针对`h2`-一个二级标题。它设置了`font-size`为`26px`，`font-style`为`italic`，`color`为红色，`margin-bottom`为`10px`：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So nothing too scary here! Let''s dissect this a little bit though:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里没有什么可怕的！不过让我们来解剖一下：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code, `h2` is the *selector*. We are selecting an element
    on the page to target our style rules. The `h2` selector could be a `p`, an `li`,
    a `div`, an `a`, or any HTML element we want to target. It can also be a class,
    an ID, or an element attribute, which I''ll talk about later. Next, we have properties
    and values inside the curly braces. From the opening curly brace to the closing
    curly brace is the *declaration block*. You can have as many properties as you
    want inside the curly braces, or declaration block. `font-size`, `color`, `font-style`,
    and `margin` are just a few of the many different properties that you can use.
    Each property has a corresponding value. Between each property and value, you
    must have a colon. Following the value is a semi colon, which is also mandatory.
    Each property and value is called a declaration. So the declaration block is everything
    inside the curly braces and a declaration is a single line that includes a property
    and a value. But really, there are three important things to remember in the anatomy
    of a rule set: the selector, the property, and the value. Now let''s look at where
    we can write these rule sets.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`h2`是*选择器*。我们选择页面上的一个元素来定位我们的样式规则。`h2`选择器可以是`p`、`li`、`div`、`a`或者我们想要定位的任何HTML元素。它也可以是一个类、一个ID或一个元素属性，我稍后会谈到。接下来，我们在花括号内有属性和值。从开花括号到闭花括号是*声明块*。你可以在花括号内有尽可能多的属性。`font-size`、`color`、`font-style`和`margin`只是你可以使用的许多不同属性中的一部分。每个属性都有一个对应的值。在每个属性和值之间，你必须有一个冒号。值之后是一个分号，这也是必需的。每个属性和值被称为一个声明。所以声明块是花括号内的所有内容，声明是包括属性和值的单行。但实际上，在规则集的解剖中有三个重要的事情需要记住：选择器、属性和值。现在让我们看看我们可以在哪里写这些规则集。
- en: External style sheets
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部样式表
- en: 'Currently, we write our rule sets in an external style sheet. You can see it''s
    literally its own file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将规则集写在外部样式表中。你可以看到它实际上是一个独立的文件：
- en: '![](img/00013.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: 'In the folder structure on the left-hand side of the screen, you can see that
    it''s in a folder called `css`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕左侧的文件夹结构中，你可以看到它在一个名为`css`的文件夹中：
- en: '![](img/00014.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: 'Besides `embedded` style sheets. The external style sheet is by far the best
    place to write your styles; it''s a separate file that is linked to each HTML
    page. An external style sheet can control a whole website, which is the main reason
    why this is the preferred type of style sheet. Anywhere in between the `<head></head>`
    tags of your `index.html` file; this is where you can link to your external style
    sheet:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`嵌入`样式表之外。外部样式表是编写样式的最佳位置；它是一个单独的文件，链接到每个HTML页面。外部样式表可以控制整个网站，这是首选样式表的主要原因。在`index.html`文件的`<head></head>`标签之间的任何位置；这是您可以链接到外部样式表的地方：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `href` attribute points to the location of the file. Here it''s pointing
    to the `css` folder and then a file called `style.css`. There''s also a `rel`
    attribute that just basically says that this is a `stylesheet`. In the past, you
    might have seen `text/css` as the value for the `type` attribute, as shown in
    the following code block, but that is no longer necessary in HTML5:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`href`属性指向文件的位置。这里它指向`css`文件夹，然后是一个名为`style.css`的文件。还有一个`rel`属性，基本上表示这是一个`stylesheet`。在过去，您可能已经看到`text/css`作为`type`属性的值，如下面的代码块所示，但在HTML5中这不再是必需的：'
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You may have also seen a closing forward slash on a self-closing tag like the
    `link` element, but in HTML5 that forward slash is no longer necessary. So including
    it or excluding it won't have any impact on your site.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还看到了自关闭标签上的结束斜杠，比如`link`元素，但在HTML5中，这个斜杠不再是必需的。因此，包括它或排除它对您的网站没有任何影响。
- en: Embedded style sheets
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入样式表
- en: 'Instead of using the best type of style sheet, the external style sheet, we
    can also write our rule sets in the head of HTML documents. This is called an
    **embedded style sheet**. There are plenty of reasons for not doing it this way.
    The main two reasons are that it hampers the workflow, and it only controls a
    single page of the site. What we would do is simply create somewhere in the `head`
    tag, these open and close `<style>` tags:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用最佳类型的样式表，外部样式表，我们还可以在HTML文档的头部编写我们的规则集。这被称为**嵌入样式表**。有很多原因不这样做。主要的两个原因是它阻碍了工作流程，而且它只控制站点的单个页面。我们要做的就是在`head`标签中创建这些开放和关闭的`<style>`标签：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Anywhere inside this open `<style>` tag we can start adding our rule sets,
    which will only affect this one page:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个开放的`<style>`标签内的任何位置，我们可以开始添加我们的规则集，这将只影响这一页：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, this isn't the most preferred place to write your styles. Keeping them
    in an external style sheet will, 99 percent of the time, be the best place, but
    you do have the option of embedding styles in the `head` tag of your document.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这不是编写样式的最佳位置。将它们保留在外部样式表中，99%的时间都是最好的选择，但您可以选择将样式嵌入到文档的`head`标签中。
- en: Inline style sheets
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联样式表
- en: 'Finally, the third type of style sheet is the inline style sheet. And its not
    really a style sheet - more like just an *inline style*. What we could do is write
    a `style` attribute actually inside an element in our HTML:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三种样式表是内联样式表。它实际上不是样式表-更像是*内联样式*。我们可以在HTML元素内部实际上写一个`style`属性：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inline styles are a little different from external and embedded style sheets
    that use the traditional rule set; here there''s no selector and there''s no complete
    rule set because you''re writing it inside an HTML tag. We can enter a `font-size`
    of `10px`. We write that property and value the same way we do in a rule set and
    we should cap it with a semicolon:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内联样式与使用传统规则集的外部和嵌入样式表有些不同；这里没有选择器，也没有完整的规则集，因为您是在HTML标记内部编写它。我们可以输入`font-size`为`10px`。我们以与规则集相同的方式编写属性和值，并且应该用分号结束：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also change the color and cap that with a semicolon:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以更改颜色并用分号结束：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Save this, refresh the website, and you can see the result:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个，刷新网站，你就可以看到结果：
- en: '![](img/00015.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: This is by far the most inefficient way to write styles. However, writing CSS
    directly in an HTML element gives it the most weight and will overrule all embedded
    styles and all external styles that target the same element, unless the `!important`
    keyword is used. In [Chapter 4](part0072.html#24L8G0-a72d261cc09f412988422c8a08f12cd5),
    *Creating Buttons with Modular, Reusable CSS Classes, and CSS3* in the *Specificity
    Rules* section, I dive into cascades and other factors that make certain rules
    weigh more and override other rules.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是编写样式的最低效方式。然而，在HTML元素中直接编写CSS会赋予它最大的权重，并且会覆盖所有针对相同元素的嵌入样式和所有外部样式，除非使用`!important`关键字。在[第4章](part0072.html#24L8G0-a72d261cc09f412988422c8a08f12cd5)，*使用模块化、可重用的CSS类和CSS3创建按钮*中的*特异性规则*部分，我深入探讨了级联和其他因素，这些因素使某些规则的权重更大，并覆盖其他规则。
- en: 'Okay, so we have now created a rule set and learned what each part of a rule
    set is called, specifically, the selector, property, and value. This information
    will be helpful for you to retain, as I''ll use this terminology often. We also
    reviewed the three different places you can create a style sheet: externally,
    embedded within the `<head>` tag, and inline, directly inside of an element. Again,
    external style sheets are the most efficient because they can control an entire
    website. This is the only place I write CSS if I can help it. Next, we''ll review
    two more core concepts: the box model and the `display` property.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经创建了一个规则集，并学会了规则集的每个部分的名称，特别是选择器、属性和值。这些信息对您来说将是有帮助的，因为我经常会使用这些术语。我们还回顾了可以创建样式表的三种不同位置：外部、嵌入在`<head>`标签中，以及内联，直接在元素内部。再次强调，外部样式表是最有效的，因为它可以控制整个网站。这是我写CSS的唯一位置。接下来，我们将回顾另外两个核心概念：盒模型和`display`属性。
- en: The box model and block versus inline elements
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒模型和块与内联元素
- en: 'In this section, we''ll review two more foundations of CSS: the box model and
    block versus inline elements. Fully grasping these two concepts is key in laying
    the ground work for CSS mastery later. First, we will review the box model and
    then we''ll look at how that relates to block level elements. We''ll follow that
    up with the characteristics of inline elements.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将回顾CSS的另外两个基础：盒模型和块级与内联元素。充分掌握这两个概念是以后掌握CSS的关键。首先，我们将回顾盒模型，然后我们将看看它与块级元素的关系。接着我们将讨论内联元素的特点。
- en: The box model
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒模型
- en: 'The **box model** defines how wide and tall elements on a page will be. To
    determine the horizontal space an element occupies, you add up the `content` +
    `padding-left` + `padding-right` + `border-left` + `border-right` + `margin-left`
    + `margin-right`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**盒模型**定义了页面上元素的宽度和高度。要确定一个元素占据的水平空间，你需要将`content` + `padding-left` + `padding-right`
    + `border-left` + `border-right` + `margin-left` + `margin-right`相加：'
- en: '![](img/00016.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: So let's take a look at this in practice by looking at the `h1` on our site,
    which is the blue text that says, "Old Chompy".
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们通过查看我们网站上的`h1`来实际看一下。这是蓝色文字，上面写着“Old Chompy”。
- en: '![](img/00017.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: 'Here is the ruleset that makes this headline look the way it does:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使这个标题看起来像这样的规则集：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s add in the following properties to give it a `width`, `padding`, `border`,
    and `margin`. As well as a noticeable `background-color`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加以下属性，给它一个`width`、`padding`、`border`和`margin`。以及一个显眼的`background-color`：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s what our headline looks like now. One big box:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的标题看起来是这样的。一个大盒子：
- en: '![](img/00018.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: So those 5 properties that contribute to this element's box model are now in
    place; looking at the browser in the preceding screenshot, this `h1` really looks
    like a box. We can see the border of `10px`, the `margin`, which is outside the
    `border`, is `50px`, and the padding, which is between the border and the text,
    is `50px`. Then the width inside the padding is `300px`. So this element's width
    is actually *300 + 20 + 100 + 100*, which adds up to a total size of `520px`.
    So even though we said the `width` is `300px` by defining the `width` property
    in our CSS file, the true space this element occupies is `520px`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个元素的盒模型现在有这5个属性；从前面的屏幕截图中可以看出，这个`h1`看起来真的像一个盒子。我们可以看到`10px`的边框，`margin`在`border`外面是`50px`，填充在边框和文本之间是`50px`。然后填充内部的宽度是`300px`。所以这个元素的宽度实际上是*300
    + 20 + 100 + 100*，总共是`520px`。所以即使我们在CSS文件中定义了`width`属性为`300px`，这个元素实际占据的空间是`520px`。
- en: 'Now, that is the traditional box model. I can modify this traditional box model
    using the `box-sizing` property with the `border-box` value. So let''s use the
    `box-sizing` property and see how that affects the site. Add the property and
    value to the bottom of the `h1` declaration block, as shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是传统的盒模型。我可以使用`box-sizing`属性和`border-box`值修改这个传统的盒模型。所以让我们使用`box-sizing`属性，看看它如何影响网站。将属性和值添加到`h1`声明块的底部，如下所示：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As illustrated in the following screenshot, `border-box` will include essentially
    subtract the `padding` and `border` from the `width` and `height` calculation.
    If I use `300px` as my `width`, the border of `20px` and the padding of `100px`
    will be subtracted from the `300px` I specified. This is a more intuitive box
    model and it is compatible with Internet Explorer 8 and higher, as well as all
    other major browsers. The final horizontal space this element now occupies goes
    from `520px` to `400px`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，`border-box`将从`width`和`height`计算中减去`padding`和`border`。如果我将`300px`作为我的`width`，那么我指定的`300px`将减去`20px`的边框和`100px`的填充。这是一个更直观的盒模型，它与Internet
    Explorer 8及更高版本兼容，以及所有其他主要浏览器。这个元素现在占据的最终水平空间从`520px`变成了`400px`。
- en: '![](img/00019.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: Block level elements versus inline elements
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块级元素与内联元素
- en: 'Let''s talk a little bit about block level elements. The heading 1 (`h1`),
    heading 2 (`h2`), paragraphs (`p`), list items (`li`), and divs (`div`) are all
    examples of natural block level elements. Block level elements have two defining
    traits: they expand the full width available, and they force elements that come
    after them to appear on the next line, meaning they stack on top of each other.
    So let''s remove the `box-sizing` property from our declaration block as well
    as the `width` property to demonstrate how they take up the full width available
    if no width is specified:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微谈谈块级元素。标题1（`h1`）、标题2（`h2`）、段落（`p`）、列表项（`li`）和`div`都是自然块级元素的例子。块级元素有两个定义特征：它们扩展了整个可用宽度，并且它们强制后面的元素出现在下一行，这意味着它们堆叠在一起。所以让我们从我们的声明块中删除`box-sizing`属性以及`width`属性，以演示如果没有指定宽度，它们将占用整个可用宽度：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Save this and refresh the site. You can see in the following screenshot that,
    as you make your browser window larger, it takes up the full width available,
    apart from the `margin` that we set of `50px` on all sides:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并刷新网站。你可以在下面的截图中看到，当你将浏览器窗口放大时，它占据了整个可用宽度，除了我们设置的`margin`是四周的`50px`：
- en: '![](img/00020.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'Now let''s go into the HTML file, add two more of these `h1` tags into the
    HTML, and save it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进入HTML文件，在HTML中再添加两个这样的`h1`标签，并保存：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s what that looks like:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '![](img/00021.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: 'Now you can see how these block level elements stack on top of each other:
    good ol'' block level elements.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到这些块级元素如何堆叠在一起：好老的块级元素。
- en: Inline elements, on the other hand, behave differently. They sit next to each
    other horizontally and they don't take up the full width available. They only
    take up as much width as they need. A few elements that are naturally inline elements
    are the anchor (`<a>`), `<span>`, `<i>`, `<b>`, `<strong>`, and `<em>` tags.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，内联元素的行为不同。它们水平相邻，并且不占用整个可用宽度。它们只占用它们需要的宽度。一些天然的内联元素是锚点(`<a>`)、`<span>`、`<i>`、`<b>`、`<strong>`和`<em>`标签。
- en: 'Alright, so let me go into the HTML and add three `span` tags to the page:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，让我进入HTML并向页面添加三个`span`标签：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'What I''ll also do is generally target those `span` elements in a rule set
    and give them a green background, just to kind of see that they''re distinct:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我还会通常在规则集中针对那些`span`元素并给它们一个绿色的背景，只是为了看到它们的区别：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here''s how that looks:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的外观：
- en: '![](img/00022.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: You can notice how the green inline elements sit next to each other horizontally
    instead of stacking vertically. Nothing special, but we can see how they do not
    take up the full width available, they only take as much as they need.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到绿色的内联元素是水平排列而不是垂直堆叠。没有什么特别的，但我们可以看到它们不会占用整个可用宽度，它们只会占用它们需要的宽度。
- en: 'There are some things that inline elements do not do. They don''t respond to
    `width` or `margin-top` or `margin-bottom`. So if an element is naturally inline
    and you give it a `width` and a `margin-top` or `margin-bottom`, as shown in the
    following code, it''s going to do absolutely nothing:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些内联元素不会做的事情。它们不会响应`width`或`margin-top`或`margin-bottom`。因此，如果一个元素自然是内联的，并且您给它一个`width`和一个`margin-top`或`margin-bottom`，就像下面的代码所示，它将绝对不会做任何事情：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Nothing changes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何变化：
- en: '![](img/00022.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: Inline elements just don't respect those properties, and those properties don't
    have an impact on them, so we'll remove those.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 内联元素只是不遵守这些属性，这些属性对它们没有影响，所以我们将删除它们。
- en: 'There''s one last interesting thing you can do. There''s a `display` property
    that allows you to change a natural block level element to inline and vice versa.
    So let''s add a `display` property with the `block` value to our `span` selector
    and view that in the browser. So, I can just say `display: block` and also add
    some `margin-top`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '还有一件有趣的事情可以做。有一个`display`属性，允许您将自然的块级元素更改为内联元素，反之亦然。所以让我们在我们的`span`选择器中添加一个`display`属性，值为`block`，并在浏览器中查看。所以，我可以说`display:
    block`，还可以添加一些`margin-top`：'
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can see that these elements now stack on top of each other and now respect
    the `margin-top` and `margin-bottom` values:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这些元素现在堆叠在彼此上面，并且现在遵守`margin-top`和`margin-bottom`的值：
- en: '![](img/00023.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: 'Elements with the `display` property set to `block` would respect any `width`
    value I give it, but it also takes up the full width available. You can see that
    it extends all the way to the edge of our screen. We could''ve just as easily
    used the `display: inline` property on our `h1` selector to change the nature
    of the display from block to inline. Lastly though, we can use `display: none`,
    which totally hides the element from the page and is often used for various reasons.
    So let''s go to our `h1` declaration and say `display: none`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`display`属性设置为`block`的元素会遵守我给它的任何`width`值，但它也会占用整个可用宽度。您可以看到它延伸到屏幕的边缘。我们也可以在我们的`h1`选择器上轻松使用`display:
    inline`属性，将显示的性质从块状更改为内联。最后，我们可以使用`display: none`，这会完全隐藏页面上的元素，并且通常出于各种原因而使用。所以让我们去我们的`h1`声明并说`display:
    none`：'
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, if we look at our site, that `h1` is invisible. It''s no longer something
    that the browser is going to show us:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查看我们的网站，那个`h1`是不可见的。它不再是浏览器要向我们展示的东西：
- en: '![](img/00024.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: To sum up, all elements conform to a box model. The box model changes a little
    depending on how the `box-sizing` property is used, if used at all. Also, the
    box model changes based on whether the element is block or inline, the two most
    common display properties.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，所有元素都符合框模型。框模型会根据`box-sizing`属性的使用方式而略有变化，如果有的话。此外，框模型会根据元素是块级还是内联而变化，这是两种最常见的显示属性。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have accomplished a lot in this first chapter. We've talked about how CSS
    is the presentation language of the web and really makes your website look like
    a website. We're now familiar with the site we'll be building and tools we'll
    be using in the upcoming chapters. We have covered core concepts such as rule
    sets, linking to an external style sheet, and the box model and display properties,
    all of which are vital in order to master CSS.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们取得了很多成就。我们已经讨论了CSS是Web的呈现语言，真正使您的网站看起来像一个网站。我们现在熟悉了我们将要构建的网站和我们将在接下来的章节中使用的工具。我们已经涵盖了诸如规则集、链接到外部样式表和框模型和显示属性等核心概念，这些都是掌握CSS所必不可少的。
- en: In the next chapter, we'll get into some tools that are necessary to write CSS,
    such as a good text editor, a CSS reset, and Chrome's Developer tools.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些编写CSS所必需的工具，例如良好的文本编辑器、CSS重置和Chrome的开发者工具。
