- en: Creating a Page Layout with Floats
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用浮动创建页面布局
- en: In order to create a multicolumn layout supported in all browsers, we are going
    to use floats. Floats are very simple at first glance but have a few unintuitive
    quirks to them that can cause some frustration when not completely understood.
    This may be because the true origination of floats wasn't for layout, it was to
    achieve the common magazine technique where text flows easily around an image.
    So in this chapter, we're going to delve into floats. We'll go over the basic
    usage of floats and follow that up by creating a layout with floats (and curing
    the headaches caused by floats in later sections)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在所有浏览器中创建支持的多列布局，我们将使用浮动。浮动乍看起来非常简单，但对它们有一些不直观的怪癖，如果不完全理解可能会引起一些挫折。这可能是因为浮动的真正起源不是用于布局，而是为了实现文本围绕图像轻松流动的常见杂志技术。因此，在本章中，我们将深入研究浮动。我们将介绍浮动的基本用法，然后通过使用浮动创建布局（并在后续部分中解决浮动引起的头痛）
- en: Float introduction–flowing text around images
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮动介绍-围绕图像流动的文本
- en: Let's start this chapter with an introduction to floats. We'll talk about the
    original purpose of floats, followed by the basic problem that they cause and
    how to clear elements that come after floats. In this section, we'll also start
    work on a new HTML page about shark movies that you can find in the book download
    package.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从介绍浮动开始这一章。我们将讨论浮动的最初目的，然后是它们引起的基本问题以及如何清除浮动后面的元素。在本节中，我们还将开始制作一个关于鲨鱼电影的新HTML页面，您可以在书籍下载包中找到。
- en: The Shark movies page
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鲨鱼电影页面
- en: 'Here we have a new HTML page about shark movies. If you look at this page,
    you''ll see an image on top of a title, on top of some text, and on top of a link;
    as you scroll down, you''ll see that there are three sections like that for each
    of the three movies:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个关于鲨鱼电影的新HTML页面。如果您查看此页面，您会看到一个图像位于标题的顶部，文本的顶部，并且链接的顶部；当您向下滚动时，您会看到每个电影都有三个类似的部分：
- en: '![](img/00073.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: 'The HTML is fairly straightforward. There are three sections, each with a `div`
    tag with a class of `wrapper`, which is centering the content. Inside the `wrapper`
    class, there''s an anchor tag with an image inside it. Underneath the anchor tag
    is an `h1` tag containing the title and some paragraph text. This is followed
    by an anchor tag, which is a link to learn more. Here''s a screenshot of the first
    section:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: HTML非常简单。有三个部分，每个部分都有一个`wrapper`类的`div`标记，用于居中内容。在`wrapper`类中，有一个包含图像的锚点标记。在锚点标记下面是一个包含标题和一些段落文本的`h1`标记。然后是一个锚点标记，这是一个链接以了解更多信息。以下是第一部分的屏幕截图：
- en: '![](img/00074.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: The original purpose of floats
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮动的最初目的
- en: 'Let''s look at the final project, shown in the following figure. We want to
    float the image to the left and have the headline and text flow around it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下最终项目，如下图所示。我们希望将图像浮动到左侧，并使标题和文本围绕它流动：
- en: '![](img/00075.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: 'Let''s target that image in CSS. Instead of targeting the image in our selector,
    let''s actually target the image''s container, which is this anchor tag with a
    class of `figure`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在CSS中定位该图像。我们不是在选择器中定位图像，而是实际上定位图像的容器，即具有`figure`类的锚点标记：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I don''t want to just target the `.figure` class as my selector because I may
    use this class on other image containers and may not want them all to be floated.
    So, let''s use a descendant selector based on its parent. Its parent is up at
    the top of the section, the `section` tag, which has multiple classes: `content-block`,
    `style-1`, and `wave-border`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想只将`.figure`类作为我的选择器目标，因为我可能会在其他图像容器上使用这个类，并且可能不希望它们全部浮动。因此，让我们基于其父级使用后代选择器。其父级位于部分顶部，具有多个类：`content-block`，`style-1`和`wave-border`：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a modular approach that we''ll get into more in the next section. The
    main class we''re looking for is `content-block`. The `style-1` and `style-2`
    classes are only controlling the two different color schemes and `wave-border`
    adds the repeating background image of the wave to the top of the first section.
    Finally, in our CSS, our selector is going to be `.content-block .figure`, so
    we are targeting any element that has a class of `figure` inside an element with
    a class of `content-block`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种模块化的方法，我们将在下一节中更详细地介绍。我们正在寻找的主要类是`content-block`。`style-1`和`style-2`类只控制两种不同的颜色方案，`wave-border`添加了波浪的重复背景图像到第一部分的顶部。最后，在我们的CSS中，我们的选择器将是`.content-block
    .figure`，因此我们正在针对任何具有`content-block`类的元素中具有`figure`类的元素进行定位：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So what we''ll type in this rule set, under the `margin` property, is `float:
    left`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，在这个规则集下，我们将在`margin`属性下输入`float: left`：'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we refresh the page, we see that everything has gone to plan. This was
    almost too simple. We achieved almost exactly what we set out to do in all three
    sections:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们刷新页面时，我们看到一切都按计划进行。这几乎太简单了。我们在所有三个部分几乎完全实现了我们的目标：
- en: '![](img/00076.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: 'Let''s add a background color to `h1` and `p` in our CSS, just to see what''s
    going on here. We''ll just give `h1` a background color of `deeppink` and a background
    color of `green` via `content-block`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的CSS中为`h1`和`p`添加背景颜色，只是为了看看这里发生了什么。我们将为`h1`赋予`deeppink`的背景颜色，并通过`content-block`为`p`赋予`green`的背景颜色：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Following is the output of preceding code block:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码块的输出：
- en: '![](img/00077.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.jpeg)'
- en: 'Notice how the backgrounds go behind the image. The text is flowing to the
    right, but the elements themselves are no longer seeing the floated element, the
    image, as part of the normal flow. Floated elements themselves change when their
    display properties are affected. For instance, the anchor tag that was floated,
    or really the anchor with a class of `figure`, starts acting like a block-level
    element. It will now respond to width and margin top and bottom; as we''ve seen,
    it already responded to the margin bottom. However, it won''t necessarily force
    a new line. Let''s float it to the right, and it should have a very similar effect:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意背景是如何在图像后面的。文本向右流动，但元素本身不再将浮动元素，即图像，视为正常流的一部分。当它们的显示属性受到影响时，浮动元素本身会发生变化。例如，浮动的锚点标签，或者真的是一个class为`figure`的锚点，开始像块级元素一样行事。它现在会响应宽度和上下边距；正如我们所见，它已经响应了下边距。然而，它不一定会强制换行。让我们将它向右浮动，它应该有一个非常相似的效果：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Following is the output of preceding code block:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码块的输出：
- en: '![](img/00078.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: Using the clear property to solve basic problems with floats
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用clear属性解决浮动的基本问题
- en: 'We can use the `clear` property to stop elements underneath the floated element
    from misbehaving. For instance, let''s add the `clear` property to the paragraph.
    We''ll add `clear: both`, which clears both left and right floated elements:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以使用`clear`属性来阻止浮动元素下面的元素表现异常。例如，让我们给段落添加`clear`属性。我们将添加`clear: both`，它清除左右两侧的浮动元素：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, when you refresh, you will see the paragraph text seated below the floated
    element:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您刷新时，您会看到段落文本坐在浮动元素下面：
- en: '![](img/00079.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: 'We can do the same thing for `h1` and that will sit below:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对`h1`做同样的事情，它会位于下面：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can also just say `clear: right` because the float in the rule set above
    it is floated to the right.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '我们也可以直接说`clear: right`，因为在它上面的浮动是向右浮动的。'
- en: 'After saving the CSS and viewing the site, and you will see it works. The `h1`
    tag also sits below `.figure`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 保存CSS并查看网站后，您会看到它起作用了。`h1`标签也位于`.figure`下面：
- en: '![](img/00080.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: 'However, if you type in `clear: left` to your `h1` rule set, it won''t necessarily
    work because there are no left floated elements here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，如果您在`h1`的规则集中输入`clear: left`，它不一定会起作用，因为这里没有左浮动的元素：'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Following is the output of preceding code block:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码块的输出：
- en: '![](img/00081.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: 'Here, `None` is the default value of both `float` and `clear`. So, we can say
    `clear: none` on both of these, and it will go back to how it was before we added
    the `clear` property:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，`None`是`float`和`clear`的默认值。因此，我们可以在这两个上说`clear: none`，它将恢复到添加`clear`属性之前的状态：'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Following is the output of preceding code block:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码块的输出：
- en: '![](img/00082.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: 'However, since `clear: none` is the default value, you can just take that whole
    property away from both of those selectors; this will have the same effect on
    the site. I hardly ever use clear left and clear right; the `both` value seems
    to be more than adequate most of the time.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，由于`clear: none`是默认值，您可以从这两个选择器中删除整个属性；这将对网站产生相同的影响。我几乎从不使用clear left和clear
    right；`both`值似乎在大多数情况下都足够了。'
- en: In this section, we've seen the traditional use of floating elements and how
    elements underneath the float flow around the floated element. This can be stopped
    using the `clear` property. This technique is useful, but honestly, floats are
    even more useful for building multicolumn layouts. Let's take a look at that now.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了浮动元素的传统用法，以及浮动元素下面的元素如何围绕浮动元素流动。这可以使用`clear`属性来停止。这种技术很有用，但老实说，浮动对于构建多列布局更有用。现在让我们来看看。
- en: Creating a multicolumn layout
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多列布局
- en: Floats were designed to flow text around an image. However, floats are also
    the most common way of building a multicolumn layout. In this section, we'll look
    at how to float elements next to each other in order to create a page layout.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动设计用于围绕图像流动文本。然而，浮动也是构建多列布局的最常见方式。在本节中，我们将看看如何将元素浮动到彼此旁边以创建页面布局。
- en: 'So, what we currently have in the HTML in the secondary section are three `div`
    tags with a class of `column`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们目前在HTML中次要部分有三个class为`column`的`div`标签：
- en: '![](img/00083.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: 'The following screenshot illustrates the final site. This is what we''re aiming
    for. We want three equal columns with a small gutter or margin in between:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了最终的网站。这是我们的目标。我们希望有三个相等的列，之间有一个小的间距或边距：
- en: '![](img/00084.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: 'In our current site, columns are stacked on top of one another. Right now,
    we have simple rows, so we want to fix that using floats. In our final site, we
    want to have everything centered in the middle of the page, but right now, all
    of our content goes from one edge of the browser window to pretty much the opposite
    edge of the browser window:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的网站中，列是堆叠在彼此上面的。现在，我们有简单的行，所以我们想使用浮动来解决这个问题。在我们最终的网站中，我们希望将所有内容都居中在页面的中间，但现在，我们所有的内容都从浏览器窗口的一边到几乎是浏览器窗口的另一边：
- en: '![](img/00085.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: Let's fix this by centering our `div` tags.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过居中我们的`div`标签来修复这个问题。
- en: Centering an element
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 居中一个元素
- en: 'What we really need to do is to wrap the entire content in a `div` tag; so
    let''s do that. Go into the HTML file. In the line beneath the opening `section`
    tag, add `<div class="wrapper">` . And right before the closing `section` tag,
    close it with `</div>`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正需要做的是将整个内容包裹在一个`div`标签中；所以让我们这样做。进入HTML文件。在开放的`section`标签下一行，添加`<div class="wrapper">`。并在关闭的`section`标签之前，用`</div>`关闭它：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, switch over to the CSS file. The `.wrapper` tag is going to be a more
    reusable class. To center any element, we''ll give it a margin, and we''ll use
    the two-value syntax: top and bottom are going to be zero, and left and right
    are going to be auto. We also have to give it a width of `960px`. Without a width,
    you really can''t center it using this margin technique:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到CSS文件。`.wrapper`标签将是一个更可重用的类。为了居中任何元素，我们会给它一个margin，并且我们会使用两值语法：上和下将是零，左和右将是自动。我们还必须给它一个宽度为`960px`。没有宽度，你真的无法使用这种margin技术来居中它：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There, we have it; all of the content should now be centered inside this wrapper:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们完成了；所有的内容现在应该都居中在这个包裹器内：
- en: '![](img/00086.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: The `wrapper` class, like I said, is nice and reusable. I will use the `wrapper`
    class anywhere on the site where I want to center a collection of elements.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我说的，`wrapper`类很好而且可重用。我会在网站的任何地方使用`wrapper`类来居中一组元素。
- en: Floating columns
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮动列
- en: 'So, back to the order of our business here: floating the three columns on our
    home page. To do this, I want to give each `div` tag a class of `column` that
    we can style. So, in the HTML, let''s go to each `div` tag in the secondary section
    and use the nice multiple cursor feature of Sublime Text to add `class="column"`
    to all three of them at once:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，回到我们的业务顺序：在我们的主页上浮动这三列。为了做到这一点，我想给每个`div`标签一个`column`类，这样我们就可以对其进行样式设置。所以，在HTML中，让我们去到次要部分的每个`div`标签，并使用Sublime
    Text的多重光标功能一次性给它们都添加`class="column"`：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In my CSS I have made a big comment denoting this section of my CSS for these
    three columns, I encourage you to as well.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的CSS中，我已经用一个大的注释标注了这部分CSS，我鼓励你也这样做。
- en: 'Under this comment, we''ll target `.column` and apply `float: left`. The width
    will be `320px`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个注释下面，我们将针对`.column`并应用`float: left`。宽度将是`320px`。'
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Ideally, whenever you float elements, try to add a width. If all three columns
    are `320px` , that''s going to add up to exactly 960 pixels and fit the width
    of that wrapper perfectly. If we were to use a number that added up to more than
    960 pixels, then not all of the three `div` tags would fit in that space. One
    would wrap to the bottom so they wouldn''t have all the three `div` tags on one
    row. It''s important that the width of all the floated `div` tags is never more
    than the parent `div` tag. So save this and refresh the site:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，每当你浮动元素时，尝试添加一个宽度。如果所有三列都是`320px`，那将恰好加起来是960像素，正好适应那个包裹器的宽度。如果我们使用的数字加起来超过960像素，那么不是所有的三个`div`标签都会适应那个空间。其中一个会换行到底部，所以它们不会都在一行上。重要的是，所有浮动的`div`标签的宽度永远不要超过父`div`标签的宽度。所以保存这个并刷新网站：
- en: '![](img/00087.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.jpeg)'
- en: 'It looks like all the three columns are floated next to each other. That worked
    out pretty well, except we don''t have any margin between columns. So let''s go
    back to our code and let''s give it a `margin-left` property of `30px`. Save this
    and refresh the browser:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来所有三列都浮动在一起。这个效果还不错，只是列之间没有任何间距。所以让我们回到我们的代码，给它一个`margin-left`属性，值为`30px`。保存并刷新浏览器：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Following is the output of preceding code block:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码块的输出：
- en: '![](img/00088.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: We get a margin of `30px`, but we also get our third column drifted down to
    the bottom because it can't fit in the width allowed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了`30px`的边距，但我们的第三列也因为无法适应允许的宽度而漂移到了底部。
- en: 'Let''s fix this by reducing the width of the columns to `300px` each:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将列的宽度减小到每个`300px`来修复这个问题：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now if you look at the browser, you will also see that we don''t need a `margin-left`
    on the first column. We don''t need a left margin next to empty space:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你看浏览器，你也会看到我们不需要在第一列上添加`margin-left`。我们不需要在空白处旁边添加左边距：
- en: '![](img/00089.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: Let's get rid of this margin left on the first column. We can do this by targeting
    that individual `.column` property using a pseudo class called `first child`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去掉第一列的左边距。我们可以通过使用一个叫做`first child`的伪类来定位那个单独的`.column`属性。
- en: Targeting .column using a pseudo class
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用伪类定位`.column`
- en: 'Adding the `.column:first-child` selector will target the first appearance
    of the column element. We''ll add `margin-left` as zero. When we save this, we
    get three equal columns with a `margin-left` for each of them, except the first:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`.column:first-child`选择器将定位到列元素的第一次出现。我们将把`margin-left`添加为零。当我们保存这个时，我们得到了三个相等的列，每个都有一个`margin-left`，除了第一个：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Following is the output of preceding code block:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码块的输出：
- en: '![](img/00090.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: This technique would work just as well with two columns, four columns, or any
    number of columns.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术对于两列、四列或任意数量的列都同样适用。
- en: Collapsed containers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 折叠的容器
- en: So, everything is great with the columns, except that if you try and scroll
    the page down, you will see that we are really tight to the bottom.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，列的一切都很好，除了如果你尝试向下滚动页面，你会发现我们离底部非常紧。
- en: '![](img/00091.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: 'Let''s see what happens when we add a `margin-bottom` property to the container
    that wraps around everything: `secondary-section`. Let''s say `margin-bottom:
    40px`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们看看当我们为包裹所有内容的容器`secondary-section`添加`margin-bottom`属性时会发生什么：假设`margin-bottom:
    40px`：'
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we save this, it really does nothing in the browser. The content is still
    sitting right at the bottom. Let me further illustrate this problem. If I had
    a background color of green, then you''d expect the entire background to be green:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们保存这个，它在浏览器中实际上什么也没做。内容仍然紧贴着底部。让我进一步说明这个问题。如果我有一个绿色的背景颜色，那么你会期望整个背景都是绿色的：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'However, if we add the preceding code and save it, the background doesn''t
    become green. So, let''s actually inspect this element. Let''s inspect secondary-section
    in the browser using Chrome''s DevTools. We will see both margin-bottom and background-color
    are in the process of getting applied. But we don''t see anything in green on
    the page:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们添加前面的代码并保存，背景颜色并没有变成绿色。所以，让我们实际检查一下这个元素。使用Chrome的DevTools在浏览器中检查`secondary-section`。我们会看到`margin-bottom`和`background-color`都在被应用的过程中。但我们在页面上看不到任何绿色的东西：
- en: '![](img/00092.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: 'When you put your mouse over the `secondary-section` element, you will see
    it highlights the space that it occupies in that peachy color on the screen (you''ll
    see it as a different shade of gray in the following screenshot if you''re looking
    at a printed copy):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将鼠标悬停在`secondary-section`元素上时，您将看到它在屏幕上以桃红色突出显示的空间（如果您正在查看打印副本，则将以不同的灰色阴影显示）：
- en: '![](img/00093.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: 'The container has actually collapsed. This is what happens when all the elements
    inside a parent element are floated: the container collapses, floats are taken
    outside the normal flow, and the container has no height because of this.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 容器实际上已经坍塌了。当父元素内的所有元素都被浮动时，就会发生这种情况：容器坍塌，浮动被带出正常流，容器没有高度。
- en: Let's take a look and see what we can do to fix this.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们能做些什么来解决这个问题。
- en: Solving the problems of floats
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决浮动的问题
- en: 'Okay, so let''s look at our problem. You''ve learned how to change stacked
    rows into horizontal columns in order to achieve a multicolumn layout, but our
    containing element around our floated elements has totally collapsed and lost
    its height because all the elements inside it are floated. As a collapsed element,
    it doesn''t look like it''s responding to the `margin-bottom` property or the
    `background-color` we''ve assigned to it. So, in this section, we''ll look at
    four separate methods to fix this collapse, and we''ll try to understand the best
    way to deal with it. First, we''ll use the `clear` method, followed by the `overflow:
    hidden` method, followed by the `float` method, and then finally the most preferred
    method: the `clearfix` hack.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '好的，让我们看看我们的问题。您已经学会了如何将堆叠的行转换为水平列，以实现多列布局，但是我们围绕浮动元素的包含元素已经完全坍塌并且失去了高度，因为它内部的所有元素都被浮动了。作为一个坍塌的元素，它看起来不像是响应`margin-bottom`属性或我们分配给它的`background-color`。因此，在本节中，我们将看看四种不同的方法来解决这个坍塌，并尝试理解处理它的最佳方法。首先，我们将使用`clear`方法，然后是`overflow:
    hidden`方法，然后是`float`方法，最后是最优选的方法：`clearfix` hack。'
- en: Using the clear method
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用清除方法
- en: 'Let''s solve this using the `clear` property. What we''ll do at the end of
    `secondary-section` is add a class of `clear` to a new `div`, using the following
    code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`clear`属性来解决这个问题。在`secondary-section`的末尾，我们将向一个新的`div`添加一个`clear`类，使用以下代码：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we''ll go into our CSS, and in the area reserved for global styles, underneath
    the ruleset targeting the `wrapper` class; this is where we''ll create the `clear`
    selector and add `clear: both`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将进入我们的CSS，在全局样式保留区域，在针对`wrapper`类的规则集下面；这是我们将创建`clear`选择器并添加`clear: both`的地方：'
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'So, if we save this and return to the browser, our background color will be
    green with a bottom margin of `50px`. Everything is working very well:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们保存并返回到浏览器，我们的背景颜色将是绿色，底部间距为`50px`。一切都运行得很好：
- en: '![](img/00094.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00094.jpeg)'
- en: 'However, we''ve added extra non-semantic markup to our page. We *may* even
    get an SEO deduction for this. Let''s explore other ways to do this without adding
    the extra markup. Get rid of that extra markup we just added to our HTML:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在页面上添加了额外的非语义标记。我们甚至可能因此而受到SEO的扣分。让我们探索其他方法来做到这一点，而不添加额外的标记。去掉我们刚刚添加到HTML中的额外标记：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Our collapse will return. Now we won''t be able to see the green background
    anymore; that''s how we know the collapse is there:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的坍塌将返回。现在我们将无法再看到绿色的背景；这就是我们知道坍塌存在的方式：
- en: '![](img/00095.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: Using overflow property with hidden value
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用overflow属性和hidden值
- en: 'The next method we''ll look at is `overflow: hidden`. Go to your CSS and find
    the `.secondary-section` class. What we can do is add the `overflow` property
    with the value of `hidden`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将看看的下一种方法是`overflow: hidden`。转到您的CSS并找到`.secondary-section`类。我们可以做的是添加值为`hidden`的`overflow`属性：'
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`overflow: hidden` is a true hack. It was never meant for remedying collapsed
    containers; it was meant for hiding any content image or text that overflowed
    its container. However, magically, `overflow: hidden` also clears the collapse.
    If we save our CSS and go to our site, we will see this is evident by the background,
    which is now green in color:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`overflow: hidden`是一个真正的hack。它从来不是用来修复坍塌的容器的；它是用来隐藏任何溢出其容器的内容图像或文本的。然而，神奇的是，`overflow:
    hidden`也清除了坍塌。如果我们保存我们的CSS并转到我们的网站，我们将看到这一点，因为背景现在是绿色的：'
- en: '![](img/00096.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: 'A small problem with `overflow: hidden` is that you may want the content to
    overflow the container, for instance, a drop-down menu or tooltip. The `overflow:
    hidden` hack will hide that overflow—no surprises there! It''s a solution, but
    it may not always be ideal. For instance, in our exact scenario, we may want this
    octopus to kind of creep out of its container. Let''s go into Chrome DevTools
    and give it `margin-top: -50px`. As you can see, now the top of the image is no
    longer showing and the overflow is hidden:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`overflow: hidden`的一个小问题是，您可能希望内容溢出容器，例如下拉菜单或工具提示。`overflow: hidden` hack将隐藏溢出内容
    - 没有什么意外！这是一个解决方案，但并不总是理想的。例如，在我们确切的情况下，我们可能希望这只章鱼有点从容器中爬出来。让我们进入Chrome DevTools并给它`margin-top:
    -50px`。如您所见，现在图像的顶部不再显示，溢出被隐藏了：'
- en: '![](img/00097.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: 'So that''s not a good fix for us. Let''s delete that `overflow: hidden` declaration
    from our CSS file and look at the next method: the `float` method.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '所以这对我们来说不是一个好的解决方案。让我们从我们的CSS文件中删除`overflow: hidden`声明，并看看下一种方法：`float`方法。'
- en: The float method
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮动方法
- en: 'We can prevent elements from collapsing by floating the container to the left
    or to the right. Let''s do this; let''s add `float: left` or `float: right` to
    our `secondary-section`. Either will work:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以通过将容器浮动到左侧或右侧来防止元素坍塌。让我们这样做；让我们向我们的`secondary-section`添加`float: left`或`float:
    right`。任何一个都可以：'
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once we save this, we will see that we have the green background, so the collapse
    is no longer taking place, but the obvious problem is we''ve floated to the left.
    We wanted this div to be centered:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们保存了这个，我们会看到我们有绿色的背景，所以坍塌不再发生，但明显的问题是我们已经向左浮动了。我们希望这个div居中：
- en: '![](img/00098.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: 'This method has an obvious drawback. There are some circumstances and some
    situations where it would be a perfect solution, but in this one, there''s an
    obvious problem: we are no longer centered. Remove `float: left` from your CSS
    and explore my favorite, and I think the best, solution: the **clearfix hack**.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '这种方法显然有一个明显的缺点。有些情况和一些情况下它可能是一个完美的解决方案，但在这种情况下，有一个明显的问题：我们不再居中。从你的CSS中删除`float:
    left`，并探索我的最喜欢，我认为最好的解决方案：**clearfix hack**。'
- en: Clearfix hack
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: clearfix hack
- en: 'If we look at the following CSS, right below our reset, these rulesets make
    up our **clearfix**:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下下面的CSS，在我们的重置之后，这些规则集构成了我们的**clearfix**：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This code was actually part of our base layer of CSS. Basically, what this does
    is create a pseudo element before and after any element with a class of `grouping`.
    This pseudo element has a blank space for content and the display is set to table.
    Then we have the `after` pseudo element beneath that chunk of code, which has
    the `clear` property set on it and clears any floats before it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实际上是我们CSS的基础层。基本上，这样做是在任何具有`grouping`类的元素之前和之后创建一个伪元素。这个伪元素有一个空白内容和显示设置为表。然后我们在代码块下面有`after`伪元素，它有`clear`属性设置，并清除它之前的任何浮动。
- en: You might sometimes see `clearfix` as the class name instead of `grouping`.
    I tend to use `grouping` because I think it makes more sense; you're kind of grouping
    elements, and that's a little bit more semantic. It doesn't really matter though;
    `clearfix` and `grouping` both do the same thing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能会看到`clearfix`作为类名，而不是`grouping`。我倾向于使用`grouping`，因为我认为这更有意义；你在某种程度上在分组元素，这更有语义。不过这并不重要；`clearfix`和`grouping`都能做同样的事情。
- en: 'All right, that''s already in the CSS, so there''s nothing more we need to
    do except go to `secondary-section` in the HTML and just add this `grouping` class
    to it. So we''re adding a second class to it:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这已经在CSS中了，所以我们除了去HTML中的`secondary-section`，只需添加这个`grouping`类。所以我们给它添加了第二个类：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When we save and refresh, we have our container; the collapse is fixed. In
    the next screenshot, we see the background color and the bottom margin. We''re
    in pretty good shape here:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存并刷新时，我们有了我们的容器；坍塌已经解决了。在下一张截图中，我们看到了背景颜色和底部边距。我们在这里的情况非常好：
- en: '![](img/00099.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'The clearfix will work in IE8 but not IE7 unless you add an IE-specific style
    sheet. This actually goes in the index. So up in the head of `index.html`, I have
    this style sheet, shown in the next screenshot, specifically for IE7\. What it
    does is give grouping a zoom of `1`. This triggers something called `hasLayout`
    in older versions of IE, which clears the collapse:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: clearfix在IE8中可以工作，但在IE7中不行，除非你添加一个IE特定的样式表。这实际上是放在索引中的。所以在`index.html`的头部，我有这个样式表，如下一张截图所示，专门为IE7。它的作用是给grouping一个`1`的缩放。这会触发旧版本的IE中的`hasLayout`，从而清除坍塌：
- en: '![](img/00100.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: Don't worry if that doesn't make too much sense to you; it doesn't necessarily
    have to. However, just know that this allows the clearfix hack to work in older
    versions of IE. So, all in all, this is very deep browser support, and it's so
    very easy to use that it's many frontend developers' preferred way of clearing
    collapsed floats. It's certainly my favorite way of going about it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对你来说没有太多意义，不要担心；它不一定要有。不过，知道这可以让clearfix hack在旧版本的IE中工作。总的来说，这是非常深的浏览器支持，而且非常容易使用，这是许多前端开发人员首选的清除坍塌浮动的方法。这绝对是我解决问题的最喜欢的方法。
- en: 'In this section, you learned about fixing the collapse of parent elements caused
    by floats using:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你学会了使用以下方法来修复由浮动引起的父元素坍塌：
- en: An empty clear div.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个空的清除div。
- en: 'The `overflow: hidden`.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`overflow: hidden`。'
- en: By floating the parent element. All three of these worked but had minor to major
    flaws.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浮动父元素。这三种方法都有效，但都有轻微到严重的缺陷。
- en: 'The clearfix hack with very deep support, ease of use, and semantic style tends
    to win as the best method. I use it on every project. It can easily solve one
    of the biggest problems with floats: collapse. Another thing I like about the
    clearfix hack is that it is a very modular approach to CSS. Just add the `clearfix`
    class anywhere to your markup and you''ve gotten rid of collapsed containers.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有非常深的支持、易于使用和语义化风格的clearfix hack往往是最佳方法。我在每个项目中都使用它。它可以轻松解决浮动的最大问题之一：坍塌。我喜欢clearfix
    hack的另一点是它是一种非常模块化的CSS方法。只需在你的标记中的任何地方添加`clearfix`类，你就可以摆脱坍塌的容器。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we went over the traditional use of floating elements: flowing
    text around images. We then looked at using floats to build a multi-column layout.
    Finally, we learned how to tackle the problems that come with using floats. We
    found that the clearfix hack is the best method for fixing collapsed floats. In
    the next chapter, we''re going to expand on modular CSS as we create modern buttons
    using a modular approach.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了传统的浮动元素的使用：围绕图像流动文本。然后我们看了看使用浮动来构建多列布局。最后，我们学会了如何解决使用浮动时出现的问题。我们发现clearfix
    hack是修复浮动坍塌的最佳方法。在下一章中，我们将扩展模块化CSS，使用模块化方法创建现代按钮。
