- en: Creating the Main Navigation and Drop-Down Menu
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主导航和下拉菜单
- en: In this chapter, we'll build all of the functionality and presentation for the
    site's primary navigation. This chapter is pretty deep, as building our main nav
    involves pseudo classes; static, absolute, relative, and fixed positioning; and
    CSS animations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为网站的主要导航构建所有功能和展示。这一章非常深入，因为构建我们的主导航涉及伪类；静态、绝对、相对和固定定位；以及CSS动画。
- en: Starting the navigation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始导航
- en: 'In this section, we''ll begin by creating the cleanest HTML possible and then
    plug in the basic CSS to get it started. The following is what our final site
    should look like; this is what we''re aiming for:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先创建尽可能干净的HTML，然后插入基本的CSS以启动它。以下是我们最终网站应该看起来的样子；这是我们的目标：
- en: '![](img/00172.jpeg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00172.jpeg)'
- en: We have a typical horizontal navigation bar. Some of the items have a drop-down
    menu. We also have a shark logo on the left-hand side of the nav bar, which is
    overhanging nicely.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个典型的水平导航栏。其中一些项目有下拉菜单。我们还在导航栏的左侧有一个鲨鱼标志，它很好地悬挂在那里。
- en: The semantic HTML for building a menu
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建菜单的语义化HTML
- en: 'Let''s jump right in and type the HTML we need. We''ll start with this nice,
    big HTML comment. As you may have noticed, I like these big guys. This is because
    it''s easier to locate parts of the code I need quickly:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即输入我们需要的HTML。我们将从这个漂亮的大HTML注释开始。您可能已经注意到，我喜欢这些大家伙。这是因为更容易快速定位到我需要的代码部分：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll wrap everything in the HTML5 `nav` element and apply the `grouping`
    class because we''ll be floating everything in there. A clearfix will eventually
    be necessary so that the container doesn''t collapse:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把所有内容包装在HTML5的`nav`元素中，并应用`grouping`类，因为我们将在其中浮动所有内容。最终将需要一个清除浮动，以防容器坍塌：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s add a `figure` element that will wrap our shark image:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一个`figure`元素，它将包裹我们的鲨鱼图像：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we''ll start an unordered list with the `primary-nav` class. Long ago,
    it was determined that it is very semantic to use a list for navigation because
    it''s essentially a list of links:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始一个带有`primary-nav`类的无序列表。很久以前，人们确定使用列表进行导航非常语义化，因为它本质上是一个链接列表：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll start with four list items. We''ll put an anchor tag inside each one
    of them:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从四个列表项开始。我们将在每个列表项中放置一个锚点标记：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we apply this to our site, we''ll end up with a shark image and four links,
    all stacked vertically:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将其应用到我们的网站时，我们将得到一个鲨鱼图像和四个链接，全部垂直堆叠：
- en: '![](img/00173.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00173.jpeg)'
- en: We need to lay out these four links horizontally, like blocks. We'll do this
    with floats and a few other properties.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这四个链接水平排列，就像块一样。我们将使用浮动和其他一些属性来实现这一点。
- en: Using CSS to style the navigation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS来设计导航
- en: 'In our CSS, first we''ll find the big block comment for the navigation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CSS中，首先我们将找到导航的大块注释：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ll then target the `primary-nav`. class. Let''s use a special type of descendant
    selector that only targets the first level of list items:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将定位`.primary-nav`类。让我们使用一种特殊类型的后代选择器，它只定位列表项的第一级：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is important. We''re doing this because later we''ll nest another unordered
    list within these list items to get a drop-down menu. Let''s say we create the
    same selector without the greater than symbol:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要。我们这样做是因为稍后我们将在这些列表项中嵌套另一个无序列表以获得一个下拉菜单。假设我们创建相同的选择器，但没有大于号符号：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This targets any and every `li` tag inside of `primary-nav`--children, grandchildren,
    great-grandchildren, and so on. If you only want to target immediate children,
    use this selector; it is known as the child combinator:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将定位`primary-nav`内的任何和所有`li`标签--子代、孙代、曾孙代等。如果您只想定位直接子代，请使用此选择器；它被称为子组合器：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The greater than sign between the elements ensures we are only targeting direct
    children. Let''s also float those list items to the left, then refresh the browser:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 元素之间的大于号确保我们只定位直接子代。让我们也将这些列表项浮动到左侧，然后刷新浏览器：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Following is the output of preceding code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/00174.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00174.jpeg)'
- en: That's a start; there's a lot more to do.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个开始；还有很多工作要做。
- en: 'Let''s use the same type of child combinator to target only direct children
    anchors of a direct children list item of `.primary-nav`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同类型的子组合器来仅定位`.primary-nav`的直接子项中的直接子项锚点：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So we''re going to add padding of `25px` to the top and `0` to the left and
    right. We''ll also add a width; each one will be `150px` wide, and we''ll give
    each one a `border-left` of 1 pixel solid and color them gray:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将在顶部添加`25px`的填充，左右各`0`。我们还会添加一个宽度；每个宽度将为`150px`，并且我们会给每个添加一个1像素实线的`border-left`并将它们颜色设置为灰色：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We see that it''s now starting to loosely resemble our final nav:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到它现在开始松散地类似于我们最终的导航：
- en: '![](img/00175.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00175.jpeg)'
- en: 'We''ll now drop this whole ruleset in our CSS, under the primary nav selectors:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将把整个规则集放在我们的CSS中，放在主要导航选择器下面：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is a more familiar descendant selector for some of the styles that we''ll
    apply to the main navigation items - as well as - the drop-down navigation items.
    This is a nice **DRY** (**Don''t Repeat Yourself**) approach, so we don''t have
    to re-write this code later for the drop-down menu. Let''s examine this ruleset
    more closely. Basically, we''re setting `font-family` to `Arial`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更熟悉的后代选择器，适用于我们将应用于主导航项目以及下拉导航项目的一些样式。这是一种很好的**DRY**（**不要重复自己**）方法，这样我们就不必以后为下拉菜单重新编写这段代码。让我们更仔细地检查这个规则集。基本上，我们将`font-family`设置为`Arial`：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have this text color:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有这个文本颜色：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''re using `text-transform: uppercase`. This is going to make sure that we
    could type lowercase letters for the navigation items in the HTML, and it would
    transform each one of those letters into uppercase characters. This way, if we
    decide later that the regular case is better than all uppercase, then all we would
    need to do is change it in one place, instead of updating the entire HTML:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用了`text-transform: uppercase`。这将确保我们可以在HTML中为导航项输入小写字母，并将每个字母转换为大写字符。这样，如果我们以后决定普通情况比全部大写更好，那么我们只需要在一个地方进行更改，而不是更新整个HTML：'
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we have a font size:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个字体大小：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We also align the text to the center:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将文本对齐到中心：
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We add a transition as well, as discussed in the previous chapter. This is
    to transition the background color in:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也添加了一个过渡，就像在上一章讨论的那样。这是为了过渡背景颜色：
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is what we get when we save the changes and refresh the browser:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们保存更改并刷新浏览器时得到的结果：
- en: '![](img/00176.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: 'We have some problems. One problem is that our anchor tags are inline elements,
    so what''s happening is they''re not actually behaving like block-level elements.
    Therefore, one of the things we can do is float them to the left as well. For
    this, add a `float: left` property to the `.primary-nav > li > a` ruleset:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '我们有一些问题。一个问题是我们的锚点标签是内联元素，所以问题是它们实际上并不像块级元素一样行为。因此，我们可以做的一件事是将它们也浮动到左侧。为此，在`.primary-nav
    > li > a`规则集中添加`float: left`属性：'
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Following is the output of preceding code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码的输出：
- en: '![](img/00177.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00177.jpeg)'
- en: This looks a lot better.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来好多了。
- en: 'Now let''s target the focus and hover states. Underneath our last ruleset,
    we''ll add another ruleset:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来定位焦点和悬停状态。在我们的最后一个规则集下面，我们将添加另一个规则集：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is going to target not only the focus and hover states, but also the class
    of `active`. This isn''t a "state" necessarily, as you would think of a focus
    or hover state. This is a class that we''re going to apply to elements to signify
    that you''re on that page. It''s going to be the same as the hover state. Moving
    on, we apply the color red to the background and the color white to the text.
    Now, when we refresh it, we get the hover and focus states, which is good:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将不仅针对焦点和悬停状态，还将针对`active`类。这不是一个“状态”，就像焦点或悬停状态一样。这是一个我们将应用于元素的类，表示您正在访问该页面。它将与悬停状态相同。接下来，我们将背景颜色设置为红色，文本颜色设置为白色。现在，当我们刷新时，我们得到了悬停和焦点状态，这很好：
- en: '![](img/00178.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00178.jpeg)'
- en: 'The only thing we have to do now is figure out the position of the nav bar
    and push the whole thing to the right, because right now it''s sitting underneath
    our image. So let''s float the entire nav bar to the right. Let''s do that:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在唯一需要做的就是弄清楚导航栏的位置，并将整个东西推到右边，因为现在它正好位于我们的图像下方。所以让我们将整个导航栏浮动到右侧。让我们这样做：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Following is the output of preceding code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码的输出：
- en: '![](img/00179.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00179.jpeg)'
- en: As you can see, this works out fairly well. We have the entire nav sitting below
    the shark. We could fix this by floating the shark to the left, but a few nice
    features can be achieved if we use absolute positioning, which is what we'll get
    to a little later in this chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这效果相当不错。整个导航都位于鲨鱼下方。我们可以通过将鲨鱼浮动到左侧来解决这个问题，但是如果我们使用绝对定位，我们还可以实现一些不错的功能，这是我们稍后在本章中将要介绍的。
- en: Finally though, let's tidy up this nav just a little bit more by adding a white
    background and restricting our image to just `160px` of width.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们通过添加白色背景并将我们的图像限制为`160px`的宽度来稍微整理一下这个导航。
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s the site without the white background and our shark is quite large:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是没有白色背景的网站，我们的鲨鱼相当大：
- en: '![](img/00179.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00179.jpeg)'
- en: 'When we refresh the site, though, we will have the white background we want
    and a smaller shark:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们刷新网站时，我们将得到我们想要的白色背景和一个较小的鲨鱼：
- en: '![](img/00180.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00180.jpeg)'
- en: Okay, we've built the HTML and most of the CSS for the first layer of the nav.
    Next, you'll learn how pseudo - classes can help with certain issues in our navigation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们已经为导航的第一层构建了HTML和大部分CSS。接下来，您将学习如何使用伪类来解决导航中的某些问题。
- en: Using pseudo classes
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用伪类
- en: You have already learned how to add classes to elements to apply special styles
    to them. You are always required to go into the HTML to add the class. Sometimes
    this can be a problem. For instance, when the content is generated dynamically
    through a content management system, you may not be able to edit any element because
    it may not exist in a static HTML file. Enter pseudo classes. Pseudo classes allow
    you to target elements based on their position in the HTML, and based on other
    qualities. In this section, we'll look at the `first-child` pseudo class that
    can help us style our navigation. We'll then look at several other pseudo classes,
    for example, `last-child` and `nth-child`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何向元素添加类以应用特殊样式。您总是需要进入HTML添加类。有时这可能会成为一个问题。例如，当内容通过内容管理系统动态生成时，您可能无法编辑任何元素，因为它可能不存在于静态HTML文件中。这时就需要使用伪类。伪类允许您根据元素在HTML中的位置和其他特性来定位元素。在本节中，我们将看一下`first-child`伪类，它可以帮助我们样式化我们的导航。然后我们将看一下其他几个伪类，例如`last-child`和`nth-child`。
- en: 'Ultimately, I don''t want the home menu, which is the first menu, to have `border-left`
    because it''s the first element. So, I want to get rid of it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我不希望主菜单，也就是第一个菜单，有`border-left`，因为它是第一个元素。所以，我想摆脱它：
- en: '![](img/00181.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: The first child
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个子元素
- en: 'In order to target the first element in our CSS, we''ll add `first-child` after
    the anchor element. So we''ll copy this selector and paste it underneath itself:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的CSS中定位第一个元素，我们将在锚点元素后添加`first-child`。所以我们将复制这个选择器，并将其粘贴在自身下面：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We''ll then add `:first-child` to the selector, delete the properties, and
    add `border-left` with the value set as `none`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将`:first-child`添加到选择器中，删除属性，并添加`border-left`，值设置为`none`：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save this, go to the site, and refresh the page:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个，转到网站，然后刷新页面：
- en: '![](img/00182.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00182.jpeg)'
- en: The result isn't what we might have expected. We actually removed the left border
    from every item in our navigation. This is because, firstly, all the anchors are
    children inside of their immediate parent, `li`. So we should actually go about
    this differently.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 结果并不是我们可能期望的。实际上，我们从导航中删除了每个项目的左边框。这是因为首先，所有锚点都是它们直接父元素`li`的子元素。所以我们实际上应该以不同的方式处理这个问题。
- en: 'Taking a quick look at `nav` in our HTML. The anchor is the first element that''s
    inside of `li`; there is no second element. So, if we want to target the first
    element inside of `ul`, it wouldn''t be the anchor, but the list item, which is
    `<li>`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看我们HTML中的`nav`。锚点是`li`内的第一个元素；没有第二个元素。所以，如果我们想要定位`ul`内的第一个元素，它不会是锚点，而是列表项，即`<li>`：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In our CSS, we''re going to actually move the pseudo class from here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CSS中，我们实际上要将伪类从这里移动：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We''ll remove it from the `a` and attach it to the `li`, as demonstrated here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将它从`a`中移除，并将它附加到`li`，如下所示：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We now have our `border-left` property on all of the nav elements, except for
    the first one:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的导航元素上都有`border-left`属性，除了第一个：
- en: '![](img/00183.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: 'One thing about `first-child` is that it has to be the first element that appears
    inside of the parent. So even though we targeted `li` specifically as the first
    child of the primary nav, if we had something else inside of `ul` before the first
    `li` tag, then our selector wouldn''t have worked. Let''s take a look at this.
    Let''s add an `h2` as a child of the `ul` element:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`first-child`的一件事是，它必须是出现在父元素内的第一个元素。所以即使我们特别将`li`作为主导航的第一个子元素，如果我们在第一个`li`标签之前在`ul`内有其他东西，那么我们的选择器就不起作用了。让我们看看这个。让我们在`ul`元素的子元素中添加一个`h2`：
- en: '[PRE28]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is not valid HTML, but for fun, note that we get our left-hand side border
    back on the first `li` tag:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是有效的HTML，但是为了好玩，注意我们在第一个`li`标签上重新获得了左侧边框：
- en: '![](img/00184.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: That's because it's no longer the first child. The `h2` is now the first child.
    This is a common mistake when working with the `first-child` pseudo class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为它不再是第一个孩子。`h2`现在是第一个孩子。这是在使用`first-child`伪类时的一个常见错误。
- en: The last child
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后一个孩子
- en: 'Now let''s look at the `last-child` pseudo class. Let''s create a new selector:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`last-child`伪类。让我们创建一个新的选择器：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We''ll make the example a little more obvious by setting the background color
    as bright pink and the color of the text as white:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将背景颜色设置为亮粉色，文本颜色设置为白色，使示例更加明显：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now our last child gets those properties applied to it:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的最后一个孩子也应用了这些属性：
- en: '![](img/00185.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: I prefer `first-child` because it has deeper support going back to IE7, whereas
    `last-child` support starts at IE9.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢`first-child`，因为它在IE7及更早版本中有更深的支持，而`last-child`的支持从IE9开始。
- en: nth-child pseudo class
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nth-child伪类
- en: 'The `nth-child` class allows us to pick any occurrence of an element within
    its parent. Let''s get into the CSS and change `last-child` to `nth-child(2)`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`nth-child`类允许我们选择其父元素内的任何元素。让我们进入CSS并将`last-child`更改为`nth-child(2)`：'
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Save the code and refresh the site:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 保存代码并刷新网站：
- en: '![](img/00186.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: So, on our site, the pink color should actually be applied to `h2` and HOME
    because the `h2` is the first element inside the `ul` and HOME is the second.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在我们的网站上，粉色实际上应该应用于`h2`和HOME，因为`h2`是`ul`内的第一个元素，而HOME是第二个。
- en: 'If you are a JavaScript person, `nth-child` is not zero indexed, so the first
    one is not zero: The first one is one.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个JavaScript人，`nth-child`不是从零开始的，所以第一个不是零：第一个是一。
- en: 'With this in mind, let''s set `nth-child` to `1`: which is essentially the
    same as using `first-child`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们将`nth-child`设置为`1`：这本质上与使用`first-child`相同：
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s get rid of this `h2` tag from our HTML real quick:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速从我们的HTML中去掉这个`h2`标签：
- en: '[PRE33]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We now see that the pink color stays on the first nav item:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到粉色保留在第一个导航项上：
- en: '![](img/00187.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00187.jpeg)'
- en: 'You can also use the keywords `odd` and `even`. So if I were to throw `even`
    or `odd` in there, you''ll get the numbers two and four with those properties
    applied:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用关键字`odd`和`even`。所以如果我在那里加入`even`或`odd`，你会得到应用这些属性的数字二和四：
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Refresh the site and you will get the following result:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新网站，你会得到以下结果：
- en: '![](img/00188.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00188.jpeg)'
- en: This is an excellent technique for zebra striping a table or a list for added
    readability.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的技术，可以为表格或列表添加斑马条纹，以增加可读性。
- en: nth-of-type pseudo class
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: nth-of-type伪类
- en: 'There is also `nth-of-type`. Add `nth-of-type(2)` to the `primary-nav` selector
    in our CSS:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`nth-of-type`。在我们的CSS中，将`nth-of-type(2)`添加到`primary-nav`选择器中：
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The difference between `nth-of-type` and `nth-child` is that `nth-of-type`
    is pre-qualified to only look for an element that it''s attached to. For example,
    in our case we''ve attached `nth-of-type` to an `li`, so it only matches `li`
    tags:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`nth-of-type`和`nth-child`之间的区别在于，`nth-of-type`预先限定只查找它附加的元素。例如，在我们的例子中，我们已经将`nth-of-type`附加到了一个`li`，所以它只匹配`li`标签：'
- en: '[PRE36]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s see this in action. Let''s add back our `h2` tag:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个实例。让我们重新添加我们的`h2`标签：
- en: '[PRE37]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'It''s not going to refer to just any child inside of the `ul`. We now see that
    the second `li` tag has those properties applied:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会只是指`ul`内的任何孩子。我们现在看到第二个`li`标签应用了这些属性：
- en: '![](img/00189.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00189.jpeg)'
- en: So `nth-of-type` is more precise than `nth-child`. Browser support for `nth-child`
    and `nth-of-type` starts at IE9 and later versions, as well as other major browsers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`nth-of-type`比`nth-child`更精确。`nth-child`和`nth-of-type`的浏览器支持从IE9和更高版本开始，以及其他主要浏览器。
- en: In this section, we've learned about a few pseudo classes that allow you to
    target elements based on their order in the HTML. However, these aren't the first
    pseudo classes we've used so far. I'm mainly referring to state-based pseudo classes,
    such as `hover` and `focus`, which we've been using plenty up to this point. In
    the next section, we'll switch gears and discuss CSS positioning to further advance
    our navigation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了一些伪类，可以根据它们在HTML中的顺序来定位元素。然而，这些并不是我们迄今为止使用的第一个伪类。我主要指的是基于状态的伪类，比如`hover`和`focus`，这些我们迄今为止已经使用了很多。在下一节中，我们将转变方向，讨论CSS定位以进一步提升我们的导航。
- en: Absolute positioning
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绝对定位
- en: In this section, we're going to start working on the different CSS positioning
    properties, as well as their complementary offset properties. First, we'll absolutely
    position the shark logo and follow that up by using fixed positioning for the
    entire navigation bar.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将开始研究不同的CSS定位属性，以及它们的补充偏移属性。首先，我们将绝对定位鲨鱼标志，然后使用固定定位来处理整个导航栏。
- en: Absolutely positioning the shark
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绝对定位鲨鱼
- en: 'We''ve got our menu in place, but the shark clearly sits on top of the nav.
    We need it to be aligned horizontally, more or less. We need to fix the shark
    so it overhangs the nav bar as well. We''ll also want the entire nav to remain
    stuck to the top of the browser window:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经把菜单放好了，但是鲨鱼明显是在导航栏的上面。我们需要它水平对齐，或多或少。我们需要修复鲨鱼，使其悬挂在导航栏上方。我们还希望整个导航栏保持固定在浏览器窗口的顶部：
- en: '![](img/00190.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00190.jpeg)'
- en: 'So let''s go to our CSS and add `position: absolute` to the `nav figure` selector.
    Create a new selector underneath the `nav` ruleset. We''ll call it `nav figure`
    and give it a `position` property with the value of `absolute`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '所以让我们去我们的CSS中，给`nav figure`选择器添加`position: absolute`。在`nav`规则集下面创建一个新的选择器。我们将其称为`nav
    figure`，并给它一个`position`属性，值为`absolute`：'
- en: '[PRE38]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Right away, that looks a lot better:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 立刻看起来好多了：
- en: '![](img/00191.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00191.jpeg)'
- en: Let's talk about what we've just done. All elements, by default, have a `static`
    position. Static elements adhere to the *normal flow*, meaning block-level elements
    simply are stacked on top of each other as long as they're not floated. Changing
    `position` to `absolute` takes it out of the normal flow. Its block qualities
    disappear and other elements aren't affected by it at all. It can be thought of
    as something that exists on another plane or level. Once positioned absolutely,
    you can start using offset properties, such as `top`, `right`, `bottom`, and `left`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈我们刚刚做的事情。所有元素，默认情况下都是`static`定位。静态元素遵循*正常流*，这意味着块级元素只是简单地堆叠在一起，只要它们没有浮动。将`position`改为`absolute`会将其从正常流中移出。它的块级特性消失了，其他元素对它没有任何影响。它可以被视为存在于另一个平面或层次上。一旦绝对定位，你就可以开始使用偏移属性，比如`top`、`right`、`bottom`和`left`。
- en: 'Let''s do that. Add two more properties to the `nav figure` element, namely
    `top` and `left`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们这样做。给`nav figure`元素添加两个属性，即`top`和`left`：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'These are going to function a lot like `margin-top` and `margin-left`. If you
    view the results, you should see that the shark is `50px` from the left and `-50px`
    from the top:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将会像`margin-top`和`margin-left`一样起作用。如果你查看结果，你应该会看到鲨鱼距离左边有`50px`，距离顶部有`-50px`：
- en: '![](img/00192.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00192.jpeg)'
- en: 'So what happens when we switch the `top` property with `bottom` and the `left`
    property with `right`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 那么当我们将`top`属性与`bottom`交换，将`left`属性与`right`交换时会发生什么：
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: It actually moves the shark all the way to the bottom and the right of the page!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上将鲨鱼移动到了页面的底部和右侧！
- en: '![](img/00193.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00193.jpeg)'
- en: 'This image makes it a lot clearer how offset properties work combined with
    absolute positioning. The offset properties are based on the browser viewport
    now, but typically we don''t want to do this; instead, we want to base the absolute
    position off of its parent element by setting the parent element to `position:
    relative`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '这张图片更清楚地展示了偏移属性与绝对定位的结合工作原理。偏移属性现在是基于浏览器视口的，但通常我们不想这样做；相反，我们希望通过将父元素设置为`position:
    relative`来基于父元素定位。'
- en: 'The parent element of the image is the `nav` selector, so let''s set that to
    relative:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图片的父元素是`nav`选择器，所以让我们将其设置为相对定位：
- en: '[PRE41]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can see that even now we''re `50px` from the right because the nav extends
    all the way to the right edge, and we''re `-50px` from the bottom of the nav because
    the shark is extending below the nav bar there:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，即使现在我们距离右边有`50px`，因为导航栏一直延伸到右边缘，而我们距离导航栏底部有`-50px`，因为鲨鱼在那里延伸到导航栏下方：
- en: '![](img/00194.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00194.jpeg)'
- en: 'The `position: relative` declaration establishes itself as a coordinate system
    for children elements with `position: absolute`.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`position: relative`声明为子元素建立了一个坐标系，具有`position: absolute`的子元素。'
- en: 'Let''s move the shark back to where it is supposed to be:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把鲨鱼移回它应该在的位置：
- en: '[PRE42]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The shark overlaps our nav bar nicely. It''s now sitting on top of our headline,
    which is kind of funny, but we''ll come back to this in a moment:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 鲨鱼很好地重叠在我们的导航栏上。它现在坐在我们的标题上面，有点好笑，但我们马上就会回到这个问题：
- en: '![](img/00195.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00195.jpeg)'
- en: 'First, let''s make the entire nav bar stick to the top by adding `position:
    fixed`.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，通过添加`position: fixed`来使整个导航栏固定在顶部。'
- en: Using fixed positioning for the nav bar
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用固定定位来处理导航栏
- en: 'Let''s change the nav bar''s `position` property from `absolute` to `fixed`
    and take a look at the result:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将导航栏的`position`属性从`absolute`改为`fixed`，看看结果如何：
- en: '[PRE43]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Following is the output of the preceding code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码的输出：
- en: '![](img/00196.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00196.jpeg)'
- en: 'The `fixed` value, such as `relative`, still acts like a coordinate system
    for any absolutely positioned child or descendant elements, but it also has some
    superpowers. *Right now, those superpowers are totally breaking our nav.* Here''s
    the issue: `position: relative` still keeps its block-element qualities, while
    `position: fixed` loses a lot of those block qualities when it''s removed from
    the *normal flow*, and the nav now looks kind of funny: it''s not stretching to
    the full width of the browser window. Let''s fix this with some offset properties.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`fixed`值，例如`relative`，仍然像坐标系一样，用于任何绝对定位的子元素或后代元素，但它也有一些超能力。*现在，这些超能力完全破坏了我们的导航。*问题在于：`position:
    relative`仍然保留其块元素的特性，而`position: fixed`在从*正常流*中移除时失去了许多这些块特性，导航现在看起来有点滑稽：它没有延伸到浏览器窗口的全宽。让我们通过一些偏移属性来修复这个问题。'
- en: 'We can actually stretch the nav by saying `left: 0` and `right: 0`. Let''s
    also add `top: 0` to make sure there''s no doubt it''ll be positioned at the very
    top:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '我们实际上可以通过设置 `left: 0` 和 `right: 0` 来拉伸导航。让我们还添加 `top: 0` 来确保它被定位在顶部：'
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'That looks better. And, because the nav''s position is set to fixed, as we
    scroll down the page everything inside the nav is stuck to the top and everything
    else moves underneath it:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来更好。而且，因为导航的位置设置为固定，当我们滚动页面时，导航内的所有内容都固定在顶部，其他所有内容都在其下面移动：
- en: '![](img/00197.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00197.jpeg)'
- en: 'If you scroll all the way to the top though, you''ll see the site title now
    sits behind the nav. This is because the nav is no longer part of the normal flow:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您滚动到顶部，您会发现网站标题现在位于导航栏后面。这是因为导航不再是正常流的一部分：
- en: '![](img/00198.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00198.jpeg)'
- en: 'Let''s fix this by adding `margin-top` to `intro-content` and our `go-premium`
    button. We''ll go to our `go-premium` ruleset and add a value of `150px` to `margin-top`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向`intro-content`和我们的`go-premium`按钮添加`margin-top`来修复这个问题。我们将转到我们的`go-premium`规则集，并将`margin-top`的值添加为`150px`：
- en: '[PRE45]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We''ll also go to our `intro-content` ruleset and add a `margin-top` of `125px`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将转到我们的`intro-content`规则集，并添加`margin-top`为`125px`：
- en: '[PRE46]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now it looks very good:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来非常好：
- en: '![](img/00199.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00199.jpeg)'
- en: So you've learned about relative, absolute, and fixed positioning. You also
    learned that the default position of every element is static. `relative` position
    creates a coordinate system for children. `absolute` position allows you to move
    an element into its own universe and position it aggressively, based on the closest
    relatively positioned parent element. `fixed` position will make the element sticky
    based on the browser's viewport, and not based on any relatively positioned elements.
    Both `absolute` and `fixed` elements will serve as coordinate systems, relative
    to other child elements. In the next section, we'll look at building the drop-down
    menu, where we'll again use absolute positioning.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您已经了解了相对、绝对和固定定位。您还了解到每个元素的默认位置是静态的。`relative`位置为子元素创建了一个坐标系。`absolute`位置允许您将元素移动到自己的宇宙中，并根据最近的相对定位的父元素进行积极定位。`fixed`位置将使元素基于浏览器的视口而粘性，而不是基于任何相对定位的元素。`absolute`和`fixed`元素都将作为坐标系，相对于其他子元素。在下一节中，我们将看看如何构建下拉菜单，其中我们将再次使用绝对定位。
- en: Building the drop-down menu
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建下拉菜单
- en: Let's create a pure CSS drop-down menu! We'll start by adding the markup and
    follow it up by adding the CSS.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个纯CSS下拉菜单！我们将首先添加标记，然后添加CSS。
- en: Creating the basic HTML list
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的HTML列表
- en: 'Typically, when building a component such as a drop-down menu that''s usually
    hidden from view, I build it as if it were not hidden. Then, once it''s complete
    and fully styled, I create the drop-down behavior. That''s what we''ll do here
    as well. So let''s create the HTML within our existing `index.html` document.
    We''ll go to the unordered list of our nav bar, as shown here:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在构建诸如通常隐藏在视图中的下拉菜单之类的组件时，我会将其构建得好像它没有被隐藏一样。然后，一旦完成并完全样式化，我会创建下拉行为。这也是我们在这里要做的。所以让我们在我们现有的`index.html`文档中创建HTML。我们将转到我们的导航栏的无序列表，如下所示：
- en: '[PRE47]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'It''s best practice to build menus inside of an unordered list, where each
    menu item is an anchor inside of a list item. For drop-down menus, we''ll need
    to nest another `ul` tag inside of the `li` with the dropdown. We''ll nest it
    here:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是在无序列表内构建菜单，其中每个菜单项都是列表项内的锚点。对于下拉菜单，我们需要在具有下拉菜单的`li`内部嵌套另一个`ul`标签。我们将在这里嵌套它：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'But first, we''ll add a special class called `has-submenu` to any nav item
    that will have a dropdown:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，我们将为任何将有下拉菜单的导航项添加一个特殊的类`has-submenu`：
- en: '[PRE49]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This way, with the `has-submenu` class, we can target these `li` tags and their
    descendants specifically in the CSS. Inside of this movies `li` tag, we''ll create
    a new `ul` with `li` tags, and inside these `li` tags, we''ll put in an anchor
    tag. Here''s the markup for the dropdown menu:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，通过`has-submenu`类，我们可以在CSS中专门针对这些`li`标签及其后代。在这个电影`li`标签内部，我们将创建一个新的带有`li`标签的`ul`，并在这些`li`标签内部放入一个锚标签。以下是下拉菜单的标记：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'There are three submenus in the dropdown:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单中有三个子菜单：
- en: '![](img/00200.jpeg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00200.jpeg)'
- en: We just need to style this to make it look like our final menu.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要对其进行样式化，使其看起来像我们最终的菜单。
- en: Styling the dropdown
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化下拉菜单
- en: 'We need to style the dropdown appropriately to fit with our existing menu.
    This is the effect we''re going to aim for:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要适当地样式化下拉菜单，以适应我们现有的菜单。这是我们要达到的效果：
- en: '![](img/00201.jpeg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00201.jpeg)'
- en: 'I want to separate the drop-down menu''s styling from the main nav''s styling.
    We''ll do this by creating this big `Drop Down Menu` comment we have here underneath
    the main nav:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要将下拉菜单的样式与主导航的样式分开。我们将通过在主导航下面创建这个大的`下拉菜单`注释来实现这一点：
- en: '[PRE51]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The dropdown can have its own little section here. So let''s start by targeting
    only the `ul` inside of `has-sub menu`. In order to have the submenu placed outside
    of the white nav bar, let''s position it absolutely and `70px` from the `top`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单可以在这里有自己的小节。所以让我们首先只针对`has-sub menu`内部的`ul`。为了使子菜单放置在白色导航栏之外，让我们将其绝对定位并且距离`top`为`70px`：
- en: '[PRE52]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This gives us the following effect:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了以下效果：
- en: '![](img/00202.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00202.jpeg)'
- en: Now all we need to do is style the drop-down menu so it looks like it's supposed
    to. Note how, on our site, none of the `li` tags are floated to the left like
    our main nav. This is because, as you'll remember, we used a type of descendant
    selector that only targeted direct children `li` of `primary-nav`. We don't need
    to cancel out those styles from before. Lets' go back though and see what would
    happen if we didn't do that by changing those selectors.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要样式化下拉菜单，使其看起来像它应该的样子。请注意，在我们的网站上，没有一个`li`标签像我们的主导航一样向左浮动。这是因为，正如你记得的那样，我们使用了一种后代选择器，只针对`primary-nav`的直接子`li`。我们不需要取消之前的样式。让我们回过头来看看，如果我们不这样做会发生什么。
- en: 'Here is where are child combinator selectors are:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这是子组合选择器的位置：
- en: '[PRE53]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'For a quick test, let''s remove the greater than symbols from both selectors:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行快速测试，让我们从两个选择器中删除大于号符号：
- en: '[PRE54]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Here''s what that looks like:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的样子：
- en: '![](img/00203.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00203.jpeg)'
- en: 'Note that all of the styles that we have in the top menu are repeated in the
    submenu. That''s kind of what we want to avoid, because we don''t want to write
    additional CSS that cancels out the whole menu floating left and having borders
    where we don''t need them. So let''s add those greater than signs back to our
    `.primary-nav` selectors:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在顶部菜单中的所有样式都在子菜单中重复。这是我们想要避免的，因为我们不希望编写额外的CSS来取消整个菜单向左浮动并在不需要的地方添加边框。因此，让我们将那些大于号符号添加回我们的`.primary-nav`选择器中：
- en: '[PRE55]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Alright, let''s add the white background and the borders to `.has-submenu`.
    Where changing the `background-color` and adding borders on the bottom, left,
    and right. We don''t want a border at the top, so instead of using the `border`
    shorthand, we will be using `border-bottom`, `border-left`, and `border-right`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们给`.has-submenu`添加白色背景和边框。在底部、左侧和右侧添加边框。我们不希望顶部有边框，所以我们将使用`border-bottom`、`border-left`和`border-right`，而不是使用`border`的简写：
- en: '[PRE56]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now its starting to resemble a drop-down menu:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始类似下拉菜单：
- en: '![](img/00204.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00204.jpeg)'
- en: 'One of the obvious problems is the width. We need to give it a `width` of `150px`
    to match the width of its parent element. Also, let''s add `border-radius` to
    the `bottom-left` and `bottom-right` corners:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个明显的问题是宽度。我们需要给它一个`width`为`150px`，以匹配其父元素的宽度。另外，让我们给`bottom-left`和`bottom-right`角添加`border-radius`：
- en: '[PRE57]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note the shorthand for `border-radius`. It's very similar to the margin and
    padding shorthand. The first value is for the top-left corner, then it goes clockwise
    from there. So the second value is for the top-right corner, the third is for
    bottom-right, and the fourth for bottom-left.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`border-radius`的简写。它与边距和填充的简写非常相似。第一个值是左上角，然后顺时针方向。因此，第二个值是右上角，第三个是右下角，第四个是左下角。
- en: 'Now we have the `width` and `border-radius` we need:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了所需的`width`和`border-radius`：
- en: '![](img/00205.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00205.jpeg)'
- en: 'One weird thing is that it looks like the text of our nav items isn''t centrally
    aligned. The text of the anchor elements is aligned in the center. You can see
    this if you inspect this element by right-clicking on the `a` tags text and selecting
    "inspect":'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件奇怪的事情是，我们的导航项的文本看起来并不是居中对齐的。锚元素的文本是居中对齐的。如果你右键单击`a`标签的文本，然后选择“检查”，你就可以看到这一点：
- en: '![](img/00206.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00206.jpeg)'
- en: 'The problem is that `li` tags take the full width, whereas `a` tags are inline
    elements and only take up as much width as they need. Let''s add a new selector:
    `.has-submenu a` with `display: block` and `padding` of `20px` for the top and
    bottom:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '问题在于`li`标签占据了整个宽度，而`a`标签是内联元素，只占据它们需要的宽度。让我们添加一个新的选择器：`.has-submenu a`，使用`display:
    block`和`padding`，上下各为`20px`：'
- en: '[PRE58]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The dropdown looks much better:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单看起来好多了：
- en: '![](img/00207.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00207.jpeg)'
- en: 'Our hover states carry over from our main nav, which is good. The only problem
    is that our last hover state--Open Water--is hiding the rounded corners:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的悬停状态从主导航中继承过来，这很好。唯一的问题是我们最后的悬停状态——Open Water——隐藏了圆角：
- en: '![](img/00208.jpeg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00208.jpeg)'
- en: Fixing the hover state
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复悬停状态
- en: 'There are two ways in which we can fix the rounded corners getting lost when
    we hover over the **Open Water** submenu item. The first is using the `last-child`
    pseudo class, which you learned about a couple of sections earlier, to target
    the `a` selector and the last `li` selector of the submenu. This should work just
    fine, but if we want to get even deeper browser support, we need to use a different
    technique that uses `overflow: hidden` on the `ul` element—the parent. I tend
    to like the `overflow: hidden` approach here because it''s minimal and has deeper
    browser support:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '有两种方法可以解决悬停在**Open Water**子菜单项上时丢失圆角的问题。第一种方法是使用`last-child`伪类，你在前面的几节中学到了，来定位`a`选择器和子菜单的最后一个`li`选择器。这应该可以正常工作，但如果我们想要更深层次的浏览器支持，我们需要使用另一种技术，在`ul`元素——父元素上使用`overflow:
    hidden`。我倾向于在这里使用`overflow: hidden`的方法，因为它很简洁，并且具有更深层次的浏览器支持。'
- en: '[PRE59]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'If we look at the browser now, the problem is fixed:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看浏览器，问题已经解决了：
- en: '![](img/00209.jpeg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00209.jpeg)'
- en: Now we're left with the static menu. It's always open. We need to create a drop-down
    behavior to appear when you hover your mouse over the MOVIES navigation item.
    One way to do this is to hide the drop-down menu by default and then show it using
    the `hover` and `focus` pseudo classes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只剩下静态菜单。它总是打开的。我们需要创建一个下拉行为，当你将鼠标悬停在MOVIES导航项上时，它会出现。一种方法是默认隐藏下拉菜单，然后使用`hover`和`focus`伪类来显示它。
- en: 'Hide the drop-down menu by default using `display: none`. Let''s start by hiding
    the entire `ul` tag using `display: none`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下使用`display: none`隐藏下拉菜单。让我们首先使用`display: none`隐藏整个`ul`标签：'
- en: '[PRE60]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We can target `ul` only when `has-submenu` is hovered by creating a new selector,
    `.has-submenu:hover ul`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个新的选择器`.has-submenu:hover ul`，只在`has-submenu`悬停时才针对`ul`进行定位：
- en: '[PRE61]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'As per this ruleset, whenever you hover over the Movies menu, the `ul` element
    that sits inside of it is going to be displayed. Then, because we added `display:
    none` to the previous selector—the nonhover state, by default, that `ul` tag,
    which is a drop-down menu, won''t be displayed. There is no submenu available
    by default now:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '根据这个规则集，当你悬停在电影菜单上时，里面的`ul`元素将被显示出来。然后，因为我们在之前的选择器中添加了`display: none`——非悬停状态，默认情况下，`ul`标签，也就是下拉菜单，不会被显示出来。现在默认情况下没有子菜单可用：'
- en: '![](img/00210.jpeg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00210.jpeg)'
- en: 'Now when we hover over the Movies menu, the submenu appears:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们悬停在电影菜单上时，子菜单就会出现：
- en: '![](img/00211.jpeg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00211.jpeg)'
- en: 'One thing I should also mention is that `display: none` has accessibility issues,
    as screen readers are unable to announce content with `display: none`.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '我还要提到的一件事是，`display: none`存在无法让屏幕阅读器宣布内容的问题。'
- en: 'There is an alternative as well: use an **off-screen hidden technique**, which
    involves a little extra work, but is well worth it.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种选择：使用**屏幕外隐藏技术**，这需要额外的工作，但是非常值得。
- en: Hiding the drop-down menu using the off-screen hidden technique
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用屏幕外隐藏技术隐藏下拉菜单
- en: 'The basic idea is to absolutely position an element far, far away from the
    visible screen so that it isn''t visible, but screen readers can still announce
    it. There''s a lot more to learn about accessibility. I recommend that you start
    by checking out the article at [https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/](https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/)
    for more information, at least on how to use off-screen hidden techniques, and
    then go from there with regard to accessibility:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是绝对定位一个元素，远离可见屏幕，这样它就不可见了，但屏幕阅读器仍然可以宣布它。关于无障碍还有很多要学习的地方。我建议你首先查看这篇文章[https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/](https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/)，至少了解一下如何使用屏幕外隐藏技术，然后再从无障碍方面继续学习：
- en: '![](img/00212.jpeg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00212.jpeg)'
- en: 'Web accessibility is a topic with so much depth that it deserves a book of
    its own. So I cannot do it thorough justice here. Although, instead of using `display:
    none` to hide our drop-down menu, we can replace it with something similar to
    the following to make it more accessible:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'Web无障碍是一个非常深入的话题，它值得有一本专门的书来讲述。所以我在这里无法全面地讲述它。不过，我们可以用类似下面的方法来替代使用`display:
    none`来隐藏我们的下拉菜单，以使其更具有可访问性：'
- en: '[PRE62]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This will *hide* the content from sighted users, but still announce the content
    for screen reader users.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这将*隐藏*内容，对于有视力的用户来说，但对于屏幕阅读器用户来说，仍然会宣布内容。
- en: We have put the drop-down menu to bed without much of a fuss. It worked out
    perfectly. Your first attempt at creating a drop-down menu may not always go this
    smoothly, but using these tips, you can avoid some of the problems you might encounter
    when creating it.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经很顺利地完成了下拉菜单的设置。这次效果非常完美。你第一次尝试创建下拉菜单可能不会这么顺利，但使用这些技巧，你可以避免一些可能遇到的问题。
- en: 'My two biggest tips are the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我最大的两个建议是：
- en: Build the drop-down menu initially as if it will always be visible, then hide
    it after you have styled it up and it looks good.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先构建下拉菜单，就好像它将一直可见，然后在样式设置好并且看起来不错之后隐藏它。
- en: Since the recommended approach is to use an unordered list inside an unordered
    list, it's worth carefully setting up your rules sets to avoid confusion. For
    instance, one ruleset for styles that apply to both the parent `ul` and the child
    `ul` (that is, `ul li`); another ruleset that only applies to the parent `ul`
    and `li` selector using the child combinator (that is, `ul > li`); and finally,
    a ruleset that applies only to the child `ul` (that is, `.has-submenu ul`). This
    way, you won't have to create a bunch of potentially confusing override styles
    for the child `ul` later.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于推荐的方法是在无序列表中使用无序列表，因此值得仔细设置你的规则集以避免混淆。例如，一个适用于父`ul`和子`ul`（即`ul li`）的样式规则集；另一个只适用于父`ul`和`li`选择器，使用子组合器（即`ul
    > li`）；最后，一个只适用于子`ul`的规则集（即`.has-submenu ul`）。这样，你就不必为子`ul`创建一堆可能令人困惑的覆盖样式。
- en: The next piece of the navigation requires us to actually create the drop-down
    effect; we will use a CSS animation to achieve this.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 导航的下一个部分需要我们实际创建下拉效果；我们将使用CSS动画来实现这一点。
- en: CSS animations (part 1)
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画（第一部分）
- en: 'Our main navigation is now coming together, and our drop-down functionality
    is almost complete. One of the last finishing touches required for the dropdown
    is the CSS animation, to allow the drop-down menu to animate downward smoothly.
    Animations are a lot of fun, and modern browsers, including Chrome, Firefox, Opera,
    and browsers starting with IE10, support them. IE9 will still show a drop-down
    menu, but it will simply appear/disappear. An animation is very similar to a transition,
    but instead of simply animating a state change, we can animate static elements
    and use different animation properties and key frames to control the animation.
    We''ll get more into this later. So here''s what we''re going to do in this section:
    We''ll define the `animation-name`, `animation-duration`, and `animation-timing-function`
    inside the selector of the element we want to animate. After that, we''ll go ahead
    and define the key frames of what we''re going to animate.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主导航现在正在成形，我们的下拉功能几乎完成了。下拉菜单的最后一点润色是CSS动画，以使下拉菜单向下平滑动画。动画非常有趣，现代浏览器，包括Chrome，Firefox，Opera和从IE10开始的浏览器都支持它们。IE9仍然会显示下拉菜单，但它只会简单地出现/消失。动画与过渡非常相似，但我们可以对静态元素进行动画处理，并使用不同的动画属性和关键帧来控制动画。我们稍后会更深入地讨论这个问题。所以在这一部分，我们要做的是：我们将在要进行动画处理的元素的选择器中定义`animation-name`、`animation-duration`和`animation-timing-function`。之后，我们将继续定义我们要进行动画处理的关键帧。
- en: Defining the animation name, duration, and timing function
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义动画名称、持续时间和时间函数
- en: 'Let''s recall our dropdown menu''s CSS:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的下拉菜单的CSS：
- en: '[PRE63]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Let''s target the `hover` state of `has-submenu` as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以如下方式定位`has-submenu`的`hover`状态：
- en: '[PRE64]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'For now, we''ll use use the nonprefixed/W3C standard property names and go
    back and add the needed prefixes at the end. So, to do an animation, we use `animation-name`
    and use `slideDown` as the animation name:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用非前缀的/W3C标准属性名称，并在最后添加所需的前缀。因此，要进行动画，我们使用`animation-name`，并将`slideDown`作为动画名称：
- en: '[PRE65]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'I can name this animation anything I want, provided I don''t use any spaces.
    Like class names, I can''t begin it with a number either. Also, the keyword **none**
    can''t be used as an animation name as it is reserved as a special keyword for
    removing the animation. Next, we''re going to specify the animation duration in
    seconds, and the animation''s timing function:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以随意命名这个动画，只要不使用任何空格。就像类名一样，我也不能以数字开头。此外，关键字**none**不能用作动画名称，因为它是保留的用于移除动画的特殊关键字。接下来，我们将以秒为单位指定动画持续时间和动画的时间函数：
- en: '[PRE66]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'For the `timing-function` I''ve used `ease`, but you can also specify `linear`,
    `ease-in`, `ease-out`, and `ease-in-out` functions, which are the same timing
    functions we used for `transitions`. This code by itself doesn''t do anything.
    We have to specify what happens when we animate using `@keyframes`. So below the
    last ruleset, we''ll add a `@keyframes` *at-rule* with our animation name that
    we came up with previously `slideDown`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`timing-function`，我使用了`ease`，但您还可以指定`linear`，`ease-in`，`ease-out`和`ease-in-out`函数，这些函数与我们用于`transitions`的相同时间函数。这段代码本身不会做任何事情。我们必须指定在使用`@keyframes`进行动画时会发生什么。因此，在最后一个规则集下面，我们将添加一个带有我们之前想出的动画名称`slideDown`的`@keyframes`
    *at-rule*：
- en: '[PRE67]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Inside curly braces, we''ll specify the `from` and `to` time offsets:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在花括号内，我们将指定`from`和`to`的时间偏移量：
- en: '[PRE68]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'What ever''s inside the `from` curly braces will be the starting point, and
    what ever''s inside the `to` curly braces will be the end point of the animation.
    We could put several properties inside of the animation; let''s start with the
    `translateY` transform function with negative 100 percent:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号内的任何内容都将是动画的起点，花括号内的任何内容都将是动画的终点。我们可以在动画中放置几个属性；让我们从`translateY`变换函数开始，值为负100％：
- en: '[PRE69]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This is going to move the unordered list up by negative 100 percent to make
    it the starting point. The percentage being the height of the element. `50%` would
    move it down half the elements height, whereas `100%` would move it down the full
    height of the element. So `-100%` is going to push it up vertically the entire
    height of the element. The `translateY` function is new to us here. It''s a lot
    like `translate`, except that it''s only for vertical translations. The `translateX`
    function can do horizontal translations. Inside the `to` curly braces, we''ll
    set `translateY` to `0%`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使无序列表向上移动负100％，使其成为起点。百分比是元素的高度。`50％`会使其向下移动一半的元素高度，而`100％`会使其向下移动整个元素的高度。因此，`-100％`将使其垂直向上移动整个元素的高度。在这里，`translateY`函数对我们来说是新的。它很像`translate`，只是它只用于垂直平移。`translateX`函数可以进行水平平移。在`to`的花括号内，我们将把`translateY`设置为`0％`：
- en: '[PRE70]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We can now see the menu animating downward:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到菜单向下动画：
- en: '![](img/00213.jpeg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00213.jpeg)'
- en: Setting additional keyframes
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置额外的关键帧
- en: 'So far, our animation could just as easily have been done with a `transition`,
    as nothing new has really been introduced. But the power of animation comes where
    we can set additional keyframes. Let''s change `from` and `to` in our CSS to `0%`
    and `100%`, respectively, like so:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的动画完全可以用`transition`来实现，因为没有真正引入任何新内容。但是动画的强大之处在于我们可以设置额外的关键帧。让我们将CSS中的`from`和`to`更改为分别为`0％`和`100％`，如下所示：
- en: '[PRE71]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Instead of adding just a start and an end, we can add any number of stops between
    these two points. Let''s add a new keyframe, say `90%`, with a `translateY` of
    `10%`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以添加开始和结束，还可以在这两个点之间添加任意数量的停止。让我们添加一个新的关键帧，比如`90％`，其`translateY`为`10％`：
- en: '[PRE72]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We''re translating the position of the dropdown going from `-100%` to `10%`
    during the first `90%` of that 0.25 seconds. Then, in the last 10% of the 0.25
    seconds, the vertical movement goes from `10%` to `0%`. This gives the animation
    a little bit of a hop, or bounce, at the end:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在将下拉菜单的位置从`-100％`到`10％`进行翻译，在0.25秒的前90％。然后，在0.25秒的最后10％，垂直移动从`10％`到`0％`。这使动画在最后有一点跳动或弹跳：
- en: '![](img/00214.jpeg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00214.jpeg)'
- en: 'Not only can we add multiple keyframes, but also multiple properties per keyframe.
    So let''s add `opacity` to our animation. Let''s say we start with the keyframes
    being invisible and end at an opacity of `1`, which is fully visible. We won''t
    animate opacity at 90% keyframe:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以添加多个关键帧，还可以在每个关键帧中添加多个属性。所以让我们将`opacity`添加到我们的动画中。假设我们从不可见的关键帧开始，最终不透明度为`1`，即完全可见。我们不会在90％关键帧上动画不透明度：
- en: '[PRE73]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The menu now animates downward and fades in:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单现在向下动画并淡入：
- en: '![](img/00215.jpeg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00215.jpeg)'
- en: Vendor prefixes
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应商前缀
- en: 'To wrap up our drop-down animation, let''s get maximum browser support by adding
    in the necessary vendor prefixes:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的下拉动画，让我们通过添加必要的供应商前缀来获得最大的浏览器支持：
- en: '[PRE74]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Both `@keyframes` animation need the `-webkit-` vendor prefix, as well as the
    `transform`, `animation-name`, `animation-duration`, and `animation-timing-function`
    property.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`@keyframes`动画都需要`-webkit-`供应商前缀，以及`transform`，`animation-name`，`animation-duration`和`animation-timing-function`属性。'
- en: As we come to the end of this section, we have our drop-down menu animation
    in place. CSS animations are supported in IE10 and later, so older versions of
    IE and other older browsers won't show the animation, but they will still have
    access to the menu and all of its content. In our case, since it's just an extra
    touch to the overall experience, it's not a serious issue if older browsers miss
    out on this; they can still get all of the core content they need. In the next
    section, we'll continue with CSS animations by experimenting with our shark logo
    to create a far more robust animation.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们来到这一部分的结尾时，我们的下拉菜单动画已经就位。CSS动画在IE10及更高版本中受支持，因此较旧版本的IE和其他较旧的浏览器不会显示动画，但它们仍然可以访问菜单和其所有内容。在我们的情况下，由于这只是整体体验的额外触摸，如果较旧的浏览器错过了这一点，这并不是一个严重的问题；它们仍然可以获得他们需要的所有核心内容。在下一节中，我们将继续使用CSS动画，通过尝试我们的鲨鱼标志来创建一个更加强大的动画。
- en: CSS animations (part 2)
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画（第2部分）
- en: Our main navigation dropdown's sliding motion is complete. Now let's deep dive
    into CSS animations by experimenting with our shark logo and exploring other animation
    properties, such as `delay`, `iteration-count`, `fill-mode`, as well as, `animation`—which
    is the shorthand.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主导航下拉菜单的滑动动作已经完成。现在让我们通过尝试我们的鲨鱼标志和探索其他动画属性，如`delay`，`iteration-count`，`fill-mode`以及`animation`（这是简写）来深入研究CSS动画。
- en: Animation delay, iteration-count, and fill-mode
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画延迟，迭代次数和填充模式
- en: 'Let''s add an animation for the shark image to get a different perspective
    of what animations can do, and have it occur every time the page loads. We''ll
    name it `crazyShark`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为鲨鱼图像添加一个动画，以便从不同的角度看动画可以做什么，并且每次页面加载时都会发生。我们将其命名为`crazyShark`：
- en: '[PRE75]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Let''s add a bunch of `@keyframes` that are translating and simultaneously
    rotating the shark image:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一堆同时平移和旋转鲨鱼图像的`@keyframes`动画：
- en: '[PRE76]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, let''s go to our animation properties and change the duration from `0.25`
    seconds to `1` second:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们去我们的动画属性，并将持续时间从`0.25`秒更改为`1`秒：
- en: '[PRE77]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The shark is really moving around, hence our animation is named `crazyShark`:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 鲨鱼真的在四处移动，因此我们的动画被命名为`crazyShark`：
- en: '![](img/00216.jpeg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00216.jpeg)'
- en: 'Note that the `translate` syntax I''m using is slightly different than what
    we''ve used previously. The two values separated by a comma are for *x* and *y*
    coordinates, respectively, whereas one single value can be used when the *x* and
    *y* coordinates are the same:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我使用的`translate`语法与我们之前使用的略有不同。由逗号分隔的两个值分别用于*x*和*y*坐标，而当*x*和*y*坐标相同时，可以使用一个单一值：
- en: '[PRE78]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'There are several other animation properties, two of which are `animation-delay`
    and `animation-iteration-count`. I find both of these useful:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几个动画属性，其中两个是`animation-delay`和`animation-iteration-count`。我发现这两个都很有用：
- en: '[PRE79]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now, we''ll have a `2` second delay before the animation starts, *which I won''t
    try to illustrate in book format*. Then it should animate fully through twice:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，动画开始前将有2秒的延迟，*我不会尝试在书本格式中说明这一点*。然后它应该完全动画两次：
- en: '![](img/00217.jpeg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00217.jpeg)'
- en: 'We could also endlessly repeat the animation if we wanted to; we could just
    add the `infinite` keyword instead of a number, and the shark would keep on going
    forever. *I''m definitely not going to try to illustrate this in book format either!*
    Let''s get rid of the `animation-delay` and `animation-iteration-count`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意，我们也可以无限重复动画；我们可以只添加`infinite`关键字而不是一个数字，鲨鱼将永远继续前进。*我绝对不会尝试在书本格式中说明这一点！*
    让我们摆脱`animation-delay`和`animation-iteration-count`：
- en: '[PRE80]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: animation-fill-mode
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画填充模式
- en: 'The animation-fill-mode property tells the element being animated what to do
    with itself before the animation starts and after the animation completes. Using
    `animation-fill-mode` fills the space before and/or after the animation. We don''t
    need an `animation-fill-mode` property yet. That''s because the shark animation
    starts on page load and then lands the shark in its static position—we''re saying
    no translate and no rotate:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-fill-mode`属性告诉被动画化的元素在动画开始前和动画完成后该做什么。使用`animation-fill-mode`填充动画之前和/或之后的空间。我们现在不需要`animation-fill-mode`属性。因为鲨鱼动画在页面加载时开始，然后将鲨鱼降落到其静态位置-我们说不要平移和旋转：'
- en: '[PRE81]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: However, what if we end the animation with *x* at 10 percent, *y* at 70 percent,
    and a rotation at 10 degrees?
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们以*x*为10％，*y*为70％，旋转为10度结束动画会怎么样呢？
- en: '[PRE82]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'If you apply this and go to the site, you''ll notice that the shark seems to
    end the animation near the first heading and then jumps back to its native position.
    This is illustrated by the following two screenshots:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您应用这个并转到网站，您会注意到鲨鱼似乎在第一个标题附近结束动画，然后跳回到其原始位置。这由以下两个截图说明：
- en: 'The shark at the very end of its animation:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的最后，鲨鱼：
- en: '![](img/00218.jpeg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00218.jpeg)'
- en: 'The shark teleports to its static position following the animation:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 鲨鱼在动画结束后会瞬间传送到其静态位置：
- en: '![](img/00219.jpeg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00219.jpeg)'
- en: 'We could use `animation-fill-mode: forwards` to fix this:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以使用`animation-fill-mode: forwards`来修复这个问题：'
- en: '[PRE83]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now, after the animation concludes, the shark will stay put in that position
    without jumping back to its native position:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在动画结束后，鲨鱼将保持在那个位置而不会跳回到其原始位置：
- en: '![](img/00218.jpeg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00218.jpeg)'
- en: That's neat!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: The `animation-fill-mode` property with a value of `backwards` will make sure
    that the element being animated is *filled* to its starting position even before
    the animation starts. The `both` keyword is a way to fill both the starting and
    ending position.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation-fill-mode`属性的值为`backwards`将确保被动画化的元素在动画开始之前就*填充*到其起始位置。`both`关键字是填充起始和结束位置的一种方式。'
- en: 'Let''s reduce our ruleset down to just these three animation properties:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的规则集减少到这三个动画属性：
- en: '[PRE84]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Let''s also touch up and tone back this entire animation. This way, our crazy
    shark will become a little less crazy, *but still crazy enough*:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也调整和减少整个动画。这样，我们的疯狂鲨鱼将变得稍微不那么疯狂，*但仍然足够疯狂*：
- en: '[PRE85]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: We'll have to add the vendor prefixes for each animation property. But, before
    we do this, let's make our coding lives easier using the animation property shorthand
    that combines all of the animation properties into one line.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每个动画属性添加供应商前缀。但在这之前，让我们使用动画属性的简写来使我们的编码生活变得更容易，将所有动画属性合并成一行。
- en: Using the animation shorthand
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动画简写
- en: 'Take these declarations in our `nav figure` ruleset:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`nav figure`规则集中加入这些声明：
- en: '[PRE86]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Remove `-name` from `animation-name` and the bottom two declarations; so we
    are left with this:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 从`animation-name`和底部两个声明中删除`-name`，这样我们就剩下了这个：
- en: '[PRE87]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Now, we''ll add `1s` and `ease`:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加`1s`和`ease`：
- en: '[PRE88]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Here''s what we should end up with now:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该得到的结果如下：
- en: '[PRE89]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Also, you can dump all the different animation properties into one shorthand.
    It doesn''t really matter what order you put them in as long as `animation-duration`
    comes before `animation-delay`. The following is one possible way to use all the
    animation properties that we''ve talked about inside one convenient shorthand:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将所有不同的动画属性放入一个简写中。无论您以什么顺序放置它们，只要`animation-duration`在`animation-delay`之前。以下是一种可能的方式，可以在一个方便的简写中使用我们讨论过的所有动画属性：
- en: '[PRE90]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Now that we have the shorthand in place, it's going to make it a little easier
    to add in the vendor prefixed version.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了简写，这将使添加供应商前缀版本变得更容易一些。
- en: Vendor prefixes
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应商前缀
- en: 'Let''s add the `-webkit-` prefixed version of the `animation` property:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`-webkit-`前缀版本的`animation`属性：
- en: '[PRE91]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'We will do the same for `@keyframes`:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对`@keyframes`做同样的处理：
- en: '[PRE92]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Notice that I've prefixed the `@keyframes` with `@-webkit-keyframes`, as well
    as, the `transform` with `-webkit-transform`.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在`@keyframes`前面加了`@-webkit-keyframes`，以及在`transform`前面加了`-webkit-transform`。
- en: Additional info on animations
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有关动画的其他信息
- en: 'For more information on CSS animations, I recommend checking out my article,
    `CSS animations aren''t that tough.`, at [richfinelli.com/css-animations-arent-that-tough](http://richfinelli.com/css-animations-arent-that-tough):'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CSS动画的更多信息，我建议查看我的文章，“CSS动画并不那么难。”，网址为[richfinelli.com/css-animations-arent-that-tough](http://richfinelli.com/css-animations-arent-that-tough)：
- en: '![](img/00220.jpeg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00220.jpeg)'
- en: In conclusion, we've explored other animation properties, such as `animation-delay`,
    `animation-iteration-count`, and `animation-fill-mode`, on our way to creating
    a fancy, over-the-top animation. We also simplified all these properties into
    a single, convenient shorthand. We also added the `-webkit-` prefixed version
    of each property for greater browser support. In the next and final section of
    this chapter, we'll add `box-shadow` to our entire nav, as well as fix a bug with
    our drop-down menu, namely `z-index`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们已经探讨了其他动画属性，比如`animation-delay`，`animation-iteration-count`和`animation-fill-mode`，在创建一个花哨的、过度的动画的过程中。我们还将所有这些属性简化为一个方便的简写。我们还为每个属性添加了`-webkit-`前缀版本，以获得更好的浏览器支持。在本章的下一节和最后一节中，我们将为整个导航栏添加`box-shadow`，并修复下拉菜单的一个错误，即`z-index`。
- en: Finalizing the navigation
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成导航
- en: We're almost done with our main navigation but still have a couple small things
    left to do. First, we'll fix a `z-index` issue, which I'll elaborate on more in
    a moment. Then we need to add `box-shadow` to the bottom of our nav bar to complete
    the design.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了我们的主导航，但还有一些小事情要做。首先，我们将解决一个`z-index`问题，我稍后会详细说明。然后，我们需要在我们的导航栏底部添加`box-shadow`以完成设计。
- en: Fixing the Z index issue
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复Z索引问题
- en: 'First, we''re going to fix a bug using the `z-index` property. When you hover
    over the MOVIES navigation item, a dropdown appears. You will notice a couple
    of things:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`z-index`属性来修复一个错误。当您悬停在MOVIES导航项上时，会出现一个下拉菜单。您会注意到一些事情：
- en: '![](img/00221.jpeg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00221.jpeg)'
- en: First, one of the nav items in the dropdown items gets highlighted—when it really
    shouldn't. Second, the nav is actually animating on top of the MOVIES navigation
    item.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下拉菜单中的一个导航项被突出显示了——而实际上不应该。其次，导航实际上是在MOVIES导航项的顶部进行动画。
- en: 'We can slow down the animation speed to `2.5s` to get an easier look at this
    issue:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将动画速度减慢到`2.5秒`，以便更容易查看这个问题：
- en: '[PRE93]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: This can make it easier to see that the dropdown menu is dropping down on top
    of the MOVIES menu item.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以更容易地看到下拉菜单是在MOVIES菜单项的顶部下拉的。
- en: '![](img/00221.jpeg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00221.jpeg)'
- en: That's our problem, and that's why we're ending up with one of the dropdown
    menu items highlighted.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的问题，这就是为什么我们最终会出现下拉菜单项中的一个被突出显示的原因。
- en: 'Here we are in our CSS file:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CSS文件中：
- en: '[PRE94]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'This bug, so to speak, can be fixed with a new property called `z-index`. The
    `z-index` property sets the stacking order of elements that overlap. Our drop-down
    menu appears at the top because it comes after the anchor tag''s main nav item
    for movies. Naturally, absolutely positioned elements will appear on top of elements
    that do not have a `position` property set. This is why the dropdown appears on
    top of the main nav. The value of `z-index` is a number. It can be applied to
    elements that are set to `relative`, `absolute`, or `fixed` positions as well
    as elements with an `opacity` less than one or with a `transform` applied, as
    well as a few other situations. As long as we have our drop-down menu—that is,
    a `z-index` less than its container—we are good to go. Going to the `.has-submenu
    a` selector, let''s apply the `position:relative` declaration. This way, the element
    is going to accept the `z-index`. And we''ll add a `z-index` of `10`:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误，可以说，可以通过一个叫做`z-index`的新属性来修复。`z-index`属性设置了重叠元素的堆叠顺序。我们的下拉菜单出现在顶部，因为它在主导航项电影的锚标签之后。自然地，绝对定位的元素会出现在没有设置`position`属性的元素的上面。这就是为什么下拉菜单出现在主导航栏的顶部。`z-index`的值是一个数字。它可以应用于设置为`relative`、`absolute`或`fixed`位置的元素，以及透明度小于1或应用了`transform`的元素，以及其他一些情况。只要我们的下拉菜单——也就是`z-index`小于其容器——我们就可以继续。转到`.has-submenu
    a`选择器，让我们应用`position:relative`声明。这样，元素将接受`z-index`。我们将添加一个`z-index`为`10`：
- en: '[PRE95]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'On a `.has-submenu ul`, we don''t need to apply `position:relative` because
    it''s already set to `position: absolute`; it will accept `z-index` of `5`, which
    is less than 10\. So we should, in theory, have our bug fixed:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '在`.has-submenu ul`上，我们不需要应用`position:relative`，因为它已经设置为`position: absolute`；它将接受`z-index`为`5`，小于10。所以理论上，我们应该已经解决了我们的bug：'
- en: '[PRE96]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Save this and take a look at our site. At full speed, none of the menu items
    get highlighted when you hover over the navigation item and the drop-down appears
    behind the main nav. Now just to be sure, slow down the animation again. You should
    see it appear behind the MOVIES menu, which is great:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并查看我们的网站。在全速运行时，当你在导航项目上悬停时，没有一个菜单项会被突出显示，下拉菜单会出现在主导航栏后面。现在只是为了确保，再次减慢动画速度。你应该看到它出现在MOVIES菜单的后面，这很好：
- en: '![](img/00222.jpeg)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00222.jpeg)'
- en: 'Let''s also change the `animation-duration` back to `.5s`:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也把`animation-duration`改回`.5s`：
- en: '[PRE97]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Adding box-shadow
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加box-shadow
- en: 'Let''s talk about the `box-shadow` property. On our final site, you can see
    we have this shadow below the main nav:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈`box-shadow`属性。在我们的最终网站上，你可以看到我们的主导航下面有这个阴影：
- en: '![](img/00223.jpeg)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00223.jpeg)'
- en: 'Let''s move back to our CSS and find our `nav` selectors. `box-shadow` is a
    CSS3 property:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的CSS，找到我们的`nav`选择器。`box-shadow`是一个CSS3属性：
- en: '[PRE98]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'We''re targeting the `nav` element and using the nonprefixed version, which
    is supported in all major browsers, starting with IE9 and above. We don''t have
    to go back and any vendor prefixes because the specification has matured enough,
    as all the browsers now support the nonprefixed version. The first two values
    we add are *x* and *y*. We set the *x* value at `0` and the *y* value at `8px`;
    this is going to make the `box-shadow` property emanate downward:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们针对`nav`元素并使用非前缀版本，这在所有主要浏览器中都受支持，从IE9及以上版本开始。我们不必回头去添加任何供应商前缀，因为规范已经足够成熟，所有浏览器现在都支持非前缀版本。我们添加的前两个值是*x*和*y*。我们将*x*值设置为`0`，将*y*值设置为`8px`；这将使`box-shadow`属性向下发散：
- en: '[PRE99]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: If I use a negative value, that would have the submenu emanate from the top
    of the nav. We want it to emanate from the bottom of the nav.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我使用负值，那么子菜单将从导航栏顶部发散。我们希望它从导航栏底部发散。
- en: 'The next value is blur. We''ll set it to `15px`:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是模糊值。我们将把它设置为`15px`：
- en: '[PRE100]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: If I were to leave the blur value at `0`, we would get a hard, 8-pixel border.
    The blur is what makes it look more like a shadow than a border.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我把模糊值保持为`0`，我们将得到一个硬的8像素边框。模糊是使它看起来更像阴影而不是边框的原因。
- en: 'The final value we''re going to use is a color. We''ll use a new color value,
    called `rgba`, which is a CSS3 color value. We''ll then add `0, 0, 0`. This means
    the red, green, and blue colors are all going to be zero, meaning their output
    will be black. The `a` variable refers to the alpha channel, and we''ll set it
    to `.1`:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要使用的最终值是颜色。我们将使用一个名为`rgba`的新颜色值，这是CSS3颜色值。然后我们添加`0, 0, 0`。这意味着红色、绿色和蓝色都将为零，这意味着它们的输出将是黑色。变量`a`指的是alpha通道，我们将把它设置为`.1`：
- en: '[PRE101]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'So if you go to the site and check and uncheck box-shadow in DevTools, you
    will see the effect the `box-shadow` property has. Here is what it looks like
    without this property:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你去网站上检查并取消检查开发者工具中的box-shadow，你会看到`box-shadow`属性的效果。这是没有这个属性时的样子：
- en: '![](img/00224.jpeg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00224.jpeg)'
- en: 'This figure shows our site with box-shadow applied:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图显示了我们的网站应用了box-shadow：
- en: '![](img/00225.jpeg)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00225.jpeg)'
- en: 'Sometimes with these CSS properties, it''s nice to visit the DevTools. Let''s
    see what they look like if we change their values. We can see what box-shadow
    looks like with more or less blur. In the following screenshot, we see what it
    looks like with the value increased from `15px` to `26px`—you can see that the
    blur fades away:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，对于这些CSS属性，查看开发者工具是很好的。让我们看看如果我们改变它们的值会是什么样子。我们可以看看增加或减少模糊后box-shadow的效果。在下面的截图中，我们看到将值从`15px`增加到`26px`后的效果——你可以看到模糊消失了：
- en: '![](img/00226.jpeg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00226.jpeg)'
- en: 'With less blur, say `0px`, it turns into hardened shadow:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 如果减少模糊，比如`0px`，它会变成硬化的阴影：
- en: '![](img/00227.jpeg)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00227.jpeg)'
- en: 'I think that about `15px` was just right. You can also see what it looks like
    with greater opacity—rather a greater alpha channel. If we change the alpha channel
    from `.1` to `.5`, the box-shadow gets a lot darker:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为大约`15px`是恰到好处的。你也可以看到它在更高的不透明度下是什么样子——更高的alpha通道。如果我们把alpha通道从`.1`改为`.5`，阴影会变得更暗：
- en: '![](img/00228.jpeg)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00228.jpeg)'
- en: I think `.1` is about right. This has turned out well.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为`.1`是合适的。这个效果很好。
- en: Summary
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This was an extensive chapter; we covered a lot. We built and styled our menu.
    You learned about pseudo classes and how we can use them to target elements based
    on their position in the HTML. We familiarized ourselves with positioning properties,
    using `absolute` positioning for our shark icon. We built a dropdown for our menu
    and added animations to it. We explored animation properties, such as `animation
    delay`, `iteration count`, and `fill-mode`, and applied them to our shark icon.
    We finished off by finalizing the nav, fixing the `z-index` issue, and completing
    our design using the `box-shadow` property. In the next chapter, we'll look at
    one of my favorite subjects, responsive web design, as we get this site ready
    for varying device sizes.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个广泛的章节；我们涵盖了很多内容。我们构建并设计了我们的菜单。你学会了伪类，以及我们如何使用它们来针对HTML中元素的位置。我们熟悉了定位属性，使用`absolute`定位我们的鲨鱼图标。我们为我们的菜单建立了一个下拉菜单，并为它添加了动画。我们探索了动画属性，比如`animation
    delay`、`iteration count`和`fill-mode`，并将它们应用到我们的鲨鱼图标上。最后，我们通过修复`z-index`问题和使用`box-shadow`属性完成了导航的最终设计。在下一章中，我们将看看我最喜欢的主题之一，响应式网页设计，因为我们要为不同的设备尺寸准备这个网站。
