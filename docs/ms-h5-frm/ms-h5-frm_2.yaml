- en: Chapter 2. Validation of Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 表单验证
- en: Form validation has always been tricky and painful for developers since the
    Web was born. Before HTML5, it was a nightmare for developers to write lines of
    code for validating forms to get the desired information from the user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Web诞生以来，表单验证一直是开发人员头疼的问题。在HTML5出现之前，开发人员为了验证表单以获取用户所需的信息而编写了大量代码。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Validation, their benefits, and their types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证、它们的好处和类型
- en: HTML5 `<input>` and attributes used in validations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于验证的HTML5 `<input>`和属性
- en: The difference between JavaScript and HTML5 validations with an example
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript和HTML5验证的区别及示例
- en: Validation constraints and supported APIs (Application Programming interface)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证约束和支持的API（应用程序编程接口）
- en: Default error messages displayed by the browser
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器显示的默认错误消息
- en: Form validation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单验证
- en: Validation of a form is a series of checks and notifications that guides a user
    as to what is required as an input while submitting information to a server. We
    can also say that it is a process of checking the input data against a specific
    standard or requirement.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 表单验证是一系列检查和通知，指导用户在向服务器提交信息时需要输入什么。我们也可以说，这是一种检查输入数据是否符合特定标准或要求的过程。
- en: 'Form validation is a process for detecting invalid control data and displaying
    those errors to the end users. The term has several benefits as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 表单验证是检测无效控件数据并向最终用户显示这些错误的过程。该术语具有以下几个好处：
- en: Provides the necessary instructions and hints
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供必要的指示和提示
- en: Provides a logical reading and navigation order of the elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供元素的逻辑阅读和导航顺序
- en: Users can easily get to know the mistakes they have made while entering the
    data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以轻松地了解他们在输入数据时所犯的错误
- en: Ensures that the form can be completed and submitted using the keyboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保可以使用键盘完成并提交表单
- en: Saves users' waiting time on an HTTP request or a network call
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省用户在HTTP请求或网络调用上的等待时间
- en: Saves the owner's server time and memory from dealing with bad inputs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省服务器所有者的时间和内存，不必处理错误的输入
- en: Validation ensures that sufficient data has been provided by the user, such
    as with online shopping, which typically includes the address, e-mail address,
    and many more details which are mandatory for a transaction to be complete.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 验证确保用户提供了足够的数据，例如在线购物通常包括地址、电子邮件地址等许多必需的细节，以便完成交易。
- en: 'There are many methods to perform form validations, which can be categorized
    into the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以执行表单验证，可以归类为以下几种：
- en: Client-side form validation
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端表单验证
- en: Server-side form validation
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端表单验证
- en: Client-side form validation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端表单验证
- en: Client-side validation can be performed using HTML5 attributes on a browser
    that supports them or even with the help of JavaScript for other browsers. HTML5
    attributes reduce the effort of validation in comparison to cumbersome JavaScript
    validations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端验证可以在支持HTML5属性的浏览器上执行，甚至可以借助JavaScript在其他浏览器上执行。与繁琐的JavaScript验证相比，HTML5属性减少了验证的工作量。
- en: 'The advantages of client-side form validation are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端表单验证的优点如下：
- en: It enhances the experience of the user by responding quickly at the client side
    itself
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过在客户端快速响应来增强用户体验
- en: Validation can occur as the `<form>` controls are filled by the user before
    submitting the form to the server
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户填写`<form>`控件后，验证可以在将表单提交到服务器之前发生
- en: This approach is quite simple as it ensures that the user has filled the required
    fields with valid data and also guides the user while filling up the form correctly
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法非常简单，因为它确保用户已经填写了必需的字段，并且填写表单时也会指导用户正确操作
- en: It's a fast form of validation as it does not require any server-side scripting
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种快速的验证形式，因为它不需要任何服务器端脚本。
- en: 'The disadvantages of client-side form validation are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端表单验证的缺点如下：
- en: It can be disabled in the client's browser and does not provide any security
    mechanism
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在客户端的浏览器中禁用，并且不提供任何安全机制
- en: This approach cannot protect our application from various security concerns
    while transmitting the data along the network
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法无法保护我们的应用程序免受在网络上传输数据时的各种安全问题
- en: Client-side validation provides minimum security as it can be altered or bypassed
    very easily
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端验证提供的安全性较低，因为它很容易被篡改或绕过
- en: Server-side form validation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端表单验证
- en: Various scripting languages, such as PHP, ASP, or Perl are used to screen and
    filter the data submitted by the user at server side.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 各种脚本语言，如PHP、ASP或Perl，用于在服务器端对用户提交的数据进行筛选和过滤。
- en: This approach is used when we know that some checks can be performed only on
    the server side as security is required, as in the case of online shopping, where
    the user enters card details for making a payment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们知道某些检查只能在服务器端执行时，就会使用这种方法，因为需要安全性，比如在线购物，用户输入卡片详细信息进行付款。
- en: 'The advantages of server-side form validation are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端表单验证的优点如下：
- en: The valid and complete information can be submitted without any error recovery
    messages and warnings.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以提交有效和完整的信息，而无需进行错误恢复消息和警告。
- en: Every page that a user sees in the browser is downloaded to the computer, which
    includes JavaScript that has validation code. So, a hacker can create a new version
    of the page without any validation and can fool our server by entering invalid
    data. In such scenarios, server-side validations are helpful.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在浏览器中看到的每个页面都会下载到计算机上，其中包括具有验证代码的JavaScript。因此，黑客可以创建一个新版本的页面，没有任何验证，并且可以通过输入无效数据来愚弄我们的服务器。在这种情况下，服务器端验证是有帮助的。
- en: Server-side validation is more secure and cannot be altered or bypassed easily.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端验证更安全，不容易被篡改或绕过。
- en: 'The disadvantages of server-side form validation are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端表单验证的缺点如下：
- en: This approach requires more response time leading to poor user experience
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法需要更多的响应时间，导致用户体验不佳。
- en: The server-side processing code resubmits the page so as to display the error
    messages
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端处理代码重新提交页面，以显示错误消息
- en: To have the minimum number of request-response life cycles, it validates all
    form fields at the same time
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了最小化请求-响应生命周期，它同时验证所有表单字段
- en: More or less, we all have relied on JavaScript to validate forms. Also, we should
    always keep in mind that client-side form validation is not a replacement for
    foolproof server-side validation and handling errors. It is an efficient means
    of providing an instant feedback on the input of the user at the client end. In
    case of online shopping, the user selects total number of pieces, but after a
    certain limit, the user sees an error that the limit has been exceeded. All these
    validations demand high-end server-side validations, which is not possible on
    the client side. Always remember, in case of forms, use server-side validations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或多或少，我们都依赖JavaScript来验证表单。此外，我们应该始终记住，客户端表单验证不能替代完备的服务器端验证和处理错误。这是一种有效的方式，在客户端为用户输入提供即时反馈。在在线购物的情况下，用户选择了总件数，但在一定限制后，用户看到了超出限制的错误。所有这些验证都需要高端的服务器端验证，这在客户端是不可能的。请记住，在表单的情况下，请使用服务器端验证。
- en: HTML5 form validation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5表单验证
- en: The purpose of introducing HTML5 validation is to notify a user that a page
    contains some mandatory information that needs to be filled or corrects the users
    for any errors using the browser's built-in processing. We should take advantage
    of all the capabilities and knowledge that the browser has, to catch errors within
    a form, before sending it to the server. Also, we need not bother about the time
    and expense of a network round-trip or getting a response from the server about
    some stupid error.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 引入HTML5验证的目的是通知用户页面包含一些必填信息，需要填写或使用浏览器内置的处理纠正用户的任何错误。我们应该利用浏览器具有的所有功能和知识，在将表单发送到服务器之前，捕捉表单中的错误。此外，我们不需要担心网络往返的时间和费用，或者从服务器获取关于某些愚蠢错误的响应。
- en: New `<input>` attributes such as `required` and `pattern` used in combination
    with CSS pseudo-class selectors make it easier to write the checks and display
    feedback to the user. There are also other advanced validation techniques that
    allow you to use JavaScript to set custom validity rules and messages or to determine
    whether an element is invalid and why.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`<input>`属性，如`required`和`pattern`，与CSS伪类选择器结合使用，使得编写检查和向用户显示反馈变得更加容易。还有其他高级验证技术，允许您使用JavaScript设置自定义有效性规则和消息，或确定元素是否无效以及原因。
- en: Before we go deeper into HTML5 validations, let us see the difference when the
    client-side validation is performed using JavaScript and how we can validate using
    HTML5 `<form>` controls. Here, in the following instance, we are validating a
    simple textbox which is mandatory to be filled in by the user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解HTML5验证之前，让我们看看使用JavaScript执行客户端验证时的区别，以及我们如何使用HTML5 `<form>` 控件进行验证。在下面的示例中，我们正在验证一个用户必须填写的简单文本框。
- en: Code 1 – validating a textbox using JavaScript
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码1-使用JavaScript验证文本框
- en: 'The following code will validate a textbox using JavaScript:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使用JavaScript验证文本框：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截图所示：
- en: '![Code 1 – validating a textbox using JavaScript](img/4661OS_02_01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![代码1-使用JavaScript验证文本框](img/4661OS_02_01.jpg)'
- en: Code 2 – validating a textbox using HTML5 <form> controls
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码2-使用HTML5 <form>控件验证文本框
- en: 'The following code will validate a textbox using HTML5:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使用HTML5验证文本框：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截图所示：
- en: '![Code 2 – validating a textbox using HTML5 <form> controls](img/4661OS_02_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![代码2-使用HTML5 <form>控件验证文本框](img/4661OS_02_02.jpg)'
- en: In the preceding two code examples, we saw how the `<script>` part in the first
    code was replaced by a single attribute of the HTML5 `<form>` control in the second
    code, which not only reduced the lines of code, but also removed the scope of
    JavaScript.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个代码示例中，我们看到第一个代码中的`<script>`部分被HTML5 `<form>`控件的单个属性所取代，这不仅减少了代码行数，还消除了JavaScript的范围。
- en: Constraint validations
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约束验证
- en: The algorithm that browsers run to determine the validity of a form when it
    is submitted is called constraint validation. To constrain data or check validity,
    the algorithm utilizes new HTML5 attributes such as `min`, `max`, `step`, `pattern`,
    and `required`, as well as existing attributes such as `maxlength` and `type`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器在提交表单时运行的算法称为约束验证。为了约束数据或检查有效性，该算法利用了新的HTML5属性，如`min`、`max`、`step`、`pattern`和`required`，以及现有属性，如`maxlength`和`type`。
- en: 'In HTML5, basic constraints are declared in two different ways:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5中，基本约束有两种不同的声明方式：
- en: By choosing the most semantically appropriate value for the `type` attribute
    of the `<input>` element
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过为`<input>`元素的`type`属性选择最语义化的值
- en: By setting values on validation-related attributes and allowing basic constraints
    to be described in a simple way without the need for JavaScript
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在验证相关属性上设置值，并允许以简单的方式描述基本约束，而无需使用JavaScript
- en: HTML5 constraint validation APIs
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5约束验证API
- en: Nowadays, an increasing number of browsers are supporting the constraint validation
    API, and it's becoming more and more reliable. However, HTML5 constraint validation
    doesn't remove the need for validation on the server side.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，越来越多的浏览器支持约束验证API，并且变得越来越可靠。然而，HTML5约束验证并不能消除服务器端验证的需要。
- en: 'At a high level, this API covers the following features:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，此API涵盖以下功能：
- en: Form fields have a validity property
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单字段具有有效性属性
- en: Form fields also have a generic `checkValidity()` method
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单字段还有一个通用的`checkValidity()`方法
- en: Finally, there is a `setCustomValidity()` method
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，还有一个`setCustomValidity()`方法
- en: The validity object
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: validity对象
- en: The `validity` object is a set of keys and Boolean values that represent the
    validity of a particular form. In simple terms, we can say that it tells what
    a particular form lacks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`validity`对象是一组键和布尔值，表示特定表单的有效性。简单来说，我们可以说它告诉了特定表单缺少什么。'
- en: Let us take the numeric field type as an example to understand this. With the
    numeric field type, we can specify that a form field should be numeric and we
    can set the limitation; for example, the number should be higher than 0 and less
    than 25\. The `validity` property would actually be able to tell you if the value
    wasn't a number or was too low or too high.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以数字字段类型为例来理解这一点。使用数字字段类型，我们可以指定表单字段应该是数字，并且我们可以设置限制；例如，数字应该大于0并且小于25。`validity`属性实际上可以告诉您值是否不是数字，或者太低或太高。
- en: 'The `validity` object of a DOM node returns a `ValidityState` object containing
    a number of Boolean properties related to the validity of the data in the node.
    In a `ValidityState` object, whenever we get a reference to it, we can keep a
    hold of it, and the validity checks that we get in return will update as needed
    when the changes occur as shown in the following code example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: DOM节点的`validity`对象返回一个包含与节点中数据的有效性相关的多个布尔属性的`ValidityState`对象。在`ValidityState`对象中，每当我们获取对它的引用时，我们可以保持对它的控制，并且返回的有效性检查将根据需要进行更新，如下面的代码示例所示：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The checkValidity method
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: checkValidity方法
- en: The `checkValidity` method is called to check for the value that this method
    returns for the successful and unsuccessful validation scenarios. It returns a
    Boolean value, and we can use this method when there is no need to know why a
    field is invalid, or we can use this method before we sneak into the `validity`
    property to know why the field is not valid.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`checkValidity`方法来检查此方法返回的值，以了解成功和不成功的验证场景。它返回一个布尔值，当不需要知道字段为何无效时，或者在我们深入`validity`属性之前使用此方法来了解字段为何无效时，我们可以使用此方法。
- en: This method allows us to check validation on the form without any input from
    the user.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法允许我们在没有用户输入的情况下检查表单的验证。
- en: 'Validation of form is checked whenever the user or the script code submits
    the form, but this method allows validation to be done at any time, as shown in
    the following code example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户或脚本代码提交表单时检查表单的验证，但该方法允许在任何时候进行验证，如下面的代码示例所示：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截图所示：
- en: '![The checkValidity method](img/4661OS_02_03.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![checkValidity方法](img/4661OS_02_03.jpg)'
- en: The setCustomValidity() method
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: setCustomValidity()方法
- en: The `setCustomValidity()` method lets us decide logically and create a custom
    validation error message and display it when an invalid input is submitted to
    the form. This lets us use JavaScript code to establish a validation failure other
    than those offered by the standard constraint validation APIs. The message is
    displayed while reporting the problem.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`setCustomValidity()`方法让我们可以逻辑地决定并创建自定义验证错误消息，并在提交无效输入到表单时显示它。这使我们可以使用JavaScript代码来建立除标准约束验证API提供的验证失败之外的验证失败。在报告问题时显示消息。'
- en: 'This method also allows us to set a message and sets the field as being in
    an error state by default. If the argument is the empty string, the custom error
    is cleared or is considered valid. When we do not customize the error message
    using the `setCustomValidity()`method, the built-in error message is displayed,
    as shown in the following code example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法还允许我们设置消息，并默认将字段设置为错误状态。如果参数是空字符串，则自定义错误将被清除或被视为有效。当我们不使用`setCustomValidity()`方法自定义错误消息时，将显示内置错误消息，如下面的代码示例所示：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截图所示：
- en: '![The setCustomValidity() method](img/4661OS_02_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![setCustomValidity()方法](img/4661OS_02_04.jpg)'
- en: The willValidate attribute
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: willValidate属性
- en: The `willValidate` attribute indicates whether an element will be validated
    based on the form's validation rules and constraints. If any of the constraints,
    such as the `required` attribute or the `pattern` attribute, are set on the control,
    the `willValidate` field will let you know that validation checking will be enforced.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`willValidate`属性指示元素是否将根据表单的验证规则和约束进行验证。如果控件上设置了任何约束，例如`required`属性或`pattern`属性，`willValidate`字段将告诉您验证检查将被强制执行。'
- en: 'This attribute returns **true** if the element will be validated when the form
    is submitted; otherwise, it will return **false,** as shown in the following code
    example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性在表单提交时返回**true**，如果元素将被验证；否则，它将返回**false**，如下面的代码示例所示：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截图所示：
- en: '![The willValidate attribute](img/4661OS_02_05.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![willValidate属性](img/4661OS_02_05.jpg)'
- en: The validationMessage attribute
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: validationMessage属性
- en: The `validationMessage` attribute allows us to programmatically query a localized
    error message that the control does not satisfy. If the control is not a candidate
    for constraint validation, or if the element's value satisfies its constraints,
    `validationMessage` sets to an empty string.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`validationMessage`属性允许我们以编程方式查询本地化的错误消息，该控件不满足。如果控件不符合约束验证的条件，或者元素的值满足其约束，`validationMessage`设置为空字符串。'
- en: 'For instance, if a required field has no input, the browser will present its
    default error message to the user. Once supported, this is the text string that
    will be returned by the `validationMessage` field as shown in the following code
    example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果必填字段没有输入，浏览器将向用户呈现其默认错误消息。一旦支持，这就是`validationMessage`字段返回的文本字符串，如下面的代码示例所示：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding code will look as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截图所示：
- en: '![The validationMessage attribute](img/4661OS_02_06.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![validationMessage属性](img/4661OS_02_06.jpg)'
- en: HTML5 provides us with several ways to enforce correctness on forms; that is,
    HTML5 provides several validity constraints on any given `<form>` control.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5为我们提供了多种方式来强制表单的正确性；也就是说，HTML5为任何给定的`<form>`控件提供了多种有效性约束。
- en: As mentioned previously, several validity constraints on any given `<form>`
    control are discussed in this section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本节讨论了任何给定的`<form>`控件上的多种有效性约束。
- en: The patternMismatch property
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: patternMismatch属性
- en: The `patternMismatch` property is used to set any pattern rule on a `<form>`
    control and returns if the `<input>` value matches the rules defined by the `pattern`
    attribute.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`patternMismatch`属性用于在`<form>`控件上设置任何模式规则，并返回`<input>`值是否与`pattern`属性定义的规则匹配。'
- en: The validity.patternMismatch attribute
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.patternMismatch属性
- en: If the element's value does not match the provided `pattern` attribute, it returns
    **true**; otherwise, it returns **false**
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值不匹配提供的`pattern`属性，则返回**true**；否则，返回**false**
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true**
    as shown in the following code example:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid`CSS伪类，如下面的代码示例所示：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截屏所示：
- en: '![The validity.patternMismatch attribute](img/4661OS_02_07.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![validity.patternMismatch属性](img/4661OS_02_07.jpg)'
- en: The customError property
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: customError属性
- en: The `customError` property is used to handle the errors that are calculated
    and set by the application code. This property validates whether the customized
    error message is set or not.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: customError属性用于处理由应用程序代码计算和设置的错误。此属性验证是否设置了自定义错误消息。
- en: It is used to call the `setCustomValidity()` property to put a form control
    into the `customError` state.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于调用`setCustomValidity()`属性将表单控件置于`customError`状态。
- en: The validity.customError property
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.customError属性
- en: 'If the element has a custom error, it returns **true**; otherwise, it returns
    **false,** as shown in the following code example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果元素有自定义错误，则返回**true**；否则，返回**false**，如下面的代码示例所示：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截屏所示：
- en: '![The validity.customError property](img/4661OS_02_08.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![有效性.customError属性](img/4661OS_02_08.jpg)'
- en: The rangeOverflow property
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: rangeOverflow属性
- en: The `rangeOverflow` property is used to notify that the input value of the `<form>`
    control is greater than the maximum value or that the input value is out of range.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`rangeOverflow`属性用于通知`<form>`控件的输入值大于最大值或输入值超出范围。'
- en: This property checks the `max` attribute to a `<form>` control with the maximum
    input value.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性检查`max`属性，以确保`<form>`控件具有最大输入值。
- en: The validity.rangeOverflow property
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.rangeOverflow属性
- en: If the element's value is higher than the provided maximum value, it returns
    **true**; otherwise, it returns **false**
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值高于提供的最大值，则返回**true**；否则，返回**false**
- en: 'The element will match the `:invalid` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid`和`:out-of-range`CSS伪类，如下面的代码示例所示：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding code will be as shown inthe following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截屏所示：
- en: '![The validity.rangeOverflow property](img/4661OS_02_09.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![有效性.rangeOverflow属性](img/4661OS_02_09.jpg)'
- en: The rangeUnderflow property
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: rangeUnderflow属性
- en: The `rangeUnderflow` property is used to notify that the input value of the
    `<form>` control is lower than the minimum value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`rangeUnderflow`属性用于通知`<form>`控件的输入值低于最小值。'
- en: This property checks the `min` attribute to a `<form>` control with the minimum
    input value.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性检查`min`属性，以确保`<form>`控件具有最小输入值。
- en: The validity.rangeUnderflow property
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有效性.rangeUnderflow属性
- en: If the element's value is lower than the provided minimum value, it returns
    **true;** otherwise, it returns **false**
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值低于提供的最小值，则返回**true**；否则，返回**false**
- en: 'The element will match the `:invalid` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid`和`:out-of-range`CSS伪类，如下面的代码示例所示：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding code will look as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截屏所示：
- en: '![The validity.rangeUnderflow property](img/4661OS_02_10.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![有效性.rangeUnderflow属性](img/4661OS_02_10.jpg)'
- en: The stepMismatch property
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: stepMismatch属性
- en: The `stepMismatch` property ensures that an `<input>` value complies with the
    rules or standards of the values of `min`, `max`, and `step`. For example, if
    the step value is five and the value entered is three, we will have a step mismatch
    in this case.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`stepMismatch`属性确保`<input>`值符合`min`、`max`和`step`值的规则或标准。例如，如果步长值为五，输入值为三，则在这种情况下会有步长不匹配。'
- en: The validity.stepMismatch property
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有效性.stepMismatch属性
- en: If the element's value doesn't fit the rules given by the `step` attribute,
    it returns **true**; otherwise, it returns **false**
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值不符合`step`属性给定的规则，则返回**true**；否则，返回**false**
- en: 'The element will match the `:invalid` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid`和`:out-of-range`CSS伪类，如下面的代码示例所示：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下截屏所示：
- en: '![The validity.stepMismatch property](img/4661OS_02_11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![有效性.stepMismatch属性](img/4661OS_02_11.jpg)'
- en: The tooLong property
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tooLong属性
- en: This property ensures that an `<input>` field does not contain too many characters.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性确保`<input>`字段不包含太多字符。
- en: We ensure this by adding a `maxlength` attribute on the `<form>` control.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`<form>`控件上添加`maxlength`属性来确保这一点。
- en: The validity.tooLong property
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.tooLong属性
- en: If the element's value is longer than the provided maximum length, it returns
    **true;** otherwise, it returns **false**
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值长于提供的最大长度，则返回**true**；否则，返回**false**
- en: 'The element will match the `:invali``d` and `:out-of-range` CSS pseudo-classes
    when it returns **true,** as shown in the following code example:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid`和`:out-of-range` CSS伪类，如下面的代码示例所示：
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 先前代码的输出将如下屏幕截图所示：
- en: '![The validity.tooLong property](img/4661OS_02_17.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![validity.tooLong属性](img/4661OS_02_17.jpg)'
- en: The typeMismatch property
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typeMismatch属性
- en: The `typeMismatch` property is used to notify that the `<input>` value does
    not match with the `<form>` control in cases such as e-mail, URL, and number,
    and ensures that the type of value matches its expected field.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: “typeMismatch”属性用于通知`<input>`值与`<form>`控件不匹配，例如电子邮件、URL和数字，并确保值的类型与其预期字段匹配。
- en: The validity.typeMismatch property
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.typeMismatch属性
- en: If the element's value is not in the correct syntax, it returns **true**; otherwise,
    it returns **false**
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值不符合正确的语法，则返回**true**；否则返回**false**
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true,**
    as shown in the following code example:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid` CSS伪类，如下面的代码示例所示：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 先前代码的输出将如下屏幕截图所示：
- en: '![The validity.typeMismatch property](img/4661OS_02_12.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![validity.typeMismatch属性](img/4661OS_02_12.jpg)'
- en: The valueMissing property
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: valueMissing属性
- en: The `valueMissing` property ensures that some value is set on the `<form>` control.
    To ensure this, set the required attribute on the `<form>` control to **true**.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: “valueMissing”属性确保在`<form>`控件上设置了一些值。为了确保这一点，将`required`属性设置为**true**。
- en: The validity.valueMissing property
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.valueMissing属性
- en: If the element has no value but is a required field, it returns **true**; otherwise,
    it returns **false**
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素没有值但是必填字段，则返回**true**；否则返回**false**
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true,**
    as shown in the following code example:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid` CSS伪类，如下面的代码示例所示：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding code will look as shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 先前代码的输出将如下屏幕截图所示：
- en: '![The validity.valueMissing property](img/4661OS_02_13.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![validity.valueMissing属性](img/4661OS_02_13.jpg)'
- en: The valid property
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: valid属性
- en: The `valid` property is used to check whether the field is valid.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: “valid”属性用于检查字段是否有效。
- en: The validity.valid property
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: validity.valid属性
- en: If the element's value has no validity problems, it returns **true**; otherwise,
    it returns **false**
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果元素的值没有有效性问题，则返回**true**；否则返回**false**
- en: 'The element will match the `:invalid` CSS pseudo-class when it returns **true,**
    as shown in the following code example:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当返回**true**时，元素将匹配`:invalid` CSS伪类，如下面的代码示例所示：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding code will be as shown in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 先前代码的输出将如下屏幕截图所示：
- en: '![The validity.valid property](img/4661OS_02_14.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![validity.valid属性](img/4661OS_02_14.jpg)'
- en: 'The following table shows the various attributes with their possible values
    and associated violations:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了各种属性及其可能的值和相关违规：
- en: '| Attribute | <Input> types supporting the attribute | Possible values | Constraint
    description | Associated violation |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 支持属性的<Input>类型 | 可能的值 | 约束描述 | 相关违规 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `required` | date, month, week, checkbox, radio button, URL, telephone, e-mail,
    text, password, search, time, range, number and tags such as `<select>`, `<textarea>`,
    `checkbox`, and `radiobutton` | It returns the Boolean value `None`; when present,
    it returns **true** and when absent, it returns **false** | The value is to be
    filled mandatorily | Constraint violation:Missing |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `required` | 日期、月份、周、复选框、单选按钮、URL、电话、电子邮件、文本、密码、搜索、时间、范围、数字和标签，如`<select>`、`<textarea>`、`checkbox`和`radiobutton`
    | 返回布尔值`None`；存在时返回**true**，不存在时返回**false** | 必须填写值 | 约束违规：缺失 |'
- en: '| `min` | number and range | Must be a valid number | The filled parameter
    must be greater than or equal to the value defined | Constraint violation:Underflow
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `min` | 数字和范围 | 必须是有效数字 | 填写的参数必须大于或等于定义的值 | 约束违规：下溢 |'
- en: '| month, date, and week | Must be a valid date |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 月、日期和周 | 必须是有效日期 |'
- en: '| datetime-local, time, and datetime | Must be a valid date and time |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| datetime-local、time和datetime | 必须是有效的日期和时间 |'
- en: '| `maxlength` | tags such as `<textarea>` and attributes are `text`, `password`,
    `search`, `tel`, `url`, and `email` | Must be an integer length | The value of
    the attribute must not be greater than the number of characters filled | Constraint
    violation:Too long |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `maxlength` | `<textarea>`等标签和属性为`text`、`password`、`search`、`tel`、`url`和`email`
    | 必须是整数长度 | 属性的值不能大于填写的字符数 | 约束违规：太长 |'
- en: '| `max` | number and range | Must be a valid number | The filled parameter
    must be lesser than or equal to the value defined | Constraint violation: Overflow
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `max` | 数字和范围 | 必须是有效数字 | 填写的参数必须小于或等于定义的值 | 约束违规：溢出 |'
- en: '| month ,date, and week | Must be a valid date |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 月、日期和周 | 必须是有效日期 |'
- en: '| datetime-local, time, and datetime | Must be a valid date and time |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| datetime-local、time和datetime | 必须是有效的日期和时间 |'
- en: '| `pattern` | text, search, URL, telephone, e-mail, and password | It is a
    regular expression defined using JavaScript | The value of the attribute must
    exactly match the pattern defined | Constraint violation: Pattern mismatch |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `pattern` | 文本、搜索、URL、电话、电子邮件和密码 | 它是使用JavaScript定义的正则表达式 | 属性的值必须完全匹配定义的模式
    | 约束违规：模式不匹配 |'
- en: '| `step` | month | Must be an integer number of months | Until the value of
    `step` is set to the any literal (values available in the `step` menu), value
    will be `min` value plus an integral multiple of `step` | Constraint violation:
    Step mismatch |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `step` | 月 | 必须是整数月数 | 直到`step`的值设置为任何文字（在`step`菜单中可用的值），值将是`min`值加上`step`的整数倍
    | 约束违规：步骤不匹配 |'
- en: '| date | Must be an integer number of days |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 必须是整数天数 |'
- en: '| week | Must be an integer number of weeks |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 周 | 必须是整数周数 |'
- en: '| datetime, datetime-local, and time | Must be an integer number of seconds
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 日期时间、本地日期时间和时间 | 必须是整数秒数 |'
- en: '| number and range | Must be an integer |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 数字和范围 | 必须是整数 |'
- en: Error messages
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误消息
- en: Nowadays, all modern browsers support most of the features of HTML5\. The functionality
    of the features is the same in all browsers but there are some differences; one
    of which is the default error message that the browser, displays.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有现代浏览器都支持大部分HTML5的功能。所有浏览器中功能的功能性是相同的，但也存在一些差异；其中之一就是浏览器显示的默认错误消息。
- en: 'Some of the default error messages displayed by various browsers are shown
    in the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 各种浏览器显示的默认错误消息如下截图所示：
- en: '![Error messages](img/4661OS_02_15.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![错误消息](img/4661OS_02_15.jpg)'
- en: However, we can change the default error message of the browser with the help
    of `setCustomvalidity`. Let us understand this with an example.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以通过`setCustomvalidity`来更改浏览器的默认错误消息。让我们通过一个例子来理解这一点。
- en: 'The following code changes the default error message of a browser to a custom
    message:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将把浏览器的默认错误消息更改为自定义消息：
- en: '[PRE16]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code will give the following output:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下输出：
- en: '![Error messages](img/4661OS_02_16.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![错误消息](img/4661OS_02_16.jpg)'
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about form validation and their types. We also learned
    the benefits of the different types of validations. We have also seen the various
    `<input>` types and attributes used in the validation of forms.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了表单验证及其类型。我们还了解了不同类型验证的好处。我们还看到了在表单验证中使用的各种<input>类型和属性。
- en: We have seen the difference between JavaScript validation and HTML5 validation
    by building a sample code.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过构建一个示例代码，看到了JavaScript验证和HTML5验证之间的区别。
- en: Next, we learned about constraint validations and the various APIs supported
    by HTML5.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了HTML5支持的约束验证和各种API。
- en: Lastly, we saw the various browser-specific default error messages and learned
    how to change the browser's default error message.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了各种特定于浏览器的默认错误消息，并学习了如何更改浏览器的默认错误消息。
