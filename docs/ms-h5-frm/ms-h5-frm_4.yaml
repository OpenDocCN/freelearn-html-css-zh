- en: Chapter 4. Connection with Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 数据库连接
- en: In the earlier chapters, we learned about forms, such as what forms are, how
    we can validate them, and how we can improve the look and feel of them, but what
    is the use of forms until they store information? In this chapter, we will learn
    how to store the user's input data into a database using PHP and MySQL.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们学习了表单，比如表单是什么，我们如何验证它们，以及我们如何改进它们的外观和感觉，但是表单有什么用，直到它们存储信息？在本章中，我们将学习如何使用PHP和MySQL将用户输入的数据存储到数据库中。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is PHP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP是什么
- en: What is MySQL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL是什么
- en: Spoofing and forging forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺骗和伪造表单
- en: Linking of forms to the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将表单链接到数据库
- en: PHP
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP
- en: PHP, which is also used as a general-purpose programming language, is basically
    a server-side scripting language, which is designed for web development. With
    a PHP processor module, PHP code is interpreted by a web server resulting in the
    generation of a web page.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PHP也被用作通用编程语言，基本上是一种服务器端脚本语言，专门设计用于网页开发。通过PHP处理器模块，PHP代码由Web服务器解释，生成网页。
- en: Rather than calling an external file to process data, PHP commands can be embedded
    directly into the HTML code. It can be used for standalone graphical applications
    and can be deployed on most of the web servers for almost every operating system
    and platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与调用外部文件来处理数据不同，PHP命令可以直接嵌入到HTML代码中。它可以用于独立的图形应用程序，并且可以部署在几乎所有操作系统和平台的大多数Web服务器上。
- en: All variables in PHP are case-sensitive, but user-defined functions, classes,
    and keywords such as if, else, while, echo, and many more are case-insensitive.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，所有变量是区分大小写的，但用户定义的函数、类和关键字（如if、else、while、echo等）是不区分大小写的。
- en: On the server, first a PHP script is executed and then the HTML result is sent
    back to the browser.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，首先执行PHP脚本，然后将HTML结果发送回浏览器。
- en: Through an HTML form, the ability of PHP to easily manipulate the information
    submitted by the user is one of the reasons why it is popular.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过HTML表单，PHP轻松操纵用户提交的信息的能力是其受欢迎的原因之一。
- en: 'To use PHP, we have to perform the following steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PHP，我们必须执行以下步骤：
- en: Get a web server that supports PHP and MySQL.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取支持PHP和MySQL的Web服务器。
- en: In this chapter, we will use WAMP (used for Windows operating systems) software,
    which automatically installs the Apache server, configures a MySQL database, and
    installs PHP-support applications for easy maintenance and configuration.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用WAMP（用于Windows操作系统）软件，它会自动安装Apache服务器，配置MySQL数据库，并安装PHP支持应用程序，以便进行简单的维护和配置。
- en: Then, install PHP and MySQL.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，安装PHP和MySQL。
- en: Syntax
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法
- en: The default extension for a PHP file is `.php` and a PHP script starts with
    `<?php` and ends with `?>`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PHP文件的默认扩展名是`.php`，PHP脚本以`<?php`开头，以`?>`结尾。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Including some PHP scripting code, a PHP file normally contains HTML tags. A
    semicolon is used to terminate PHP statements, and we do not need to use a semicolon
    to terminate the last line of a PHP block.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一些PHP脚本代码，PHP文件通常包含HTML标记。分号用于终止PHP语句，我们不需要使用分号来终止PHP块的最后一行。
- en: Form handling
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单处理
- en: The `$_GET` and `$_POST` PHP superglobals (built-in variables that are always
    available in all scopes) are used to collect the form data which is submitted
    by the user on clicking on the **Submit** button.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`$_GET`和`$_POST` PHP超全局变量（在所有范围中始终可用的内置变量）用于收集用户单击**提交**按钮时提交的表单数据。'
- en: The GET method
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GET方法
- en: In the `GET` method, the information from a form is visible to everyone; for
    example, all the variable names and the values are displayed in the URL. Moreover,
    using the `GET` method has limits on the amount of information that can be sent,
    which varies from browser to browser.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GET`方法中，表单中的信息对所有人都是可见的；例如，所有变量名和值都显示在URL中。此外，使用`GET`方法对可发送的信息量有限制，这个限制因浏览器而异。
- en: This method is useful when we need to bookmark the web page because the variables
    are displayed in the URL.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要将网页加入书签时，这种方法就很有用，因为变量会显示在URL中。
- en: We cannot use the `GET` method for sending sensitive data, such as passwords
    or credit card information.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能使用`GET`方法发送敏感数据，比如密码或信用卡信息。
- en: 'The following code is a simple HTML page:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个简单的HTML页面：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When a user fills the preceding form and clicks on the **Submit** button, the
    form data is sent for processing to a PHP file named `example.php`. The form data
    is sent with `method="get"`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户填写上述表单并单击**提交**按钮时，表单数据将被发送到名为`example.php`的PHP文件进行处理。表单数据将使用`method="get"`发送。
- en: 'The `example.php` file will look similar to the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`example.php`文件将类似于以下代码：'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The POST method
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: POST方法
- en: The information from a form is not visible to everyone in the `POST` method;for
    example, within the body of the HTTP request, all the variable names and the values
    are embedded. Moreover, using the `POST` method has no limitation on the amount
    of information to send.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`POST`方法中，表单中的信息对所有人都是不可见的；例如，在HTTP请求的正文中，所有变量名和值都被嵌入。此外，使用`POST`方法对可发送的信息量没有限制。
- en: This method is not useful when we need to bookmark the web page because the
    variables are not displayed in the URL.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要将网页加入书签时，这种方法就不太有用，因为变量不会显示在URL中。
- en: Moreover, while uploading the files to the server, the `POST` method also supports
    advanced functionality such as support for multipart binary input.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在将文件上传到服务器时，`POST`方法还支持高级功能，比如支持多部分二进制输入。
- en: We can use the `POST` method for sending sensitive data, such as passwords or
    credit card information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`POST`方法发送敏感数据，比如密码或信用卡信息。
- en: 'The following code is a simple HTML page:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个简单的HTML页面：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When a user fills the preceding form and clicks on the submit button, the form
    data is sent for processing to a PHP file named `example.php`. The form data is
    sent with `method="post"`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户填写上述表单并单击提交按钮时，表单数据将被发送到名为`example.php`的PHP文件进行处理。表单数据将使用`method="post"`发送。
- en: 'The `example.php` file looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`example.php`文件如下所示：'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Both the `GET` and `POST` methods populate the `$_GET` and `$_POST` arrays
    respectively. As these are superglobals, regardless of scope, they are always
    accessible, and they can be accessed from any class, function, or file without
    having to do anything special. These arrays are described as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET`和`POST`方法都分别填充`$_GET`和`$_POST`数组。由于这些是超全局变量，无论作用域如何，它们始终是可访问的，并且可以从任何类、函数或文件中访问，而无需进行任何特殊操作。这些数组描述如下：'
- en: '`$_GET`: This is an array of variable, via the URL parameters is passed to
    the current script'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_GET`: 这是一个变量数组，通过URL参数传递给当前脚本'
- en: '`$_POST`: This is an array of variable, via the HTTP POST method is passed
    to the current script'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$_POST`: 这是一个变量数组，通过HTTP POST方法传递给当前脚本'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`POST` is the most preferred way to send form data because of security concerns.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`是发送表单数据的最常用方式，因为有安全方面的考虑。'
- en: The filter method
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤方法
- en: The `filter` method filters data by either validating or sanitizing the input
    fields. It plays a very important role and is useful when the data source contains
    unknown data, such as custom input or user supplied input.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`方法通过验证或净化输入字段来过滤数据。当数据源包含未知数据时，如自定义输入或用户提供的输入时，它起着非常重要的作用并且非常有用。'
- en: For example, data entered through an HTML form in cases, such as survey forms,
    and new registrations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过HTML表单输入的数据，如调查表单和新注册。
- en: 'There are two main types of filtering:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种主要类型的过滤：
- en: Validation
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证
- en: Sanitization
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 净化
- en: Filtering of input data is one of the major concerns when it comes to security
    issues. External data includes input data from the user, cookies, web service
    data, or database query results. As all web forms and applications depend on external
    input so with filtering the input data we can be sure that our application gets
    valid input from the user.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数据的过滤是安全问题的主要关注点之一。外部数据包括来自用户、cookies、web服务数据或数据库查询结果的输入数据。由于所有的web表单和应用程序都依赖于外部输入，因此通过过滤输入数据，我们可以确保我们的应用程序从用户那里得到有效的输入。
- en: 'The following `filter` functions can be used to filter a variable:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的`filter`函数可以用来过滤一个变量：
- en: '`filter_var_array()`: It gets multiple variables with the same or different
    filters'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_var_array()`: 获取多个变量，并使用相同或不同的过滤器对它们进行过滤'
- en: '`filter_id()`: It returns the ID number of a specified filter'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_id()`: 返回指定过滤器的ID号'
- en: '`filter_var()`: It filters a single variable with a specified filter'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_var()`: 使用指定的过滤器过滤单个变量'
- en: '`filter_input()`: It gets one input variable by the name and optionally filters
    it'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_input()`: 通过名称获取一个输入变量，并可选择地对其进行过滤'
- en: '`filter_has_var()`: It checks whether a variable of a specified input type
    exists or not'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_has_var()`: 检查指定输入类型的变量是否存在'
- en: '`filter_input_array()`: It gets several input variables and filters them with
    the same or different filters'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_input_array()`: 获取多个输入变量，并使用相同或不同的过滤器对它们进行过滤'
- en: '`filter_list()`: It returns a list of all the supported filters'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_list()`: 返回所有支持的过滤器的列表'
- en: 'In the following example, we are validating an integer using the `filter_var()`
    function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们使用`filter_var()`函数验证一个整数：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, the `FILTER_VALIDATE_INT` filter is used to filter the
    variable. Since the integer is not valid, the output of the preceding code will
    be **Integer is invalid**, but if we try with a variable that is an integer, such
    as 819, the output will be **Integer is valid**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，使用`FILTER_VALIDATE_INT`过滤器来过滤变量。由于整数无效，上面代码的输出将是**整数无效**，但如果我们尝试使用一个整数变量，比如819，输出将是**整数有效**。
- en: Validating user input data
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证用户输入数据
- en: The `filter` method is used to validate the user input data. It returns the
    value **true** on success and **false** on failure.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`方法用于验证用户输入数据。成功时返回值为**true**，失败时返回值为**false**。'
- en: Strict format rules are followed for validating the IP address, URL, variables,
    or e-mail type.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 严格的格式规则用于验证IP地址、URL、变量或电子邮件类型。
- en: Now, in the following example, we will validate an input field of a form. Before
    we start, we will first check the presence of the required input data. Then, using
    the `filter_var()` function, we will validate the input data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下面的例子中，我们将验证表单的一个输入字段。在开始之前，我们将首先检查所需输入数据的存在。然后，使用`filter_var()`函数，我们将验证输入数据。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, an input `url` is sent using the `GET` method. It
    first checks if an input `email` variable of the `GET` type is present or not.
    When the input variable is present, it validates the URL.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，使用`GET`方法发送了一个输入`url`。它首先检查`GET`类型的输入`email`变量是否存在。当输入变量存在时，它验证URL。
- en: Sanitizing user input data
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 净化用户输入数据
- en: The main purpose of sanitizing is to allow or not to allow the specified characters
    in the string. It always returns a string value. It does not follow any data format
    rules.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 净化的主要目的是允许或不允许字符串中的指定字符。它始终返回一个字符串值。它不遵循任何数据格式规则。
- en: In the following example, we will validate an input field of a form. Before
    we start, we will first check the presence of the required input data. Then, using
    the `filter_var()` function, we will sanitize the input data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们将验证表单的一个输入字段。在开始之前，我们将首先检查所需输入数据的存在。然后，使用`filter_var()`函数，我们将净化输入数据。
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, an input `string` is sent using the `POST` method.
    It first checks if an input `string` variable of the `POST` type exists. When
    the input variable is present, it validates the string.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，使用`POST`方法发送了一个输入`string`。它首先检查`POST`类型的输入`string`变量是否存在。当输入变量存在时，它验证字符串。
- en: When the user inputs a bad input string such as `MasteringååHTML5ååForms`, after
    sanitizing, the same string will look like `MasteringHTML5Form`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入一个坏的输入字符串，比如`MasteringååHTML5ååForms`，经过净化后，同样的字符串会变成`MasteringHTML5Form`。
- en: The FILTER_CALLBACK filter
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FILTER_CALLBACK过滤器
- en: Using the `FILTER_CALLBACK` filter, it is possible to call a user-defined function
    and use it as a filter. We can get full control of data filtering using this.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`FILTER_CALLBACK`过滤器，可以调用用户定义的函数并将其用作过滤器。使用这个方法可以完全控制数据过滤。
- en: In a similar manner as when specifying an option, the function which we want
    to use to filter is specified.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与指定选项类似，指定要用于过滤的函数。
- en: We can use an existing PHP function or also create our own user-defined functions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用现有的PHP函数，也可以创建我们自己的用户定义函数。
- en: 'In the following example, we will create a user-defined function to replace
    all `*` symbols with whitespaces:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们将创建一个用户定义的函数，用于将所有的`*`符号替换为空格：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding code is:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出是：
- en: '![The FILTER_CALLBACK filter](img/4661OS_04_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![FILTER_CALLBACK过滤器](img/4661OS_04_04.jpg)'
- en: In the preceding example, at any place in a string and no matter how many times,
    all the `*` symbols are replaced with the whitespace characters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，字符串中的任何位置，无论多少次，所有的`*`符号都被替换为空格字符。
- en: In the preceding code, we first created a function to replace all the `*` symbols
    with whitespaces. Then, the `filter_var()` function is called with the `FILTER_CALLBACK`
    filter and an array containing the function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们首先创建了一个函数，用于将所有的`*`符号替换为空格。然后，调用`filter_var()`函数，使用`FILTER_CALLBACK`过滤器和包含函数的数组。
- en: Filter multiple inputs
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤多个输入
- en: Nowadays, almost every web form consists of more than one input field such as
    the registration page. When a form consists of more than one input field, calling
    `filter_var()` or `filter_input()` functions for every input field to validate
    or sanitize not only increases the size of the code but also the complexity. The
    remedy for this is to use the `filter_var_array()` or `filter_input_array()` functions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，几乎每个网络表单都包含多个输入字段，比如注册页面。当一个表单包含多个输入字段时，为了验证或清理，对每个输入字段调用`filter_var()`或`filter_input()`函数不仅增加了代码的大小，还增加了复杂性。解决这个问题的方法是使用`filter_var_array()`或`filter_input_array()`函数。
- en: In the following example, we will validate two input fields of a form. We will
    use the `filter_var_array()` function to filter these variables and use the `POST`
    method. The input is in the form of age and e-mail address.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们将验证表单的两个输入字段。我们将使用`filter_var_array()`函数来过滤这些变量，并使用`POST`方法。输入是年龄和电子邮件地址。
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, the input fields are sent using the `POST` method.
    Here, an array is set, which contains the name of the input variables, such as
    `age` and `email`. We have also used the filters on these input variables.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，输入字段是使用`POST`方法发送的。在这里，设置了一个包含输入变量名称（如`age`和`email`）的数组。我们还对这些输入变量使用了过滤器。
- en: First, we call the `filter_var_array()` function with the `POST` method input
    variables and the array we had set. Then, we validated the `age` and `email` variables
    in the `$output` variable for the invalid inputs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`filter_var_array()`函数和我们设置的数组以`POST`方法输入变量。然后，我们在`$output`变量中验证了`age`和`email`变量的无效输入。
- en: The second parameter of the `filter_input_array()` or `filter_var_array()` function
    can be a single filter ID or an array. All the values in the input array are filtered
    by the specified filter when the parameter is a single filter ID.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter_input_array()`或`filter_var_array()`函数的第二个参数可以是单个过滤器ID或数组。当参数是单个过滤器ID时，输入数组中的所有值都将被指定的过滤器过滤。'
- en: 'The following rules must be followed if the parameter is an array:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是一个数组，则必须遵循以下规则：
- en: The array value must be a filter ID or an array specifying the flags, filters,
    and options
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组值必须是过滤器ID或指定标志、过滤器和选项的数组
- en: There must be an associative array that contains an input variable as an array
    key, such as the `email` or `age` input variable
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须有一个包含输入变量的关联数组，如`email`或`age`输入变量
- en: MySQL
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL
- en: A database is a structured and organized collection of data. Every frontend
    application needs a compatible database which works as a backend for the application.
    It is organized for efficient storage and retrieval based on the nature of the
    data rather than the collection or retrieval methods. Adding a database to a website
    provides the means for dynamic content, flexibility and manageability, and all
    kinds of user interactivity, which without this could not be easily accomplished.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是一个结构化和组织良好的数据集合。每个前端应用程序都需要一个兼容的数据库，作为应用程序的后端。它是为了有效的存储和检索数据而组织的，而不是根据数据的性质或集合或检索方法。将数据库添加到网站提供了动态内容、灵活性和可管理性，以及各种用户交互，如果没有这个，将很难实现。
- en: To work with the corresponding data, database management system applications
    interact with the user, other applications, and the database itself. This application
    will work as a backend for managing all data. There are many well-known DBMSes,
    which include Microsoft SQL Server, Oracle, Sybase, MySQL, PostgreSQL, SQLite,
    Microsoft Access, dBASE, FoxPro, IBM's DB2, Libre Office Base, and FileMaker Pro.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理相应的数据，数据库管理系统应用程序与用户、其他应用程序和数据库本身进行交互。这个应用程序将作为管理所有数据的后端。有许多著名的数据库管理系统，包括Microsoft
    SQL Server、Oracle、Sybase、MySQL、PostgreSQL、SQLite、Microsoft Access、dBASE、FoxPro、IBM的DB2、Libre
    Office Base和FileMaker Pro。
- en: MySQL for PHP
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP的MySQL
- en: When working with PHP, MySQL is the most compatible database system. This database
    is an essential part of almost every open source PHP application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用PHP时，MySQL是最兼容的数据库系统。这个数据库是几乎每个开源PHP应用程序的重要组成部分。
- en: MySQL is named after *My*, daughter of *Michael Widenius*, co-founder of MySQL.
    It is developed, distributed, and supported by Oracle Corporation. It is a freely
    available and easy-to-download open source database management system. It is very
    fast, reliable, and supports standard **Structured Query Language** (**SQL**).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL是以*My*和*Michael Widenius*的女儿*My*的名字命名的，后者是MySQL的联合创始人。它由Oracle Corporation开发、分发和支持。这是一个免费的、易于下载的开源数据库管理系统。它非常快速、可靠，并支持标准的**结构化查询语言**（**SQL**）。
- en: 'SQL is used to access and modify data or information from a storage area called
    a database. It is most noted for its quick processing, proven reliability, and
    ease and flexibility of use. Developed by IBM, it is an English-like language
    that processes data in groups of records rather than one record at a time. The
    following are a few of the functions of SQL:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: SQL用于从称为数据库的存储区域访问和修改数据或信息。它以快速处理、可靠性和易用性和灵活性而闻名。由IBM开发，它是一种类似英语的语言，它以记录组的形式处理数据，而不是一次处理一条记录。以下是SQL的一些功能：
- en: Storing data
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储数据
- en: Modifying data
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改数据
- en: Retrieving data
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索数据
- en: Deleting data
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除数据
- en: Creating tables and other database objects
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表和其他数据库对象
- en: The data in MySQL is stored in tables. A table is a collection of related data,
    and all data is arranged in columns and rows. Databases are useful when storing
    information categorically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的数据存储在表中。表是相关数据的集合，所有数据都按列和行排列。在存储信息分类时，数据库非常有用。
- en: MySQL-PHP connectivity
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL-PHP连接
- en: While working with any database, the first question that arises is "How can
    we access data from the database?" To access any database, we first have to connect
    to that database.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用任何数据库时，首先出现的问题是“我们如何从数据库中访问数据？”要访问任何数据库，我们首先必须连接到该数据库。
- en: Open a connection to the MySQL server
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开到MySQL服务器的连接
- en: To make a connection, we first have to open a connection to the MySQL server.
    In PHP, this is done with the `mysqli_connect()` function. This function returns
    a resource which is a pointer to the database connection. It's also called a database
    handle.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立连接，我们首先必须打开到MySQL服务器的连接。在PHP中，可以使用`mysqli_connect()`函数来实现。这个函数返回一个资源，这个资源是指向数据库连接的指针。它也被称为数据库句柄。
- en: 'The syntax for the `mysqli_connect()` function is:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysqli_connect()`函数的语法是：'
- en: '`mysqli_connect(server,username,password,dbname);`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysqli_connect(server,username,password,dbname);`'
- en: 'It supports the following values:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持以下值：
- en: '`server`: It is either an IP address or a hostname.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`服务器`：它可以是IP地址或主机名。'
- en: '`password`: It is the password to log in with and is optional.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`密码`：这是用于登录的密码，是可选的。'
- en: '`username`: It is the MySQL username and is optional. Also, MySQL can have
    multiple users.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`用户名`：这是MySQL用户名，是可选的。此外，MySQL可以有多个用户。'
- en: '`dbname`: It is the default database to be used when performing queries and
    is optional.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbname`：这是在执行查询时要使用的默认数据库，是可选的。'
- en: 'For example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Close a connection
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭连接
- en: PHP will automatically close the connection when the script ends. But if we
    want to close the connection before it ends, we use the `mysqli_close()` function.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: PHP将在脚本结束时自动关闭连接。但是如果我们想在结束之前关闭连接，我们可以使用`mysqli_close()`函数。
- en: 'For example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create or select a database
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建或选择一个数据库
- en: Once our connection to a database is successfully created, the next step is
    to create or select any database that is going to be used with our application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功创建了与数据库的连接，下一步就是创建或选择将与我们的应用程序一起使用的任何数据库。
- en: Create a database
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个数据库
- en: For creating a database, we use the `CREATE DATABASE` statement to create a
    database table in MySQL.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建数据库，我们使用`CREATE DATABASE`语句在MySQL中创建数据库表。
- en: 'For example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Select a database
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个数据库
- en: For selecting an already present database, we use the `MYSQLI_SELECT_DB` statement
    to select a database in MySQL.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择已经存在的数据库，我们使用`MYSQLI_SELECT_DB`语句在MySQL中选择数据库。
- en: 'For example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a table
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个表
- en: Once we create or select a database, the next step is to create a table inside
    the database.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建或选择了一个数据库，下一步就是在数据库内创建一个表。
- en: '`CREATE TABLE` is used to create a table in MySQL.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`CREATE TABLE`用于在MySQL中创建表。'
- en: 'For example:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Primary keys
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主键
- en: To increase flexibility and reliability in a table, the primary key field must
    be present.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加表的灵活性和可靠性，必须存在主键字段。
- en: A table consists of many records and to uniquely identify each record, a primary
    key is used. Each record must have one value that is unique, and that unique value
    will act as the primary key. Also, a primary key value cannot be null, as to locate
    a record, the database engine requires a value. A primary key is a combination
    of columns, which uniquely identifies a record.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表由许多记录组成，为了唯一标识每个记录，使用主键。每个记录必须有一个唯一的值，这个唯一的值将作为主键。此外，主键值不能为null，因为为了定位记录，数据库引擎需要一个值。主键是列的组合，唯一标识记录。
- en: 'For example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: 'Let''s look at the `Employee` table that contains a record for each employee
    working in an organization:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下包含组织中每个员工记录的`Employee`表：
- en: '| Employee ID | Name | Designation | Location |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 员工ID | 名字 | 职位 | 地点 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 101 | Gaurav Gupta | Programmer Analyst | Pune |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 101 | Gaurav Gupta | 程序分析师 | 浦那 |'
- en: '| 102 | Gaurav Gupta | Programmer Analyst | Pune |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 102 | Gaurav Gupta | 程序分析师 | 浦那 |'
- en: The table consists of two records with the same name, designation, and location.
    The employee's unique Employee ID number will be a good choice for a primary key
    in the `Employee` table. So, we set the column `Employee ID` as a primary key
    for this table.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 该表包含两条记录，名称、职位和地点相同。员工的唯一员工ID号将是`Employee`表中主键的一个很好的选择。因此，我们将`Employee ID`列设置为此表的主键。
- en: 'The following snippet is a sample code to create a table by defining a column
    as a primary key:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段是一个示例代码，用于将列定义为主键来创建表：
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Spoofing and forging forms
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欺骗和伪造表单
- en: Nowadays, every website has an HTML form to complete for registration so that
    users can have access to that particular website. Since Internet crime is steadily
    increasing, how do we validate that the user who completed the form did so through
    your website? It is therefore necessary to know that no one has spoofed our form
    submission.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，每个网站都有一个HTML表单供用户完成注册，以便用户可以访问该特定网站。由于互联网犯罪不断增加，我们如何验证完成表单的用户是通过您的网站完成的？因此，有必要知道没有人伪造我们的表单提交。
- en: 'Before, we see how we can protect our forms from spoofing, let us see how we
    can spoof a form. By following these two ways we can alter the form submission:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看到如何保护我们的表单免受欺骗之前，让我们看看如何欺骗一个表单。通过以下两种方式，我们可以改变表单提交：
- en: Forging HTTP requests
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伪造HTTP请求
- en: Spoofing submissions
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺骗提交
- en: Forging HTTP requests
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪造HTTP请求
- en: We can type our own requests by using telnet to access port 80\. So, botheration
    of generating or modifying forms for every type of attack is overcome by this
    method as it might just use raw HTTP for alteration of form data. Because of this,
    we can say that this method has a higher degree of complexity than others.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用telnet访问端口80来输入我们自己的请求。因此，通过这种方法，我们可以克服为每种类型的攻击生成或修改表单的麻烦，因为它可能只是使用原始HTTP来更改表单数据。由于这个原因，我们可以说这种方法比其他方法更复杂。
- en: Forging HTTP requests is a more advanced form of automating attacks.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 伪造HTTP请求是一种更高级的自动化攻击形式。
- en: 'In the following example, we are requesting to log in to the example forum:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们要求登录到示例论坛：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To use the preceding mentioned requests, you will need to change a few items,
    which are:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用前面提到的请求，您需要更改一些项目，包括：
- en: Change `myname` to be our username
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`myname`更改为我们的用户名
- en: Change `mypass` to be our password
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`mypass`更改为我们的密码
- en: Change `session_id` to the necessary value
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`session_id`更改为必要的值
- en: Change `Content-Length` to be the new length of the `POST` data
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Content-Length`更改为`POST`数据的新长度
- en: Spoofing submissions
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欺骗提交
- en: 'Let us assume that the following HTML form is located at `http://sampledomain.com/form.php`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下HTML表单位于`http://sampledomain.com/form.php`：
- en: '[PRE17]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We assume that we will be able to refer to `$_POST[''browser'']` and it will
    have a value of either of the two options `chrome` or `firefox`. Now, if the user
    selects `chrome`, the request will look something similar to the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设我们将能够引用`$_POST['browser']`，并且它将具有两个选项`chrome`或`firefox`中的一个值。现在，如果用户选择`chrome`，请求将类似于以下内容：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A user can save the form from the browser to the local machine (desktop or
    laptop) then open the saved HTML file and make the following changes to it:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以将表单从浏览器保存到本地机器（台式机或笔记本电脑），然后打开保存的HTML文件并对其进行以下更改：
- en: Modify the `action` tag so that it now has the full URL to the form
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`action`标签，使其现在具有表单的完整URL
- en: Remove the `select` tag and replace it with a `textarea` tag in the form
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中删除`select`标签，并用`textarea`标签替换它
- en: 'Now our form will look similar to the following code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的表单将类似于以下代码：
- en: '[PRE19]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The user can now submit any value of `$_POST['myvar']` with these simple changes
    to the form. Moreover, there is no way to prevent the user who manipulated our
    form from submitting unexpected form variables or anything that can be achieved
    with an HTML form.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以通过对表单进行这些简单更改来提交任何值`$_POST['myvar']`。此外，没有办法阻止操纵我们的表单的用户提交意外的表单变量或任何可以通过HTML表单实现的内容。
- en: There are solutions available to prevent forms from spoofing. It is from a strict
    protocol perspective; the only thing we know is that HTTP requests and responses
    are going back and forth. There is no clear and concise way to determine that
    a form submission has not been spoofed.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有解决方案可用于防止表单欺骗。从严格的协议角度来看，我们唯一知道的是HTTP请求和响应来回传递。没有明确而简洁的方法来确定表单提交是否被欺骗。
- en: 'Using the following two ways, we can prevent forms from spoofing as they reduce
    the possibility of unwanted values that are submitted by following a general architecture
    for handling data and forms:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下两种方式，我们可以防止表单欺骗，因为它们减少了通过遵循处理数据和表单的一般架构提交的不需要的值的可能性：
- en: Shared secrets
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享秘密
- en: Setting expectations
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设定期望
- en: Shared secrets
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享秘密
- en: Shared secrets are also referred to as one-time tokens or hashes. We create
    a secret that is only known by the server and the user. In this, the implementations
    vary widely but they share the characteristics of being transparent to the users
    and are difficult to exploit.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 共享秘密也被称为一次性令牌或哈希。我们创建一个只有服务器和用户知道的秘密。在这方面，实现方式各不相同，但它们共享的特征是对用户透明且难以利用。
- en: 'One of the implementation methods is that in the user''s session, we will store
    the secret as shown in the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种实现方法是，在用户会话中，我们将把秘密存储如下代码所示：
- en: '[PRE20]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, it can be used as a hidden form variable in the form like:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它可以作为表单中的隐藏表单变量使用，如下所示：
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Every time we display the form, we would regenerate this secret so that the
    user always has a current and correct secret value. This helps in preventing **CSRF**
    (**Cross-Site Request Forgery**).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每次显示表单时，我们都会重新生成这个秘密，以便用户始终具有当前和正确的秘密值。这有助于防止**CSRF**（跨站点请求伪造）。
- en: The page which will open can check this by comparing the secret sent by the
    form with the secret that was stored in the corresponding session variable.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 打开的页面可以通过比较表单发送的秘密和存储在相应会话变量中的秘密来检查这一点。
- en: Taking this further, we can even enhance the security of this method by restricting
    the timeout window rather than relying on the session timeout, which can be too
    large for your needs.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步进行，我们甚至可以通过限制超时窗口而不是依赖会话超时来增强此方法的安全性，后者可能对您的需求来说太大。
- en: Setting expectations
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设定期望
- en: 'An application with a best architecture always assumes that:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 具有最佳架构的应用程序总是假设：
- en: '**We are aware of what we are sending out**: It means we should keep track
    of the forms we have uploaded on the website and develop a policy for accepting
    form submissions, such as time outs, multiple forms per user ID, multiple submissions,
    and not accepting forms we don''t expect. This can be implemented using tokens.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我们知道我们正在发送什么**：这意味着我们应该跟踪我们在网站上上传的表单，并制定接受表单提交的政策，例如超时、每个用户ID的多个表单、多次提交以及不接受我们不期望的表单。这可以使用令牌来实现。'
- en: '**We are aware of what the return values will be**: It is important, as the
    `<select>` field contains certain values, we can get back something totally different,
    such as PHP code, SQL, or others:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我们知道返回值将是什么**：这很重要，因为`<select>`字段包含某些值，我们可能会得到完全不同的东西，比如PHP代码、SQL或其他内容：'
- en: To accept the form as valid, we must know the fields we need to have back
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要接受表单为有效，我们必须知道需要返回的字段
- en: We must restrict exactly what values we would accept as input
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须严格限制我们接受的输入值
- en: We must always minimize taking data from forms or from an external source and
    using it directly in our database queries or other internal parts of the application
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须始终最小化从表单或外部来源获取数据并直接在数据库查询或应用程序的其他内部部分中使用它
- en: Linking a form to a server
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将表单链接到服务器
- en: The basic purpose of form is to accept user data or store data from the users,
    which can be accessed in various ways, such as a survey, a new registration, while
    making payments, and much more. So here, in this section, we will learn how to
    store the user's input data into the database.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表单的基本目的是接受用户数据或存储用户数据，可以通过各种方式访问，例如调查、新注册、付款等。因此，在本节中，我们将学习如何将用户的输入数据存储到数据库中。
- en: We will reuse our form which we styled in [Chapter 3](ch03.html "Chapter 3. Styling
    the Forms"), *Styling the Forms*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用我们在[第3章](ch03.html "第3章。美化表单")中设计的表单，*美化表单*。
- en: We will store the form data into a MySQL database using `phpMyAdmin` (open sourcetool
    to handle the administration of MySQL over World Wide Web).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`phpMyAdmin`（用于处理MySQL管理的开源工具）将表单数据存储到MySQL数据库中。
- en: For operating systems such as Linux, we use a XAMPP server.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如Linux之类的操作系统，我们使用XAMPP服务器。
- en: 'The following is the server-side scripting code written in the same HTML page
    but the HTML file extension `.html` is changed to `.php`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在同一HTML页面中编写的服务器端脚本代码，但HTML文件扩展名`.html`已更改为`.php`：
- en: '[PRE22]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Before executing the code, our prerequisite is that first we have to create
    and select one database and then create a table to store the information. After
    that, we perform some validations on the form inputs, and then finally, we implement
    the `Insert` query so as to store the user's input data.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行代码之前，我们的先决条件是首先创建和选择一个数据库，然后创建一个表来存储信息。之后，我们对表单输入执行一些验证，最后，我们实现`Insert`查询以存储用户的输入数据。
- en: 'The following screenshot displays the error messages when the user does not
    enter any data and submits the form:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户未输入任何数据并提交表单时显示的错误消息的屏幕截图：
- en: '![Linking a form to a server](img/4661OS_04_01.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![将表单链接到服务器](img/4661OS_04_01.jpg)'
- en: 'The following is the HTML code. The code remains the same but we have added
    the `method= "POST"` attribute in the `<form>` tag and the `name` attribute in
    the `<input>` types:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML代码。代码保持不变，但我们在`<form>`标签中添加了`method="POST"`属性和在`<input>`类型中添加了`name`属性：
- en: '[PRE23]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: By clicking on the **Submit** button, we can either redirect the user to a new
    page, or populate a message on the screen, or simply write a message on the screen
    giving confirmation that our form has been submitted successfully.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**提交**按钮，我们可以将用户重定向到新页面，或在屏幕上显示消息，或简单地在屏幕上写一条消息，确认我们的表单已成功提交。
- en: 'The following screenshot displays the form after the user has entered the values
    in the form:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户在表单中输入数值后的屏幕截图：
- en: '![Linking a form to a server](img/4661OS_04_02.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![将表单链接到服务器](img/4661OS_04_02.jpg)'
- en: 'The following snippet is the MySQL code:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL代码片段：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, first we created a database and then we created a table
    to store the user's input data.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，首先我们创建了一个数据库，然后创建了一个表来存储用户的输入数据。
- en: 'The following screenshot displays the values stored into the database after
    clicking on the **Submit** button:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是点击**提交**按钮后存储在数据库中的数值的屏幕截图：
- en: '![Linking a form to a server](img/4661OS_04_03.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![将表单链接到服务器](img/4661OS_04_03.jpg)'
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to store data into a database. We also learned
    about the basics of PHP and MySQL used for storing the data that the users input.
    We also saw some ways of how we can spoof a form and how we can prevent spoofing
    of forms.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将数据存储到数据库中。我们还学习了用于存储用户输入数据的PHP和MySQL的基础知识。我们还了解了一些欺骗表单的方法以及如何防止表单的欺骗。
- en: Then, with the help of some code, we learned a practical implementation of storing
    form data by reusing the example we built in earlier chapters.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，借助一些代码，我们学习了通过重用我们在早期章节中构建的示例来存储表单数据的实际实现。
