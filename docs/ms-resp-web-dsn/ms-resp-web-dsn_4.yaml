- en: Chapter 4. CSS Grids, CSS Frameworks, UI Kits, and Flexbox for RWD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。CSS网格、CSS框架、UI工具包和Flexbox用于RWD
- en: '**Responsive Web Design** (**RWD**) has introduced a new layer of work for
    everyone building responsive websites and apps. When we have to test our work
    on different devices and in different dimensions, wherever the content breaks,
    we need to add a breakpoint and test again.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**响应式网页设计** (**RWD**)为所有构建响应式网站和应用程序的人引入了一层新的工作。当我们必须在不同设备和不同尺寸上测试我们的工作时，无论内容在哪里中断，我们都需要添加一个断点并重新测试。'
- en: This can happen many, many times. So, building a website or app will take a
    bit longer than it used to.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会发生很多次。因此，构建网站或应用程序将比以前花费更多的时间。
- en: To make things a little more interesting, as web designers and developers, we
    need to be mindful of how the content is laid out at different dimensions and
    how a grid can help us structure the content to different layouts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更有趣，作为网页设计师和开发人员，我们需要注意内容在不同尺寸上的布局以及网格如何帮助我们将内容结构化到不同的布局中。
- en: Now that we have mentioned grids, have you ever asked yourself, "what do we
    use a grid for anyway?"
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们提到了网格，你有没有问过自己，“我们到底用网格做什么？”
- en: To borrow a few terms from the design industry and answer that question, we
    use a grid to allow the content to have rhythm, proportion, and balance. The objective
    is that those who use our websites/apps will have a more pleasant experience with
    our content, since it will be easier to scan (rhythm), easier to read (proportion)
    and organized (balance).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 借用设计行业的一些术语来回答这个问题，我们使用网格来让内容具有节奏、比例和平衡。目标是让使用我们网站/应用的人对我们的内容有更愉快的体验，因为它将更容易扫描（节奏）、更容易阅读（比例）和有组织（平衡）。
- en: In order to speed up the design and build processes while keeping all the content
    properly formatted in different dimensions, many authors and companies have created
    CSS frameworks and CSS grids that contain not only a grid but also many other
    features and styles than can be leveraged by using a simple class name.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快设计和构建过程，同时保持所有内容在不同尺寸下正确格式化，许多作者和公司创建了包含网格以及许多其他功能和样式的CSS框架和CSS网格，可以通过使用简单的类名来利用。
- en: As time goes by and browsers start supporting more and more CSS3 properties,
    such as Flexbox, it'll become easier to work with layouts. This will render the
    grids inside CSS frameworks almost unnecessary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，浏览器开始支持越来越多的CSS3属性，比如Flexbox，使用布局将变得更加容易。这将使CSS框架中的网格几乎变得不必要。
- en: Let's see what CSS grids, CSS frameworks, UI kits, and Flexbox are all about
    and how they can help us with RWD.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看CSS网格、CSS框架、UI工具包和Flexbox是什么，以及它们如何帮助我们实现RWD。
- en: 'In this chapter, we''re going to cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a grid?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是网格？
- en: CSS grids
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS网格
- en: The pros and cons of CSS grids for RWD
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS网格在RWD中的优缺点
- en: CSS frameworks
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS框架
- en: UI kits
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI工具包
- en: The pros and cons of CSS frameworks for RWD
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS框架在RWD中的优缺点
- en: Creating a custom CSS grid
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义CSS网格
- en: Building a sample page with the custom CSS grid
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义CSS网格构建示例页面
- en: Using Flexbox
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flexbox
- en: Building a sample page with Flexbox
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flexbox构建示例页面
- en: What is a grid?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是网格？
- en: A grid is a set of visual guidelines (vertical, horizontal, or both, hence the
    term *grid*) that help define where elements can be placed. Once the elements
    have been placed, we end up with a *layout*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 网格是一组视觉指南（垂直、水平或两者兼有，因此称为*网格*），它们有助于定义元素的放置位置。一旦元素被放置，我们就得到了一个*布局*。
- en: The benefit of using a grid is that the elements placed on it will have a harmonious
    flow along the pages, enhancing the user experience in terms of legibility, layout
    consistency, and good proportions between the elements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网格的好处是放置在上面的元素将在页面上具有和谐的流动，增强用户体验，提高可读性、布局一致性和元素之间的良好比例。
- en: CSS grids
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS网格
- en: A CSS grid is basically a compound of vertical guidelines that form columns.
    The properties of these columns are defined in a CSS file. This file contains
    a list of classes with specific widths that match the amount of columns that a
    specific grid is built for.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CSS网格基本上是由形成列的垂直指南的组合。这些列的属性在CSS文件中定义。该文件包含一个具有特定宽度的类列表，与特定网格构建的列数相匹配。
- en: 'We''ve seen this before in [Chapter 3](ch03.html "Chapter 3. Mobile-first or
    Desktop-first?"), *Mobile-first or Desktop-first?* when we used the **980 Grid
    System** (**980GS**) to retrofit an old, fixed-width site. Here''s the SCSS file
    again:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。Mobile-first or Desktop-first?")中已经见过了，当时我们使用**980 Grid
    System** (**980GS**)来改造一个旧的固定宽度站点。这是SCSS文件：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that we turned 960GS into 980GS because the content would look too
    close to the edge of the main container with only 10px gutters on the left and
    right of that main container. So, we added 10px more to each side and made the
    main container 980px wide.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们将960GS变成了980GS，因为内容看起来离主容器的边缘太近，主容器的左右各有10px的间距。因此，我们在每一侧都添加了10px，并将主容器的宽度设为980px。
- en: Because we are mastering RWD with HTML5 and CSS3, let's look at that same 980GS
    with percentages to make it fluid.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在使用HTML5和CSS3掌握RWD，让我们看看相同的980GS，使用百分比使其流动起来。
- en: The RWD magic formula is *(target ÷ context) x 100 = result %*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: RWD的魔法公式是*(目标 ÷ 上下文) x 100 = 结果 %*。
- en: 'Our context in this case is 980px, as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的上下文是980px，如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In web design, grids are usually made with 12 or 16 columns. 960GS is pretty
    much one of the most famous ones, albeit it's always been a fixed-width grid.
    But other authors have ported it to make it fluid, such as the *Fluid 960 Grid
    System*, but not responsive. The 960GS also has the option of 24 columns, but
    it's not as popular as the 12 column version.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页设计中，网格通常由12或16列组成。960GS几乎是最著名的之一，尽管它一直是一个固定宽度的网格。但其他作者已经将其移植成流动的，比如*Fluid
    960 Grid System*，但不是响应式的。960GS还有24列的选项，但不像12列版本那么受欢迎。
- en: There are other grids for web design that do not have a defined frame width
    or number of columns, instead these grids can have an infinite amount of columns,
    such as the *Frameless Grid*, which is based on **Adaptive Web Design** (**AWD**).
    This means that the width of the main container *snaps* to a specific breakpoint
    calculated by the number of columns that fit in it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他用于网页设计的网格，它们没有定义的框架宽度或列数，而是可以有无限数量的列，比如基于**自适应Web设计**（**AWD**）的*无框网格*。这意味着主容器的宽度*捕捉*到由它容纳的列数计算出的特定断点。
- en: The pros and cons of CSS grids for RWD
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS网格用于RWD的优缺点
- en: The idea behind listing pros and cons of CSS grids for RWD is that we should
    be able to make the most informed decision when we plan to use a certain type
    of grid. It helps clarify the clients' expectations and ours, because using a
    certain grid will impact the timeline, design, layout, and many UX factors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列出CSS网格用于RWD的优缺点的想法是，当我们计划使用某种类型的网格时，我们应该能够做出最明智的决定。这有助于澄清客户的期望和我们自己的期望，因为使用某种网格将影响时间表、设计、布局和许多UX因素。
- en: 'The advantages are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 优点如下：
- en: Laying out elements is a lot easier because the columns serve as guidelines
    for placement.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局元素变得更容易，因为列作为放置的指南。
- en: If using a prebuilt CSS grid, there's no need to do any of the math to deal
    with the column and gutter widths. It's already taken care of by the author of
    the grid.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用预先构建的CSS网格，则无需进行任何数学计算来处理列和间距宽度。这已经由网格的作者处理了。
- en: We can build faster, since all we need to do is add specific classes to our
    containers in our HTML and—for the most part—the layout will happen instantly.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以更快地构建，因为我们只需要在我们的HTML容器中添加特定的类，而大部分布局将立即发生。
- en: Understanding grids in web design is relatively simple, so enhancing/editing
    someone else's markup and code in an already built project is less painful than
    if they hadn't used a CSS grid at all.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解网页设计中的网格相对简单，因此在已建立的项目中增强/编辑其他人的标记和代码比如果根本没有使用CSS网格要少痛苦。
- en: If the grid is responsive or adaptive, we don't have to worry too much about
    the breakpoints.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果网格是响应式或自适应的，我们就不必太担心断点。
- en: If we are using a third-party CSS grid, any cross-browser issues have already
    been addressed.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用第三方CSS网格，任何跨浏览器问题都已经得到解决。
- en: 'The disadvantages are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: Some CSS grids have a steeper learning curve than others.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些CSS网格的学习曲线比其他的陡峭。
- en: With many CSS grids, we are locked into using the name conventions the author
    created.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于许多CSS网格，我们被锁定在作者创建的命名约定中。
- en: We may have to change/adapt the way we write our HTML.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能需要改变/调整我们编写HTML的方式。
- en: There are so many CSS grids to choose from that it can be overwhelming for some.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有太多CSS网格可供选择，对一些人来说可能会感到不知所措。
- en: If our content breaks at certain points the grid doesn't support, we have to
    spend time amending the original grid to fit each individual situation.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们的内容在网格不支持的某些点上中断，我们必须花时间修改原始网格以适应每种情况。
- en: CSS frameworks
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS框架
- en: A CSS framework is a group of prebuilt features that basically help speed up
    frontend development for the Web. A lot of the small but important details have
    already been taken care of by the authors of these CSS frameworks, so those who
    decide to use them can focus on their tasks at hand while leaving a lot of the
    decisions to the CSS frameworks themselves.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CSS框架是一组预构建功能，基本上帮助加快Web前端开发。这些CSS框架的作者已经处理了许多重要但细微的细节，因此决定使用它们的人可以专注于手头的任务，同时将许多决定留给CSS框架本身。
- en: Many developers and designers believe (I do too) that the true value of any
    CSS framework is their CSS grids, and sometimes we go to great lengths to extract
    the CSS grid and customize it to fit our needs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员和设计师相信（我也是）任何CSS框架的真正价值在于它们的CSS网格，有时我们会不遗余力地提取CSS网格并自定义它以满足我们的需求。
- en: In this book, we're going to focus on the CSS grids to master RWD rather than
    stripping one out from a CSS framework or UI kit (if it happens to offer one).
    We'll get to this shortly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将专注于CSS网格来掌握RWD，而不是从CSS框架或UI工具包中剥离一个（如果它确实提供一个）。我们很快就会谈到这一点。
- en: 'The following list describes some of the features and characteristics of CSS
    frameworks:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了一些CSS框架的特点和特征：
- en: CSS frameworks are focused solely on web-based development, not native mobile
    apps.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS框架专注于基于Web的开发，而不是原生移动应用程序。
- en: CSS frameworks always offer a CSS grid.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS框架总是提供CSS网格。
- en: Many of them also offer user interface components as well (just like a UI kit),
    for example, sliders, paginations, navigation bars, typography, buttons, and so
    on in the form of HTML and CSS.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多UI工具包还提供用户界面组件（就像UI工具包一样），例如滑块、分页、导航栏、排版、按钮等，以HTML和CSS的形式。
- en: Both CSS frameworks and web-oriented UI kits can be called *frontend frameworks*.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS框架和面向Web的UI工具包都可以称为*前端框架*。
- en: UI kits
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI工具包
- en: Similar to CSS frameworks, there is another type of frontend framework called
    UI kits. However, UI kits can be a breed of their own.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与CSS框架类似，还有另一种称为UI工具包的前端框架。然而，UI工具包可以是一种独特的类型。
- en: Truth be told, sometimes differentiating between a CSS framework and a UI kit
    is difficult. But don't delve too much into which one is which, the important
    thing is to understand why we're using them in the first place and how they can
    help us build better and faster responsive sites and apps.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，有时很难区分CSS框架和UI工具包。但不要过多地深究哪一个是哪一个，重要的是要理解我们首先为什么使用它们以及它们如何帮助我们构建更好、更快速的响应式网站和应用程序。
- en: 'The following list describes some of the features and characteristics of UI
    kits:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了一些UI工具包的特点和特征：
- en: 'There are basically two types of UI kits: those that are built with web technologies
    (HTML and CSS) and can be used to prototype web-based applications, and those
    that are made of (usually) Photoshop (PSD) files to help mock up and design native
    mobile apps.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本上有两种类型的UI工具包：一种是使用Web技术（HTML和CSS）构建的，可以用来原型化基于Web的应用程序，另一种是由（通常是）Photoshop（PSD）文件制作的，用来帮助设计本机移动应用程序的模拟和设计。
- en: Very few web-oriented UI kits offer a grid of some sort.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很少有面向网络的UI工具包提供某种网格。
- en: UI kits are focused on providing user interface components such as sliders,
    paginations, navigation bars, dialog boxes, overlays/modals, buttons, typography,
    tooltips, lists, accordions, tab systems, carousels/slideshows, forms, and so
    on.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI工具包专注于提供用户界面组件，如滑块、分页、导航栏、对话框、覆盖/模态、按钮、排版、工具提示、列表、手风琴、选项卡系统、旋转木马/幻灯片、表单等。
- en: In a web-oriented UI kit, the architecture is very modular. This means that
    each component can be incorporated into any CSS framework.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在面向网络的UI工具包中，架构非常模块化。这意味着每个组件都可以并入任何CSS框架。
- en: The pros and cons of CSS frameworks for RWD
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RWD的CSS框架的优缺点
- en: 'With RWD as our main driver for any decisions we make in terms of layout versus
    screen real estate, let''s take a look at what the good and not so good things
    are about CSS frameworks:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以RWD作为我们在布局与屏幕房地产方面做出的任何决定的主要驱动力，让我们来看看CSS框架的优点和不足之处：
- en: 'The advantages are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 优点如下：
- en: They are very useful to rapidly build responsive prototypes rather than showing
    static wireframes.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们非常有用，可以快速构建响应式原型，而不是显示静态线框。
- en: Cross-browser issues are already taken care of.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨浏览器问题已经得到解决。
- en: They force you, in a good way, to create grid-based layouts.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们以一种好的方式，迫使你创建基于网格的布局。
- en: They offer a solid starting point to build on top of.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们为构建提供了一个坚实的起点。
- en: The modularity allows you to handpick the components you want. For example,
    you can just use the CSS grid module or you can use the `forms` module.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化允许你手动选择你想要的组件。例如，你可以只使用CSS网格模块，或者你可以使用`forms`模块。
- en: Changing the styling to fit your design(s) is relatively easy.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改样式以适应你的设计相对容易。
- en: If you aren't too good at CSS, you can still use a CSS framework to implement
    your own designs.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你对CSS不太擅长，你仍然可以使用CSS框架来实现自己的设计。
- en: 'The disadvantages are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点如下：
- en: They can bloat your project(s) with CSS that you will never use.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能会用你永远不会使用的CSS来膨胀你的项目。
- en: They have a large footprint if you decide to use the entire CSS framework.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你决定使用整个CSS框架，它们的占用空间很大。
- en: You might need to change your habits and the way you write your HTML and CSS
    to fit the CSS framework you're using.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能需要改变你的习惯和编写HTML和CSS的方式，以适应你正在使用的CSS框架。
- en: They can be opinionated, so if you don't like the way things are named you have
    very little choice for customization.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能会持有自己的观点，所以如果你不喜欢事物的命名方式，你几乎没有选择自定义。
- en: Customizing a CSS framework is doable, but it can be very time consuming and
    dangerous. Change a name to something else and there's almost no way to know what
    the impact is going to be on other parts of the framework.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制CSS框架是可行的，但可能非常耗时和危险。将一个名称更改为其他名称，几乎没有办法知道对框架的其他部分会产生什么影响。
- en: If the default styling is not changed to fit your brand/designs, your site or
    app will not be unique and will look like everyone else's, losing credibility
    in front of users.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果默认样式没有改变以适应你的品牌/设计，你的网站或应用将不会是独特的，看起来会像其他人的，失去了用户的信任。
- en: If you need to build something simple, using a CSS framework is overkill.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要构建简单的东西，使用CSS框架就太过了。
- en: Every website/app or project is different, so you may end up spending a lot
    of time changing and overriding properties for every single project.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个网站/应用程序或项目都是不同的，所以你可能最终会花费大量时间为每个项目更改和覆盖属性。
- en: They try to solve every frontend problem.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们试图解决每一个前端问题。
- en: 'Now that we''ve seen the pros and cons of CSS grids, CSS frameworks and UI
    kits it''s time to make a decision and answer this question: which methodology
    is best for RWD?'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了CSS网格、CSS框架和UI工具包的优缺点，是时候做出决定并回答这个问题了：哪种方法对RWD最好？
- en: 'The answer isn''t the most encouraging, I admit it, but it''s the truth: it
    depends.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 答案并不是最令人鼓舞的，我承认，但这是事实：这取决于情况。
- en: If we're freelancing and doing everything ourselves, or working in a very small
    group, it may not be necessary to use any frameworks at all. We can custom build
    something based on the same principles major frameworks have been built on. Obviously,
    we would want to automate any repetitive processes so we use our time efficiently.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们是自由职业者，自己做所有事情，或者在一个非常小的团队中工作，也许根本不需要使用任何框架。我们可以根据主要框架建立的原则自定义构建一些东西。显然，我们希望自动化任何重复的过程，以便高效利用我们的时间。
- en: But if we're working in a large team, a melting pot of web professional with
    in-house and off-shore resources, maybe using a framework can be helpful. This
    is because everyone will need to adhere to the framework's structures so that
    all things are consistent.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们在一个庞大的团队中工作，一个由内部和离岸资源组成的网络专业人士的大熔炉，也许使用框架会有所帮助。这是因为每个人都需要遵守框架的结构，以确保一切都是一致的。
- en: Creating a custom CSS grid
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义CSS网格
- en: Since we're mastering RWD, we have the luxury of creating our own CSS grid.
    However, we need to work smart, not hard. So what we're going to do is leverage
    the *Variable Grid System* app and combine its result with our own approach, making
    a mobile-first, fluid, custom build, and solid CSS grid from which we can create
    robust responsive designs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在掌握RWD，我们有奢侈的创造我们自己的CSS网格。然而，我们需要聪明地工作，而不是努力地工作。所以我们要做的是利用*可变网格系统*应用程序，并将其结果与我们自己的方法相结合，制作一个移动优先、流动、自定义构建和坚实的CSS网格，从中我们可以创建强大的响应式设计。
- en: 'Let''s lay out our CSS grid requirements:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出我们的CSS网格需求：
- en: It should have 12 columns.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该有12列。
- en: It should be 1200px wide to account for 1280px screens.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是1200像素宽，以适应1280像素的屏幕。
- en: It should be fluid, with relative units (percentages) for the columns and gutters.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是流体的，使用相对单位（百分比）来定义列和间距。
- en: It should use the mobile-first approach.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该使用移动优先方法。
- en: It should use the SCSS syntax.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该使用SCSS语法。
- en: It should be reusable for other projects.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该可以重复使用在其他项目中。
- en: It should be simple to use and understand.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该简单易懂。
- en: It should be easily scalable.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该很容易扩展。
- en: 'Here''s what our 1200 pixel wide and 12-column width 20px grid looks like:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的1200像素宽和12列宽20px的网格的样子：
- en: '![Creating a custom CSS grid](img/B02102_04_00.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义CSS网格](img/B02102_04_00.jpg)'
- en: The left and right padding in black are 10px each. We'll convert those 10px
    into percentages at the end of this process.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 左右两侧的填充都是10px。我们将在此过程结束时将这10px转换为百分比。
- en: Doing the math
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行数学计算
- en: 'We''re going to use the RWD magic formula: *(target ÷ context) x 100 = result
    %*.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用RWD魔法公式：*(目标 ÷ 上下文) x 100 = 结果 %*。
- en: 'Our context is going to be 1200px. So let''s convert one column: *80 ÷ 1200
    x 100 = 6.67%*.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的上下文将是1200px。所以让我们转换一个列：*80 ÷ 1200 x 100 = 6.67%*。
- en: For two columns, we have to account for the gutter that is 20px. In other words,
    we can't say that two columns are exactly 160px. That's not entirely correct.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两列，我们必须考虑20px的间距。换句话说，我们不能说两列确切地是160px。这并不完全正确。
- en: 'Two columns are: *80px + 20px + 80px = 180px*.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 两列分别是：*80px + 20px + 80px = 180px*。
- en: 'Let''s now convert two columns: *180 ÷ 1200 x 100 = 15%*.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转换两列：*180 ÷ 1200 x 100 = 15%*。
- en: 'For three columns, we now have to account for two gutters: *80px + 20px + 80px
    + 20px + 80px = 280px*.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于三列，现在我们必须考虑两个间距：*80px + 20px + 80px + 20px + 80px = 280px*。
- en: 'Let''s now convert three columns: *280 ÷ 1200 x 100 = 23.33%*.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转换三列：*280 ÷ 1200 x 100 = 23.33%*。
- en: Can you see the pattern now? Every time we add a column, all that we need to
    do is add 100 to the value. This value accounts for the gutters too!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你能看到模式了吗？每次我们添加一列，我们只需要将值增加100。这个值也包括了间距！
- en: Check the screenshot of the grid we saw moments ago, you can see the values
    of the columns increment by 100.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 检查我们刚才看到的网格的屏幕截图，你可以看到列的值递增100。
- en: 'So, all the equations are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，所有的方程式如下：
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s create the SCSS for the 12-column grid:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为12列网格创建SCSS：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using hyphens (`-`) to separate words allows for easier selection of the terms
    when editing the code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连字符（`-`）来分隔单词可以更容易地选择代码编辑时的术语。
- en: Adding the UTF-8 character set directive and a Credits section
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加UTF-8字符集指令和Credits部分
- en: 'Don''t forget to include the UTF-8 encoding directive at the top of the file
    to let browsers know the character set we''re using. Let''s spruce up our code
    by adding a Credits section at the top. The code is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在文件顶部包含UTF-8编码指令，让浏览器知道我们正在使用的字符集。让我们通过在顶部添加一个Credits部分来装饰我们的代码。代码如下：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Notice the Credits are commented with CSS style comments: `/* */`. These types
    of comments, depending on the way we compile our SCSS files, don''t get stripped
    out. This way, the Credits are always visible so that others know who authored
    the file. This may or may not work for teams. Also, the impact on file size of
    having the Credits display is imperceptible, if any.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Credits是用CSS样式注释注释的：`/* */`。这种类型的注释，取决于我们如何编译我们的SCSS文件，不会被剥离。这样，Credits总是可见的，这样其他人就知道谁编写了文件。这对团队可能有用，也可能没有。此外，显示Credits对文件大小的影响是微不可见的。
- en: Including the box-sizing property and the mobile-first mixin
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包括box-sizing属性和移动优先mixin
- en: Including the `box-sizing` property allows the browser's box model to account
    for the padding inside the containers; this means the padding gets subtracted
    rather than added, thus maintaining the defined width(s).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 包括`box-sizing`属性允许浏览器的盒模型考虑容器内的填充；这意味着填充被减去而不是添加，从而保持了定义的宽度。
- en: 'Since the structure of our custom CSS grid is going to be mobile-first, we
    need to include the mixin that will handle this aspect:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的自定义CSS网格的结构将是移动优先的，我们需要包括处理这一方面的mixin：
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The main container and converting 10px to percentage value
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主容器和将10px转换为百分比值
- en: Since we're using the mobile-first approach, our main container is going to
    be 100% wide by default; but we're also going to give it a maximum width of 1200px
    since the requirement is to create a grid of that size.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用移动优先方法，我们的主容器默认情况下将是100%宽；但我们还将给它一个最大宽度为1200px，因为要求是创建这样大小的网格。
- en: 'We''re also going to convert 10px into a percentage value, so using the RWD
    magic formula: *10 ÷ 1200 x 100 = 0.83%*.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将把10px转换为百分比值，所以使用RWD魔法公式：*10 ÷ 1200 x 100 = 0.83%*。
- en: 'However, as we''ve seen before, 10px, or in this case 0.83%, is not enough
    padding and makes the content appear too close to the edge of the main container.
    So we''re going to increase the padding to 20px: *20 ÷ 1200 x 100 = 1.67%*.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如我们之前看到的，10px，或者在这种情况下0.83%，不足够的填充会使内容看起来离主容器的边缘太近。所以我们将填充增加到20px：*20 ÷
    1200 x 100 = 1.67%*。
- en: 'We''re also going to horizontally center the main container with `margin: auto;`.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还将使用`margin: auto;`来水平居中主容器。'
- en: Tip
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'There''s no need to declare zero values to the top and bottom margins to center
    horizontally. In other words, `margin: 0 auto;` isn''t necessary. Just declaring
    `margin: auto;` is enough.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '没有必要声明零值来使顶部和底部边距水平居中。换句话说，`margin: 0 auto;`是不必要的。只需声明`margin: auto;`就足够了。'
- en: 'Let''s include these values now:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们包括这些值：
- en: '[PRE6]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'In the `padding` property, it''s the same if we type `0.83%` or `.83%`. We
    can omit the zero. It''s always a good practice to keep our code as streamlined
    as possible. This is the same principle as when we use hexadecimal shorthand values:
    `#3336699` is the same as `#369`.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`padding`属性中，如果我们输入`0.83%`或`.83%`都是一样的。我们可以省略零。保持我们的代码尽可能简洁是一种良好的实践。这与当我们使用十六进制简写值时的原理相同：`#3336699`和`#369`是一样的。
- en: Making it mobile-first
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使其移动优先
- en: On small screens, all the columns are going to be 100% wide. Since we're working
    with a single column layout, we don't use gutters; this means we don't have to
    declare margins, at least yet.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在小屏幕上，所有列都将是100%宽。由于我们使用的是单列布局，我们不使用间距；这意味着我们至少现在不必声明边距。
- en: At 640px, the grid will kick in and assign corresponding percentages to each
    column, so we're going to include the columns in a `40em` (640px) media query
    and float them to the left. At this point, we need gutters. Thus, we declare the
    margin with `.83%` to the left and right padding.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在640px处，网格将启动并为每个列分配相应的百分比，因此我们将在`40em`（640px）媒体查询中包含列并将它们浮动到左侧。在这一点上，我们需要间距。因此，我们声明左右填充为`.83%`。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I chose `40em` (640px) arbitrarily and only as a starting point. Remember to
    create content-based breakpoints rather than device-based ones.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我任意选择了`40em`（640px）作为起点。记住要创建基于内容而不是设备的断点。
- en: 'The code is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding the row and float clearing rules
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加行和浮动清除规则
- en: If we use rows in our HTML structure or add the class `.clear` to a tag, we
    can declare all the float clearing values in a single nested rule with the `:before`
    and `:after` pseudo-elements.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在HTML结构中使用行或向标签添加`.clear`类，我们可以在单个嵌套规则中使用`:before`和`:after`伪元素声明所有的浮动清除值。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's the same thing to use single or double colons when declaring pseudo-elements.
    The double colon is a CSS3 syntax and the single colon is a CSS2.1 syntax. The
    idea was to be able to differentiate them at a glance so a developer could tell
    which CSS version they were written on. However, IE8 and below do not support
    the double-colon syntax.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明伪元素时，使用单冒号或双冒号是一样的。双冒号是CSS3语法，单冒号是CSS2.1语法。这个想法是为了能够一眼区分它们，以便开发人员可以知道它们是在哪个CSS版本上编写的。然而，IE8及以下版本不支持双冒号语法。
- en: The float clearing technique is an adaptation of David Walsh's CSS snippet ([http://davidwalsh.name/css-clear-fix](http://davidwalsh.name/css-clear-fix)).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动清除技术是对David Walsh的CSS片段的改编（[http://davidwalsh.name/css-clear-fix](http://davidwalsh.name/css-clear-fix)）。
- en: We're also adding a rule for the rows with a bottom margin of 10px to separate
    them from each other, while removing that margin from the last row to avoid creating
    unwanted extra spacing at the bottom. Finally, we add the clearing rule for legacy
    IEs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为行添加了一个底部间距为10px的规则，以便将它们彼此分开，同时从最后一行中去除该间距，以避免在底部创建不必要的额外间距。最后，我们为旧版IE添加了清除规则。
- en: 'Let''s include these rules now:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们包括这些规则：
- en: '[PRE8]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s recap our CSS grid requirements:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的CSS网格要求：
- en: '**12 columns**: Starting from `.grid-1` to `.grid-12`.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**12列**：从`.grid-1`到`.grid-12`。'
- en: '**1200px wide to account for 1280px screens**: The `.container-12` container
    has `max-width: 1200px;`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为了适应1280px屏幕而设置为1200px宽**：`.container-12`容器的`max-width: 1200px;`'
- en: '**Fluid and relative units (percentages) for the columns and gutters**: The
    percentages go from 6.67% to 98.33%.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流动和相对单位（百分比）用于列和间距**：百分比从6.67%到98.33%。'
- en: '**Mobile-first**: We added the mobile-first mixin (using `min-width`) and nested
    the grid inside of it.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动优先**：我们添加了移动优先的mixin（使用`min-width`）并将网格嵌套其中。'
- en: '**The SCSS syntax**: The whole file is Sass-based.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCSS语法**：整个文件都是基于Sass的。'
- en: '**Reusable**: As long as we''re using 12 columns and we''re using the mobile-first
    approach, we can use this CSS grid multiple times.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用**：只要我们使用12列并且使用移动优先的方法，我们可以多次使用这个CSS网格。'
- en: '**Simple to use and understand**: The class names are very straightforward.
    The `.grid-6` grid is used for an element that spans 6 columns, `.grid-7` is used
    for an element that spans 7 columns, and so on.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单易用和理解**：类名非常直观。`.grid-6`网格用于跨越6列的元素，`.grid-7`用于跨越7列的元素，依此类推。'
- en: '**Easily scalable**: If we want to use 980px instead of 1200px, all we need
    to do is change the value in the `.container-12 max-width` property. Since all
    the elements are using relative units (percentages), everything will adapt proportionally
    to the new width—to *any* width for that matter. Pretty sweet if you ask me.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于扩展**：如果我们想使用980px而不是1200px，我们只需要改变`.container-12 max-width`属性中的值。由于所有元素都使用相对单位（百分比），一切都会按比例适应新的宽度
    - 无论是*任何*宽度。如果你问我，这真是太棒了。'
- en: Building a sample page with the custom CSS grid
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义CSS网格构建示例页面
- en: 'Here''s the HTML we''re going to use in this example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在这个例子中将要使用的HTML：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Nested containers
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套容器
- en: Notice that there are several nested containers inside their own row (black
    background). The idea here is to highlight the nested content sections that add
    up to 12 columns.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有几个嵌套容器在它们自己的行内（黑色背景）。这里的想法是突出显示添加到12列的嵌套内容部分。
- en: Nesting columns are a major advantage of any grid system. In this book, we are
    harnessing this power so we don't limit the design in any way.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套列是任何网格系统的主要优势。在这本书中，我们正在利用这种力量，以便不会以任何方式限制设计。
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We're using the HTML5 Shiv polyfill to add HTML5 support to IE8 and below.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用HTML5 Shiv polyfill为IE8及以下版本添加HTML5支持。
- en: 'On small screens (320px wide), this is what the container looks like:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在小屏幕上（320px宽），容器如下所示：
- en: '![Nested containers](img/B02102_04_01.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![嵌套容器](img/B02102_04_01.jpg)'
- en: 'On large screens starting at 40em (640px) wide, this is what the layout looks
    like:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在宽度为40em（640px）及以上的大屏幕上，布局如下：
- en: '![Nested containers](img/B02102_04_02.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![嵌套容器](img/B02102_04_02.jpg)'
- en: You can see the demo I created on CodePen at [http://codepen.io/ricardozea/pen/d6ab6e0293be9b6bac2e16ad37942ed5](http://codepen.io/ricardozea/pen/d6ab6e0293be9b6bac2e16ad37942ed5).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在CodePen上看到我创建的演示[http://codepen.io/ricardozea/pen/d6ab6e0293be9b6bac2e16ad37942ed5](http://codepen.io/ricardozea/pen/d6ab6e0293be9b6bac2e16ad37942ed5)。
- en: Stop using CSS grids, use Flexbox!
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止使用CSS网格，使用Flexbox！
- en: I bet you didn't see this one coming, ha!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我打赌你没有看到这一点，哈！
- en: 'Indeed, Flexbox is one amazing CSS property that opens the layout possibilities
    to new horizons. Here are a few things about Flexbox:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Flexbox是一种令人惊奇的CSS属性，它为布局提供了新的可能性。以下是关于Flexbox的一些事情：
- en: Its browser support is perfect in modern browsers.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在现代浏览器中的浏览器支持是完美的。
- en: IE8 and IE9 don't support it. But no worries, addressing these two browsers
    is very simple using the conditional classes technique mentioned in [Chapter 3](ch03.html
    "Chapter 3. Mobile-first or Desktop-first?"), *Mobile-first or Desktop-first?*
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IE8和IE9不支持它。但不用担心，使用条件类技术来解决这两个浏览器非常简单，如[第3章](ch03.html "第3章。Mobile-first or
    Desktop-first?")中提到的，*Mobile-first or Desktop-first?*
- en: IE10 only supports the 2012 syntax, but Autoprefixer (within Prepros) takes
    care of this old vendor prefixing automatically for us.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IE10仅支持2012语法，但Autoprefixer（在Prepros中）会自动为我们处理这些旧的供应商前缀。
- en: 'We need to be careful when using Flexbox because the old `display: box;` syntax
    causes the browser to do a multi-pass in the layout, deteriorating the performance.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在使用Flexbox时，我们需要小心，因为旧的`display: box;`语法会导致浏览器在布局中进行多次传递，从而降低性能。'
- en: 'In contrast, the new/current syntax `display: flex`; has no impact on performance
    whatsoever. Browser performance issues have now been addressed since the old syntax,
    so we should be in good shape.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相比之下，新/当前的语法`display: flex`;对性能没有任何影响。自从旧语法以来，浏览器性能问题现在已得到解决，所以我们应该没问题。'
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Paul Irish and Ojan Vafai explain this very well in the post **Flexbox layout
    isn't slow**, which can be found at [http://updates.html5rocks.com/2013/10/Flexbox-layout-isn-t-slow](http://updates.html5rocks.com/2013/10/Flexbox-layout-isn-t-slow).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Paul Irish和Ojan Vafai在文章**Flexbox layout isn't slow**中对此进行了很好的解释，该文章可以在[http://updates.html5rocks.com/2013/10/Flexbox-layout-isn-t-slow](http://updates.html5rocks.com/2013/10/Flexbox-layout-isn-t-slow)找到。
- en: Let's get down to it, shall we?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，好吗？
- en: Building a sample page with Flexbox
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Flexbox构建示例页面
- en: In the following example, we are going to build the same layout we built using
    the custom CSS grid but using the Flexbox property. This will help us better understand
    the power of Flexbox and eventually *detach* us from using CSS grids altogether,
    while keeping a more semantic structure in our HTML.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将使用Flexbox属性构建与使用自定义CSS网格构建的相同布局。这将帮助我们更好地理解Flexbox的强大之处，并最终*摆脱*完全使用CSS网格，同时在我们的HTML中保持更语义化的结构。
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A great article by Chris Coyer, **A Complete Guide to Flexbox**, can be found
    at [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Chris Coyer的一篇很棒的文章**A Complete Guide to Flexbox**可以在[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)找到。
- en: 'A few things to note about the sample page:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 关于示例页面的一些注意事项：
- en: We're including the conditional classes in the `<html>` element to support legacy
    browsers and save one request to the server from using a JavaScript file dependency.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在`<html>`元素中包含条件类，以支持旧版浏览器，并避免使用JavaScript文件依赖项从服务器请求。
- en: Since we're not using a CSS grid, the nested containers are just going to have
    to the term **Content**, display in them.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们不使用CSS网格，嵌套容器只会在其中显示术语**Content**。
- en: We're going to use the HTML5 Shiv polyfill to have IE8 support for all the necessary
    HTML5 tags.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用HTML5 Shiv polyfill来支持IE8对所有必要的HTML5标签。
- en: Since IE10 has some math calculation issues with Flexbox, we need to target
    it with an `.ie10` class added to the `<html>` element. We're going to accomplish
    this by using a simple script created by Louis Lazaris inside an IE-excluding
    Conditional Comment so that IE8/9 doesn't run the script. All the information
    about this script can be found in the article at [http://www.impressivewebs.com/ie10-css-hacks/](http://www.impressivewebs.com/ie10-css-hacks/).
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于IE10在Flexbox中存在一些数学计算问题，我们需要通过在`<html>`元素中添加`.ie10`类来定位它。我们将使用Louis Lazaris创建的一个简单脚本来实现这一点，该脚本位于IE排除条件注释中，以便IE8/9不运行该脚本。有关此脚本的所有信息可以在文章中找到：[http://www.impressivewebs.com/ie10-css-hacks/](http://www.impressivewebs.com/ie10-css-hacks/)。
- en: Tip
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The script we''re using to target IE10 is not using User Agent sniffing. UA
    sniffing isn''t considered a good practice. The script is using a Conditional
    Compilation statement. More information about the `@cc_on` statement can be found
    in the **Microsoft Developer Network** (**MSDN**): [https://msdn.microsoft.com/en-us/library/8ka90k2e(v=vs.94).aspx](https://msdn.microsoft.com/en-us/library/8ka90k2e(v=vs.94).aspx).'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于定位IE10的脚本不使用用户代理嗅探。UA嗅探不被认为是一个好的做法。该脚本使用条件编译语句。有关`@cc_on`语句的更多信息可以在**Microsoft
    Developer Network** (**MSDN**)找到：[https://msdn.microsoft.com/en-us/library/8ka90k2e(v=vs.94).aspx](https://msdn.microsoft.com/en-us/library/8ka90k2e(v=vs.94).aspx)。
- en: 'This is what the Flexbox layout looks like on small screens (320px wide):'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是小屏幕（320px宽）上Flexbox布局的样子：
- en: '![Building a sample page with Flexbox](img/B02102_04_03.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![使用Flexbox构建示例页面](img/B02102_04_03.jpg)'
- en: 'This is what it looks like on large screens. This screen is 768px wide but
    the content is `40em` (640px):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大屏幕上的样子。这个屏幕宽度为768px，但内容为`40em`（640px）：
- en: '![Building a sample page with Flexbox](img/B02102_04_04.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![使用Flexbox构建示例页面](img/B02102_04_04.jpg)'
- en: The HTML
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: 'Here''s the markup we''re going to use in the sample page:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在示例页面中使用的标记：
- en: '[PRE10]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The SCSS
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SCSS
- en: The SCSS code has a few sections similar to the code used in the CSS grid. However,
    there are important differences.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: SCSS代码有几个部分与CSS网格中使用的代码类似。但是，有重要的区别。
- en: Let's take it apart.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分析一下。
- en: 'We''re going to start by creating the Credits section, the `box-sizing: border-box;`
    parameter to account for the padding inside the containers rather than outside,
    the mobile-first mixin, and the main container properties:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将从创建Credits部分开始，`box-sizing: border-box;`参数用于考虑容器内部而不是外部的填充，首先是移动优先的mixin和主容器属性：'
- en: '[PRE11]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adding the Flexbox container
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加Flexbox容器
- en: 'Now, let''s add the properties for the Flexbox container that acts somewhat
    similar to the `.row` in the CSS grid. The code is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为Flexbox容器添加属性，该容器在某种程度上类似于CSS网格中的`.row`。代码如下：
- en: '[PRE12]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, we''re adding `margin-bottom: 10px;` to separate the content
    rows. However, we''re removing that margin on the last Flexbox container so that
    it doesn''t generate unwanted extra padding at the end.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '正如你所看到的，我们添加了`margin-bottom: 10px;`来分隔内容行。然而，我们在最后一个Flexbox容器上移除了该边距，以防止在末尾产生不必要的额外填充。'
- en: Then we're including the mobile-first mixin that targets a screen width of 640px
    (`40em`). This means that we're **only** going to use Flexbox for large screens,
    but for small screens, we are not going to use it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将包含针对640px（`40em`）屏幕宽度的移动优先mixin。这意味着我们**只**会在大屏幕上使用Flexbox，但在小屏幕上，我们不会使用它。
- en: Tip
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There's no need to use Flexbox if all the columns have equal width. In our example
    columns are 100% wide in small screens.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有列的宽度相等，则无需使用Flexbox。在我们的示例中，小屏幕上的列宽度为100%。
- en: DIVs inside the Flexbox container
  id: totrans-219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Flexbox容器内的DIV
- en: Now, let's add the `.83%` left and right margins to the columns on large screens.
    On small screens, the columns have no margins. Remember that *10px = 0.83%*.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在大屏幕上为列添加`.83%`的左右边距。在小屏幕上，列没有边距。记住*10px = 0.83%*。
- en: 'We are going to use the attribute selector with the star/asterisk so we can
    target all the DIVs that contain at least one value with the term `level-` in
    their class name. We''re also going to remove the left margin on the first container
    and the right margin on the last container, so our DIVs are flushed to the edges
    of their parent containers. The code is as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用带有星号/星号的属性选择器，以便可以针对所有包含类名中至少一个值为`level-`的DIV进行定位。我们还将删除第一个容器的左边距和最后一个容器的右边距，以便我们的DIV与其父容器的边缘对齐。代码如下：
- en: '[PRE13]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Header, Footer, Nav, and Section Containers
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标题、页脚、导航和部分容器
- en: Now, the Header and Footer sections are 100% wide on both small and large screens,
    so they don't need any specific rules. This example, however, adds a few properties
    to both the Header and Footer sections but only for styling reasons, not really
    for layout. Nonetheless, the Nav and Section containers do have particular widths
    depending on the available screen width.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，标题和页脚部分在小屏幕和大屏幕上都是100%宽，因此它们不需要任何特定的规则。然而，这个示例为标题和页脚部分添加了一些属性，但只是出于样式原因，而不是布局原因。尽管如此，导航和部分容器确实根据可用屏幕宽度具有特定的宽度。
- en: 'On small screens, the Nav and Section containers are 100% wide, while on large
    screens they stay side by side; The Nav container is 33% wide with a right margin
    to create the gutter of 1.67% (which equals 20px). The Section container is 65.33%
    wide on large screens. Here''s the formula: *33% + 1.67% + 65.33 = 100%*.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在小屏幕上，导航和部分容器的宽度为100%，而在大屏幕上它们并排显示；导航容器在大屏幕上宽度为33%，右边距为1.67%（相当于20px）以创建间距。部分容器在大屏幕上宽度为65.33%。这里是公式：*33%
    + 1.67% + 65.33 = 100%*。
- en: 'Let''s go ahead and define those properties for the Nav and Section containers:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续为导航和部分容器定义这些属性：
- en: '[PRE14]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Nested containers
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套容器
- en: Finally, for this example, we're going to define widths for different content
    sections with a black background so you can have a clear idea about how to nest
    containers.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于这个示例，我们将为具有黑色背景的不同内容部分定义宽度，这样你就可以清楚地了解如何嵌套容器。
- en: What we're basically doing is assigning specific but different widths to both
    `.content-a` and `.content-c`, which are the first and third content areas of
    that row. There's no need to assign a width to the second content area, unless
    we wanted to. Flexbox will make that second container fully occupy all the remaining
    space between the first and third content areas.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们正在为该行的第一个和第三个内容区域`.content-a`和`.content-c`分配特定但不同的宽度。除非我们想要，否则不需要为第二个内容区域分配宽度。Flexbox将使第二个容器完全占据第一个和第三个内容区域之间的所有剩余空间。
- en: Tip
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: IE10 has issues calculating the nested containers values, so we need to create
    specific widths to those containers. We are going to include the widths for IE10
    in the same rule we're going to create for IE8 and IE9.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: IE10在计算嵌套容器值时存在问题，因此我们需要为这些容器创建特定的宽度。我们将在为IE8和IE9创建的同一规则中包含IE10的宽度。
- en: The reason I'm using arbitrary values such as 30% and 42% is to show you that
    we can play with these values all we want and Flexbox will always try to maintain
    these proportions as long as there's space available.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用任意值如30%和42%是为了向你展示，我们可以随意调整这些值，而Flexbox会尽量保持这些比例，只要有空间可用。
- en: 'Let''s add those properties now for the different nested containers:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为不同的嵌套容器添加这些属性：
- en: '[PRE15]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Supporting old IEs
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持旧版IE
- en: Using Flexbox doesn't come with its caveats regarding IE8, IE9 and IE10 as well.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flexbox也会带来与IE8、IE9和IE10相关的注意事项。
- en: As with legacy browsers, it's a matter of tweaking values and testing to get
    the best results. And remember that websites do not have to look exactly the same
    in every browser.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统浏览器一样，调整数值并进行测试是获得最佳结果的关键。记住，网站在每个浏览器中不必看起来完全相同。
- en: Let's clarify a few things. The classes `.ie8` and `.ie9` come from the Conditional
    Classes in the `<html>` element. The class `.ie10` comes from the script inside
    an IE-excluding Conditional Comment. Therefore, IE8 and IE9 are unable to run
    this script. But no need to fret, the solutions are simple, you'll see. Let's
    check them out.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们澄清一些事情。类`.ie8`和`.ie9`来自`<html>`元素中的条件类。类`.ie10`来自IE排除条件注释中的脚本。因此，IE8和IE9无法运行此脚本。但不用担心，解决方案很简单，你会看到的。让我们来看看它们。
- en: One rule to rule them all
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一条规则支配所有规则
- en: 'The first thing we do is create a rule for all three: IE8, IE9 and IE10\. In
    this rule, we''re going to declare the widths of the nested containers in percentages.
    Truth be told, we could declare these widths in pixels as well, but we''re going
    to use percentages for consistency reasons with all other responsive examples.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是为IE8、IE9和IE10创建一个规则。在这个规则中，我们将以百分比声明嵌套容器的宽度。事实上，我们也可以用像素声明这些宽度，但出于一致性的原因，我们将使用百分比，与所有其他响应式示例保持一致。
- en: 'Here''s the one rule that… well, rules them all:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是那条规则……好吧，支配它们所有：
- en: '[PRE16]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Rules for both IE8 and IE9
  id: totrans-244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IE8和IE9的规则
- en: 'We will now declare the rule that will handle the values for IE8 and IE9\.
    We declare `overflow: hidden;` to clear the floats in their parent container,
    the `.flex-container` DIVs. We then float left to the Nav and Content sections
    and give them a height; this height is merely for styling purposes.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '我们现在将声明处理IE8和IE9值的规则。我们声明`overflow: hidden;`来清除父容器中的浮动，即`.flex-container` DIVs。然后我们将Nav和Content部分浮动到左侧，并给它们一个高度；这个高度仅用于样式目的。'
- en: 'We give the Nav section a width and a margin right of 1% to keep things simple.
    We assign a width to the Content section as well. Then, we use the Footer to clear
    the floating Nav and Content sections with both the `clear: both;` and `zoom:
    1;` parameters for good measure.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '我们给Nav部分设置宽度和右边距为1%，以保持简洁。我们也给Content部分分配了宽度。然后，我们使用Footer来清除浮动的Nav和Content部分，使用`clear:
    both;`和`zoom: 1;`参数以确保。'
- en: 'Here''s the SCSS for IE8/9:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是IE8/9的SCSS：
- en: '[PRE17]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Specific rules for IE8 and IE9
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IE8和IE9的特定规则
- en: 'Finally, we seal the deal for legacy browsers with a couple of rules: one for
    IE8 and another one for IE9 using the attribute selector for all the nested containers.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过一些规则来解决旧版浏览器的问题：为IE8制定一条规则，为IE9使用属性选择器制定另一条规则，适用于所有嵌套容器。
- en: 'For IE8, we give the nested containers `display: inline-block;` rather than
    `float: left;` to make the groups of nested containers centered in their corresponding
    rows. If we don''t do this, there are going to be weird gaps on the right side
    of all the rows. We''re also going to declare a left and right margin of .2%.
    After testing, any larger value makes the nested containers wrap.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '对于IE8，我们给嵌套容器`display: inline-block;`而不是`float: left;`，以使嵌套容器的组在相应的行中居中。如果我们不这样做，所有行的右侧将会出现奇怪的间隙。我们还将声明左右边距为.2%。经过测试，任何更大的值都会使嵌套容器换行。'
- en: For IE9, we're going to float the nested containers to the left.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于IE9，我们将把嵌套容器浮动到左侧。
- en: 'Let''s check these two rules out:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这两条规则：
- en: '[PRE18]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: A lot to digest in this chapter, eh?
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中有很多内容需要消化，是吧？
- en: However, we now know what a grid is and what it's used for, something many of
    us have never really questioned before. We also understand more about CSS grids,
    CSS frameworks, and UI kits; use them as you please, as long as you are clear
    about how they help us be more efficient when building sound responsive sites
    and apps.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们现在知道什么是网格，以及它的用途，这是我们许多人以前从未真正质疑过的东西。我们还更加了解CSS网格、CSS框架和UI工具包；尽管你愿意使用它们，只要你清楚它们如何帮助我们在构建响应式网站和应用程序时更加高效。
- en: Creating our custom CSS with the traditional *floats* technique was a matter
    of identifying the pattern where the addition of a new column was a matter of
    increasing the value by 100\. Now, we can create a 12-column grid at any width
    we want.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的*浮动*技术创建我们的自定义CSS是一种识别模式的问题，其中添加新列只是通过增加100的值。现在，我们可以在任何宽度上创建一个12列网格。
- en: With the help of Flexbox, we now understand where the future of responsive and
    fluid layouts is. With such great browser support, there's no question Flexbox
    is a major contender for the traditional CSS grids. Using Conditional Classes
    is a good option to support our complex layouts in legacy browsers. In addition,
    for IE10 we need to use the Conditional Compilation script that only IE10 is capable
    of seeing. Therefore, we can target IE10 with an `.ie10` specific selector.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 借助Flexbox，我们现在明白了响应式和流动布局的未来在哪里。由于有如此出色的浏览器支持，毫无疑问Flexbox是传统CSS网格的一个重要竞争者。在旧版浏览器中，使用条件类是支持复杂布局的一个不错的选择。此外，对于IE10，我们需要使用条件编译脚本，只有IE10才能看到。因此，我们可以使用`.ie10`特定选择器来针对IE10。
- en: In the next chapter, we're going to dive into the world of usability and UX
    when we talk about building responsive interfaces for our large fingers on small
    screens. Time to put those big fingers to the test!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，当我们谈论为小屏幕上的大手指构建响应式界面时，我们将深入了解可用性和用户体验的世界。是时候来测试那些大手指了！
