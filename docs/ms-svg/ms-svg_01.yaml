- en: Introducing Scalable Vector Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍可缩放矢量图形
- en: '**Scalable Vector Graphics** (**SVG**) is one of the most powerful components
    of modern web development. If used properly, it can solve common problems relating
    to the design, development, and delivery of imagery and user interfaces'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**可缩放矢量图形**（**SVG**）是现代Web开发中最强大的组件之一。如果使用得当，它可以解决与图像和用户界面的设计、开发和交付相关的常见问题。'
- en: SVG is an XML-based markup language used to define images. What HTML is to text,
    SVG is to images.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SVG是一种基于XML的标记语言，用于定义图像。就像HTML是用于文本一样，SVG是用于图像的。
- en: SVG is very flexible. It can be implemented as a standalone image and used as
    the `src` of an image or as a background image in CSS such as a PNG, GIF, or JPG.
    It can also be embedded directly into an HTML page and manipulated with CSS or
    JavaScript to create animations, visualizations, and interactive charts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SVG非常灵活。它可以作为独立图像实现，并用作图像的`src`，也可以作为CSS中的背景图像，如PNG、GIF或JPG。它也可以直接嵌入到HTML页面中，并通过CSS或JavaScript进行操作，以创建动画、可视化和交互式图表。
- en: So, if SVG is that important and can do so much, why isn't it even more widely
    used? Why does it feel like we're only scratching the surface of what's possible
    with it? Why does it still feel like a *new* thing?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果SVG如此重要并且可以做这么多事情，为什么它还没有被更广泛地使用呢？为什么感觉我们只是挖掘了它的表面？为什么它仍然感觉像是一件*新*的东西？
- en: The problem is, not everyone knows everything that SVG is capable of and not
    everyone who knows what it's capable of is able to implement SVG solutions in
    an optimal manner. This book aims to help everyone interested in using SVG to
    get over those hurdles and master this vital technology.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，并不是每个人都知道SVG的所有功能，也不是每个了解其功能的人都能以最佳方式实现SVG解决方案。本书旨在帮助所有对使用SVG感兴趣的人克服这些障碍，掌握这项重要的技术。
- en: SVG has had a circuitous route to its place in the pantheon of modern web development
    technologies. Released in 1999 (it's older than XHTML), SVG languished for a decade
    because of lack of support in the then dominant Internet Explorer browsers. The
    technology started to gain favor several years ago with JavaScript libraries,
    such as Raphaël, which added programmatic fallback support for older versions
    of IE and the trend has only grown stronger since. Thankfully, the tide has fully
    turned. All modern versions of Internet Explorer and Edge have support for SVG
    and there's strong support for the technology from all browser manufacturers,
    including, of course, Chrome and Firefox.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SVG在现代Web开发技术中的地位经历了曲折的道路。SVG于1999年发布（比XHTML还要早），由于当时主导的Internet Explorer浏览器缺乏支持，SVG在接下来的十年中一直处于低迷状态。几年前，随着JavaScript库（如Raphaël）的出现，为旧版本的IE添加了编程回退支持，这项技术开始受到青睐，而这种趋势自那时以来一直在增强。幸运的是，潮流已经完全扭转。所有现代版本的Internet
    Explorer和Edge都支持SVG，所有浏览器制造商都对这项技术给予了强大的支持，包括Chrome和Firefox。
- en: By the end of this chapter, you will understand the basics of SVG in its many
    guises. You will be able to take existing SVG images and use them in web pages
    and CSS with confidence and you'll be well on your way to the promised land of
    SVG mastery.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解SVG在各种形式中的基础知识。您将能够在网页和CSS中自信地使用现有的SVG图像，并且您将在掌握SVG的过程中迈出良好的一步。
- en: 'This chapter will cover the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to fundamental SVG grammar and vector graphics in general
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG的基本语法和矢量图形介绍
- en: The whys and hows of using SVG as the `src` file of an image
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将SVG用作图像的`src`文件的原因和方法
- en: Basic usage of SVG as a CSS background image
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG作为CSS背景图像的基本用法
- en: The benefits and differences of using SVG embedded directly in a document
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接在文档中嵌入SVG的好处和区别
- en: A brief introduction to Modernizr and feature detection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Modernizr和特性检测简介
- en: Creating a simple SVG image
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的SVG图像
- en: If you're at all familiar with HTML, then the basics of an SVG document are
    going to be familiar to you. So let's get the mystery out of the way early and
    take a look at a simple SVG document.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对HTML有所了解，那么SVG文档的基础对您来说将是熟悉的。所以让我们早点揭开神秘面纱，看一看一个简单的SVG文档。
- en: The following code sample shows the basic structure of SVG. The first element
    is the standard `xml` declaration, indicating that the following should be parsed
    as an XML document. The second element is where the fun begins. It defines the
    root SVG element (in the same way that there's a root HTML element in an HTML
    document). `height` and `width` define the intrinsic dimensions of the document.
    The**XML** **Name*S*pace** (**xmlns**) is a reference to the schema that defines
    the current XML element. You'll learn about `viewBox` in more detail in the next
    chapter. There are many other attributes possible on an SVG element. You will
    learn more about them throughout this book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例显示了SVG的基本结构。第一个元素是标准的`xml`声明，表示接下来的内容应该被解析为XML文档。第二个元素是乐趣的开始。它定义了根SVG元素（就像HTML文档中有一个根HTML元素一样）。`height`和`width`定义了文档的固有尺寸。**XML**
    **Name*S*pace** (**xmlns**)是对定义当前XML元素的模式的引用。您将在下一章中更详细地了解`viewBox`。SVG元素上还有许多其他可能的属性。您将在本书中更多地了解它们。
- en: In this first example, following the SVG element, there's a single SVG `text`
    element. The `text` element, like the SVG element, has many possible attributes
    that you'll learn about as you make your way through the book. In this case, there
    are four attributes related to the display of the element. The `x` and `y` attributes
    represent the position of the top-left corner of the text element as points on
    a coordinate plane. `font-family` maps to the familiar CSS property of the same
    name and defines the specific font that should be used to display the text. `font-size`
    also maps to the common CSS property of the same name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个例子中，在SVG元素之后，有一个单独的SVG `text`元素。`text`元素，就像SVG元素一样，有许多可能的属性，你将在阅读本书的过程中了解到。在这种情况下，有四个与元素显示相关的属性。`x`和`y`属性表示文本元素左上角的位置，作为坐标平面上的点。`font-family`映射到同名的常见CSS属性，定义应该用于显示文本的特定字体。`font-size`也映射到同名的常见CSS属性。
- en: The attributes that accept *length values* (in this example `width`, `height`,
    and `font-size`) are provided without a unit (for example, `px`, `em`, and `%`.)
    When these values are presented as attributes, the unit is optional. If no unit
    is provided, the values are specified as being user units in the user space. You'll
    learn more about the way that values are calculated in SVG throughout the book.
    For now, just remember that, in practice, user units will be equivalent to pixels.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接受*长度值*的属性（在这个例子中是`width`、`height`和`font-size`）是不带单位的（例如`px`、`em`和`%`）。当这些值作为属性呈现时，单位是可选的。如果没有提供单位，这些值被指定为用户空间中的用户单位。你将在本书中了解更多关于SVG中值的计算方式。现在，只需记住，在实践中，用户单位将等同于像素。
- en: 'Finally, there is the content of the `text` element, the simple message Hello
    SVG:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是`text`元素的内容，简单的消息Hello SVG：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Saved as `1-1-hello-world.svg` and opened in a browser, the previous markup
    renders as in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 保存为`1-1-hello-world.svg`并在浏览器中打开，前面的标记呈现如下屏幕截图：
- en: '![](img/7752e7ed-47ef-4bd7-8cc1-7eb13657e973.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7752e7ed-47ef-4bd7-8cc1-7eb13657e973.png)'
- en: Now that you've seen the most basic example of an SVG document, let's take a
    look at the basic usage of SVG images and elements in a variety of ways.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了SVG文档的最基本示例，让我们以各种方式来看一下SVG图像和元素的基本用法。
- en: Using SVG as a content image
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SVG作为内容图像
- en: In this section, you'll learn about the single most basic usage of an SVG image,
    using it the same way you would use a JPG, PNG, or GIF, as the `src` of an `img`
    element. If you've done any work with HTML at all then you will know how to do
    this since it's just an image element, but you should start to think about *all*
    the different ways you can use SVG, and this is a big one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将学习SVG图像的最基本用法，就像你使用JPG、PNG或GIF一样，作为`img`元素的`src`。如果你已经做过任何HTML工作，那么你会知道如何做到这一点，因为它只是一个图像元素，但你应该开始考虑*所有*你可以使用SVG的不同方式，这是一个重要的方式。
- en: 'Looking at the following code sample, there''s nothing special at all about
    the `img` element. There''s an `src` pointing to the SVG image, `height` and `width`
    to define the image''s dimensions, and an `alt` attribute to provide a textual
    representation of the image for screen readers and other cases where the image
    may not display:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 看下面的代码示例，`img`元素并没有什么特别之处。有一个指向SVG图像的`src`，`height`和`width`定义图像的尺寸，还有一个`alt`属性，为屏幕阅读器和其他图像无法显示的情况提供图像的文本表示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Running the preceding code in a browser renders the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行上述代码将呈现如下内容：
- en: '![](img/bd57deb3-0707-497a-8937-223ed05604a0.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd57deb3-0707-497a-8937-223ed05604a0.jpg)'
- en: One thing that might be a slight problem is that not all web servers, by default,
    set the correct MIME type for SVG. If the MIME type is set incorrectly, some browsers
    will not display the SVG image correctly. As one common example, Microsoft's IIS
    may need a specific configuration setting changed ([https://docs.microsoft.com/en-us/iis/manage/managing-your-configuration-settings/adding-ie-9-mime-types-to-iis](https://docs.microsoft.com/en-us/iis/manage/managing-your-configuration-settings/adding-ie-9-mime-types-to-iis))
    to properly serve SVG images. The correct MIME type is `image/svg+xml.`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一个小问题，不是所有的web服务器默认设置了正确的SVG MIME类型。如果MIME类型设置不正确，一些浏览器将无法正确显示SVG图像。一个常见的例子是，微软的IIS可能需要更改特定的配置设置（[https://docs.microsoft.com/en-us/iis/manage/managing-your-configuration-settings/adding-ie-9-mime-types-to-iis](https://docs.microsoft.com/en-us/iis/manage/managing-your-configuration-settings/adding-ie-9-mime-types-to-iis)）才能正确地提供SVG图像。正确的MIME类型是`image/svg+xml`。
- en: Drawing with code
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用代码绘图
- en: Before you learn about other basic implementations, it's worth taking a look
    at the previous screenshot in a little more depth. Instead of just being text
    like the first example (which, after all, you could have just done in HTML), it
    shows four circles diagonally arranged across the canvas. Let's take a look at
    the source of that image and learn our first visual element in SVG, the `circle` element.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习其他基本实现之前，值得更深入地看一下前面的屏幕截图。它不仅仅是像第一个例子那样的文本（毕竟，你可以在HTML中完成），它显示了四个圆对角排列在画布上。让我们来看看该图像的源代码，并学习SVG中的第一个视觉元素，`circle`元素。
- en: 'The following code sample shows the `circle` in action. It also shows how simple
    changes in markup attribute values can create visually interesting patterns. In
    it there are five `circle` elements. These all take advantage of four new attributes.
    `cx` and `cy` represent the center *x* and center *y* coordinates of the element
    on a coordinate plane. `r` represents the radius of the circle. `fill` defines
    the color that will fill the `circle`. `fill` accepts any valid CSS color value
    ([https://developer.mozilla.org/en-US/docs/Web/CSS/color_value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)).
    In this case, we''re using a **red**, **green**,** blue**,**alpha **(**RGBA**) value
    to fill this with variations on pure red. The first few values remain the same
    while the fourth value, the alpha, doubles every time from `.125` to `1` (fully
    opaque). Similarly, `cx`, `cy`, and `r` double each time. This produces the pattern
    you saw earlier. This isn''t the most elaborate SVG image, but it does show you
    how easy basic SVG elements are to use and understand:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例显示了`circle`的操作。它还显示了标记属性值的简单更改如何创建视觉上有趣的图案。其中有五个`circle`元素。所有这些都利用了四个新属性。`cx`和`cy`表示元素在坐标平面上的中心*x*和中心*y*坐标。`r`表示圆的半径。`fill`定义了填充`circle`的颜色。`fill`接受任何有效的CSS颜色值（[https://developer.mozilla.org/en-US/docs/Web/CSS/color_value](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)）。在这种情况下，我们使用了一个**红色**，**绿色**，**蓝色**，**alpha**（**RGBA**）值来填充这个纯红色的变化。前几个值保持不变，而第四个值，alpha，每次从`.125`加倍到`1`（完全不透明）。同样，`cx`，`cy`和`r`每次加倍。这产生了您之前看到的图案。这不是最复杂的SVG图像，但它确实向您展示了基本SVG元素的使用和理解有多容易：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Scalable + vector graphics
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可伸缩的矢量图形
- en: Now that you've seen an example of a drawing created with SVG, it might be useful
    to take a second to explain the *VG* in SVG and why that makes the file format
    s*calable*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了使用SVG创建的绘图示例，可能有必要花一点时间解释SVG中的*VG*以及为什么这使文件格式可*伸缩*。
- en: With raster (bitmap) file formats, you're probably familiar with formats such
    as JPG, PNG, or GIF. You can think of the image data as being stored pixel by
    pixel, so each point in an image is stored in the file and read out by the browser
    or graphics program pixel by pixel and row by row. The size and quality of the
    image is constrained by the size and quality at the time of creation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于光栅（位图）文件格式，您可能熟悉的格式有JPG、PNG或GIF。您可以将图像数据视为逐像素存储，因此图像中的每个点都存储在文件中，并由浏览器或图形程序逐像素和逐行读取。图像的大小和质量受到创建时的大小和质量的限制。
- en: There are optimizations for all the bitmapped file formats that limit the actual
    amount of data stored. For example, GIFs use the LZ77 algorithm to collapse redundant
    pixels down to a backpointer and reference pixel. Imagine if your image has `100`
    pixels of pure black in a row. The algorithm will search through the image for
    a sequence of same-bytes and when a sequence is encountered, the algorithm will
    search backwards through the document to find the first instance of that pattern.
    It will then replace all those pixels with instructions (a backpointer) on how
    many characters back to search and how many pixels to copy to fill in the number
    of same-bytes. In this case, it would be `100` (pixels to search) and `1` (pixels
    to copy).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有位图文件格式都有优化，限制了实际存储的数据量。例如，GIF使用LZ77算法将冗余像素折叠到一个回指器和参考像素中。想象一下，如果您的图像有`100`个纯黑像素排成一行。该算法将搜索图像以找到相同字节的序列，当遇到序列时，算法将向后搜索文档，以找到该模式的第一个实例。然后，它将用指令（回指器）替换所有这些像素，指示向后搜索多少个字符以及复制多少像素以填充相同字节的数量。在这种情况下，它将是`100`（要搜索的像素）和`1`（要复制的像素）。
- en: Vector graphics, on the other hand, are defined by vectors and control points.
    To simplify significantly, you can think of vector graphics as being a set of
    numbers that describe the shape of a line. They may be a set of specific points
    or they may be, as in the case of the circle earlier, a set of instructions on
    how to create a specific type of object. The `circle` element doesn't store every
    pixel that makes up the circle. It stores the *arguments* used to create the circle.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图形，另一方面，是由矢量和控制点定义的。为了显著简化，您可以将矢量图形视为描述线条形状的一组数字。它们可能是一组特定的点，也可能是，就像之前的圆的情况一样，一组关于如何创建特定类型对象的指令。`circle`元素并不存储组成圆的每个像素。它存储用于创建圆的*参数*。
- en: Why is this cool? One reason is that because it's just a set of instructions
    defining the shape, which you can scale in or out, and the rendering engine will
    just calculate new values accordingly. For that reason, vector graphics can scale
    infinitely without loss of fidelity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很酷？一个原因是因为它只是一组定义形状的指令，您可以放大或缩小，渲染引擎将根据需要计算新值。因此，矢量图形可以无限缩放而不会失去保真度。
- en: 'If that''s all confusing to you, don''t worry about it. The more you work with
    them, the more familiar you''ll be with the way vector graphics work. In the meantime,
    the following set of examples and figures will help to illustrate the difference.
    First, look at the following markup. It represents four images, using the exact
    same SVG image as the source. The image represents the SVG logo. The dimensions
    are set at the image''s natural size and then `2x`, `4x`, and `8x`, the image''s
    natural size:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这一切对您来说很困惑，不要担心。您与它们一起工作得越多，您就会越熟悉矢量图形的工作方式。与此同时，以下一组示例和图表将有助于说明差异。首先，看看以下标记。它表示四个图像，使用完全相同的SVG图像作为源。该图像代表SVG标志。尺寸设置为图像的自然大小，然后是`2x`，`4x`和`8x`，图像的自然大小：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Rendered in the browser, that markup produces the following. Notice that it''s
    completely crisp all the way up to `8x`, the original size:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，该标记产生以下结果。请注意，它一直清晰到`8x`，即原始大小：
- en: '![](img/3aeffac4-e935-4440-bc84-9965b1f3c925.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3aeffac4-e935-4440-bc84-9965b1f3c925.png)'
- en: 'Now, look at the same markup, this time with PNGs. It follows the same pattern:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再看看相同的标记，这次是PNG格式。它遵循相同的模式：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But now, see the result. Notice that, at the natural level, there is no difference
    between the SVG and PNG. The pixels in the PNG are enough to match the vector-defined
    lines in the SVG Version. Also, notice how the image gets progressively worse
    as the image gets larger. There is no way for the browser to get more information
    (more pixels) out of the bitmapped format to fill in the details at the larger
    size. It simply scales up the pixels that it has, with terrible results (especially
    at the `8x` level):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，看结果。注意，在自然级别上，SVG和PNG之间没有区别。PNG中的像素足以匹配SVG版本中定义的矢量线。此外，注意随着图像变大，图像变得越来越糟。浏览器无法从位图格式中获取更多信息（更多像素）来填补较大尺寸的细节。它只是放大它拥有的像素，结果非常糟糕（特别是在`8x`级别）：
- en: '![](img/9c4098b0-00c5-45b6-a830-5c1034876c88.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c4098b0-00c5-45b6-a830-5c1034876c88.png)'
- en: Using SVG in CSS
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CSS中使用SVG
- en: A common usage of SVG is as a background image in CSS. There are benefits to
    this approach in terms of file size and scalability in **responsive web design**
    (**RWD**). In today's multi-device, multi-form factor world, the ability to offer
    high-quality images at a range of device sizes and resolutions (including high
    pixel density devices) is an important one. While there are optimized solutions
    for raster display images (in the form of the `picture` element and the `srcset`
    and `sizes` attributes) and you can use media queries to present different images
    or image sizes in CSS, the ability to do one image for all devices is huge. SVG
    in CSS allows us to do that easily
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的常见用法是作为CSS中的背景图像。在**响应式网页设计**（**RWD**）方面，这种方法在文件大小和可伸缩性方面都有好处。在今天的多设备、多形态因素的世界中，能够以一系列设备尺寸和分辨率（包括高像素密度设备）提供高质量图像的能力是非常重要的。虽然对于光栅显示图像有优化的解决方案（以`picture`元素和`srcset`和`sizes`属性的形式）并且你可以使用媒体查询在CSS中呈现不同的图像或图像尺寸，但是能够为所有设备做一张图像是非常重要的。CSS中的SVG使我们能够轻松实现这一点
- en: While you'll learn about the intersection of SVG and CSS in [Chapter 5](a2e7c773-349a-47e8-81f1-2cd6d22081f6.xhtml),
    *Working with SVG and CSS*, let's take a look at a basic example now to whet your
    appetite.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你将在[第5章](a2e7c773-349a-47e8-81f1-2cd6d22081f6.xhtml)中学习SVG和CSS的交集，*使用SVG和CSS*，现在让我们看一个基本的例子来激发你的兴趣。
- en: 'The following page has a `div` tag with a class of header. The only thing to
    really note here is a reference to an SVG file in the `url` value of the `background`
    property:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下页面有一个类为header的`div`标签。这里唯一需要注意的是`background`属性的`url`值中引用了一个SVG文件：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code produces the following when run in a browser. This simple example,
    which is no different than any other CSS implementation, will scale to the highest
    points-per-inch display without any loss of smoothness in the gradient. This is
    achieved simply by using SVG:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在浏览器中运行时会产生以下效果。这个简单的例子与任何其他CSS实现没有区别，它将在不损失渐变平滑度的情况下适应最高像素每英寸的显示。这是通过简单地使用SVG实现的：
- en: '![](img/21cd0ee6-a414-4161-8f73-3a59f18fe542.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21cd0ee6-a414-4161-8f73-3a59f18fe542.png)'
- en: Gradients in SVG
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG中的渐变
- en: As you continue to learn about basic SVG usage, I'm going to continue to tease
    new concepts in authoring SVG itself. The next features I'm going to introduce
    you to will be the definitions (`defs`) section, the `gradient` element, and the
    `rect` element.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你继续学习基本的SVG用法时，我将继续引入SVG本身创作的新概念。我将向你介绍的下一个功能是`defs`部分、`gradient`元素和`rect`元素。
- en: The following example shows the source of the SVG element in the previous example.
    Everything beyond the root `svg` element itself is different to the previous example.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了前一个示例中SVG元素的源。除了根`svg`元素本身之外，其他所有内容都与前一个示例不同。
- en: First up, there's the `defs` element. `defs` is an organizational element designed
    to hold definitions of graphical objects to be used later in the document. We
    immediately meet the `linearGradient` element, which defines (you guessed it!)
    a linear gradient. `x1`, `x2`, `y1`, and `y2` define the *gradient vector* of
    the gradient. You'll learn more about that in [Chapter 2](a2e7c773-349a-47e8-81f1-2cd6d22081f6.xhtml),* Working
    with SVG and CSS*, but for now, just know that it defines the direction of the
    gradients. The default is `0` at the left and `1` to the right. Setting `x2` to
    `0` and `y2` to `1` changes the angle from a horizontal left-to-right gradient
    to a vertical top-to-bottom gradient.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`defs`元素。`defs`是一个组织元素，旨在保存以后在文档中使用的图形对象的定义。我们立即遇到了`linearGradient`元素，它定义了（你猜对了！）线性渐变。`x1`、`x2`、`y1`和`y2`定义了渐变的*渐变向量*。你将在[第2章](a2e7c773-349a-47e8-81f1-2cd6d22081f6.xhtml)中了解更多，*使用SVG和CSS*，但现在只需知道它定义了渐变的方向。默认值是`0`在左边，`1`在右边。将`x2`设置为`0`，`y2`设置为`1`会将角度从水平左到右的渐变改变为垂直上到下的渐变。
- en: 'The look of the gradient is actually defined as child `stop` elements. Each
    has two attributes, `offset` and `stop-color`. The offset accepts either a percentage
    or a number between `0` and `1`, representing the placement of the gradient stop
    on the totality of the gradient vector. This example is the simplest: one color
    at `0%` and another at `100%`. `stop-color` accepts any valid color value:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 渐变的外观实际上是由子`stop`元素定义的。每个都有两个属性，`offset`和`stop-color`。偏移接受百分比或`0`到`1`之间的数字，表示渐变停止在渐变向量的整体上的位置。这个例子是最简单的：`0%`处有一种颜色，`100%`处有另一种颜色。`stop-color`接受任何有效的颜色值：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As these are just instructions on how to render the gradient, it's possible
    to stretch and shift the background image in this case with zero loss of fidelity.
    The browser will just calculate new values and render a new, perfect gradient.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些只是关于如何渲染渐变的说明，在这种情况下可以拉伸和移动背景图像而不会损失保真度。浏览器将计算新值并渲染新的完美渐变。
- en: 'The following example shows a tweak to the CSS that stretches the header to
    be half of the height of the browser (using the `vh` unit) and forces the header
    background image to fill the available space (`background: size: contain`):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '以下示例显示了对CSS的调整，将标题拉伸到浏览器高度的一半（使用`vh`单位），并强制标题背景图像填充可用空间（`background: size:
    contain`）：'
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see in the following screenshot, the same background image handles
    the resizing with flying colors. This is true (as you'll learn) for anything else
    you can do with SVG.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下截图中所见，相同的背景图像可以轻松调整大小。正如您将学到的那样，对SVG可以做的任何其他事情也是如此。
- en: '![](img/5749eacd-f797-4f7c-ab31-f6a8f8f5fdc6.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5749eacd-f797-4f7c-ab31-f6a8f8f5fdc6.png)'
- en: Directly embedding SVG in an HTML document
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接在HTML文档中嵌入SVG
- en: In my opinion, the most exciting usage of SVG is as an inline element in an
    HTML document. While you will learn about SVG images as a separate file format
    and all the ways that SVG images can be used to develop modern web apps, the largest
    portion of this book will show you ways to interact with SVG elements embedded
    directly into the document. This is important because it is not possible to animate
    or otherwise manipulate the individual elements of an externally-referenced SVG
    file; this is only possible if the SVG elements are available directly (via the
    **Document Object Model** (**DOM**)) on the page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，SVG最令人兴奋的用途是作为HTML文档中的内联元素。虽然您将了解SVG图像作为单独的文件格式以及SVG图像可以用于开发现代Web应用程序的所有方式，但本书的大部分内容将向您展示如何与直接嵌入文档的SVG元素进行交互。这很重要，因为无法对外部引用的SVG文件的各个元素进行动画或以其他方式进行操作；只有在页面上直接（通过**文档对象模型**（**DOM**））可用SVG元素时才可能。
- en: 'The following example shows a simple inline SVG image with three circles and
    teases one of the most powerful tools you have when working with inline SVG: CSS!
    CSS can be used to style SVG elements in the same way that you can style regular
    HTML elements. This opens up a world of possibilities. The properties used here
    are probably new to you since they are SVG-specific, but just like the `background-color`
    or `border` properties you''re used to, you can adjust the basic look and feel
    of SVG elements with CSS. In this next example, the CSS defines a default `fill`
    color for all circles, adds a `border` to the second circle, and then changes
    the `fill` color for the third circle. If you''re not already scheming of ways
    to use CSS to manipulate SVG elements, rest assured you''ll have plenty of ideas
    after reading [Chapter 5](a2e7c773-349a-47e8-81f1-2cd6d22081f6.xhtml), *Working
    with SVG and CSS*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一个简单的内联SVG图像，其中包含三个圆圈，并展示了在使用内联SVG时您拥有的最强大的工具之一：CSS！CSS可以用来以与样式常规HTML元素相同的方式来样式化SVG元素。这打开了一系列可能性。这里使用的属性可能对您来说是新的，因为它们是特定于SVG的，但就像您习惯的`background-color`或`border`属性一样，您可以使用CSS调整SVG元素的基本外观和感觉。在下一个示例中，CSS为所有圆圈定义了默认的`fill`颜色，为第二个圆圈添加了`border`，然后更改了第三个圆圈的`fill`颜色。如果您还没有计划如何使用CSS来操作SVG元素，那么请放心，阅读完[第5章](a2e7c773-349a-47e8-81f1-2cd6d22081f6.xhtml)之后，您将有很多想法：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Opening a browser will show the results of all that CSS:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器将显示所有CSS的结果：
- en: '![](img/930a3792-57a0-458a-970a-0a0eccb1f858.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/930a3792-57a0-458a-970a-0a0eccb1f858.png)'
- en: Feature detection and Modernizr
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性检测和Modernizr
- en: While overall support for SVG on the global web ([https://caniuse.com/#search=svg](https://caniuse.com/#search=svg))
    is now very high, it's not uniform and there are still non-supporting browsers
    out there. This is where Modernizr, the feature detection library, can be useful.
    If your user base is broad or you're using newer (even experimental) features,
    you can use Modernizr to detect browser compatibility with your important features
    and adjust your code accordingly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管全球网络对SVG的整体支持（[https://caniuse.com/#search=svg](https://caniuse.com/#search=svg)）现在非常高，但并不一致，仍然存在不支持SVG的浏览器。这就是特性检测库Modernizr可以派上用场的地方。如果您的用户群广泛，或者您正在使用更新的（甚至是实验性的）功能，您可以使用Modernizr来检测浏览器对重要功能的兼容性，并相应地调整您的代码。
- en: There are two ways this works. One is the classes that Modernizr can place on
    the HTML element. The other is the global Modernizr object that contains results
    for all the tests as *Booleans*. Before we move on, I'll show you examples of
    both tools in action.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作有两种方式。一种是Modernizr可以放置在HTML元素上的类。另一种是全局Modernizr对象，其中包含所有测试结果作为*布尔值*。在我们继续之前，我将向您展示这两种工具的示例。
- en: The Modernizr project provides hundreds of tests. Since some of the tests are
    quite expensive (in terms of resources needed to compute, when working with Modernizr,
    you want to use just the tests you need for your application. In this case, I've
    created a specific build of Modernizr that tests for multiple SVG features and
    nothing else. When added to an HTML page, this file will add classes to the HTML
    element indicating support for various SVG features
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Modernizr项目提供了数百个测试。由于某些测试相当昂贵（在计算所需资源方面），因此在使用Modernizr时，您希望仅使用您的应用程序所需的测试。在这种情况下，我创建了一个特定的Modernizr构建，用于测试多个SVG功能，而不测试其他内容。将此文件添加到HTML页面后，将向HTML元素添加类，指示对各种SVG功能的支持
- en: 'Here''s the output of the HTML element in Microsoft Edge. The `no-smil` class
    indicates that Edge doesn''t support **Synchronized Multimedia Integration Language**
    (**SMIL**), but does support everything else we''re testing for:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Microsoft Edge中HTML元素的输出。 `no-smil`类表示Edge不支持**同步多媒体集成语言**（**SMIL**），但支持我们正在测试的其他所有内容：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Output from the latest Chrome Version indicates support for all tested features:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最新Chrome版本的输出显示支持所有测试功能：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And finally, Internet Explorer 8 (IE8), which has no SVG support at all:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Internet Explorer 8（IE8）根本不支持SVG：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using these classes would allow you to, as a simple example, provide a PNG
    `fallback` function for CSS background images in IE8:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些类可以让您为IE8提供PNG`fallback`功能，例如为CSS背景图像提供支持：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As was mentioned, Modernizr also exposes a global Modernizr JavaScript object
    with each of the tests available as a Boolean. The following example shows how
    to access that Boolean and using an `if` statement for the code approximately,
    depending on whether or not SVG is supported:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Modernizr还公开了一个全局Modernizr JavaScript对象，其中包含每个可用测试的布尔值。以下示例显示了如何访问该布尔值，并使用`if`语句对代码进行近似处理，具体取决于SVG是否受支持：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In general, the rest of this book will not focus on `fallbacks` for older browsers,
    but it is useful to know that they're available if you're working in an environment
    where you need to support a broad range of browsers and devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，本书的其余部分不会专注于老版本浏览器的`回退`，但如果你在需要支持广泛的浏览器和设备的环境中工作，了解它们的存在是很有用的。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the basics of SVG including several SVG-specific
    elements, such as `circle`, `text`, and the elements used to make SVG gradients.
    We also learned about several ways to use SVG in HTML documents and as a background
    image in CSS.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于SVG的基础知识，包括几个SVG特定的元素，如`circle`，`text`，以及用于创建SVG渐变的元素。我们还学习了在HTML文档中以及在CSS中将SVG用作背景图像的几种方法。
- en: We also learned about the Modernizr feature detection library and how to use
    it to create `fallbacks` for browsers that don't support SVG or specific SVG features.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了关于Modernizr特性检测库以及如何使用它为不支持SVG或特定SVG功能的浏览器创建`回退`。
- en: In [Chapter 2](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml), *Getting Started
    with Authoring SVG*, you'll learn about many more SVG features as you will expand
    your knowledge of authoring SVG documents.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](fcc9b174-2f03-4b20-96be-5c62deae4581.xhtml)中，*开始使用SVG进行创作*，你将学习更多关于SVG功能的知识，扩展你对创作SVG文档的了解。
