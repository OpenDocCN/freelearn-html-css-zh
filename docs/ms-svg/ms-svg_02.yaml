- en: Getting Started with Authoring SVG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SVG进行创作的入门
- en: Now that you've dipped your toes in the water of SVG, it is time to take a deeper
    look at common SVG elements and their usage. This chapter will focus on the most
    common SVG elements and their usage, covering some that you've already learned
    about in more depth, and then introducing many other elements that you'll use
    in creating SVG images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经初步了解了SVG，是时候更深入地了解常见的SVG元素及其用法了。本章将重点介绍最常见的SVG元素及其用法，深入介绍您已经学习过的一些元素，并介绍您在创建SVG图像时将使用的许多其他元素。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Basic SVG shapes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本SVG形状
- en: The SVG positioning system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG定位系统
- en: Gradients and patterns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变和图案
- en: Using SVG images generated from software programs, such as Adobe Illustrator,
    Inkscape, and Sketch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用软件程序生成的SVG图像，例如Adobe Illustrator、Inkscape和Sketch
- en: Positioning in SVG
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG中的定位
- en: 'As you saw in [Chapter 1](3f798c1a-7805-4b48-9ae2-0ee4a1e09a38.xhtml),* Introducing
    Scalable Vector Graphics*, SVG elements use a coordinate plane positioning system.
    Elements in an SVG document are located using *x* and *y* coordinates. This should
    be familiar to you from your geometry class or, more specifically to the web,
    if you''re used to working with CSS, absolutely positioned elements. The following
    code shows two variations on the positioning scheme that you''ve already seen
    with both a circle element, which uses (`cx`, *center x)*, and (`cy`, *center
    y)*, attributes to place the `circle` element based on the center of the circle
    and the `rect` element, which will use the `x` and `y` attributes to place the
    upper left-hand corner of the square on the coordinate plane:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在[第1章](3f798c1a-7805-4b48-9ae2-0ee4a1e09a38.xhtml)中所见，*介绍可伸缩矢量图形*，SVG元素使用坐标平面定位系统。SVG文档中的元素使用*x*和*y*坐标来定位。这对您来说应该很熟悉，因为您在几何课程中或者更具体地说，在网页上使用CSS时，您已经习惯了绝对定位的元素。以下代码展示了您已经在圆元素和矩形元素上看到的定位方案的两种变化，圆元素使用(`cx`，*center
    x)*和(`cy`，*center y)*属性来基于圆的中心放置`circle`元素，而`rect`元素将使用`x`和`y`属性来在坐标平面上放置正方形的左上角：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Rendered in the browser, it looks like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现的效果如下：
- en: '![](img/076383f9-55e3-4c21-93cc-6f3c730dcbe7.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/076383f9-55e3-4c21-93cc-6f3c730dcbe7.png)'
- en: With the exception of using the two center properties to place an element based
    on its center, *x* and *y*, this should look just like positioning an element
    in CSS. Where it gets interesting is in the intersection of `height` and `width`
    and the value of the `viewBox` attribute on the SVG element itself.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用两个中心属性来基于其中心放置元素，*x*和*y*，这应该看起来就像在CSS中定位元素一样。有趣的地方在于`height`和`width`的交集以及SVG元素本身的`viewBox`属性的值。
- en: viewBox and viewport in SVG
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG中的viewBox和视口
- en: The `height` and `width` attributes define the *viewport* of the SVG element.
    The viewport can be thought of in the same way as the viewport in your browser.
    It defines the visible dimensions of the SVG document. The dimensions of the underlying
    SVG document can be larger than the viewport and, as with HTML, elements can be
    offscreen entirely. Everything that is visible is within the dimensions of the
    viewport.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`和`width`属性定义了SVG元素的*视口*。视口可以被视为与浏览器中的视口相同。它定义了SVG文档的可见尺寸。底层SVG文档的尺寸可以大于视口，并且与HTML一样，元素可以完全不在屏幕上。所有可见的内容都在视口的尺寸内。'
- en: If you just set the `height` and `width` attributes of an SVG element and don't
    use the `viewBox` attribute, it will behave in a manner equivalent to what you
    would expect if you've worked with CSS. In the case of the previous example, the
    viewport coordinate system will start with the coordinates `(0,0)` and will end
    at `(350, 150)`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只设置SVG元素的`height`和`width`属性，并且不使用`viewBox`属性，它将以与您在CSS中使用的方式相同的方式运行。在前面的例子中，视口坐标系统将以坐标`(0,0)`开始，并以`(350,
    150)`结束。
- en: Throughout this book, coordinates will be rendered as (`x` value, `y` value).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，坐标将呈现为(`x`值，`y`值)。
- en: In this case, each user unit will default to one pixel on the screen.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，每个用户单位默认为屏幕上的一个像素。
- en: The `viewBox` attribute lets you change that initial viewport coordinate system.
    By redefining that coordinate system, you can shift and scale the underlying SVG
    document in interesting ways. Instead of trying to *describe* what's possible,
    let's look at some examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewBox`属性允许您更改初始视口坐标系统。通过重新定义该坐标系统，您可以以有趣的方式移动和缩放底层SVG文档。让我们看一些例子，而不是试图*描述*可能发生的事情。'
- en: 'In every example we''ve shown so far, we''ve used the `viewBox` attribute and
    it''s been set to match the dimensions of the `height` and `width` attributes
    of the viewport. What happens if we change the `height` and `width` attributes
    of the SVG element and don''t change `viewBox` to match? Adding a second SVG element
    with new `height` attributes and `width` equal to double the original values creates
    a second version of the image at twice the size:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们展示的每个例子都使用了`viewBox`属性，并且它被设置为与视口的`height`和`width`属性的尺寸相匹配。如果我们改变SVG元素的`height`和`width`属性，并且不改变`viewBox`以匹配，会发生什么？添加一个新的SVG元素，其`height`属性和`width`属性等于原始值的两倍，会创建一个两倍大小的图像的第二个版本：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is what it looks like in a browser. As you can see, the viewport has been
    doubled, but since `viewBox` has the same dimensions, the exact same coordinates
    on the `circle` and `rect` elements create a scaled-up version of the image. In
    this case, the user units are no longer equivalent to one pixel, but the calculations
    inside the SVG element remain the same:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下。如您所见，视口已经加倍，但由于`viewBox`具有相同的尺寸，`circle`和`rect`元素上的确切坐标仍会创建图像的放大版本。在这种情况下，用户单位不再等同于一个像素，但SVG元素内部的计算仍然保持不变：
- en: '![](img/8d718d17-2dc6-4d61-bf3f-9615ad69d6a5.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d718d17-2dc6-4d61-bf3f-9615ad69d6a5.png)'
- en: You could scale this up as large as you like and it would render perfectly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将其放大到任意大小，它都会完美呈现。
- en: What happens if we adjust the `viewBox` attribute itself? What does the value
    of the `viewBox` attribute represent?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调整`viewBox`属性本身会发生什么？`viewBox`属性的值代表什么？
- en: 'The `viewBox` attribute takes four parameters: `min-x`, `min-y`, `width`, and
    `height`. `min-x` and `min-y` define the upper-left corner of `viewBox`. Now, `width`
    and `height` determine the width and height of that `viewBox`. Playing with these
    values shows how they interact with the height and width of the viewport. The
    first two examples change the *x* and *y* positions of the viewport''s coordinate
    system. The first example offsets it by 20% (70 and 30 are 20% of the SVG width
    and height) in the positive direction. The second example offsets it by 20% in
    the negative direction. The third example changes the width and height of the
    `viewBox `attribute, shrinking it by half:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewBox`属性有四个参数：`min-x`、`min-y`、`width`和`height`。`min-x`和`min-y`定义了`viewBox`的左上角。现在，`width`和`height`确定了`viewBox`的宽度和高度。调整这些值可以显示它们如何与视口的高度和宽度交互。前两个示例改变了视口坐标系的*x*和*y*位置。第一个示例将其正向偏移了20%（70和30分别是SVG宽度和高度的20%）。第二个示例将其负向偏移了20%。第三个示例改变了`viewBox`属性的宽度和高度，将其缩小了一半：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Rendered in the browser, you can see the effect of those changes to the `viewBox`
    attribute. The offsets move the circle and square closer relative to the upper
    left-hand corner of the viewport. Shrinking the size of the `viewBox` attribute
    by half and keeping the size of `rect` and `circle` the same, effectively doubles
    the size of the rendered elements. The viewport stays the same size so the `viewBox` attribute
    and associated user units scales up by a factor of 2 to fit. All the elements
    inside it are scaled up as necessary:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，你可以看到`viewBox`属性的这些变化效果。偏移移动了圆和正方形，使其相对于视口的左上角更接近。将`viewBox`属性的大小缩小一半，并保持`rect`和`circle`的大小不变，实际上使渲染元素的大小加倍。视口保持相同大小，因此`viewBox`属性和相关的用户单位按比例放大了两倍。其中的所有元素都按需放大：
- en: '![](img/b93e1b64-083b-4385-9195-4bb01af354d4.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b93e1b64-083b-4385-9195-4bb01af354d4.png)'
- en: 'The following diagram shows what''s at work in a little more depth (the black
    outline overlay represents the `viewBox` viewport):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了更深入的工作原理（黑色轮廓覆盖层代表`viewBox`视口）：
- en: '![](img/f15b03dc-6375-46a7-9ca9-5797364429de.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f15b03dc-6375-46a7-9ca9-5797364429de.png)'
- en: There is still more to learn about positioning in SVG, but we're going to tackle
    those topics as they arise throughout this rest of the book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVG中仍有更多关于定位的知识需要学习，但我们将在本书的其余部分逐步解决这些问题。
- en: Now let's take a deeper look at some of the other elements that make up the
    SVG experience.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更深入地了解一些构成SVG体验的其他元素。
- en: Introducing paths
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入路径
- en: 'By far the most important element in the SVG specification is the `path` element.
    `path` allows you to draw lines and shapes using vectors defined by a series of
    commands passed in as values to the `d` attribute. Remember when I mentioned that
    one of the biggest roadblocks to SVG adoption was the lack of a friendly API?
    This `path` element is likely to be the biggest sore spot in the entire specification.
    The values you might see in a `d` attribute can be incredibly dense and difficult
    to read. How difficult to read? Feast your eyes on the *S* element from the SVG
    logo:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVG规范中，最重要的元素是`path`元素。`path`允许您使用作为`d`属性值传递的一系列命令来绘制线条和形状。还记得我提到过SVG采用的最大障碍之一是缺乏友好的API吗？这个`path`元素很可能是整个规范中最大的痛点。您可能在`d`属性中看到的值可能非常密集且难以阅读。有多难以阅读？看看SVG标志中的*S*元素：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Without knowing what's going on, that's impossible to parse and even knowing
    the rules for the `d` attribute, it's difficult to keep track of.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道发生了什么，是不可能解析的，即使知道`d`属性的规则，也很难跟踪。
- en: 'Let''s look at a simpler example so that you can get your head around the syntax.
    In this document, we''ve created a stylized letter R. Here''s how to read the
    instructions of the `d` attribute:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个更简单的例子，以便你能理解语法。在这个文档中，我们创建了一个风格化的字母R。以下是如何阅读`d`属性的指令：
- en: (M)ove to point `(100,100)`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (M)ove to point `(100,100)`.
- en: Draw a (L)ine to `(100,300)`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画一条(L)线到`(100,300)`。
- en: Draw a (L)ine to `(150,300)`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画一条(L)线到`(150,300)`。
- en: Draw a (L)ine to `(150,150)`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画一条(L)线到`(150,150)`。
- en: Draw a (S)mooth cubic Bézier curve from the current point to the point `(150,175)`
    with `(250,150)` as the second control point. Control points provide directional
    information used to draw the curve. This version of the cubic Bézier `curveto`
    instruction is actually shorthand indicating that the control points are reflected.
    It's possible in other formats to define multiple control points in pointing in
    different directions. This will create a more complex curve.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从当前点绘制(S)平滑立方贝塞尔曲线到点`(150,175)`，第二个控制点为`(250,150)`。控制点提供用于绘制曲线的方向信息。这个版本的立方贝塞尔`curveto`指令实际上是控制点被反射的简写。在其他格式中，可以定义指向不同方向的多个控制点。这将创建一个更复杂的曲线。
- en: Draw a (L)ine to `(200,300)`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画一条(L)线到`(200,300)`。
- en: Draw a (L)ine to `(250,300)`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画一条(L)线到`(250,300)`。
- en: Draw a (L)ine to `(225,225)`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画一条(L)线到`(225,225)`。
- en: 'Draw a (S)mooth cubic Bézier curve from the current starting point to the point
    `(100,100)` with `(350,100)` as the second control point:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从当前起始点绘制(S)平滑立方贝塞尔曲线到点`(100,100)`，第二个控制点为`(350,100)`：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Rendered in a browser, these commands produce the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，这些命令产生以下结果：
- en: '![](img/1ec9c126-a3cd-4db4-9a18-3d8407a76cb6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ec9c126-a3cd-4db4-9a18-3d8407a76cb6.png)'
- en: This set of instructions is still complicated and it doesn't even touch on all
    of the possible options for a `path` element. The good news is that most of the
    time when you work with SVG these complex `path`s will be generated — either for
    you (using a graphical SVG editor) or by you through JavaScript. So, in reality,
    you just need to be able to understand the instructions and their usage. You don't
    need to sit there and parse through this data instruction by instruction.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列的说明仍然很复杂，甚至没有涉及`path`元素的所有可能选项。好消息是，当您使用SVG时，大多数时候这些复杂的`path`将被生成 - 要么由您自己（使用图形SVG编辑器），要么通过JavaScript。因此，实际上，您只需要能够理解说明和它们的用法。您不需要坐在那里逐条解析这些数据指令。
- en: More on basic shapes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于基本形状
- en: Now that you've learned about `path`, let's take a look at some more straightforward
    parts of the SVG universe and let's examine some more basic shapes. You've already
    learned about `circle` and `rect`. Let's take a look at a few more basic shapes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了`path`，让我们来看看SVG宇宙中更直接的部分，并且让我们检查一些更基本的形状。您已经了解了`circle`和`rect`。让我们看看一些更基本的形状。
- en: The line element
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线元素
- en: The `path` element allows you to draw anything you can imagine using a long
    series of instructions. Thankfully, there are many convenient elements that define
    common shapes that are a lot easier to work with than the `path` element. The
    first of these that you'll learn about is the `line` element.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`path`元素允许您使用一长串的说明来绘制您能想象到的任何东西。值得庆幸的是，有许多方便的元素定义了比`path`元素更容易处理的常见形状。其中您将学习的第一个是`line`元素。'
- en: 'The following example draws a grid on a `500` by `500` square. The `line` elements
    in use here take five arguments: `x1`, `y1`, `x2`, `y2`, and a `stroke`. The *x*
    and *y* coordinates indicate the beginning (`x1`, `y1`) and ending points (`x2`,
    `y2`) of the line. This SVG document draws a grid `100` pixels on each side in
    a `500` pixel square:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在一个`500`乘`500`的正方形上绘制了一个网格。这里使用的`line`元素需要五个参数：`x1`，`y1`，`x2`，`y2`和`stroke`。*x*和*y*坐标表示线的起点（`x1`，`y1`）和终点（`x2`，`y2）。这个SVG文档在一个`500`像素的正方形中绘制了每边`100`像素的网格：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Rendered in the browser, the previous markup produces the following grid:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，前面的标记产生了以下网格：
- en: '![](img/44bd8c61-3400-4e40-8877-2637debf5ddb.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bd8c61-3400-4e40-8877-2637debf5ddb.png)'
- en: As an aside, generating a grid like this can be helpful with generating and
    debugging SVG documents. With a finer grained mesh on the grid, you can more easily
    pinpoint where calculated or manually generated positions are on the screen.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，生成这样的网格对生成和调试SVG文档很有帮助。在网格上有更细粒度的网格时，您可以更容易地确定屏幕上计算或手动生成的位置。
- en: The ellipse element
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 椭圆元素
- en: '`ellipse` is just like `circle`, except it takes *two radius* arguments, `rx`
    and `ry` for the *x* and *y* radius, respectively. This additional radius argument
    is needed as, otherwise, we would just be drawing a standard circle:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`ellipse`就像`circle`一样，只是它需要*两个半径*参数，`rx`和`ry`分别代表*x*和*y*的半径。由于需要额外的半径参数，否则我们只会画一个标准的圆：'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s the output of that straightforward markup:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是直接标记的输出：
- en: '![](img/75731a0d-fd92-4b16-bf29-fa5b22c9b6dc.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75731a0d-fd92-4b16-bf29-fa5b22c9b6dc.png)'
- en: The polygon element
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多边形元素
- en: 'The `polygon` element creates close-ended shapes consisting of multiple straight
    lines starting from an initial `x,y` coordinate and ending with a final point
    on the coordinate plan. The `points` attribute takes a list of points on the coordinate
    plan to define the `polygon` element. The final point of a `polygon` element automatically
    connects to the first point. The following code sample draws a star:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`polygon`元素创建由多条直线组成的*封闭*形状，从初始`x，y`坐标开始，并以坐标平面上的最终点结束。`points`属性接受坐标平面上的点列表来定义`polygon`元素。`polygon`元素的最终点会自动连接到第一个点。以下代码示例绘制了一个星星：'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following shows the output of the preceding SVG element:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了前面SVG元素的输出：
- en: '![](img/cf25a9a8-ae58-4c18-9431-e846e7844f53.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf25a9a8-ae58-4c18-9431-e846e7844f53.png)'
- en: With `polygon` and `polyline`, it's just a suggestion, but not a requirement
    to separate the `x,y` pairs with commas.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`polygon`和`polyline`，这只是一个建议，而不是将`x，y`对用逗号分隔的要求。
- en: 'The following code is programmatically equivalent to the previous example (although
    much harder to read). It renders the exact same shape:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在程序上等同于前面的例子（尽管更难阅读）。它呈现了完全相同的形状：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The polyline element
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 折线元素
- en: 'The `polyline` element creates *open-ended* shapes consisting of multiple straight
    lines. The `points` attribute takes a list of `x,y` points on the coordinate plan
    to define `polyline`. The following code sample traces the pattern of the constellation
    Draco (the dragon) in the night sky:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`polyline`元素创建由多条直线组成的*开放*形状。`points`属性接受坐标平面上的`x，y`点列表来定义`polyline`。以下代码示例跟踪了天空中龙座的图案：'
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run in the browser, the previous example looks like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行，前面的例子看起来是这样的：
- en: '![](img/35eebdb5-2607-4906-8d0b-913440737686.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35eebdb5-2607-4906-8d0b-913440737686.png)'
- en: More on fills and strokes
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于填充和描边
- en: You've seen them in use in most of the examples, now let's take a little bit
    of a more complete look at fills and strokes. These presentation attributes are
    important to SVG, especially when working with them dynamically, as it's much
    easier to manipulate elements directly as compared to writing dynamic CSS.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在大多数示例中看到了它们的使用，现在让我们更全面地了解一下填充和描边。这些表示属性对SVG很重要，特别是在动态工作时，因为与编写动态CSS相比，直接操作元素要容易得多。
- en: '`fill` and `stroke` are collectively referred to as `paint` properties. `fill`
    sets the inside color of the object and `stroke` sets the color of the line drawn
    around the object. As you''ve already seen, they can accept any valid CSS color
    value. They can also accept a reference to a *paint server element* (these are
    `hatch`, `linearGradient`, `meshgradient`, `pattern`, `radialGradient`, and `solidcolor`),
    which are elements that define a paint style for the element. You''ve already
    seen one of these (`linearGradient`) and will learn about the more commonly supported
    ones shortly. Before you do, however, it''s time to take a look at some stroke-specific
    attributes that control the way the lines appear and fit together.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`fill`和`stroke`被统称为`paint`属性。`fill`设置对象的内部颜色，`stroke`设置对象周围绘制的线的颜色。正如您已经看到的，它们可以接受任何有效的CSS颜色值。它们还可以接受对*绘画服务器元素*的引用（这些是`hatch`、`linearGradient`、`meshgradient`、`pattern`、`radialGradient`和`solidcolor`），这些元素定义了元素的绘画样式。您已经看到了其中一个（`linearGradient`），很快将了解更常见的支持。然而，在您这样做之前，现在是时候看一看一些控制线条外观和拟合的特定于描边的属性了。'
- en: stroke-dasharray
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stroke-dasharray
- en: 'The `stroke-dasharray` attribute defines a list of comma-and/or whitespace-separated
    lengths or percentages that specify an alternating pattern of dashes and gaps
    that are used to stroke the line. The following example shows several different
    examples. The first is a series of 10 pixels on and 5 pixels off. The second example
    turns the pixels on and off based on the Fibonacci sequence. The third series
    turns the pixels on and off based on a series of prime numbers:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`stroke-dasharray`属性定义了一个逗号和/或空格分隔的长度或百分比列表，指定了用于描边线的虚线和间隙的交替模式。以下示例显示了几个不同的示例。第一个是一系列10像素的开和5像素的关。第二个示例根据斐波那契数列打开和关闭像素。第三个系列根据质数系列打开和关闭像素：'
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Rendered in the browser, the preceding code produces the following example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，上述代码产生以下示例：
- en: '![](img/e2025b07-1ba6-4eba-969d-b3e61f798f48.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2025b07-1ba6-4eba-969d-b3e61f798f48.png)'
- en: If an odd number of values are provided as the value of the attribute then the
    list is repeated in order to yield an even number of values. This may not result
    in a pattern you expect as values might shift from dashes to spaces and create
    an unexpected result. In the following example the single value of `10` produces
    `10` on and `10` off, which is probably what you envisioned. The `"15,10,5"` pattern,
    on the other hand, produces `15` on, `10` off, `5` on, `15` off, `10` on, and `5`
    off. If you expect the pattern to *always* have `15` as an `"on"` then this might
    come as a surprise.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的值作为属性的值的数量是奇数，则列表将重复以产生偶数个值。这可能不会产生您期望的模式，因为值可能会从虚线转移到空格，并产生意想不到的结果。在以下示例中，单个值`10`产生`10`开和`10`关，这可能是您预期的结果。另一方面，`"15,10,5"`模式产生`15`开，`10`关，`5`开，`15`关，`10`开和`5`关。如果您期望模式始终将`15`作为“开”，那么这可能会让您感到惊讶。
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can see this in the browser. This may be the look you''re after, but if
    it''s not, now you know why:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在浏览器中看到这一点。这可能是您想要的外观，但如果不是，现在您知道原因了：
- en: '![](img/47f7ec9e-eade-4984-bcb8-bb8df372e6fe.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47f7ec9e-eade-4984-bcb8-bb8df372e6fe.png)'
- en: stroke-dashoffset
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stroke-dashoffset
- en: 'The `stroke-dashoffset` attribute accepts positive or negative length or percentage
    values and specifies the distance into the dash pattern to start rendering the
    dash. This offset can be seen in the following code example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`stroke-dashoffset`属性接受正值或负值的长度或百分比，并指定开始渲染虚线的虚线模式的距离。这个偏移量可以在以下代码示例中看到：'
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The effect of this attribute can be seen in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性的效果可以在以下截图中看到：
- en: '![](img/9f8fde1a-648d-44d7-9e2b-ccd0bcc31383.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f8fde1a-648d-44d7-9e2b-ccd0bcc31383.png)'
- en: stroke-linecap
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stroke-linecap
- en: 'The `stroke-linecap` attribute indicates the shape to be rendered at the end
    of an open line. The options are `butt`, `round`, `square`, and `inherit`. The
    following code sample shows the different rendering options in action. The two
    red lines are there to show the difference between `butt` and `square`. `butt`
    ends the `stroke` flush with the ends of the line. The `square` cap extends beyond
    the end of the line to include the thickness of the `stroke`''s:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`stroke-linecap`属性指示在开放线的末端呈现的形状。选项包括`butt`、`round`、`square`和`inherit`。以下代码示例展示了不同的渲染选项。两条红线是为了显示`butt`和`square`之间的区别。`butt`使`stroke`与线的末端齐平。`square`端延伸到线的末端，包括`stroke`的厚度： '
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result of this can be seen in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果可以在以下截图中看到：
- en: '![](img/1782030a-be88-4926-9da7-50084b773ba7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1782030a-be88-4926-9da7-50084b773ba7.png)'
- en: stroke-linejoin
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stroke-linejoin
- en: 'The `stroke-linejoin` attribute defines the way that the corners of `path`s
    and basic shapes are rendered. The possible values are `miter`, `round`, `bevel`,
    and `inherit`. `Round` renders smoothly curved corners, `miter` produces sharp
    edges with only one angle for the corner, and `bevel` adds a new angle to the
    corner to create a compound corner:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`stroke-linejoin`属性定义了`path`和基本形状的拐角的呈现方式。可能的值有`miter`、`round`、`bevel`和`inherit`。`Round`呈现平滑的曲线角，`miter`产生只有一个角的尖边，`bevel`在角上添加一个新的角来创建一个复合角：'
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These options can be seen in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项可以在以下截图中看到：
- en: '![](img/bb037f61-1dd0-4512-b36d-2b1e7b8b1cd7.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb037f61-1dd0-4512-b36d-2b1e7b8b1cd7.png)'
- en: stroke-opacity
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stroke-opacity
- en: 'The `stroke-opacity` attribute does what you might expect. It sets the opacity
    of a stroked object. The following sample sets three different opacities on three
    separate rectangles. You can see `stroke` interact not just with the background
    of the page, but with the fill of the rectangle as well, as `stroke` is centered
    on the edge of the rectangle and part of it covers the filled-in area:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`stroke-opacity`属性的作用与您预期的一样。它设置了描边对象的不透明度。以下示例在三个单独的矩形上设置了三种不同的不透明度。您可以看到`stroke`不仅与页面的背景交互，还与矩形的填充区域交互，因为`stroke`位于矩形边缘的中心，并且部分覆盖了填充区域：'
- en: There is no easy way to change the positioning of the `stroke` attribute on
    an SVG element. In graphics programs, it's possible to set the `stroke` attribute
    to be on the inside of the box, centered on the edge of the box (which is how
    SVG does it) and outside the box. There is a proposal in the new SVG strokes ([https://www.w3.org/TR/svg-strokes/](https://www.w3.org/TR/svg-strokes/))
    specification to change the alignment of `stroke` (called stroke-alignment) but
    there isn't anything in the browser at the present time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVG元素上没有简单的方法来更改`stroke`属性的定位。在图形程序中，可以将`stroke`属性设置为在框的内部、在框的边缘上居中（这是SVG的做法）和在框的外部。在新的SVG
    strokes ([https://www.w3.org/TR/svg-strokes/](https://www.w3.org/TR/svg-strokes/))规范中有一个提案来更改`stroke`的对齐方式（称为stroke-alignment），但目前浏览器中还没有这样的功能。
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding code can be seen in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出可以在以下截图中看到：
- en: '![](img/08f5190d-b200-48be-813e-03fcba8be4a9.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08f5190d-b200-48be-813e-03fcba8be4a9.png)'
- en: Now that we've looked at the different options for `stroke`s, it's time to look
    at some of the other options for fills. These are the paint server elements that
    we mentioned before. You've already encountered one of them, `linearGradient`.
    You'll also learn about two others that are commonly used, `radialGradient` and
    `pattern`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了`stroke`的不同选项，是时候看看一些其他填充选项了。这些是我们之前提到的绘图服务器元素。您已经遇到了其中之一，`linearGradient`。您还将了解另外两个常用的，`radialGradient`和`pattern`。
- en: linearGradient and radialGradient
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: linearGradient和radialGradient
- en: You've already seen the `linearGradient` element in [Chapter 1](3f798c1a-7805-4b48-9ae2-0ee4a1e09a38.xhtml),
    *Introducing Scalable Vector Graphics*. There's also `radialGradient` that works
    in much the same way, except it renders gradients that radiate around a center
    point. Both elements are added to the `defs` section and each has a series of
    `stop`s with `offset`s and `stop-color`s defining the gradient.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在[第1章](3f798c1a-7805-4b48-9ae2-0ee4a1e09a38.xhtml)中看到了`linearGradient`元素，*介绍可伸缩矢量图形*。还有`radialGradient`，它的工作方式基本相同，只是它呈现以中心点为中心辐射的渐变。这两个元素都添加到`defs`部分，每个元素都有一系列带有`offset`和`stop-color`的`stop`，定义了渐变。
- en: 'They are then referenced by their `id` attribute as the argument to the  `fill`
    attribute of `rect`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它们通过它们的`id`属性作为`rect`的`fill`属性的参数引用：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This produces the following output:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '**![](img/bc18b819-7837-4a13-adac-ad5c7c7558ea.png)**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/bc18b819-7837-4a13-adac-ad5c7c7558ea.png)**'
- en: The pattern element
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pattern元素
- en: 'The final paint server we''ll look at is the `pattern` element. `pattern` allows
    you to define a small graphic element that you can reference as `fill` or `stroke`
    and tile over an element in a repeating pattern. In this example, we''re using
    a `pattern` element with a single child `polygon` element that defines two diagonal
    lines that combine to create a long pattern:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的最后一个绘图服务器是`pattern`元素。`pattern`允许您定义一个小的图形元素，您可以将其引用为`fill`或`stroke`并在元素上以重复的图案平铺。在这个例子中，我们使用了一个`pattern`元素，它有一个单独的子`polygon`元素，定义了两条对角线，组合在一起创建了一个长图案：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Rendered out in the browser, this creates the following jagged pattern:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中呈现，这会创建以下锯齿状图案：
- en: '![](img/2ef53558-7377-4576-908f-a4f2f59c5d6e.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ef53558-7377-4576-908f-a4f2f59c5d6e.png)'
- en: Authoring programs
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创作程序
- en: All of the examples so far in the book have been generated by hand. In practice,
    as you'll learn throughout this book, SVG is often generated by software. Most
    of this book will look at creating and manipulating SVG using web-based tools
    and libraries, but SVG images can also be generated by desktop drawing applications.
    While working on the web, you will often work with SVG images that have been created
    by designers in applications, such as Inkscape ([https://inkscape.org/en/](https://inkscape.org/en/)),
    Adobe Illustrator ([https://www.adobe.com/products/illustrator.html](https://www.adobe.com/products/illustrator.html)),
    or Sketch ([https://www.sketchapp.com/](https://www.sketchapp.com/)). These applications
    are wonderful because they allow non-technical designers to work with SVG to create
    images using advanced drawing tools.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中的所有示例都是手工生成的。在实践中，正如您将在本书中了解到的那样，SVG通常是由软件生成的。本书的大部分内容将涉及使用基于Web的工具和库创建和操作SVG，但SVG图像也可以由桌面绘图应用程序生成。在Web上工作时，您经常会使用设计师在应用程序中创建的SVG图像，例如Inkscape
    ([https://inkscape.org/en/](https://inkscape.org/en/))、Adobe Illustrator ([https://www.adobe.com/products/illustrator.html](https://www.adobe.com/products/illustrator.html))或Sketch
    ([https://www.sketchapp.com/](https://www.sketchapp.com/))。这些应用程序非常棒，因为它们允许非技术设计师使用高级绘图工具来创建SVG图像。
- en: While it's not a requirement for the rest of this book, I would suggest getting
    your hands on something you can use to author SVG in this way. While you want
    to learn how to work with SVG in a dynamic, web-based environment, it's great
    to have the option to use advanced drawing tools to update and manipulate SVG
    elements. I have used both Adobe Illustrator and Inkscape over the years and many
    people swear by Sketch, so those are three options to start with. For just starting
    out, I would suggest looking first at Inkscape. Inkscape is a free, open source
    software released under the GNU license and it's pretty solid from a feature perspective,
    so it's a good default choice.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是本书的其余部分的要求，但我建议您找到一些可以用来以这种方式编写SVG的工具。虽然您希望学习如何在动态的基于Web的环境中使用SVG，但拥有使用高级绘图工具来更新和操作SVG元素的选项是很棒的。多年来，我一直在使用Adobe
    Illustrator和Inkscape，许多人都喜欢Sketch，所以这是三个开始的选择。对于刚开始，我建议首先看看Inkscape。Inkscape是一个免费的开源软件，发布在GNU许可下，从功能的角度来看相当不错，所以是一个很好的默认选择。
- en: Whatever application you choose (and even if you don't choose one and simply
    inherit SVG images authored in one), it's good to know that there are some downsides
    to these applications. These applications are designed for the authoring experience
    and aren't producing SVG images optimized for the web so it's important to keep
    that in mind when pulling SVG images created by graphics program into a web project.
    You'll learn more about optimizing SVG images later on in the book, but you should
    be aware of what you're up against from the start.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪个应用程序（甚至如果您不选择任何应用程序，只是继承了一个SVG图像），都要知道这些应用程序存在一些缺点。这些应用程序是为了创作体验而设计的，并不会生成为网络优化的SVG图像，因此在将由图形程序创建的SVG图像导入到网络项目时，要牢记这一点非常重要。您将在本书的后面学习更多关于优化SVG图像的知识，但是您应该从一开始就意识到您将面对的挑战。
- en: 'Look at the following screenshot. It shows a difference between two files that
    both render the exact same image. The one on the left is the SVG source file output
    by Inkscape. The file on the right is an optimized version. As you can see, there''s
    a lot of extra data sloshing around in the Inkscape file. That data is required
    by the application, but wouldn''t be required on the web, so removing it allowed
    us to cut the file down significantly:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的屏幕截图。它显示了两个渲染完全相同图像的文件之间的差异。左边的是Inkscape输出的SVG源文件。右边的文件是经过优化的版本。正如您所看到的，Inkscape文件中有很多额外的数据。这些数据是应用程序所需的，但在网络上并不需要，因此删除它们可以显著减小文件大小：
- en: '![](img/5571d0a1-6b7a-4b87-9626-045e516d07de.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5571d0a1-6b7a-4b87-9626-045e516d07de.png)'
- en: You'll learn about tools to clean up SVG files like this in [Chapter 11](af31515b-b7c2-4a61-a991-c2ba912b9d11.xhtml),
    *Tools to Optimize Your SVG*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[第11章](af31515b-b7c2-4a61-a991-c2ba912b9d11.xhtml)中学习清理SVG文件的工具，*优化SVG的工具*。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about multiple SVG features. You learned about
    `path`, which allows you to draw complex shapes using lines and curves. You also
    learned about a number of basic drawing tools that allow you to draw lines, ellipses,
    polygons, and polylines. In addition, you learned about a number of stroke and
    fill options.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了多个SVG功能。您了解了`path`，它允许您使用线条和曲线绘制复杂的形状。您还了解了一些基本绘图工具，可以用它们来绘制线条、椭圆、多边形和折线。此外，您还了解了一些描边和填充选项。
- en: Finally, you learned a little bit about the options for using software to draw
    static SVG and learned a little bit about the potential drawbacks of doing so.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您了解了使用软件绘制静态SVG的选项，并了解了这样做可能存在的一些缺点。
- en: In [Chapter 3](54409c55-8ae8-4ddc-962c-d0f2908137ef.xhtml), *Digging Deeper
    with SVG Authoring*, you'll continue to learn about SVG authoring, adding on to
    the growing list of tools you've experienced, and allowing you to create even
    more complex SVG images.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](54409c55-8ae8-4ddc-962c-d0f2908137ef.xhtml)中，*深入了解SVG创作*，您将继续学习SVG创作，增加您已经体验过的工具列表，并允许您创建更复杂的SVG图像。
