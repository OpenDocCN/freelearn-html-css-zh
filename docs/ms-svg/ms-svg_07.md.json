["```xml\n  function init() {\n      $(\".controls .btn\").on(\"click\", loadCursor); \n      $(\"#rect-save\").on(\"click\", rectSave);\n      $(\"#circle-save\").on(\"click\", circleSave);\n      $(\"#text-save\").on(\"click\", textSave);\n      $(\"#canvas\").on(\"click\", add);\n    }\n$().ready(init);\n```", "```xml\nfunction add($event) {\n      var $canvas = $(\"#canvas\");\n      var elem;\n      var doc = document;\n      var NS = canvas.getAttribute('xmlns');\n      var point = canvas.createSVGPoint();\n      var $elem;\n      point.x = $event.offsetX;\n      point.y = $event.offsetY;\n      var svgCoords = \n        point.matrixTransform(canvas.getScreenCTM().inverse());\n      if ($canvas.hasClass(\"active\")) {\n        if ($canvas.hasClass(\"square\")) {\n          elem = doc.createElementNS(NS, \"rect\");\n          $elem = $(elem).attr({\n            \"x\": svgCoords.x,\n            \"y\": svgCoords.y,\n            \"width\": 50,\n            \"height\": 50\n          });\n\n        } else if ($canvas.hasClass(\"circle\")) {\n          elem = doc.createElementNS(NS, \"circle\");\n\n          $elem = $(elem).attr({\n            \"cx\": svgCoords.x,\n            \"cy\": svgCoords.y,\n            \"r\": 10\n          });\n        } else if ($canvas.hasClass(\"text\")) {\n          elem = doc.createElementNS(NS, \"text\");\n          $elem = $(elem).attr({\n            \"x\": svgCoords.x,\n            \"y\": svgCoords.y,\n            \"width\": 50,\n            \"height\": 50\n          });\n          $elem.text(\"TEXT\");\n\n        }\n        $elem.attr(\"fill\", \"#ff8000\");\n        $canvas.append($elem);\n        $canvas.removeClass(\"active\");\n        $elem.on(\"click\", edit);\n      }\n    }\n```", "```xml\n   function edit($event) {\n      var $elem = $($event.target);\n      if ($elem.prop(\"nodeName\") === \"rect\") {\n        $(\"#rect-edit-modal\").modal(\"show\").data(\"current-element\",\n         $elem);\n\n        $(\"#rect-color\").val($elem.attr(\"fill\"));\n        $(\"#rect-x\").val($elem.attr(\"x\"));\n        $(\"#rect-y\").val($elem.attr(\"y\"));\n        $(\"#rect-width\").val($elem.attr(\"width\"));\n        $(\"#rect-height\").val($elem.attr(\"height\"));\n      }\n      else if ($elem.prop(\"nodeName\") === \"circle\") {\n        $(\"#circle-edit-modal\").modal(\"show\").data(\"current-element\",\n         $elem);\n        $(\"#circle-color\").val($elem.attr(\"fill\"));\n        $(\"#circle-cx\").val($elem.attr(\"cx\"));\n        $(\"#circle-cy\").val($elem.attr(\"cy\"));\n        $(\"#circle-radius\").val($elem.attr(\"r\"));\n      }\n      else if ($elem.prop(\"nodeName\") === \"text\") {\n        $(\"#text-edit-modal\").modal(\"show\").data(\"current-element\",\n         $elem);\n        $(\"#text-color\").val($elem.attr(\"fill\"));\n        $(\"#text-x\").val($elem.attr(\"x\"));\n        $(\"#text-y\").val($elem.attr(\"y\"));\n        $(\"#text-text\").val($elem.text());\n      }\n    }\n```", "```xml\n    function rectSave() {\n      $(\"#rect-edit-modal\").modal(\"hide\");\n      var $elem = $(\"#rect-edit-modal\").data(\"current-element\");\n      $elem.attr({\n        \"fill\": $(\"#rect-color\").val(),\n        \"x\": $(\"#rect-x\").val(),\n        \"y\": $(\"#rect-y\").val(),\n        \"height\": $(\"#rect-height\").val(),\n        \"width\": $(\"#rect-width\").val()\n      });\n    }\n    function circleSave() {\n      $(\"#circle-edit-modal\").modal(\"hide\");\n      var $elem = $(\"#circle-edit-modal\").data(\"current-element\");\n      $elem.attr({\n        \"fill\": $(\"#circle-color\").val(),\n        \"cx\": $(\"#circle-cx\").val(),\n        \"cy\": $(\"#circle-cy\").val(),\n        \"r\": $(\"#circle-radius\").val()\n      });\n    }\n    function textSave() {\n      $(\"#text-edit-modal\").modal(\"hide\");\n      var $elem = $(\"#text-edit-modal\").data(\"current-element\");\n      $elem.attr({\n        \"fill\": $(\"#text-color\").val(), \"x\": $(\"#text-x\").val(),\n        \"y\": $(\"#text-y\").val()\n      });\n      $elem.text($(\"#text-text\").val());\n    }\n```", "```xml\n<head>\n  <link rel=\"stylesheet\" \n   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.\n    min.css\" integrity=\"sha384-\n    Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n    crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"style.css\" />\n  <script src=\"img/jquery-3.3.1.min.js\" \n          integrity=\"sha256-\n            FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n            crossorigin=\"anonymous\"></script>\n  <script  \n   src=\"img/>    min.js\"></script>\n</head>\n```", "```xml\n<circle\n      fill=\"{{fill}}\" \n      cx=\"{{cx}}\" \n      cy=\"{{cy}}\" \n      r=\"{{r}}\" />\n```", "```xml\n<body ng-app=\"angularSVG\">\n  <div ng-controller=\"circleController\" class=\"container\">\n    <svg  width=\"150\" height=\"150\" \n     viewBox=\"0 0 150 150\" version=\"1.1\">\n      <circle\n      ng-attr-fill=\"{{fill}}\" \n      ng-attr-cx=\"{{cx}}\" \n      ng-attr-cy=\"{{cy}}\" \n      ng-attr-r=\"{{r}}\" />\n      <angular-rect></angular-rect>\n    </svg>\n    <div class=\"row\">\n      <div class=\"col-4\">\n        <label>Background color:</label>\n      </div>\n      <div class=\"col-8\">\n        <input type=\"color\" ng-model=\"fill\" id=\"circle-color\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-2\">\n        <label>cx:</label>\n      </div>\n      <div class=\"col-4\">\n        <input type=\"number\" ng-model=\"cx\" id=\"circle-cx\" class=\"form-\n          control\">\n      </div>\n      <div class=\"col-2\">\n        <label>cy:</label>\n      </div>\n      <div class=\"col-4\">\n        <input type=\"number\" ng-model=\"cy\" id=\"circle-cy\" class=\"form-\n         control\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-2\">\n        <label>radius:</label>\n      </div>\n      <div class=\"col-4\" height=\"{{cx}}>\n        <input type=\"number\" ng-model=\"r\" id=\"circle-radius\" \n          class=\"form-control\">\n      </div>\n    </div>\n  </div>\n```", "```xml\n <script>\n    angular.module('angularSVG', [])\n      .controller('circleController', function ($scope) {\n        $scope.cx = 75;\n        $scope.cy = 75;\n        $scope.r = 50;\n        $scope.fill = \"#ff0000\";\n      }).directive('angularRect', function() {\n        return {\n            restrict: 'E',\n            templateNamespace: 'svg',\n            template: '<rect x=\"125\" y=\"125\" width=\"10\" height=\"10\"\n             stroke=\"blue\" fill=\"none\"></rect>',\n            replace: true\n        };\n});\n  </script>\n```", "```xml\nnpm install --save bootstrap \n```", "```xml\n \"apps\": [\n    {\n      \"root\": \"src\",\n      \"outDir\": \"dist\",\n      \"assets\": [\n        \"assets\",\n        \"favicon.ico\"\n      ],\n      \"index\": \"index.html\",\n      \"main\": \"main.ts\",\n      \"polyfills\": \"polyfills.ts\",\n      \"test\": \"test.ts\",\n      \"tsconfig\": \"tsconfig.app.json\",\n      \"testTsconfig\": \"tsconfig.spec.json\",\n      \"prefix\": \"app\",\n      \"styles\": [\n        \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n        \"styles.css\"\n      ],\n      \"scripts\": [],\n      \"environmentSource\": \"environments/environment.ts\",\n      \"environments\": {\n        \"dev\": \"environments/environment.ts\",\n        \"prod\": \"environments/environment.prod.ts\"\n      }\n    }\n  ],\n```", "```xml\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AngularRectComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```xml\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public cx:number = 75;\n  public cy:number = 75;\n  public r:number = 50\n  public color:string = \"#cc0000\";\n}\n```", "```xml\n<div class=\"container\">\n  <svg  width=\"150\" height=\"150\" viewBox=\"0 0 150 150\" version=\"1.1\">\n    <svg:circle\n    [attr.fill]=\"color\"\n    [attr.cx]=\"cx\"\n    [attr.cy]=\"cy\"\n    [attr.r]=\"r\" />\n  </svg>\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <label>Background color:</label>\n    </div>\n    <div class=\"col-8\">\n      <input type=\"color\" [(ngModel)]=\"color\" id=\"circle-color\">\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-2\">\n      <label>cx:</label>\n    </div>\n    <div class=\"col-4\">\n      <input type=\"number\" id=\"circle-cx\" [(ngModel)]=\"cx\" class=\"form-\n        control\">\n    </div>\n    <div class=\"col-2\">\n      <label>cy:</label>\n    </div>\n    <div class=\"col-4\">\n      <input type=\"number\" id=\"circle-cy\" [(ngModel)]=\"cy\" class=\"form-\n        control\">\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-2\">\n      <label>radius:</label>\n    </div>\n    <div class=\"col-4\">\n      <input type=\"number\" id=\"circle-radius\" [(ngModel)]=\"r\" \n        class=\"form-control\">\n    </div>\n  </div>\n</div>\n```", "```xml\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { AngularRectComponent } from './angular-rect/angular-rect.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AngularRectComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```xml\n<svg:rect x=\"125\" y=\"125\" width=\"10\" height=\"10\" stroke=\"blue\" fill=\"none\"></svg:rect>\n```", "```xml\n<angular-rect></angular-rect>\n```", "```xml\n<angular-rect _ngcontent-c0=\"\" _nghost-c1=\"\"><rect _ngcontent-c1=\"\" fill=\"none\" height=\"10\" stroke=\"blue\" width=\"10\" x=\"125\" y=\"125\"></rect>\n</angular-rect>\n```", "```xml\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: '[angular-rect]',\n  templateUrl: './angular-rect.component.html',\n  styleUrls: ['./angular-rect.component.css']\n})\nexport class AngularRectComponent implements OnInit {\n\n  constructor() {}\n\n  ngOnInit() {}\n\n}\n```", "```xml\n  <svg  width=\"150\" height=\"150\" viewBox=\"0 0 150 150\" version=\"1.1\">\n    <svg:circle\n    [attr.fill]=\"color\"\n    [attr.cx]=\"cx\"\n    [attr.cy]=\"cy\"\n    [attr.r]=\"r\" />\n    <svg:g angular-rect></svg:g>\n  </svg>\n```", "```xml\n$ npx create-react-app react-svg \n```", "```xml\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to \n            reload.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```", "```xml\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n```", "```xml\nnpm install --save bootstrap\n```", "```xml\nimport React, { Component } . from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactRect from './rect';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cx: 75,\n      cy: 75,\n      r: 50,\n      color: \"#cc0000\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n  render() {\n    const { cx,cy,r,color } = this.state;\n    return (\n      <div className=\"container\">\n      <svg  width=\"150\" height=\"150\" \n        viewBox=\"0 0 150 150\" version=\"1.1\">\n        <circle\n        r={r}\n        cy={cy}\n        cx={cx}\n        fill={color}\n        ></circle>\n        <ReactRect></ReactRect>\n      </svg>\n      <div className=\"row\">\n        <div className=\"col-4\">\n          <label>Background color:</label>\n        </div>\n        <div className=\"col-8\">\n          <input type=\"color\" id=\"circle-color\" value={color}\n          name=\"color\"\n          onChange={this.handleChange} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-2\">\n          <label>cx:</label>\n        </div>\n        <div className=\"col-4\">\n          <input type=\"number\" id=\"circle-cx\" className=\"form-control\" \n            value={cx}\n          name=\"cx\"\n          onChange={this.handleChange} />\n        </div>\n        <div className=\"col-2\">\n          <label>cy:</label>\n        </div>\n        <div className=\"col-4\">\n          <input type=\"number\" id=\"circle-cy\" className=\"form-control\" \n            value={cy}\n          name=\"cy\"\n          onChange={this.handleChange} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-2\">\n          <label>radius:</label>\n        </div>\n        <div className=\"col-4\">\n          <input type=\"number\" id=\"circle-radius\" className=\"form-\n            control\" value={r}\n          name=\"r\"\n          onChange={this.handleChange} />\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n```", "```xml\nimport React, { Component } from 'react';\n\nclass ReactRect extends Component {\n  render() {\n    return (\n      <rect x=\"125\" y=\"125\" width=\"10\" height=\"10\" stroke=\"blue\" \n        fill=\"none\"></rect>\n\n    );\n  }\n}\n\nexport default ReactRect;\n```"]