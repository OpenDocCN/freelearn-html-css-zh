["```xml\nnpm install snapsvg\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n <meta charset=\"utf-8\">\n <title>Mastering SVG- Basic Snap.svg demo</title>\n <link rel=\"stylesheet\" \n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.m\n  in.css\" integrity=\"sha384-\n  Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" \n  crossorigin=\"anonymous\">\n</head>\n\n<body>\n\n <div class=\"container-fluid\">\n <div class=\"row\">\n <div class=\"col-12\" id=\"target\">\n\n </div>\n </div>\n </div>\n\n <script src=\"img/snap.svg-min.js\"></script>\n <script>\n const target = document.getElementById(\"target\");\n const S = new Snap(800,600);\n S.appendTo(target);\n S.circle(250,250,100)\n .attr({\n \"fill\":\"blue\",\n \"stroke\":\"green\"\n });\n S.rect(550,250,100,100)\n .attr({\n \"fill\":\"green\",\n \"stroke\":\"blue\"\n });\n </script>\n</body>\n\n</html>\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- SVG Animation with Snap.svg</title>\n  <link rel=\"stylesheet\" \n   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/boot\n   strap.min.css\" integrity=\"sha384-\n   Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6J\n   Xm\"\n    crossorigin=\"anonymous\">\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <svg  viewBox=\"0 0 1000\n         450\" width=\"1000\" height=\"450\" version=\"1.1\" id=\"canvas\"\n         class=\"canvas\">\n          <circle cx=\"75\" cy=\"225\" r=\"50\" fill=\"blue\" \n           id=\"circle\"></circle>\n        </svg>\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/snap.svg-min.js\"></script>\n  <script>\n    const doc = document;\n    const canvas = doc.getElementById(\"canvas\");\n    const circle = doc.getElementById(\"circle\");\n    const viewBox = canvas.viewBox.baseVal;\n    const width = viewBox.width;\n    const newX = width - (circle.r.baseVal.value * 3);\n    const S = new Snap(circle);\n\n    S.animate({ \"cx\": newX }, 3000, mina.bounce, () => {\n      S.attr({ \"fill\": \"red\" })\n    });\n  </script>\n</body>\n\n</html>\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- Snap.svg utilities</title>\n  <link rel=\"stylesheet\" \n   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.\n    min.css\" integrity=\"sha384-\n    Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n    crossorigin=\"anonymous\">\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"target\">\n\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/snap.svg-min.js\"></script>\n  <script>\n    const target = document.getElementById(\"target\");\n    const S = new Snap(800,600);\n    S.appendTo(target);\n    const bbox = S.circle(255,255,110)\n                    .attr({\n                        \"fill\":\"blue\",\n                        \"stroke\":\"green\"\n                    }).getBBox();\n    console.log(\"bounding box\",bbox);\n\n   const path = \n   S.path(\"M28.14,92.59c1.43,1.56,2.81,3,4,4.45,3.56,4.31,6.05,9.14,6.3\n    9,14.82.37,6.35-2,11.81-5.82,16.7-.61.76-1.27,1.48-\n    2,2.35,3.15-.86,6.09-1.74,9.07-2.48,2.82-.7,5.66-1.4,8.54-\n    1.82a6.54,6.54,0,0,0,2.84-1.15c4.26-2.9,8.5-5.84,12.87-\n    8.56a30.61,30.61,0,0,1,10.12-\n    4.23c3.16-.64,6.11-.57,7.81,3a73.85,73.85,0,0,0-.4-7.64c-.51-4.55-\n    1.4-9-3.7-13-2.84-5-7-6.39-12.32-4.22a32.44,32.44,0,0,0-\n    9.07,6.17c-.38.34-.77.65-1.51,1.26-.88-4.66-1.72-9-5.08-12.1.76-\n    1.26,1.5-2.32,2.05-3.46a22.71,22.71,0,0,0,1.38-\n    3.57,31.72,31.72,0,0,0,0-16.47c-1-4.39-2.26-8.73-3.33-13.11-.37-\n    1.53-.53-3.12-.77-4.58-12-.08-23.06-3.78-34.44-\n   6.66L6.21,65.08l14.68,9.47L.83,105.88c5.07.89,9.91,1.7,14.74,2.6a1.5\n  ,1.5,0,0,0,1.76-.72C20.86,102.76,24.42,97.8,28.14,92.59Z\")\n    .attr({\"fill\":\"gray\",\"stroke\":\"burgundy\"})\n    .transform(\"s2 t110,85\");\n\n    console.log(\"total length\", path.getTotalLength());\n\n  </script>\n</body>\n\n</html>\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- SVG Events with Snap.svg</title>\n\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"target\">\n\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/snap.svg-min.js\"></script>\n  <script>\n    const target = document.getElementById(\"target\");\n    const height = 600;\n    const width = 800;\n    const S = new Snap(width,height);\n    S.appendTo(target);\n    S.circle(250,250,100).attr({\"fill\":\"blue\"}).click(()=>{\n      const newX = Math.random() * width;\n      const newY = Math.random() * height;\n      const r = Math.random() * height/2;\n      const red = Math.random() * 255;\n      const blue = Math.random() * 255;\n      const green = Math.random() * 255;\n      S.circle(newX,newY,r).attr({\n        \"fill\":`rgba(${red},${blue},${green},${Math.random()})`\n      });\n    });\n\n  </script>\n</body>\n\n</html>\n```", "```xml\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <svg  viewBox=\"0 0 1000 450\" \n         width=\"1000\" height=\"450\" version=\"1.1\" id=\"canvas\" \n         class=\"canvas\">\n        </svg>\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/snap.svg-min.js\"></script>\n  <script src=\"img/scripts.js\"></script>\n```", "```xml\nfunction viz() {\n  /*\n    ES6\n  */\n  const data = [\n    /* truncated for brevity - see Chapter 8 for the full data set*/   \n    {\n      \"year\": 2016,\n      \"hrs\": 38\n    }\n  ];\n\n  const doc = document;\n  const canvas = doc.getElementById(\"canvas\");\n  const S = new Snap(canvas);\n  function maxDiffer(arr) {\n    let maxDiff = arr[1] - arr[0];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] - arr[i] > maxDiff) {\n          maxDiff = arr[j] - arr[i];\n        }\n      }\n    }\n    return maxDiff;\n  }\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    const viewBox = S.node.viewBox.baseVal;\n    const width = viewBox.width;\n    const height = viewBox.height;\n    const x = viewBox.x;\n    const y = viewBox.y;\n    const padding = width / 200;\n    const vizWidth = width - padding;\n    const years = data.length;\n    const total = data.reduce((total, item) => {\n      return total + item.hrs;\n    }, 0);\n    const avg = total / years;\n    const verticalMidPoint = (y + height) / 2;\n    const diffs = data.map((item) => {\n      return item.hrs - avg;\n    });\n    const maxDiff = maxDiffer(diffs);\n    const yIntervals = verticalMidPoint / maxDiff;\n    const xInterval = (vizWidth / years);\n    for (const i in diffs) {\n      const newX = xInterval * i;\n      const newY = diffs[i] * yIntervals;\n      if (diffs[i] < 0) {\n        S.rect(\n          newX + padding,\n          verticalMidPoint,\n          xInterval - padding,\n          Math.abs(newY)\n        ).attr({ \n          \"fill\": \"#C8102E\", \n          \"stroke\": \"#ffffff\" \n        });\n\n        S.text(\n          newX + padding, \n          verticalMidPoint + Math.abs(newY) + (padding * 3), \n          `${data[i].hrs} in ${data[i].year}`\n        );\n      }\n      else if (diffs[i] > 0) {\n        S.rect(\n          newX + padding,\n          verticalMidPoint - newY,\n          xInterval - padding,\n          newY,\n        ).attr({ \n          \"fill\": \"#4A777A\", \n          \"stroke\": \"#ffffff\" \n        });\n\n        S.text(\n          newX + padding,\n          verticalMidPoint - newY - (padding * 2)\n          , `${data[i].hrs} in ${data[i].year}`\n        );\n      }\n      S.line(\n        x,\n        verticalMidPoint,\n        width,\n        verticalMidPoint\n      ).attr({ \n        \"stroke\": \"#ffffff\" \n      });\n      S.text(\n        x + padding,\n        height - (padding * 3)\n        `Based on an average of ${avg} home runs over ${years} years`\n       ).addClass(\"large\");\n    }\n  });\n\n}\n\nviz();\n```", "```xml\nnpm install svg.js\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- Basic SVG.js demo</title>\n  <link rel=\"stylesheet\" \n   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.\n    min.css\" integrity=\"sha384-\n    Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n    crossorigin=\"anonymous\">\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"target\">\n\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/svg.min.js\"></script>\n  <script>\n    const draw = SVG('target').size(800,600);\n    draw.circle(200)\n        .attr({\n          \"fill\":\"blue\",\n          \"stroke\":\"green\", \n          \"x\":250,\n          \"y\":250\n        });\n    draw.rect(100,100)\n        .attr({\n          \"fill\":\"green\",\n          \"stroke\":\"blue\", \n          \"x\":550,\n          \"y\":250\n        });\n  </script>\n</body>\n\n</html>\n```", "```xml\nnpm install svg.easing.js\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- SVG Animation with SVG.js</title>\n  <link rel=\"stylesheet\" \n   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.\n    min.css\" integrity=\"sha384-\n    Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n    crossorigin=\"anonymous\">\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"canvas\">\n\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/svg.min.js\"></script>\n  <script src=\"img/svg.easing.min.js\"></script>\n  <script>\n    const width = 1000;\n    const height = 450;\n    const radius = 50;\n    const cx = 75;\n    const cy = 225;\n    const draw = SVG('canvas').size(width,height);\n    const circle = draw.circle(radius * 2)\n                        .attr({\n                            \"fill\":\"blue\",\n                            \"cx\":cx,\n                            \"cy\":cy\n                         });\n    const newX = width - (radius * 3);\n    circle.animate(3000, SVG.easing.bounce, 1000)\n      .center(newX,cy)\n      .after(function(situation) {\n        this.attr({ \n          \"fill\": 'red' \n        });\n      });\n\n  </script>\n</body>\n</html>\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- SVG.js utilities</title>\n  <link rel=\"stylesheet\" \n   href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.\n    min.css\" integrity=\"sha384-\n    Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n    crossorigin=\"anonymous\">\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"canvas\">\n\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/svg.min.js\"></script>\n  <script>\n    const draw = SVG('canvas').size(800,600);\n    console.log(\"view box:\",draw.viewbox());\n    const rect = draw.rect(100,100)\n                    .attr({\n                        \"x\":100,\n                        \"y\":100\n                     });\n    console.log(\"bounding box:\", rect.bbox());\n    rect.transform({ rotation: 125 });\n    console.log(\"rbox:\",rect.rbox());\n    rect.data({\"data\":\"storing arbitrary data\"});\n    console.log(\"data method:\", rect.data(\"data\"));\n\n    const first = draw.rect(50,50)\n                      .attr({\n                          \"x\": 200,\n                          \"y\": 200, \n                          \"fill\": \"green\"\n                       });\n    const second = draw.rect(50,50)\n                        .attr({\n                            \"x\": 225,\n                            \"y\": 225, \n                            \"fill\": \"blue\"\n                        });\n    setTimeout(()=> {\n      second.back();\n    },2000);\n    console.log(\"merged bounding box\", first.bbox().merge(second.bbox()));\n\n  </script>\n</body>\n\n</html>\n```", "```xml\n<!doctype html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title>Mastering SVG- SVG.js Events\n\n  </title>\n</head>\n\n<body>\n\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"target\">\n\n      </div>\n    </div>\n  </div>\n\n  <script src=\"img/svg.min.js\"></script>\n  <script>\n    const height = 600;\n    const width = 800;\n    const draw = SVG('target').size(width,height);\n    const circle = draw.circle(100)\n                    .attr({\n                      \"fill\":\"blue\",\n                      \"cx\":250,\n                      \"cy\":250\n                    });\n\n    circle.click((e)=> {\n      const newX = Math.random() * width;\n      const newY = Math.random() * height;\n      const r = Math.random() * height/2;\n      const red = Math.random() * 255;\n      const blue = Math.random() * 255;\n      const green = Math.random() * 255;\n      draw.circle(r)\n        .attr({\n            \"cx\": newX,\n            \"cy\": newY,\n            \"fill\":`rgba(${red},${blue},${green},${Math.random()})`\n          });\n      circle.front();\n    });\n\n  </script>\n</body>\n\n</html>\n```", "```xml\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\" id=\"target\">\n\n      </div>\n    </div>\n  </div>\n  <script src=\"img/svg.min.js\"></script>\n  <script src=\"img/scripts.js\"></script>\n</body>\n```", "```xml\nfunction viz() {\n  /*\n    ES6\n  */\n  const data = [\n/* truncated for brevity - see Chapter 8 for the full data set */\n    {\n      \"year\": 2016,\n      \"hrs\": 38\n    }\n  ];\n  const width = 1000;\n  const height = 450;\n  const draw = SVG(\"target\").size(width, height);\n  function maxDiffer(arr) {\n    let maxDiff = arr[1] - arr[0];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] - arr[i] > maxDiff) {\n          maxDiff = arr[j] - arr[i];\n        }\n      }\n    }\n    return maxDiff;\n  }\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    const viewBox = draw.viewbox();\n    const width = viewBox.width;\n    const height = viewBox.height;\n    const x = viewBox.x;\n    const y = viewBox.y;\n    const padding = width / 200;\n    const vizWidth = width - padding;\n    const years = data.length;\n    const total = data.reduce((total, item) => {\n      return total + item.hrs;\n    }, 0);\n    const avg = total / years;\n    const verticalMidPoint = (y + height) / 2;\n    const diffs = data.map((item) => {\n      return item.hrs - avg;\n    });\n    const maxDiff = maxDiffer(diffs);\n    const yIntervals = verticalMidPoint / maxDiff;\n    const xInterval = (vizWidth / years);\n    for (const i in diffs) {\n      const newX = xInterval * i;\n      const newY = diffs[i] * yIntervals;\n      if (diffs[i] < 0) {\n        draw.rect(\n          xInterval - padding,\n          Math.abs(newY)\n        )\n        .attr({\n          \"x\": newX + padding,\n          \"y\": verticalMidPoint,\n        })\n        .fill(\"#C8102E\")\n        .stroke(\"#ffffff\");\n\n        draw.plain(`${data[i].hrs} in ${data[i].year}`)\n        .attr({\n          \"x\": newX + padding,\n          \"y\": verticalMidPoint + Math.abs(newY) + (padding * 3)\n        });\n      }\n      else if (diffs[i] > 0) {\n        draw.rect(\n          xInterval - padding,\n          newY,\n        )\n        .attr({\n          \"x\": newX + padding,\n          \"y\": verticalMidPoint - newY\n        })\n        .fill(\"#4A777A\")\n        .stroke(\"#ffffff\");\n\n        draw.plain(`${data[i].hrs} in ${data[i].year}`)\n        .attr({\n          \"x\": newX + padding,\n          \"y\": verticalMidPoint - newY - (padding * 2)\n        });\n      } \n    }\n    draw.line(\n      x,\n      verticalMidPoint,\n      width,\n      verticalMidPoint\n    )\n    .attr({ \n      \"stroke\": \"#ffffff\" \n    });\n\n    draw.plain(`Based on an average of ${avg} home runs over ${years} years`)\n    .attr({\n      \"x\": x + padding,\n      \"y\": height - (padding * 3)\n    })\n    .addClass(\"large\");\n  });\n\n}\n\nviz();\n```"]