["```xml\n# ######################################################################\n# # WEB PERFORMANCE #\n# ######################################################################\n\n# ----------------------------------------------------------------------\n# | Compression |\n# ----------------------------------------------------------------------\n\n<IfModule mod_deflate.c>\n\n    # Force compression for mangled `Accept-Encoding` request headers\n    #\n    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n    # https://calendar.perfplanet.com/2010/pushing-beyond-gzipping/\n\n    <IfModule mod_setenvif.c>\n        <IfModule mod_headers.c>\n            SetEnvIfNoCase ^(Accept-EncodXng|X-cept-Encoding|X{15}|~{15}|-{15})$ ^((gzip|deflate)\\s*,?\\s*)+|[X~-]{4,13}$ HAVE_Accept-Encoding\n            RequestHeader append Accept-Encoding \"gzip,deflate\" env=HAVE_Accept-Encoding\n        </IfModule>\n    </IfModule>\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Compress all output labeled with one of the following media types.\n    #\n    # https://httpd.apache.org/docs/current/mod/mod_filter.html#addoutputfilterbytype\n\n    <IfModule mod_filter.c>\n        AddOutputFilterByType DEFLATE \"application/atom+xml\" \\\n                                      \"application/javascript\" \\\n                                      \"application/json\" \\\n# Many other MIME types clipped for brevity\n                                      \"image/svg+xml\" \\\n# Many other MIME types clipped for brevity        \n                                      \"text/xml\"\n\n    </IfModule>\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Map the following filename extensions to the specified\n    # encoding type in order to make Apache serve the file types\n    # with the appropriate `Content-Encoding` response header\n    # (do note that this will NOT make Apache compress them!).\n    #\n    # If these files types would be served without an appropriate\n    # `Content-Enable` response header, client applications (e.g.:\n    # browsers) wouldn't know that they first need to uncompressed\n    # the response, and thus, wouldn't be able to understand the\n    # content.\n    #\n    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n    # https://httpd.apache.org/docs/current/mod/mod_mime.html#addencoding\n\n    <IfModule mod_mime.c>\n        AddEncoding gzip svgz\n    </IfModule>\n\n</IfModule>\n```", "```xml\n# Enable gzip compression.\n  # Default: off\n  gzip on;\n\n  # Compression level (1-9).\n  # 5 is a perfect compromise between size and CPU usage, offering about\n  # 75% reduction for most ASCII files (almost identical to level 9).\n  # Default: 1\n  gzip_comp_level 5;\n\n  # Don't compress anything that's already small and unlikely to shrink much\n  # if at all (the default is 20 bytes, which is bad as that usually leads to\n  # larger files after gzipping).\n  # Default: 20\n  gzip_min_length 256;\n\n  # Compress data even for clients that are connecting to us via proxies,\n  # identified by the \"Via\" header (required for CloudFront).\n  # Default: off\n  gzip_proxied any;\n\n  # Tell proxies to cache both the gzipped and regular version of a resource\n  # whenever the client's Accept-Encoding capabilities header varies;\n  # Avoids the issue where a non-gzip capable client (which is extremely rare\n  # today) would display gibberish if their proxy gave them the gzipped version.\n  # Default: off\n  gzip_vary on;\n\n  # Compress all output labeled with one of the following MIME-types.\n  # text/html is always compressed by gzip module.\n  # Default: text/html\n  gzip_types\n    # Many other MIME types clipped for brevity\n    image/svg+xml\n    # Many other MIME types clipped for brevity\n```", "```xml\n<httpCompression directory=\"%SystemDrive%\\inetpub\\temp\\IIS Temporary Compressed Files\">\n    <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\" />\n        <staticTypes>\n            <add mimeType=\"image/svg+xml\" enabled=\"true\" />\n        </staticTypes>\n        <dynamicTypes>\n            <add mimeType=\"image/svg+xml\" enabled=\"true\" />\n        </dynamicTypes>\n</httpCompression>\n```", "```xml\n$ npm install -g svgo\n```", "```xml\nsvgo svgo.svg\n```"]