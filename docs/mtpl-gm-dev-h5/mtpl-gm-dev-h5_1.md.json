["```js\nvar socket = new WebSocket('ws://www.game-domain.com');\n```", "```js\nvar socket = new WebSocket('ws://www.game-domain.com');\nsocket.onopen = function(event) {\n   // socket ready to send and receive data\n};\n```", "```js\n// Assuming a connection was previously established\nsocket.send('Hello, WebSocket world!');\n```", "```js\nvar player = {\n   nickname: 'Juju',\n   team: 'Blue'\n};\n\nsocket.send(JSON.stringify(player));\n```", "```js\nvar player = JSON.parse(event.data);\nplayer.name === 'Juju'; // true\nplayer.team === 'Blue'; // true\nplayer.id === undefined; // true\n```", "```js\nsocket.onmessage = function(event) {\n   event instanceof MessageEvent; // true\n\n   var msg = JSON.parse(event.data);\n};\n```", "```js\nfunction sendMsg(socket, data) {\n   if (socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(data));\n\n      return true;\n   }\n\n   return false;\n};\n```", "```js\n/**\n *\n * @param {number} id\n * @param {string} label\n * @param {string} name\n * @constructor\n */\nvar Player = function(id, label, name) {\n    this.id = id;\n    this.label = label;\n    this.name = name;\n};\n\nmodule.exports = Player;\n```", "```js\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\n/**\n *\n * @constructor\n */\nvar Board = function() {\n    this.cells = [];\n    this.players = [];\n    this.currentTurn = 0;\n    this.ready = false;\n\n    this.init();\n};\n\nBoard.events = {\n    PLAYER_CONNECTED: 'playerConnected',\n    GAME_READY: 'gameReady',\n    CELL_MARKED: 'cellMarked',\n    CHANGE_TURN: 'changeTurn',\n    WINNER: 'winner',\n    DRAW: 'draw'\n};\n\nutil.inherits(Board, EventEmitter);\n```", "```js\nBoard.prototype.mark = function(cellId) {\n    // \u2026\n    if (this.checkWinner()) {\n        this.emit(Board.events.WINNER, {player: this.players[this.currentTurn]});\n    }\n};\n```", "```js\nvar WebSocketServer = require('ws').Server;\nvar Board = require('./BoardServer');\nvar Player = require('./Player');\n\nvar PORT = 2667;\nvar wss = new WebSocketServer({port: PORT});\nvar board = new Board();\n\nvar events = {\n    incoming: {\n        JOIN_GAME: 'csJoinGame',\n        MARK: 'csMark',\n        QUIT: 'csQuit'\n    },\n    outgoing: {\n        JOIN_GAME: 'scJoinGame',\n        MARK: 'scMark',\n        SET_TURN: 'scSetTurn',\n        OPPONENT_READY: 'scOpponentReady',\n        GAME_OVER: 'scGameOver',\n        ERROR: 'scError',\n        QUIT: 'scQuit'\n    }\n};\n\n/**\n *\n * @param action\n * @param data\n * @returns {*}\n */\nfunction makeMessage(action, data) {\n    var resp = {\n        action: action,\n        data: data\n    };\n\n    return JSON.stringify(resp);\n}\n\nconsole.log('Listening on port %d', PORT);\n```", "```js\nwss.on('connection', function connection(ws) {\n    board.on(Board.events.PLAYER_CONNECTED, function(player) {\n        wss.clients.forEach(function(client) {\n            board.players.forEach(function(player) {\n                client.send(makeMessage(events.outgoing.JOIN_GAME, player));\n            });\n        });\n    });\n\n    ws.on('message', function incoming(msg) {\n        try {\n            var msg = JSON.parse(msg);\n        } catch (error) {\n            ws.send(makeMessage(events.outgoing.ERROR, 'Invalid action'));\n            return;\n        }\n\n        try {\n            switch (msg.action) {\n                case events.incoming.JOIN_GAME:\n                    var player = new Player(board.players.length + 1, board.players.length === 0 ? 'X' : 'O', msg.data);\n                    board.addPlayer(player);\n                    break;\n                // ...\n            }\n        } catch (error) {\n            ws.send(makeMessage(events.outgoing.ERROR, error.message));\n        }\n    });\n});\n```", "```js\n{\n    action: events.outgoing.JOIN_GAME,\n    data: \"<player nickname>\"\n};\n```", "```js\n/**\n *\n * @constructor\n */\nvar Board = function(scoreBoard) {\n    this.cells = [];\n    this.dom = document.createElement('table');\n    this.dom.addEventListener('click', this.mark.bind(this));\n    this.players = [];\n    this.currentTurn = 0;\n    this.ready = false;\n\n    this.scoreBoard = scoreBoard;\n\n    this.init();\n};\n\nBoard.prototype.bindTo = function(container) {\n    container.appendChild(this.dom);\n};\n\nBoard.prototype.doWinner = function(pos) {\n    this.disableAll();\n    this.highlightCells(pos);\n};\n```", "```js\nvar socket = new WebSocket('ws://localhost:2667');\n\nvar scoreBoard = [\n    document.querySelector('#p1Score'),\n    document.querySelector('#p2Score')\n];\n\nvar hero = {};\nvar board = new Board(scoreBoard);\n\nboard.onMark = function(cellId){\n    socket.send(makeMessage(events.outgoing.MARK, {playerId: hero.id, cellId: cellId}));\n};\n\nsocket.onmessage = function(event){\n    var msg = JSON.parse(event.data);\n\n    switch (msg.action) {\n        case events.incoming.GAME_OVER:\n            if (msg.data.player) {\n                board.doWinner(msg.data.pos);\n            } else {\n                board.doDraw();\n            }\n\n            socket.send(makeMessage(events.outgoing.QUIT, hero.id));\n            break;\n\n        case events.incoming.QUIT:\n            socket.close();\n            break;\n    }\n};\n\nsocket.onopen = function(event) {\n    startBtn.removeAttribute('disabled');\n    nameInput.removeAttribute('disabled');\n    nameInput.removeAttribute('placeholder');\n    nameInput.focus();\n};\n```"]