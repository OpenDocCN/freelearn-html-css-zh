["```js\n// ch3/package.json\n{\n    \"name\": \"snake-ch3\",\n    \"dependencies\": {\n        \"express\": \"*\",\n        \"express-generator\": \"*\"\n    },\n    \"devDependencies\": {\n        \"grunt\": \"~0.4.5\",\n        \"grunt-browserify\": \"~3.4.0\",\n        \"grunt-contrib-uglify\": \"~0.8.0\",\n        \"grunt-contrib-watch\": \"~0.6.1\"\n    }\n}\n```", "```js\nnpm install\nexpress snake-ch3\ncd snake-ch3\nnpm install\n\n```", "```js\nnpm start\n\n```", "```js\n// ch3/snake-ch3/views/index.jade\nextends layout\n\nblock content\n  div#gameArea\n    p#scoreA SCORE: <span>000000</span>\n    p#gameOver.animated.pulse.hidden Game Over\n    canvas#gameCanvas\n    div#statsPanel\n  script(src='/js/app.build.js')\n```", "```js\n// ch3/snake-ch3/share/game.js\nvar Game = function (fps) {\n    this.fps = fps;\n    this.delay = 1000 / this.fps;\n    this.lastTime = 0;\n    this.raf = 0;\n\n    this.onUpdate = function (delta) {\n    };\n    this.onRender = function () {\n    };\n};\n\nGame.prototype.update = function (delta) {\n    this.onUpdate(delta);\n};\n\nGame.prototype.render = function () {\n    this.onRender();\n};\n\nGame.prototype.loop = function (now) {\n    this.raf = requestAnimationFrame(this.loop.bind(this));\n\n    var delta = now - this.lastTime;\n    if (delta >= this.delay) {\n        this.update(delta);\n        this.render();\n        this.lastTime = now;\n    }\n};\n\nGame.prototype.start = function () {\n    if (this.raf < 1) {\n        this.loop(0);\n    }\n};\n\nGame.prototype.stop = function () {\n    if (this.raf > 0) {\n        cancelAnimationFrame(this.raf);\n        this.raf = 0;\n    }\n};\n\nmodule.exports = Game;\n```", "```js\n// ch3/snake-ch3/share/snake.js\nvar keys = require('./keyboard.js');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar Snake = function (id, x, y, color_hex, width, height) {\n    this.id = id;\n    this.color = color_hex;\n    this.head = {x: x, y: y};\n    this.pieces = [this.head];\n    this.width = width || 16;\n    this.height = height || 16;\n    this.readyToGrow = false;\n    this.input = {};\n};\n\nSnake.events = {\n    POWER_UP: 'Snake:powerup',\n    COLLISION: 'Snake:collision'\n};\n\nutil.inherits(Snake, EventEmitter);\n\nSnake.prototype.setKey = function (key) {\n    this.input[keys.UP] = false;\n    this.input[keys.DOWN] = false;\n    this.input[keys.LEFT] = false;\n    this.input[keys.RIGHT] = false;\n    this.input[key] = true;\n};\n\nSnake.prototype.update = function (delta) {\n    if (this.readyToGrow) {\n        this.pieces.push({x: -10, y: -10});\n        this.readyToGrow = false;\n    }\n\n    for (var len = this.pieces.length, i = len - 1; i > 0; i--) {\n        this.pieces[i].x = this.pieces[i - 1].x;\n        this.pieces[i].y = this.pieces[i - 1].y;\n    }\n\n    if (this.input[keys.LEFT]) {\n        this.head.x += -1;\n    } else if (this.input[keys.RIGHT]) {\n        this.head.x += 1;\n    } else if (this.input[keys.UP]) {\n        this.head.y += -1;\n    } else if (this.input[keys.DOWN]) {\n        this.head.y += 1;\n    }\n};\n\nSnake.prototype.checkCollision = function(){\n    var collide = this.pieces.some(function(piece, i){\n        return i > 0 && piece.x === this.head.x && piece.y === this.head.y;\n    }, this);\n\n    if (collide) {\n        this.emit(Snake.events.COLLISION, {id: this.id, point: this.head, timestamp: performance.now()});\n    }\n};\n\nSnake.prototype.grow = function() {\n    this.readyToGrow = true;\n    this.emit(Snake.events.POWER_UP, {id: this.id, size: this.pieces.length, timestamp: performance.now()});\n};\n\nmodule.exports = Snake;\n```", "```js\n// ch3/snake-ch3/share/app.client.js\ngame.onUpdate = function (delta) {\n    var now = performance.now();\n\n    // Check if there's no fruits left to be eaten. If so, create a new one.\n    if (fruits.length < 1) {\n        fruitDelta = now - lastFruit;\n\n        // If there's been enough time without a fruit for the snakes,\n        // create a new one at a random position, and place it in the world\n        if (fruitDelta >= fruitDelay) {\n            fruits[0] = new Fruit(\n              parseInt(Math.random() * renderer.canvas.width / BLOCK_WIDTH / 2, 10),\n              parseInt(Math.random() * renderer.canvas.width / BLOCK_HEIGHT / 2, 10),\n              '#c00', BLOCK_WIDTH, BLOCK_HEIGHT\n         );\n        }\n    }\n\n    player.update(delta);\n    player.checkCollision();\n\n    // Check if the snake has gone outside the game board.\n    // If so, wrap it around to the other side\n    if (player.head.x < 0) {\n        player.head.x = parseInt(renderer.canvas.width / player.width, 10);\n    }\n\n    if (player.head.x > parseInt(renderer.canvas.width / player.width, 10)) {\n        player.head.x = 0;\n    }\n\n    if (player.head.y < 0) {\n        player.head.y = parseInt(renderer.canvas.height / player.height, 10);\n    }\n\n    if (player.head.y > parseInt(renderer.canvas.height / player.height, 10)) {\n        player.head.y = 0;\n    }\n\n    // Check if there's a fruit to be eaten. If so, check if the snake has just\n    // eaten it. If so, grow the player that ate it.\n    if (fruits.length > 0) {\n        if (player.head.x === fruits[0].x && player.head.y === fruits[0].y) {\n            fruits = [];\n            player.grow();\n            lastFruit = now;\n        }\n    }\n};\n\ngame.onRender = function () {\n    ctx.clearRect(0, 0, renderer.canvas.width, renderer.canvas.height);\n\n    ctx.fillStyle = player.color;\n    player.pieces.forEach(function(piece){\n        ctx.fillRect(\n           piece.x * player.width,\n           piece.y * player.height,\n           player.width,\n           player.height\n        );\n    });\n\n    fruits.forEach(function(fruit){\n        ctx.fillStyle = fruit.color;\n        ctx.fillRect(\n           fruit.x * fruit.width,\n           fruit.y * fruit.height,\n           fruit.width,\n           fruit.height\n        );\n    });\n};\n```", "```js\n// whenever we receive a POWER_UP event from the game, we\n// update the player's score and display its value inside scoreWidget.\nplayer.on(Snake.events.POWER_UP, function(event){\n    var score = event.size * 10;\n    scoreWidgets.filter(function( widget){\n        return widget.id === event.id;\n    })\n        .pop()\n        .el.textContent = '000000'.slice(0, - (score + '').length) + score + '';\n});\n\n// whenever we receive a COLLISION event from the game, we\n// stop the game and display a game over message to the player.\nplayer.on(Snake.events.COLLISION, function(event){\n    scoreWidgets.filter(function(widget){\n        return widget.id === event.id;\n    })\n        .pop()\n        .el.parentElement.classList.add('gameOver');\n\n    game.stop();\n    setTimeout(function(){\n        ctx.fillStyle = '#f00';\n        ctx.fillRect(event.point.x * player.width, event.point.y * player.height, player.width, player.height);\n    }, 0);\n\n    setTimeout(function(){\n        gameOver.classList.remove('hidden');\n    }, 100);\n});\n\ndocument.body.addEventListener('keydown', function (e) {\n    var key = e.keyCode;\n\n    switch (key) {\n        case keys.ESC:\n            game.stop();\n            break;\n        case keys.SPACEBAR:\n            game.start();\n            break;\n        case keys.LEFT:\n        case keys.RIGHT:\n        case keys.UP:\n        case keys.DOWN:\n            player.setKey(key);\n            break;\n        case keys.D:\n            console.log(player.pieces);\n            break;\n    }\n});\n```", "```js\nwhile (true) {\n   update();\n   render();\n}\n```", "```js\nfunction tick() {\n   setTimeout(tick, 0.016);\n   update();\n   render();\n}\n```", "```js\nfunction tick(timestamp) {\n   var rafId = requestAnimationFrame(tick);\n   update();\n   render();\n}\n```", "```js\n// ch3/snake-ch3/share/events.js\n\nmodule.exports = {\n    server_spawnFruit: 'server:spawnFruit',\n    server_newRoom: 'server:newRoom',\n    server_startRoom: 'server:startRoom',\n    server_joinRoom: 'server:joinRoom',\n    server_listRooms: 'server:listRooms',\n    server_setPlayerKey: 'server:setPlayerKey',\n\n    client_newFruit: 'client:newFruit',\n    client_roomJoined: 'client:roomJoined',\n    client_roomsList: 'client:roomsList',\n    client_playerState: 'client:playerState'\n};\n```", "```js\nvar gameEvents = require('./share/events.js');\n\nsocket.on(gameEvents.server_spawnFruit, function(data){\n   var pos = game.spawnFruit(data.roomId, data.maxWidth, data.maxHeight);\n\n   socket.emit(gameEvents.client_newFruit, pos);\n});\n```", "```js\n// ch3/snake-ch3/views/index.jade\n\nextends layout\n\nblock content\n  div#lobby\n    h1 Snake\n    div#roomList\n\n div#main.hidden\n    div#gameArea\n      p#scoreA SCORE: <span>000000</span>\n      p#gameOver.animated.pulse.hidden Game Over\n      canvas#gameCanvas\n      div#statsPanel\n\n  script(src='/js/socket.io.js')\n  script(src='/js/app.build.js')\n```", "```js\n// ch3/snake-ch3/share/app.client.js\n\nvar roomList = document.getElementById('roomList');\nvar screens = {\n    main: document.getElementById('main'),\n    lobby: document.getElementById('lobby')\n};\n\n// \u2026\n\nsocket.on(gameEvents.client_roomsList, function (rooms) {\n    rooms.map(function (room) {\n        var roomWidget = document.createElement('div');\n        roomWidget.textContent = room.players.length + ' player';\n        roomWidget.textContent += (room.players.length > 1 ? 's' : '');\n\n        roomWidget.addEventListener('click', function () {\n            socket.emit(gameEvents.server_joinRoom, {\n                    roomId: room.roomId,\n                    playerId: player.id,\n                    playerX: player.head.x,\n                    playerY: player.head.y,\n                    playerColor: player.color\n                }\n            );\n        });\n\n        roomList.appendChild(roomWidget);\n    });\n\n    var roomWidget = document.createElement('div');\n    roomWidget.classList.add('newRoomWidget');\n    roomWidget.textContent = 'New Game';\n\n    roomWidget.addEventListener('click', function () {\n        socket.emit(gameEvents.server_newRoom, {\n            id: player.id,\n            x: player.head.x,\n            y: player.head.y,\n            color: player.color,\n            maxWidth: window.innerWidth,\n            maxHeight: window.innerHeight\n        });\n    });\n\n    roomList.appendChild(roomWidget);\n});\n\nsocket.on(gameEvents.client_roomJoined, function (data) {\n    // ...\n    screens.lobby.classList.add('hidden');\n    screens.main.classList.remove('hidden');\n});\n```", "```js\n// ch3/snake-ch3/public/css/style.css\n\n.hidden {\n    display: none;\n}\n```", "```js\n// ch3/snake-ch3/share/tick.js\nvar tick = function () {\n    var ticks = 0;\n    var timer;\n\n    if (typeof requestAnimationFrame === 'undefined') {\n        timer = function (cb) {\n            setTimeout(function () {\n                cb(++ticks);\n            }, 0);\n        }\n    } else {\n        timer = window.requestAnimationFrame;\n    }\n\n    return function (cb) {\n        return timer(cb);\n    }\n};\n\nmodule.exports = tick();\n```", "```js\n// ch3/snake-ch3/share/app.client.js\n\ngame.onUpdate = function (delta) {\n    // The client no longer checks if the player has eaten a fruit.\n    // This task has now become the server's jurisdiction.\n    player.update(delta);\n    player.checkCollision();\n\n    if (player.head.x < 0) {\n        player.head.x = parseInt(renderer.canvas.width / player.width, 10);\n    }\n\n    if (player.head.x > parseInt(renderer.canvas.width / player.width, 10)) {\n        player.head.x = 0;\n    }\n\n    if (player.head.y < 0) {\n        player.head.y = parseInt(renderer.canvas.height / player.height, 10);\n    }\n\n    if (player.head.y > parseInt(renderer.canvas.height / player.height, 10)) {\n        player.head.y = 0;\n    }\n\n    if (fruits.length > 0) {\n        if (player.head.x === fruits[0].x && player.head.y === fruits[0].y) {\n            fruits = [];\n            player.grow();\n        }\n    }\n};\n```", "```js\n// ch3/snake-ch3/app.js\n\n// \u2026\n\nvar io = require('socket.io')();\nvar gameEvents = require('./share/events.js');\nvar game = require('./server/app.js');\n\nvar app = express();\napp.io = io;\n\n// \u2026\n\nio.on('connection', function(socket){\n    // when a client requests a new room, create one, and assign\n    // that client to this new room immediately.\n    socket.on(gameEvents.server_newRoom, function(data){\n        var roomId = game.newRoom(data.maxWidth, data.maxHeight);\n        game.joinRoom(roomId, this, data.id, data.x, data.y, data.color);\n    });\n\n    // when a client requests to join an existing room, assign that\n    // client to the room whose roomId is provided.\n    socket.on(gameEvents.server_joinRoom, function(data){\n        game.joinRoom(data.roomId, this, data.playerId, data.playerX, data.playerY, data.playerColor);\n    });\n\n    // when a client wishes to know what all the available rooms are,\n    // send back a list of roomIds, along with how many active players\n    // are in each room.\n    socket.on(gameEvents.server_listRooms, function(){\n        var rooms = game.listRooms();\n        socket.emit(gameEvents.client_roomsList, rooms);\n    });\n});\n```", "```js\n// ch3/snake-ch3/server/app.js\n\nvar Game = require('./../share/game.js');\nvar gameEvents = require('./../share/events.js');\nvar Room = require('./room.js');\n\n// ...\n\n/** @type {Array.<Room>} */\nvar rooms = [];\n\nmodule.exports = {\n    newRoom: function(maxWidth, maxHeight){\n        var room = new Room(FPS, maxWidth, maxHeight);\n        rooms.push(room);\n        return rooms.length - 1;\n    },\n\n    listRooms: function(){\n        return rooms.map(function(room, index) {\n            return {\n                roomId: index,\n                players: room.players.map(function(player){\n                    return {\n                        id: player.snake.id,\n                        x: player.snake.head.x,\n                        y: player.snake.head.y,\n                        color: player.snake.color\n                    };\n                })\n            };\n        });\n    },\n\n    joinRoom: function(roomId, socket, playerId, playerX, playerY, playerColor) {\n        var room = rooms[roomId];\n        var snake = new Snake(playerId, playerX, playerY, playerColor, 1, 1);\n        room.join(snake, socket);\n\n        socket.emit(gameEvents.client_roomJoined, {roomId: roomId});\n    },\n};\n```", "```js\n// ch3/snake-ch3/server/room.js\n\nvar Game = require('./../share/game.js');\nvar Snake = require('./../share/snake.js');\nvar Fruit = require('./../share/fruit.js');\nvar keys = require('./../share/keyboard.js');\nvar gameEvents = require('./../share/events.js');\n\n/** @type {Game} game */\nvar game = null, gameUpdateRate = 1, gameUpdates = 0;\nvar players = [], fruits = [], fruitColor = '#c00';\nvar fruitDelay = 1500, lastFruit = 0, fruitDelta = 0;\n\nvar Room = function (fps, worldWidth, worldHeight) {\n    var self = this;\n    game = new Game(fps);\n\n    game.onUpdate = function (delta) {\n        var now = process.hrtime()[1];\n        if (fruits.length < 1) {\n            fruitDelta = now - lastFruit;\n\n            if (fruitDelta >= fruitDelay) {\n                var pos = {\n                    x: parseInt(Math.random() * worldWidth, 10),\n                    y: parseInt(Math.random() * worldHeight, 10)\n                };\n\n                self.addFruit(pos);\n                players.map(function(player){\n                    player.socket.emit(gameEvents.client_newFruit, pos);\n                });\n            }\n        }\n\n        players.map(function (player) {\n            player.snake.update(delta);\n            player.snake.checkCollision();\n\n            if (player.snake.head.x < 0) {\n                player.snake.head.x = worldWidth;\n            }\n\n            if (player.snake.head.x > worldWidth) {\n                player.snake.head.x = 0;\n            }\n\n            if (player.snake.head.y < 0) {\n                player.snake.head.y = worldHeight;\n            }\n\n            if (player.snake.head.y > worldHeight) {\n                player.snake.head.y = 0;\n            }\n\n            if (fruits.length > 0) {\n                if (player.snake.head.x === fruits[0].x\n                    && player.snake.head.y === fruits[0].y) {\n                    fruits = [];\n                    player.snake.grow();\n                }\n            }\n        });\n\n        if (++gameUpdates % gameUpdateRate === 0) {\n            gameUpdates = 0;\n            var data = players.map(function(player){\n                return player.snake;\n            });\n            players.map(function(player){\n                player.socket.emit(gameEvents.client_playerState, data);\n            });\n\n            lastFruit = now;\n        }\n    };\n};\n\nRoom.prototype.start = function () {\n    game.start();\n};\n\nRoom.prototype.addFruit = function (pos) {\n    fruits[0] = new Fruit(pos.x, pos.y, fruitColor, 1, 1);\n};\n\nRoom.prototype.join = function (snake, socket) {\n    if (players.indexOf(snake.id) < 0) {\n        players.push({\n            snake: snake,\n            socket: socket\n        });\n    }\n};\n\nRoom.prototype.getPlayers = function(){\n    return players;\n};\n\nmodule.exports = Room;\n```", "```js\nnpm install socket.io --save\nnpm install socket.io-client \u2013save\n\n```", "```js\n// ch3/snake-ch3/app.js\n\nvar express = require('express');\nvar io = require('socket.io')();\n\n// ...\n\nvar app = express();\napp.io = io;\n\n// ...\n\nio.on('connection', function(socket){\n        console.log('New client connected. Socket ready!');\n    });\n});\n```", "```js\n// ch3/snake-ch3/bin/www\n\n#!/usr/bin/env node\nvar debug = require('debug')('snake-ch3');\nvar app = require('../app');\n\napp.set('port', process.env.PORT || 3000);\n\nvar server = app.listen(app.get('port'), function() {\n  debug('Express server listening on port ' + server.address().port);\n});\n\napp.io.attach(server);\n```", "```js\n// ch3/snake-ch3/share/app.client.js\n\nvar socket = require('socket.io-client')(window.location.origin);\n\n// \u2026\n\nsocket.on('connect', function () {\n    socket.emit(gameEvents.server_listRooms);\n});\n```"]