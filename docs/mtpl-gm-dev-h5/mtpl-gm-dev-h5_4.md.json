["```js\n// ch4/snake-ch4/share/tick.js\n\nvar tick = function (delay) {\n    var _delay = delay;\n    var timer;\n\n    if (typeof requestAnimationFrame === 'undefined') {\n        timer = function (cb) {\n            setImmediate(function () {\n                cb(_delay);\n            }, _delay);\n        }\n    } else {\n        timer = window.requestAnimationFrame;\n    }\n\n    return function (cb) {\n        return timer(cb);\n    }\n};\n\nmodule.exports = tick;\n```", "```js\n// ch4/snake-ch4/share/game.js\n\nvar tick = require('./tick.js');\ntick = tick(100);\n\nvar Game = function (fps) {\n    this.fps = fps;\n    this.delay = 1000 / this.fps;\n    this.lastTime = 0;\n    this.raf = 0;\n\n    this.onUpdate = function (delta) {\n    };\n\n    this.onRender = function () {\n    };\n};\n\nGame.prototype.update = function (delta) {\n    this.onUpdate(delta);\n};\n\nGame.prototype.render = function () {\n    this.onRender();\n};\n\nGame.prototype.loop = function (now) {\n    this.raf = tick(this.loop.bind(this));\n\n    var delta = now - this.lastTime;\n    if (delta >= this.delay) {\n        this.update(delta);\n        this.render();\n        this.lastTime = now;\n    }\n};\n```", "```js\n// ch4/snake-ch4/share/app.client.js\n\n// All of the requires up top\n// \u2026\n\nvar serverState = {};\n\n// \u2026\n\nsocket.on(gameEvents.client_playerState, function(data){\n    otherPlayers = data.filter(function(_player){\n\n        if (_player.id == player.id) {\n            serverState = _player;\n            return false;\n        }\n\n        _player.width = BLOCK_WIDTH;\n        _player.height = BLOCK_HEIGHT;\n        _player.head.x = parseInt(_player.head.x / BLOCK_WIDTH, 10);\n        _player.head.y = parseInt(_player.head.y / BLOCK_HEIGHT, 10);\n        _player.pieces = _player.pieces.map(function(piece){\n            piece.x = parseInt(piece.x / BLOCK_WIDTH, 10);\n            piece.y = parseInt(piece.y / BLOCK_HEIGHT, 10);\n\n            return piece;\n        });\n\n        return true;\n    });\n});\n```", "```js\n// ch4/snake-ch4/share/app.client.js\n\ngame.onUpdate = function (delta) {\n\n    if (serverState.id) {\n        player.sync(serverState);\n\n        // On subsequent ticks, we may not in sync any more,\n        // so let's get rid of the serverState after we use it\n        if (player.isSyncd()) {\n            serverState = {};\n        }\n    } else {\n        player.update(delta);\n        player.checkCollision();\n\n        if (player.head.x < 0) {\n            player.head.x = parseInt(renderer.canvas.width / player.width, 10);\n        }\n\n        if (player.head.x > parseInt(renderer.canvas.width / player.width, 10)) {\n            player.head.x = 0;\n        }\n\n        if (player.head.y < 0) {\n            player.head.y = parseInt(renderer.canvas.height / player.height, 10);\n        }\n\n        if (player.head.y > parseInt(renderer.canvas.height / player.height, 10)) {\n            player.head.y = 0;\n        }\n    }\n};\n```", "```js\n// ch4/snake-ch4/share/snake.js\n\nvar Snake = function (id, x, y, color_hex, width, height) {\n    this.id = id;\n    this.color = color_hex;\n    this.head = {\n        x: x,\n        y: y\n    };\n    this.pieces = [this.head];\n    this.width = width || 16;\n    this.height = height || 16;\n    this.readyToGrow = false;\n    this.input = {};\n\n    this.inSync = true;\n};\n\nSnake.prototype.isSyncd = function(){\n    return this.inSync;\n};\n\nSnake.prototype.sync = function(serverState) {\n    var diffX = serverState.head.x - this.head.x;\n    var diffY = serverState.head.y - this.head.y;\n\n    if (diffX === 0 && diffY === 0) {\n        this.inSync = true;\n        return true;\n    }\n\n    this.inSync = false;\n\n    // TODO: Implement error correction strategies here\n\n    return false;\n};\n```", "```js\n// ch4/snake-ch4/share/app.client.js\n\ndocument.body.addEventListener('keydown', function (e) {\n    var key = e.keyCode;\n\n    switch (key) {\n        case keys.ESC:\n            game.stop();\n            break;\n\n        case keys.SPACEBAR:\n            game.start();\n            break;\n\n        case keys.LEFT:\n        case keys.RIGHT:\n        case keys.UP:\n        case keys.DOWN:\n            player.setKey(key);\n            socket.emit(gameEvents.server_setPlayerKey, {\n                    roomId: roomId,\n                    playerId: player.id,\n                    keyCode: key\n                }\n            );\n\n            break;\n    }\n});\n```", "```js\n// ch4/snake-ch4/share/app.client.js\n\ngame.onUpdate = function (delta) {\n    player.update(delta);\n    player.checkCollision();\n\n    // \u2026\n\n    socket.emit(gameEvents.server_setPlayerKey, {\n            roomId: roomId,\n            playerId: player.id,\n            keyState: player.input\n        }\n    );\n};\n```", "```js\n// ch4/snake-ch4/share/app.client.js\n\n// All of the requires up top\n// \u2026\n\nvar inputTimer = 0;\nvar inputTimeoutPeriod = 100;\n\n// \u2026\n\ndocument.body.addEventListener('keydown', function (e) {\n    var key = e.keyCode;\n\n    switch (key) {\n        case keys.ESC:\n            game.stop();\n            break;\n\n        case keys.SPACEBAR:\n            game.start();\n            break;\n\n        case keys.LEFT:\n        case keys.RIGHT:\n        case keys.UP:\n        case keys.DOWN:\n            player.setKey(key);\n\n            if (inputTimer === 0) {\n                inputTimer = setTimeout(function(){\n                    socket.emit(gameEvents.server_setPlayerKey, {\n                            roomId: roomId,\n                            playerId: player.id,\n                            keyCode: key\n                        }\n                    );\n                }, inputTimeoutPeriod);\n            } else {\n                clearTimeout(inputTimer);\n                inputTimer = 0;\n            }\n\n            break;\n    }\n});\n```", "```js\n// ch4/snake-ch4/share/snake.js\n\nSnake.prototype.sync = function(serverState) {\n    var diffX = serverState.head.x - this.head.x;\n    var diffY = serverState.head.y - this.head.y;\n\n    if (diffX === 0 && diffY === 0) {\n        this.inSync = true;\n        return true;\n    }\n\n    this.inSync = false;\n\n    // Teleport to new position if:\n    //   - Off by one in one of the axis\n    //   - Off by one in both axes, but only one unit from the neck\n    if ((diffX === 0 && diffY === 1)\n           || (diffX === 1 && diffY === 0)\n           || (this.pieces[0].x === serverState.head.x && diffY === 1)\n           || (this.pieces[0].y === serverState.head.y && diffX === 1)\n    ){\n\n        this.head.x = serverState.head.x;\n        this.head.y = serverState.head.y;\n\n        this.inSync = false;\n        return true;\n    }\n\n    // TODO: Implement interpolation error correction strategy here\n\n    return false;\n};\n```", "```js\n// ch4/snake-ch4/share/snake.js\n\nSnake.prototype.interpolate = function(currFrame, src, dest, totalFrames) {\n    var t = currFrame / totalFrames;\n\n    return (1 - t) * src + dest * totalFrames ;\n};\n```", "```js\n// ch4/snake-ch4/share/app.client.js\n\nsocket.on(gameEvents.client_playerState, function(data){\n    otherPlayers = data.filter(function(_player){\n\n        if (_player.id == player.id) {\n            serverState = _player;\n            serverState.currFrame = 0;\n\n            return false;\n        }\n\n        return true;\n    });\n});\n```", "```js\n// ch4/snake-ch4/share/snake.js\n\nvar Snake = function (id, x, y, color_hex, width, height, interpMaxFrames) {\n    this.id = id;\n    this.color = color_hex;\n    this.head = {x: x, y: y};\n    this.pieces = [this.head];\n    this.width = width || 16;\n    this.height = height || 16;\n    this.interpMaxFrames = interpMaxFrames || 3;\n    this.readyToGrow = false;\n    this.input = {};\n    this.inSync = true;\n};\n```", "```js\n// ch4/snake-ch4/share/snake.js\n\nSnake.prototype.sync = function(serverState) {\n    var diffX = serverState.head.x - this.head.x;\n    var diffY = serverState.head.y - this.head.y;\n\n    if (diffX === 0 && diffY === 0) {\n        this.inSync = true;\n\n        return true;\n    }\n\n    this.inSync = false;\n\n    // Teleport to new position if:\n    //   - Off by one in one of the axis\n    //   - Off by one in both axes, but only one unit from the neck\n    if ((diffX === 0 && diffY === 1) ||\n        (diffX === 1 && diffY === 0) ||\n        (this.pieces[0].x === serverState.head.x && diffY === 1) ||\n        (this.pieces[0].y === serverState.head.y && diffX === 1)) {\n\n        this.head.x = serverState.head.x;\n        this.head.y = serverState.head.y;\n\n        this.inSync = true;\n\n        return true;\n    }\n\n    // Interpolate towards correct point until close enough to teleport\n    if (serverState.currFrame < this.interpMaxFrames) {\n        this.head.x = this.interpolate(\n            serverState.currFrame,\n            this.head.x,\n            serverState.head.x,\n            this.interpMaxFrames\n        );\n        this.head.y = this.interpolate(\n            serverState.currFrame,\n            this.head.y,\n            serverState.head.y,\n            this.interpMaxFrames\n        );\n    }\n\n    return false;\n};\n```"]