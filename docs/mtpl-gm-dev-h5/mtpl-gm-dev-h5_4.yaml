- en: Chapter 4. Reducing Network Latency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。减少网络延迟
- en: Now that we have a working game that allows the presence of multiple players
    in the same or multiple game rooms, we will iterate and take care of a very important
    issue in online games, namely, network latency. Given the fact that you will need
    to think about this problem for many years to come, we will be very focused on
    the topics covered in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个允许多个玩家在同一个或多个游戏房间中存在的工作游戏，我们将迭代并解决在线游戏中一个非常重要的问题，即网络延迟。考虑到你将需要在未来很多年里思考这个问题，我们将非常专注于本章涵盖的主题。
- en: 'In this chapter, we will discuss the following principles and concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下原则和概念：
- en: Dealing with network latency in multiplayer games
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多人游戏中的网络延迟
- en: Implementing a local game server in the client
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端实现本地游戏服务器
- en: Client-side prediction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端预测
- en: Interpolating real positions to correct bad predictions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值真实位置以纠正错误的预测
- en: Dealing with network latency
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理网络延迟
- en: Although you may well be one of the happy citizens out there with a gigabit
    internet connection, you should know that most of the world is certainly not as
    fortunate. Thus, some of the most important things to keep in mind when developing
    online multiplayer games are that not all players will have the same network speed
    and not all players will have high-speed connections.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可能是那些拥有千兆互联网连接的幸运公民之一，但你应该知道世界上大多数地方肯定不那么幸运。因此，在开发在线多人游戏时需要牢记的一些最重要的事情是，并非所有玩家都拥有相同的网络速度，也并非所有玩家都拥有高速连接。
- en: The main takeaway point that you need to remember from this section is that,
    as long as there is a network between your players and the game server (or between
    two players connected directly to each other), there will be latency.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从本节中你需要记住的主要观点是，只要玩家和游戏服务器之间存在网络（或者两个玩家直接连接在一起），就会存在延迟。
- en: It is true that not all games need near instantaneous response times over the
    network, for example, turn-based games such as Chess, or our implementation of
    Snake, since the game tick is much slower than most action games. However, for
    a real-time, fast-paced game, even a small latency of, say, 50 ms, can make the
    game very jerky and annoying to play.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，并非所有游戏都需要在网络上具有几乎即时的响应时间，例如，回合制游戏，比如国际象棋，或者我们的贪吃蛇实现，因为游戏的tick比大多数动作游戏要慢得多。然而，对于实时、快节奏的游戏，即使是50毫秒的小延迟也会使游戏变得非常卡顿和令人讨厌。
- en: Imagine this for a moment. You press the right arrow key on the keyboard. Your
    game client tells the server that your intent is to move to the right. The server
    finally gets your message 50 ms later, runs its update cycle, and tells you to
    place your character at the position (23, 42). Finally, another 50 ms later, your
    client receives the message from the server, and a whole tenth of a second after
    you pressed the key on the keyboard, your player begins to move to your desired
    location.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下这种情况。你按下键盘上的右箭头键。你的游戏客户端告诉服务器你的意图是向右移动。服务器最终在50毫秒后收到你的消息，运行其更新周期，并告诉你将你的角色放在位置（23，42）。最后，另外50毫秒后，你的客户端接收到服务器的消息，按下键盘的那一刻，你的玩家开始朝着你想要的位置移动。
- en: '![Dealing with network latency](img/B04669_04_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![处理网络延迟](img/B04669_04_01.jpg)'
- en: As mentioned in the previous chapters, the most commonly used solution to the
    network latency problem is to change the client logic so that it can respond to
    user input immediately, while updating the server about its input at the same
    time. The authoritative server then updates its own game state based on the input
    from each client and finally sends out its version of the current state of the
    game world to all of the clients. These clients can then update themselves so
    that they are in sync with the server and the process continues.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前几章中提到的，网络延迟问题最常用的解决方案是改变客户端逻辑，使其能够立即响应用户输入，同时向服务器更新其输入。然后，权威服务器根据每个客户端的输入更新自己的游戏状态，最后向所有客户端发送游戏世界当前状态的版本。然后这些客户端可以更新自己，以便与服务器同步，整个过程继续进行。
- en: '![Dealing with network latency](img/B04669_04_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![处理网络延迟](img/B04669_04_02.jpg)'
- en: Thus, as you may have realized, the goal is not at all to get rid of latency
    since this is physically impossible, but merely to hide it behind a constantly
    updating game so that the player has the illusion that the game is being updated
    by the server in real time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如你可能已经意识到的那样，目标根本不是消除延迟，因为这在物理上是不可能的，而只是将其隐藏在一个不断更新的游戏后面，以便玩家产生游戏正在实时由服务器更新的错觉。
- en: As long as the player feels that the game is responsive and behaves as the player
    expects it to, for all practical purposes, you have solved the network latency
    issue. With every communication with the server (or from the server to the client),
    ask yourself where the latency is and how you can hide it by keeping the game
    going while the packets travel across the wire.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只要玩家觉得游戏反应灵敏，并且表现符合玩家的期望，从实际目的来看，你已经解决了网络延迟问题。在与服务器的每次通信（或者从服务器到客户端），问问自己延迟在哪里，以及如何通过保持游戏进行来隐藏它，而数据包在传输过程中。
- en: Synchronizing clients in lockstep
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在同步客户端中锁定步伐
- en: So far, we've discussed the client-server structure where the server is the
    ultimate authority on the game, and clients have little or no authority over the
    game's logic. In other words, clients simply take in any input from the player
    and pass it along to the server. Once the server sends out updated positions to
    the clients, the game state is rendered by the clients.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了客户端-服务器结构，其中服务器是游戏的最终权威，客户端对游戏逻辑几乎没有或根本没有权威。换句话说，客户端只是接受玩家的任何输入，并将其传递给服务器。一旦服务器向客户端发送更新的位置，客户端就会渲染游戏状态。
- en: One other model that is commonly used in online multiplayer games is the lockstep
    method. In this method, a client tells the server about any input received from
    the player as often as it can. The server then broadcasts this input to all other
    clients. The clients in turn use the input state for each participant in the next
    update cycle, and in theory, everyone ends up with the same game state. Each time
    the server takes a lockstep (runs physics update from the input data from each
    client), we call it a turn.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在线多人游戏中常用的另一种模型是锁步方法。在这种方法中，客户端尽可能频繁地告诉服务器有关玩家收到的任何输入。然后服务器将此输入广播给所有其他客户端。然后客户端依次使用每个参与者的输入状态进行下一个更新周期，并且理论上，每个人最终都会得到相同的游戏状态。每当服务器进行锁步（从每个客户端的输入数据运行物理更新）时，我们称之为一个回合。
- en: In order for the server to remain as the ultimate authority over the game, an
    update cycle is also run in the server's simulation, and the output of the simulation
    is also broadcasted to the clients. If a client's updated state differs from the
    one sent by the server, the client takes the server's data to be correct and updates
    itself accordingly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使服务器保持对游戏的最终控制权，服务器的模拟也会运行更新周期，并且模拟的输出也会广播给客户端。如果客户端的更新状态与服务器发送的状态不同，客户端会认为服务器的数据是正确的，并相应地更新自己。
- en: Fixed-time step
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定时间步
- en: The first thing that we'll update in our server's code is the game loop, and
    the first thing that it'll do differently is that it will no longer have the concept
    of delta times. In addition, we will need to queue up all input from each client
    between update cycles so that we have the data to update the game state with,
    when we run the physics update.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在服务器代码中将要更新的第一件事是游戏循环，它将做的第一件不同的事情是不再有增量时间的概念。此外，我们需要在更新周期之间排队每个客户端的所有输入，以便在运行物理更新时，我们有数据来更新游戏状态。
- en: Since we're now using a consistent time step, we have no need to keep track
    of delta times on the server. As a result, the server also has no concept of delta
    times from the clients' perspective.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在使用了一致的时间步长，我们不需要在服务器上跟踪增量时间。因此，服务器在客户端的角度也没有增量时间的概念。
- en: For example, imagine a racing game where a player is driving at, say, 300 pixels
    per second. Suppose this particular client is running the game at a frequency
    of 60 frames per second. Provided that the car maintained a steady speed during
    the entire second, then after 60 frames, the car will have travelled 300 pixels.
    Additionally, during each frame the car will have travelled an average of 5 pixels.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一个赛车游戏，玩家以每秒300像素的速度驾驶。假设这个特定的客户端以每秒60帧的频率运行游戏。假设汽车在整个秒内保持稳定的速度，那么经过60帧，汽车将行驶300像素。此外，在每帧期间，汽车将平均行驶5像素。
- en: Now, suppose that the server's game loop is configured to run at a frequency
    of 10 frames per second, or once every 100 milliseconds. The car will now travel
    further per frame (30 pixels instead of 5 pixels), but in the end, it will also
    be 300 pixels further than where it started one second ago.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设服务器的游戏循环配置为每秒10帧，或者每100毫秒运行一次。汽车现在每帧将行驶更远（30像素而不是5像素），但最终，它也将比一秒前行驶300像素。
- en: '![Fixed-time step](img/B04669_04_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![固定时间步](img/B04669_04_03.jpg)'
- en: In summary, while the clients will still need to track how long it takes to
    process a single frame in order for all the clients to run at the same speed,
    regardless of how fast or slow different computers run the game loop, the server's
    game loop doesn't care about any of this because it doesn't need to.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，虽然客户端仍然需要跟踪处理单个帧需要多长时间，以便所有客户端以相同的速度运行，但是服务器的游戏循环不关心这一切，因为它不需要关心。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we first update our tick module that we built for the purpose of reusing
    code in the server code as well as in the code that is shipped to the browser.
    Note the use of `setImmediate` instead of `setTimeout`, which will perform theoretically
    faster since the callback is scheduled earlier in the execution queue.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先更新了我们为重用服务器代码以及发送到浏览器的代码而构建的tick模块。请注意使用`setImmediate`而不是`setTimeout`，因为回调函数在执行队列中提前调度，理论上会更快。
- en: In addition, observe how we export the wrapper tick function instead of the
    closure that it returns. This way we can configure the server's timer before exporting
    the function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，观察我们如何导出包装器tick函数，而不是它返回的闭包。这样我们可以在导出函数之前配置服务器的计时器。
- en: Finally, since the delta time is now predictable and consistent, we no longer
    need the tick's variable to simulate the passage of time. Now, we can just pass
    the interval value directly into the callback function after each tick.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于增量时间现在是可预测和一致的，我们不再需要tick的变量来模拟时间的流逝。现在，我们可以在每次tick之后直接将间隔值传递给回调函数。
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The only difference that you will notice here is that the `tick` module is called
    with the frequency it is being passed in, so we can configure how fast we wish
    it to run.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您唯一会注意到的区别是`tick`模块被调用的频率与传入的频率相同，因此我们可以配置它的运行速度。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may wonder why we selected the possibly arbitrary number of 10 updates per
    second for the server's game loop. Remember that our goal is to make our players
    believe that they're actually playing an awesome game together with other players.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么我们选择了服务器游戏循环每秒10次更新的可能任意的数字。请记住，我们的目标是让玩家相信他们实际上正在与其他玩家一起玩一个很棒的游戏。
- en: The way in which we can achieve this illusion of real-time game play is by carefully
    hand-tuning the server to update fast enough so that the accuracy is not too far
    off and slow enough so that the clients can move in such a way that the lag is
    not too noticeable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过精心调整服务器以快速更新，以便准确度不会太偏离，同时又足够慢以使客户端可以以不太明显的方式移动，从而实现这种实时游戏的错觉。
- en: You need to find the balance between the authoritative server that provides
    accurate game state versus the client's ability to provide a responsive experience
    to the player. The more often you update the clients with data from the server's
    update cycle, the less accurate your simulation will be; this depend on how much
    data the simulation had to process and possibly drop data along the way in order
    to keep up with the high update frequency. Similarly, the less often you update
    the clients with data from the server's update cycle, the less responsive the
    client will feel, since it'll need to wait longer on the server before it knows
    for sure what the correct game state should be.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在提供准确游戏状态的权威服务器和客户端提供对玩家的响应体验之间找到平衡。您更新客户端的频率越高，来自服务器更新周期的数据的模拟就越不准确；这取决于模拟需要处理多少数据，并且可能会在途中丢弃数据以保持高更新频率。同样，您更新客户端的频率越低，客户端的响应性就越低，因为它需要在服务器上等待更长时间，直到确定正确的游戏状态。
- en: Synchronizing the clients
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步客户端
- en: As the server consistently pushes out updates about the current state of the
    game world, we need a way for the clients to consume and make use of this data.
    A simple way to achieve this is to hold the latest server state outside the game
    class and update itself whenever the data is available since it won't be present
    every update `tick`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务器不断推送有关游戏世界当前状态的更新，我们需要一种方式让客户端消耗和利用这些数据。实现这一点的简单方法是在游戏类之外保存最新的服务器状态，并在数据可用时更新自身，因为它不会在每次更新“tick”时都存在。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we declare the `serverState` variable as a module-wide global. Then, we
    modify the socket listener that grabs the state of all other players when the
    server updates that, but now, we look for the reference to the player that represents
    the hero here, and store that in the global `serverState` variable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将“serverState”变量声明为模块范围的全局变量。然后，我们修改了套接字监听器，当服务器更新其他所有玩家的状态时，我们现在寻找代表英雄的玩家的引用，并将其存储在全局“serverState”变量中。
- en: With this global state on hand, we can now check for its existence during the
    update method of the client and act accordingly. If the state is not there at
    the beginning of a given update cycle, we update the client as before. If the
    world state from the server is in fact available to us at the beginning of the
    next client update `tick`, we can synchronize the client's positions with the
    server instead.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个全局状态，我们现在可以在客户端的更新方法中检查其存在并相应地采取行动。如果在给定的更新周期开始时状态不存在，我们就像以前一样更新客户端。如果来自服务器的世界状态确实在下一个客户端更新“tick”开始时对我们可用，我们就可以将客户端的位置与服务器同步。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The actual implementation of `Player.prototype.sync` will depend on our strategy
    for error correction, which is described in the next couple of sections. Eventually,
    we'll want to incorporate both teleportation and interpolation, but for now, we'll
    just check whether any error correction is even necessary.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “Player.prototype.sync”的实际实现将取决于我们的错误校正策略，这将在接下来的几节中描述。最终，我们将希望同时整合传送和插值，但现在，我们只需检查是否需要任何错误校正。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The changes to the `snake` class are pretty straightforward. We add a flag to
    let us know whether we still need to synchronize with the server state after a
    single update cycle. This is necessary because when we decide to interpolate between
    two points, we'll need multiple update cycles to get there. Next, we add a method
    that we can call to verify whether the player is (or isn't) in sync with the server,
    which determines how the `snake` updated the given frame. Finally, we add a method
    that performs the actual synchronization. Right now, we simply check whether there
    is a need to update our position. As we discuss different error correction strategies,
    we'll update the `Snake.prototype.sync` method to make use of them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对“snake”类的更改非常直接。我们添加一个标志，让我们知道在单个更新周期后是否仍需要与服务器状态同步。这是必要的，因为当我们决定在两个点之间进行插值时，我们需要多个更新周期才能到达那里。接下来，我们添加一个方法，用于验证玩家是否与服务器同步，这将决定“snake”如何更新给定的帧。最后，我们添加一个执行实际同步的方法。现在，我们只是检查是否需要更新我们的位置。随着我们讨论不同的错误校正策略，我们将更新“Snake.prototype.sync”方法以利用它们。
- en: Predicting the future with a local game server
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地游戏服务器预测未来
- en: The strategy that we will use in order to make our clients responsive, yet bound
    to the authoritative server, is that we will act on the input that we receive
    from the player while we tell the server about the input. In other words, we will
    need to take the player's input and predict what will happen to our game state
    as a result, while we wait to hear back from the server with the actual output
    of the player's action.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的策略是使客户端响应灵活，但受限于权威服务器，我们将根据玩家的输入来告诉服务器。换句话说，我们需要接收玩家的输入并预测由此对游戏状态的影响，同时等待服务器返回玩家行动的实际输出。
- en: Client-side prediction can be summarized as your best guess about what should
    happen between authoritative updates. In other words, we can reuse some of the
    server code that updates the game world on the client-side so that our guess about
    what the output should be from the player's input is pretty much the same as what
    the server will simulate.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端预测可以总结为您对权威更新之间应该发生的事情的最佳猜测。换句话说，我们可以在客户端重用一些更新游戏世界的服务器代码，以便我们对玩家输入的输出应该是与服务器模拟的几乎相同。
- en: Reporting user input
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告用户输入
- en: The first thing that we'll change is the control mechanism on the client side.
    Instead of simply keeping track of our position locally, we'll also inform the
    server that the player has pressed a key.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变客户端的控制机制。我们不仅会在本地跟踪我们的位置，还会通知服务器玩家按下了一个键。
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of course, doing this directly in the event handler's callback might quickly
    overwhelm the server, so be sure to time this upward reporting. One way to do
    this is to use the `tick` update to contact the server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，直接在事件处理程序的回调中执行这个操作可能会很快地使服务器不堪重负，所以一定要及时向上报告。一种方法是使用“tick”更新来联系服务器。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we update the server at the same frequency that we update our local simulation,
    which is not a bad idea. However, you might also consider leaving all networking
    logic outside of the `game` class (`update` and `render` methods) so that the
    networking aspects of the game is abstracted out of the game altogether.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们以与本地模拟相同的频率更新服务器，这不是一个坏主意。然而，你可能还要考虑将所有网络逻辑放在“game”类（“update”和“render”方法）之外，以便将游戏的网络方面完全抽象出来。
- en: For this, we can put the socket emitter right back in the controller's event
    handler; however, instead of calling the server right away, we can use a timer
    to keep the updates consistent. The idea is that, when a key is pressed, we call
    the server right away with the update. If the user pushes a key again before some
    time has gone by, we wait a certain amount of time before calling the server again.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以将socket发射器直接放回到控制器的事件处理程序中；但是，我们不会立即调用服务器，而是使用定时器来保持更新一致。这个想法是，当按下一个键时，我们立即用更新调用服务器。如果用户在一段时间内再次按下一个键，我们会等待一段时间再次调用服务器。
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the `inputTimer` variable is a reference to the timer that we created
    with `setTimeout`, which we can be canceled at any moment until the timer is actually
    fired. This way, if the player presses many keys really fast (or holds a key down
    for a while), we can ignore the additional events.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“inputTimer”变量是对我们使用“setTimeout”创建的定时器的引用，我们可以随时取消，直到定时器实际触发。这样，如果玩家非常快地按下许多键（或者长时间按住一个键），我们可以忽略额外的事件。
- en: One side effect of this implementation is that, if the player holds down the
    same key for a long time, the timer that wraps the call to `socket.emit` will
    continue to be canceled, and the server will never be notified of subsequent key
    presses. While this may seem like a potential problem at first, it is actually
    a very welcome feature. Firstly, in the case of this particular game where pressing
    the same key two or more times has no effect, we really don't need to report the
    additional presses to the server. Secondly (and this holds true for any other
    type of game as well), we can let the server assume that, after the player presses
    the right arrow key, the right key is still being pressed until we tell the server
    otherwise. Since our `Snake` game doesn't have a concept of a key being released
    (meaning that the snake will constantly move in the direction of the last key
    press until we change its direction), the server will continue to move the snake
    in a given direction until we press a different key and tell the server to move
    it in the new direction.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现的一个副作用是，如果玩家长时间按住同一个键，包裹对“socket.emit”调用的定时器将继续被取消，服务器将永远不会收到后续按键的通知。虽然这乍一看可能是一个潜在的问题，但实际上这是一个非常受欢迎的特性。首先，在这个特定游戏的情况下，按两次或更多次相同的键没有效果，我们真的不需要向服务器报告额外的按键。其次（这对任何其他类型的游戏也适用），我们可以让服务器假设，在玩家按下右箭头键后，右键仍然被按下，直到我们告诉服务器停止。由于我们的“Snake”游戏没有按键释放的概念（这意味着蛇将一直朝着最后按下的方向移动，直到我们改变它的方向），服务器将继续以给定的方向移动蛇，直到我们按下不同的键并告诉服务器以新的方向移动。
- en: Error correction
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误校正
- en: Once the server has every player's input state, positions, and intents, it can
    take a lockstep turn and update the entire game world. Since at the time when
    an individual player makes a move, he or she only knows about what is happening
    in that particular client, one thing that could happen is that another player
    could play in their local client in such a way that there is a conflict between
    the two players. Maybe, there was only one fruit and both players attempted to
    get to it at the same time, or it is possible that another player ran into you,
    and you're now going to be taking some damage.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器获得了每个玩家的输入状态、位置和意图，它就可以进行锁步转向并更新整个游戏世界。因为在个别玩家进行移动时，他或她只知道在特定客户端发生了什么，可能会出现的情况之一是另一个玩家可能会在他们的本地客户端以一种导致两个玩家之间发生冲突的方式进行游戏。也许，只有一个水果，两个玩家同时试图接近它，或者可能是另一个玩家撞到了你，你现在要承受一些伤害。
- en: This is where the authoritative server comes into play and puts all the clients
    on the same page. Whatever each client predicted in isolation should now match
    what the server has determined so that everyone can see the game world in the
    same state.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是权威服务器发挥作用的地方，让所有客户端保持一致。每个客户端在孤立状态下预测的结果现在应该与服务器确定的结果相匹配，这样每个人都可以看到游戏世界处于相同的状态。
- en: Here is a classic example of a situation where network latency can get in the
    way of a fun multiplayer experience. Let's imagine that, two players (player A
    and player B) start heading for the same fruit. According to each player's simulation,
    they're both coming from opposite directions and headed for the fruit, which is
    now only a few frames away. If neither player changes direction, they would both
    arrive at the fruit at the exact same frame. Suppose that, in the frame before
    player A eats the fruit, he decided to change direction for whatever reason. Since
    player B doesn't get player A's updated state and position from the server for
    a few frames, he might think that player A was indeed going to eat the fruit,
    so player B's simulation would show player A eating the fruit and getting points
    for it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个经典的例子，说明网络延迟可能会妨碍有趣的多人游戏体验。假设两个玩家（玩家A和玩家B）开始朝着同一个水果前进。根据每个玩家的模拟，他们都是从相反的方向来到水果，现在只有几帧的距离。如果没有一个玩家改变方向，他们将在完全相同的帧数到达水果。假设在玩家A吃掉水果之前的一帧，他因为某种原因决定改变方向。由于玩家B在几帧内没有从服务器获取玩家A的更新状态和位置，他可能会认为玩家A确实要吃水果，因此玩家B的模拟将显示玩家A吃水果并得分。
- en: Given the previous scenario, what should player B's simulation do when the server
    sends the next turn's output that shows that player A swerved away from the fruit
    and didn't earn any points? Indeed, the two states are now out of sync (between
    player B's simulation and the server), so player B should get better synchronized
    with the server.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到前面的情况，当服务器发送下一轮输出，显示玩家A避开了水果并没有得到任何分数时，玩家B的模拟应该怎么做？实际上，现在两个状态不同步（玩家B的模拟和服务器之间），所以玩家B应该与服务器更好地同步。
- en: Play through the intent, but not the outcome
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按照意图进行游戏，而不是结果
- en: A common way to handle the scenario that was mentioned previously is to include
    some sort of animation that a client can start right away based on its current
    knowledge of the player's intent and the current state of the game world. In our
    specific case, when player B thinks that player A is about to grab the fruit and
    earn some points, his or her simulation could start an animation sequence that
    would indicate that player A is about to level up by eating a fruit. Then, when
    the server responds back and confirms that player A didn't actually eat the fruit,
    player B's client can fall back to some secondary animation that would represent
    that the fruit was untouched.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 处理之前提到的情况的常见方法是包括某种动画，客户端可以根据其对玩家意图和游戏世界当前状态的了解立即开始。在我们的特定情况下，当玩家B认为玩家A即将抓住水果并获得一些分数时，他或她的模拟可以开始一个动画序列，表明玩家A即将通过吃水果升级。然后，当服务器回应并确认玩家A实际上没有吃水果时，玩家B的客户端可以回退到一些次要动画，表示水果未被触摸。
- en: 'Those of you who are fans of **Halo** might have noticed this in action when
    you attempted to throw a grenade in the game during an online session with your
    mates. When a client decides to toss a hand grenade in Halo, the client will inform
    the server about this intent right away. The server will then run a bunch of tests
    and checks to make sure that this is a legal move. Finally, the server will respond
    back to the client and inform it whether it is allowed to continue with the tossing
    of the grenade. Meanwhile, during this time when the server confirmed that the
    client could throw that grenade, the client started playing through the animation
    sequence that it does when a player throws a grenade. If this is left unchecked
    (that is, the server doesn''t respond back in time), the player will finish swinging
    his arm forward, but nothing will be thrown, which, in this context, will look
    like a normal action [*Aldridge*, *David* *(2011)*, *I Shot You First: Networking
    the Gameplay of HALO: REACH. GDC 2011*].'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那些喜欢《光环》的人可能已经在与朋友进行在线游戏时注意到了这一点。当客户端尝试在游戏中扔手榴弹时，客户端会立即通知服务器。服务器然后会运行一系列测试和检查，以确保这是一个合法的举动。最后，服务器会回应客户端，告知其是否允许继续扔手榴弹。与此同时，在服务器确认客户端可以扔手榴弹时，客户端开始播放玩家扔手榴弹时的动画序列。如果这没有得到检查（也就是说，服务器没有及时回应），玩家会完成向前挥动手臂的动作，但什么也没有扔出去，在这种情况下，看起来就像是一个正常的动作。[*Aldridge*，*David*
    *(2011)*，*我先开枪：网络化《光环：Reach》的游戏玩法。GDC 2011*]
- en: How close is close enough?
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多接近才算足够接近？
- en: Another use case is that a client has the current state of the game along with
    the player's input information. The player runs the next turn's simulation and
    renders the snake at a certain position. A few frames later, the server tells
    the client that the snake is actually at a different position now. How do we fix
    this?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用例是，客户端具有游戏的当前状态以及玩家的输入信息。玩家运行下一轮的模拟并在某个位置渲染蛇。几帧后，服务器告诉客户端蛇实际上在不同的位置。我们该如何解决这个问题？
- en: In situations where we need to change a player's position, it might look strange
    if the player launches a blue robot into the air and over a pit with spikes at
    the bottom, and a few frames later (after the server syncs up all of the clients),
    we suddenly see the robot several pixels away from where the player expected it
    to be. However, then again, there are cases where the adjustment needed from an
    update from the server is small enough so that simply teleporting the player from
    point A to point B is not noticeable. This would be heavily dependent on the type
    of game and the individual situation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要改变玩家位置的情况下，如果玩家将蓝色机器人投入空中并越过底部有尖刺的坑，然后几帧后（在服务器同步所有客户端之后），我们突然看到机器人离玩家预期的位置几个像素远，可能会看起来很奇怪。然而，另一方面，有些情况下，从服务器的更新所需的调整很小，以至于简单地将玩家从A点传送到B点是不可察觉的。这将严重依赖于游戏的类型和个体情况。
- en: '![How close is close enough?](img/B04669_04_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![多接近才算足够接近？](img/B04669_04_04.jpg)'
- en: For the purpose of our Snake game, we can choose to teleport if we determine
    that the discrepancy between our prediction of where the snake should be, and
    where the server tells us the snake is, is only off by one unit in either (not
    both) axis, except if the head is off by one unit in both the axes but adjusting
    one of the axis would put us at the neck of the snake. This way, the player would
    only see the snake change the position of its head by one place.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们的贪吃蛇游戏，如果我们确定我们的预测与服务器告诉我们蛇应该在的位置之间的差异只有一个单位（不是两个轴都有偏差），除非头部在两个轴上都有一个单位的偏差，但调整其中一个轴会使我们处于蛇的脖子上，那么我们可以选择传送。这样，玩家只会看到蛇的头部位置变化了一个位置。
- en: For example, if our prediction puts the player's head at point (8,15), and the
    snake is moving from right to left, but the server's update shows that it should
    be at point (7,16), we would not teleport to the new point because that would
    require adjusting two axes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们的预测将玩家的头放在点（8,15），而蛇是从右向左移动，但服务器的更新显示它应该在点（7,16），我们不会传送到新的点，因为那需要调整两个轴。
- en: However, if we still have the snake moving to the left and its head is now at
    point (8,15), and the server update puts it at point (7,15), (8,14), (8,16), (9,15),
    (9,14), or (9,16), we can simply teleport the head to the new point, and in the
    next update, the rest of the body of the snake would be repositioned, as needed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果蛇仍然向左移动，其头部现在位于点（8,15），而服务器更新将其放在点（7,15），（8,14），（8,16），（9,15），（9,14）或（9,16），我们可以简单地将头部瞬间移动到新点，然后在下一次更新时，蛇的其余部分将被重新定位。
- en: '![How close is close enough?](img/B04669_04_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![多接近算够接近？](img/B04669_04_05.jpg)'
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You will notice that teleporting could put the head of the snake over itself,
    which, under normal circumstances, would result in the player losing the game.
    However, when this happens, the game won't check for that collision again until
    the next frame is updated. At this point, the head will be first moved forward,
    which will readjust the rest of the body of the snake and thus remove any possible
    collisions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到瞬间移动可能会使蛇的头部重叠，这在正常情况下会导致玩家输掉游戏。然而，当这种情况发生时，游戏不会再次检查碰撞，直到下一帧更新。此时，头部将首先向前移动，这将重新调整蛇的其余部分，从而消除任何可能的碰撞。
- en: Smooth user experience
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流畅的用户体验
- en: Another way to adjust between the player's current position and the position
    set by the server is to gradually and smoothly move towards that point through
    the course of multiple frames. In other words, we interpolate between our current
    position and the position we want to get to.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 调整玩家当前位置和服务器设置的位置之间的另一种方法是通过多帧逐渐平滑地移动到该点。换句话说，我们在当前位置和想要到达的位置之间进行插值。
- en: 'The way interpolation works is simple, as explained here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 插值的工作原理很简单，如下所述：
- en: First determine how many frames you want the interpolation to take.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先确定您希望插值需要多少帧。
- en: Then determine how many units you will need to move in each direction per frame.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后确定每个方向上每帧需要移动多少单位。
- en: Finally, move each frame a little bit until you get to the destination point
    in the desired amount of frames.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在每帧中移动一点，直到在所需的帧数内到达目标点。
- en: 'Essentially, we simply move a percentage of the way towards the target point
    at the same percentage of the time we wish to get there. In other words, if we
    would like to get to the target position in 10 frames, then at each frame we move
    10 percent of the total distance. Thus, we can abstract away the following formula:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们只是按照所需时间的相同百分比向目标点移动相应的百分比。换句话说，如果我们希望在10帧内到达目标位置，那么在每一帧我们就移动总距离的10％。因此，我们可以将以下公式抽象出来：
- en: '*a = (1 – t) * b + t * c*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*a = (1 – t) * b + t * c*'
- en: Here, `t` is a number between zero and one, which represents a percentage value
    between 0 percent and 100 percent (this is the current distance between the starting
    point and the target point).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`t`是一个介于零和一之间的数字，表示0％到100％之间的百分比值（这是起点和目标点之间的当前距离）。
- en: '![Smooth user experience](img/B04669_04_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![流畅的用户体验](img/B04669_04_06.jpg)'
- en: We can implement the linear interpolation method in the `snake` class directly;
    however, the obsessed object-oriented designer inside of you might argue that
    this mathematical procedure might be better suited inside an entirely separate
    utility class that is imported and used by the `snake` class.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接在`snake`类中实现线性插值方法；然而，您内心中那个执着的面向对象的设计师可能会认为，这种数学过程更适合放在一个完全独立的实用程序类中，该类被`snake`类导入并使用。
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This interpolation method will take (besides the source and destination points)
    the current frame within the animation as well as the total number of frames that
    the animation will last. As a result, we'll need some way to keep track of the
    current frame and reset it to zero when we wish to start the animation again.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种插值方法将使用（除了源点和目标点）动画中的当前帧以及动画将持续的总帧数。因此，我们需要一种方法来跟踪当前帧，并在希望重新开始动画时将其重置为零。
- en: A good place to reset the interpolation sequence is in the `socket` callback,
    which is where we first learn that we might need to interpolate towards a different
    position.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重置插值序列的好地方是在`socket`回调中，这是我们首次得知可能需要向不同位置插值的地方。
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We will then also need to update the `snake` class so that we can configure
    the maximum amount of frames that each interpolation cycle can handle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们还需要更新`snake`类，以便我们可以配置每个插值周期可以处理的最大帧数。
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With this in place, we can now implement linear interpolation in our `sync`
    method so that the snake can interpolate smoothly to its actual position over
    the course of a few frames. The number of frames that you choose to arrive at
    the target destination can be dynamically set depending on the distance to travel,
    or you can leave it constant as per your game's individual case.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个方法，我们现在可以在我们的`sync`方法中实现线性插值，这样蛇就可以在几帧的时间内平滑地插值到其实际位置。您可以根据需要选择到达目标位置所需的帧数，也可以根据游戏的个别情况将其保持不变。
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, you will notice that, in this current implementation of our client-server
    setup, the client receives the exact positions of the other players, so no prediction
    is made about them. Thus, their positions are always in sync with the server and
    need no error corrections or interpolations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您会注意到，在我们当前的客户端-服务器设置中，客户端接收其他玩家的确切位置，因此不会对它们进行预测。因此，它们的位置始终与服务器同步，不需要错误校正或插值。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The focus of this chapter was to reduce the perceived latency between the authoritative
    server and the clients that it runs. We saw how client prediction can be used
    to give the player immediate feedback while the server determines the validity
    of a player's requested move and intent. We then looked at how to incorporate
    the lockstep method on the server so that all the clients are updated together,
    and every client can also deterministically reproduce the same world state that
    is calculated by the game server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是减少权威服务器和运行它的客户端之间的感知延迟。我们看到了客户端预测如何可以在服务器确定玩家请求的移动和意图的有效性之前，为玩家提供即时反馈。然后，我们看了如何在服务器上使用锁步方法，以便所有客户端一起更新，并且每个客户端还可以确定性地重现游戏服务器计算出的相同世界状态。
- en: Finally, we looked at the two ways to correct a bad client prediction. The methods
    we implemented are teleportation and linear interpolation. Using these two error-correction
    methods allows us to show the player a close approximation of what should happen
    as a result of his or her input, but it also makes sure that their multiplayer
    experience is accurate and identical to what other players are experiencing.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了两种纠正错误客户端预测的方法。我们实现的方法是传送和线性插值。使用这两种错误校正方法可以让我们向玩家展示他们的输入应该产生的结果的一个近似，但也确保他们的多人游戏体验准确且与其他玩家的体验相同。
- en: In the next chapter, we will take a step into the future and play with some
    of the newer HTML5 APIs, including the Gamepad API, which will allow us to ditch
    the keyboard and use the more traditional game pad to control our games, Full-screen
    mode API, and WebRTC, which will allow us to do true peer-to-peer gaming and skip
    the client-server model for a while, and much more.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将迈向未来，并尝试一些较新的HTML5 API，包括Gamepad API，它将允许我们放弃键盘，使用更传统的游戏手柄来控制我们的游戏，全屏模式API和WebRTC，它将允许我们进行真正的点对点游戏，并暂时跳过客户端-服务器模型，以及更多。
