- en: Chapter 6. Adding Security and Fair Play
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。增加安全性和公平竞争
- en: Although we're only now talking about security, the main takeaway from this
    chapter is that security should be baked into your games. Just like other types
    of software, you can't just go in after the fact, slap in a few security features
    and expect the product to be bullet proof. However, since the primary focus of
    this book was not security, I think we can be justified in not bringing up the
    subject until the very last chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们现在才谈论安全性，但本章的主要要点是安全性应该内置到您的游戏中。就像其他类型的软件一样，您不能事后再加入一些安全功能，然后期望产品是无懈可击的。然而，由于本书的主要重点不是安全性，我认为我们可以理直气壮地直到最后一章才提出这个问题。
- en: 'In this chapter, we will discuss the following principles and concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下原则和概念：
- en: Common security vulnerabilities in web-based applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于网络的应用程序中的常见安全漏洞
- en: Using Npm and Bower to add extra security to your games
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Npm和Bower为您的游戏增加额外的安全性
- en: Making games more secure and less prone to cheating
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使游戏更安全，更不容易作弊
- en: Common security vulnerabilities
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的安全漏洞
- en: If you're coming to game development from one of the many other areas of software
    development, you will be pleased to know that securing a game is not much different
    than securing any other type of software. Treating a game like any other type
    of software that needs security, especially like a distributed and networked one,
    will help you to put in place the proper measures that will help you to protect
    your software.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是从软件开发的许多其他领域转向游戏开发，您会高兴地知道，保护游戏与保护任何其他类型的软件并没有太大的不同。将游戏视为需要安全性的任何其他类型的软件，尤其是分布式和网络化的软件，将帮助您制定适当的措施，以帮助您保护您的软件。
- en: In this section, we will cover a few of the most basic and fundamental security
    vulnerabilities in web-based applications (including games) as well as ways to
    protect against them. However, we will not delve too deeply (or at all) into more
    complicated networking security topics and scenarios, such as social engineering,
    denial of service attacks, securing user accounts, storing sensitive data properly,
    protecting virtual assets, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些基于网络的应用程序（包括游戏）中最基本和基本的安全漏洞，以及保护措施。然而，我们不会深入探讨更复杂的网络安全主题和情景，比如社会工程学、拒绝服务攻击、保护用户帐户、正确存储敏感数据、保护虚拟资产等等。
- en: Encryption over the wire
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过加密传输数据
- en: The first vulnerability about which you should be aware of is that sending data
    from your server to your clients leaves the data exposed for others to see. Monitoring
    network traffic is almost as easy as walking and chewing gum at the same time,
    even though not everyone is skilled enough to do either of these things.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道的第一个漏洞是，从服务器向客户端发送数据会使数据暴露给其他人。监视网络流量几乎和边走路、嚼口香糖一样容易，尽管并非每个人都有足够的技能来做这些事情。
- en: 'Here''s a common scenario that you might require your players to go through
    while they play (or prepare to play) your game:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可能要求玩家在玩游戏（或准备玩游戏）时经历的常见情景：
- en: The player enters a username and password in order to be authorized into your
    game
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家输入用户名和密码以获得授权进入您的游戏
- en: Your server validates the login information
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的服务器验证登录信息
- en: The player is then allowed to continue on and play the game
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后允许玩家继续玩游戏
- en: If the initial HTTP request sent to the server by the player is not encrypted,
    then anyone who was looking at the network packets would know the user credentials
    and your player's account would be compromised.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家发送到服务器的初始HTTP请求未加密，则查看网络数据包的任何人都将知道用户凭据，您的玩家帐户将受到威胁。
- en: 'The easiest solution is to transmit any such data over HTTPS. While using HTTPS
    won''t solve all of one''s security problems, it does provide us with a fairly
    certain guarantee, which includes the following points:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解决方案是通过HTTPS传输任何此类数据。虽然使用HTTPS不能解决所有安全问题，但它确实为我们提供了相当确定的保证，其中包括以下几点：
- en: The server responding to the client request would be who it says it is
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器响应客户端请求的人应该是它所说的那样
- en: The data received by both the server and the client would not have been tampered
    with
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器和客户端接收的数据不会被篡改
- en: Anyone looking at the data wouldn't be able to read it in plain text
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何查看数据的人都无法以纯文本形式阅读它
- en: Since HTTPS packets are encrypted, anyone monitoring the network will need to
    decrypt each packet in order to know data that it contained, thus making it a
    safe way to send one's password to the server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于HTTPS数据包是加密的，任何监视网络的人都需要解密每个数据包才能知道其中包含的数据，因此这是向服务器发送密码的安全方式。
- en: Just as there is no such thing as a *free meal*, there is also no such thing
    as free encryption and decryption. This means that by using HTTPS you will incur
    some measurable performance penalty. What this penalty actually is and how negligible
    it will be is highly dependent on a series of factors. The key is to evaluate
    your specific case and determine where exactly the use of HTTPS would be too expensive
    in terms of performance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就像没有免费的午餐一样，也没有免费的加密和解密。这意味着使用HTTPS会产生一些可衡量的性能损失。这种惩罚实际上是什么，以及它将是多么微不足道，这在很大程度上取决于一系列因素。关键是评估您的具体情况，并确定在性能方面使用HTTPS将会太昂贵的地方。
- en: However, remember that at a very minimum, trading off performance for security
    is worth the cost when the value of the data is greater than the extra performance.
    It is possible that you may not be able to transmit thousands of players' positions
    and velocities per second over HTTPS because of the associated latency this would
    cause. However, each individual user will not be logging in very often after one
    initial authentication, so forcing at least that to be secure is certainly something
    nobody can afford to go without.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请记住，至少在数据的价值大于额外性能时，以安全性为代价换取性能是值得的。由于相关的延迟，您可能无法通过HTTPS传输数千个玩家的位置和速度，但每个单独的用户在初始认证后不会经常登录，因此至少强制进行安全认证是任何人都无法承受的。
- en: Script injection
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本注入
- en: 'The base principle behind this vulnerability is that your script takes user
    input as text (data) and evaluates it as code in an execution context. A typical
    use case for this is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个漏洞背后的基本原则是，你的脚本将用户输入作为文本（数据）并在执行上下文中将其评估为代码。这种情况的典型用例如下：
- en: The game asks for the user to enter his/her name
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏要求用户输入他/她的名字
- en: A malicious user enters code
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意用户输入代码
- en: The game optionally saves that text for future use
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏可选择保存该文本以备将来使用
- en: The game eventually uses that code in an execution context
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏最终在执行上下文中使用该代码
- en: In the case of web-based application, or more specifically with JavaScript being
    executed in a browser, the vicious input might be a string of HTML and the execution
    context the DOM. One particular feature of the DOM API is its ability to set a
    string as an element's HTML content. The browser takes that string and turns it
    into live HTML, just like any other HTML document that is rendered in some server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Web的应用程序中，或者更具体地说，在浏览器中执行JavaScript时，恶意输入可能是一串HTML，执行上下文是DOM。DOM API的一个特点是它能够将一个字符串设置为元素的HTML内容。浏览器会将该字符串转换为活动的HTML，就像渲染在某个服务器上的任何其他HTML文档一样。
- en: 'The following code snippet is an example of an application that asks for a
    user''s nickname, then displays it on the upper-right corner of the screen. This
    game may also save the player''s name in a database and attempt to render that
    string with the player''s name in other parts of the game as well:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是一个应用程序的示例，该应用程序要求用户输入昵称，然后在屏幕右上角显示它。这个游戏也可能会将玩家的名字保存在数据库中，并尝试在游戏的其他部分中使用玩家的名字来渲染该字符串：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Script injection](img/B04669_06_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![脚本注入](img/B04669_06_01.jpg)'
- en: For the casual developer, this seems like a rather lovely greeting to a player
    who is getting ready to enjoy your platform game. Provided that the user enters
    an actual name with no HTML characters in it, all will be well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通开发者来说，这似乎是对一个准备享受你的平台游戏的玩家的一个相当可爱的问候。只要用户输入一个没有HTML字符的实际名称，一切都会很好。
- en: However, if the user decides to call himself something like `<script src="img/my-script.js"></script>`
    instead and we don't sanitize that string in order to remove characters that would
    make the string a valid HTML, the application could become compromised.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果用户决定称自己为`<script src="img/my-script.js"></script>`之类的东西，而我们不对该字符串进行消毒以删除使字符串成为有效HTML的字符，应用程序可能会受到损害。
- en: The two possible ways to exploit this vulnerability as a user are to alter the
    client's experience (for example, by entering an HTML string that makes the name
    blink or downloads and plays an arbitrary MP3 file), or to input an HTML string
    that downloads and executes JavaScript files that alter the main game script and
    interacts with the game's server in malicious ways.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用户利用这个漏洞的两种可能方式是改变客户端的体验（例如，输入一个使名称闪烁或下载并播放任意MP3文件的HTML字符串），或者输入一个下载并执行JavaScript文件的HTML字符串，这些文件会以恶意方式改变主游戏脚本并与游戏服务器交互。
- en: 'To make matters worse, if we''re not careful with protecting against other
    vulnerabilities, this security loophole can be exploited in conjunction with other
    vulnerabilities, further compounding the damage that can be done by an evil player:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，如果我们在保护其他漏洞方面不小心，这个安全漏洞可以与其他漏洞一起被利用，进一步加剧邪恶玩家可能造成的损害：
- en: '![Script injection](img/B04669_06_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![脚本注入](img/B04669_06_02.jpg)'
- en: Server validation
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器验证
- en: Depending on how we process and use input from our users on the server, we can
    compromise the server and other assets by trusting the user with unsanitized input.
    However, just making sure that the input is generally valid is not enough.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们如何处理和使用来自用户的输入，我们可能会通过信任未经消毒的输入来危害服务器和其他资产。然而，仅仅确保输入通常有效是不够的。
- en: 'For example, at some point you will tell the server where the player is, how
    fast and in which direction he or she is moving, and possibly which buttons are
    being pressed. In case we need to inform the server about the player''s position,
    we would first verify that the client game has submitted a valid number:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，某个时刻你会告诉服务器玩家在哪里，以多快的速度朝着哪个方向移动，可能还有哪些按钮被按下。如果我们需要告知服务器玩家的位置，我们首先会验证客户端游戏是否提交了一个有效的数字：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we know that the user hasn't hacked the game to send in malicious code
    instead of their actual location vector, we can perform calculations on it and
    update the rest of the game state. Or, can we?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道用户没有黑客攻击游戏，而是发送了实际位置向量，我们可以对其进行计算并更新游戏状态的其余部分。或者，我们可以吗？
- en: If the user sends invalid floats for their position, for example (assuming that
    we're working with floating point numbers in this case), we can simply discard
    the input or perform a specific action in response to their attempt to enter invalid
    values. However, what would we do if the user sends an incorrect location vector?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户发送了无效的浮点数作为他们的位置（假设在这种情况下我们正在使用浮点数），我们可以简单地丢弃输入或对其尝试输入无效值做出特定的响应。但是，如果用户发送了一个不正确的位置向量，我们该怎么办？
- en: 'It could be that the player is moving along from the left side of the screen
    to the right. First, the server receives the player''s coordinates showing where
    the player really is, then the player reports to being slightly further to the
    right and a little closer to a fiery pit. Suppose that the fastest the player
    can possibly move is, say, 5 pixels per frame. Then, how would we know whether
    the player truly did jump over and across the fiery pit in one frame (which is
    an impossible move) or whether the player cheated, if all we know is that the
    player sent a valid vector saying {`x`: `2484`, `y`: `4536`}?'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '可能是玩家从屏幕左侧移动到右侧。首先，服务器接收到玩家的坐标，显示玩家真正的位置，然后玩家报告说自己稍微靠右一点，离一个火坑更近了。假设玩家可能每帧最快移动5像素。那么，如果我们只知道玩家发送了一个有效的向量{`x`:
    `2484`, `y`: `4536`}，我们如何知道玩家是否真的在一个帧内跳过火坑（这是不可能的移动），还是玩家作弊了呢？'
- en: '![Server validation](img/B04669_06_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![服务器验证](img/B04669_06_03.jpg)'
- en: The key principle here is to validate whether the input is valid. Note that
    we're talking about validating and not sanitizing user input although the latter
    is also indispensable and goes hand in hand with the former.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键原则是验证输入是否有效。请注意，我们谈论的是验证而不是清理用户输入，尽管后者也是必不可少的，并且与前者相辅相成。
- en: In its simplest form, one solution to the previous problem with a player reporting
    a fake position is that we could simply keep track of the last reported position
    and compare it to the one that is received next. For a more complex solution,
    we could keep track of the several previous positions and take a look at how the
    player is moving.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于玩家报告虚假位置的先前问题的一个解决方案是，我们可以简单地跟踪上次报告的位置，并将其与下一个接收到的位置进行比较。对于更复杂的解决方案，我们可以跟踪几个先前的位置，并查看玩家的移动方式。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The above class keeps track of the maximum vertical and horizontal displacement
    that a player can possibly have in a frame (or however often the server validates
    a new user position). By associating an instance of it to a specific player, we
    can add new incoming positions as well as check it against the last one received
    to determine whether it's greater than the maximum possible displacement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类跟踪了玩家在一个帧（或者服务器验证新用户位置的频率）中可能具有的最大垂直和水平位移。通过将其与特定玩家的实例相关联，我们可以添加新的传入位置，并检查它是否大于最大可能的位移。
- en: A more complicated case to check for and validate against would be making sure
    that the player does not report potentially expired events or attributes (such
    as temporary power ups, and so on), or invalid input state (for example, the player
    is already in the air, but is suddenly reporting that a jump was initiated).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的情况是检查和验证的一个案例是确保玩家不会报告可能已过期的事件或属性（例如临时增益等），或者无效的输入状态（例如，玩家已经在空中，但突然报告发起了一次跳跃）。
- en: To make matters even more complex, there is another case that we need to be
    aware of, which is very difficult to check. So far, as we've discussed, the solution
    to combat against players trying to manipulate game state is to use the authoritative
    server's power to overrule clients' actions. However, as we will discuss in the
    next section, there's one family of problems that even an authoritative server
    can't really prevent or recover from.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的是，还有另一种情况需要我们注意，这是非常难以检查的。到目前为止，正如我们所讨论的，对抗试图操纵游戏状态的玩家的解决方案是利用权威服务器的力量来否决客户端的操作。然而，正如我们将在下一节讨论的那样，甚至权威服务器也无法真正防止或恢复一类问题。
- en: Artificial intelligence
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人工智能
- en: It is one thing to detect a player who is trying to cheat because the reported
    moves are impossible to make (for example, moving too fast or firing a weapon
    that is not available in a given level in the game). An entirely different thing,
    however, is to try to detect a cheater because he or she is playing too well.
    This is a possible vulnerability that we can face if the vicious player is a bot
    playing perfect games against honest humans who are trying to compete.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 检测玩家试图作弊的一种情况是因为报告的移动是不可能的（例如，移动得太快或者在游戏中某个级别中没有可用的武器）。然而，完全不同的是，试图检测一个作弊者因为他或她玩得太好。如果邪恶的玩家是一个机器人，完美地对抗诚实的人类玩家，这是我们可能面临的一个漏洞。
- en: The solution to this issue is as complex as the problem. Assuming that you want
    to prevent bots from competing against humans, how can you possibly determine
    that a series of inputs are coming from another software instead of a human player?
    Presumably, although every move will be a legal one, the level of accuracy will
    likely be orders of magnitude higher than everyone else's.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的解决方案和问题一样复杂。假设您想要防止机器人与人类竞争，您如何可能确定一系列输入是否来自另一个软件而不是人类玩家？可以假设，尽管每一步都是合法的，但准确度可能会比其他人高出几个数量级。
- en: Unfortunately, implementations in code demonstrating ways to combat this class
    of problems is beyond the scope of this book. In general, you will want to use
    various heuristics to determine whether a series of moves is too perfect.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，本书范围之外的代码实现展示了对抗这类问题的方法，这是本书无法涵盖的。一般来说，您将希望使用各种启发式方法来确定一系列动作是否过于完美。
- en: Building secure games and applications
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建安全的游戏和应用程序
- en: Now that we've discussed some basic things to watch out for, and the things
    you shouldn't perform in your games; we will now take a look at some simple concepts
    that we cannot leave out of the game.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了一些需要注意的基本事项，以及在游戏中不应该执行的事项；我们现在将看一些简单的概念，这些概念是我们不能忽略的。
- en: Again, most of these concepts apply to web development in general, so those
    of you coming from that world would feel right at home.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，大多数概念都适用于网页开发，所以来自那个领域的人会感到如鱼得水。
- en: Authoritative server
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权威服务器
- en: Hopefully, it is clear by now that the key to having trustworthy information
    is to ensure that the source of that information is trustworthy. In our case,
    we rely on the game server to listen to all of the clients and then determine
    what is the truth about the current game state.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现在清楚了，拥有可信赖的信息的关键是确保信息的来源是可信赖的。在我们的情况下，我们依赖游戏服务器来监听所有客户端，然后确定当前游戏状态的真相。
- en: Should you ever find yourself in a situation where you are considering not using
    a server-client model for your multiplayer game in favor of some alternative format,
    one thing you should always keep in mind is that the security like that can be
    obtained by putting an authority between two players. Even if a single player
    decides to manipulate and cheat his or her own game client, the authoritative
    game server can ensure that other players still have an equal and fair experience.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己在考虑不使用服务器-客户端模型来进行多人游戏，而是倾向于某种替代格式，你应该牢记的一件事是，通过在两个玩家之间放置一个权威机构，可以获得这样的安全性。即使单个玩家决定操纵和作弊他或她自己的游戏客户端，权威游戏服务器也可以确保其他玩家仍然拥有公平的游戏体验。
- en: While not every game format calls for an authoritative game server, you should
    have a really good reason for not using one when your specific game could be implemented
    using one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然并非每种游戏格式都需要权威游戏服务器，但当你的特定游戏可以使用权威游戏服务器时，如果你不使用权威游戏服务器，你应该有一个非常好的理由。
- en: Session-based gameplay
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于会话的游戏玩法
- en: One of the benefits of modern browsers is that they feature very powerful JavaScript
    engines that enable us to do so much in the client with straight JavaScript. As
    a result, there is a lot of heavy lifting that we can offload from the server
    to the client.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器的一个好处是它们具有非常强大的JavaScript引擎，使我们能够在客户端使用纯JavaScript做很多事情。因此，我们可以将很多繁重的工作从服务器转移到客户端。
- en: For example, suppose we want to save the current player's game state. This would
    include the player's current position, health, lives, score, etc., as well as
    virtual currency, achievements, and more.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想保存当前玩家的游戏状态。这将包括玩家当前的位置、健康状况、生命、得分等，以及虚拟货币、成就等。
- en: One approach would be to encode all of this information and store it in the
    user's machine. The problem with this is that the user could alter the saved file,
    and we would never know about it. Thus, a common step in this process is to create
    a hash of the final saved file, then later use this same hash to ensure that the
    game's saved file hasn't been altered.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是对所有这些信息进行编码，并将其存储在用户的设备上。这样做的问题是用户可能会更改保存的文件，而我们却不知情。因此，这个过程中的一个常见步骤是创建最终保存文件的哈希值，然后稍后使用相同的哈希值来确保游戏的保存文件没有被更改。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What is the difference between a `hash` and an `encryption`?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “哈希”和“加密”之间有什么区别？
- en: Perhaps, you have heard both the terms being used interchangeably, but they're
    actually very different concepts. While both are often associated with security,
    this is about the only similarity that they share.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经听说过这两个术语可以互换使用，但它们实际上是非常不同的概念。虽然两者都经常与安全性相关联，但这是它们唯一共享的相似之处。
- en: A hash function maps a string of some arbitrary length to a string of some fixed
    length. Given the same input string, the same output hash is always returned.
    The main feature of a hash function is that the mapping is unidirectional, which
    means that the function cannot be reverted in order to get the original input
    from its output.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数将任意长度的字符串映射到某个固定长度的字符串。给定相同的输入字符串，始终返回相同的输出哈希。哈希函数的主要特点是映射是单向的，这意味着无法通过输出来恢复原始输入。
- en: For example, the `Rodrigo Silveira` input string would map to something like
    `73cade4e8326`. Hashing this output string would return something completely different
    from itself or the original input.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`Rodrigo Silveira`输入字符串将映射到类似`73cade4e8326`的内容。对这个输出字符串进行哈希处理将返回与其自身或原始输入完全不同的内容。
- en: Encryption, on the other hand, is a way to convert some input string into a
    different representation of that string, but with the ability to reverse (or undo)
    the function and get back the original input string.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，加密是一种将某个输入字符串转换为该字符串的不同表示的方法，但具有可逆（或撤消）函数的能力，并获得原始输入字符串。
- en: For example, if you use Caesar's cipher (named after the powerful Roman general,
    not the Brazilian soccer player) to encrypt the Rodrigo Silveira string with a
    shift value of 3 (which means that every character in the input text is shifted
    by 3 letters), you'd get the output as `Urguljr Vloyhlud`.—that is, the third
    character after the letter `R`, which is the letter `U`, and so on. If we apply
    a shift value of `-3` to the output string would give us back the original string.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果使用凯撒密码（以强大的罗马将军命名，而不是巴西足球运动员）对Rodrigo Silveira字符串进行加密，使用偏移值3（这意味着输入文本中的每个字符都向后移动3个字母），则输出为`Urguljr
    Vloyhlud`——即`R`之后的第三个字符是`U`，依此类推。如果我们对输出字符串应用偏移值`-3`，将得到原始字符串。
- en: In short, for all practical purposes, a hash cannot be reversed while an encryption
    can.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，就实际目的而言，哈希无法被逆转，而加密可以。
- en: However, if we also store the hash with the client, then all they would need
    to do after altering the game save file is to recalculate the hash, and we'd be
    right back where we started.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们还将哈希值与客户端一起存储，那么在修改游戏保存文件后，他们只需要重新计算哈希值，我们就会回到原点。
- en: A better approach would be to calculate the hash on the server, store the hash
    in the server, and associate it with the player through some user account system.
    This way, if any tampering is done to the locally stored file, the server can
    verify it using the hash to which only it had access.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是在服务器上计算哈希值，将哈希值存储在服务器上，并通过某种用户账户系统与玩家关联起来。这样，如果对本地存储的文件进行任何篡改，服务器可以使用只有它自己访问的哈希来验证它。
- en: There are also cases when you might want to store API keys or other unique objects
    of this nature with the client. Again, the key principle here is that anything
    that touches the client is now under the control of your enemy and cannot be trusted.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些情况，您可能希望将API密钥或其他此类唯一对象存储在客户端。同样，这里的关键原则是，任何接触客户端的东西现在都在您的敌人控制之下，不能信任。
- en: Thus, the main takeaway from this section is to always store keys and other
    sensitive pieces of data like it inside the server and associate and proxy them
    to and for the player through session tokens.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这一部分的主要要点是始终将密钥和其他敏感数据存储在服务器内，并通过会话令牌将其与玩家关联和代理。
- en: Security through obscurity
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过混淆来增加安全性
- en: While obscurity is not a form of security, it does add a layer of complexity
    that slows down the truly determined (and skilled) malicious user and filters
    out most other evil doers who would otherwise attempt to exploit your game.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然混淆不是一种安全形式，但它确实增加了一层复杂性，使真正决心的（和有技能的）恶意用户减慢速度，并过滤掉大多数其他邪恶的人，否则他们会尝试利用你的游戏。
- en: In web development, the most common way to obscure your game is by running your
    final source code through some JavaScript compiler that safely renames variables
    and function names as well as rewrites code in a way that is equivalent to your
    original input code but performs the same tasks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页开发中，混淆游戏的最常见方法是通过将最终源代码通过一些JavaScript编译器运行，安全地重命名变量和函数名称，并以等效于原始输入代码但执行相同任务的方式重写代码。
- en: 'For example, you might have code like the following one, which can be exploited
    very easily by the player by changing the value of some variables using their
    browser''s JavaScript console:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能有以下代码，玩家可以通过更改一些变量的值来轻松利用他们浏览器的JavaScript控制台：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We don't have to look too closely at the previous function to realize that only
    bullets that hit other players in this fictitious game gives damage to each player
    and increase our own score. Thus, writing a function to replace that is trivial
    or at least modifying its important parts to the same end can be just as easy.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必仔细研究以前的函数，就可以意识到在这个虚构的游戏中，只有击中其他玩家的子弹才会对每个玩家造成伤害并增加我们自己的得分。因此，编写一个函数来替换它是微不足道的，或者至少修改其重要部分以达到相同的目的同样容易。
- en: 'Now, running that function through a tool such as Google''s closure compiler
    (to know more on closure compiler, refer to [https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/))
    would output something similar to the following, which is clearly not impossible
    to manipulate but is certainly not as trivial:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过诸如Google的闭包编译器之类的工具运行该函数（要了解有关闭包编译器的更多信息，请参阅[https://developers.google.com/closure/compiler/](https://developers.google.com/closure/compiler/)）将输出类似于以下内容，这显然不可能操纵，但肯定不会那么微不足道：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Most JavaScript obfuscator programs will rename function names, variables, and
    attributes as well as remove unnecessary whitespace, brackets, and semicolons,
    making the output program very compact and hard to read. Some additional benefits
    of using these programs prior to deploying your code include having smaller files
    that you'll end up sending to your clients (thus saving bandwidth), and in the
    case of closure compiler, it rewrites parts of your code so that the output is
    optimal.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数JavaScript混淆器程序将重命名函数名称，变量和属性，并删除不必要的空格，括号和分号，使输出程序非常紧凑且难以阅读。在部署代码之前使用这些程序的一些额外好处包括拥有较小的文件，这样您将最终发送给客户的文件（从而节省带宽），并且在闭包编译器的情况下，它会重写代码的部分，以便输出是最佳的。
- en: The key takeaway from this section is that adding layers of complexity to your
    code makes it that much more secure, and at the very least, helps you to get rid
    of some class of attackers. Much like adding a camera above your front door won't
    necessarily eliminate possible intruders from breaking in, it sure does go a long
    ways in scaring unwelcome visitors.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的主要要点是，向您的代码添加复杂性层使其更加安全，并且至少有助于摆脱某些攻击者。就像在前门上方安装摄像头并不一定能消除潜在的闯入者一样，但它确实在吓唬不受欢迎的访客方面走了很长的路。
- en: '"Remember, however, that obscurity is not security at all. It is trivial to
    deobfuscate an obfuscated JavaScript program (even compiled programs can be easily
    decompiled back into partial source code). You should never rely on obfuscation
    and obscurity alone as a solid form of security. Obfuscating your deployed application
    should be a final touch to an already secure system, especially considering the
    major benefits of obfuscation, as mentioned previously.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “然而，请记住，混淆根本不是安全。对混淆的JavaScript程序进行反混淆是微不足道的（即使编译的程序也可以轻松地反编译为部分源代码）。您永远不应该仅依赖混淆和模糊作为一种可靠的安全形式。混淆您的部署应用程序应该是已经安全系统的最后一步，特别是考虑到混淆的主要好处，如前面所述。
- en: Reinventing the wheel
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复造轮子
- en: Like most problems in computer science, someone has already found a solution
    and converted it into code. In this regard, we have been particularly benefited
    by so many generous (and very smart) programmers who distribute their solutions
    through open source projects.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 像计算机科学中的大多数问题一样，有人已经找到了解决方案并将其转换为代码。在这方面，我们特别受益于许多慷慨（而非常聪明）的程序员，他们通过开源项目分发他们的解决方案。
- en: In this section, I invite you to look for existing solutions instead of taking
    the time to write your own. Although coding complex solutions to interesting problems
    is always fun (unless, maybe, your boss is pressing you about an upcoming deadline),
    you may find that your efforts are better invested in making your actual game.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我邀请您寻找现有的解决方案，而不是花时间编写自己的解决方案。尽管编写有趣问题的复杂解决方案总是很有趣（除非，也许，你的老板正在催促你赶上即将到来的截止日期），但您可能会发现，您的努力更好地投资于制作您的实际游戏。
- en: As we've discussed in [Chapter 2](ch02.html "Chapter 2. Setting Up the Environment"),
    *Setting Up the Environment*, having access to the Node.js ecosystem gives you
    a lot of leverage to find, use, and eventually share great tools for many problems
    that you may come across when you develop your games.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.html "第2章。设置环境")中讨论的*设置环境*，拥有Node.js生态系统的访问权限可以让您在开发游戏时遇到的许多问题找到、使用并最终分享很多有用的工具。
- en: In sticking with the theme of security and fair play, what follows is a list
    of common tools that we can use through **Npm** and **Bower** (as well as **Grunt**
    and **Gulp**) to help us deal with security in our games.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循安全和公平竞争的主题，接下来是一个常见工具列表，我们可以通过**Npm**和**Bower**（以及**Grunt**和**Gulp**）来帮助我们处理游戏中的安全性。
- en: Npm install validator
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Npm安装验证器
- en: 'This module allows you to validate and sanitize data very effortlessly. You
    can use validator on the server as well as in the browser. Simply require the
    module in and call its various methods on your input:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块可以让您非常轻松地验证和消毒数据。您可以在服务器上以及在浏览器中使用验证器。只需将模块引入并在输入上调用其各种方法：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are methods for checking just about any type of data or format as well
    as to sanitize data so that you don't have to write your own functions for it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方法可以检查几乎任何类型的数据或格式，以及对数据进行消毒，这样您就不必为此编写自己的函数。
- en: Npm install js-sha512
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Npm安装js-sha512
- en: 'This simple module is used to hash strings using a variety of algorithms. To
    use the library as a standalone library in the browser, you can also import it
    using Bower:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的模块用于使用各种算法对字符串进行哈希处理。要在浏览器中将库作为独立库使用，您还可以使用Bower导入它：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To use `js-sha512`, simply `require` it to the desired hashing function and
    send it the string to be hashed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`js-sha512`，只需将其`require`到所需的哈希函数，并将字符串发送给它进行哈希处理：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Npm install closure compiler
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Npm安装闭包编译器
- en: 'As mentioned previously, Google''s closure compiler is a very powerful software
    that was open-sourced several years ago. The benefits that can be gained by using
    the compiler extend far beyond simply wanting to obfuscate code. For example,
    the compiler allows you to annotate your JavaScript code with data types, which
    the compiler can then look at and tell you whether a variable violates that contract:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前提到的，谷歌的闭包编译器是一个非常强大的软件，几年前就已经开源。使用编译器可以获得的好处远远超出了简单地想要混淆代码。例如，编译器允许您使用数据类型注释您的JavaScript代码，然后编译器可以查看并告诉您变量是否违反了该合同：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the given sample code , you will note that the `Player` and `Sprite` constructor
    functions are annotated with the `@constructor` annotation. When the closure compiler
    sees the code calling these functions without a new operator, it will deduce that
    the code is being exercised in a way different from how it was intended and raise
    a compilation error so that you can fix the bad code. In addition, if you attempt
    to instantiate a `Player`, for example, and the value sent to the constructor
    is not a pair of numbers followed by an instance of the `Sprite` class, the compiler
    will bring this to your attention so that your code can be corrected.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的示例代码中，您会注意到`Player`和`Sprite`构造函数被注释为`@constructor`。当闭包编译器看到调用这些函数的代码没有使用new运算符时，它会推断代码的执行方式与预期不同，并引发编译错误，以便您可以修复错误的代码。此外，如果尝试实例化`Player`，例如，发送到构造函数的值不是一对数字，后跟`Sprite`类的实例，编译器将提醒您，以便您的代码可以得到纠正。
- en: 'The easiest way to use the closure compiler is to lean on Grunt or Gulp and
    install the equivalent build task for closure. The popular solutions are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用闭包编译器的最简单方法是依赖Grunt或Gulp，并安装闭包的等效构建任务。流行的解决方案如下：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Fair play and the user experience
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公平竞争和用户体验
- en: So far in this chapter, we have discussed many different aspects of security,
    all of which were aimed at providing fair play to your users. Although we can
    do the best we can to secure our servers, intellectual property, user data, and
    other players, at the end of the day, the attacker will always be at an advantage.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经讨论了安全性的许多不同方面，所有这些都旨在为用户提供公平竞争。尽管我们可以尽力保护我们的服务器、知识产权、用户数据和其他玩家，但归根结底，攻击者总是处于优势地位。
- en: Especially in multiplayer games, where dozens, if not hundreds or thousands
    of different players will be enjoying your game at the same time, you may come
    to a point where attempting to secure a player against himself is not a good investment
    of time or other resources. For example, if an isolated player wishes to cheat
    his or her way into jumping higher than the game allows or change a save game
    in order to reflect extra lives, then you may be better off just letting that
    player proceed with the hack on his or her own client. Just be absolutely sure
    that none of the other players are affected by it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在多人游戏中，数十、甚至数百或数千名不同的玩家将同时享受您的游戏，您可能会到达一个点，尝试保护玩家免受自己的侵害不是一个明智的时间或其他资源投资。例如，如果一个孤立的玩家希望通过作弊的方式跳得比游戏允许的更高，或者更改保存游戏以反映额外的生命，那么您最好只让该玩家在自己的客户端上继续进行黑客攻击。只要确保其他玩家不受影响。
- en: The key takeaway from this section as well as from the entire chapter is that
    user experience is the king. Even more so when multiple players are sharing a
    game world looking for a fun time and one of these players is only looking for
    a way to ruin it for everyone; you must make sure that no matter what happens,
    the other players can continue to play.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从本节以及整个章节中的关键要点是用户体验至关重要。尤其是当多个玩家共享游戏世界寻找快乐时，其中一个玩家只是想找到一种破坏其他人快乐的方式；您必须确保无论发生什么，其他玩家都可以继续游戏。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this chapter, we wrapped up the discussion on multiplayer game development
    although it covers a topic that must be a deep part of your game development from
    the beginning. Remember that security cannot simply be added at the end of the
    project; instead, it must be built in deliberately with the rest of the software.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们结束了关于多人游戏开发的讨论，尽管它涵盖了一个必须从一开始就深入了解的主题。请记住，安全性不能简单地在项目结束时添加；相反，它必须与软件的其余部分一起有意识地构建。
- en: We saw some of the most basic security vulnerabilities in browser-based games
    as well as common ways to protect your games against them. We also talked about
    a few techniques that no serious game should be built without. Finally, we looked
    at how to implement some of these techniques using existing open source tools
    through Node's Npm.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了基于浏览器的游戏中一些最基本的安全漏洞，以及保护游戏免受这些漏洞的常见方法。我们还讨论了一些任何严肃的游戏都不应该缺少的技术。最后，我们看了如何使用现有的开源工具通过Node的Npm来实现这些技术。
- en: In conclusion, now that you have cleared the last level of this journey of learning
    the basics of multiplayer game development in JavaScript, I want you to know that
    as exciting as this might have been, your journey is not quite over yet. *Thank
    you for reading, but the princess is in another castle!* You must now get busy
    with writing the next multiplayer game that will take all players through a journey
    full of fun, entertainment, and real-time awesomeness. Game over!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，现在你已经完成了学习JavaScript多人游戏开发基础的旅程的最后一关，我想让你知道，尽管这可能很令人兴奋，但你的旅程还没有结束。*谢谢你的阅读，但公主在另一个城堡里！*
    现在你必须忙于编写下一个多人游戏，让所有玩家经历充满乐趣、娱乐和实时精彩的旅程。游戏结束！
