- en: Learning CSS3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习CSS3
- en: '**Cascading Style Sheet** (**CSS**) lets you control the style of the HTML
    content, change the colors, font, layout, and more. It''s fairly easy to understand,
    and, in this chapter, we''re going to tackle the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**层叠样式表**（**CSS**）允许您控制HTML内容的样式，更改颜色、字体、布局等。它相当容易理解，在本章中，我们将解决以下主题：'
- en: Ways of using CSS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS的方法
- en: CSS formatting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS格式
- en: Parent and child elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父元素和子元素
- en: Classes and IDs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和ID
- en: CSS box model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS框模型
- en: CSS layout and divider
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS布局和分隔符
- en: The different ways to use CSS
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS的不同方法
- en: 'There are three ways to use CSS:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种使用CSS的方法：
- en: 'Inside an HTML tag with a `style` attribute (this method is not recommended,
    but you can still use it a little bit):'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在具有`style`属性的HTML标签内（这种方法不推荐，但您仍然可以稍微使用）：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Inside our `<head>` section in an HTML document with the tag `<style>`:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在具有`<style>`标签的HTML文档的`<head>`部分内：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'CSS code can also be put into an external file, linked to the HTML document
    with the tag `<link>`. The file extension will be saved as a `.css` file:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS代码也可以放入外部文件中，并使用`<link>`标签链接到HTML文档。文件扩展名将保存为`.css`文件：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For this example, we will use the second option, but we'll learn the third option
    when we start building our own website.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，我们将使用第二个选项，但是当我们开始构建自己的网站时，我们将学习第三个选项。
- en: 'Let''s start by adding the `<style>` tag in our `<head>` section:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在`<head>`部分中添加`<style>`标签开始：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: CSS formatting
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS格式
- en: We're now ready to put in our CSS, so how's the formatting in CSS?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好放入我们的CSS，那么CSS的格式如何？
- en: 'CSS is pretty simple to understand:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CSS很简单理解：
- en: '**The selector**: This is where you choose which HTML elements you want to
    add style to. In this example, we select all the `<h1>` elements.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：这是您选择要添加样式的HTML元素的位置。在此示例中，我们选择所有`<h1>`元素。'
- en: '**Curly bracket**: All styles inside these will apply to the HTML elements
    chosen by the selector'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大括号**：这些括号内的所有样式将应用于选择器选择的HTML元素'
- en: '**Property**: A property controls one aspect of an HTML element''s style, such
    as text-align, color, width, background, and so on.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：属性控制HTML元素样式的一个方面，例如text-align、color、width、background等。'
- en: '**Value**: The value goes to the property. In this case, the text-align value
    could be left, right, center, or justify.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：值传递给属性。在这种情况下，text-align的值可以是left、right、center或justify。'
- en: '**Semicolon**: It is mandatory to apply it at the end of a property.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分号**：在属性的末尾应用它是强制性的。'
- en: You can have multiple styles in the same `<style>` tag. Let's center all the
    `h1` and `p` tags.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在同一个`<style>`标签中拥有多个样式。让我们居中所有`h1`和`p`标签。
- en: 'You should have the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有以下内容：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parent and child elements
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 父元素和子元素
- en: 'What if you want to center all the texts and not just the `<h1>` and `<p>`?
    There is a simple way to achieve that. You have to understand the parent and child
    element. Basically, if you style a parent element, all the child elements will
    have the same styling, unless you specify a specific style for the child element.
    The following is our example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要居中所有文本而不仅仅是`<h1>`和`<p>`？有一种简单的方法可以实现。您必须了解父元素和子元素。基本上，如果您为父元素设置样式，则所有子元素将具有相同的样式，除非您为子元素指定特定样式。以下是我们的示例：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `<body>` tag is the parent of every element that is inside it, which includes
    the `<h1>`, `<p>`, `<input>`, `<img>`, and `<a>` elements.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`<body>`标签是其中包含的每个元素的父元素，其中包括`<h1>`、`<p>`、`<input>`、`<img>`和`<a>`元素。'
- en: 'Let''s remove the previous style and style the `<body>` element with `text-align:
    center;`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们删除以前的样式，并使用`text-align: center;`样式`<body>`元素：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s save the HTML document and reload the page in Chrome. Note that every
    element has the property `text-align: center;`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们保存HTML文档并在Chrome中重新加载页面。请注意，每个元素都具有属性`text-align: center;`。'
- en: Classes and IDs
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和ID
- en: 'We saw how to select HTML tags with CSS, but, most of the time, you''ll have
    multiple identical HTML tags, such as `<p>` or `<a>`. How do we differentiate
    them so we can only select and style a specific one? Here come the classes and
    IDs. They''re used to select a specific HTML tag you have put an attribute `id`
    or `class`, for example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何使用CSS选择HTML标签，但是大多数情况下，您将拥有多个相同的HTML标签，例如`<p>`或`<a>`。我们如何区分它们，以便只选择和设置特定的样式？这就是类和ID的作用。它们用于选择您已经放置了`id`或`class`属性的特定HTML标签，例如：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To select this ID `header` in CSS, we''ll need to write a hash (`#`) character,
    followed by the ID of the element, in this case, `header`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要在CSS中选择此ID `header`，我们需要写一个井号（`#`）字符，后面跟着元素的ID，在本例中是`header`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To select a class, we''ll need to write a period (`.`) character, followed
    by the name of the class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择类，我们需要写一个句点（`.`）字符，后面跟着类的名称：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So what is the difference between IDs and classes? The only difference is that
    IDs can be used only once in an HTML document, while Classes can be used multiple
    times. We also need to know the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么ID和类之间有什么区别？唯一的区别是ID在HTML文档中只能使用一次，而类可以多次使用。我们还需要知道以下内容：
- en: '**For IDs:**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于ID：**'
- en: Each element can have only one ID
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个元素只能有一个ID
- en: Each page can have only one element with that ID
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个页面只能有一个具有该ID的元素
- en: '**For classes:**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于类：**'
- en: You can use the same class on multiple elements
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在多个元素上使用相同的类
- en: You can use multiple classes on the same element
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在同一个元素上使用多个类
- en: 'We can, for example, have the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以有以下内容：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Which means that the `<div>` element has an ID `header` and the classes `big`,
    `red`, and `blue`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`<div>`元素具有ID `header` 和类 `big`、`red` 和 `blue`。
- en: 'Let''s add some classes and IDs into our document now:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在文档中添加一些类和ID：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, I added some really simple IDs and classes so you can understand
    how it works. We'll go into detail about the best practices when it comes to using
    IDs and classes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我添加了一些非常简单的ID和类，以便您了解它是如何工作的。当涉及到使用ID和类的最佳实践时，我们将详细介绍。
- en: 'Now that we have our IDs and classes, let''s add some style to our CSS. For
    that, let''s select our first ID, `my-name`, and make it bigger and underlined.
    For that, we will use the CSS properties `font-size` and `text-decoration`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的ID和类，让我们为我们的CSS添加一些样式。 为此，让我们选择我们的第一个ID`my-name`，并使其更大和带下划线。 为此，我们将使用CSS属性`font-size`和`text-decoration`：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s style some classes now. For this example, let''s add another `<p>` tag
    on our HTML document, just before our link, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来设置一些类。 例如，让我们在我们的HTML文档中添加另一个`<p>`标签，就在我们的链接之前，如下所示：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that we have two elements with the same class, let''s see what happens
    when we want to style the class `text` by adding a `font-family` property:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个具有相同类的元素，让我们看看当我们想要通过添加`font-family`属性来样式化类`text`时会发生什么：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save your HTML document and refresh your browser. This is what you should see:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的HTML文档并刷新您的浏览器。 这是您应该看到的：
- en: '![](img/99bbee69-1a09-4146-ae89-4e65e2da8577.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99bbee69-1a09-4146-ae89-4e65e2da8577.png)'
- en: This should change the font of the elements with the class `text`. You can see
    that both elements have changed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该改变具有类`text`的元素的字体。 您可以看到两个元素都已更改。
- en: CSS box model
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS框模型
- en: All HTML elements can be seen as boxes. A CSS box model allows us to define
    the spaces between elements. Whether you want to add a border, set a margin, or add
    paddings between elements, you'll need to understand the box model. Understanding
    this part will help you a lot when implementing your design.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所有HTML元素都可以看作是框。 CSS框模型允许我们定义元素之间的空间。 无论您想要添加边框、设置边距还是在元素之间添加填充，您都需要了解框模型。 在实施设计时，了解这一部分将对您有很大帮助。
- en: The boxes
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒子
- en: 'The box model consists of four properties:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 框模型由四个属性组成：
- en: '**Content**: The text, images, and so on'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容**：文本、图像等'
- en: '**Padding**: A transparent area around the content, inside the box'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充**：内容周围的透明区域，位于框内'
- en: '**Margin**: The space between the boxes'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边距**：盒子之间的空间'
- en: '**Border**: This goes around the padding and the content'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边框**：围绕填充和内容'
- en: 'Have a look at following diagram for a better understanding:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图表，以便更好地理解：
- en: '![](img/aee4c299-0b14-4ac8-b2c8-f1e47aefeaff.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aee4c299-0b14-4ac8-b2c8-f1e47aefeaff.png)'
- en: A CSS box model can be described as shown in the preceding diagram.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: CSS框模型可以如前图所示描述。
- en: 'Box models can also let us set the height and the width of an element. By setting
    the width or the height of the content with the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 框模型还可以让我们设置元素的高度和宽度。 通过以下设置内容的宽度或高度：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The width of the content will be `200px`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 内容的宽度将为`200px`。
- en: 'Now, the annoying thing about the standard box-model is that you can only set
    the width and the height of the content, and not in the entire box itself, which
    means the padding, margin, and border will be added to the width and height we
    specified. Which is quite annoying:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，标准框模型的讨厌之处在于，您只能设置内容的宽度和高度，而不能设置整个框本身的宽度和高度，这意味着填充、边距和边框将添加到我们指定的宽度和高度中。
    这相当让人讨厌：
- en: '![](img/4823925c-1284-49ce-82bb-1637090149e6.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4823925c-1284-49ce-82bb-1637090149e6.png)'
- en: Box Sizing with the property content-box
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性content-box的框模型
- en: 'Fortunately, we can counter this by using the `box-sizing ` property:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以通过使用`box-sizing`属性来抵消这一点：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By setting `box-sizing` to `border-box`, we will now set the width and height
    of the entire box:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`box-sizing`设置为`border-box`，我们现在将设置整个框的宽度和高度：
- en: '![](img/0287cf02-8112-4755-a854-6fa32121f4ab.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0287cf02-8112-4755-a854-6fa32121f4ab.png)'
- en: Box Sizing with the property border-box
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性border-box的框模型
- en: Block and inline
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块和内联
- en: There is one last thing about box models. In HTML, there is what we call block
    elements and inline elements.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 关于框模型还有最后一件事。 在HTML中，有我们所谓的块级元素和内联元素。
- en: '**Block elements**: It uses the full width of the browser and always starts
    on a new line. You can see them as blocks you need to pile one after another.
    Headings and paragraphs are some examples of block elements.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**块级元素**：它使用浏览器的整个宽度，并始终从新行开始。 您可以将它们视为需要一个接一个地堆叠的块。 标题和段落是块级元素的一些示例。'
- en: 'Examples of block-level elements:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 块级元素的示例：
- en: '`<div>`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div>`'
- en: '`<h1> - <h6>`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1> - <h6>`'
- en: '`<p>`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p>`'
- en: '`<form>`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<form>`'
- en: '![](img/7fe727ed-87c1-4b62-8889-194ea32e1d13.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fe727ed-87c1-4b62-8889-194ea32e1d13.png)'
- en: Block elements are represented in red boxes
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 块级元素用红色框表示
- en: '**Inline elements**: Inline elements don''t start on a new line and only take
    up as much width as necessary. Look at this example of the blue elements:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**内联元素**：内联元素不会从新行开始，只会占据必要的宽度。 看一下蓝色元素的示例：'
- en: '![](img/64816021-55cf-4e95-878c-8fc6d9aeb1d4.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64816021-55cf-4e95-878c-8fc6d9aeb1d4.png)'
- en: Inline elements are represented in blue boxes
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 内联元素用蓝色框表示
- en: 'The following are examples of inline elements:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是内联元素的示例：
- en: '`<span>`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<span>`'
- en: '`<a>`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<a>`'
- en: '`<img>`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<img>`'
- en: CSS layout and dividers
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS布局和分隔符
- en: 'Now that we understand how the box model works, we can try to build a simple
    layout for our HTML page, as shown in the following diagram:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了框模型的工作原理，我们可以尝试为我们的HTML页面构建一个简单的布局，如下图所示：
- en: '![](img/98e5d3ff-bc29-4e2d-8926-6e7252a5070c.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98e5d3ff-bc29-4e2d-8926-6e7252a5070c.png)'
- en: Our layout will have a container with a sidebar on the right, and at the bottom
    a footer. A very basic layout for a lot of websites.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的布局将有一个带有右侧边栏的容器，并在底部有一个页脚。 这是许多网站的非常基本的布局。
- en: This layout will be inside a container that will be centered on the page. Without
    further ado, let's get started!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此布局将位于一个容器内，该容器将居中于页面。 没有多余的话，让我们开始吧！
- en: The basic layout
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本布局
- en: To create our basic layout, we will use the `<div>` element. The `<div>` element
    is the most commonly used HTML element. `<div>` stands for divide, and we simply
    use it to divide our page into sections by creating boxes where we put our contents.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的基本布局，我们将使用`<div>`元素。 `<div>`元素是最常用的HTML元素。 `<div>`代表分割，我们只是用它来通过创建放置内容的框来将我们的页面分成部分。
- en: Let's clear our CSS in your `<style>` section and start from scratch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`<style>`部分清除我们的CSS，从头开始。
- en: 'We''ll start first by adding a `<div>` element to wrap all the content we''ve
    created, and then add a class `container` to it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先添加一个`<div>`元素来包装我们创建的所有内容，然后给它添加一个类`container`：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Formatting and indenting your HTML
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化和缩进您的HTML
- en: 'You can see in my HTML document that my code is indented. Code indentation
    applies to every language and makes it easier to read and to structure. The basic
    way of indenting is using the *Tab* key to move the content one step to the right:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我的HTML文档中看到我的代码是缩进的。代码缩进适用于每种语言，使其更易于阅读和结构化。缩进的基本方法是使用*Tab*键将内容向右移动一步：
- en: '![](img/f4cc43ae-dd2e-4ce9-9ebb-639032fd7a72.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4cc43ae-dd2e-4ce9-9ebb-639032fd7a72.png)'
- en: This is a basic structure and indentation that you should have.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您应该具有的基本结构和缩进。
- en: Styling our class
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化我们的类
- en: 'Let''s start by styling on the `container` class that we''ve just created.
    For this, let''s go to our `<style>` section and add the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先对我们刚刚创建的`container`类进行样式化。为此，让我们转到我们的`<style>`部分并添加以下内容：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will set the `width` property to the `<div>` with the class `container`
    to `960px`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`width`属性设置为具有类`container`的`<div>`为`960px`。
- en: 'We want our container to be centered on the page. To do that, we need to add
    a `margin` property, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的容器居中显示在页面上。为了做到这一点，我们需要添加`margin`属性，如下所示：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Adding `margin-left: auto;` and `margin-right: auto;` means that the left and
    right margin are adjusted automatically according to the context of the element,
    which is the browser window in this case:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '添加`margin-left: auto;`和`margin-right: auto;`意味着左右边距会根据元素的上下文（在这种情况下是浏览器窗口）自动调整：'
- en: '![](img/21a73c75-1f74-4283-90c4-24965d6a6344.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21a73c75-1f74-4283-90c4-24965d6a6344.png)'
- en: There are a lot of ways to center an element with CSS; this is the first one.
    We'll check out a couple of other ways in the upcoming chapters.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种方法可以使用CSS来使元素居中；这是第一种方法。我们将在接下来的章节中了解其他几种方法。
- en: Now let's create our `content` element as defined in the layout we want to do.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按照我们想要的布局创建我们的`content`元素。
- en: 'Inside our `<div class = "container">`, let''s add our `<div class = "content">`.
    Again, let''s move our content inside this `div`, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`<div class = "container">`内部，让我们添加我们的`<div class = "content">`。同样，让我们将我们的内容移动到这个`div`中，如下所示：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next, let's add our `sidebar`. After our `<div class= "content">`, add a `div`
    with the class `sidebar`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加我们的`sidebar`。在我们的`<div class= "content">`之后，添加一个带有类`sidebar`的`div`。
- en: 'Inside our `sidebar`, add a `<p>` element to create some content:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`sidebar`内部，添加一个`<p>`元素来创建一些内容：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can find some dummy text by going to the website [https://www.lipsum.com/](https://www.lipsum.com/).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问网站[https://www.lipsum.com/](https://www.lipsum.com/)找到一些虚拟文本。
- en: 'Lastly, let''s add our `footer` element after our `sidebar` element:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在`sidebar`元素之后添加我们的`footer`元素：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our HTML document should now look as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的HTML文档现在应该如下所示：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, for the purpose of this lesson, let''s add some background color to each
    element to see how the layouts work. To do this, let''s go to our style section
    and add a `background-color` property for each class, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，出于本课程的目的，让我们为每个元素添加一些背景颜色，以查看布局的工作原理。为此，让我们转到我们的样式部分，并为每个类添加`background-color`属性，如下所示：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we will save our HTML document and refresh our browser to see how it looks:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将保存我们的HTML文档并刷新我们的浏览器以查看它的外观：
- en: '![](img/1b25bc05-d0e6-49a4-b93d-a72a6ebc74c3.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b25bc05-d0e6-49a4-b93d-a72a6ebc74c3.png)'
- en: Our web page is pretty ugly, but it does show how the layout is put together.
    Let's add a few more CSS properties to make it look the way we want it to look.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网页看起来很丑，但它确实展示了布局是如何组合在一起的。让我们添加一些CSS属性，使其看起来符合我们的期望。
- en: 'We want the `.content` element to be `75%` of the total width (960px), and
    the sidebar to be `25%`. We could do some maths and calculate `75%` of 960, but,
    in CSS, you can also set the `width` by percentages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`.content`元素占总宽度（960px）的`75%`，而侧边栏占`25%`。我们可以进行一些数学计算，计算960的`75%`，但是在CSS中，您也可以按百分比设置`width`：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we will save our HTML document and refresh our browser to see how it looks:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将保存我们的HTML文档并刷新我们的浏览器以查看它的外观：
- en: '![](img/2f2c0dbb-2245-470c-ac25-1d64bccd7683.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f2c0dbb-2245-470c-ac25-1d64bccd7683.png)'
- en: 'As you can see, our elements have their width properties of `75%` and `25%`.
    Now to move our `sidebar` next to the content, we''ll need to use the CSS property
    called `float`. With `float`, an element can be pushed to the left or to the right,
    allowing other elements to wrap around it. So let''s do that:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的元素的宽度属性为`75%`和`25%`。现在，为了将我们的`sidebar`移到内容旁边，我们需要使用名为`float`的CSS属性。使用`float`，元素可以被推到左侧或右侧，从而允许其他元素围绕它包裹。所以让我们这样做：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s save our HTML document and refresh our browser to see how it looks:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存我们的HTML文档并刷新我们的浏览器以查看它的外观：
- en: '![](img/6ca44f34-c5ac-4bd0-91f6-14139b76d741.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ca44f34-c5ac-4bd0-91f6-14139b76d741.png)'
- en: 'Our content and `sidebar` are now side by side, but the problem is that our
    `footer` is on the right side, as it has the property `float` right from the `sidebar`.
    To avoid this, we need to use the `clear` property, which counterparts the `float`
    property. We''ll set the property to both, which means right and left:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的内容和`sidebar`现在并排显示，但问题是我们的`footer`在右侧，因为它具有来自`sidebar`的`float`右侧的属性。为了避免这种情况，我们需要使用`clear`属性，它与`float`属性相对应。我们将属性设置为both，这意味着右侧和左侧：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Save and refresh the document.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并刷新文档。
- en: '![](img/ac60a70b-5f3c-40ca-bc0d-e55b5554e891.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac60a70b-5f3c-40ca-bc0d-e55b5554e891.png)'
- en: We now have our layout fully coded with CSS.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完全使用CSS编写了我们的布局。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We finally have our layout now. Again, this lesson wasn't about doing something
    pretty, it was to help you understand how to properly lay out a page with CSS.
    In the next chapter, we're going to delve deeper into HTML and CSS by creating
    and styling our website—how exciting!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在终于有了我们的布局。再次强调，本课程不是为了做出漂亮的东西，而是为了帮助您了解如何正确使用CSS布局页面。在下一章中，我们将深入研究HTML和CSS，通过创建和设计我们的网站来学习—多么令人兴奋！
