- en: Making Our Website Responsive
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使我们的网站响应
- en: In [Chapter 4](e6d6711e-b61a-421f-b883-5a1d4f2da13b.xhtml), *Responsive Versus
    Adaptive Design*, you learned the difference between responsive design and adaptive
    design. The first one is a lot easier to implement, and the latter is targeted
    to the end user.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](e6d6711e-b61a-421f-b883-5a1d4f2da13b.xhtml)中，*响应式与自适应设计*，您学习了响应式设计和自适应设计之间的区别。前者更容易实现，后者则针对最终用户。
- en: 'This chapter will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: What are media queries?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是媒体查询？
- en: Opening the browser inspector
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开浏览器检查器
- en: The difference between desktop first and mobile first
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面优先和移动优先之间的区别
- en: Introducing to jQuery
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery介绍
- en: How to make our website responsive for every device and screen size
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使我们的网站对每种设备和屏幕尺寸都响应
- en: What are media queries?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是媒体查询？
- en: 'Responsive design can be accomplished using *media queries*. How does this
    work? Think of media queries as a condition that you apply to your CSS. You tell
    the browser to add or remove certain CSS rules depending on the device or viewport
    size:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用*媒体查询*来实现响应式设计。这是如何工作的？将媒体查询视为您应用于CSS的条件。您告诉浏览器根据设备或视口大小添加或删除某些CSS规则：
- en: '![](img/429e400e-7261-464c-914b-6cdcc944a6f3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/429e400e-7261-464c-914b-6cdcc944a6f3.png)'
- en: 'To apply those rules, we will need to use the CSS property `@media`, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用这些规则，我们需要使用CSS属性`@media`，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`@media only screen and (max-width: 400px)` means that if the screen/viewport
    size is fewer than or equal to `400px`, then we apply this CSS.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`@media only screen and (max-width: 400px)` 意味着如果屏幕/视口尺寸小于或等于 `400px`，那么我们将应用这个CSS。'
- en: There are a few different types of properties you can add to media and target
    a different type of device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向媒体添加几种不同类型的属性，并针对不同类型的设备进行定位。
- en: 'For example, you can target especially the iPhone 4 with the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用以下代码专门针对iPhone 4：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This translates as the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这翻译为以下内容：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code means any devices with a size greater than or equal to `320px`
    and fewer than or equal to `480px`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码意味着任何尺寸大于或等于 `320px` 且小于或等于 `480px` 的设备：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following code targets any device with the pixel ratio or density of `2`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码针对像素比或密度为 `2` 的任何设备：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code will target only devices with a `portrait` orientation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将仅针对`纵向`方向的设备。
- en: Now that we have covered the basics of media queries, let's put this into practice
    with our project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了媒体查询的基础知识，让我们在项目中实践一下。
- en: Opening the inspector
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开检查器
- en: 'First, to be able to test our website''s responsiveness, there is a tool available
    in Chrome that is very useful. To access it, you can go to View | Developer |
    Developer Tools:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了能够测试我们网站的响应性，Chrome中有一个非常有用的工具。要访问它，您可以转到查看 | 开发者 | 开发者工具：
- en: '![](img/1a60e5f4-fb73-49a9-b40d-adee1c0df322.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a60e5f4-fb73-49a9-b40d-adee1c0df322.png)'
- en: To use this tool, click on the second icon on the top left
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此工具，请单击左上角的第二个图标
- en: 'Now, you can select any device you want to test with, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以选择任何您想要测试的设备，如下：
- en: '![](img/58370053-48ff-475d-bbd7-2a53e5f4371d.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58370053-48ff-475d-bbd7-2a53e5f4371d.png)'
- en: 'You can also see that the code of the entire page is displayed on the right-hand
    side:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以看到整个页面的代码显示在右侧：
- en: '![](img/13208aeb-fbcf-4c26-b892-93c3c37dcb26.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13208aeb-fbcf-4c26-b892-93c3c37dcb26.png)'
- en: The Google Chrome Inspector
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌Chrome检查器
- en: This is very useful, because it allows you to try different CSS properties before
    putting in your code or to check whether your CSS works. You can have a quick
    try and play around with it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为它允许您在放入代码之前尝试不同的CSS属性，或者检查您的CSS是否有效。您可以快速尝试并进行调整。
- en: Desktop first
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 桌面优先
- en: Depending on the design process you started with, but in general, you would
    start with the desktop design, and lower down to mobile. If you started your design
    with a mobile-first process, you'll have to start on a mobile and then upgrade
    to the desktop.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您开始的设计过程，但一般来说，您会从桌面设计开始，然后逐渐降低到移动端。如果您从移动优先的过程开始设计，您将需要从移动端开始，然后升级到桌面端。
- en: So, the initial CSS is for desktop, so what we have to consider now is what
    conditions we want to apply to the CSS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，初始CSS是为桌面设计的，现在我们要考虑的是要应用到CSS的条件。
- en: 'The devices we want to target are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要针对的设备如下：
- en: Desktop (by default)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桌面（默认）
- en: Tablet (viewport size fewer than or equal to 1,024px)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平板电脑（视口尺寸小于或等于1,024px）
- en: Large mobile  (viewport size fewer than or equal to 768px)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型移动设备（视口尺寸小于或等于768px）
- en: Small mobile  (viewport size fewer than or equal to 400px)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小型移动设备（视口尺寸小于或等于400px）
- en: This is an example of how you can separate the different breakpoints. You can
    definitely change it according to your needs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个如何分隔不同断点的示例。您可以根据需要进行更改。
- en: 'So, this is how it looks in CSS:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在CSS中看起来是这样的：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we have our breakpoint ready, let's start making our website responsive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了我们的断点，让我们开始使我们的网站响应。
- en: Designing the menu
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计菜单
- en: 'In this section, we will take a look at how to hide the desktop menu and show
    a hamburger icon instead when working on mobiles or tablets:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何在移动设备或平板电脑上隐藏桌面菜单，而在移动设备或平板电脑上显示汉堡图标：
- en: '![](img/62d40581-5efd-43fc-b1fc-8a368200bfa1.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62d40581-5efd-43fc-b1fc-8a368200bfa1.png)'
- en: The design of the mobile view
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 移动视图的设计
- en: 'If we click on the icon, a menu opens on the right-hand side:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们单击该图标，菜单将在右侧打开：
- en: '![](img/d0895659-0031-43cc-ac0e-404c099c9998.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0895659-0031-43cc-ac0e-404c099c9998.png)'
- en: Menu opened on mobile
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上打开的菜单
- en: To do that, we will first need to hide the menu on the mobile version and the
    tablet  version.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们首先需要在移动版本和平板版本上隐藏菜单。
- en: 'At the end of the `header` section in our CSS, add the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CSS的`header`部分末尾，添加以下代码：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we want to show the `hamburger-menu` on mobile. We will need to create
    a `div` tag in HTML and show it only on a mobile, with CSS:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想在移动设备上显示`汉堡菜单`。我们需要在HTML中创建一个`div`标签，并且只在移动设备上显示它，使用CSS：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will place this just before the ending of our header tag `</header>`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个放在我们的头部标签`</header>`的结束之前。
- en: 'In CSS, we will need to hide  the hamburger in desktop view and show it only
    on mobile view:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，我们需要在桌面视图中隐藏汉堡，并且只在移动视图中显示它：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s save and take a look:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并查看：
- en: '![](img/95e26386-0776-4e95-81b2-64c6882bcd90.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95e26386-0776-4e95-81b2-64c6882bcd90.jpg)'
- en: If you want to add a fancy frame to your tablet view, then click on the three
    dots in  the right-hand corner and click on Show device frame.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为平板视图添加一个花哨的框架，那么点击右上角的三个点，然后点击显示设备框架。
- en: 'We can see that the hamburger icon shows up, but we need to place it correctly:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到汉堡图标显示出来了，但我们需要正确放置它：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Don't forget that we only change the `display` property with our media queries,
    so the rules we apply here will apply to the the mobile version.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记我们只是通过媒体查询改变`display`属性，所以我们在这里应用的规则将适用于移动版本。
- en: 'Now we have to create another menu that shows up only on mobile version, and
    when the user clicks on the hamburger menu, the entire page will move to the left:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须创建另一个仅在移动版本上显示的菜单，当用户点击汉堡菜单时，整个页面将向左移动：
- en: '![](img/ce3a3f3b-ff9d-4a71-99d6-7020410f18ff.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce3a3f3b-ff9d-4a71-99d6-7020410f18ff.png)'
- en: A diagram that shows the different layers of the content and the mobile nav
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 显示内容和移动导航的不同层的图表
- en: To be able to move the entire page, we will need to create an HTML tag and put
    our content inside it. We'll create a tag called `<main>` and put the content
    we created inside (from `header` to `footer`).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够移动整个页面，我们需要创建一个HTML标签并将我们的内容放在其中。我们将创建一个名为`<main>`的标签，并将我们从`header`到`footer`创建的内容放在其中。
- en: 'Now, in CSS, we will first need to add a new section for our `main` tag:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在CSS中，我们首先需要为我们的`main`标签添加一个新的部分：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, to ensure that this element will be the parent element, we will need to
    make this element in a `position: relative;` so that every element with a `position:
    absolute;` will now relate to this one:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，为了确保这个元素将成为父元素，我们需要将这个元素设置为`position: relative;`，这样每个具有`position: absolute;`的元素现在都将与这个元素相关联：'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ll also add a `background-color: white;` to make sure that it has the same
    background `white` as the default `white`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还将添加一个`background-color: white;`，以确保它具有与默认的`white`相同的背景`white`：'
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, to move our `main` tag, we''ll use the `"left:-200px"` CSS property:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了移动我们的`main`标签，我们将使用`"left:-200px"`的CSS属性：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will move our element horizontally by `-200px`, that is, `200px` to the
    left. Now, let''s save and take a look:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的元素水平移动-200px，也就是向左移动200px。现在，让我们保存并查看：
- en: '![](img/ea90c5ac-f8a1-48e2-a95d-1d458deaac94.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea90c5ac-f8a1-48e2-a95d-1d458deaac94.jpg)'
- en: Main container moved to the left by 250px
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 主容器向左移动了250px
- en: 'For our mobile menu, let''s create another `div` with the `"mobile-nav"` class,
    but we will put it outside of the `<main>` tag:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的移动菜单，让我们创建另一个带有`"mobile-nav"`类的`div`，但我们将把它放在`<main>`标签之外。
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In `.mobile-nav`, let''s recreate our `nav` (including `.main-nav` and `.right-nav`
    lists):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.mobile-nav`中，让我们重新创建我们的`nav`（包括`.main-nav`和`.right-nav`列表）：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In our CSS file, let''s make sure that you hide our `.mobile-nav` in desktop
    view:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CSS文件中，让我们确保在桌面视图中隐藏我们的`.mobile-nav`：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s add some customization:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些定制：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`position: fixed;`: As we want the menu to stay fixed on the back while we
    move the `<main>` container'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`position: fixed;`：因为我们希望菜单在我们移动`<main>`容器时保持固定在后面'
- en: '`background-color: #1F1F1F;`: The color picked from the design'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background-color: #1F1F1F;`：从设计中选择的颜色'
- en: '`width: 200px;` and `height: 100%;`: As we want the dimension to be slightly
    lower than the minimum width of a mobile, which is 320px. 200px seems good, and,
    of course, we want the height to be 100%, to take the entire space vertically'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width: 200px;`和`height: 100%;`：因为我们希望尺寸略小于移动设备的最小宽度，即320px。200px看起来不错，当然，我们希望高度为100%，以垂直占据整个空间'
- en: '`right: 0;` and `top: 0;`: Specify the position from the viewport'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`right: 0;`和`top: 0;`：指定从视口的位置'
- en: '![](img/a06591fd-2bdb-47f5-bc4c-bc380f1cce43.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a06591fd-2bdb-47f5-bc4c-bc380f1cce43.jpg)'
- en: iPad View (1,024px)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: iPad视图（1,024px）
- en: 'Let''s finish the customization of the menu:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成菜单的定制：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s save and take a look at how it looks:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并查看它的样子：
- en: '![](img/3645ea8e-b991-4211-a1aa-6b809153f799.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3645ea8e-b991-4211-a1aa-6b809153f799.jpg)'
- en: iPad View (1,024px)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: iPad视图（1,024px）
- en: 'Now let''s return the `<main>` container to its initial position:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将`<main>`容器返回到初始位置：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is when the fun starts; we'll create a function in JS to animate the `<main>`
    container when the user clicks on the hamburger menu.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是乐趣开始的时候；我们将在JS中创建一个函数，当用户点击汉堡菜单时，会使`<main>`容器动画化。
- en: 'To make that happen, we will add a class to the `<main>` tag when the user
    clicks on the hamburger menu. This class called `active` will have the following
    value:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，当用户点击汉堡菜单时，我们将向`<main>`标签添加一个类。这个类叫做`active`，将具有以下值：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, if we add an `active` class to the `<main>` element, the container will
    move to the left as we specified.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们向`<main>`元素添加一个`active`类，容器将按我们指定的方式向左移动。
- en: Now let's remove it and get started with the JS.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把它移除，开始JS。
- en: To kick-start any project, the best way for any beginner is to start with jQuery.
    What is jQuery?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动任何项目，对于任何初学者来说，最好的方法是从jQuery开始。什么是jQuery？
- en: What is jQuery?
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是jQuery？
- en: jQuery is a fast and concise JavaScript Library that simplifies HTML document
    traversing, event handling, animating, and Ajax interactions for rapid web development.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个快速而简洁的JavaScript库，简化了HTML文档的遍历、事件处理、动画和Ajax交互，用于快速的Web开发。
- en: -Official jQuery website
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '- jQuery官方网站'
- en: 'jQuery is not a language in itself; it is a JavaScript framework that helps
    to code JavaScript more easily and efficiently. The good points of jQuery are
    as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery本身不是一种语言；它是一个帮助更轻松、更高效地编写JavaScript的JavaScript框架。jQuery的优点如下：
- en: It simplifies JavaScript syntax
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它简化了JavaScript语法
- en: It has fixed most of the issues that JavaScript will have between each web browser
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它已经解决了JavaScript在每个Web浏览器之间将会遇到的大部分问题
- en: It makes deployment safer across all platforms
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使部署在所有平台上更安全
- en: It's easy for a beginner to understand
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于初学者来说很容易理解
- en: It has many libraries and a big community
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有许多库和一个庞大的社区
- en: 'To use jQuery, we''ll just need to link a script to our HTML, but, fortunately,
    with HTML boilerplate, jQuery is already integrated. The following is the line
    in our HTML that calls the URL and downloads the jQuery file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用jQuery，我们只需要将脚本链接到我们的HTML，但是幸运的是，使用HTML样板，jQuery已经集成了。以下是在我们的HTML中调用URL并下载jQuery文件的行：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: jQuery syntax
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery语法
- en: 'We will now have a look at the jQuery syntax.  The following syntax is an example
    of a jQuery and JavaScript code that changes the background of the body:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在来看一下jQuery语法。以下语法是一个改变body背景的jQuery和JavaScript代码的示例：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can see the big difference between them.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到它们之间的很大区别。
- en: 'The basic syntax of jQuery is very simple:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的基本语法非常简单：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `$` sign starts any jQuery action
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$`符号开始任何jQuery操作'
- en: The `(selector)` is used to query (or find) HTML elements, by ID or class like
    in CSS (`#` or `.`)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(selector)`用于查询(或查找)HTML元素，通过ID或类，就像在CSS中一样(`#`或`.`)'
- en: '`action()`  is the action to be performed on the element(s)'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`action()`是要在元素上执行的操作'
- en: The semicolon (`;`) is used to close the action
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分号(`;`)用于关闭操作
- en: 'For example, to add a class in jQuery, we can use the jQuery action `.addClass`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要在jQuery中添加一个类，我们可以使用jQuery操作`.addClass`：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To make this happen, we will need to create a JS file beforehand and write all
    our JS code in there. However, we can use the one created by HTML boilerplate
    located in our `js` folder, called `main.js`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，我们需要事先创建一个JS文件，并在其中编写所有我们的JS代码。但是，我们可以使用HTML样板中的一个创建的位于我们的`js`文件夹中的`main.js`。
- en: 'To call jQuery and say that we need to do those actions, we will need to add
    the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用jQuery并说我们需要执行这些操作，我们需要添加以下代码：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is to prevent any jQuery code from running before the document has finished
    loading.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了防止在文档完成加载之前运行任何jQuery代码。
- en: Now, to test whether our jQuery is correctly linked with our HTML file, a quick
    thing we can do is to show an alert when the page loads.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试我们的jQuery是否正确地与我们的HTML文件链接，我们可以做的一个快速的事情是在页面加载时显示一个警报。
- en: 'To do so, we can use the JavaScript `alert` action:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以使用JavaScript的`alert`操作：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/c13a08d6-1d63-4f9c-89be-3165bf3c1d74.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c13a08d6-1d63-4f9c-89be-3165bf3c1d74.png)'
- en: Our alert action is properly working
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的警报操作正常工作
- en: 'We can remove the `alert` action and add the little code we created earlier:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以删除`alert`操作并添加我们之前创建的小代码：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s save and check whether everything works:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并检查一切是否正常工作：
- en: '![](img/e8a538fe-7a54-44a6-b60d-7ad0318c6ee6.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8a538fe-7a54-44a6-b60d-7ad0318c6ee6.png)'
- en: This shows the class on the Inspector
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了检查器上的类
- en: Indeed, we have our class `active` right from the start.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们从一开始就有我们的类`active`。
- en: 'To change this action to when the user clicks on the menu, we will need to
    use the jQuery action, `click`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将此操作更改为用户单击菜单时，我们需要使用jQuery操作`click`：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can define this, but this will not do anything, as we need to define the
    action when the icon is clicked. To do so, we will need to set a `function` inside.
    A function is a set of actions that you can set and is followed by an open and
    a closed curly bracket:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义这一点，但这将不起作用，因为我们需要在单击图标时定义操作。为此，我们需要在内部设置一个`function`。函数是一组您可以设置的操作，后面跟着一个开放和一个关闭的花括号：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, inside the `function`, we will add the `addClass` action:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`function`内部，我们将添加`addClass`操作：
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now save your JS file and refresh the page. As you click on the `hamburger-menu`,
    the container moves to the left. Well done! We have our first step. However, now
    we want to close the menu and move the container back.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存您的JS文件并刷新页面。当您单击`hamburger-menu`时，容器会向左移动。干得好！我们迈出了第一步。但是，现在我们想关闭菜单并将容器移回。
- en: 'We can add this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加这个：
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'However, this won''t work, as it will always try to remove the class `active` as
    `<main>` is the parent of `.hamburger-menu`. To solve that, we will need to tell
    the script to stop the click `event` from bubbling up when we click on the trigger. This
    means that it will never reach the `<main>` level and won''t trigger the `.removeClass()`
    method. To do so, we will need to add a way to track the click event and tell
    it not to bubble up:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这不起作用，因为它总是尝试删除类`active`，因为`<main>`是`.hamburger-menu`的父级。为了解决这个问题，我们需要告诉脚本在单击触发器时停止点击`event`冒泡。这意味着它永远不会达到`<main>`级别，并且不会触发`.removeClass()`方法。为此，我们需要添加一种跟踪点击事件并告诉它不要冒泡的方法：
- en: '[PRE32]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can now check your menu. It's working properly as expected, but when you
    click on the `.hamburger-menu` itself, it doesn't do anything. This is because
    we didn't tell it to do anything.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以检查您的菜单。它按预期正常工作，但当您单击`.hamburger-menu`本身时，它不会执行任何操作。这是因为我们没有告诉它要执行任何操作。
- en: We will need to make the `<main>` return to its initial position when we click
    on the hamburger-menu. However, right now, we have only set it to add a class
    `active` to `<main>`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们单击汉堡菜单时，我们需要使`<main>`返回到其初始位置。但是，现在，我们只设置了将类`active`添加到`<main>`。
- en: 'We need to configure a way to remove the class only if `<main>` has an `active` on
    it. To do so, we will need to apply a condition. To apply a condition in jQuery,
    we will simply need to use the condition `if` and `else` inside a `function`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要配置一种方法，只有在`<main>`上有`active`时才能移除该类。为此，我们需要应用一个条件。在jQuery中应用条件，我们只需要使用条件`if`和`else`在`function`内部：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So, the action we want is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们想要的操作如下：
- en: If `<main>` has the class `active`, remove the class `active`
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`<main>`有类`active`，则删除类`active`
- en: If `<main>` doesn't have the class `active`, add the class `active`
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`<main>`没有类`active`，则添加类`active`
- en: 'To check whether an element has a class, we can use the jQuery action `hasClass`,
    as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查元素是否有类，我们可以使用jQuery操作`hasClass`，如下所示：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now save your JS document. Our JS is working perfectly, but if you have a tendency
    to be a perfectionist, adding some animation won''t kill you. We can add some
    transition to the container to add some smoothness to the animation:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存您的JS文档。我们的JS完美地工作了，但是如果您有完美主义的倾向，添加一些动画不会伤害您。我们可以为容器添加一些过渡效果，以使动画更加流畅：
- en: '[PRE35]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The transition will only work on the element that is moving, which is, in this
    case, the `<main>` element.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果只会作用于移动的元素，这种情况下是`<main>`元素。
- en: Our responsive is finally done; let's move to the hero section.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的响应式终于完成了；让我们转移到主标题部分。
- en: Making the hero section responsive
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使主标题部分具有响应性
- en: 'Let''s check how responsive our hero is at the moment:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来检查一下目前我们的主标题是如何响应的：
- en: '![](img/598bc960-c943-4dcb-a2b2-dd5b955129b4.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/598bc960-c943-4dcb-a2b2-dd5b955129b4.png)'
- en: iPad view and iPhone 8 view
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: iPad视图和iPhone 8视图
- en: As we see, there is nothing to change in the iPad view; however, for the iPhone
    view, it lacks padding and the title seems a bit too big.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，iPad视图中没有什么需要改变；然而，在iPhone视图中，缺少填充，标题似乎有点太大。
- en: 'The way I can see to fix this without too much code is to add some padding
    to the `container`, the `container` we have implemented in every section:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为可以在不添加太多代码的情况下解决这个问题，就是给每个部分实现的`container`添加一些填充：
- en: '[PRE36]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We will add some padding from the tablet breakpoint, so it will affect all lower
    breakpoints too.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从平板电脑断点添加一些填充，这样它将影响所有更低的断点。
- en: 'Let''s now fix our the title. This will be straightforward; we will just need
    to find our `.hero-title` class and add some media queries:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修复我们的标题。这将是直接的；我们只需要找到我们的`.hero-title`类并添加一些媒体查询：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: That's it! You can always change the value as you wish, as well.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您也可以根据需要随时更改值。
- en: Making the Blog section responsive
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使博客部分具有响应性
- en: 'This Blog section is based on a three-column grid, and it works pretty well
    on desktops and tablets; however, on a mobile, it shrinks a bit too much, so we''ll
    need to change the three columns to two columns (and one column for a small mobile):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个博客部分是基于三列网格的，它在台式机和平板电脑上运行得很好；然而，在手机上，它缩小得有点太多，所以我们需要将三列改为两列（对于小手机，一列）：
- en: '![](img/2759fdf3-460c-43b1-8639-b5ac349425bc.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2759fdf3-460c-43b1-8639-b5ac349425bc.png)'
- en: Mobile view of the Blog section
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 博客部分的移动视图
- en: 'To change the width of the column, let''s head to the `.blog-post` class we
    created and change the value of the width to `50%` on a large mobile breakpoint:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变列的宽度，让我们转到我们创建的`.blog-post`类，并在大手机断点上将宽度值改为`50%`：
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will make sure that the content will still be readable, regardless of the
    device it will be appearing on.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保内容无论出现在哪种设备上都能够被读取。
- en: 'Also, the title seems a bit big as well. We can reduce the `font-size` by `40px`
    when in mobile view:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，标题也显得有点太大。在移动视图中，我们可以将`font-size`减小`40px`：
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The preceding code will look like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将如下所示：
- en: '![](img/f41e1ce7-c3b9-4ed3-808b-035a41972dfa.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f41e1ce7-c3b9-4ed3-808b-035a41972dfa.png)'
- en: The view of the different breakpoints of the Blog section
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 博客部分的不同断点的视图
- en: Making the ABOUT US section responsive
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使关于我们部分具有响应性
- en: 'The ABOUT US section looks fine on the iPad view but starts to become a bit
    squishy on a mobile:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们部分在iPad视图上看起来很好，但在手机上开始变得有点挤：
- en: '![](img/174affa0-dd36-4507-adfc-5ef6483b410f.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/174affa0-dd36-4507-adfc-5ef6483b410f.jpg)'
- en: Mobile view of the About Us Section
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们部分的移动视图
- en: 'To fix this issue, we will need to change the width value to `100%` on the
    mobile breakpoint:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要在手机断点上将宽度值改为`100%`：
- en: '[PRE40]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Also, we will change the orientation of the flexbox by adding the CSS property, `flex-orientation:
    column`. By default, this value is `row`, but you also have the ability to change
    the order by having the `row-reverse` value, the same for the `column` value with
    `column-reverse`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，我们将通过添加CSS属性`flex-orientation: column`来改变flexbox的方向。默认情况下，这个值是`row`，但您也可以通过`row-reverse`值来改变顺序，对于`column`值也是一样，使用`column-reverse`：'
- en: '[PRE41]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The design looks good, but the text is still a bit too close to the title;
    let''s fix this by adding a margin:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 设计看起来不错，但文本与标题仍然有点太近；让我们通过添加一些边距来解决这个问题：
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, save and check:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存并检查：
- en: '![](img/acaa6de0-be15-449c-bb1a-461e97d83b42.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/acaa6de0-be15-449c-bb1a-461e97d83b42.jpg)'
- en: The ABOUT US responsive layout
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的响应式布局
- en: Making the footer section responsive
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使footer部分具有响应性
- en: The last part is the `footer`, and, for most websites, it's just a list of links.
    It's usually displayed it as a simple vertical list; it's not as sophisticated
    as the header menu we created.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分是`footer`，对于大多数网站来说，它只是一个链接列表。它通常显示为一个简单的垂直列表；它不像我们创建的标题菜单那样复杂。
- en: 'First, we will need to remove the height value we set in the `footer`; to do
    that, we can simply replace it with the `auto` value:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要移除在`footer`中设置的高度值；为此，我们可以简单地用`auto`值替换它：
- en: '[PRE43]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We also need to display the links in a vertical way by setting the direction
    of the flexbox, as we saw earlier:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要通过设置flexbox的方向来垂直显示链接，就像我们之前看到的那样：
- en: '[PRE44]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The next step will be to change the value of the display we set on our `<li>`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是改变我们在`<li>`上设置的显示值：
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Also, we need to remove the padding we set on the `<a>` tag:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要移除在`<a>`标签上设置的填充：
- en: '[PRE46]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, we will need to remove the default padding from the `<ul>`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要从`<ul>`中移除默认的填充：
- en: '[PRE47]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now we're all done.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们都完成了。
- en: Summary
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That was quite a condensed chapter, I hope you're still following all this!
    Now that we have covered how to make our website responsive with media queries,
    and also with a quick introduction to jQuery, we can now move on to the next chapter.
    In our next chapter, we will move deeper into CSS and jQuery by adding some interaction
    and adding some dynamic content to your website. We'll discuss pseudo-class in
    CSS, how to use plugins on our website, and how to collect information through
    an API. I can't wait to show you this!
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 那是一个非常紧凑的章节，我希望你仍然能够理解！现在我们已经介绍了如何使用媒体查询使我们的网站具有响应性，还有一个快速介绍jQuery，我们现在可以继续下一章了。在下一章中，我们将深入研究CSS和jQuery，通过添加一些交互和动态内容来丰富您的网站。我们将讨论CSS中的伪类，如何在网站上使用插件，以及如何通过API收集信息。我迫不及待要向你展示这些！
