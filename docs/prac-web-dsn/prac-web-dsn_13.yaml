- en: Introduction to Client-Side Rendering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端渲染简介
- en: Since the beginning of the web, as we have learned, the conventional method
    of displaying HTML is using **server-side rendering**. This latter was great; websites
    were simple and didn't need much interaction. However, nowadays, that's not the
    case anymore. There are a lot of applications on a single website; you need messaging,
    updates, shopping, real-time data sync—the end consumer always wants more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自Web诞生以来，我们已经学到，显示HTML的传统方法是使用**服务器端渲染**。后者很棒；网站简单，不需要太多交互。然而，现在不再是这样了。单个网站上有很多应用程序；您需要消息传递，更新，购物，实时数据同步-最终用户总是想要更多。
- en: 'In this chapter, you''ll learn the following things:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学到以下内容：
- en: What is a server-side rendering?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是服务器端渲染？
- en: What is a client-side rendering?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是客户端渲染？
- en: The pros and cons of both
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者的优缺点
- en: An introduction to VueJS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VueJS简介
- en: Finally, creating a Weather application with VueJS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，使用VueJS创建一个天气应用程序
- en: So, what is this **client-side rendering**? Client-side rendering is a new type
    of rendering website using mostly JavaScript to render it instead of server-side
    languages such as PHP, Python, or Ruby.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是**客户端渲染**？客户端渲染是一种使用大多数JavaScript而不是服务器端语言（如PHP，Python或Ruby）来渲染网站的新方法。
- en: To understand the difference, we will need to understand how server-side rendering
    works.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解区别，我们需要了解服务器端渲染的工作原理。
- en: What is server-side rendering?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是服务器端渲染？
- en: Server-side rendering is the most common way to render a website. Whenever you
    visit a website, a request to the server is made, and it renders the website in
    HTML. This usually takes a few milliseconds, but it will depend on many factors,
    such as internet speed, location, and the number of visitors.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端渲染是渲染网站的最常见方式。每当您访问一个网站时，都会向服务器发出请求，并在HTML中渲染网站。这通常需要几毫秒，但会取决于许多因素，如互联网速度，位置和访问者数量。
- en: If you want to visit another website, you basically perform another request
    to the server with the same process all over again. This can be annoying if your
    page has a thousand lines of code, like many of the websites do nowadays.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想访问另一个网站，基本上要重新向服务器发出另一个请求，整个过程都要重复一遍。如果您的页面有一千行代码，像现在许多网站一样，这可能会很烦人。
- en: However, server-side rendering is good for SEO, as the HTML page is there for
    robots to crawl, something that client-side rendering doesn't do well, at least
    not as simple as server-side rendering.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，服务器端渲染对于SEO很有好处，因为HTML页面可以供机器人爬行，而客户端渲染做不到这一点，至少不像服务器端渲染那样简单。
- en: What is client-side rendering?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是客户端渲染？
- en: Client-side rendering, on the other, is rendered with JavaScript. Instead of
    getting the HTML by itself, you're getting a simple HTML structure but with JavaScript
    to render the rest of the HTML with your browser.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，客户端渲染是使用JavaScript渲染的。您不是单独获取HTML，而是获取一个简单的HTML结构，但其中包含JavaScript来渲染浏览器中的其余HTML。
- en: This is a new approach and has gained a lot of traction lately with the development of
    framework from companies such as Facebook and Google.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种新的方法，最近在Facebook和Google等公司的框架开发中获得了很多关注。
- en: The main difference is that when you click to take a look at another page, the
    JavaScript renders the page instead of requesting a new page from the server.
    This is a much faster way to load content, as it will only load content that it
    needs instead of the whole page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别在于，当您点击查看另一个页面时，JavaScript会渲染页面，而不是从服务器请求新页面。这是加载内容的更快方式，因为它只会加载需要的内容，而不是整个页面。
- en: The downside of it is that it's very bad SEO-wise, since the content is not
    rendered until the page is loaded into the browser. This can be fixed, but not
    in an easy way yet.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它的缺点是在SEO方面非常糟糕，因为内容直到加载到浏览器中才会被渲染。这可以修复，但目前还不是一种简单的方式。
- en: Pros and cons of server and client-side rendering
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端渲染的优缺点
- en: The next two sections are a quick a summary of the pros and cons of each, so
    you can decide which you'll use for each project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两节是对每种方法的优缺点的简要总结，这样您就可以决定在每个项目中使用哪种方法。
- en: Server-side rendering
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: 'Pros:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: Better SEO because search engines can crawl the site
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的SEO，因为搜索引擎可以爬行网站
- en: The initial page loads faster
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始页面加载更快
- en: Good for static sites
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于静态网站
- en: 'Cons:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: Frequent server requests
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁的服务器请求
- en: Slower rendering
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染较慢
- en: Page has to reload every time
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次页面都必须重新加载
- en: Client-side rendering
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端渲染
- en: 'Pros:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: Faster rendering after the initial load
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始加载后更快的渲染
- en: Good for web applications
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于Web应用程序
- en: Fewer requests to the server
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对服务器的请求较少
- en: 'Cons:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: Bad SEO if not implemented correctly
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有正确实现，SEO不好
- en: The initial load may require more time
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始加载可能需要更多时间
- en: Requires an external library in most cases
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数情况下需要外部库
- en: Introducing to VueJS
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍VueJS
- en: They are many JavaScript frameworks we can use if we want to build a client-side
    rendering website. ReactJS, AngularJS, and VueJS are among the most well-known
    frameworks—not surprising when you know that they're backed by Google and Facebook.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想构建一个客户端渲染的网站，我们可以使用许多JavaScript框架。ReactJS，AngularJS和VueJS是最知名的框架之一-当你知道它们由谷歌和Facebook支持时，这一点也就不足为奇了。
- en: 'VueJS is one of the easiest to learn. That''s why we chose to start with this
    one. In the last chapter of this book, we''ll do a quick introduction to VueJS
    so that you can understand how it works and what are the possibilities for it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: VueJS是最容易学习的之一。这就是为什么我们选择从这个开始的原因。在本书的最后一章，我们将快速介绍VueJS，以便您了解它的工作原理和可能性：
- en: '![](img/e19a3015-d7f2-42b1-a4e9-b569015030c4.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e19a3015-d7f2-42b1-a4e9-b569015030c4.png)'
- en: VueJS homepage
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: VueJS主页
- en: VueJS allows you to create everything from small widgets, driven by JavaScript,
    which you drop into existing applications. Over medium-sized applications where
    you control the whole page through JavaScript and therefore re-render various
    parts, making it very reactive, and all the way up to building big enterprise-level
    applications, single-page application, where your whole web page, multiple pages
    (at least it feels like this to the user), are driven by VueJS, which renders
    significant parts of the DOMs, to make it look like they were different pages
    being loaded, but, in the end, JavaScript handles all of that.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: VueJS允许您创建从由JavaScript驱动的小部件到放入现有应用程序的中等大小的应用程序。通过JavaScript控制整个页面并因此重新渲染各个部分，使其非常具有反应性，一直到构建大型企业级应用程序，单页面应用程序，其中整个网页，多个页面（至少对用户来说是这样），都由VueJS驱动，它渲染DOM的重要部分，使其看起来像是加载了不同的页面，但最终JavaScript处理所有这些。
- en: Why JavaScript? Since JavaScript runs in the browser, you don't need to reach
    out to any server and wait for any responses if you only want to re-render parts
    of the application. This makes the application very reactive, makes it feel nice,
    and provides awesome user experiences.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么选择JavaScript？由于JavaScript在浏览器中运行，如果您只想重新渲染应用程序的部分，您无需访问任何服务器并等待任何响应。这使得应用程序非常具有反应性，感觉很好，并提供了出色的用户体验。
- en: This is what you can do with VueJS. Now, why would you choose VueJS and not,
    let's say, Angular 2 or ReactJS, which you may know and does a similar thing.
    Well, first of all, VueJS is extremely lean and small regarding the file size.
    We're talking about 16 kilobytes, minified in gzip, for the core framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以使用VueJS做的事情。那么，为什么选择VueJS而不是比如说Angular 2或ReactJS，您可能已经了解并且执行类似操作的框架呢？首先，VueJS非常精简，文件大小很小。我们说的是核心框架压缩后gzip格式只有16千字节。
- en: It's a very focused and to-the-point framework. However, it's not only small,
    hence providing a fast loading time, it's also fast at runtime, and, judging by
    some benchmarks, it even beats Angular 2 and ReactJS. Now, of course, it will
    always depend on your specific application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常专注和简洁的框架。但是，它不仅小巧，因此加载速度快，而且在运行时也很快，根据一些基准测试的结果，它甚至超过了Angular 2和ReactJS。当然，这将始终取决于您的特定应用程序。
- en: I'd say let's dive right into it now and get started with VueJS and build our
    first little application and take a look at how we can actually get it set up.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我想现在就开始使用VueJS并构建我们的第一个小应用程序，并看看我们如何实际设置它。
- en: Setting up VueJS
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置VueJS
- en: 'Getting started with VueJS and creating your first application is actually
    very simple. We start on [vuejs.org](http://vuejs.org), its official home page;
    there, you will note this nice Get Started button. Let''s click on it. It takes
    you to the official documentation, which is always worth taking a look at anyway,
    but, there, we want to go to installation. Now, here, you''ve got a couple of
    different options, depending on which kind of setup you want to use:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用VueJS并创建您的第一个应用程序实际上非常简单。我们从[vuejs.org](http://vuejs.org)开始，它的官方主页；在那里，您会注意到这个不错的“开始”按钮。让我们点击它。它会带您到官方文档，无论如何都值得一看，但在那里，我们想要去安装。现在，在这里，您有几种不同的选项，取决于您想要使用哪种设置：
- en: '![](img/04fa0bb6-5d23-4e07-84d0-92b477350e11.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04fa0bb6-5d23-4e07-84d0-92b477350e11.png)'
- en: The VueJS Installation page
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: VueJS安装页面
- en: 'There are different options to download VueJS—we can either download the file
    or use the CDN provided. For this exercise, we''ll simply use the CDN. Simply
    click on the link provided by VueJS, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的选项可以下载VueJS——我们可以下载文件或使用提供的CDN。在这个练习中，我们将简单地使用CDN。只需单击VueJS提供的链接，如下所示：
- en: '![](img/7cb71983-2d5e-41e2-9815-c80e09dd5cfa.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cb71983-2d5e-41e2-9815-c80e09dd5cfa.png)'
- en: VueJS CDN
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: VueJS CDN
- en: Now, instead of creating a new HTML project, let's go to [jsfiddle.net](https://jsfiddle.net/).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不需要创建一个新的HTML项目，让我们去[jsfiddle.net](https://jsfiddle.net/)。
- en: 'JSFiddle is an online web editor, so you can simply create or test something
    very easily:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JSFiddle是一个在线网络编辑器，因此您可以非常轻松地创建或测试一些东西：
- en: '![](img/92440154-743a-4291-92ff-f5227398222e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92440154-743a-4291-92ff-f5227398222e.png)'
- en: JSFiddle
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: JSFiddle
- en: 'Simply copy and paste the script from VueJS to the HTML `block` section:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将VueJS的脚本复制并粘贴到HTML的`block`部分：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can remove the `@2.5.16` and leave just the `vue` so that it will always
    fetch the latest version:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以删除`@2.5.16`，只留下`vue`，这样它将始终获取最新版本：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we''ve imported VueJS, we can already use it with all its features.
    So, let''s use it and build our first little application. For that, I want to
    add a paragraph, in which I want to say `Hello world`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经导入了VueJS，我们现在就可以使用它及其所有功能。所以，让我们使用它并构建我们的第一个小应用程序。为此，我想添加一个段落，在其中我想说“你好，世界”：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So far, there has been nothing interesting. However, what we want to do is
    to be able to control the text with VueJS. To do that, we will need to create
    an instance. In VueJS, you will simply need to add the following code in our JavaScript
    file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，还没有什么有趣的。但是，我们想要做的是能够使用VueJS控制文本。为此，我们需要创建一个实例。在VueJS中，您只需在我们的JavaScript文件中添加以下代码：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, I will need to create a `div` that will contain my app, as we don''t want
    our `<p>` tag to be the app. We''ll add an ID app:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我需要创建一个包含我的应用程序的`div`，因为我们不希望我们的`<p>`标签成为应用程序。我们将添加一个ID app：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we will need to call the `#app` `div` and set it as our template for our
    app:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要调用`#app` `div`并将其设置为我们应用程序的模板：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, to put any data into our app, we will need the `data` property:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要将任何数据放入我们的应用程序，我们将需要`data`属性：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can call it `title`. Now we will need to link it to our text; to do that,
    just remove the text and add `{{ title }}` or the name of the property.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以称它为`title`。现在我们需要将它链接到我们的文本；为此，只需删除文本并添加`{{ title }}`或属性的名称。
- en: 'Let''s run this with JSFiddle by clicking on the RUN button on the top-left
    corner:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过单击左上角的“运行”按钮在JSFiddle上运行这个：
- en: '![](img/8ec60acd-3ec1-4540-8512-f79990827e7b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ec60acd-3ec1-4540-8512-f79990827e7b.png)'
- en: The first VueJS instance
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个VueJS实例
- en: 'Now, you''re probably going to say that there is no point in doing that. It''s
    not done yet. Let''s extend our VueJS application by adding an input that will
    be linked to the text displayed in the `<p>`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会说这样做没有意义。还没有完成。让我们通过添加一个输入来扩展我们的VueJS应用程序，该输入将与`<p>`中显示的文本相关联：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We added a `v-model` directive to the input; this will bind the textbox to the
    data property `title` in Vue.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在输入中添加了`v-model`指令；这将把文本框绑定到Vue中的数据属性`title`。
- en: 'You can try now by adding any text; it will follow what you write:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以尝试添加任何文本；它将跟随你写的内容：
- en: '![](img/24f896a1-d293-4364-b2aa-a380e4fcad49.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24f896a1-d293-4364-b2aa-a380e4fcad49.png)'
- en: The JSFiddle end of the exercise
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JSFiddle练习结束
- en: This introduction is now finished. You can access my JSfiddle if you have any
    trouble with this step at[ https://jsfiddle.net/knee8oha/9/](https://jsfiddle.net/knee8oha/9/).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个介绍现在已经结束。如果你在这一步遇到任何问题，你可以访问我的JSfiddle[ https://jsfiddle.net/knee8oha/9/](https://jsfiddle.net/knee8oha/9/)。
- en: For me, the best way to learn is by practicing. So, let's create an app together
    for you to be familiar with VueJS.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，学习的最好方式是通过实践。所以，让我们一起创建一个应用程序，让你熟悉VueJS。
- en: Creating a weather application in VueJS
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VueJS中创建一个天气应用程序
- en: In this exercise, we will build a component that we can use to display the weather
    of a location in VueJS. This component will be created with a location search
    textbox; this will then search for [http://openweathermap.org/](http://openweathermap.org/),
    which is a free weather API, so we can get the information for the location-based
    search.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将构建一个组件，用于在VueJS中显示位置的天气。这个组件将包括一个位置搜索文本框；然后将搜索[http://openweathermap.org/](http://openweathermap.org/)，这是一个免费的天气API，所以我们可以获取基于位置的搜索信息。
- en: Vue Material
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue Material
- en: 'Let''s create a simple HTML file. For this exercise, we''ll not use Bootstrap
    but, instead, use another library and take a look at how easy it is. We''ll use
    Vue Material, which is a library based on Google Material design. You can check
    it out at [https://vuematerial.io/](https://vuematerial.io/):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的HTML文件。在这个练习中，我们将不使用Bootstrap，而是使用另一个库，并看看它有多容易。我们将使用Vue Material，这是一个基于Google
    Material设计的库。你可以在[https://vuematerial.io/](https://vuematerial.io/)上查看它：
- en: '![](img/26170b5b-2cdc-4c58-97e2-dcc25fcce4aa.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26170b5b-2cdc-4c58-97e2-dcc25fcce4aa.png)'
- en: Vue Material
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Material
- en: 'Let''s head to their installation instruction by clicking on Getting started.
    Fortunately, they provide a CDN with a template ready to use. Let''s copy their
    template and paste it into our HTML file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“入门”来查看他们的安装说明。幸运的是，他们提供了一个CDN和一个准备好使用的模板。让我们复制他们的模板并粘贴到我们的HTML文件中：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s first add a title to our `<head>` section:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在`<head>`部分添加一个标题：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Vue Material provides handy layouts that we can reuse. We want the app to be
    mobile first with a header. We can use the following code that we insert into
    our app:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Material提供了方便的布局，我们可以重用。我们希望应用程序首先是移动端的，并带有一个标题。我们可以使用以下代码插入到我们的应用程序中：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, in our `<script>` section, we will want to mount the app:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的`<script>`部分，我们将要挂载这个应用程序：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have now an app ready to use and totally responsive:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个准备好使用并完全响应的应用程序：
- en: '![](img/fce219ec-0828-440d-a847-d7a3606d84de.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fce219ec-0828-440d-a847-d7a3606d84de.png)'
- en: Our VueJS app
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的VueJS应用程序
- en: Components
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: 'The first component we will create is the main weather component. We need the
    following three properties attached to it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的第一个组件是主要的天气组件。我们需要附加到它的以下三个属性：
- en: Data
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据
- en: Methods
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法
- en: Template
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板
- en: 'The data array will need the data points of the following components:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据数组将需要以下组件的数据点：
- en: '`weatherLocation`: This will store the location entered in the input'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weatherLocation`：这将存储在输入中输入的位置'
- en: '`weatherApi`: This is your open weather API key [http://openweathermap.org/appid](http://openweathermap.org/appid)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weatherApi`：这是你的OpenWeather API密钥[http://openweathermap.org/appid](http://openweathermap.org/appid)'
- en: '`weather`: We will store the results of the API in this component'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weather`：我们将在这个组件中存储API的结果'
- en: '`displayWeather`: We will set a value of true or false (Boolean) if we want
    to display the data'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`displayWeather`：如果我们想要显示数据，我们将设置一个true或false（布尔值）'
- en: To make a call to the OpenWeather API, we will use Vue resource method for `.get()`.
    The results of this method will be stored in the weather data point and then set
    the `displayWeather` data point to `true`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调用OpenWeather API，我们将使用Vue资源方法`.get()`。这个方法的结果将存储在天气数据点中，然后将`displayWeather`数据点设置为`true`。
- en: OpenWeather API
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenWeather API
- en: 'To be able to access the API, we will need to sign up and create an account.
    Without further ado, let''s create an account at [http://openweathermap.org/appid](http://openweathermap.org/appid):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够访问API，我们需要注册并创建一个账户。话不多说，让我们在[http://openweathermap.org/appid](http://openweathermap.org/appid)创建一个账户：
- en: '![](img/3706e9dd-6b43-4c47-8d64-4f0adf6fab26.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3706e9dd-6b43-4c47-8d64-4f0adf6fab26.png)'
- en: The OpenWeather signup page
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeather注册页面
- en: 'Click on Sign Up and follow the process. In the end, you''ll access a member
    dashboard with the API tab. You can copy the API key provided:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“注册”并按照流程进行。最后，你将访问一个带有API选项卡的会员仪表板。你可以复制提供的API密钥：
- en: '![](img/119003f1-bf64-4461-877f-3bec9ba700a7.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/119003f1-bf64-4461-877f-3bec9ba700a7.png)'
- en: The OpenWeather API
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeather API
- en: 'Now let''s check out how to call the API and get results. If we go on to the
    documentation provided by OpenWeather ([http://openweathermap.org/current](http://openweathermap.org/current)),
    you can get an example of an API call:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何调用API并获取结果。如果我们查看OpenWeather提供的文档([http://openweathermap.org/current](http://openweathermap.org/current))，你可以得到一个API调用的示例：
- en: '![](img/944a5896-1bb5-4dc5-9119-b432feb12a6b.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/944a5896-1bb5-4dc5-9119-b432feb12a6b.png)'
- en: API Documentation
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: API文档
- en: 'The URL is composed like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: URL的组成如下：
- en: '![](img/c68bd603-74fc-42ee-b4c2-79037fb90b3e.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c68bd603-74fc-42ee-b4c2-79037fb90b3e.png)'
- en: API Call URL
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: API调用URL
- en: 'The result we get from this call looks like this (you can test yourself):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从这个调用中得到的结果看起来像这样（你可以自己测试）：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The code provided is in JSON, a format used generally when displaying data.
    The code is minified, so it is harder to read. Let''s use a tool to un-minify
    it. I used [http://unminify.com/](http://unminify.com/). To do that, just paste
    the code and click on Unminify:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码是JSON格式，通常用于显示数据。代码是被压缩的，所以很难阅读。让我们使用一个工具来解压缩它。我使用了[http://unminify.com/](http://unminify.com/)。要做到这一点，只需粘贴代码并点击Unminify：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that the code is more, you can see that the data is displayed with an `id`
    and a `value`. We can use whichever we desire. For this exercise, we will pick
    the following data:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码更多了，你可以看到数据显示为`id`和`value`。我们可以使用任何一个。在这个练习中，我们将选择以下数据：
- en: Average Temperature
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均温度
- en: Min Temperature
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低温度
- en: Max Temperature
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高温度
- en: The description of the weather
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天气描述
- en: The sunrise and sunset time
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日出和日落时间
- en: Let's get started.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: The API call
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API调用
- en: First, we will need to create the HTML tag that will hold everything.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个将包含所有内容的HTML标签。
- en: 'Let''s create in our app an HTML tag `<weather>`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的应用中创建一个HTML标签`<weather>`：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `script` section, let''s create our first Vue function:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`script`部分，让我们创建我们的第一个Vue函数：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As we said earlier, we will need the data, the method, and the template to
    display the content. Let''s start with the data:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，我们需要数据、方法和模板来显示内容。让我们从数据开始：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The function will store the following things:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将存储以下内容：
- en: The location set by the user
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户设置的位置
- en: Our API Key
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的API密钥
- en: The data pulled out from the API
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从API中提取的数据
- en: A boolean set to display or not display the information
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个布尔值，用于显示或不显示信息
- en: 'Next, we will need to add the method, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加方法，如下所示：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will set the `getWeather` function, which will do the following things:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置`getWeather`函数，它将执行以下操作：
- en: Call the API with our API key and the location set by the user by the preceding
    data
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们的API密钥和用户设置的位置调用API
- en: Store the data pulled from the API and set the display information to `true`
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储从API获取的数据，并将显示信息设置为`true`
- en: If there is no answer or content from the API, the display information will
    be set to `false`
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有来自API的答案或内容，显示信息将设置为`false`
- en: 'Finally, the template will be the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，模板将如下：
- en: '[PRE18]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we will pass these pieces of information to a template we create for
    each. For the weather name and description, we have the following template:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将把这些信息传递给我们为每个创建的模板。对于天气名称和描述，我们有以下模板：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We use the `props` property to pass the data and the `template` property to
    create the HTML with the value.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`props`属性传递数据，使用`template`属性创建具有该值的HTML。
- en: Then, we have the temperature. We will display the average temperature, maximum
    temperature, and minimum temperature. The data we get from OpenWeather API is
    in the format of Kelvin, so we need to create a function to convert the temperature.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有温度。我们将显示平均温度、最高温度和最低温度。我们从OpenWeather API获取的数据格式是开尔文，所以我们需要创建一个函数来转换温度。
- en: 'To convert Kelvin to Celsius, you simply need to subtract `273.15` from the
    number:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 将开尔文转换为摄氏度，您只需要从数字中减去`273.15`：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For the `cloud`, we simply need to display the text:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`cloud`，我们只需要显示文本：
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we have the sunrise and sunset. The format we get from OpenWeather
    is in timestamp though, so we will need to convert it to date time:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有日出和日落时间。我们从OpenWeather得到的格式是时间戳，所以我们需要将其转换为日期时间：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our app is now finalized. Let''s check out how it looks:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用现在已经完成。让我们看看它的样子：
- en: '![](img/68b17685-e9fd-4690-a35e-4d0f06c9231e.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68b17685-e9fd-4690-a35e-4d0f06c9231e.png)'
- en: Our weather application - The Search bar
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的天气应用 - 搜索栏
- en: 'Then, we have our result page:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有我们的结果页面：
- en: '![](img/d1e4f370-6f2a-4174-8b55-d4e479ce7ed7.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1e4f370-6f2a-4174-8b55-d4e479ce7ed7.png)'
- en: Our weather application - The Result page
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的天气应用 - 结果页面
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This was a brief introduction to VueJS. There are so much more possibilities
    with this framework, and I've just touched a very small part of it. I hope this
    will bring you the curiosity to dig more into VueJS or whichever client-side rendering
    framework you choose. In the next final chapter, I will show you a list of tools
    that I use every day to help me with my workflow. These will surely help you as
    well. Let's jump into it!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对VueJS的简要介绍。这个框架有很多可能性，我只触及了其中的一小部分。我希望这会引起你对VueJS或你选择的任何客户端渲染框架的好奇心。在下一个最后一章中，我将向你展示我每天用来帮助我的工作流程的工具列表。这些工具肯定也会帮助到你。让我们开始吧！
