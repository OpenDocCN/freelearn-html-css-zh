- en: Chapter 1. Foundations and Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。基础和工具
- en: It is important to learn about the foundations in each area. You need to have
    basic information to be a professional. Good usage of tools is almost as important
    as the foundation. Without good tools, your foundation won't be used well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 了解每个领域的基础知识非常重要。您需要有基本信息才能成为专业人士。良好的工具使用几乎和基础一样重要。没有好的工具，您的基础就无法得到很好的利用。
- en: This chapter is about tools that will help to build better CSS code. It describes
    features of preprocessors and finally the foundation knowledge about SASS. In
    this chapter, you can get basic knowledge about automatization of repeatable processes
    in frontend development with `GULP.js`. Finally, you can find an example of file
    structure, which will partialize your project into small, easy to edit, and maintainable
    files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了将帮助构建更好的CSS代码的工具。它描述了预处理器的特性，最后是关于SASS的基础知识。在本章中，您可以获得有关使用`GULP.js`在前端开发中自动化可重复过程的基本知识。最后，您可以找到一个文件结构的示例，它将您的项目部分化为小型、易于编辑和可维护的文件。
- en: 'In this chapter, we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn about the usage of preprocessors.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解预处理器的用法。
- en: Create a CSS project with a proper structure.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个具有适当结构的CSS项目。
- en: Choosing the right IDE
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的IDE
- en: 'Building CSS code is pretty simple. If you want to start, you just need a simple
    text editor and start writing your code. If you want to speed up the process,
    you will need to choose the right text editor or integrated development environment
    (IDE). Currently the most popular editors/IDEs for frontend developers are as
    follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 构建CSS代码非常简单。如果您想开始，您只需要一个简单的文本编辑器并开始编写代码。如果您想加快这个过程，您将需要选择正确的文本编辑器或集成开发环境（IDE）。目前，前端开发人员最流行的编辑器/IDE如下：
- en: Sublime Text
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Atom
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atom
- en: WebStorm/PHPStorm
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebStorm/PHPStorm
- en: Eclipse/Aptana
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse/Aptana
- en: Brackets
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brackets
- en: Your choice will be based on price and quality. You should use the editor that
    you feel most comfortable with.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您的选择将基于价格和质量。您应该使用您感觉最舒适的编辑器。
- en: Speeding up the programming process with snippets/Emmet
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代码片段/Emmet加快编程过程
- en: 'When you are creating a code, you have parts of codes that you repeat in all
    projects/files. You will need to create snippets that will help you to speed up
    the process of writing code. As a frontend developer, I recommend you to get a
    basic knowledge about **Emmet** (previously Zen Coding). This is a collection
    of HTML/CSS snippets, which will help you build code faster. How to use it? It
    is basically included in modern frontend editors (Sublime Text, Atom, Brackets,
    WebStorm, and so on). If you want to check how Emmet works in CSS you need to
    start a declaration of some class for example `.className`, open the brackets
    (`{}`) and write for example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建代码时，您会有一些在所有项目/文件中重复的代码部分。您需要创建一些代码片段，这将帮助您加快编写代码的过程。作为前端开发人员，我建议您对**Emmet**（以前是Zen
    Coding）有基本了解。这是一组HTML/CSS代码片段，可以帮助您更快地构建代码。如何使用它？它基本上包含在现代前端编辑器（Sublime Text，Atom，Brackets，WebStorm等）中。如果您想了解Emmet在CSS中的工作原理，您需要开始声明一些类，例如`.className`，打开括号（`{}`）并写入例如：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Following are examples of the most used properties and values:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最常用的属性和值的示例：
- en: '| Emmet form | Result |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| Emmet表单 | 结果 |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `bg` | Background |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `bg` | 背景 |'
- en: '| `bgc` | Background color |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `bgc` | 背景颜色 |'
- en: '| `m` | Margin |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `m` | 外边距 |'
- en: '| `ml`, `mr`, `mt`, `mb` | Margin-left, margin-right, margin-top, margin-bottom
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `ml`，`mr`，`mt`，`mb` | 左边距，右边距，上边距，下边距 |'
- en: '| `ml20px` | Margin-left: 20px |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `ml20px` | 左边距：20px |'
- en: '| `c` | Color |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 颜色 |'
- en: '| `fl` | Float: left |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `fl` | 浮动：左 |'
- en: '| `p20px20p` | Padding: 20px 20% |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `p20px20p` | 填充：20px 20% |'
- en: '| `tac` | Text-align: center |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `tac` | 文本对齐：中心 |'
- en: '| `tdn` | Text-decoration: none |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `tdn` | 文本装饰：无 |'
- en: '| `ttu` | Text-transform: uppercase |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `ttu` | 文本转换：大写 |'
- en: '| `dib` | Display: inline-block |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `dib` | 显示：内联块 |'
- en: '| `!` | !important |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `!` | !important |'
- en: 'For a better understanding of Emmet and to get a full list of features, it
    is recommended to check the official website of the project at: [http://emmet.io/](http://emmet.io/).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Emmet并获得完整的功能列表，建议查看项目的官方网站：[http://emmet.io/](http://emmet.io/)。
- en: Keyboard shortcuts
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键盘快捷键
- en: Do you remember when you learned the most impressive keyboard shortcuts *Ctrl*
    + *C* ,*Ctrl* + *V*? It helped you to save about 2 seconds each time you wanted
    to make an operation of copying and pasting some text or any other element. But
    what about automizing some processes in building code? Yeah, it's going to be
    helpful and you can do it with keyboard shortcuts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还记得您学习最令人印象深刻的键盘快捷键*Ctrl* + *C*，*Ctrl* + *V*吗？它帮助您每次想要复制和粘贴文本或任何其他元素时节省约2秒。但是在构建代码时自动化一些过程呢？是的，这将会很有帮助，您可以使用键盘快捷键来实现。
- en: 'Shortcuts that you should know in your IDE are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您的IDE中应该知道的快捷键如下：
- en: Duplicating line
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制行
- en: Deleting line
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除行
- en: Moving line
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动行
- en: Formatting code
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化代码
- en: Cross browser compatibility – which browsers should you install?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨浏览器兼容性 - 您应该安装哪些浏览器？
- en: 'To test your code, you will need all the modern web browsers. In your list,
    you should have the following browsers:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的代码，您将需要所有现代的Web浏览器。在您的列表中，您应该有以下浏览器：
- en: Google Chrome (newest version)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Chrome（最新版本）
- en: Mozilla Firefox (newest version)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla Firefox（最新版本）
- en: Mozilla Firefox developers edition (newest version)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla Firefox开发者版（最新版本）
- en: Opera (newest version)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera（最新版本）
- en: Safari (newest version)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari（最新版本）
- en: Internet Explorer
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer
- en: Internet Explorer (IE) is the biggest issue in frontend developers' lives because
    you will need a bunch of IEs on your machine, for example, 9, 10, and 11\. The
    list is getting smaller because back in the days the list was longer. IE6, 7,
    8, 9, and so on. Now IE6, 7, and 8 are mostly not supported by the biggest web
    projects like YouTube and Facebook. But it sometimes occurs in big companies in
    which the changing of operating systems is a pretty complicated process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer（IE）是前端开发人员生活中最大的问题，因为你需要在你的机器上安装一堆IE，比如9、10和11。这个列表越来越小，因为过去这个列表更长。IE6、7、8、9等。现在IE6、7和8在像YouTube和Facebook这样的大型网络项目中大多数情况下不被支持。但在一些大公司中，更改操作系统是一个相当复杂的过程。
- en: 'To easily test your code on a bunch of browsers, it is good to use online tools
    dedicated for this test:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要在一堆浏览器上轻松测试你的代码，最好使用专门用于此测试的在线工具：
- en: '[https://crossbrowsertesting.com/](https://crossbrowsertesting.com/)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://crossbrowsertesting.com/](https://crossbrowsertesting.com/)'
- en: '[https://www.browserling.com/](https://www.browserling.com/)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.browserling.com/](https://www.browserling.com/)'
- en: '[https://www.browserstack.com/](https://www.browserstack.com/)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.browserstack.com/](https://www.browserstack.com/)'
- en: But an easy and free way to do it is to create a virtual machine on your computer
    and use the system and browser which you need. To collect the required versions
    of IE, you can refer to [http://modern.ie](http://modern.ie). With `modern.ie`,
    you can select the IE version you need and your version of virtual machine platform
    (VirtualBox, Parallels, Vagrant, VMware).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但一个简单而免费的方法是在你的计算机上创建一个虚拟机，并使用你需要的系统和浏览器。要收集所需版本的IE，你可以参考[http://modern.ie](http://modern.ie)。使用`modern.ie`，你可以选择你需要的IE版本和你的虚拟机平台版本（VirtualBox，Parallels，Vagrant，VMware）。
- en: How to use inspector
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用检查器
- en: Dealing with HTML and CSS code is almost impossible nowadays without inspector.
    In this tool, you can see the markup and CSS. Additionally, you can see the box
    model. This is well known too in browsers for web developers. A few years ago,
    everybody was using Firebug dedicated for Firefox. Now each modern browser has
    its own built-in inspector, which helps you to debug a code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有检查器的情况下处理HTML和CSS代码现在几乎是不可能的。在这个工具中，你可以看到标记和CSS。此外，你还可以看到盒模型。这对于网页开发人员在浏览器中也是众所周知的。几年前，每个人都在使用专门为Firefox设计的Firebug。现在每个现代浏览器都有自己内置的检查器，它可以帮助你调试代码。
- en: The easiest way to invoke inspector is to right-click on an element and choose
    **Inspect**. In Chrome, you can do it with a key shortcut. In Windows, you have
    to press *F12*. In MAC OSX, you can use *cmd* + *alt* + *I* to invoke inspector.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 调用检查器的最简单方法是右键单击元素，然后选择**检查**。在Chrome中，你可以使用快捷键。在Windows中，你需要按下*F12*。在MAC OSX中，你可以使用*cmd*
    + *alt* + *I*来调用检查器。
- en: '![How to use inspector](img/00002.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用检查器](img/00002.jpeg)'
- en: Key shortcuts
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快捷键
- en: For faster using of your browser, it's good to know some key combinations that
    will speed up the process.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更快地使用你的浏览器，最好知道一些可以加快进程的快捷键组合。
- en: '| Key combination | Function |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 快捷键组合 | 功能 |'
- en: '| --- | --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *Ctrl* + *R*, *cmd* + *R* | Reload |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl* + *R*, *cmd* + *R* | 重新加载 |'
- en: '| *Ctrl* + *Shift* + *R*, *cmd* + *shift* + *R* | Reload with cache |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl* + *Shift* + *R*, *cmd* + *shift* + *R* | 带缓存重新加载 |'
- en: '| *cmd* + *I*, *F12* | Inspector |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| *cmd* + *I*, *F12* | 检查器 |'
- en: '| *Ctrl* + *U*, *cmd* + *alt* + *U* | Source of page |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl* + *U*, *cmd* + *alt* + *U* | 页面源 |'
- en: Preprocessor – why should you use them?
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预处理器-为什么应该使用它们？
- en: 'A preprocessor is a program that will build CSS code from other syntax similar
    or almost identical to CSS. The main advantages of preprocessors are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理器是一个程序，它将从其他类似或几乎相同于CSS的语法构建CSS代码。预处理器的主要优点如下：
- en: Code nesting
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码嵌套
- en: Ability of using variables
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用变量的能力
- en: Ability of creating mixins
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建mixin的能力
- en: Ability of using mathematical/logical operations
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数学/逻辑运算的能力
- en: Ability of using loops and conditions
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用循环和条件的能力
- en: Joining of multiple files
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并多个文件
- en: Nesting elements in preprocessors
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在预处理器中嵌套元素
- en: 'Preprocessors give you the advantage of building code with nesting of declarations.
    In simple CSS, you have to write the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理器使你能够建立具有声明嵌套的代码的优势。在简单的CSS中，你需要写以下内容：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preprocessor, you just need to write the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在预处理器中，你只需要写以下内容：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or in SASS with the following indentation:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在SASS中使用以下缩进：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And it will simply compile to code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它将简单地编译成代码：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The proper usage of nesting will give you the best results. You need to know
    that good CSS code.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的嵌套用法会给你最好的结果。你需要知道良好的CSS代码。
- en: Using variables to parametrize your CSS code
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量来参数化你的CSS代码
- en: In good CSS code, there is no possibility to use variables in all browsers.
    Sometimes you are using same value in the few places, but when you have change
    requests from client/project manager/account manager, you just immediately need
    to change some colors/margins, and so on. In CSS, usage of variables is not supported
    in old versions of Internet Explorer. Usage of variables is possible with CSS
    preprocessors.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在良好的CSS代码中，所有浏览器都不可能使用变量。有时你在几个地方使用相同的值，但当你从客户/项目经理/客户经理那里收到更改请求时，你立即需要更改一些颜色/边距等。在CSS中，旧版本的Internet
    Explorer不支持使用变量。使用变量是可能的，使用CSS预处理器。
- en: Using mixins in preprocessors
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在预处理器中使用mixin
- en: 'In classic programming language, you can use functions to execute some math
    operations or do something else like displaying text. In CSS, you haven''t got
    this feature, but in preprocessors you can create mixins. For example, you need
    prefixes for border-radius (old IE, Opera versions):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典的编程语言中，你可以使用函数来执行一些数学运算或做其他事情，比如显示文本。在CSS中，你没有这个功能，但在预处理器中你可以创建mixin。例如，你需要为border-radius（旧IE，Opera版本）添加前缀：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can create a mixin (in SASS):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在SASS中创建一个mixin：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And then invoke it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后调用它：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Mathematical operations
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学运算
- en: 'In preprocessors, you can use math operations like the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在预处理器中，你可以使用以下数学运算：
- en: Addition
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法
- en: Subtraction
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减法
- en: Multiplying
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法
- en: Dividing
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除法
- en: 'As an example, we can create simple grid system. You will need, for example,
    10 columns with a resolution of 1,000 pixels:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以创建简单的网格系统。例如，您需要10列，分辨率为1,000像素：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Logic operations and loops
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑操作和循环
- en: Without a logical operator's comparison of operations and loops, you cannot
    create a good program in classic programming language. The same applies to preprocessors.
    You need them to automatize the creation of classes/mixins, and so on. The following
    is the list of possible operators and loops.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 没有逻辑运算符的比较操作和循环，您无法在经典编程语言中创建良好的程序。预处理器也是如此。您需要它们来自动创建类/ mixin等。以下是可能的运算符和循环的列表。
- en: 'The list of comparison operators is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符的列表如下：
- en: '`<`: less than'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<`：小于'
- en: '`>`: greater than'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>`：大于'
- en: '`==`: equal to'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`==`：等于'
- en: '`!=`: not equal to'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!=`：不等于'
- en: '`<=`: less or equal than'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<=`：小于或等于'
- en: '`>=`: greater or equal than'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>=`：大于或等于'
- en: 'The list of logical operators is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑运算符的列表如下：
- en: '`and`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`and`'
- en: '`or`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`or`'
- en: '`not`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not`'
- en: 'The list of loops is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的列表如下：
- en: '`if`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`'
- en: '`for`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`'
- en: '`each`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`each`'
- en: '`while`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`'
- en: Joining of multiple files
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个文件的连接
- en: 'In classic CSS, you can import files into one CSS document. But in a browser,
    it still makes additional requests to the server. So, let''s say when you have
    a file with the following content:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典CSS中，您可以将文件导入一个CSS文档。但在浏览器中，它仍然会向服务器发出额外的请求。所以，比方说当您有一个文件，其中包含以下内容：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It will generate four additional requests to CSS files. With a preprocessor,
    each `@import` makes a merging for you, and in this place you will have the content
    of the mentioned file. So, finally, you have four files in one.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 它将生成四个额外的CSS文件请求。使用预处理器，每个`@import`都会为您合并，在这个地方您将得到所提到文件的内容。所以，最终，您将得到一个文件中的四个文件。
- en: Less – a short introduction
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Less – 简短介绍
- en: Less is a preprocessor mainly used in a Bootstrap framework. It has all the
    features of a preprocessor (mixins, math, nesting, and variables).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Less是主要用于Bootstrap框架的预处理器。它具有预处理器的所有功能（mixin，数学，嵌套和变量）。
- en: '![Less – a short introduction](img/00003.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Less – a short introduction](img/00003.jpeg)'
- en: 'One of the good features is the quick invoking of declared mixins. For example,
    you have created a class:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个好功能是快速调用已声明的mixin。例如，您已创建了一个类：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then you can add declared properties with its values in other elements declared
    in your less file (it works like a mixin):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在您的less文件中声明的其他元素中添加已声明属性及其值（它的工作原理类似于mixin）：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will finally get the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最终您将得到以下内容：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: CSS with Stylus
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Stylus的CSS
- en: 'Stylus has two versions of code (like SASS): one with braces/semicolons and
    the other without braces/semicolons. Additionally (over SASS), you can omit colons.
    If it continues to be developed and still retains its present features, it''s
    going to be the biggest competitor for SASS.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Stylus有两个版本的代码（类似SASS）：一个带有大括号/分号，另一个不带大括号/分号。此外（超过SASS），您可以省略冒号。如果它继续开发并保留其现有功能，它将成为SASS的最大竞争对手。
- en: '![CSS with Stylus](img/00004.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![CSS with Stylus](img/00004.jpeg)'
- en: SASS – the most mature preprocessor
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SASS – 最成熟的预处理器
- en: SASS stands for **Syntactically Awesome Stylesheets**. It first appeared in
    2006 and was mainly connected to **Ruby on Rails** (**RoR**) projects. Agile methodology
    used in RoR had an influence on frontend development. This is currently the best
    known CSS preprocessor used in the Foundation framework with the combination of
    Compass. A new version of the Twitter Bootstrap (fourth version) framework is
    going to be based on SASS too.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: SASS代表**Syntactically Awesome Stylesheets**。它首次出现于2006年，主要与**Ruby on Rails**（**RoR**）项目相关联。RoR中使用的敏捷方法对前端开发产生了影响。这是目前在Foundation框架中使用的最知名的CSS预处理器，结合了Compass。Twitter
    Bootstrap的新版本（第四版）框架也将基于SASS。
- en: '![SASS – the most mature preprocessor](img/00005.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![SASS – the most mature preprocessor](img/00005.jpeg)'
- en: 'In SASS, you can write code in a CSS-like version called **SCSS**. This version
    of code looks pretty similar to CSS syntax:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中，您可以以称为**SCSS**的CSS样式版本编写代码。这个代码版本看起来非常类似于CSS语法：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second version of code is SASS. It uses indentations and is the same as
    the preceding code, but written in SASS:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第二个版本是SASS。它使用缩进，与前面的代码相同，但是用SASS编写：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can see bigger differences in mixins. To invoke a mixin in SCSS, write
    the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在mixin中看到更大的差异。要在SCSS中调用mixin，请写以下内容：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To invoke a mixin in SASS, write the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SASS中调用mixin，请写以下内容：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, SASS is a shorter version than SCSS. Because of the shortcuts
    and the automatization processes it is highly recommend to use SASS over SCSS—write
    Less—get more.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，SASS比SCSS更短。由于快捷方式和自动化过程，强烈建议使用SASS而不是SCSS——写Less——获得更多。
- en: Personally I'm using SASS. Why? The first reason is its structure. It looks
    very similar to Jade (an HTML preprocessor). Both of them are based on indentation
    and it is easy stylize Jade code. The second reason is the shorter versions of
    functions (especially mixins). And the third reason is its readability. Sometimes,
    when your code is bigger, the nesting in SCSS looks like a big mess. If you want,
    for example, to change a nested class to be in any other element, you have to
    change your `{}`. In SASS, you are just dealing with indentation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人使用SASS。为什么？第一个原因是它的结构。它看起来非常类似于Jade（一种HTML预处理器）。它们两者都基于缩进，很容易对Jade代码进行样式化。第二个原因是函数的较短版本（特别是mixin）。第三个原因是它的可读性。有时，当您的代码更大时，SCSS中的嵌套看起来像一个大混乱。例如，如果您想将嵌套类更改为任何其他元素，您必须更改您的`{}`。在SASS中，您只需处理缩进。
- en: Short comparison
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简短比较
- en: 'I''ve been working a lot with Less and SASS. Why did I finally chose SASS?
    Because of the following reasons:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在使用Less和SASS。为什么我最终选择了SASS？因为以下原因：
- en: It's a mature preprocessor
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个成熟的预处理器
- en: It has very good math operations
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有非常好的数学运算
- en: It has extensions (Compass, Bourbon)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有扩展（Compass，Bourbon）
- en: 'Usage of Compass is recommended because:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用Compass，因为：
- en: It has a collection of modern mixins
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有一系列现代mixin
- en: It creates sprites
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创建精灵
- en: 'Most preprocessors have the same options and the reason you will choose one
    is your own preferences. In this book, I will be using SASS and Compass. In the
    following table, you can find a short comparison:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数预处理器都具有相同的选项，您选择的原因是您自己的偏好。在本书中，我将使用SASS和Compass。在下表中，您可以找到一个简短的比较：
- en: '|   | Less | Stylus | SASS |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '|  | Less | Stylus | SASS |'
- en: '| --- | --- | --- | --- |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Variables | Yes | Yes | Yes |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 是 | 是 | 是 |'
- en: '| Nesting | Yes | Yes | Yes |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 嵌套 | 是 | 是 | 是 |'
- en: '| Mixins | Yes | Yes | Yes |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 混合 | 是 | 是 | 是 |'
- en: '| Math | Yes | Yes | Yes |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 数学 | 是 | 是 | 是 |'
- en: '| Additional collections of mixins | No | No | Yes (Compass/Bourbon) |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 额外的混合集合 | 否 | 否 | 是（Compass/Bourbon） |'
- en: SASS foundation
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SASS基础
- en: 'Using the SASS preprocessor is really simple. You can use it in two ways: SCSS
    and SASS itself. Using the SASS preprocessor is really simple. You can use it
    in two ways: SCSS and SASS. The SCSS syntax looks like extended CSS. You can nest
    your definitions using new braces. SASS syntax is based on indent (similar for
    example to Python language).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SASS预处理器非常简单。您可以以两种方式使用它：SCSS和SASS本身。SCSS语法看起来像扩展的CSS。您可以使用新的大括号嵌套您的定义。SASS语法基于缩进（类似于Python语言）。
- en: Variables – where and how to use
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量 - 在哪里以及如何使用
- en: Using variables is the essential feature of SASS, which is mostly impossible
    in CSS that is used on most modern browsers. Variables can be used in every element
    that you want to parametrize, such as colors, margins, paddings, and fonts.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变量是SASS的基本功能，在大多数现代浏览器上使用的CSS中几乎不可能。变量可用于您想要参数化的每个元素，例如颜色、边距、填充和字体。
- en: To define variables in SASS, you just need to do it with the `$` sign and add
    the name of your variable after it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SASS中定义变量，您只需要使用`$`符号并在其后添加您的变量名称。
- en: 'In SCSS:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在SCSS中：
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Usage:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 用法：
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Simple mixins – where and how to use (@mixin, @include)
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的混合 - 在哪里以及如何使用（@mixin，@include）
- en: As mentioned in the previous section, variables can be used to parametrize the
    code. The second best known feature is to add some predefined block of code that
    you can invoke with some shorter version.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，变量可用于参数化代码。第二个最为人所知的功能是添加一些预定义的代码块，您可以使用一些更短的版本来调用。
- en: 'In SCSS, you can predefine it this way:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在SCSS中，您可以预定义它的方式：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And then invoke with:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过以下方式调用：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the SASS version:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS版本中：
- en: '[PRE22]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And invoke it with:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过以下方式调用：
- en: '[PRE23]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: 'SASS:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Compiled CSS:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Extending classes (@extend)
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展类（@extend）
- en: 'What does `@extend` make in SASS code? For example, you have a part of code
    that is repeating in all fonts:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`@extend`在SASS代码中的作用是什么？例如，您有一部分代码在所有字体中重复：'
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And you don''t want to repeat this part of code in the next selector. You will
    write in SASS:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您不希望在下一个选择器中重复此部分代码。您将在SASS中编写：
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The code it will generate will look like the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的代码如下所示：
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This SASS feature is great to build optimized code. Remember to use it in your
    project over mixins, which will generate more code.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这个SASS功能非常适合构建优化的代码。请记住在项目中使用它而不是混合，这将生成更多的代码。
- en: Importing files (@import)
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入文件（@import）
- en: 'In CSS, you could import CSS files into one root file with `@import`. For example:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，您可以使用`@import`将CSS文件导入一个根文件。例如：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In SASS, you can import SASS/SCSS files into one with an automatic merge option.
    In case you have, for example, two files that you want to include in one SASS
    file, you need to write the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中，您可以将SASS/SCSS文件导入一个自动合并选项中。例如，如果您有两个文件想要包含在一个SASS文件中，您需要编写以下代码：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see in the preceding code, you don't need to add an extension of
    the file into `import` as it automatically loads the SASS or SCSS file. The only
    thing you need to remember is to have only one file in this example named, `typography`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在上述代码中所见，您不需要在`import`中添加文件的扩展名，因为它会自动加载SASS或SCSS文件。您唯一需要记住的是在这个例子中只有一个名为`typography`的文件。
- en: Let's check how it will behave in real code. Imagine that we have two files,
    `_typography.sass` and `_grid.sass`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它在实际代码中的表现。假设我们有两个文件，`_typography.sass`和`_grid.sass`。
- en: 'File `_grid.sass`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`_grid.sass`：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'File `_typography.sass`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`_typography.sass`：
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now let''s create a `style.sass` file:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个`style.sass`文件：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After compilation of `style.sass`, you will see a `style.css` file:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 编译`style.sass`后，您将看到一个`style.css`文件：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As you can see, two files are merged into one CSS, so, additionally, we made
    a small optimization of code because we reduced the number of requests to the
    server. In case of three files, we have three requests (`style.css`, then `typography.css`,
    and `grid.css`). Now there will be only one request.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，两个文件合并成一个CSS文件，因此我们还对代码进行了小优化，因为我们减少了对服务器的请求次数。如果有三个文件，我们将有三个请求（`style.css`，然后`typography.css`和`grid.css`）。现在只会有一个请求。
- en: Using of & in SASS
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在SASS中使用`&`
- en: 'Sometimes, in nesting, you will need to use the name of the selector that you
    are currently describing. As a best description of the problem, you need to first
    describe a link:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在嵌套中，您需要使用您当前描述的选择器的名称。作为问题的最佳描述，您需要首先描述一个链接：
- en: '[PRE35]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'and then:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE36]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In SCSS, you can use `&` to do that:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在SCSS中，您可以使用`&`来做到这一点：
- en: '[PRE37]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In SASS:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中：
- en: '[PRE38]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can resolve with this element other problems like combining names:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此元素解决其他问题，例如组合名称：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In SCSS:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在SCSS中：
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In SASS:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中：
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This option has been possible since SASS 3.5\. It will be very helpful in creating
    code build in BEM methodologies.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 自SASS 3.5以来，这个选项已经成为可能。在创建基于BEM方法的代码时，这将非常有帮助。
- en: Compass features
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Compass功能
- en: Compass is a very useful SASS framework, especially when you are working with
    a big list of icons/reusable images. What you need to do is gather all the images
    in one folder in your project. For example, `yourfolder/envelope.png` and `yourfloder/star.png`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Compass是一个非常有用的SASS框架，特别是当您使用大量图标/可重用图像时。您需要做的是将所有图像收集到项目中的一个文件夹中。例如，`yourfolder/envelope.png`和`yourfloder/star.png`。
- en: 'Then in your SASS code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在您的SASS代码中：
- en: '[PRE42]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then in your code, you can use images as an example:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在您的代码中，您可以使用图像作为示例：
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And it will add a code to your classes:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 它将向您的类添加代码：
- en: '[PRE44]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Where `-100px` and `-200px` are examples of offset in your sprite.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`-100px`和`-200px`是您精灵中的偏移量的示例。
- en: Simple automatization (with Gulp)
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的自动化（使用Gulp）
- en: Every time we are compiling project files (for example, Compass, Jade, image
    optimization, and so on), we are thinking about how we can automatize and speed
    up the process. The first idea—some terminal snippets and compiling invokers.
    But we can use `grunt.js` and `gulp.js`. What are Grunt and Gulp? In short—task
    runners. You can define a list of tasks, which you repeat all the time, group
    them into some logical structure, and run.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们编译项目文件（例如Compass、Jade、图像优化等），我们都在考虑如何自动化和加快这个过程。第一个想法是一些终端片段和编译调用者。但我们可以使用`grunt.js`和`gulp.js`。Grunt和Gulp是什么？简而言之——任务运行器。您可以定义一系列任务，这些任务您一直重复，将它们分组到一些逻辑结构中，并运行。
- en: In most projects, you can use them to automatize a process of SASS/Compass compilation.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数项目中，您可以使用它们来自动化SASS/Compass编译过程。
- en: 'I assume that you have installed Node.js, Ruby, sass, and Compass. If not,
    I recommend you to do this first. To install all of the listed software, you need
    to visit:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设您已经安装了Node.js、Ruby、sass和Compass。如果没有，我建议您首先这样做。要安装所有列出的软件，您需要访问：
- en: '[https://nodejs.org/en/](https://nodejs.org/en/) to install Node.js'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://nodejs.org/en/](https://nodejs.org/en/) 安装Node.js'
- en: '[https://www.ruby-lang.org/en/](https://www.ruby-lang.org/en/) to install Ruby'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ruby-lang.org/en/](https://www.ruby-lang.org/en/) 安装Ruby'
- en: '[http://sass-lang.com/](http://sass-lang.com/) to install SASS'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://sass-lang.com/](http://sass-lang.com/) 安装SASS'
- en: '[http://compass-style.org/](http://compass-style.org/) to install Compass'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://compass-style.org/](http://compass-style.org/) 安装Compass'
- en: '[http://gulpjs.com/](http://gulpjs.com/) to install Gulp globally on your machine'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://gulpjs.com/](http://gulpjs.com/) 在您的机器上全局安装Gulp'
- en: On these pages, you can find guides and tutorials on how to install all of this
    software.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些页面上，您可以找到有关如何安装所有这些软件的指南和教程。
- en: 'Then you will need to create a basic structure for your project. It is best
    to create folders:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要为项目创建一个基本结构。最好创建文件夹：
- en: '`src`: In this folder we will keep our source files'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：在这个文件夹中，我们将保存我们的源文件'
- en: '`dist`: In this folder we will keep our compiled files'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dist`：在这个文件夹中，我们将保存我们的编译文件'
- en: In the `src` folder, please create a `css` folder, which will keep our SASS
    files.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src`文件夹中，请创建一个`css`文件夹，其中将保存我们的SASS文件。
- en: 'Then in the `root` folder, run the following command line:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`root`文件夹中运行以下命令行：
- en: '[PRE45]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In `gulpfile.js` add the following lines of code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在`gulpfile.js`中添加以下代码行：
- en: '[PRE46]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now you can run your automatizer with the following in your command line:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在命令行中运行您的自动化程序：
- en: '[PRE47]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will run the `default` task from your `gulpfile.js`, which will add a watcher
    to the files with `.sass` extensions, which are located in the `src/css` folder.
    Every time you change any file in this location, your task `compass` will run.
    It means that it will run the `compass` task and create a sourcemap for us. We
    could use a default `compass` command, but `gulp.js` is a part of the modern frontend
    developer workflow. We will be adding new functions to this automatizer in the
    next chapters.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从您的`gulpfile.js`运行`default`任务，该任务将向具有`.sass`扩展名的文件添加监视器，这些文件位于`src/css`文件夹中。每次更改此位置中的任何文件时，您的`compass`任务将运行。这意味着它将运行`compass`任务并为我们创建一个源映射。我们可以使用默认的`compass`命令，但`gulp.js`是现代前端开发人员工作流程的一部分。我们将在下一章中向这个自动化程序添加新功能。
- en: 'Let''s analyze the code a little deeper:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入分析一下代码：
- en: '[PRE48]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The preceding code defines the default task. It appends a watcher, which checks
    the `src/css/**/*.sass` location for sass files. It means that every file in a
    `src/css` folder and any subsequent folder, for example, `src/css/folder/file.sass`,
    will have a watcher. When files in this location are changed, the task defined
    in the array `[compass]`will run. Our `task compass` is the only element in the
    array but it, of course, can be extended (we will do this in the next chapters).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定义了默认任务。它附加了一个监视器，用于检查`srs/css/**/*.sass`位置的sass文件。这意味着`src/css`文件夹中的每个文件和任何后续文件夹，例如`src/css/folder/file.sass`，都将有一个监视器。当此位置的文件发生更改时，数组`[compass]`中定义的任务将运行。我们的`task
    compass`是数组中唯一的元素，但它当然可以扩展（我们将在下一章中进行）。
- en: 'Now let''s analyze the `task compass`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析`task compass`：
- en: '[PRE49]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'It will compile the `gulp.src(''src/styles/main.sass)`file and save the compiled
    file in `pipe` (`gulp.dest(''style.css'')`). The `compass` task is defined in
    `pipe`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 它将编译`gulp.src('src/styles/main.sass)`文件，并将编译后的文件保存在`pipe`（`gulp.dest('style.css')`）中。`compass`任务在`pipe`中定义：
- en: '[PRE50]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The first line of this task defines the source folder for SASS files. The second
    line defines the images folder. The third line sets the destination of the CSS
    file. The fourth line is set to generate a source map for the file (for easier
    debugging).The fifth line defines the style of the saved CSS file; in this case,
    it will be compressed (it means that it will be ready for production code).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务的第一行定义了SASS文件的源文件夹。第二行定义了图像文件夹。第三行设置了CSS文件的目标位置。第四行设置为为文件生成源映射（以便更容易调试）。第五行定义了保存的CSS文件的样式；在这种情况下，它将被压缩（这意味着它将准备用于生产代码）。
- en: Pixelperfect layouts tools
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 像素完美的布局工具
- en: In a common workflow, a graphic designer creates the design of a website/application.
    Then, next in the process is the HTML/CSS coding. After the development process,
    the project is in the **quality assurance** (**QA**) phase. Sometimes it's focused
    only on the functional side of the project, but in a good workflow, it checks
    of graphic design phase. During the QA process, the designer is involved, he/she
    will find all pixels that are not good in your code. How would check all the details
    in a pixelperfect project?
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在常见的工作流程中，图形设计师创建网站/应用程序的设计。然后，在开发过程中，项目处于**质量保证**（**QA**）阶段。有时它只关注项目的功能方面，但在良好的工作流程中，它检查了图形设计阶段。在QA过程中，设计师参与其中，他/她将找到代码中所有不好的像素。如何检查像素完美项目中的所有细节？
- en: The question is about mobile projects. How to check if it is still pixel perfect
    when it needs to be flexible in browsers? You will need to make it in described
    ranges. For example, you have to create HTML/CSS for the web page, which has three
    views for mobile, tablet, and desktop. You will need plugins, which will help
    you to build pixel perfect layouts.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是关于移动项目。在需要在浏览器中灵活时如何检查它是否仍然是像素完美的？您将需要在描述的范围内进行。例如，您必须为具有移动、平板和桌面三种视图的网页创建HTML/CSS。您将需要插件，这些插件将帮助您构建像素完美的布局。
- en: Pixelfperfect plugin
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pixelfperfect插件
- en: Pixelperfect plugin will help you to compare design with your HTML/CSS in your
    browser. This plugin is available on Firefox and Chrome. To work with it, you
    need to make a screenshot of your design and add it in a plugin. Then you can
    set a position of image and opacity. This plugin is one of the most used by frontend
    developers to create pixel perfect HTML layouts.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Pixelperfect插件将帮助您在浏览器中将设计与您的HTML/CSS进行比较。此插件可在Firefox和Chrome上使用。要使用它，您需要对设计进行截图并将其添加到插件中。然后，您可以设置图像的位置和不透明度。这个插件是前端开发人员中最常用的之一，用于创建像素完美的HTML布局。
- en: '![Pixelfperfect plugin](img/00006.jpeg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![Pixelfperfect插件](img/00006.jpeg)'
- en: MeasureIT plugin
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MeasureIT插件
- en: This plugin will help you to keep proper distances between elements, fonts,
    and so on. As you can see in the following screenshot, it looks like a ruler over
    your web page. It is easy to use—just click on the plugin icon in the browser
    and then click on the website (it will start the ruler), and move the cursor to
    the place to which you want to know the distance, and voila!
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件将帮助您在元素、字体等之间保持适当的距离。正如您在下面的截图中所看到的，它看起来像是在您的网页上的标尺。它很容易使用-只需单击浏览器中的插件图标，然后单击网站（它将启动标尺），并将光标移动到您想要知道距离的地方，然后就完成了！
- en: '![MeasureIT plugin](img/00007.jpeg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![MeasureIT插件](img/00007.jpeg)'
- en: Checking compatibility
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查兼容性
- en: Some CSS features don't work in all browsers. Some new properties need browser-specific
    prefixes (like `-ms`, `-o`, `-webkit`) to work properly across all modern browsers.
    But how to check if you can use some properties in your project? Of course, you
    can check it yourself, but the easiest way is to check it on [http://caniuse.com/](http://caniuse.com/).
    You can open this web page and check which properties you can use.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一些CSS特性在所有浏览器中都不起作用。一些新属性需要特定于浏览器的前缀（如`-ms`、`-o`、`-webkit`）才能在所有现代浏览器中正常工作。但是如何检查您是否可以在项目中使用某些属性呢？当然，您可以自己检查，但最简单的方法是在[http://caniuse.com/](http://caniuse.com/)上进行检查。您可以打开这个网页并检查您可以使用哪些属性。
- en: '![Checking compatibility](img/00008.jpeg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![检查兼容性](img/00008.jpeg)'
- en: Good assumptions in code
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码中的良好假设
- en: 'While you are creating CSS code, you have to remember initial assumptions that
    will help you to keep clear and very readable code. These assumptions are as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建CSS代码时，您必须记住以下初始假设，这将帮助您保持清晰和非常可读的代码。这些假设如下：
- en: Naming convention—You need to remember that your code needs to be the exact
    names of classes.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名约定-您需要记住，您的代码需要是类的确切名称。
- en: Use comments, but not everywhere, only in places where they are needed. Yeah,
    but when they are needed? They are especially needed when you have some exception
    or when you have some quick fixes for browsers. With comments, you can describe
    blocks of code, which describes the views, for example, of footer/header, or any
    other element.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用注释，但不是到处都是，只在需要它们的地方。是的，但什么时候需要它们？当您有一些异常或者当您需要一些快速修复浏览器时，它们尤其需要。通过注释，您可以描述代码块，例如页脚/页眉的视图，或者任何其他元素。
- en: 'Try to keep code which is readable and logical. But how does unlogical code
    look like? Look at the following two examples:'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量保持可读和逻辑的代码。但是不合逻辑的代码是什么样的呢？看下面的两个例子：
- en: 'Example 1 is as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1如下：
- en: '[PRE51]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Example 2 is as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2如下：
- en: '[PRE52]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Which code looks better? Yeah, of course, the second example because it has
    grouped declarations. First the description of the box model, then the font and
    text behaviors, and finally color. You can try to keep it in another hierarchy
    which will be more readable for you.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种代码看起来更好？是的，当然是第二个例子，因为它有分组声明。首先是框模型的描述，然后是字体和文本行为，最后是颜色。您可以尝试将其保持在另一个层次结构中，这将对您更具可读性。
- en: 'Using sample 2 in SASS:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中使用示例2：
- en: '[PRE53]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Isn't it shorter and more logical?
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 是不是更短更合乎逻辑？
- en: Create proper selectors (this will be described later in this chapter).
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建适当的选择器（这将在本章后面描述）。
- en: Create an elastic structure for your files.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的文件创建一个弹性结构。
- en: Creating proper selectors
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建适当的选择器
- en: The main problem of the CSS coder is creating proper selectors. Knowledge about
    priors in selectors is mandatory. It will help you to omit the `!important` statement
    in your code and will help you to create smaller and more readable files.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: CSS编码人员的主要问题是创建适当的选择器。了解选择器中的优先级是强制性的。它将帮助您在代码中省略`!important`语句，并帮助您创建更小、更可读的文件。
- en: Using IDs
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ID
- en: 'Using of IDs in CSS is rather bad behavior. The foundation of HTML says that
    an ID is unique and should be used only once in an HTML code. It is good to omit
    IDs in CSS and use them only when it is the only way to style some element:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中使用ID是相当不好的行为。HTML的基础规定ID是唯一的，应该在HTML代码中只使用一次。最好在CSS中省略ID，并仅在需要样式化某些元素时使用它们：
- en: '[PRE54]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Usage of IDs in CSS code is bad behavior because selectors based on ID are
    stronger than selectors based on classes. This is confusing in legacy code when
    you see that some part of the code is still preceded by another selector because
    it is added in the ID''s parents-based selector as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS代码中使用ID是不好的行为，因为基于ID的选择器比基于类的选择器更强。当您看到代码的某些部分仍然由另一个选择器前置时，这在旧代码中是令人困惑的，因为它添加在ID的父级选择器中，如下所示：
- en: '[PRE55]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: It is good to omit this problem in your projects. First, think twice if a selector
    based on an ID is a good idea in this place and if this cannot be replaced with
    any other "weaker" selector.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目中最好避免这个问题。首先，仔细考虑一下，基于ID的选择器在这个地方是否是一个好主意，是否可以用任何其他“较弱”的选择器替换它。
- en: Using classes
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类
- en: 'Classes are the best friends of the HTML/CSS coder. They are reusable elements
    that you can define and then reuse as much as you want in your HTML code, for
    example:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 类是HTML/CSS编码者的最佳朋友。它们是可重用的元素，您可以定义，然后在HTML代码中尽可能多地重用，例如：
- en: '[PRE56]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Grouping selectors
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分组选择器
- en: 'You can group and nest selectors. First, let''s nest them:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对选择器进行分组和嵌套。首先，让我们嵌套它们：
- en: '[PRE57]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then let''s group them:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我们将它们分组：
- en: '[PRE58]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Interesting selectors
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有趣的选择器
- en: In CSS code, you need to be a selector specialist. It is a very important skill
    to make a right selector that will match a specific element in the DOM structure.
    Let's provide a little bit of fundamental knowledge about selectors.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS代码中，您需要成为选择器专家。这是一个非常重要的技能，可以创建正确的选择器，以匹配DOM结构中的特定元素。让我们提供一些关于选择器的基础知识。
- en: Adjacent sibling combinatory +
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相邻兄弟组合符号+
- en: 'The plus sign in CSS can be used in selectors in which you will need to select
    an element right after the element on the left side of the plus sign, for example:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，加号可以用在选择器中，您需要选择紧跟在加号左侧元素后面的元素，例如：
- en: '[PRE59]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This selector will return `a`, which is right after the `p` selector, like
    in the following example:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器将返回`a`，它紧跟在`p`选择器后面，就像下面的例子中一样：
- en: '[PRE60]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'But it won''t work in the following case:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 但在以下情况下不起作用：
- en: '[PRE61]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Child combinator ">"
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子组合符号">"
- en: 'With element (`>`) in the selector, you can match every element that is right
    into the element. Let''s analyze the following example:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元素（`>`）在选择器中，您可以匹配每个直接在元素中的元素。让我们分析下面的例子：
- en: '[PRE62]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This selector will return all `<a>` elements which are into`<p>` element but
    are not nested deeper, for example:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器将返回所有在`<p>`元素中但没有更深层嵌套的`<a>`元素，例如：
- en: '[PRE63]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'But this won''t work in the following case:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 但在以下情况下不起作用：
- en: '[PRE64]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Adjacent sibling combinatory ~
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相邻兄弟组合符号~
- en: 'With `~,` you can create a selector that will match every element that is parallel
    in the DOM structure, for example:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`~`，您可以创建一个选择器，它将匹配DOM结构中的每个平行元素，例如：
- en: '[PRE65]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This selector will work in the following cases:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器将在以下情况下起作用：
- en: '[PRE66]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'and:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 和：
- en: '[PRE67]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Getting elements by attributes
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过属性获取元素
- en: 'Sometimes, there is no way to create a selector based on elements, classes,
    and IDs. So this is the moment when you need to search for any other possibility
    to create the right selector. It is possible to get elements by their attributes
    (`data`, `href`, and so on):'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，无法根据元素、类和ID创建选择器。这就是您需要寻找任何其他可能性来创建正确选择器的时刻。可以通过它们的属性（`data`、`href`等）获取元素：
- en: '[PRE68]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'It will return the following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回以下内容：
- en: '[PRE69]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'And will also return the following:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 并且还将返回以下内容：
- en: '[PRE70]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Attributes with exact value [attribute="value"]
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有确切值的属性 [attribute="value"]
- en: 'In real CSS/HTML code, there are examples when you will need a selector which
    is based on attributes with an exact value like inputs with the type as text or
    when elements data attribute is set with some value. It is possible with a selector
    which is similar to this example code:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的CSS/HTML代码中，有时您需要基于具有确切值的属性创建选择器，例如类型为文本的输入或元素数据属性设置为某个值。可以使用类似于此示例代码的选择器：
- en: '[PRE71]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'will match:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 将匹配：
- en: '[PRE72]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Attributes which begin with [attribute^="value"]
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以 [attribute^="value"] 开头的属性
- en: 'This selector is very useful when you want to match elements with attributes
    that begin with some specific string. Let''s check an example:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要匹配以某个特定字符串开头的属性的元素时，这个选择器非常有用。让我们来看一个例子：
- en: '[PRE73]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'SASS code:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: SASS代码：
- en: '[PRE74]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Compiled CSS:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE75]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Let''s analyze this fragment in SASS code:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析SASS代码中的这个片段：
- en: '[PRE76]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'This selector will match every element that has an attribute with a `grid`
    word in the beginning of this attribute. This will match in our case: `.grid-1of2`
    and `.grid-1of4`. Of course, we could do it with SASS:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器将匹配每个具有以`grid`开头的属性的元素。在我们的例子中，这将匹配`.grid-1of2`和`.grid-1of4`。当然，我们可以用SASS来做到这一点：
- en: '[PRE77]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'And get it in compiled code:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 并在编译后的代码中获取它：
- en: '[PRE78]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'But let''s imagine that we have about `10` or maybe `40` classes like the following:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们想象一下，我们有大约`10`或者`40`个类，就像下面的例子一样：
- en: '[PRE79]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'In compiled CSS:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译后的CSS中：
- en: '[PRE80]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'And now we want to apply a `float: left` to these elements like:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们想要对这些元素应用`float: left`，如下所示：'
- en: '[PRE81]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'In CSS:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中：
- en: '[PRE82]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'It is easier to use a selector based on `[attribute^="value"]` and match all
    of the elements with a class which starts with a grid string:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于`[attribute^="value"]`的选择器更容易，并匹配所有以grid字符串开头的类的元素：
- en: '[PRE83]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Whitespace separated attribute values [attribute~="value"]
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空格分隔的属性值 [attribute~="value"]
- en: With this selector you can match all elements which in list of "attributes"
    that contains a string described as a "value". Let's analyze the following example.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个选择器，您可以匹配所有在包含描述为“value”的字符串的“attributes”列表中的元素。让我们分析下面的例子。
- en: 'HTML:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE84]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Now in SASS:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在SASS中：
- en: '[PRE85]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Compiled CSS:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE86]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'And the effect in the browser is as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下：
- en: '![Whitespace separated attribute values [attribute~="value"]](img/00009.jpeg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![空格分隔的属性值 [attribute~="value"]](img/00009.jpeg)'
- en: Attribute values ending with [attribute$="value"]
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性值以 [attribute$="value"] 结尾
- en: 'In one of the previous sections, we had an example of a selector based on beginning
    of an attribute. But what if we need an attribute ending? With this feature comes
    a selector based on a pattern `[attribute$="value"]`. Let''s check the following
    example code:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的某个部分中，我们有一个基于属性开头的选择器的示例。但是如果我们需要一个属性结尾呢？有了这个功能，就有了基于模式的选择器`[attribute$="value"]`。让我们来看下面的示例代码：
- en: '[PRE87]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'SASS:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE88]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Compiled CSS:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE89]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The effect in the browser is as follows:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下：
- en: '![Attribute values ending with [attribute$="value"]](img/00010.jpeg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![属性值以 [attribute$="value"] 结尾](img/00010.jpeg)'
- en: With the selector `[href$="form"],`we matched all elements whose attribute `href`
    ends with the string `form`.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 使用选择器`[href$="form"],`，我们匹配了所有属性`href`以字符串`form`结尾的元素。
- en: Attributes containing strings [attribute*="value"]
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含字符串的属性 [attribute*="value"]
- en: With this selector, you can match every element that contains a string in a
    value in any place. Let's analyze the following example code.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个选择器，您可以匹配每个包含任何位置的字符串值的元素。让我们分析下面的例子代码。
- en: 'HTML:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE90]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'SASS:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE91]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Compiled CSS:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 编译的CSS：
- en: '[PRE92]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'In the browser we will see:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中我们将看到：
- en: '![Attributes containing strings [attribute*="value"]](img/00011.jpeg)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![包含字符串的属性 [attribute*="value"]](img/00011.jpeg)'
- en: With the selector `[href*="contact"]`, we matched every element that contains
    the `contact` string in the value of the attribute `href`.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 使用选择器`[href*="contact"]`，我们匹配了包含`contact`字符串的每个元素在属性`href`的值中。
- en: Using !important in CSS
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在CSS中使用!important
- en: Hah… the magic word in CSS, which you can see in some special cases. With `!important`,
    you can even overwrite inline code added by JavaScript in your HTML.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 哈...这是CSS中的魔法词，你可以在一些特殊情况下看到。使用`!important`，你甚至可以覆盖HTML中由JavaScript添加的内联代码。
- en: 'How to use it? It is very simple:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用？非常简单：
- en: '[PRE93]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Remember to use it properly and in cases where you really need it. Don't overuse
    it in your code because it can have a big impact in the future, especially in
    cases when somebody will read your code and will try to debug it.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 记住要正确使用它，并且在您真正需要它的情况下使用它。不要在您的代码中过度使用它，因为它可能会在将来产生很大的影响，特别是在有人阅读您的代码并尝试调试它的情况下。
- en: Preparing your project
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备您的项目
- en: Starting your project and planning it is one of the most important processes.
    You need to create a simple strategy for keeping variables and mixins and also
    create a proper file structure. This chapter is about the most known problems
    in planning your file structure and the partialization of files in your project.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 开始您的项目并计划是最重要的过程之一。您需要为保持变量和mixin创建一个简单的策略，并创建适当的文件结构。本章介绍了在规划文件结构和项目中文件的部分化中最常见的问题。
- en: Files structure
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件结构
- en: 'The most important thing when you are starting a project is to make a good
    plan of its process. First, you will need to separate settings:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始一个项目时，最重要的是制定一个良好的计划。首先，您需要分开设置：
- en: Fonts
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体
- en: Variables
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Mixins
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合
- en: 'Then you will need to partialize your project. You will need to create files
    for repeatable elements along all sites:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您需要对项目进行部分化。您需要为所有站点中可重复的元素创建文件：
- en: Header
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页眉
- en: Footer
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚
- en: Forms
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单
- en: 'Then you will need to prepare next partialization—specific views of styling
    and elements, for example:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您需要准备下一个部分化-样式和元素的特定视图，例如：
- en: View home
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看主页
- en: View blog
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看博客
- en: View single post
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看单个帖子
- en: View contact page
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看联系页面
- en: How to keep variables in a project
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在项目中保存变量
- en: 'What can you keep in variables? Yeah, that is a good question, for sure:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在变量中保存什么？是的，这肯定是一个好问题：
- en: Colors (of fonts, backgrounds, and elements)
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色（字体，背景和元素的颜色）
- en: Global font sizes (like H1-H6, p, and so on)
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局字体大小（如H1-H6，p等）
- en: Grid dividers
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格分隔符
- en: Global paddings/margins
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局填充/边距
- en: How and where to keep mixins (local and global)
  id: totrans-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何以及在哪里保存mixin（本地和全局）
- en: In this file, you can collect your mostly used mixins. I've divided it into
    local and global. In global mixins, I'm gathering the most used mixins I'm using
    along all projects.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，您可以收集您最常用的mixin。我将其分为本地和全局。在全局mixin中，我正在收集我在所有项目中使用的最常用的mixin。
- en: 'In local mixins, I recommend to gather those mixins that you will use only
    in this project:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地mixin中，我建议收集您仅在此项目中使用的mixin：
- en: Dedicated gradient
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用渐变
- en: Font styling including font family size and so on
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体样式包括字体系列大小等等
- en: Hover/active states and so on
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 悬停/活动状态等等
- en: Keep typography styles in a separate file
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将排版样式保存在单独的文件中
- en: 'This file is dedicated for all the most important text elements:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是专门为所有最重要的文本元素而设计的：
- en: '`h1`-`h6`'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1`-`h6`'
- en: '`p`'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`'
- en: '`a`'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`'
- en: '`strong`'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strong`'
- en: '`span`'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`span`'
- en: 'Additionally, you can add classes like the following:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以添加类似以下的类：
- en: '`.h1`-`h6`'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.h1`-`h6`'
- en: '`.red .blue` (or any other which you know that will repeat in your texts)'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.red .blue`（或者您知道将在您的文本中重复的任何其他内容）'
- en: '`.small`, `.large`'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.small`, `.large`'
- en: Why should you use classes like `.h1`-`.h6`?
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么应该使用类似`.h1`-`.h6`的类？
- en: 'Yeah, it''s a pretty obvious question. Sometimes you cannot repeat `h1`-`h6`
    elements, but, for example, on a blog, you need to make them the same font style
    as `h1`. This is the best usage of this style, for example (HTML structure):'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是一个非常明显的问题。有时您不能重复`h1`-`h6`元素，但是，例如，在博客上，您需要使它们与`h1`相同的字体样式。这是这种样式的最佳用法，例如（HTML结构）：
- en: '[PRE94]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Views of specific elements
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定元素的视图
- en: 'In the following listed files, you can gather all elements that are visible
    in some specific views. For example, in a blog structure, you can have a view
    of single post or page view. So you need to create files:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面列出的文件中，您可以收集在某些特定视图中可见的所有元素。例如，在博客结构中，您可以有单个帖子或页面视图。因此，您需要创建文件：
- en: '[PRE95]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Tip
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件发送到您的电子邮件。
- en: 'You can download the code files by following these steps:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register to our website using your e-mail address and password.
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您的电子邮件地址和密码登录或注册我们的网站。
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在顶部的**SUPPORT**选项卡上。
- en: Click on **Code Downloads & Errata**.
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**代码下载和勘误**。
- en: Enter the name of the book in the **Search** box.
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入书名。
- en: Select the book for which you're looking to download the code files.
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择您要下载代码文件的书籍。
- en: Choose from the drop-down menu where you purchased this book from.
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择您购买本书的地方。
- en: Click on **Code Download**.
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**代码下载**。
- en: You can also download the code files by clicking on the **Code Files** button
    on the book's webpage at the Packt Publishing website. This page can be accessed
    by entering the book's name in the **Search** box. Please note that you need to
    be logged in to your Packt account.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在Packt Publishing网站上的图书网页上点击**代码文件**按钮来下载代码文件。可以通过在**搜索**框中输入书名来访问该页面。请注意，您需要登录您的Packt账户。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 文件下载完成后，请确保使用最新版本的解压缩或提取文件夹：
- en: WinRAR / 7-Zip for Windows
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR / 7-Zip for Windows
- en: Zipeg / iZip / UnRarX for Mac
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg / iZip / UnRarX for Mac
- en: 7-Zip / PeaZip for Linux
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip / PeaZip for Linux
- en: Summary
  id: totrans-466
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you gathered information about the fundamentals of modern CSS
    workflow. We started with choosing an IDE and then we focused on speeding up the
    process through the usage of snippets, preprocessors, and processes automatization.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您收集了关于现代CSS工作流程基础知识的信息。我们从选择IDE开始，然后专注于通过使用片段、预处理器和流程自动化来加快流程。
- en: In the next chapter, we will focus on the basics of CSS theory, box models,
    positions, and displaying modes in CSS.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于CSS理论的基础知识，包括CSS的盒模型、定位和显示模式。
