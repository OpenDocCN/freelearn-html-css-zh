- en: Chapter 2. Mastering of Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。基础的掌握
- en: This chapter will master the box model, floating troubleshooting positioning,
    and display types. After this chapter, you will be more aware of the foundations
    of HTML and CSS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将掌握盒子模型、浮动故障排除定位和显示类型。在本章之后，您将更加了解HTML和CSS的基础知识。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Gaining knowledge about the traditional box model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解传统盒子模型
- en: Basics of floating elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮动元素的基础知识
- en: Foundations of positioning elements on a web page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网页上定位元素的基础
- en: Gaining knowledge about display types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解显示类型
- en: Traditional box model
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统的盒子模型
- en: An understanding of the box model is the foundation of CSS theories. You have
    to know the impact of width, height, margin, and borders on the size of the box
    and how you can manage it to match the elements on a website. The main questions
    for coders and frontend developers in interviews are based on box model theories.
    Let's begin this important chapter, which will be the foundation for every upcoming
    subject.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对盒子模型的理解是CSS理论的基础。您必须了解宽度、高度、边距和边框对盒子大小的影响，以及如何管理它以匹配网站上的元素。面试中对编码人员和前端开发人员的主要问题基于盒子模型理论。让我们开始这一重要的章节，这将是以后每个主题的基础。
- en: Padding/margin/border/width/height
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充/边距/边框/宽度/高度
- en: 'The ingredients of the final width and height of the box are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子的最终宽度和高度的组成部分如下：
- en: Width
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度
- en: Height
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度
- en: Margins
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边距
- en: Paddings
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充
- en: Borders
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边框
- en: 'For better understanding of the box model, the following is an image from Google
    Chrome inspector:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解盒子模型，以下是谷歌浏览器检查器的图像：
- en: '![Padding/margin/border/width/height](img/00012.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![填充/边距/边框/宽度/高度](img/00012.jpeg)'
- en: 'For more clarity and better understanding of the box model, let''s analyze
    the following image:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰地理解盒子模型，让我们分析以下图像：
- en: '![Padding/margin/border/width/height](img/00013.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![填充/边距/边框/宽度/高度](img/00013.jpeg)'
- en: 'In the preceding image, you can see that in the box model, we have the following
    four edges:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您可以看到在盒子模型中，我们有以下四个边缘：
- en: Content edge
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容边缘
- en: Padding edge
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充边缘
- en: Border edge
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边框边缘
- en: Margin edge
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边距边缘
- en: 'The width and height of the box are based on the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子的宽度和高度基于以下内容：
- en: Width/height of content
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容的宽度/高度
- en: Padding
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充
- en: Border
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边框
- en: Margin
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边距
- en: 'The width and height of content in the box with default box-sizing are controlled
    by the following properties:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认盒子尺寸中盒子内容的宽度和高度由以下属性控制：
- en: Min-width
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小宽度
- en: Max-width
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大宽度
- en: Width
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度
- en: Min-height
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小高度
- en: Max-height
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大高度
- en: Height
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度
- en: An important thing about the box model is how background properties will behave.
    The background will be included in the content section and in the padding section
    (to the padding edge).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子模型的一个重要问题是背景属性的行为方式。背景将包括在内容部分和填充部分（到填充边缘）。
- en: Let's get a code and try to point to all elements of the box model.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们获取一个代码并尝试指向盒子模型的所有元素。
- en: 'HTML code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 代码：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'CSS code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 代码：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the browser, we will see the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，我们将看到以下内容：
- en: '![Padding/margin/border/width/height](img/00014.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![填充/边距/边框/宽度/高度](img/00014.jpeg)'
- en: 'The view from the inspector of Google Chrome is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在谷歌浏览器的检查器视图如下：
- en: '![Padding/margin/border/width/height](img/00015.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![填充/边距/边框/宽度/高度](img/00015.jpeg)'
- en: 'Let''s check how the areas of the box model are placed in the following specific
    example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查盒子模型的区域如何放置在以下具体示例中：
- en: '![Padding/margin/border/width/height](img/00016.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![填充/边距/边框/宽度/高度](img/00016.jpeg)'
- en: 'The basic task for the interviewed frontend developer is:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 面试的前端开发人员的基本任务是：
- en: 'The box/element is described with the styles:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子/元素的样式描述如下：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Please count the final `width` and `height` (the real space which is needed
    for this element) of this element.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请计算此元素的最终`宽度`和`高度`（实际所需的空间）。
- en: So, as you can see, the problem is to count the width and height of the box.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到，问题在于计算盒子的宽度和高度。
- en: '*The ingredients* of width are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*宽度*的组成部分如下：'
- en: Width
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度
- en: Border left
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左边框
- en: Border right
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右边框
- en: Padding left
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左填充
- en: Padding right
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右填充
- en: 'Additionally for the width of space taken by the box:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用于盒子占用空间的宽度的图像：
- en: Margin left
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左边距
- en: Margin right
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右边距
- en: '*The ingredients* of height are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*高度的组成部分*如下：'
- en: Height
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度
- en: Border top
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部边框
- en: Border bottom
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部边框
- en: Padding top
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部填充
- en: Padding bottom
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部填充
- en: 'Additionally for height of space taken by the box:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用于盒子占用空间的高度的图像：
- en: Margin top
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部边距
- en: Margin bottom
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部边距
- en: 'Therefore, when you sum the elements, you will have the following equations:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您总结这些元素时，您将得到以下方程：
- en: 'Width:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 宽度：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Space width:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 空间宽度：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Height:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 高度：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Space height:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 空间高度：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can check it in the real browser as shown in the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在实际浏览器中检查如下所示：
- en: '![Padding/margin/border/width/height](img/00017.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![填充/边距/边框/宽度/高度](img/00017.jpeg)'
- en: Omitting problems with the traditional box model (box-sizing)
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 省略传统盒子模型的问题（盒子尺寸）
- en: Basic theory of the box model is pretty hard to learn. You need to remember
    all the elements of width/height, even if you set the width and height. The hardest
    thing for beginners to understand is padding, which shouldn't be counted as a
    component of width and height. It should be *inside* the box and it should impact
    on this value. To change these behaviors with CSS3, supported since Internet Explorer
    8, comes box-sizing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子模型的基本理论是非常难学的。您需要记住所有宽度/高度的元素，即使您设置了宽度和高度。初学者最难理解的是填充，它不应计入宽度和高度的组成部分。它应该是*在*盒子内部，并且应该影响这个值。为了改变这些行为，CSS3支持自Internet
    Explorer 8以来，引入了盒子尺寸。
- en: 'You can set the value as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以设置如下值：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What does it give to you? Finally, the counting of box width and height will
    be easier because box padding and the border are inside the box. So if we are
    taking our previous class:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这对您有什么好处？最终，盒子的宽度和高度的计算将更容易，因为盒子的填充和边框在盒子内部。因此，如果我们正在进行我们之前的课程：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can count the width and height easily:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松计算宽度和高度：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Additionally, the space taken by the box:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，框所占用的空间：
- en: Space width = 140px (because the 20px margin is on both sides left and right)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间宽度= 140px（因为20px的边距在左右两侧）
- en: Space height = 240px (because the 20px margin is on both sides top and bottom)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间高度= 240px（因为20px的边距在顶部和底部两侧）
- en: 'The following is a sample from Google Chrome:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自Google Chrome的示例：
- en: '![Omitting problems with the traditional box model (box-sizing)](img/00018.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![省略传统框模型（box-sizing）的问题](img/00018.jpeg)'
- en: 'Therefore, if you do not want to repeat all the problems of the traditional
    box model, you should use it globally for all elements. Of course, it''s not recommended
    for old projects, for example, a new client who needs some small changes in the
    old project. If you add the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您不想重复传统框模型的所有问题，您应该全局为所有元素使用它。当然，对于旧项目，例如需要对旧项目进行一些小改动的新客户，不建议使用它。如果您添加以下代码：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can cause more harm than good because of the inheritance of this property
    for all elements, which are now based on the traditional box model. But for all
    new projects, you should use it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个属性对现在基于传统框模型的所有元素都有继承，所以可能会带来更多的伤害。但对于所有新项目，您应该使用它。
- en: Floating elements
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮动元素
- en: Floating boxes are the most used in modern layouts. The theory of floating boxes
    was used especially in grid systems and inline lists in CSS frameworks. For example,
    class and mixin inline lists (in the Zurb Foundation framework) are based on floats.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动框在现代布局中被广泛使用。浮动框的理论特别在网格系统和CSS框架中的内联列表中被使用。例如，Zurb Foundation框架中的类和mixin内联列表是基于浮动的。
- en: Possibilities of floating elements
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮动元素的可能性
- en: 'Elements can be floated to the left and right side. Of course, there is a method
    to reset floats too. The possible values are as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 元素可以浮动到左侧和右侧。当然，也有一种方法可以重置浮动。可能的值如下：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Most known floating problems
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最常见的浮动问题
- en: 'When you are using floating elements, you can have some issues. The most known
    problems with floated elements are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用浮动元素时，可能会遇到一些问题。浮动元素最常见的问题如下：
- en: Too big elements (because of width, margin left/right, padding left/right, and
    badly counted width, which is based on the box model)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 太大的元素（因为宽度、左/右边距、左/右填充和基于框模型的宽度计算不当）
- en: Not cleared floats
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未清除的浮动
- en: All of these problems provide specific effects, which you can easily recognize
    and then fix.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些问题都会产生特定的效果，您可以轻松识别并进行修复。
- en: 'Elements which are too big can be recognized when they are not in one line,
    as they should be. What you should check first is if the box-sizing: border-box
    is applied, and then check width, padding, and margin.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '当元素太大时，可以通过它们不在一行中来识别。您首先应该检查的是是否应用了`box-sizing: border-box`，然后检查宽度、填充和边距。'
- en: You can easily recognize floats that are not cleared when the floating structure
    of some elements from next container are *floated*. This means that you have no
    clear fix in your floating container.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松识别未清除的浮动，当一些元素的浮动结构来自下一个容器时。这意味着您的浮动容器中没有清除浮动。
- en: Defining clear fix/class/mixins
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义清除浮动/类/混合
- en: 'When I started developing HTML and CSS code, there was a method to clear the
    floats with `.cb` or `.clear` classes, both of which were defined as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始开发HTML和CSS代码时，有一种方法可以使用`.cb`或`.clear`类来清除浮动，这两种方法都定义如下：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This element was added in a container right after all the floated elements.
    This is important to remember about clearing the floats because containers that
    contains floating elements won''t inherit the height of the highest floating element
    (which will have a height equal to `0`),for example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素是在所有浮动元素之后的容器中添加的。这一点很重要，要记住清除浮动，因为包含浮动元素的容器不会继承最高浮动元素的高度（其高度将等于`0`），例如：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'CSS looks like the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CSS如下所示：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Nowadays, there is a better and faster way to clear floats. You can do this
    with the `clear fix` element, which can be defined as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有一种更好、更快的方法来清除浮动。您可以使用“清除浮动”元素来实现，如下所示：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And you can use it in HTML code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在HTML代码中使用它：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The main reason to switch on `clear fix` is that you save one tag (with the
    `clearboth` class). Recommended usage is based on the `clear fix` mixin, which
    you can define in SASS as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 打开“清除浮动”的主要原因是您可以节省一个标签（带有“clearboth”类）。推荐的用法是基于SASS中定义的“清除浮动”mixin，如下所示：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Therefore, every time you need to clear floating in some container, you need
    to invoke it. For example, let us take the previous code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次您需要在某个容器中清除浮动时，都需要调用它。例如，让我们看看之前的代码：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The container can be described as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以描述如下：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Example of using floating elements
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用浮动元素的示例
- en: The most known usage of float elements is grids. A grid is mainly used to structure
    the data displayed on a web page. In this chapter, let's check just a short draft
    of a grid. In the upcoming chapters, we will focus on automatization of creating
    the grid with mixins.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动元素最常见的用法是网格。网格主要用于构造网页上显示的数据。在本章中，让我们简要检查一下网格的草图。在接下来的章节中，我们将专注于使用mixin自动创建网格。
- en: 'Let us create some HTML code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些HTML代码：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And also create some SASS code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 并创建一些SASS代码：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The final effect is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最终效果如下：
- en: '![Example of using floating elements](img/00019.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![使用浮动元素的示例](img/00019.jpeg)'
- en: As you can see, we created a structure of a basic grid. In places where HTML
    code is placed `Lorem` here is a full `lorem ipsum` to illustrate the grid system.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们创建了一个基本网格结构。在放置HTML代码的地方，“Lorem”是一个完整的“lorem ipsum”，用来说明网格系统。
- en: Display types
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示类型
- en: 'There are a few display types in CSS whose definition and behaviors are the
    foundation of frontend developers. The most known and basic display values are
    as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: CSS中有几种显示类型，其定义和行为是前端开发人员的基础。最常见和基本的显示值如下：
- en: Inline
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联
- en: Block
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块
- en: Inline-block
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联块
- en: Table/table-cell
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格/表格单元格
- en: Flex (this will be described further in this book)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flex（这将在本书的后续部分中进一步描述）
- en: Block elements
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块级元素
- en: 'Block elements always start from a new line. The most important properties
    of block elements are width and height, which can be changed from CSS code. For
    better understanding, let''s check the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 块级元素总是从新的一行开始。块级元素最重要的属性是宽度和高度，可以从CSS代码中进行更改。为了更好地理解，让我们来看下面的截图：
- en: '![Block elements](img/00020.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![块级元素](img/00020.jpeg)'
- en: It is easy to see that all the block elements are taking as much width as they
    can.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看到，所有的块级元素都占据尽可能多的宽度。
- en: 'The mainly used HTML block-level elements are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 主要使用的HTML块级元素如下：
- en: '`address`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address`'
- en: '`article`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`article`'
- en: '`aside`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aside`'
- en: '`blockquote`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blockquote`'
- en: '`canvas`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canvas`'
- en: '`div`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`div`'
- en: '`footer`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`footer`'
- en: '`form`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`'
- en: '`h1`, `h2`, `h3`, `h4`, `h5`, `h6`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h1`，`h2`，`h3`，`h4`，`h5`，`h6`'
- en: '`header`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header`'
- en: '`main`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`'
- en: '`nav`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nav`'
- en: '`ol`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ol`'
- en: '`output`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`'
- en: '`p`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`'
- en: '`pre`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre`'
- en: '`section`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`section`'
- en: '`table`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`'
- en: '`ul`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ul`'
- en: '`video`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`video`'
- en: Inline elements
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联元素
- en: 'Inline elements can be described as elements that take as much space as they
    need. It can be best described using the following image:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 内联元素可以被描述为占据所需的空间的元素。可以通过以下图像最好地描述：
- en: '![Inline elements](img/00021.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![内联元素](img/00021.jpeg)'
- en: 'The mainly used HTML inline-level elements are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 主要使用的HTML内联级元素如下：
- en: '`acronym`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`acronym`'
- en: '`cite`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cite`'
- en: '`code`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code`'
- en: '`dfn`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dfn`'
- en: '`strong`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strong`'
- en: '`samp`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`samp`'
- en: '`var`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`'
- en: '`a`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`'
- en: '`bdo`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bdo`'
- en: '`br`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`br`'
- en: '`img`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img`'
- en: '`map`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map`'
- en: '`object`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object`'
- en: '`script`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`script`'
- en: '`span`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`span`'
- en: '`sub`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sub`'
- en: '`sup`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sup`'
- en: '`button`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`button`'
- en: '`input`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input`'
- en: '`label`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`'
- en: '`select`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`'
- en: '`textarea`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textarea`'
- en: Inline-block display
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联块显示
- en: 'Inline elements are elements that gather properties of inline and block elements.
    Inline elements take as much space as they need, but additionally you can set
    their width, height, and padding. On the following image which is added (after
    the code listings), you can see the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 内联元素是具有内联和块级元素属性的元素。内联元素占据所需的空间，但另外您可以设置它们的宽度、高度和填充。在下面添加的图像中，您可以看到以下代码：
- en: '[PRE22]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Described with SASS code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 用SASS代码描述：
- en: '[PRE23]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Compiled to CSS:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为CSS：
- en: '[PRE24]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Inline-block display](img/00022.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![内联块显示](img/00022.jpeg)'
- en: As you can easily see, the first element is a block element and it takes as
    much width as it can. The second element is inline. The third is a block element
    with a set width (300 pixels). The fourth element is inline with a set width (300
    pixels) but it is not applied to this element because it has no proper display
    type. In addition, the last element is a span whose normal display type is inline
    but is set in CSS to inline block. After this operation, you can set the width
    of the element, and, additionally, it naturally floats to the previous inline
    element.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以轻松看到的，第一个元素是一个块级元素，它占据尽可能多的宽度。第二个元素是内联的。第三个是一个具有固定宽度（300像素）的块级元素。第四个元素是具有固定宽度（300像素）的内联元素，但它没有适当的显示类型，因此未应用到该元素。此外，最后一个元素是一个span，其正常的显示类型是内联的，但在CSS中设置为内联块。在此操作之后，您可以设置元素的宽度，并且此外，它会自然地浮动到前一个内联元素。
- en: Where can you use other types of elements – navigation
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可以在哪些地方使用其他类型的元素 - 导航
- en: 'The most known problem related to types of display is inline navigations. For
    better understanding, let''s create a markup as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 与显示类型相关的最常见问题是内联导航。为了更好地理解，让我们创建一个如下的标记：
- en: '[PRE25]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The easiest way to make the elements in one line is to use `float:left`, for
    example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使元素在一行中的最简单方法是使用`float:left`，例如：
- en: '[PRE26]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The second idea is to use `display: inline-block` on the `li` element:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '第二个想法是在`li`元素上使用`display: inline-block`：'
- en: '[PRE27]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Where can you use other types of elements – problem of equal boxes
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可以在哪些地方使用其他类型的元素 - 等高框的问题
- en: There is a one problem, which is repeating on web pages, and you will need to
    append some JavaScript code to apply the same height. It was necessary to do that
    back in the days. Firstly, the heights of boxes were measured and then the bigger
    height was set as the height, which would be applied to another box. Finally,
    the height would be applied to all equalized boxes.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个问题，在网页上重复出现，您需要附加一些JavaScript代码来应用相同的高度。过去是必须这样做的。首先，测量框的高度，然后将更大的高度设置为将应用于另一个框的高度。最后，将高度应用于所有等高框。
- en: Nowadays, you can use a table-cell value of display.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，您可以使用`table-cell`值的显示。
- en: 'HTML code:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代码：
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'SASS code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: SASS代码：
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The effect in the browser is as shown in the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下所示：
- en: '![Where can you use other types of elements – problem of equal boxes](img/00023.jpeg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![您可以在哪些地方使用其他类型的元素 - 等高框的问题](img/00023.jpeg)'
- en: CSS elements positioning
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS元素定位
- en: Understanding of positions in CSS is one of the key skills of frontend developers.
    It helps you to change the behavior of each element on a web page. Additionally,
    with a mix of positions, you can change the behavior of the inner (child) elements.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中理解位置是前端开发人员的关键技能之一。它可以帮助您改变网页上每个元素的行为。此外，通过混合位置，您可以改变内部（子）元素的行为。
- en: Static, relative, absolute, fixed – differences
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态、相对、绝对、固定 - 差异
- en: The position static is a default value of the position, which includes every
    element on a web page.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 静态位置是位置的默认值，包括网页上的每个元素。
- en: 'The position relative is making an element relative to itself. You can easily
    understand it with the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 相对位置使元素相对于自身。您可以通过以下代码轻松理解它：
- en: '[PRE30]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And create the SASS:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 并创建SASS：
- en: '[PRE31]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'What you should see before appending the styles is as shown in the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在附加样式之前，您应该看到的如下所示：
- en: '![Static, relative, absolute, fixed – differences](img/00024.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![静态、相对、绝对、固定 - 差异](img/00024.jpeg)'
- en: 'In addition, after appending the styles you will see the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在附加样式之后，您将看到以下内容：
- en: '![Static, relative, absolute, fixed – differences](img/00025.jpeg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![静态、相对、绝对、固定 - 差异](img/00025.jpeg)'
- en: As you can see, when we change the position to `relative` and move it with property
    top, left, right, or bottom, we will move the element from its current position.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，当我们将位置更改为`relative`并使用top、left、right或bottom属性移动它时，我们将从当前位置移动元素。
- en: 'Additionally, relatively positioned elements can be set as a scope for inner
    elements with the position absolute, for example, HTML:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，相对定位的元素可以被设置为绝对定位内部元素的作用域，例如，HTML：
- en: '[PRE32]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'SASS:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE33]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The effect in the browser is as shown in the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下所示：
- en: '![Static, relative, absolute, fixed – differences](img/00026.jpeg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![静态，相对，绝对，固定 - 差异](img/00026.jpeg)'
- en: The orange box is a `.relative` element. The smaller box is absolutely positioned
    and related with the `relative` element.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 橙色框是一个`.relative`元素。较小的框是绝对定位的，并与`relative`元素相关。
- en: The position `absolute` can be used as in the preceding example. But what will
    happen when there isn't a parent relative element? Absolutely positioned elements
    will be related with HTML DOM elements.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`absolute`定位可以像上面的例子一样使用。但是当没有父相对元素时会发生什么？绝对定位的元素将与HTML DOM元素相关联。'
- en: '*Fixed* elements are strictly fixed to the browser. So when you apply position:
    `fixed` to any element and give it top: `0` and left: `0`, this element will be
    stuck to the top-left corner of the browser. Even when the scroll action is done,
    the element won''t change its position related to the browser.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*固定*元素严格固定在浏览器中。因此，当您将position: `fixed`应用于任何元素并给它top: `0`和left: `0`时，该元素将固定在浏览器的左上角。即使进行滚动操作，元素的位置也不会相对于浏览器发生变化。'
- en: The following code will show you how fixed elements are behaving.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将展示固定元素的行为。
- en: 'HTML:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE34]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'SASS:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE35]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see in the preceding code, the `body` element has `padding-top`,
    which is equal to the height of the `.fixed` element. This is caused by the `fixed`
    element that normally when you remove the padding `fixed` element will be over
    the `body` content (it will cover this element). The following screenshot shows
    the browser before the scroll action and the next screenshot shows the browser
    after the scroll action. Both screenshots contain the border of the browser to
    show the proper scroll action.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在上述代码中所见，`body`元素具有`padding-top`，其值等于`.fixed`元素的高度。这是由`fixed`元素引起的，通常情况下，当您移除填充时，`fixed`元素将覆盖`body`内容（它将覆盖此元素）。以下截图显示了滚动操作之前的浏览器，下一截图显示了滚动操作之后的浏览器。两个截图都包含了浏览器的边框，以显示正确的滚动操作。
- en: '![Static, relative, absolute, fixed – differences](img/00027.jpeg)![Static,
    relative, absolute, fixed – differences](img/00028.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![静态，相对，绝对，固定 - 差异](img/00027.jpeg)![静态，相对，绝对，固定 - 差异](img/00028.jpeg)'
- en: 'Important properties, which you can add to elements with positions, `relative`/`fixed`/`absolute`,
    are as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加到具有`relative`/`fixed`/`absolute`位置的元素的重要属性如下：
- en: Left
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧
- en: Right
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧
- en: Top
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部
- en: Bottom
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部
- en: Z-index
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Z-index
- en: 'A common problem during the coding of the position is overriding the `left`
    value by applying the `right` value. A sample code is as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写位置时常见的问题是通过应用`right`值来覆盖`left`值。示例代码如下：
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `.element` will be still stuck to its left position. How do you append it
    to the right position?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`.element`仍将固定在其左侧位置。如何将其附加到右侧位置？'
- en: '[PRE37]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Lists with fixed images (on the right or left) and descriptions
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定图像的列表（右侧或左侧）和描述
- en: This is a pretty common problem relating to lists. Lists of articles with fixed
    images (with fixed width and height) on the one side and with elastic content
    on the right could be pretty problematic without the positions `relative` and
    `absolute`. Following is an example.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与列表相关的常见问题。具有固定宽度和高度的固定图像的文章列表在一侧，而右侧具有弹性内容可能会在没有`relative`和`absolute`位置的情况下出现问题。以下是一个例子。
- en: 'HTML:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE38]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'SASS:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE39]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'CSS code after compilation:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS代码：
- en: '[PRE40]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The effect in the browser is as shown in the following:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下所示：
- en: '![Lists with fixed images (on the right or left) and descriptions](img/00029.jpeg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![固定图像的列表（右侧或左侧）和描述](img/00029.jpeg)'
- en: 'The effect after resize of the browser is as shown in the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 调整浏览器大小后的效果如下所示：
- en: '![Lists with fixed images (on the right or left) and descriptions](img/00030.jpeg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![固定图像的列表（右侧或左侧）和描述](img/00030.jpeg)'
- en: 'When you want to get the image on the right side, you will need to make the
    following changes:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要在右侧获取图像时，您需要进行以下更改：
- en: '[PRE41]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Compiled CSS:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE42]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The effect in the browser is as shown in the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果如下所示：
- en: '![Lists with fixed images (on the right or left) and descriptions](img/00031.jpeg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![固定图像的列表（右侧或左侧）和描述](img/00031.jpeg)'
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter builds strong fundamentals for professional usage of CSS. You gathered
    the knowledge about the box model, positions, and floating elements. The next
    chapter is going to be a story about pseudoclasses.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为专业使用CSS建立了坚实的基础。您已经了解了盒模型、位置和浮动元素的知识。下一章将讲述关于伪类的故事。
