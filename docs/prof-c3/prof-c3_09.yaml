- en: Chapter 9. Calc, Gradients, and Shadows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Calc, Gradients, and Shadows
- en: 'In the previous chapter, we analyzed flexbox and simple structures based on
    flexbox model. In this chapter, we will focus on the following aspects of CSS:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们分析了flexbox和基于flexbox模型的简单结构。在本章中，我们将专注于CSS的以下方面：
- en: Calc function
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Calc函数
- en: Gradients
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变
- en: Shadows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阴影
- en: CSS Animations.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS动画。
- en: Usage of data-attribute
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用data-attribute
- en: Let's begin!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: The calc() method
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: calc()方法
- en: 'Have you ever had a problem with mixing units? For example, say you needed
    to make an equation 60%-10px? These operations could be very helpful in old browsers
    and this is possible right now with the `calc()` method in CSS. How can you use
    it? Let''s resolve a problem with two floating boxes; one has a static width and
    the second is adjusting to the possible max width. The code is as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有遇到过混合单位的问题？例如，假设你需要制作一个方程60%-10px？这些操作在旧浏览器中可能非常有用，而且现在在CSS中可以通过`calc()`方法实现。你如何使用它？让我们解决一个有两个浮动框的问题；一个具有固定宽度，第二个则根据可能的最大宽度进行调整。代码如下：
- en: 'HTML:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'SASS:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Compiled CSS:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的CSS：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the end result:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终结果：
- en: '![The calc() method](img/00134.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![calc()方法](img/00134.jpeg)'
- en: The `calc()` function gives us the opportunity to make simple equations such
    as percent minus pixels. In this simple example, you can see that we don't need
    to use tricks with paddings and absolute positions. You can use the `calc()` function
    in good way and the problem will be resolved.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`calc()`函数给了我们一个机会去做简单的方程，比如百分比减去像素。在这个简单的例子中，你可以看到我们不需要使用padding和绝对位置的技巧。你可以正确使用`calc()`函数，问题就会得到解决。'
- en: Gradients in CSS
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS中的渐变
- en: Experienced frontend developers remember the time when gradients were done as
    background images. Yes! That was the only idea to imitate gradients in browsers.
    You needed to cut 1px width and the gradient's height (if it was a vertical gradient;
    in the case of horizontal, it was 1px height and width was designated by the width
    of the gradient) from the PSD file. Then, you had to add it in CSS and repeat
    your *magic* image in the background.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有经验的前端开发人员还记得渐变是如何作为背景图像完成的。是的！那是模仿浏览器中的渐变的唯一想法。你需要从PSD文件中裁剪1px宽度和渐变高度（如果是垂直渐变；在水平渐变的情况下，高度是1px，宽度由渐变的宽度指定）。然后，你需要将其添加到CSS中，并在背景中重复你的*魔术*图像。
- en: Now, you can do it in CSS! Let's begin with linear gradients.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在CSS中做到这一点！让我们从线性渐变开始。
- en: Linear gradients
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性渐变
- en: 'Linear gradients can be of two types: from top-to-bottom or from left-to-right.
    Let''s begin with a vertical gradient:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 线性渐变可以有两种类型：从上到下或从左到右。让我们从垂直渐变开始：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code will generate a linear gradient from top-to-bottom. At the top, the
    color will be black and it will be red at the bottom.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成一个从上到下的线性渐变。在顶部，颜色将是黑色，在底部将是红色。
- en: '![Linear gradients](img/00135.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![线性渐变](img/00135.jpeg)'
- en: 'However, it cannot be so easy to be a frontend developer. That''s why you need
    to remember about prefixes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，成为前端开发人员可能并不那么容易。这就是为什么你需要记住前缀：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, the definition with prefixes takes up a lot of code, especially
    when you need a fallback for IE9 (the last line with the filter definition).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，带前缀的定义占用了大量的代码，特别是当你需要为IE9提供回退时（最后一行带有filter定义）。
- en: 'The basic horizontal gradient definition is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的水平渐变定义如下：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example will generate a gradient from left-to-right with white on the right
    and black on the left.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将生成一个从左到右的渐变，右边是白色，左边是黑色。
- en: '![Linear gradients](img/00136.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![线性渐变](img/00136.jpeg)'
- en: 'Here''s the prefixed version:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是带前缀的版本：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'What about multicolor gradients? Of course, it is possible:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 多色渐变呢？当然是可能的：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s the effect:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是效果：
- en: '![Linear gradients](img/00137.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![线性渐变](img/00137.jpeg)'
- en: 'You can also rotate the gradient:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以旋转渐变：
- en: 'HTML:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'SASS:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'CSS:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s the effect in the browser:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果：
- en: '![Linear gradients](img/00138.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![线性渐变](img/00138.jpeg)'
- en: 'What if you want to change the balance between colors? For example, maybe you
    want a higher concentration of black color in your gradient? This is also possible:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想改变颜色之间的平衡呢？例如，也许你想在渐变中有更高浓度的黑色？这也是可能的：
- en: 'SASS:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'CSS:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s the effect in the browser:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果：
- en: '![Linear gradients](img/00139.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![线性渐变](img/00139.jpeg)'
- en: 'To understand this, you need to check this example step by step:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这一点，你需要逐步检查这个例子：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using gradient mixins
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用渐变mixin
- en: 'In this chapter, you can get these mixins and use them in your projects. I
    don''t like to write long code every time—just write it once and then repeat the
    short version. That''s why I prepared these two simple gradients:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你可以获得这些mixin并在你的项目中使用它们。我不喜欢每次都写很长的代码——只需写一次，然后重复简短版本。这就是为什么我准备了这两个简单的渐变：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One of the most important things in the preceding examples of mixins is that
    you need to use the full representation of `hex` colors. You can't use, for example,
    `#f00` for red color. You have to use `#ff0000`. It's because of IE9 and lower
    fallback which does not respect this shorter version of color representation in
    gradients. Another important thing in this mixin is the first line, which sets
    only the background color. This is a fallback for all browsers that don't respect
    any prefixed/non-prefixed versions of gradients. With it the color is set only
    to the color which is set as a `$startColor`. The second line in the mixin is
    related to old versions of browsers based on WebKit. The last line relates to
    old IE (9 and lower). Of course, you don't have to keep this code in your projects
    if it's not used or not needed. You can modify it to match your project's requirements.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的混合示例中最重要的一点是，您需要使用`hex`颜色的完整表示。例如，您不能使用`#f00`来表示红色。您必须使用`#ff0000`。这是因为IE9及更低版本不支持渐变中较短的颜色表示。混合中的另一个重要事项是第一行，它仅设置背景颜色。这是所有不支持任何前缀/非前缀渐变版本的浏览器的回退。使用它，颜色仅设置为作为`$startColor`设置的颜色。混合中的第二行与基于WebKit的旧版本浏览器有关。最后一行与旧版IE（9及更低版本）有关。当然，如果没有使用或不需要，您不必在项目中保留此代码。您可以修改它以满足项目的要求。
- en: Radial gradients
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 径向渐变
- en: 'In some projects, you will need to add radial gradients. The radial gradient
    standard function looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些项目中，您需要添加径向渐变。径向渐变标准函数如下：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or you can use:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s check an example code and the possibilities of gradients'' usage:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个示例代码和渐变使用的可能性：
- en: 'HTML:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'SASS:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'CSS:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here''s the effect in the browser:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器中的效果：
- en: '![Radial gradients](img/00140.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![径向渐变](img/00140.jpeg)'
- en: How to add box-shadow
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何添加盒子阴影
- en: 'Back in the day, shadow features weren''t available in CSS. This feature gives
    you the opportunity to append the shadow effect to boxes (with `box-shadow`) and
    text (with `text-shadow`). How is `box-shadow` created? Let''s check the parameters
    of this property in CSS:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 回到过去，CSS中没有阴影功能。这个功能让您有机会向盒子（使用`box-shadow`）和文本（使用`text-shadow`）添加阴影效果。`box-shadow`是如何创建的？让我们来看看CSS中这个属性的参数：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Before all parameters you can add inset. With this property shadow will be inside
    element.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有参数之前，您可以添加内部。使用此属性，阴影将位于元素内部。
- en: 'The easiest way to understand this is to check how it behaves in the browser:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点最简单的方法是查看它在浏览器中的行为：
- en: 'HTML:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'SASS:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'CSS:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here''s the effect in the browser:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器中的效果：
- en: '![How to add box-shadow](img/00141.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何添加盒子阴影](img/00141.jpeg)'
- en: In this example, you can check how to set vertical and horizontal shadows. Additionally,
    you can set blur spread and its color. Adding a positive value to vertical and
    horizontal shadow moves the shadow to the bottom and right, respectively. When
    you are adding a negative value, it will move to the top and left.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您可以查看如何设置垂直和水平阴影。此外，您还可以设置模糊扩散和其颜色。向垂直和水平阴影添加正值会将阴影分别移动到底部和右侧。当您添加负值时，它将移动到顶部和左侧。
- en: How to add text-shadow
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何添加文本阴影
- en: 'Adding a shadow for boxes is pretty simple. But how do we add a shadow to text?
    It is possible with the `text-shadow` property. It works in much the same way
    as `box-shadow`. Here''s the definition:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为盒子添加阴影非常简单。但是我们如何为文本添加阴影？使用`text-shadow`属性是可能的。它的工作方式与`box-shadow`非常相似。这是定义：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s create an example based on the previous chapter''s code to better understand
    the `text-shadow` property:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基于上一章代码的示例，以更好地理解`text-shadow`属性：
- en: 'HTML:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'SASS:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'CSS:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here''s the effect in the browser:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器中的效果：
- en: '![How to add text-shadow](img/00142.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![如何添加文本阴影](img/00142.jpeg)'
- en: Additional font and text features
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他字体和文本功能
- en: Font features in CSS have changed a lot in the past 5 years. Back in the day,
    there was no opportunity to use non-standard fonts and as it was described *safe
    for internet*. This was one of the issues that made Flash technology trendier,
    not only because of full Flash pages but because of **Scalable Inman Flash Replacement**
    (**SIFR**). With SIFR, you just needed to attach your font in Adobe Flash and
    compile the file; you could then use your font on the website. But you had a webpage
    in HTML with Flash instances. Then, there was a methodology based on JavaScript
    called **cufon**. You could use your font to visit the cufon page, compile your
    font, and then attach `cufon.js` on your website and your compiled font (JS file).
    In JavaScript, you needed to add which font should be swapped and finally your
    font was visible on the website.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的5年中，CSS中的字体功能发生了很大变化。在过去，没有机会使用非标准字体，因为它被描述为*互联网安全*。这是使Flash技术更流行的问题之一，不仅因为完整的Flash页面，还因为**可扩展的Inman
    Flash Replacement**（**SIFR**）。使用SIFR，您只需要在Adobe Flash中附加您的字体并编译文件；然后您可以在网站上使用您的字体。但是您的HTML页面中有Flash实例。然后，有一种基于JavaScript的方法叫做**cufon**。您可以使用您的字体访问cufon页面，编译您的字体，然后在您的网站上附加`cufon.js`和您编译的字体（JS文件）。在JavaScript中，您需要添加应该被交换的字体，最后您的字体就会在网站上可见。
- en: Nowadays, we can use font-face and use custom fonts in the web version.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们可以使用font-face在Web版本中使用自定义字体。
- en: Using non-standard fonts in browsers
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在浏览器中使用非标准字体
- en: 'If you want to use your font in the browser, you need to prepare it. The basic
    definition of font-face is based on this example in raw CSS:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在浏览器中使用您的字体，您需要准备它。font-face的基本定义基于原始CSS中的这个示例：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you want to use your font now, you will need to append this sample code
    in your CSS:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在想使用您的字体，您需要在CSS中附加此示例代码：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The main question is, How can I prepare my font to use it in the browser if
    I have another font format? If you have a font, you can use `fontsquirrel.com`
    to generate the final view of CSS ready to use. Of course, there are a few other
    sources where you can search for fonts:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题是，如果我有另一种字体格式，我该如何准备我的字体以在浏览器中使用？如果您有一个字体，您可以使用`fontsquirrel.com`生成最终的CSS视图以供使用。当然，还有一些其他地方可以搜索字体：
- en: Google Fonts ([https://www.google.com/fonts](https://www.google.com/fonts))
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Fonts ([https://www.google.com/fonts](https://www.google.com/fonts))
- en: Typekit ([https://typekit.com/fonts](https://typekit.com/fonts))
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typekit ([https://typekit.com/fonts](https://typekit.com/fonts))
- en: Here, you can find fonts ready to use in your project.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以找到在您的项目中可以直接使用的字体。
- en: Using CSS animations
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS动画
- en: 'CSS animations are a very useful feature. You don''t need to use JavaScript
    for easy animations and CSS animations are supported by the GPU (short for Graphic
    Processing Unit). What can we do with CSS animations? Let''s check the following
    example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: CSS动画是一个非常有用的功能。您无需使用JavaScript进行简单的动画，而且CSS动画受到GPU（图形处理单元）的支持。CSS动画可以做什么？让我们看下面的例子：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'SASS:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here''s the generated CSS:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的CSS：
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here''s the effect in the browser:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果：
- en: '![Using CSS animations](img/00143.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS动画](img/00143.jpeg)'
- en: You can see the progress of animations, described in the SASS/CSS file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在SASS/CSS文件中看到动画的进度。
- en: 'The properties of CSS animations are:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CSS动画的属性有：
- en: '`animation-name`: This property defines which `@keyframs` definition should
    be used, for example: `animation-name: roll_in`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animation-name`: 此属性定义了应使用哪个`@keyframs`定义，例如：`animation-name: roll_in`'
- en: '`animation-delay`: This property defines the delay between the element loading
    and the animation starting, for example: `animation-delay: 2s`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animation-delay`: 此属性定义了元素加载和动画开始之间的延迟时间，例如：`animation-delay: 2s`'
- en: '`animation-duration`: This property defines the length of the animation, for
    example: `animation-duration: 2s`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animation-duration`: 此属性定义了动画的持续时间，例如：`animation-duration: 2s`'
- en: '`animation-iteration-count`: This property defines how many times the animation
    should be repeated, for example: `animation- iteration-count: 2`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animation-iteration-count`: 此属性定义了动画应重复多少次，例如：`animation- iteration-count:
    2`'
- en: '`animation-fill-mode`: This property defines how the element will behave with
    regard to the delay time, for example: `animation- fill-mode: backward`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animation-fill-mode`: 此属性定义了元素在延迟时间方面的行为，例如：`animation- fill-mode: backward`'
- en: 'How can I add an animation on hover? Let''s create an example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何在悬停时添加动画？让我们创建一个示例：
- en: 'HTML:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'SASS:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'CSS:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here''s the end result in the browser:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器中的最终结果：
- en: '![Using CSS animations](img/00144.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS动画](img/00144.jpeg)'
- en: You can see the element before and after a hover action. Also, there is a transition
    that adds a little animation flavor to this button. What is important in this
    animation declaration?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在悬停操作之前和之后看到元素。此外，还有一个过渡，为此按钮添加了一些动画效果。在这个动画声明中最重要的是什么？
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The preceding declaration gives a list of values that should be animated. An
    example of this list might be:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的声明给出了应该被动画化的值列表。这个列表的一个例子可能是：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This list means that the color and the background color will be animated. When
    you want to animate all properties, you can use *all* as a value.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表意味着颜色和背景颜色将被动画化。当您想要动画化所有属性时，可以使用*all*作为值。
- en: Data attribute
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据属性
- en: Data attribute is mainly related to HTML code and JavaScript. With data attribute,
    you can describe DOM elements and use these values in scripts, for example, for
    sorting, animation, or any other purpose. But how can it help you in CSS code?
    Let's consider the following example.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 数据属性主要与HTML代码和JavaScript相关。使用数据属性，您可以描述DOM元素并在脚本中使用这些值，例如，用于排序、动画或任何其他目的。但它如何帮助您在CSS代码中呢？让我们考虑以下示例。
- en: Issue – bold on hover moves the navigation
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题 - 悬停时加粗移动导航
- en: 'This is a pretty common issue on websites. Let''s imagine that you have inline
    elements that react to a hover. After hovering, the element changes its font-weight
    from normal to bold. The effect is that every element after the hovered element
    is shifted to the right. Let''s begin with the HTML code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是网站上一个非常常见的问题。假设您有内联元素对悬停作出反应。悬停后，元素的字重从普通变为粗体。效果是悬停元素之后的每个元素都向右移动。让我们从HTML代码开始：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'SASS:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'CSS:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'CSS:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The effect in the browser without and with hover action is:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中的效果，没有和有悬停操作：
- en: '![Issue – bold on hover moves the navigation](img/00145.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![问题 - 悬停时加粗移动导航](img/00145.jpeg)'
- en: 'The red rulers are pointed shifts in structure. Now, let''s use our *antidotum*.
    First, we need to slightly change our HTML code. This change is related to the
    `data-alt` attribute and its value. As a value, we are duplicating the value of
    the DOM element:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 红色标尺是结构中的指向性偏移。现在，让我们使用我们的*antidotum*。首先，我们需要轻微更改我们的HTML代码。这个变化与`data-alt`属性及其值有关。作为值，我们正在复制DOM元素的值：
- en: 'HTML:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'SASS:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'CSS:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Voilà! Problem solved. As you can see, the trick is based on the `:after` pseudo
    element that is now kept as an invisible element. The content is set by taking
    an attribute from the HTML code with `attr(data-alt)`. To this content, the bold
    feature is added. This gives us enough space, which wasn't taken up in the previous
    code. Finally, the elements don't shift to the right.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 大功告成！正如您所看到的，这个技巧是基于`:after`伪元素，它现在被保留为一个不可见的元素。内容是通过从HTML代码中获取`attr(data-alt)`属性设置的。对这个内容，加粗特性被添加。这给了我们足够的空间，这在以前的代码中没有被占用。最后，元素不会向右移动。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed CSS gradients so you don't need to make gradients
    with images. We analyzed the use of `box-shadow` and `text-shadow`. We created
    a simple animation and analyzed its parameters. Additionally, we used data-attribute
    in CSS code.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了CSS渐变，因此您无需使用图像制作渐变。我们分析了`box-shadow`和`text-shadow`的使用。我们创建了一个简单的动画并分析了其参数。此外，我们在CSS代码中使用了数据属性。
- en: In the next chapter, we will discuss DRY (short for Don't Repeat Yourself) in
    CSS and try to create a basic framework that will be a starter for your projects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论CSS中的DRY（即不要重复自己）并尝试创建一个基本框架，这将是您项目的起点。
