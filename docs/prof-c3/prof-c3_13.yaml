- en: Chapter 13. Code Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章 代码优化
- en: This chapter is about building code and the processes that are related to every
    step of creating the code in general. There are a few general stages of this process
    and we will study how we can optimize code at each of these steps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于一般创建代码过程和与每个步骤相关的过程。这个过程有几个一般阶段，我们将研究如何在每个阶段优化代码。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Code optimization at each step of creation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建的每个步骤中进行代码优化
- en: How to keep code in your repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在你的代码库中保持代码
- en: How to optimize SASS code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何优化SASS代码
- en: How to use short forms in CSS/SASS code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在CSS/SASS代码中使用简写形式
- en: How to prepare code for production
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何准备代码以用于生产
- en: Self-optimization
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我优化
- en: The optimization process starts when you start writing code. Awareness of what
    you can optimize and how it should appear during writing a code is essential.
    After the writing process, when you start optimization, it can be pretty hard
    to refactor and restructure the code. But it is easy to build code and automatically
    append optimization processes. Which of these processes can you perform during
    the writing of code?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 优化过程是在你开始编写代码时开始的。在编写代码时意识到可以优化的内容以及它在编写代码时应该如何出现是至关重要的。在编写过程之后，当你开始优化时，重构和重组代码可能会非常困难。但是构建代码并自动附加优化过程是很容易的。在编写代码时可以执行哪些过程？
- en: Usage of short forms
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简写形式
- en: Omit usage of `!important`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 省略使用`!important`
- en: Omit usage of IDs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 省略使用ID
- en: A few steps before you push code live
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在将代码发布之前的几个步骤
- en: 'In the code creation process, there are a few repeatable steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码创建过程中，有一些可重复的步骤：
- en: Writing code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码
- en: Testing code
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码
- en: Pushing code live
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将代码发布
- en: 'The processes are sometimes repeatable, especially when they are related to
    projects built in *The Lean Startup* methodology by Eric Ries and projects with
    multiple stages. You need to remember these few steps before you push code live:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些过程有时是可重复的，特别是当它们与Eric Ries的《精益创业》方法论和多阶段项目相关时。在将代码发布之前，你需要记住这几个步骤：
- en: Check whether short forms are used
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否使用了简写形式
- en: Check whether elements/declarations are duplicated
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查元素/声明是否重复
- en: Check whether elements/declarations are used in HTML (zombie selectors)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查元素/声明是否在HTML中使用（僵尸选择器）
- en: Check the appearance of `!important` (if possible, try to omit them)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查`!important`的出现（如果可能的话，尝试省略它们）
- en: Check whether the code is minified
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查代码是否被压缩
- en: This list is pretty basic. In the next sections, we will run through the optimization
    processes and usage, for checking all the possibilities.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表非常基础。在接下来的章节中，我们将运行优化过程和用法，检查所有可能性。
- en: Using short forms
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用简写形式
- en: Short forms are very helpful to minify code during writing and after the building
    process. Using short forms in CSS, you can save a lot of characters and make the
    code slimmer. Let's look at an overview of short forms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写和构建过程中，简写形式有助于压缩代码。在CSS中使用简写形式，你可以节省很多字符，使代码更加精简。让我们来看一下简写形式的概述。
- en: Short forms of paddings/margins
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充/边距的简写形式
- en: 'How many times have you been writing paddings and margins with full forms?
    How many times does it happen that you are reading somebody''s code and seeing
    that they are not using short forms for margins and paddings makes you nervous?
    Yes! It can make you nervous because it is a waste of CSS! Let''s start with simple
    description of an element''s padding in SASS:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你写填充和边距时有多少次使用了完整形式？你有多少次看到别人的代码没有使用填充和边距的简写形式而感到紧张？是的！它可能会让你紧张，因为这是对CSS的浪费！让我们从SASS中对元素填充的简单描述开始：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will give you CSS code like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它会给你类似这样的CSS代码：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s a short way to describe it in CSS:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用CSS简要描述它的方法：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In general, padding can be described as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，填充可以描述如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can do the same thing with margins:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以用同样的方法处理边距：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will give you CSS code like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它会给你类似这样的CSS代码：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s a short way to describe it in CSS:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用CSS简要描述它的方法：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In general, the margin can be described as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，边距可以描述如下：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s use another example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用另一个例子：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Compiled to CSS:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为CSS：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, there are two pairs of values. When the value of the top margin/padding
    is repeated in the bottom value and the left value is equal to the right value,
    you can use the short version:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，有两对值。当上边距/填充的值在底部值中重复，并且左值等于右值时，你可以使用简写版本：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When compiled to CSS, it looks like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译为CSS时，它看起来像这样：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, the version is minified and finally based on the pattern:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个版本是被压缩的，最终基于这个模式：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Short forms of borders
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边框的简写形式
- en: 'Let''s start with the basic description of a border, and then we can extend
    it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从边框的基本描述开始，然后我们可以扩展它：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s the compiled CSS:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的CSS：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This class will create a border around the box, which will be solid with `10px`
    width and its color will be black. So, let''s create a class that will include
    all the borders (top, right, bottom, and left) with a defined style color and
    width:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类将在框周围创建一个边框，它将是实心的，宽度为`10px`，颜色为黑色。因此，让我们创建一个包括所有边框（上、右、下和左）的类，定义样式颜色和宽度：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'CSS:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So if you want to make this a little bit shorter, you can use a mix of global
    definitions of shorten border. The code is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想让这个代码变得更短一点，你可以使用全局定义的边框简写。代码如下：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'CSS:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And directions. The code will look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 和方向。代码将看起来像这样：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Compiled:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 编译：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There is a way to describe style/width/color in the same way we define padding
    and border:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以以与我们定义填充和边框相同的方式来描述样式/宽度/颜色：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Compiled:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编译：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let''s gather information about `border-radius`. The global definition
    of border radius is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们收集关于`border-radius`的信息。边框半径的全局定义如下：
- en: 'SASS:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: SASS：
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'CSS:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Describe each corner in another line and another value:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一行和另一个值中描述每个角：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'CSS:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE26]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, the preceding code can be described this way to make it shorter:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前面的代码可以用以下方式描述得更短：
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'CSS:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Short forms in fonts styling
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字体样式中的简短形式
- en: 'Fonts are described in every paragraph header link. As you can see, it''s good
    to use shorthand for so many repeated occurrences in the code. Here, we have a
    simple description of the font and line height of a sample element:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 字体在每个段落标题链接中都有描述。如您所见，在代码中这么多重复出现的情况下使用简写是很好的。在这里，我们对一个示例元素的字体和行高进行了简单描述：
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'CSS:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s use a short form based on pattern:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于模式使用简短形式：
- en: '[PRE31]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With this short form, our five lines in SASS (four lines in CSS) are changed
    to one line:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种简短的形式，我们在SASS中的五行（在CSS中的四行）被改为了一行：
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After compilation, the code is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，代码如下：
- en: '[PRE33]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Short forms in backgrounds
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 背景的简短形式
- en: 'Background is one of the most commonly used CSS features. The main use of background
    is:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 背景是最常用的CSS特性之一。背景的主要用途是：
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This code will give us the following output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将给我们以下输出：
- en: '[PRE35]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'It''s a lot of code! The short form is described in this order:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多代码！简短形式按照这个顺序描述：
- en: '[PRE36]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE37]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If we want to describe our element with this short form, we just need to make
    it this way:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想用这种简短形式描述我们的元素，我们只需要这样做：
- en: '[PRE38]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After SASS compilation in CSS, we will get the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS编译成CSS后，我们将得到以下结果：
- en: '[PRE39]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Checking repetitions
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查重复
- en: When you are creating the code in CSS, you need to be aware of the repetitions
    of your code. The code can look a little bit weird for professional developers,
    but we can treat it as a great sample of the code review process. Let's analyze
    it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建CSS代码时，您需要注意代码的重复。对于专业开发人员来说，代码可能看起来有点奇怪，但我们可以把它当作代码审查过程的一个很好的样本。让我们来分析一下。
- en: 'HTML:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE40]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'CSS:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CSS：
- en: '[PRE41]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As you can see, the repetitions are commented and we will create a general
    class now:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，重复部分已经被注释，现在我们将创建一个通用类：
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We will need to append small changes in the HTML code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在HTML代码中追加一些小的改变：
- en: '[PRE43]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To minify it in SASS:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在SASS中将其最小化：
- en: '[PRE44]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here''s another method to deal with repetitions without changing the markup:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种处理重复的方法，而不改变标记：
- en: '[PRE45]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s gather the repetitions:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们收集重复的部分：
- en: '[PRE46]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''s add a value that will be overwritten in custom element `.h3`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个将在自定义元素`.h3`中被覆盖的值：
- en: '[PRE47]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, let''s describe the selectors and overwrite the values in separate selectors:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们描述选择器并在单独的选择器中覆盖值：
- en: '[PRE48]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s change it to SASS code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其改为SASS代码：
- en: '[PRE49]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s do the same with `@extend`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`@extend`做同样的事情：
- en: '[PRE50]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The process of checking the repetitions is easy when you are creating the code
    yourself, but it can be harder when you are working with other developers or when
    you are working on a project which was started by somebody else. This process
    makes the code shorter, so it can be treated as a process of code optimization.
    With these techniques, you can append changes to your code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当您自己创建代码时，检查重复的过程很容易，但当您与其他开发人员一起工作或者在一个由其他人开始的项目上工作时，这可能会更难。这个过程使代码变得更短，因此它可以被视为代码优化的过程。通过这些技术，您可以对代码进行追加更改。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the process of CSS code optimization. With this
    knowledge, you can minify your code and you can think about optimization processes
    during the creation of code. This knowledge will make you a more aware frontend
    developer who knows how code can be minified in a jiffy.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了CSS代码优化的过程。有了这些知识，您可以最小化您的代码，并且在创建代码时考虑优化过程。这些知识将使您成为一个更加明智的前端开发人员，了解代码如何可以在瞬间被最小化。
- en: In the next chapter, we will discuss the final automatizations that you can
    use in CSS and frontend projects!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论您可以在CSS和前端项目中使用的最终自动化！
