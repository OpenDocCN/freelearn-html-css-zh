- en: Chapter 3. Constructing a Simple Responsive Blog with Responsive.gs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用Responsive.gs构建一个简单的响应式博客
- en: '*In the previous chapter, we installed a number of software that will facilitate
    our projects. Here, we will start off our very first project. In this project,
    we are going to build a responsive blog.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一章中，我们安装了一些软件，这些软件将为我们的项目提供便利。在这里，我们将开始我们的第一个项目。在这个项目中，我们将构建一个响应式博客。*'
- en: '*Having a blog is essential for a company. Even several Fortune 500 companies
    such as FedEx ([http://outofoffice.van.fedex.com/](http://outofoffice.van.fedex.com/)),
    Microsoft ([https://blogs.windows.com/](https://blogs.windows.com/)) and General
    Motors ([http://fastlane.gm.com/](http://fastlane.gm.com/)) have official corporate
    blogs. A blog is a great channel for the company to publish official news as well
    as to connect with their customers and the masses. Making the blog responsive
    is the way to go to make the blog more accessible to the readers who may access
    the site through a mobile device, such as a phone or tablet.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*拥有博客对于一家公司来说是必不可少的。甚至一些财富500强公司，如联邦快递([http://outofoffice.van.fedex.com/](http://outofoffice.van.fedex.com/))，微软([https://blogs.windows.com/](https://blogs.windows.com/))和通用汽车([http://fastlane.gm.com/](http://fastlane.gm.com/))都有官方企业博客。博客是公司发布官方新闻以及与客户和大众联系的重要渠道。使博客具有响应式设计是使博客更易于读者访问的途径，这些读者可能通过手机或平板等移动设备访问网站。*'
- en: '*As the blog that we are going to build in this first project will not be that
    complex, this chapter would be an ideal chapter for those who have just come across
    responsive web design.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于我们在这个第一个项目中要构建的博客不会那么复杂，所以这一章对于刚接触响应式网页设计的人来说是一个理想的章节。*'
- en: '*So let''s get started.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*那么让我们开始吧。*'
- en: 'To sum up, in this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在本章中，我们将涵盖以下主题：
- en: Dig into Responsive.gs components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解Responsive.gs组件
- en: Examine the blog blueprint and design
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查博客蓝图和设计
- en: Organize the website files and folders
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整理网站文件和文件夹
- en: Look into HTML5 elements for semantic markup
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看HTML5元素以进行语义标记
- en: Construct the blog markup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建博客标记
- en: Responsive.gs components
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Responsive.gs组件
- en: As we mentioned in [Chapter 1](part0016.xhtml#aid-F8902 "Chapter 1. Responsive
    Web Design"), *Responsive Web Design*, Responsive.gs is a lightweight CSS framework.
    It comes only with the bare minimum requirements for building responsive websites.
    In this section, we are going to see what is included in Responsive.gs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](part0016.xhtml#aid-F8902 "第1章.响应式网页设计")中提到的，*响应式网页设计*，Responsive.gs是一个轻量级的CSS框架。它只包含构建响应式网站的最基本要求。在本节中，我们将看到Responsive.gs包含了什么。
- en: The classes
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: 'Responsive.gs is shipped with a series of reusable classes to form the responsive
    grid that makes it easier and faster for web designers to build web page layout.
    These classes contain preset style rules that have been carefully calibrated and
    tested. So we can simply drop in these classes within the HTML element to construct
    the responsive grid. The following is a list of the classes in Responsive.gs:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Responsive.gs附带了一系列可重复使用的类，用于形成响应式网格，使网页设计师更容易更快地构建网页布局。这些类包含经过精心校准和测试的预设样式规则。因此，我们可以简单地将这些类放入HTML元素中以构建响应式网格。以下是Responsive.gs中的类列表：
- en: '| Class name | Usage |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 用法 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `container` | We use this class to set the web page container and align it
    to the center of the browser window. This class, however, does not give the element
    width. Responsive.gs gives us the flexibility to set the width as per our requirement.
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `container` | 我们使用这个类来设置网页容器并将其对齐到浏览器窗口的中心。然而，这个类并不给出元素的宽度。Responsive.gs给了我们根据需要设置宽度的灵活性。
    |'
- en: '| `row`, `group` | We use these two classes to wrap a group of columns. Both
    of these classes are set with so called self-clearing floats that fix some layout
    issues caused by the element with the CSS `float` property.Check the following
    references for further information about the CSS `float` property and the issue
    it may cause to a web page layout:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '| `row`，`group` | 我们使用这两个类来包装一组列。这两个类都设置了所谓的自清除浮动，以解决由CSS `float`属性引起的一些布局问题。查看以下参考资料，了解有关CSS
    `float`属性以及它可能对网页布局造成的问题的更多信息：'
- en: '*The Mystery Of The CSS Float Property* by Louis Lazaris ([http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/](http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/))'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Louis Lazaris的*CSS浮动属性之谜*([http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/](http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/))
- en: '*All About Floats* by Chris Coyier ([http://css-tricks.com/all-about-floats/](http://css-tricks.com/all-about-floats/))'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chris Coyier的*关于浮动的一切*([http://css-tricks.com/all-about-floats/](http://css-tricks.com/all-about-floats/))
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `col` | We use this class to define the column of the web page. This class
    is set with the CSS `float` property. So any elements set with this class have
    to be contained within an element with the `row` or `group` class to avoid the
    issues caused by the CSS `float` property. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `col` | 我们使用这个类来定义网页的列。这个类设置了CSS `float`属性。因此，任何设置了这个类的元素都必须包含在设置了`row`或`group`类的元素中，以避免CSS
    `float`属性引起的问题。 |'
- en: '| `gutters` | We use this class to add spaces between the columns set with
    the preceding `col` class. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `gutters` | 我们使用这个类来在前面设置了`col`类的列之间添加空间。 |'
- en: '| `span_{x}` | This class defines the column width. So we use this class in
    tandem with the `col` class.Responsive.gs comes in three variants of grid, which
    gives us flexibility while organizing the web page layout. Responsive.gs is available
    in the 12-, 16-, and 24-columns format. These variants are set in three separate
    style sheets. If you download Responsive.gs package and then unpack it, you will
    find three style sheets named `responsive.gs.12col.css`, `responsive.gs.16col.css`,
    and `responsive.gs.24col.css`.The only difference between these style sheets is
    the number of `span_` classes defined within it. It is apparent that the 24-column
    format style sheet has the most number of `span_{x}` classes; the class stretches
    from `span_1` to `span_24`. If you need greater flexibility on dividing your page,
    then using the 24-column format of Responsive.gs is the way to go. Though each
    column may be too narrow. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `span_{x}` | 这个类定义了列宽。因此，我们与`col`类一起使用这个类。Responsive.gs有三种网格变体，这使我们在组织网页布局时更加灵活。Responsive.gs有12、16和24列格式。这些变体设置在三个单独的样式表中。如果你下载了Responsive.gs包，然后解压缩，你会发现三个名为`responsive.gs.12col.css`、`responsive.gs.16col.css`和`responsive.gs.24col.css`的样式表。这些样式表之间唯一的区别是其中定义的`span_`类的数量。显然，24列格式的样式表有最多的`span_{x}`类；该类从`span_1`到`span_24`。如果你需要更大的灵活性来划分你的页面，那么使用Responsive.gs的24列格式是一个好选择。尽管每列可能太窄。|'
- en: '| `clr` | This class is provided to address the floating issue. We use this
    class in the occasion where using the row class would not be semantically appropriate.
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `clr` | 此类用于解决浮动问题。我们在使用行类不合适的情况下使用此类。'
- en: 'Now, let''s see how we apply them in an example to discover how they really
    work. Many times, you will see that a web page is divided into a multiple columns
    structure. Take that into account as our example here; we can do the following
    to construct a web page with two columns of content:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在示例中应用它们，以发现它们真正的作用。很多时候，你会看到一个网页被分成多列结构。以我们的示例为例；我们可以这样构建一个包含两列内容的网页：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from the preceding code snippet, we first added `container` that
    wraps all the contents. Then, it is followed by `div` with a `row` class to wrap
    the columns. At the same time, we also added the `gutters` class so that there
    will be blank space between the two columns. In this example, we used the 12-column
    format. Therefore, to split the page into two equal columns, we added the `span_6`
    class for each column. This is to say that the number of `span_{x}` classes should
    be equal to 12, 16, or 24 in accordance with the variant we are using in order
    for the columns to cover the entire container. So, if we used the 16-columns format,
    for example, we may add `span_8` instead.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码片段中可以看出，我们首先添加了包裹所有内容的`container`。然后，紧随其后的是带有`row`类的`div`，用于包裹列。同时，我们还添加了`gutters`类，以便在两列之间留出空白空间。在这个例子中，我们使用了12列格式。因此，为了将页面分成两个相等的列，我们为每个列添加了`span_6`类。这意味着`span_{x}`类的数量应该等于12、16或24，以便根据我们使用的变体使列覆盖整个容器。因此，如果我们使用了16列格式，我们可以添加`span_8`。
- en: 'In the browser, we will see the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，我们将看到以下输出：
- en: '![The classes](img/image00242.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![The classes](img/image00242.jpeg)'
- en: Using HTML5 elements for semantic markups
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTML5元素进行语义标记
- en: 'Paul Boag, in his article *Semantic code: What? Why? How?* ([http://boagworld.com/dev/semantic-code-what-why-how/](http://boagworld.com/dev/semantic-code-what-why-how/))
    wrote:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 保罗·博格在他的文章《语义代码：什么？为什么？怎么？》中写道：（[http://boagworld.com/dev/semantic-code-what-why-how/](http://boagworld.com/dev/semantic-code-what-why-how/)）
- en: '*HTML was originally intended as a means of describing the content of a document,
    not as a means to make it appear visually pleasing.*'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*HTML最初是用来描述文档内容的手段，而不是为了使其外观上令人愉悦。*'
- en: Unlike traditional content outlets such as newspapers or magazines, which are
    apparently intended for humans, the Web is read both by humans and machines such
    as search engines and screen readers that help visually impaired people navigate
    websites. So making our website structure semantic is really encouraged. Semantic
    markup allows these machines to understand the content better and also makes the
    content more accessible in different formats.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的报纸或杂志等明显是为人类而设计的内容发布不同，网络既被人类阅读，也被搜索引擎和屏幕阅读器等机器阅读，这些机器帮助视觉受损的人浏览网站。因此，使我们的网站结构具有语义是非常鼓励的。语义标记使这些机器更好地理解内容，也使内容在不同格式下更易访问。
- en: 'On that account, HTML5 introduces a bunch of new elements in its mission to
    make the web more semantic. The following is a list of elements that we are going
    to use for the blog:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，HTML5在使网络更具语义的使命中引入了一堆新元素。以下是我们将用于博客的元素列表：
- en: '| Element | Description |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 描述'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `<header>` | The `<header>` element is used to specify the head of a section.
    While this element may be used commonly to specify the website header, it is also
    appropriate to use this element to specify, for example, the article header where
    we place the title and other supporting pieces of the article. We can use `<header>`
    multiple times in a single page where it is fitting. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `<header>` | `<header>`元素用于指定一个部分的头部。虽然这个元素通常用于指定网站的头部，但也适合用于指定文章头部，例如我们放置标题和其他支持文章的部分。我们可以在单个页面中多次使用`<header>`。'
- en: '| `<nav>` | The `<nav>` element is used to represent a group of links that
    is intended as the primary navigation of the website or a section of a page. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `<nav>` | `<nav>`元素用于表示网站的主要导航或页面部分的一组链接。'
- en: '| `<article>` | The `<article>` element is quite self-explanatory. This element
    specifies the article of a website, such as the blog entry or the main page content.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `<article>` | `<article>`元素相当不言自明。该元素指定网站的文章，如博客条目或主页内容。'
- en: '| `<main>` | The `<main>` element defines the main portion of a section. This
    element can be used to do things such as wrapping the article content. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `<main>` | `<main>`元素定义了部分的主要部分。这个元素可以用来做一些事情，比如包装文章内容。|'
- en: '| `<figure>` | The `<figure>` element is used to specify document figures such
    as diagrams, illustrations, and images. The `<figure>` element can be used along
    with `<figcaption>` to add the figure''s caption, if needed. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `<figure>` | `<figure>`元素用于指定文档中的图表、插图和图片。`<figure>`元素可以与`<figcaption>`一起使用，以添加图表的标题（如果需要的话）。|'
- en: '| `<figcaption>` | As mentioned, `<figcaption>` represents the caption of the
    document''s figure. Thus, it must be used in tandem with the `<figure>` element.
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `<figcaption>` | 如前所述，`<figcaption>`表示文档图表的标题。因此，它必须与`<figure>`元素一起使用。|'
- en: '| `<footer>` | Similar to the `<header>` element, the `<footer>` element is
    commonly used to specify the website footer. But it can also be used to represent
    the end or the lowest part of a section. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `<footer>` | 与`<header>`元素类似，`<footer>`元素通常用于指定网站页脚。但它也可以用来表示部分的结束或最低部分。|'
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Refer to the cheat sheet [http://websitesetup.org/html5-cheat-sheet/](http://websitesetup.org/html5-cheat-sheet/),
    to find more new HTML elements in HTML5.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参考这个速查表[http://websitesetup.org/html5-cheat-sheet/](http://websitesetup.org/html5-cheat-sheet/)，了解HTML5中的更多新元素。
- en: HTML5 search input types
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5搜索输入类型
- en: Besides the new elements, we will also add one particular new type of input
    on the blog, search. As the name implies, the search input type is used to specify
    a search input. In the desktop browsers, you may not see a significant difference.
    You may also not immediately see how the search input type give advantages to
    the website and the users.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了新元素，我们还将在博客中添加一种特定的新输入类型，搜索。顾名思义，搜索输入类型用于指定搜索输入。在桌面浏览器中，您可能看不到明显的区别。您可能也不会立即看到搜索输入类型如何为网站和用户带来优势。
- en: 'The search input type will boost the experience of mobile users. Mobile platforms
    such as iOS, Android, and the Windows Phone have been equipped with contextual
    screen keyboards. The keyboard will change according to the input type. You can
    see in the following screenshot that the keyboard displays the **Search** button,
    which allows users to perform a search more conveniently:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索输入类型将提升移动用户的体验。iOS、Android和Windows Phone等移动平台已经配备了上下文屏幕键盘。键盘会根据输入类型而改变。您可以在下面的屏幕截图中看到，键盘显示了**搜索**按钮，让用户更方便地进行搜索：
- en: '![HTML5 search input types](img/image00243.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5搜索输入类型](img/image00243.jpeg)'
- en: HTML5 placeholder attribute
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML5 placeholder属性
- en: 'HTML5 introduced a new attribute named `placeholder`. The specs described this
    attribute as a short hint (a word or short phrase) intended to aid the user with
    data entry when the control has no value, as shown in the following example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5引入了一个名为`placeholder`的新属性。规范描述了这个属性作为一个短提示（一个词或短语），旨在在控件没有值时帮助用户进行数据输入，如下面的例子所示：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see that **Search here…** in the `placeholder` attribute is shown
    in the input field, as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到`placeholder`属性中的**在这里搜索…**显示在输入字段中，如下面的屏幕截图所示：
- en: '![HTML5 placeholder attribute](img/image00244.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![HTML5 placeholder属性](img/image00244.jpeg)'
- en: In the past, we relied on JavaScript to achieve a similar effect. Today, with
    the `placeholder` attribute, the application gets much simpler.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我们依赖JavaScript来实现类似的效果。如今，有了`placeholder`属性，应用程序变得简单得多。
- en: HTML5 in Internet Explorer
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5在Internet Explorer中
- en: These new HTML elements make our document markup more descriptive and meaningful.
    Unfortunately, Internet Explorer 6, 7, and 8 will not recognize them. Thus, the
    selectors and style rules that address these elements are inapplicable; it is
    as if these new elements are not included in the Internet Explorer dictionary.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新的HTML元素使我们的文档标记更具描述性和意义。不幸的是，Internet Explorer 6、7和8将无法识别它们。因此，无法应用到这些元素的选择器和样式规则；就好像这些新元素没有包含在Internet
    Explorer字典中一样。
- en: This is where a polyfill named HTML5Shiv comes into play. We will include HTML5Shiv
    ([https://github.com/aFarkas/html5shiv](https://github.com/aFarkas/html5shiv))
    to make Internet Explorer 8 and its lower versions acknowledge these new elements.
    Read the following post ([http://paulirish.com/2011/the-history-of-the-html5-shiv/](http://paulirish.com/2011/the-history-of-the-html5-shiv/))
    by Paul Irish for the history behind HTML5Shiv; how it was invented and developed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是一个名为HTML5Shiv的polyfill发挥作用的地方。我们将包括HTML5Shiv（[https://github.com/aFarkas/html5shiv](https://github.com/aFarkas/html5shiv)）来使Internet
    Explorer 8及更低版本认识这些新元素。阅读Paul Irish的以下帖子（[http://paulirish.com/2011/the-history-of-the-html5-shiv/](http://paulirish.com/2011/the-history-of-the-html5-shiv/)）了解HTML5Shiv背后的历史；它是如何发明和发展的。
- en: Furthermore, older Internet Explorer versions won't be able to render the content
    in the HTML5 `placeholder` attribute. Fortunately, we can patch mimic the `placeholder`
    attribute functionality in the old Internet Explorer with a polyfill ([https://github.com/UmbraEngineering/Placeholder](https://github.com/UmbraEngineering/Placeholder)).
    We will use it later on the blog as well.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，旧版的Internet Explorer无法渲染HTML5中的`placeholder`属性中的内容。幸运的是，我们可以使用一个polyfill（[https://github.com/UmbraEngineering/Placeholder](https://github.com/UmbraEngineering/Placeholder)）来模拟旧版Internet
    Explorer中`placeholder`属性的功能。我们以后也会在博客中使用它。
- en: A look into polyfills in the Responsive.gs package
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Responsive.gs包中查看polyfills
- en: Responsive.gs is also shipped with two polyfills to enable certain features
    that are not supported in Internet Explorer 6, 7, and 8\. From now on, let's refer
    to these browser versions as "old Internet Explorer", shall we?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Responsive.gs还附带了两个polyfills，以启用Internet Explorer 6、7和8中不支持的某些功能。从现在开始，让我们把这些浏览器版本称为“旧版Internet
    Explorer”，好吗？
- en: Box sizing polyfills
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 盒模型polyfills
- en: The first polyfill is available through an **HTML Component** (**HTC**) file
    named `boxsizing.htc`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个polyfill是通过名为`boxsizing.htc`的**HTML组件**（**HTC**）文件提供的。
- en: An HTC file is much the same as JavaScript and is commonly used in tandem with
    the Internet Explorer proprietary CSS property `behavior` to add a specific functionality
    to Internet Explorer. The `boxsizing.htc` file that comes with Responsive.gs will
    apply a similar functionality as in the CSS3 `box-sizing` property.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: HTC文件与JavaScript非常相似，通常与Internet Explorer专有的CSS属性`behavior`一起使用，以为Internet Explorer添加特定功能。Responsive.gs附带的`boxsizing.htc`文件将应用与CSS3
    `box-sizing`属性类似的功能。
- en: 'Responsive.gs includes the `boxsizing.htc` file within the style sheets as
    follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Responsive.gs在样式表中包含了`boxsizing.htc`文件，如下所示：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As shown in the preceding code snippet, Responsive.gs applies the `box-sizing`
    property and includes the `boxsizing.htc` file with the asterisk selector. This
    asterisk selector is also known as wildcard selector; it selects all the elements
    within the document, and that being said, `box-sizing`, in this case, will affect
    all elements within the document.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的代码片段所示，Responsive.gs应用了`box-sizing`属性，并在通配符选择器中包含了`boxsizing.htc`文件。这个通配符选择器也被称为通配符选择器；它选择文档中的所有元素，也就是说，在这种情况下，`box-sizing`将影响文档中的所有元素。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `boxsizing.htc` file path must be an absolute path or relative to the HTML
    document in order for polyfill to work. This is a hack. It is something we forcibly
    use to make old Internet Explorer behave like a modern browser. Using an HTC file
    such as the preceding one is not considered valid as per the W3C standards.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`boxsizing.htc`文件路径必须是绝对路径或相对于HTML文档的路径，以使填充脚本起作用。这是一个技巧。这是我们强制使用的东西，以使旧版Internet
    Explorer表现得像现代浏览器一样。像上面的HTC文件一样使用并不符合W3C标准。 '
- en: Please refer to this page by Microsoft regarding HTC files ([http://msdn.microsoft.com/en-us/library/ms531018(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ms531018(v=vs.85).aspx)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考微软关于HTC文件的页面（[http://msdn.microsoft.com/en-us/library/ms531018(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ms531018(v=vs.85).aspx)）。
- en: CSS3 media queries polyfill
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS3媒体查询填充
- en: 'The second polyfill script that comes along with Responsive.gs is `respond.js`
    ([https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond)),
    which will "magically enable" CSS3 `respond.js` to work out of the box. There
    is no need for configuration; we can simply link the script within the `head`
    tag as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Responsive.gs附带的第二个填充脚本是`respond.js`（[https://github.com/scottjehl/Respond](https://github.com/scottjehl/Respond)），它将"神奇地启用"CSS3
    `respond.js`以使其立即可用。无需配置；我们可以简单地在`head`标签中链接脚本，如下所示：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, we encapsulated the script inside `<!--[if lt IE 9]>`
    to make the script load only within the old Internet Explorer.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们将脚本封装在`<!--[if lt IE 9]>`中，以便脚本只在旧版Internet Explorer中加载。
- en: Examining the blog's wireframe
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查博客的线框图
- en: Building a website is much the same as building a house; we need to examine
    the specification of every corner before we stack up all the bricks. So, before
    we jump in to building the blog, we will examine the blog's wireframe to see how
    the blog is laid out and also see the things that will be displayed on the blog.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 建立网站与建造房子很相似；我们需要在堆砌所有砖块之前检查每个角落的规格。因此，在我们着手建立博客之前，我们将检查博客的线框图，看看博客的布局是如何排列的，以及将在博客上显示的内容。
- en: 'Let''s take a look at the following wireframe. This wireframe shows the blog
    layout when it is viewed on the desktop screen:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下下面的线框图。这个线框图展示了在桌面屏幕上查看博客布局时的情况：
- en: '![Examining the blog''s wireframe](img/image00245.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![检查博客的线框图](img/image00245.jpeg)'
- en: As you can see in the preceding screenshot, the blog will be plain and simple.
    In the header, the blog will have a logo and a search form. Down below the header,
    consecutively, we will place the menu navigation, the blog post, the pagination
    for navigating to the next or previous list of posts, and the footer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在上面的截图中所示，博客将是简单明了的。在页眉中，博客将有一个标志和一个搜索表单。在页眉下方，依次放置菜单导航、博客文章、用于导航到下一个或上一个文章列表的分页和页脚。
- en: The blog post, as in general, will comprise the title, the publishing date,
    the post's featured image, and the post excerpt. This wireframe is an abstraction
    of the blog's layout. We use it as our visual reference of how the blog layout
    will be arranged. So, in spite of the fact that we have shown only one post within
    the preceding wireframe, we will actually add a few more post items on the actual
    blog later on.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 博客文章通常包括标题、发布日期、文章的特色图片和文章摘要。这个线框图是博客布局的抽象。我们将用它作为博客布局将如何排列的视觉参考。因此，尽管我们在前面的线框图中只显示了一篇文章，但实际上我们稍后会在实际博客中添加更多的文章。
- en: 'The following is the blog layout when the viewport width is squeezed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当视口宽度被挤压时，以下是博客布局：
- en: '![Examining the blog''s wireframe](img/image00246.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: 检查博客的线框图
- en: When the viewport width gets narrow, the blog layout adapts. It is worth noticing
    that when we shift the layout, we should not alter the content flow as well as
    the UI hierarchy. Assuring the layout consistency between the desktop and the
    mobile version will help the users get familiar with a website quickly, regardless
    of where they are viewing the website. As shown in the preceding wireframe, we
    still have the UI set in the same order, albeit, they are now stacked vertically
    in order to fit in the limited area.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当视口宽度变窄时，博客布局会自适应。值得注意的是，当我们改变布局时，我们不应该改变内容流和UI层次结构。确保桌面版和移动版之间的布局一致性将帮助用户快速熟悉网站，无论他们在哪里查看网站。如上面的线框图所示，我们仍然按照相同的顺序设置了UI，尽管它们现在是垂直堆叠以适应有限的区域。
- en: One thing that is worth mentioning from this wireframe is that the navigation
    turns into an HTML dropdown selection. We will discuss how to do so during the
    course of building the blog.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个线框图值得一提的是，导航变成了一个HTML下拉选择。在建立博客的过程中，我们将讨论如何做到这一点。
- en: Now, as we have prepared the tools and checked out the blog layout, we are ready
    to start off the project. We will start off by creating and organizing the project
    directories and assets.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好工具并检查了博客布局，我们准备开始项目。我们将从创建和组织项目目录和资产开始。
- en: Organizing project directories and files
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织项目目录和文件
- en: Often, we will have to link to certain files, such as style sheets and images.
    Unfortunately, websites are not a clever thing; they cannot find these files on
    their own. So, we must set the filepath correctly to avoid broken link errors.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将不得不链接到某些文件，比如样式表和图片。不幸的是，网站并不聪明；它们无法自行找到这些文件。因此，我们必须正确设置文件路径，以避免链接错误。
- en: This is why having organized directories and files is essential when it comes
    to building websites. It will be exceptionally important when we are working on
    a very large project with a team of people and with dozens to hundreds of files
    to handle. Poorly managed directories could drive anyone in the team insane.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在构建网站时拥有有组织的目录和文件是至关重要的。当我们在一个由许多人组成的团队中进行非常大型的项目，并且需要处理数十到数百个文件时，这将变得非常重要。管理不善的目录可能会让团队中的任何人都发疯。
- en: Having well-organized directories will help us minimize potential errors of
    broken links. It will also make the project more maintainable and easily scalable
    in the future.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有组织良好的目录将帮助我们最小化潜在的链接错误。这也将使项目在未来更易于维护和扩展。
- en: Time for action – creating and organizing project directories and assets
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和组织项目目录和资产的行动时间
- en: 'Perform the following steps to set up the project''s working directory:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来设置项目的工作目录：
- en: 'Go to the `htdocs` folder. As a reminder, this folder is the folder in the
    local server located at:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`htdocs`文件夹。作为提醒，这个文件夹是位于本地服务器中的文件夹：
- en: '`C:\xampp\htdocs` in Windows'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows中的`C:\xampp\htdocs`
- en: '`/Applications/XAMPP/htdocs` in OSX'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OSX中的`/Applications/XAMPP/htdocs`
- en: '`/opt/lampp/htdocs` in Ubuntu'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ubuntu中的`/opt/lampp/htdocs`
- en: Create a new folder named `blog`. From now on, we will refer to this folder
    as the project directory.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`blog`的新文件夹。从现在开始，我们将把这个文件夹称为项目目录。
- en: Create a new folder named `css` to store style sheets.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`css`的新文件夹来存储样式表。
- en: Create a new folder named `image` to store images.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`image`的新文件夹来存储图片。
- en: Create a new folder named `scripts` to store JavaScript files.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`scripts`的新文件夹来存储JavaScript文件。
- en: Create a new file named `index.html`; this HTML file will be the main page of
    the blog. Download the Responsive.gs package from [http://responsive.gs/](http://responsive.gs/).
    The package comes in the `.zip` format. Extract the package to unleash the files
    within the package. There, you will find a number of files, including style sheets
    and JavaScript files, as you can see from the following screenshot:![Time for
    action – creating and organizing project directories and assets](img/image00247.jpeg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的新文件；这个HTML文件将是博客的主页。从[http://responsive.gs/](http://responsive.gs/)下载Responsive.gs软件包。该软件包以`.zip`格式提供。解压缩软件包以释放其中的文件。在那里，你会发现许多文件，包括样式表和JavaScript文件，正如你从以下截图中所看到的：![Time
    for action – creating and organizing project directories and assets](img/image00247.jpeg)
- en: The files that ship in Responsive.gs
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Responsive.gs中的文件
- en: Move `responsive.gs.12col.css` to the `css` folder of the project directory;
    it is the only style sheet of Responsive.gs that we need.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`responsive.gs.12col.css`移动到项目目录的`css`文件夹中；这是我们需要的Responsive.gs唯一的样式表。
- en: Move `boxsizing.htc` to the `scripts` folder of the project directory.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`boxsizing.htc`移动到项目目录的`scripts`文件夹中。
- en: The `respond.js` file that ships in the Responsive.gs package is out-of-date.
    Let's download the latest version of Respond.js from the GitHub repository ([https://github.com/scottjehl/Respond/blob/master/src/respond.js](https://github.com/scottjehl/Respond/blob/master/src/respond.js))
    instead, and put it in the `scripts` folder of the project directory.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Responsive.gs软件包中的`respond.js`文件已过时。让我们从GitHub存储库（[https://github.com/scottjehl/Respond/blob/master/src/respond.js](https://github.com/scottjehl/Respond/blob/master/src/respond.js)）下载最新版本的Respond.js，并将其放在项目目录的`scripts`文件夹中。
- en: Download HTML5Shiv from [https://github.com/aFarkas/html5shiv](https://github.com/aFarkas/html5shiv).
    Put the JavaScript file `html5shiv.js` within the `scripts` folder.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/aFarkas/html5shiv](https://github.com/aFarkas/html5shiv)下载HTML5Shiv。将JavaScript文件`html5shiv.js`放在`scripts`文件夹中。
- en: We will also use the placeholder polyfill that is developed by James Brumond
    ([https://github.com/UmbraEngineering/Placeholder](https://github.com/UmbraEngineering/Placeholder)).
    James Brumond developed four different JavaScript files for cater to different
    scenarios.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将使用由James Brumond开发的占位符填充（[https://github.com/UmbraEngineering/Placeholder](https://github.com/UmbraEngineering/Placeholder)）。James
    Brumond为不同的场景开发了四种不同的JavaScript文件。
- en: The script that we are going to use here is `ie-behavior.js`, because this script
    specifically addresses Internet Explorer. Download the script ([https://raw.githubusercontent.com/UmbraEngineering/Placeholder/master/src/ie-behavior.js](https://raw.githubusercontent.com/UmbraEngineering/Placeholder/master/src/ie-behavior.js))
    and rename it as `placeholder.js` to make it more apparent that this script is
    a placeholder polyfill. Put it in the `scripts` folder of the project directory.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这里使用的脚本是`ie-behavior.js`，因为这个脚本专门针对Internet Explorer。下载脚本（[https://raw.githubusercontent.com/UmbraEngineering/Placeholder/master/src/ie-behavior.js](https://raw.githubusercontent.com/UmbraEngineering/Placeholder/master/src/ie-behavior.js)）并将其重命名为`placeholder.js`，以使其更明显地表明这个脚本是一个占位符填充。将其放在项目目录的`scripts`文件夹中。
- en: The blog will need a few images to use as the post's featured image. In this
    book, we will use the images shown in the following screenshot, consecutively
    taken by Levecque Charles ([https://twitter.com/Charleslevecque](https://twitter.com/Charleslevecque))
    and Jennifer Langley ([https://jennifer-langley.squarespace.com/photography/](https://jennifer-langley.squarespace.com/photography/)):![Time
    for action – creating and organizing project directories and assets](img/image00248.jpeg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 博客将需要一些图像作为帖子的特色图像。在本书中，我们将使用以下屏幕截图中显示的图像，这些图像是由Levecque Charles（[https://twitter.com/Charleslevecque](https://twitter.com/Charleslevecque)）和Jennifer
    Langley（[https://jennifer-langley.squarespace.com/photography/](https://jennifer-langley.squarespace.com/photography/)）连续拍摄的：![行动时间-创建和组织项目目录和资产](img/image00248.jpeg)
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Find more free high-definition images at Unsplash ([http://unsplash.com/](http://unsplash.com/)).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unsplash（[http://unsplash.com/](http://unsplash.com/)）上找到更多免费的高清图像。
- en: We will add a favicon to the blog. A favicon is a tiny icon that appears on
    the browser tab beside the title, which will be helpful for readers to quickly
    identify the blog. The following is a screenshot that shows a number of pinned
    tabs in Chrome. I bet that you are still able to recognize the websites within
    these tabs just by seeing the favicon:![Time for action – creating and organizing
    project directories and assets](img/image00249.jpeg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为博客添加一个网站图标。网站图标是一个小图标，出现在浏览器标签旁边的标题旁边，这对于读者快速识别博客将会很有帮助。以下是一个屏幕截图，显示了Chrome中的一些固定标签。我敢打赌，你仍然能够通过查看网站图标来识别这些标签中的网站：![行动时间-创建和组织项目目录和资产](img/image00249.jpeg)
- en: Google Chrome pinned tabs
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome固定标签
- en: Further, we will also add the iOS icon. In Apple devices such as iPhone and
    iPad, we can pin websites on the home screen to make it quick to access the website.
    This is where the Apple icon turns out to be useful. iOS (the iPhone/iPad operating
    system) will show the icon we provide, as shown in the following screenshot, as
    if it was a native application:![Time for action – creating and organizing project
    directories and assets](img/image00250.jpeg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们还将添加iOS图标。在iPhone和iPad等苹果设备上，我们可以将网站固定在主屏幕上，以便快速访问网站。这就是苹果图标派上用场的地方。iOS（iPhone/iPad操作系统）将显示我们提供的图标，如下面的屏幕截图所示，就像是一个本地应用程序：![行动时间-创建和组织项目目录和资产](img/image00250.jpeg)
- en: Website added to the iOS home screen
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将网站添加到iOS主屏幕
- en: These icons are provided in the source files that come along with this book.
    Copy these icons and paste them in the image folder that we have just created
    in step 5, as shown in the following screenshot:![Time for action – creating and
    organizing project directories and assets](img/image00251.jpeg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些图标包含在随本书提供的源文件中。将这些图标复制并粘贴到我们刚刚在步骤5中创建的图像文件夹中，如下面的屏幕截图所示：![行动时间-创建和组织项目目录和资产](img/image00251.jpeg)
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Create favicons and iOS icons quickly and easily with AppIconTemplate.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AppIconTemplate快速轻松地创建网站图标和iOS图标。
- en: AppIconTemplate ([http://appicontemplate.com/](http://appicontemplate.com/))
    is a Photoshop template that makes it easy for us to design the icon. The template
    is also shipped with Photoshop Actions to generate the icons with a few clicks.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: AppIconTemplate（[http://appicontemplate.com/](http://appicontemplate.com/)）是一个Photoshop模板，可以让我们轻松设计图标。该模板还附带了Photoshop操作，可以通过几次点击生成图标。
- en: '*What just happened?*'
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We have just created a directory for this project and put a couple of files
    in the directory. These files include the Responsive.gs style sheets and JavaScript
    files, images and icons, and a number of polyfills. We have also created an `index.html`
    file that will be the home page for the blog. At this point, the project directory
    should contain files as shown in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为这个项目创建了一个目录，并将一些文件放入了该目录。这些文件包括Responsive.gs样式表和JavaScript文件、图像和图标，以及一些polyfill。我们还创建了一个`index.html`文件，这将是博客的主页。此时，项目目录应包含如下屏幕截图中显示的文件：
- en: '![What just happened?](img/image00252.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00252.jpeg)'
- en: The current files and folders in the working directory
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的工作目录中的文件和文件夹
- en: Have a go hero – making the directory structure more organized
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试使目录结构更有组织性
- en: Many people have their own preferences for how to organize their project's directory
    structure. The one shown in the previous section was just an example, of how I
    personally manage the directory for this project.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人对如何组织他们项目的目录结构有自己的偏好。在上一节中显示的只是一个例子，是我个人管理该项目目录的方式。
- en: 'Try going further to make the directory more organized and meet your own preference
    for organization. A few common ideas are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试进一步使目录更有组织，并满足您对组织的个人偏好。一些常见的想法如下：
- en: Make the folder name shorter, that is, `js` and `img`, instead of JavaScript
    and Image
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩短文件夹名称，即`js`和`img`，而不是JavaScript和Image
- en: Group the folders `js`, `img`, and `css` all together in a new folder named
    `assets`
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`js`、`img`和`css`文件夹全部放在一个名为`assets`的新文件夹中
- en: Pop quiz – using polyfill
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验-使用polyfill
- en: Earlier in this book, we discussed polyfill and also mentioned a few polyfill
    scripts that we are going to implement in the blog.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早些时候，我们讨论了polyfill，并提到了一些我们将在博客中实现的polyfill脚本。
- en: Q1\. When do you think would be an appropriate time to use the polyfill?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Q1.你认为何时使用polyfill会更合适？
- en: When the blog is viewed in Internet Explorer 6.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当博客在Internet Explorer 6中查看时。
- en: When the feature is not supported in the browser.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当浏览器不支持该功能时。
- en: When we need to add new feature on the website.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们需要在网站上添加新功能时。
- en: We can use it at anytime.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以随时使用它。
- en: The blog HTML structures
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 博客HTML结构
- en: We have laid the structure of the project directories and files in the previous
    section. Let's now start constructing the blog markup. As we mentioned, we will
    use a number of HTML5 elements to form a more meaningful HTML structure.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中已经介绍了项目目录和文件的结构。现在让我们开始构建博客标记。正如我们提到的，我们将使用一些HTML5元素来形成更有意义的HTML结构。
- en: Time for action – constructing the blog
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-构建博客
- en: 'Perform the following steps to build the blog:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来构建博客：
- en: 'Open the `index.html` file that we have created in step 6 of the previous section
    *Time for action – creating and organizing project directories and assets*. Let''s
    start by adding the most basic HTML5 structure as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在上一节*行动时间-创建和组织项目目录和资产*的第6步中创建的`index.html`文件。让我们从添加最基本的HTML5结构开始，如下所示：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, set `DOCTYPE`, which has been brought to the bare minimum form. The `DOCTYPE`
    format in HTML5 is now shorter and cleaner than the `DOCTYPE` format of its HTML4
    counterpart. Then, we set the language of our page, which in this case is set
    to `en` (English). You may change it to your local language; find the code for
    your local language at [http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，设置`DOCTYPE`，它已经被简化到最低形式。HTML5中的`DOCTYPE`格式现在比其HTML4对应格式更短更干净。然后，我们设置页面的语言，这里设置为`en`（英语）。您可以根据自己的语言更改它；在[http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)上找到您本地语言的代码。
- en: We have also set the character encoding to `UTF-8` to enable the browser to
    render the Unicode characters, such as `U+20AC`, to the readable format `€`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将字符编码设置为`UTF-8`，以使浏览器能够将Unicode字符（如`U+20AC`）呈现为可读格式`€`。
- en: 'Below the `charset` meta tag in the `head` tag, add the following meta:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`head`标签中的`charset`元标签下方，添加以下meta：
- en: '[PRE5]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Internet Explorer can sometimes behave oddly, where it suddenly switches to
    compatibility mode and renders the page as viewed in Internet Explorer 8 and 7\.
    This meta tag addition will prevent that from happening. It will force Internet
    Explorer to render the page with the highest support of the latest standards available
    in Internet Explorer.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer有时会表现得很奇怪，突然切换到兼容模式，并以Internet Explorer 8和7中查看的方式呈现页面。这个meta标签的添加将阻止这种情况发生。它将强制Internet
    Explorer以最新标准的最高支持度呈现页面。
- en: 'Below the `http-equiv` meta tag, add the following meta viewport tag:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http-equiv`元标签下方，添加以下meta视口标签：
- en: '[PRE6]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we mentioned in [Chapter 1](part0016.xhtml#aid-F8902 "Chapter 1. Responsive
    Web Design"), *Responsive Web Design*, the preceding viewport meta tag specification
    defines the web page viewport width to follow the device viewport size. It also
    defines the web page scale at 1:1 upon opening the web page the first time.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](part0016.xhtml#aid-F8902 "第1章.响应式网页设计")中提到的*响应式网页设计*，前面的视口meta标签规范定义了网页视口宽度，以跟随设备视口大小。它还定义了在首次打开网页时的网页比例为1:1。
- en: 'Link the Apple icon with the `link` tag, as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`link`标签将苹果图标链接如下：
- en: '[PRE7]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As per Apple's official instructions, you would normally need to include multiple
    sources of icons to cater to iPhone, iPad, and the devices with a Retina screen.
    That isn't actually necessary for our blog. The trick is that we deliver the largest
    size required, which is 512 px square, through a single source, as shown in the
    previous screenshot.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 根据苹果的官方说明，通常需要包含多个图标源，以满足iPhone、iPad和具有Retina屏幕的设备。这对我们的博客实际上并不是必要的。诀窍在于，我们通过单一来源提供所需的最大尺寸，即512像素，如前面的屏幕截图所示。
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Head over to the Apple documentation, specifying a web page icon for Web Clip
    ([https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html)),
    for further reference.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 前往苹果文档，为Web Clip指定网页图标（[https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html)），以供进一步参考。
- en: 'Add a description meta tag below the title, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题下方添加描述meta标签，如下所示：
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This description of the blog will show up in **Search Engine Result Page**
    (**SERP**). In this step, we will construct the blog header. First, let''s add
    the HTML5 `<header>` element along with the classes for styling, to wrap the header
    content. Add the following within the `body` tag:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 博客的描述将显示在**搜索引擎结果页面**（**SERP**）中。在这一步中，我们将构建博客标题。首先，让我们添加HTML5的`<header>`元素以及用于样式的类，以包装标题内容。在`body`标签中添加以下内容：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Within the `<header>` element that we added in step 9, add a new `<div>` element
    with the `container` and `gutters` class, as follows:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们在第9步中添加的`<header>`元素中，添加一个新的`<div>`元素，带有`container`和`gutters`类，如下所示：
- en: '[PRE10]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Referring to the table shown earlier in the chapter, the `container` class will
    align the blog header content to the center of the browser window, while the `gutters`
    class will add spaces between the columns, which we will add in the next steps.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章前面显示的表格，`container`类将使博客标题内容居中于浏览器窗口，而`gutters`类将在下一步中添加的列之间添加间距。
- en: 'Create a new column to contain the blog logo/name with a `<div>` element along
    with the Responsive.gs `col` and `span_9` class to set the `<div>` element as
    column and specify the width. Don''t forget to add the class to add custom styles:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的列中创建一个包含博客标志/名称的`<div>`元素，以及Responsive.gs的`col`和`span_9`类，将`<div>`元素设置为列并指定宽度。不要忘记添加类以添加自定义样式：
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Referring to the blog wireframe, we will have a search form next to the blog
    logo/name. On that account, create another new column with a `<div>` element together
    with the `col` and `span_3` class of Responsive.gs, and the input search type.
    Add the `<div>` element below the logo markup as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考博客线框图，我们将在博客标志/名称旁边放置一个搜索表单。因此，使用Responsive.gs的`col`和`span_3`类以及输入搜索类型创建另一个新的列。在标志标记下方添加以下`<div>`元素：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we mentioned earlier in this chapter, we used an input search type to serve
    a better user experience. This input will show the mobile screen keyboard with
    a special key that allows users to hit the **Search** button and immediately run
    the search. We also added placeholder text with the HTML5 `placeholder` attribute
    to show the users that they can perform a search in the blog through the input
    field.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面提到的，我们使用了一个输入搜索类型来提供更好的用户体验。这个输入将显示移动屏幕键盘，带有一个特殊的键，允许用户点击**搜索**按钮并立即运行搜索。我们还使用HTML5的`placeholder`属性添加占位文本，向用户显示他们可以通过输入框在博客中进行搜索。
- en: 'After constructing the header blog, we will construct the blog navigation.
    Here we will use the HTML5 `nav` element to define a new section as navigation.
    Create a `nav` element along with the supporting classes to style. Add the `nav`
    element below the header construction as follows:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建完头部博客后，我们将构建博客导航。在这里，我们将使用HTML5的`nav`元素来定义一个新的导航部分。创建一个带有支持样式的`nav`元素。在头部构建下方添加`nav`元素如下：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inside the `nav` element, create a `div` element with the `container` class
    to align the navigation content to the center of the browser window:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`nav`元素内，创建一个带有`container`类的`div`元素，将导航内容对齐到浏览器窗口的中心：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In accordance to the wireframe, the blog will have five items on the link menu.
    We will lay out this link with the `ul` element. Add the links within the container,
    as shown in the following code snippet:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据线框图，博客将在链接菜单上有五个项目。我们将使用`ul`元素布置这些链接。在容器内添加链接，如下所示的代码片段：
- en: '[PRE15]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Having done with constructing the navigation, we will construct the content
    section of the blog. Following the wireframe, the content will consist a list
    of posts. First, let''s add the HTML5 `<main>` element to wrap the content below
    the navigation as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成导航构建后，我们将构建博客内容部分。根据线框图，内容将包括一系列文章。首先，让我们添加HTML5的`<main>`元素，将内容包裹在导航下方如下：
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use the `<main>` element as we consider the posts as the prime section of
    our blog.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`<main>`元素，因为我们认为文章是博客的主要部分。
- en: 'Similar to the other blog sections—the header and the navigation—we add a container
    `<div>` to align the blog posts to the center. Add this `<div>` element within
    the `<main>` element:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与其他博客部分一样——头部和导航——我们添加一个容器`<div>`将博客文章对齐到中心。在`<main>`元素内添加这个`<div>`元素：
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will now create the blog post markup. Think of the blog post as an article.
    Thus, here we will use the `<article>` element. Add the `<article>` element within
    the container `<div>` that we will add in step 17 as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建博客文章的标记。把博客文章想象成一篇文章。因此，在这里我们将使用`<article>`元素。在第17步中添加的容器`<div>`内添加`<article>`元素如下：
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As mentioned, the `<header>` element is not limited to define a header. The
    blog can be used to define the head of a section. In this case, apart from the
    blog header, we will use the `<header>` element to define the articles head section
    that contains the article title and publishing date.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，`<header>`元素不仅限于定义头部。博客也可以用来定义一个部分的头部。在这种情况下，除了博客头部，我们将使用`<header>`元素来定义包含文章标题和发布日期的文章头部部分。
- en: 'Add the `<header>` element within the article element:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文章元素内添加`<header>`元素：
- en: '[PRE19]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A picture is worth a thousand words. So, it''s the norm to use an image to
    support the post. Here, we will display the image below the post header. We will
    group the featured image together with the post excerpt as the post summary, as
    shown in the following code:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一图胜千言。因此，使用图片来支持文章是常态。在这里，我们将在文章头部下方显示图片。我们将特色图片与文章摘要一起分组，作为文章摘要，如下所示：
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Add a few more posts subsequently. Optionally, you may exclude the post featured
    image in the other posts.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 随后添加几篇文章。可选地，你可以在其他文章中排除特色图片。
- en: After adding a pile of posts, we will now add the post pagination. The pagination
    is a form of common page navigation that allows us to jump to the next or previous
    list of posts. Normally, the pagination is located at the bottom of the page after
    the last post item.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加了一堆文章后，我们现在将添加文章分页。分页是一种常见的页面导航形式，允许我们跳转到下一个或上一个文章列表。通常，分页位于最后一篇文章项之后的页面底部。
- en: The pagination of a blog consists of two links to navigate to the next and previous
    page, and a small section to place the page numbers to show what page the user
    is currently in.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 博客的分页包括两个链接，用于导航到下一页和上一页，以及一个小节用于放置页面数字，显示用户当前所在的页面。
- en: 'So, add the following code after the last post:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一篇文章后添加以下代码：
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we will construct the blog footer. We can define the blog footer using
    the HTML5 `<footer>` element. The footer structure is identical to the one for
    the header. The footer will have two columns; each respectively contains the blog
    footer links (or, as we call it, secondary navigation) and copyright statement.
    These columns are wrapped with a `<div>` container. Add the following footer in
    the main section, as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将构建博客页脚。我们可以使用HTML5的`<footer>`元素来定义博客页脚。页脚结构与头部相同。页脚将有两列；分别包含博客页脚链接（或者，我们称之为次要导航）和版权声明。这些列将被包裹在一个`<div>`容器内。在主要部分添加以下页脚，如下所示：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*What just happened?*'
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have just finished constructing the blog's HTML structure—the header, the
    navigation, the content, and the footer. Assuming that you have been following
    our instructions closely, you can access the blog at `http://localhost/blog/`
    or `http://{coputer-username}.local/blog/` in OS X.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了博客的HTML结构——头部、导航、内容和页脚。假设你一直在密切关注我们的指示，你可以在`http://localhost/blog/`或`http://{coputer-username}.local/blog/`中访问博客。
- en: 'However, as we haven''t applied any styles, you will find that the blog is
    looking plain and the layout is yet to be organized:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于我们还没有应用任何样式，你会发现博客看起来很简单，布局还没有组织好：
- en: '![What just happened?](img/image00253.jpeg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00253.jpeg)'
- en: The blog appearance at the current stage
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当前阶段的博客外观
- en: We will style the blog in the next chapter.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中为博客添加样式。
- en: Have a go hero – creating more blog pages
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄试试看-创建更多博客页面
- en: In this book, we only build the blog's home page. However, you are free to extend
    the blog by creating more pages, such as adding an about page, a single post content
    page, and a page with a contact form. You may reuse the HTML structure that we
    have built in this chapter. Remove anything within the `<main>` element and replace
    it with content as per your requirement.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只构建了博客的主页。但是，您可以通过创建更多页面来扩展博客，例如添加关于页面、单篇文章内容页面和带有联系表单的页面。您可以重用本章中构建的HTML结构。删除`<main>`元素内的任何内容，并根据需要替换为内容。
- en: Pop quiz – HTML5 elements
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验-HTML5元素
- en: 'Let''s end this chapter with simple questions regarding HTML5:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以有关HTML5的简单问题结束本章：
- en: Q1\. What is the `<header>` element used for?
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. `<header>`元素用于什么？
- en: It is used to represent the website header.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用于表示网站页眉。
- en: It is used to represent a group of introductory and navigational aids.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用于表示一组介绍和导航辅助。
- en: Q2\. What is the `<footer>` element used for?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. `<footer>`元素用于什么？
- en: It is used to represent the website footer.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用于表示网站页脚。
- en: It is used to represent the end or the lowest part of a section.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它用于表示部分的结束或最低部分。
- en: Q3\. Is it allowed to use the `<header>` and `<footer>` elements multiple times
    within a single page?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 在单个页面内允许多次使用`<header>`和`<footer>`元素吗？
- en: Yes, as long as it's semantically logical.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，只要语义上合乎逻辑。
- en: No, it's considered redundant.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，这被认为是多余的。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started our first project. Earlier in the chapter, we explored
    the Responsive.gs components, looked into how Responsive.gs constructs a responsive
    grid, and what classes are used to shape the grid.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了我们的第一个项目。在本章的早些时候，我们探讨了Responsive.gs组件，了解了Responsive.gs如何构建响应式网格，以及用于塑造网格的类。
- en: We also discussed HTML5, including the new elements, namely, the polyfills to
    mimic HTML5 features in the browsers that do not support particular features natively.
    Then, we used HTML5 to construct the blog markup.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了HTML5，包括新元素，即在不支持特定功能的浏览器中模仿HTML5功能的polyfills。然后，我们使用HTML5构建博客标记。
- en: In the next chapter, we will be focusing more on marking the blog up using CSS3
    and adding some JavaScript. We will also be debugging the blog for errors that
    turn up in old Internet Explorer.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更多关注使用CSS3标记博客，并添加一些JavaScript。我们还将调试博客，以解决在旧版Internet Explorer中出现的错误。
