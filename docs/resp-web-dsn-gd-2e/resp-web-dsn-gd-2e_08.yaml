- en: Chapter 8. Extending Foundation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。扩展Foundation
- en: '*After constructing the website page markup in the previous chapter, we now
    start giving the website a look, feel, and colors. This time we will use **Sassy
    CSS** (**SCSS**), which also happens to be the underlying syntax of the Foundation
    default styles.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一章中构建了网站页面标记之后，我们现在开始为网站添加外观，感觉和颜色。这次我们将使用**Sassy CSS**（**SCSS**），这也恰好是Foundation默认样式的基础语法。*'
- en: '*SCSS is a syntax variation of a CSS preprocessor named Sass. The Sass original
    syntax uses indentation formatting that makes the codes look neat. SCSS, on the
    other hand, uses curly braces and semicolons just like regular CSS. The similarity
    helps everyone to quickly grasp the syntax, in particular those who are new to
    Sass.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*SCSS是Sass命名的CSS预处理器的语法变体。Sass原始语法使用缩进格式化，使代码看起来整洁。另一方面，SCSS使用大括号和分号，就像常规CSS一样。这种相似性有助于每个人快速掌握语法，特别是那些对Sass不熟悉的人。*'
- en: '*Since we are going to employ SCSS, we will start off this chapter by walking
    you through a couple of Sass features and its utilities. You will learn to define
    variables and functions, perform operations, and comply with other directives,
    which allows us to compose the website style rules more efficiently.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于我们将使用SCSS，因此我们将从介绍一些Sass功能和其实用程序开始本章。您将学会定义变量和函数，执行操作，并遵守其他指令，这使我们能够更有效地组合网站样式规则。*'
- en: '*This might sound challenging. And if you like a challenge, we can just get
    started right away.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*这可能听起来有挑战性。如果您喜欢挑战，我们可以立即开始。*'
- en: 'This chapter will revolve around the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将围绕以下主题展开：
- en: Exploring Sass features and learning the syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Sass功能并学习语法
- en: Looking into Bourbon, a Sass mixins library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究Bourbon，一个Sass混合库
- en: Organizing the style sheet structure and using the Import directive to include
    partial style sheets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织样式表结构并使用导入指令包含部分样式表
- en: Setting up Koala to compile SCSS into CSS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Koala将SCSS编译为CSS
- en: Customizing Foundation's default styles through variables
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过变量自定义Foundation的默认样式
- en: Composing the website custom styles
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建网站自定义样式
- en: Optimizing the website layout for various viewport sizes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化各种视口大小的网站布局
- en: Turning the website live by compiling the JavaScripts
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过编译JavaScript使网站上线
- en: Syntactically Awesome Style Sheets
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Syntactically Awesome Style Sheets
- en: Sass ([http://sass-lang.com/](http://sass-lang.com/)) is a CSS preprocessor
    created by Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein, which is the
    same team that also created Haml ([http://haml.info/](http://haml.info/)). Foundation,
    as mentioned at the beginning of this chapter, uses Sass to generate its CSS,
    and so will we. So, before we get our hands dirty, first we will delve into several
    Sass features, such as nesting, variables, mixins, functions, and others, that
    will allow us to write style rules more efficiently.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Sass（[http://sass-lang.com/](http://sass-lang.com/)）是由Hampton Catlin，Natalie
    Weizenbaum和Chris Eppstein创建的CSS预处理器，这也是创建Haml（[http://haml.info/](http://haml.info/)）的同一个团队。正如本章开头提到的那样，Foundation使用Sass来生成其CSS，我们也会这样做。因此，在我们动手之前，我们将首先深入了解几个Sass功能，例如嵌套，变量，混合，函数等，这将使我们能够更有效地编写样式规则。
- en: Nesting rules
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套规则
- en: 'Sass allows us to nest style rules into one another. This feature eventually
    allows us to write style rules that resemble the HTML structure of the web page.
    That way, the style rules can be more concise and more easy to scan through. Say,
    we added the header markup of our website, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Sass允许我们将样式规则嵌套到彼此中。这个功能最终使我们能够编写类似于网页HTML结构的样式规则。这样，样式规则可以更简洁，更容易浏览。比如，我们添加了网站的标题标记，如下所示：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With Sass, we can construct the style rules, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sass，我们可以构建样式规则，如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It''s worth noticing that even though Sass allows you to nest style rules,
    you should not abuse this facility. So, don''t do something like the following
    code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，尽管Sass允许您嵌套样式规则，但您不应滥用这个功能。因此，不要像下面的代码那样做：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Consider it before nesting style rules. The main objective of this feature is
    to make the style rules look simpler, more concise, easier to scan through, and
    not to make it unnecessarily look more complex.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌套样式规则之前考虑一下。这个功能的主要目标是使样式规则看起来更简单，更简洁，更容易浏览，而不是使它看起来不必要地更复杂。
- en: Storing a value with a variable
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量存储值
- en: A variable is one useful piece in programming language that allows us to define
    a value once within a specified name. Each language has a slightly different way
    to declare a variable. For example, JavaScript uses the keyword `var`, LESS uses
    `@`, and Sass in this case uses the `$` sign.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是编程语言中一个有用的部分，它允许我们在指定的名称中定义一个值。每种语言都有稍微不同的变量声明方式。例如，JavaScript使用关键字`var`，LESS使用`@`，而在这种情况下Sass使用`$`符号。
- en: 'One of the perfectly-suited implementations of a variable is to define the
    website colors, for example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的一个完美适用实现是定义网站颜色，例如：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, instead of declaring the color value every time we need it, we can simply
    declare the representative variables. In the following example, we declare `$primary`
    as the body text color and `$secondary` as the background color:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以简单地声明代表性变量，而不是每次需要时都声明颜色值。在下面的例子中，我们将`$primary`声明为正文颜色，`$secondary`声明为背景颜色：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When compiled to regular CSS, these variables are replaced with the defined
    value, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译为常规CSS时，这些变量将被替换为定义的值，如下所示：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using a variable with a proper name (of course), you will find it easier to
    write the variable rather than remembering the Hex or the RGB number; well, it
    is practically easier to write `$primary` than `#bdc3c7`, isn't it?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适当名称的变量（当然），您会发现编写变量比记住十六进制或RGB数字更容易；嗯，写`$primary`比`#bdc3c7`实际上更容易，不是吗？
- en: 'The Sass variable isn''t exclusively aimed to define colors. We can also use
    a variable to define a string or plain text, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Sass变量不仅用于定义颜色。我们还可以使用变量来定义字符串或纯文本，如下所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can use a variable to store a number or a length:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用变量来存储数字或长度：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can use a variable to inherit the value of another variable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个变量来继承另一个变量的值：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can use a variable to define the output of a function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个变量来定义函数的输出：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Foundation centralized the declaration of its primary variables within a file
    named `_settings.scss`. We will look more into this matter later when we compose
    the website style rules.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation在名为`_settings.scss`的文件中集中了其主要变量的声明。当我们编写网站样式规则时，我们将在稍后更深入地了解这个问题。
- en: Variable interpolation
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量插值
- en: 'There are certain circumstances when a variable is not applicable, such as
    when it is inserted within a string (plain text), as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下变量是不适用的，比如当它被插入到字符串（纯文本）中时，如下：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When compiled, the `$var` declaration within `$newVar` won''t be replaced with
    the value of `"Hello"`. This is because Sass interprets `$var` as a string or
    plain text. Thus, the output of the following example will simply be:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译时，`$newVar`中的`$var`声明不会被替换为`"Hello"`的值。这是因为Sass将`$var`解释为字符串或纯文本。因此，以下示例的输出将简单地是：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Another example where a variable won''t work is when a declaration is begun
    with an `@` rule or a directive, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个变例子是当一个声明以`@`规则或指令开头时，变量不起作用，如下：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This example simply returns an error to the Sass compiler because `@media` is
    supposed to be followed by either the `print` or `screen` keyword.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子简单地返回了一个错误给Sass编译器，因为`@media`应该后面跟着`print`或`screen`关键字。
- en: There are a few cases where we have to use interpolation to declare a variable.
    Variable interpolation happens to other programming languages, such as PHP, Ruby,
    and Swift. But I'm not going into the details of the technicalities of its workings,
    as I don't exactly know either. Simply put, interpolation allows us to embed a
    variable in a situation where it does not allow the variable to work—especially
    where it is a string that is actually expected.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下我们必须使用插值来声明一个变量。变量插值也发生在其他编程语言中，比如PHP、Ruby和Swift。但我不会深入讨论其工作原理的技术细节，因为我也不太清楚。简而言之，插值允许我们在不允许变量工作的情况下嵌入变量，特别是在期望的是一个字符串的情况下。
- en: 'Each programming language has its notation to enable interpolation. In this
    case, Sass uses `#{}`. Given one of the previous examples, we can write the variable
    as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有其符号来启用插值。在这种情况下，Sass使用`#{}`。给定前面的一个例子，我们可以这样写变量：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And the result will be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Follow Hugo Giraudel posts ([https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375](https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375))
    for further assistance about variable interpolation in Sass.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关注Hugo Giraudel的帖子（[https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375](https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375)）以获取有关Sass中变量插值的进一步帮助。
- en: Reusable code block with mixins
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mixin重用代码块
- en: 'Now, we are going to look into Sass mixins. If you followed and accomplished
    the second project, you should know about LESS mixins. Mixins, both in Sass and
    LESS, have similar purposes; they allow developers to reuse code blocks and style
    rules within the entire style sheet and thus comply with the DRY principle ([http://programmer.97things.oreilly.com/wiki/index.php/Don''t_Repeat_Yourself](http://programmer.97things.oreilly.com/wiki/index.php/Don''t_Repeat_Yourself)).
    However, it is slightly different in terms of how we declare and reuse the mixins.
    This is how we declare a mixin in LESS:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将深入了解Sass mixin。如果你跟着并完成了第二个项目，你应该知道LESS mixin。Sass和LESS中的mixin都有类似的目的；它们允许开发者在整个样式表中重用代码块和样式规则，从而遵守DRY原则（[http://programmer.97things.oreilly.com/wiki/index.php/Don't_Repeat_Yourself](http://programmer.97things.oreilly.com/wiki/index.php/Don't_Repeat_Yourself)）。然而，在声明和重用mixin方面略有不同。这是我们在LESS中声明mixin的方式：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In Sass, we use the `@mixins` directive to create a mixin, for example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sass中，我们使用`@mixins`指令来创建一个mixin，例如：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Sass uses the `@include` directive to reuse the preceding code block within
    style rules. Given the preceding example, we can write:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Sass使用`@include`指令在样式规则中重用前面的代码块。给定前面的例子，我们可以这样写：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following is the output when the preceding example is compiled to CSS:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当前面的例子编译成CSS时，输出如下：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That is a basic example of the application of Sass mixins.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Sass mixin应用的一个基本例子。
- en: A brief on the Sass mixin library
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sass mixin库简介
- en: Some CSS3 syntaxes are so complex that writing them can be really tedious work.
    And this is where mixins can be particularly useful. Fortunately, with Sass being
    so popular and supported by so many generous developers, we don't have to port
    all CSS3 syntax into Sass mixins on our own. Instead, we can simply employ Sass's
    mixin library that makes our work as a web developer more enjoyable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有些CSS3的语法非常复杂，写起来可能非常繁琐。这就是mixin特别有用的地方。幸运的是，由于Sass如此受欢迎，并得到了许多慷慨的开发者的支持，我们不必自己将所有CSS3语法转换成Sass
    mixin。相反，我们可以简单地使用Sass的mixin库，使我们作为web开发者的工作更加愉快。
- en: The Sass library comes with a collection of useful mixins and functions (we
    will talk about functions shortly) that we can use right away out-of-the-box.
    There are dozens of popular libraries available, and one that we are going to
    use herein is called Bourbon ([http://bourbon.io/](http://bourbon.io/)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Sass库附带了一系列有用的mixin和函数（我们将很快讨论函数），我们可以立即使用。有数十个流行的库可用，我们将在这里使用的一个叫做Bourbon（[http://bourbon.io/](http://bourbon.io/)）。
- en: Bourbon compiles a number of mixins in a library that simplifies the way we
    declare CSS3 syntax, including syntax that is still marked as experimental, such
    as `image-rendering`, `filter`, and the CSS3 `calc` function. Now, which do you
    think is easier and faster to write when it comes to specifying the Hi-DPI Media
    Query?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Bourbon在一个库中编译了许多mixin，简化了我们声明CSS3语法的方式，包括仍然标记为实验性的语法，比如`image-rendering`，`filter`和CSS3的`calc`函数。现在，你认为在指定Hi-DPI媒体查询时哪个更容易、更快速？
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Hi-DPI Media Query is used to measure the device pixel density, for which we
    can use it to deliver higher-resolution graphics on web pages, specifically on
    devices with hi-definition screens. The following are some references for further
    information on the subject.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Hi-DPI媒体查询用于测量设备像素密度，我们可以用它在网页上提供更高分辨率的图形，特别是在具有高清屏幕的设备上。以下是一些有关该主题的进一步信息的参考资料。
- en: High DPI Images for Variable Pixel Densities by Boris Smus ([http://www.html5rocks.com/en/mobile/high-dpi/](http://www.html5rocks.com/en/mobile/high-dpi/)).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Boris Smus的可变像素密度高DPI图像（[http://www.html5rocks.com/en/mobile/high-dpi/](http://www.html5rocks.com/en/mobile/high-dpi/)）。
- en: Towards A Retina Web by Reda Lemeden ([http://www.smashingmagazine.com/2012/08/20/towards-retina-web/](http://www.smashingmagazine.com/2012/08/20/towards-retina-web/)).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reda Lemeden的《走向视网膜网页》（[http://www.smashingmagazine.com/2012/08/20/towards-retina-web/](http://www.smashingmagazine.com/2012/08/20/towards-retina-web/)）。
- en: Is the following standard syntax?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是标准语法吗？
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or, will it be the following one with the Bourbon mixin?:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，将使用Bourbon mixin的以下内容？
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Without spending years researching, we can commonly agree that using the mixin
    should be a lot easier to write, as well as easier to remember.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 不经过多年的研究，我们通常会同意使用mixin应该更容易编写，也更容易记住。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned, in addition to CSS3 mixins, Bourbon also ships with a couple of
    Sass functions, such as Triangle, which allows us to create CSS-based triangles.
    However, I'm not going to mention all the bits that are there in the Bourbon library.
    Since the library collection will most likely be updated or revised along with
    the introduction of new CSS specifications, it is better to refer to the list
    on the official documentation page ([http://bourbon.io/docs/](http://bourbon.io/docs/)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，除了CSS3 mixin之外，Bourbon还附带了一些Sass函数，例如Triangle，它允许我们创建基于CSS的三角形。但我不打算提及Bourbon库中的所有细节。由于库集合很可能会随着新的CSS规范的引入而更新或修订，最好是参考官方文档页面上的列表（[http://bourbon.io/docs/](http://bourbon.io/docs/)）。
- en: Creating and using a Sass function
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和使用Sass函数
- en: 'A function is one piece of a feature that makes creating style rules more dynamic.
    A function in Sass is declared using the `@function` directive, which is then
    followed by the function name, a parameter with preferably its default value.
    In its simplest form, a Sass function may look as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是使创建样式规则更加动态的功能的一部分。在Sass中，使用`@function`指令声明函数，然后跟着函数名，最好是带有默认值的参数。在其最简单的形式中，Sass函数可能如下所示：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This function, however, won''t output anything yet. To generate a result of
    this function, we need to add a `@return` value. Given the preceding example,
    we want to output the default value parameter, which says `"hello"`. To do so,
    we write the `@return` value, which is then followed by `$parameter`, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个函数还不会输出任何东西。要生成这个函数的结果，我们需要添加一个`@return`值。根据前面的例子，我们想要输出默认值参数，即`"hello"`。为此，我们写下`@return`值，然后跟着`$parameter`，如下所示：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use this function within a selector, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择器中使用此函数，如下所示：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Compile it, and you get the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 编译它，你会得到以下输出：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Customize the output by specifying a new value out of the default one, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定默认值之外的新值来自定义输出，如下所示：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will get a new output, as shown in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到一个新的输出，如下所示的代码：
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example merely shows the basic functionality of a function. There are a
    lot more examples on how we can utilize it in real cases to build reusable code
    series. So, I recommend you head over to the following references for further
    advanced discussion and find more examples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子仅仅展示了函数的基本功能。有很多更多的例子可以告诉我们如何在实际情况中利用它来构建可重用的代码系列。因此，我建议您前往以下参考资料，进行更进一步的讨论并找到更多的例子。
- en: Using pure Sass functions to make reusable logic more useful ([http://thesassway.com/advanced/pure-sass-functions](http://thesassway.com/advanced/pure-sass-functions)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用纯Sass函数使可重用逻辑更有用（[http://thesassway.com/advanced/pure-sass-functions](http://thesassway.com/advanced/pure-sass-functions)）。
- en: A couple of Sass functions ([http://hugogiraudel.com/2013/08/12/sass-functions/](http://hugogiraudel.com/2013/08/12/sass-functions/)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Sass函数（[http://hugogiraudel.com/2013/08/12/sass-functions/](http://hugogiraudel.com/2013/08/12/sass-functions/)）。
- en: Manipulating color with Sass functions
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sass函数操纵颜色
- en: 'One thing that I love about using CSS preprocessors such as Sass, is how easy
    it is to determine and alter colors. Sass, in this case, provides a bunch of built-in
    functions to manipulate colors seamlessly. The following is a list of a few Sass
    color functions for your reference, which may be useful to manipulate colors in
    the website later on:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢使用CSS预处理器（如Sass）的一件事情是，它有多容易确定和改变颜色。在这种情况下，Sass提供了一堆内置函数来无缝地操作颜色。以下是一些Sass颜色函数的列表，供您参考，以便以后在网站中操作颜色时可能会有用：
- en: '| Functions | Description | Example |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `lighten($color, $amount)` | Turns a color lighter by the specified amount.
    | `$black: #000000``lighten($black, 10%);`In this example, we lighten `$black`
    by 10 percent. The output is `#1a1a1a`. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `lighten($color, $amount)` | 通过指定的量使颜色变亮。 | `$black: #000000``lighten($black,
    10%);`在这个例子中，我们将`$black`变亮了10%。输出是`#1a1a1a`。'
- en: '| `darken($color, $amount)` | Turns a color darker than the specified amount.
    | `$white: #ffffff;``darken($white, 10%)`In this example, we darken `$white` by
    10 percent. The output will be `#e6e6e6`. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `darken($color, $amount)` | 使颜色比指定的量更暗。 | `$white: #ffffff;``darken($white,
    10%)`在这个例子中，我们将`$white`变暗了10%。输出将是`#e6e6e6`。'
- en: '| `fade-out($color, $amount)` | Turns the color to be more transparent than
    the specified amount. | `$black: #000000;``fade-out($black, .5);`In this example,
    we change the `$black` color to be compiled into RGB format and set the transparency
    to 50 percent. The output is `rgba(0, 0, 0, 0.5)`. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `fade-out($color, $amount)` | 使颜色比指定的量更透明。 | `$black: #000000;``fade-out($black,
    .5);`在这个例子中，我们将`$black`颜色编译成RGB格式，并将透明度设置为50%。输出是`rgba(0, 0, 0, 0.5)`。'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please follow the Sass official documentation ([http://sass-lang.com/documentation/Sass/Script/Functions.html](http://sass-lang.com/documentation/Sass/Script/Functions.html))
    to find out the full list of the color functions available.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看Sass官方文档，了解可用的颜色函数的完整列表。
- en: Useful Foundation's own function
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Foundation自己的有用函数
- en: The Foundation framework comes with an array of its own functions. Foundation
    uses these functions to build its own default styles, and we can also use them
    to build our own. One such useful function therein is `rem-calc()`, which allows
    us to calculate the `rem` unit with less hassle.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation框架自带了一系列自己的函数。Foundation使用这些函数来构建自己的默认样式，我们也可以使用它们来构建我们自己的样式。其中一个有用的函数是`rem-calc()`，它可以让我们更轻松地计算`rem`单位。
- en: Em and Rem
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Em和Rem
- en: 'The `rem` unit is a relative value that inherited concepts similar to `em`.
    Here is what Ian Yates expounded about the origin of `em` in his post ([https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321](https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321)):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`rem`单位是一个相对值，它继承了与`em`类似的概念。Ian Yates在他的文章中详细阐述了`em`的起源。'
- en: '*"Ems get their name from printing. Precisely when the term was first used
    is unclear, but as the uppercase M (pronounced emm) most closely represents the
    square printing block on which printing letters were placed, it came to lend its
    name to the measurement. Whatever the point size of the font in question, the
    block of the uppercase M would define the Em."*'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Ems get their name from printing. Precisely when the term was first used is
    unclear, but as the uppercase M (pronounced emm) most closely represents the square
    printing block on which printing letters were placed, it came to lend its name
    to the measurement. Whatever the point size of the font in question, the block
    of the uppercase M would define the Em.”
- en: 'But the problem with the `em` unit, as Jonathan Snook described in his post
    ([http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)),
    is its compounding nature. Since the size is relative to its closest parent, in
    my experience the size output can be unpredictably frustrating at best; the size
    will be varying depending on where it is specified. Examine the following example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正如Jonathan Snook在他的文章中所描述的，`em`单位的问题在于它的复合性质。由于大小是相对于最近的父元素的，根据我的经验，输出的大小可能是不可预测的，最好的情况下会变化，具体取决于它被指定的位置。请看以下例子：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is where the `rem` unit comes in. The `rem` unit measures the calculation
    directly against the font size of `<html>`, the root element of an HTML document—thus,
    it is also dubbed as root `em`. Regardless of where the unit is specified, the
    result will be precise, consistent, and more importantly, easy to figure out (it's
    like the `px` unit, but it's relative).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`rem`单位的用武之地。`rem`单位直接根据HTML文档的根元素`<html>`的字体大小进行计算，因此也被称为根`em`。无论单位在何处指定，结果都将是精确、一致的，更重要的是，易于计算（就像`px`单位一样，但是它是相对的）。
- en: 'The `rem-calc` function accepts both integer and length. Hence, the following
    code examples work:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`rem-calc`函数接受整数和长度。因此，以下代码示例有效：'
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In this case, they will turn out to be as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它们将变成如下形式：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Have a go hero – diving into Sass
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下——深入了解Sass
- en: 'There is a lot more about Sass than we are able to cover in this book, such
    as placeholder, conditional statement, and operators, just to name a few. Thankfully,
    there are enough good references and books that have covered Sass, as well as
    its supporting utilities in greater depth, into which you can dig into on your
    own. The following are some of my best recommendations:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Sass的内容远不止我们在这本书中所能涵盖的，比如占位符、条件语句和运算符等等。幸运的是，有足够多的好参考资料和书籍深入讨论了Sass及其支持工具，你可以自行深入研究。以下是我最好的推荐：
- en: '*Sass and Compass for Designers*, *Ben Frain*, *Packt Publishing* ([https://www.packtpub.com/web-development/sass-and-compass-designers](https://www.packtpub.com/web-development/sass-and-compass-designers))'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Sass和Compass for Designers》，Ben Frain，Packt Publishing
- en: '*Sass for Web Designers*, *Dan Cederholm*, *A Book Apart* ([http://www.abookapart.com/products/sass-for-web-designers](http://www.abookapart.com/products/sass-for-web-designers))'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《Sass for Web Designers》，Dan Cederholm，A Book Apart
- en: The Sass Way—tutorials and tips on using Sass ([http://thesassway.com/](http://thesassway.com/))
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The Sass Way——关于使用Sass的教程和技巧
- en: A dedicated category on web design tutorials and for covering anything related
    to Sass ([https://webdesign.tutsplus.com/categories/sass](https://webdesign.tutsplus.com/categories/sass))
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个专门的网页设计教程类别，涵盖与Sass相关的任何内容
- en: Before we resume the work, let's end this section with a couple of quizzes,
    shall we?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们恢复工作之前，让我们用几个测验结束这一节，好吗？
- en: Pop quiz – multiple parameters in Sass function
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pop quiz – Sass函数中的多个参数
- en: In the preceding section, we discussed about Sass function, as well as showed
    you the simplest example out of it. In the example, we created a function with
    only one parameter. The fact is that we can add multiple parameters within a single
    Sass function.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们讨论了Sass函数，并向您展示了其中最简单的例子。在这个例子中，我们创建了一个只有一个参数的函数。事实上，我们可以在一个Sass函数中添加多个参数。
- en: Q1\. So, which among the following examples is the correct way to create a function
    with multiple parameters?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 那么，以下哪个例子是创建具有多个参数的函数的正确方式？
- en: Each parameter is separated with a semicolon.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个参数用分号分隔。
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Each parameter is separated with an addition operator.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个参数用加法运算符分隔。
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Each parameter is separated with a comma.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个参数用逗号分隔。
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Pop quiz – Sass color manipulation
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pop quiz – Sass颜色操作
- en: Q1\. There are lots of Sass functions built-in. In this section, we named three,
    `lighten()`, `darken()`, and `fade-out()`, which I think are sufficient to help
    us to decorate the website of this project. The `fade-out()` function has an alias
    that also gives us the same result. So, which of the following is the name alias
    for the fade-out() function?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. Sass内置了许多函数。在本节中，我们命名了三个，`lighten()`、`darken()`和`fade-out()`，我认为这足以帮助我们装饰这个项目的网站。`fade-out()`函数有一个别名，也可以给我们相同的结果。那么，以下哪个是`fade-out()`函数的别名？
- en: '`transparentize($color, $amount)`'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transparentize($color, $amount)`'
- en: '`transparency($color, $amount)`'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transparency($color, $amount)`'
- en: '`transparent($color, $amount)`'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`transparent($color, $amount)`'
- en: Project recap
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目总结
- en: 'In [Chapter 7](part0068.xhtml#aid-20R681 "Chapter 7. A Responsive Website for
    Business with Foundation"), *A Responsive Website for Business with Foundation*,
    we installed Foundation and Foundation Icons, along with their dependencies (jQuery,
    Fastclick, Modernizr, and so on) through Bower ([http://bower.io/](http://bower.io/)).
    We also prepared the website assets, namely, the images, image icons, and the
    website logo. In the last section of the chapter, we created `index.html` for
    the website home page, and we also constructed the markup using a couple of new
    HTML5 tags. So, the files and folders that are currently in the working directory
    are shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0068.xhtml#aid-20R681 "第7章。使用Foundation创建企业响应式网站")中，*使用Foundation创建企业响应式网站*，我们通过Bower（[http://bower.io/](http://bower.io/)）安装了Foundation和Foundation
    Icons，以及它们的依赖项（jQuery、Fastclick、Modernizr等）。我们还准备了网站资产，即图片、图标和网站标志。在本章的最后一节中，我们为网站首页创建了`index.html`，并使用了一些新的HTML5标签构建了标记。因此，当前工作目录中显示的文件和文件夹如下截图所示：
- en: '![Project recap](img/image00363.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![项目总结](img/image00363.jpeg)'
- en: Style sheet organizations
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式表组织
- en: Files that are still missing from our working directories are the style sheets
    to compose our customized styles for the website, and the Bourbon library that
    we briefly mentioned in the preceding section to provide us with some ready-to-use
    mixins and functions. This is what we are going to do in this section. We are
    going to create style sheets and organize them in a way to make them easily maintainable
    in the future.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作目录中仍然缺少的文件是样式表，用于为网站组合我们定制的样式，以及在前一节中简要提到的Bourbon库，它为我们提供了一些现成的混合和函数。这就是我们将在本节中要做的事情。我们将创建样式表并以一种易于将来维护的方式组织它们。
- en: Well, let's resume the work.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们恢复工作。
- en: Time for action – organizing and compiling style sheets
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-组织和编译样式表
- en: Perform the following steps right to the end to properly organize the style
    sheets and compile them into CSS.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤正确组织样式表并将其编译为CSS。
- en: 'We need to install Bourbon. Launch a terminal or the command prompt, and type
    the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装Bourbon。打开终端或命令提示符，输入以下命令：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This command installs the Bourbon package through the Bower registry and registers
    it within the `bower.json` file of the project.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令通过Bower注册表安装Bourbon包，并将其注册到项目的`bower.json`文件中。
- en: Tip
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I've discussed the `bower.json` file exclusively in this post ([https://webdesign.tutsplus.com/tutorials/quick-tip-what-to-do-when-you-encounter-a-bower-file--cms-21162](https://webdesign.tutsplus.com/tutorials/quick-tip-what-to-do-when-you-encounter-a-bower-file--cms-21162)),
    check it out!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这篇文章中专门讨论了`bower.json`文件（[https://webdesign.tutsplus.com/tutorials/quick-tip-what-to-do-when-you-encounter-a-bower-file--cms-21162](https://webdesign.tutsplus.com/tutorials/quick-tip-what-to-do-when-you-encounter-a-bower-file--cms-21162)），去看看吧！
- en: Create new style sheets named `main.scss`, `responsive.scss`, and `styles.scss`
    in the `scss` folder.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scss`文件夹中创建名为`main.scss`、`responsive.scss`和`styles.scss`的新样式表。
- en: The `_main.scss` style sheet is the one where we will put all our own style
    rules. We will use the `_responsive.scss` file to exclusively put in the media
    queries of the website. And the `styles.scss` file is where we will compile those
    style sheets together.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`_main.scss`样式表是我们将放置所有自己的样式规则的地方。我们将使用`_responsive.scss`文件专门放置网站的媒体查询。`styles.scss`文件是我们将这些样式表编译在一起的地方。'
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The underscore `_` that began the file name is a special notation that tells
    the Sass compiler not to directly compile the file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名以`_`开头的下划线是一种特殊的标记，告诉Sass编译器不要直接编译该文件。
- en: Still within the `scss` folder, create two more style sheets. This time, name
    them `_config.scss` and `foundation.scss`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scss`文件夹中，再创建两个样式表。这次，将它们命名为`_config.scss`和`foundation.scss`。
- en: The `_config.scss` will contain a copy of all the variables used in Foundation,
    while `foundation.scss` will contain imported partials of Foundation style sheets.
    These copies will prevent us from directly modifying the original files, which
    will eventually be overridden when we update to the newest version.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`_config.scss`将包含Foundation中使用的所有变量的副本，而`foundation.scss`将包含Foundation样式表的导入部分。这些副本将防止我们直接修改原始文件，在更新到最新版本时最终会被覆盖。'
- en: Next, copy the whole content of the Foundation `_settings.scss` file to the
    `_config.scss` file that we recently created. In our case, the `_settings.scss`
    file is located in the `/components/foundation/scss/foundation/` directory.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将Foundation的`_settings.scss`文件的整个内容复制到我们最近创建的`_config.scss`文件中。在我们的情况下，`_settings.scss`文件位于`/components/foundation/scss/foundation/`目录中。
- en: Also, copy the whole content of Foundation's own `foundation.scss` and paste
    it to our own `foundation.scss` that we also recently created.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，将Foundation自己的`foundation.scss`的整个内容复制并粘贴到我们最近创建的`foundation.scss`中。
- en: 'Then, we need to correct the path of the imported partials in our `foundation.scss`
    file. At this stage, all paths are pointing to the `foundation` folder, as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要纠正`foundation.scss`文件中导入部分的路径。在这个阶段，所有路径都指向`foundation`文件夹，如下所示：
- en: '[PRE34]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This certainly is incorrect because we don''t have a folder named `foundation`
    in the `scss` folder. Herein, we need to direct the path to the `components` folder
    instead, where the partials actually reside. So, change the path to be as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '这显然是不正确的，因为在`scss`文件夹中我们没有一个名为`foundation`的文件夹。在这里，我们需要将路径指向`components`文件夹，那里实际上包含了这些部分。因此，将路径更改为如下所示:'
- en: '[PRE35]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Tip
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A comprehensive snippet of Foundation partial references can be found in the
    Gist ([http://git.io/ldITag](http://git.io/ldITag)).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 基金会部分参考的全面片段可以在Gist ([http://git.io/ldITag](http://git.io/ldITag))中找到。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Sass, we don't have to specify the `.scss` or `.sass` extension when it comes
    to importing external files. The Sass compiler is clever enough to determine the
    extension on its own. And this is also because a plain CSS is also a valid Sass.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sass中，当导入外部文件时，我们不必指定`.scss`或`.sass`扩展名。Sass编译器足够聪明，可以自行确定扩展名。这也是因为纯CSS也是有效的Sass。
- en: Another path that we have to correct is the path referring to the Foundation,
    `_functions.scss`, which contains the `rem-calc()` function. Open the `_config.scss`
    file, and change the line `@import "foundation/functions";` to `@import "../../components/foundation/scss/foundation/functions";`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须更正的另一个路径是指向Foundation的路径，其中包含`rem-calc()`函数的`_functions.scss`。打开`_config.scss`文件，并将`@import
    "foundation/functions";`改为`@import "../../components/foundation/scss/foundation/functions";`。
- en: We are going to compile these style sheets into CSS using Koala. Launch Koala
    and add the working directory:![Time for action – organizing and compiling style
    sheets](img/image00364.jpeg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用Koala将这些样式表编译成CSS。启动Koala并添加工作目录:![进行操作-组织和编译样式表](img/image00364.jpeg)
- en: Within the style list in Koala, you won't find the SCSS style sheets with the
    underscore prefix. Koala, by default, ignores this file since it eventually won't
    be compiled into CSS.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Koala的样式列表中，你不会找到带有下划线前缀的SCSS样式表。默认情况下，Koala会忽略这个文件，因为它最终不会被编译成CSS。
- en: However, you should find the two primary style sheets of the project listed
    therein, namely, `styles.scss` and `foundation.scss`. Be sure that this output
    is set to the `css` folder, as shown in the following screenshot:![Time for action
    – organizing and compiling style sheets](img/image00365.jpeg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，你应该在其中找到项目的两个主要样式表，即`styles.scss`和`foundation.scss`。确保此输出设置为`css`文件夹，如下面的屏幕截图所示:![进行操作-组织和编译样式表](img/image00365.jpeg)
- en: Then, make sure that the option of `Auto Compile` is checked so that they will
    be automatically compiled into CSS, as we've made changes. Also, check the `Source
    Map` option to make debugging the style sheet easier. Have a look at the following
    screenshot:![Time for action – organizing and compiling style sheets](img/image00366.jpeg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，确保选中`自动编译`选项，这样它们将在我们进行更改时自动编译成CSS。还要检查`源映射`选项，以便更轻松地调试样式表。请查看下面的屏幕截图:![进行操作-组织和编译样式表](img/image00366.jpeg)
- en: Click the **Compile** button of `styles.scss` and `foundation.scss` to compile
    them into CSS.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`styles.scss`和`foundation.scss`的**编译**按钮将它们编译成CSS。
- en: 'Open `index.html` and link both the compiled CSSs within the `<head>` tag,
    as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`，并在`<head>`标签内链接编译后的CSS，如下所示：
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*What just happened?*'
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么?*'
- en: 'We just installed Bourbon and put together several new style sheets to style
    the website. Then, we compiled them into CSS, and then linked them to `index.html`.
    Hence, as you can see in the following screenshot, the website is now starting
    to take place—with the Foundation default styles:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '我们刚刚安装了Bourbon，并组合了几个新的样式表来为网站设计样式。然后，我们将它们编译成CSS，并将它们链接到`index.html`。因此，正如你在下面的屏幕截图中所看到的，网站现在开始发挥作用-使用Foundation默认样式:'
- en: '![What just happened?](img/image00367.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么?](img/image00367.jpeg)'
- en: The website's look and feel
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站的外观和感觉
- en: With the style sheets organized and compiled, now comes the time to customize
    the website's styles. As it happens, we don't have to write every bit of the style
    rules on our own. In this case, since we are using a framework (Foundation), sometimes
    customizing the website styles can be as easy as changing the default value in
    a variable.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表组织和编译完成后，现在是定制网站样式的时候了。恰好的是，我们不必自己编写每一条样式规则。在这种情况下，由于我们使用了一个框架（Foundation），有时定制网站样式可以像更改变量中的默认值一样简单。
- en: Without further ado, let's move on.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们继续。
- en: Time for action – build on the website
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行操作-在网站上构建
- en: 'Styling the website will involve multiple style sheets. Hence, follow the following
    steps carefully:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的样式将涉及多个样式表。因此，请仔细遵循以下步骤：
- en: 'Import the following style sheets in `foundation.scss`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foundation.scss`中导入以下样式表：
- en: '[PRE37]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: That way, the variables, as well as the changes within `_config.scss`, will
    affect other component style sheets through Foundation. The `normalize` variable
    will standardize basic element styles, `social_foundicons.scss`; as you can guess,
    this allows us to apply Foundation's social icons.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，变量以及`_config.scss`中的更改将通过Foundation影响其他组件样式表。`normalize`变量将标准化基本元素样式，`social_foundicons.scss`；你可以猜到，这使我们能够应用Foundation的社交图标。
- en: 'Open `styles.scss` and import Bourbon, `_config.scss`, `main.scss`, and `responsive.scss`,
    as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`styles.scss`，并按照以下方式导入Bourbon、`_config.scss`、`main.scss`和`responsive.scss`：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Then, I want to apply a custom font from Google Font simply because the custom
    fonts look better than the average font system, such as Arial or Times. Herein,
    I picked a font named Varela Round ([https://www.google.com/fonts/specimen/Varela+Round](https://www.google.com/fonts/specimen/Varela+Round)).
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我想简单地应用来自Google Font的自定义字体，因为自定义字体看起来比普通字体系统（如Arial或Times）更好。在这里，我选择了一个名为Varela
    Round的字体([https://www.google.com/fonts/specimen/Varela+Round](https://www.google.com/fonts/specimen/Varela+Round))。
- en: 'Open `index.html`, and add the font style sheet within the `<head>` tag, as
    follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.html`，并在`<head>`标签内添加字体样式表，如下所示：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now, we will change the `font-family` stack, which is currently specified as
    the Foundation default font, to use Varela Round.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将把当前指定为Foundation默认字体的`font-family`堆栈更改为使用Varela Round。
- en: 'To do so, open `_config.scss`, uncomment the variable named `$body-font-family`,
    and insert `"Varela Round"`, as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要这样做，打开`_config.scss`，取消注释名为`$body-font-family`的变量，并插入`"Varela Round"`，如下所示：
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Sass commenting**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sass注释**'
- en: Typically, commenting will cause the code compiler or the engine to ignore the
    code—like a browser. However, it is also often used as an inline document, explaining
    what the code does.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，注释会导致代码编译器或引擎忽略代码，就像浏览器一样。然而，它也经常被用作内联文档，解释代码的作用。
- en: 'Every programming language has its own way to comment on code. In CSS, it will
    be this way:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有自己的注释代码的方式。在CSS中，它将是这样的：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In Sass, we can either use the CSS way, as shown previously, or add `//`, as
    follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sass中，我们可以使用CSS的方式，如前面所示，或者添加`//`，如下所示：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: When `//` is added at the beginning of the line, the compiler will completely
    ignore the line, and thus won't compile it.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当在行的开头添加`//`时，编译器将完全忽略该行，因此不会编译它。
- en: 'We will style each of the website sections. To begin with, we will focus on
    the website header, and then, subsequently down to the footer. Let''s start off
    by adding an image background. Open `_main.scss` and then add the following lines:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为网站的每个部分设置样式。首先，我们将专注于网站的页眉，然后逐渐向页脚延伸。让我们首先添加一个图像背景。打开`_main.scss`，然后添加以下行：
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**CSS3 Background Size**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS3背景大小**'
- en: 'Background size is a special CSS3 property that controls the background stretch.
    The value of the cover that we used in the preceding snippets will proportionally
    stretch the background image to entirely cover the container. Head to the following
    references for further assistance on the CSS3 Background Size:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 背景大小是一个特殊的CSS3属性，用于控制背景的拉伸。我们在前面的片段中使用的`cover`的值将按比例拉伸背景图像以完全覆盖容器。请参考以下参考资料，以获取有关CSS3背景大小的进一步帮助：
- en: CSS Backgrounds and Borders Module Level 3 ([http://www.w3.org/TR/css3-background/#the-background-size](http://www.w3.org/TR/css3-background/#the-background-size))
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS背景和边框模块3级（[http://www.w3.org/TR/css3-background/#the-background-size](http://www.w3.org/TR/css3-background/#the-background-size)）
- en: '*Perfect Full Page Background Image* by Chris Coyier ([http://css-tricks.com/perfect-full-page-background-image/](http://css-tricks.com/perfect-full-page-background-image/))'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Perfect Full Page Background Image* by Chris Coyier ([http://css-tricks.com/perfect-full-page-background-image/](http://css-tricks.com/perfect-full-page-background-image/))'
- en: Can I Use CSS3 Background Size? ([http://caniuse.com/#feat=background-img-opts](http://caniuse.com/#feat=background-img-opts))
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我可以使用CSS3背景大小吗？（[http://caniuse.com/#feat=background-img-opts](http://caniuse.com/#feat=background-img-opts)）
- en: 'The image, however, is currently hidden at the back of the background color
    that applies to the top bar and a section in which Foundation named it Panel ([http://foundation.zurb.com/docs/components/panels.html](http://foundation.zurb.com/docs/components/panels.html)),
    as shown in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，图像目前被隐藏在应用于顶部栏和Foundation命名为Panel的部分的背景颜色的后面（[http://foundation.zurb.com/docs/components/panels.html](http://foundation.zurb.com/docs/components/panels.html)），如下截图所示：
- en: '![Time for action – build on the website](img/image00368.jpeg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![Time for action – build on the website](img/image00368.jpeg)'
- en: 'Remove these background colors so that we can see through the background image.
    To do so, open the `_config.scss` file and uncomment the following lines:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去掉这些背景颜色，以便我们可以透过背景图像看到。为此，打开`_config.scss`文件，并取消注释以下行：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Change the value of the `$topbar-bg-color` variable from `#333` to `transparent`
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将`$topbar-bg-color`变量的值从`#333`更改为`transparent`
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Uncomment this following line, which specifies the panel''s background color:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消以下行的注释，指定面板的背景颜色：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, change the value to `transparent` as well:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将值更改为`transparent`：
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we can see the background image, which is shown in the following screenshot:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到背景图像，如下截图所示：
- en: '![Time for action – build on the website](img/image00369.jpeg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![Time for action – build on the website](img/image00369.jpeg)'
- en: From the preceding screenshot, it is evident that the top bar and the panel
    background color have been removed, but some of the menu items still have it.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的截图中可以看出，顶部栏和面板的背景颜色已经被移除，但是一些菜单项仍然有。
- en: 'Let''s remove these background colors. In `_config.scss`, uncomment the following
    line:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们去掉这些背景颜色。在`_config.scss`中，取消注释以下行：
- en: '[PRE48]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'And change the value to use the value of the `$topbar-bg` variable, as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 并将值更改为使用`$topbar-bg`变量的值，如下所示：
- en: '[PRE49]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Save it and let a few seconds pass for the files to be compiled, and you should
    see now that the background color of those menu items are removed, as shown in
    the following screenshot:![Time for action – build on the website](img/image00370.jpeg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，等待几秒钟进行编译，现在您应该看到菜单项的背景颜色已经被移除，如下截图所示：![Time for action – build on the
    website](img/image00370.jpeg)
- en: 'Add `padding-top` to give more distance between the top bar and the upper boundary
    of the browser viewport:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`padding-top`以在顶部栏和浏览器视口的上边界之间提供更多距离：
- en: '[PRE50]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'And now, as you can see, there is more breadth therein:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如您所看到的，其中有更多的宽度：
- en: '![Time for action – build on the website](img/image00371.jpeg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![Time for action – build on the website](img/image00371.jpeg)'
- en: The left-half of the image is before we add the padding-top, and the right-half
    definitely is after we add the padding-top.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图像的左半部分是在我们添加`padding-top`之前，右半部分显然是在我们添加`padding-top`之后。
- en: 'Give more padding at the top and bottom of the panel section; hence, we can
    view more of the background image. Nest the style rules under the `.startup-header`,
    as follows:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面板部分的顶部和底部增加更多的填充；因此，我们可以查看更多的背景图像。将样式规则嵌套在`.startup-header`下，如下所示：
- en: '[PRE51]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the logo image, as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加logo图像，如下所示：
- en: '[PRE52]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now we have the logo added, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了logo，如下所示：
- en: '![Time for action – build on the website](img/image00372.jpeg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![Time for action – build on the website](img/image00372.jpeg)'
- en: Hover over the menu links in the top bar, and you will find it with a dark background
    color, as follows:![Time for action – build on the website](img/image00373.jpeg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部菜单链接上悬停，您会发现它有一个深色背景，如下所示：![Time for action – build on the website](img/image00373.jpeg)
- en: 'This background color is not quite right when it comes to the website''s aesthetic
    as a whole, so let''s remove that. In `_config.scss`, uncomment the following
    lines:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到整个网站的美学时，这个背景颜色并不太合适，所以让我们移除它。在`_config.scss`中取消注释以下行：
- en: '[PRE53]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, change the value to transparent by inheriting the value of the `$topbar-bg`
    variable, as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过继承`$topbar-bg`变量的值，将值改为透明：
- en: '[PRE54]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Turn the menu links to uppercase so that it looks slightly bigger. Set the
    variable named `$topbar-link-text-transform` in `_config.scss` from none to `uppercase`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将菜单链接转换为大写，这样看起来会稍微大一些。在`_config.scss`中将名为`$topbar-link-text-transform`的变量从`none`改为`uppercase`：
- en: '[PRE55]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The next thing we will do is change the styles of the two buttons: `Login`
    and `Sign Up`. We will make it just a little bit more fashionable, and the following
    are all the new styles for these buttons; nest these lines under the `.startup-header`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们要做的是改变两个按钮的样式：`登录`和`注册`。我们将使它看起来更时尚一点，以下是这些按钮的所有新样式；将这些行嵌套在`.startup-header`下面：
- en: '[PRE56]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, the buttons should look as shown in the following screenshot. Hover over
    the button, and you will see nice little transition effects that we added through
    the `transition()` mixin of Bourbon:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按钮应该看起来如下截图所示。悬停在按钮上，您将看到我们通过Bourbon的`transition()`混合添加的漂亮的过渡效果：
- en: '![Time for action – build on the website](img/image00374.jpeg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-在网站上建立](img/image00374.jpeg)'
- en: However, it's worth noticing that I consider this merely as decoration. It's
    up to you to customize the button styles.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，我认为这只是装饰。你可以自定义按钮样式。
- en: 'With buttons on a transparent background, let''s make three menu link items
    on the left-hand side, namely, **PRICES**, **PRICING**, and **BLOG**, slightly
    transparent as well. To do so, uncomment and change the variable named `$topbar-link-color`
    in `_config.scss` to `fade-out(#fff, 0.3)`, as follows:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在透明背景上的按钮上，让我们也稍微透明左侧的三个菜单链接项目，即**价格**，**定价**和**博客**。为此，请取消注释并在`_config.scss`中将名为`$topbar-link-color`的变量改为`fade-out(#fff,
    0.3)`，如下所示：
- en: '[PRE57]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, let''s give the links a transition effect. Add the following lines in
    `_main.scss`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们给链接添加一个过渡效果。在`_main.scss`中添加以下行：
- en: '[PRE58]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Next, we will add a dark transparent layer on the header. By adding this dark
    layer, the text in the header can be more distinct over the background image.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在页眉上添加一个深色透明层。通过添加这个深色层，页眉中的文本可以更清晰地显示在背景图像上。
- en: 'Add the following lines in `_main.scss`:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在`_main.scss`中添加以下行：
- en: '[PRE59]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add the following lines as our last touch for the header section:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在头部部分添加以下行作为我们的最后一步：
- en: '[PRE60]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, we have a nice header for the website, as you can see in the following
    screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个漂亮的网站标题，正如您在下面的截图中所看到的那样：
- en: '![Time for action – build on the website](img/image00375.jpeg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-在网站上建立](img/image00375.jpeg)'
- en: 'With the website styled, we will move to the next section. Below the header,
    we have the feature section that contains a number of key features of our products
    and services. And these are all the styles for the feature section:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站样式完成后，我们将转到下一部分。在页眉下面，我们有包含我们产品和服务的一些关键特性的特性部分。这些都是特性部分的样式：
- en: '[PRE61]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the preceding snippet, we remove the margin from the figure element that
    wraps the image icon. This will give the image icons figure more room to span,
    as you can see in the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，我们从包裹图像图标的figure元素中移除了边距。这将给图像图标的figure更多的空间，正如您在下面的截图中所看到的那样：
- en: '![Time for action – build on the website](img/image00376.jpeg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-在网站上建立](img/image00376.jpeg)'
- en: Other than that, `margin-bottom`, as well as the padding we added in conjunction
    with it, simply gives this section more whitespace.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，`margin-bottom`以及我们添加的padding，只是给这个部分增加了更多的空白。
- en: 'Below the feature section, we have the section that shows happy customers speaking.
    We call it the testimonial section. Add the following style rules to build on
    it:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在特性部分下面，我们有一个展示满意客户的部分。我们称之为见证部分。添加以下样式规则来完善它：
- en: '[PRE62]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Also, remove the `blockquote` element''s left-hand side border by changing
    the value of `$blockquote-border` in `_config.scss`, as follows:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，通过改变`_config.scss`中`$blockquote-border`的值，也移除`blockquote`元素的左边框，如下所示：
- en: '[PRE63]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Note that the preceding styles are merely decoration. At this stage, this is
    how the testimonial section looks:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述样式仅仅是装饰。在这个阶段，这就是见证部分的外观：
- en: '![Time for action – build on the website](img/image00377.jpeg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间-在网站上建立](img/image00377.jpeg)'
- en: Don't freak out, it's not broken. The remaining styles will be added through
    the Orbit Slider plugin once it is enabled. We will take a look at the steps for
    this shortly.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 不要惊慌，它没有坏。剩下的样式将通过Orbit Slider插件添加一旦它被启用。我们很快就会看到这个步骤。
- en: Next, we will style the price and plan tables. These are all the styles for
    the table price, and their main purpose is to give each table a distinct color.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为价格和计划表格设置样式。这些都是表格价格的样式，它们的主要目的是给每个表格设置不同的颜色。
- en: '[PRE64]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The footer section is bare and straightforward. There''s nothing prominent.
    There is just a bunch of style rules to make the footer look nicer, as follows:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页脚部分是简单的。没有什么显著的。只是一堆样式规则，让页脚看起来更漂亮，如下所示：
- en: '[PRE65]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '*What just happened?*'
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'In this section, we focused on the website''s appearance. We just added styles
    that eventually make the website look a lot nicer from the header and down to
    the footer. However, a few things are not workable at this stage, such as Orbit,
    and we have yet to test how the website looks in the smaller viewport size. So,
    that is exactly what we are going to address in the next section. This is how
    the website should now look at this stage:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们关注了网站的外观。我们只是添加了最终使网站从头部到页脚看起来更漂亮的样式。然而，在这个阶段有一些东西是不可行的，比如Orbit，我们还没有测试网站在较小的视口尺寸下的外观。所以，这正是我们接下来要解决的问题。这就是网站在这个阶段应该看起来的样子：
- en: '![What just happened?](img/image00378.jpeg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00378.jpeg)'
- en: Have a go hero – colors and creativities
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-颜色和创意
- en: I realize that good, bad, nice, and not nice are highly subjective. It all depends
    on individual preference and their degree of taste. So, if the website decoration,
    such as colors, fonts, and sizes, that we specified in the preceding steps are
    not up your alley, you can freely change them and add your own creativity.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到好坏美丑都是高度主观的。这完全取决于个人偏好和品味程度。因此，如果我们在前面步骤中指定的网站装饰，如颜色、字体和大小，不符合您的口味，您可以自由更改它们并添加自己的创意。
- en: Pop quiz – importing an external Sass style sheet
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验-导入外部Sass样式表
- en: Q1\. Hopefully, you followed the preceding steps fully through and paid attention
    to some of the minute details. We have imported a number of style sheets to compile
    them into a single style sheet. How do we make the Sass compiler ignore these
    imported style sheets so that the compiler won't compile them into a CSS file
    on its own?
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 希望您完全按照前面的步骤进行操作，并注意一些细节。我们已经导入了许多样式表，将它们编译成一个单独的样式表。我们如何使Sass编译器忽略这些导入的样式表，以便编译器不会将它们单独编译成CSS文件？
- en: Remove the extension file's extension in the import declaration.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入声明中删除扩展文件的扩展名。
- en: Add an underscore as a prefix in the import declaration.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入声明中添加下划线作为前缀。
- en: Add an underscore as a prefix in the file name.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件名中添加下划线作为前缀。
- en: Fine-tuning the website
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调网站
- en: As mentioned, there are a couple of things we need to do before we call the
    website done. First, we are going to enable Orbit and the toggle function of the
    top bar, and optimize the website styles, such as the positioning and the sizing,
    for smaller viewport size. It's time for action again.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在我们称网站完成之前，有一些事情需要做。首先，我们将启用轨道和顶部栏的切换功能，并为较小的视口大小优化网站样式，如定位和大小。又到了行动的时候。
- en: Time for action – compiling JavaScript and styling the website with media queries
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用媒体查询编译JavaScript和设置网站样式
- en: 'Perform the following steps to compile the JavaScript files and optimize the
    website for a small viewport size:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来编译JavaScript文件并优化小视口大小的网站：
- en: Create a new JavaScript file in the `assets/js` directory named `foundation.js`.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`assets/js`目录中创建一个名为`foundation.js`的新JavaScript文件。
- en: 'In `foundation.js`, import the following JavaScript files:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foundation.js`中，导入以下JavaScript文件：
- en: '[PRE66]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Via Koala, compile `foundation.js`.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Koala，编译`foundation.js`。
- en: 'Then, open `index.html` and add the following lines right before `</body>`
    to enable the Orbit Slider functionalities:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`index.html`，并在`</body>`之前添加以下行，以启用轨道滑块的功能：
- en: '[PRE67]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Now, we will refine the website layout for smaller viewport viewing with media
    queries. To do so, we need to uncomment the variables that define the media query
    ranges used in Foundation, so that we can use them in our style sheets as well:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过媒体查询优化较小视口的网站布局。为此，我们需要取消注释在Foundation中定义的媒体查询范围的变量，以便我们也可以在我们的样式表中使用它们：
- en: '[PRE68]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Tip
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'We can utilize these variables within our own style sheets, as follows:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在自己的样式表中使用这些变量，如下所示：
- en: '`@media #{$small-up} {`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`@media #{$small-up} {`'
- en: '`}`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: Now, we will define a couple of style rules through these media queries to adjust
    the website's styles, particularly the sizing, positioning, and whitespace.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过这些媒体查询定义一些样式规则，以调整网站的样式，特别是大小、定位和空白。
- en: And these are all the style rules to add in `_responsive.scss`.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些都是要添加到`_responsive.scss`中的所有样式规则。
- en: '[PRE69]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '*What just happened?*'
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: 'We just compiled the JavaScript to enable the Orbit Slider and the toggle function
    of the top bar. And we also refined the website layout for a smaller viewport
    size. And the following screenshot shows how the website looks in a small viewport:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编译了JavaScript，以启用轨道滑块和顶部栏的切换功能。我们还为较小的视口大小优化了网站布局。以下截图显示了网站在小视口下的外观：
- en: '![What just happened?](img/image00379.jpeg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/image00379.jpeg)'
- en: It is nice, isn't it?
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，不是吗？
- en: Have a go hero – remove unnecessary Foundation components
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试一试-删除不必要的Foundation组件
- en: We include all the Foundation components, even ones we are not using in the
    website. Hence, it is better to remove all the styles which do not give an advantage
    to the website. Open `_foundation.scss`, and comment the `@import` components
    that we do not need (at least at this moment) and recompile the style sheets.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了所有Foundation组件，即使我们在网站中没有使用。因此，最好删除所有对网站没有优势的样式。打开`_foundation.scss`，并注释掉我们不需要的`@import`组件（至少目前不需要），然后重新编译样式表。
- en: Summary
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We just finished working on the third project by building a responsive website
    for a new start-up company with Foundation. There are a lot of things we learned
    along the way to the end of this project, particularly about Sass. Sass is a powerful
    CSS preprocessor that allows us to compose styles in a more efficient and flexible
    form. We have learned to use variables, interpolation, mixins, and a couple of
    other Sass features.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了第三个项目，使用Foundation为一家新创公司构建了一个响应式网站。在完成这个项目的过程中，我们学到了很多东西，特别是关于Sass。Sass是一个强大的CSS预处理器，可以让我们以更高效和灵活的形式组合样式。我们已经学会了使用变量、插值、混合和其他一些Sass功能。
- en: Honestly speaking, the websites, including ones that we built in the previous
    chapters, are easy to build. Our work herein mostly involves making up the website
    appearance, such as the coloring and the sizing. Everything that matters most
    to make the website responsive, such as the Grid for example, has been covered
    by the frameworks we are using (Foundation, Bootstrap, and Responsive.gs).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，包括我们在前几章中构建的网站在内，都很容易构建。我们的工作主要是使网站外观更加美观，比如颜色和大小。而对于使网站响应式最重要的事情，比如网格，已经被我们使用的框架（Foundation、Bootstrap和Responsive.gs）覆盖了。
- en: To conclude, we hope the projects that we present in this book are a great start
    for you to build responsive websites on your own.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们希望本书中呈现的项目对您自己构建响应式网站是一个很好的开始。
