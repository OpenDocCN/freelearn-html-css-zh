- en: Chapter 3. Configuring the Server and Transferring Real-time Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。配置服务器和传输实时数据
- en: Data is the heart of any application. And data transfer between the client and
    server is a very important part of it. We have seen in the last chapter how we
    can transfer data using WebSockets. Now, we will see how we can utilize it and
    make an application in which real-time data transfer can be used. Real-time data
    transfer is mainly used when we have a collaborative application or any application
    which needs reflection as soon as some of the data changes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是任何应用程序的核心。客户端和服务器之间的数据传输是其中非常重要的一部分。在上一章中，我们已经看到了如何使用WebSockets传输数据。现在，我们将看到如何利用它，并制作一个可以使用实时数据传输的应用程序。实时数据传输主要用于协作应用程序或任何需要在数据发生变化时立即反映的应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Real-time data transfer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据传输
- en: Real-time applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时应用程序
- en: Collaborative presentation applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作演示应用程序
- en: Adding collaboration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加协作
- en: Do it yourself
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自己动手
- en: Tips and tricks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技巧和窍门
- en: Full-duplex real-time data transfer
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全双工实时数据传输
- en: As we all know, sending and receiving data as soon as some change happens is
    real-time data transfer. It can be for some changes that occur in that data. The
    reason for data change could be user itself or some timed event. In normal scenarios,
    the user changes should accordingly reflect to other users; for example, chatting
    applications where people send messages to each other. A chatting application
    is a very small example of real-time data transfer; let's talk about some big
    examples like games. Games are the major applications where real-time data transfer
    is required. But as the industry is growing, our daily use applications are also
    adopting real-time full-duplex data communication. If we see any stock market
    application, then we can see live data changes happening, which basically is a
    good example of server push. In this scenario, the server is pushing data, which
    is a great feature of WebSockets.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，一旦发生变化，发送和接收数据就是实时数据传输。它可以是发生在数据中的一些变化。数据变化的原因可能是用户本身或某些定时事件。在正常情况下，用户的更改应该相应地反映给其他用户；例如，人们互相发送消息的聊天应用程序。聊天应用程序是实时数据传输的一个很小的例子；让我们谈谈一些大的例子，比如游戏。游戏是需要实时数据传输的主要应用程序。但随着行业的发展，我们日常使用的应用程序也在采用实时全双工数据通信。如果我们看任何股票市场应用程序，我们可以看到实时数据变化发生，这基本上是服务器推送的一个很好的例子。在这种情况下，服务器正在推送数据，这是WebSockets的一个很好的特性。
- en: Foundation of real-time applications
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时应用程序的基础
- en: 'We''ve understood what real-time data transfer is; now let''s see what we need
    to make a real-time data transfer application There are some foundation steps
    we need to consider before starting any application. Some of the major steps are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了什么是实时数据传输；现在让我们看看我们需要做什么来制作一个实时数据传输应用程序。在开始任何应用程序之前，有一些基础步骤我们需要考虑。一些主要步骤包括：
- en: Selecting the functionality we need to make collaborative or real-time data
    transfer application
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择我们需要使协作或实时数据传输应用程序的功能
- en: Selecting the server-side technology to make it possible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择服务器端技术使其成为可能
- en: Selecting the client-side technology that integrates easily with the server
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择与服务器轻松集成的客户端技术
- en: These three steps are the main points to keep in mind. As we know, HTML5 supports
    WebSockets and is one of the best ways of data comunication. Now for the server-side,
    we have seen how easily and seamlessly the Node.js server can be integrated. Now
    the most important part is which functionality we need to make real-time. This
    is based on the kind of application we are building. Next, keeping these points
    in mind, we will start building our application so that we understand it better.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个步骤是需要牢记的主要要点。正如我们所知，HTML5支持WebSockets，并且是数据通信的最佳方式之一。现在对于服务器端，我们已经看到了Node.js服务器可以如何轻松地无缝集成。现在最重要的部分是我们需要使实时的功能。这取决于我们正在构建的应用程序的类型。接下来，牢记这些要点，我们将开始构建我们的应用程序，以便更好地理解它。
- en: Collaborative presentation application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协作演示应用程序
- en: Keeping the foundation elements in mind, let's build a presentation application
    where if you change the presentation, then it will also change for other users
    and vice versa. Basically, we will build a web-based collaborative presentation
    sharing application. To make this application for modern browsers, we need a JavaScript
    library, which gives us all the features we need for a presentation application,
    such as creating different pages, navigation, and so on. And then we will add
    the feature that enables collaboration between different users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑基础元素的基础上，让我们构建一个演示应用程序，如果你更改演示，那么其他用户也会相应地更改，反之亦然。基本上，我们将构建一个基于Web的协作演示共享应用程序。为了使这个应用程序适用于现代浏览器，我们需要一个JavaScript库，它给我们提供了演示应用程序所需的所有功能，比如创建不同的页面、导航等。然后我们将添加使不同用户之间可以协作的功能。
- en: The presentation library
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示库
- en: There are different JavaScript libraries available from which we can choose.
    The library that gives us enough features to create our application is **reveal.js**.
    It is a well-made API and is fully based on HTML5\. There is also a well-made
    application to make online presentations, which is also based on the same JavaScript
    library that we are going to use. The website for the same is [www.slides.com](http://www.slides.com).
    Go ahead and visit this website; it will give you a feeling of how our presentation
    is going to look. We will be using this API and making it collaborative so that
    other users can also change the slide and the reflection can be seen by everyone.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的JavaScript库可供选择。给我们足够功能来创建我们的应用程序的库是**reveal.js**。这是一个制作精良的API，完全基于HTML5。还有一个制作精良的在线演示应用程序，也是基于我们将要使用的相同JavaScript库。该网站是[www.slides.com](http://www.slides.com)。继续访问这个网站；它会让你感受到我们的演示将会是什么样子。我们将使用这个API，并使其协作，以便其他用户也可以更改幻灯片，并且反映可以被所有人看到。
- en: Setting up the library
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置图书馆
- en: 'Firstly, we need to download and set up the library file. The library that
    we are going to use can be found at [https://github.com/hakimel/reveal.js](https://github.com/hakimel/reveal.js).
    The following are the steps to set up a library:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载并设置库文件。我们将要使用的库可以在[https://github.com/hakimel/reveal.js](https://github.com/hakimel/reveal.js)找到。以下是设置库的步骤：
- en: Download a copy for yourself and open the `index.html` file.![Setting up the
    library](img/B03854_03_01.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载副本并打开`index.html`文件。![设置库](img/B03854_03_01.jpg)
- en: Once you open the file, you can see the default presentation that comes with
    it.![Setting up the library](img/B03854_03_02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你打开文件，你就可以看到默认的演示文稿。![设置库](img/B03854_03_02.jpg)
- en: The library reveal.js is a complete presentation solution which comes with its
    own navigation and presentation mechanism.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: reveal.js库是一个完整的演示解决方案，带有自己的导航和演示机制。
- en: Here you can use keyboard controls to navigate to different pages. Use the right
    arrow key to go to the next slide and the left arrow key for the previous slide.
    Similarly use the up and down arrow keys for different levels of presentation.
    It supports all kind of text and you can put real code or any HTML content in
    it which is live. You can go through the slides to know more about the library
    features.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，你可以使用键盘控制来导航到不同的页面。使用右箭头键转到下一张幻灯片，使用左箭头键转到上一张幻灯片。同样，使用上下箭头键可以进行不同级别的演示。它支持各种文本，你可以在其中放置真实的代码或任何HTML内容，这是实时的。你可以浏览幻灯片以了解更多关于库功能的信息。
- en: Adding collaboration
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加协作
- en: To add the collaborative feature to the presentation library, let's first see
    what steps we need to follow to make this application work. It is good practice
    to write down the important steps from the client side and server side just to
    make sure that we are covering each and every step.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要向演示库添加协作功能，让我们首先看看我们需要遵循哪些步骤使这个应用程序工作。将客户端和服务器端的重要步骤写下来是一个好的做法，以确保我们覆盖了每一个步骤。
- en: 'For this application, let''s make the list of things to do for the client side:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，让我们列出客户端需要做的事情的清单：
- en: Connecting to the WebSocket server
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到WebSocket服务器
- en: Receiving messages from WebSocket
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从WebSocket接收消息
- en: Applying the slide number received from the server to the current presentation
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将从服务器接收的幻灯片编号应用到当前演示
- en: Sending slide details to the server when the user changes the slide
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户更改幻灯片时向服务器发送幻灯片详细信息
- en: 'Now that we have listed the points for the client, let''s list down the points
    for server as well:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经列出了客户端的要点，让我们也列出服务器端的要点：
- en: Initializing WebSocket server
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化WebSocket服务器
- en: Receiving slides data from client
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从客户端接收幻灯片数据
- en: Storing current slide data
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储当前幻灯片数据
- en: Passing current slide data for new users who joined later
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为后来加入的新用户传递当前幻灯片数据
- en: Broadcasting the slide data changes to all the users
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将幻灯片数据更改广播给所有用户
- en: Checking for the slide data changes to reduce duplicate calls
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查幻灯片数据更改以减少重复调用
- en: As we have the library downloaded, we need to add our custom client and server-side
    code to make it work.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经下载了库，我们需要添加我们的自定义客户端和服务器端代码使其工作。
- en: Code implementation
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码实现
- en: The library has most of the code ready for us, so we don't need to add much
    code for the client. We need to write the server code completely. Let's check
    out the code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 库已经为我们准备好了大部分代码，所以我们不需要为客户端添加太多代码。我们需要完全编写服务器端代码。让我们来看看代码。
- en: The client code
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端代码
- en: 'On the client side, the main file is `index.html`, so we are going to add our
    code to that file. At the end of the JavaScript code in the file, add the following
    code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，主文件是`index.html`，所以我们将把我们的代码添加到该文件中。在文件的JavaScript代码末尾，添加以下代码：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Code explanation
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码解释
- en: Let's see what we have written in this code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在这段代码中写了什么。
- en: 'We have added the load event listener to the window so that as soon as we know
    that the browser window is loaded properly, we can start initializing our WebSocket
    connection:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向窗口添加了load事件监听器，这样一旦我们知道浏览器窗口已经正确加载，我们就可以开始初始化我们的WebSocket连接：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the `init` method is called, we write the actual code which communicates
    with the WebSocket server. Here, in this piece of code, we have instantiated the
    WebSocket object and written an event handler which will be called when the connection
    is open. Once the connection is established, this method is invoked and we come
    to know that the connection has been created. Now we send some random data, which
    can be treated as the acknowledgment for the server:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用`init`方法，我们就写下了实际与WebSocket服务器通信的代码。在这里，在这段代码中，我们实例化了WebSocket对象，并编写了一个事件处理程序，当连接打开时将被调用。一旦连接建立，这个方法被调用，我们就知道连接已经创建。现在我们发送一些随机数据，这可以被视为对服务器的确认：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we add the message event handler, which is invoked when the server sends
    a message—in our case, we have to handle the data that server is going to send
    us:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们添加消息事件处理程序，当服务器发送消息时调用它——在我们的情况下，我们必须处理服务器将要发送给我们的数据：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So you can see that we are calling the `isJson` method and sending the message
    data to it. This method is invoked to check whether the data we have received
    is in the format we want or not; otherwise it can throw an error:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以看到我们调用了`isJson`方法并将消息数据发送给它。这个方法被调用来检查我们收到的数据是否是我们想要的格式；否则它可能会抛出一个错误：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After checking that we have the right type of the data, we now parse the data
    into the **JavaScript Object Notation** (**JSON**) format. The reason we have
    to parse the JSON method is because we are sending the data in JSON, which is
    converted to string:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查我们是否有正确类型的数据之后，我们现在将数据解析成**JavaScript对象表示法**（**JSON**）格式。我们必须解析JSON方法的原因是因为我们正在以JSON格式发送数据，它被转换为字符串：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the data is converted, we get a JSON object in the obj variable. Now comes
    one of the important methods, which basically is a reveal.js library method used
    to set the current slide of the presentation:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被转换，我们就在obj变量中得到了一个JSON对象。现在来看一个重要的方法，这个方法基本上是一个reveal.js库方法，用于设置演示的当前幻灯片：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This way we receive the data and set it in the presentation. Now comes the second
    part of the code—sending the data to the server.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就接收到数据并在演示文稿中设置它。现在来看代码的第二部分——将数据发送到服务器。
- en: 'The reveal.js library gives us an event which we can listen to and get information
    about the current slide:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: reveal.js库给了我们一个事件，我们可以监听并获取关于当前幻灯片的信息：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once we add the listener to the `slidechanged` event, we can use the data which
    was passed under the event attribute.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将监听器添加到`slidechanged`事件中，我们就可以使用在事件属性下传递的数据。
- en: 'Here is how we have created a string from the JSON object and passed it to
    the server:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何从JSON对象创建字符串并将其传递给服务器：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the WebSockets client, we use the `send` method to send the data to the server.
    Once sent, the server receives it and performs the action as we have defined.
    Now let's check how the server is set up and how it behaves.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在WebSockets客户端中，我们使用`send`方法将数据发送到服务器。一旦发送，服务器接收到并执行我们定义的操作。现在让我们来看看服务器是如何设置和行为的。
- en: The server code
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器代码
- en: 'We have already seen in the last chapter how we can create a Node.js server.
    In a similar manner, we will create another application using NPM (please refer
    to [Chapter 2](ch02.html "Chapter 2. Getting Started with WebSockets"), *Getting
    Started with WebSockets* for instructions for setting up and running the server).
    Here is the server code that we need to write in the `server.js` file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经看到了如何创建一个Node.js服务器。以类似的方式，我们将使用NPM创建另一个应用程序（请参考[第2章](ch02.html "第2章。使用WebSockets入门")，*使用WebSockets入门*来获取设置和运行服务器的说明）。以下是我们需要在`server.js`文件中编写的服务器代码：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code is pretty standard and straightforward. Let's break this down and
    understand what we have put here and why.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码非常标准和直接。让我们分解并理解我们在这里放了什么以及为什么。
- en: Code explanation
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码解释
- en: 'Here, one of the main methods you can see is the `broadcast`. We write this
    method to broadcast the slide change data to all the users connected using WebSockets.
    We are simply looping through all the clients and send the data using the `send()`
    method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到的一个主要方法是`broadcast`。我们编写这个方法来将幻灯片更改数据广播给所有使用WebSockets连接的用户。我们只是简单地循环遍历所有客户端，并使用`send()`方法发送数据：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After this, we define a variable in which we will be holding the slide data
    temporarily. This variable is important because whenever we get the slide data,
    we will store it and pass it when needed. There is a situation when users join
    the meeting at a later stage; using this data stored in this variable, we can
    provide them with the current slide number as stored:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们定义一个变量，我们将暂时保存幻灯片数据。这个变量很重要，因为每当我们获取幻灯片数据时，我们将存储它，并在需要时传递它。有一种情况是用户在后期加入会议；使用存储在这个变量中的数据，我们可以为他们提供存储的当前幻灯片编号：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now look at the following piece of code. Here, we are handling the connection
    event so that we can pass the current slide number data to the user. This event
    gives us the indication of the new user. While sending data, you will notice that
    we have used the `JSON.stringify` method. This method is used to make a string
    from JSON as our object is in the JSON format:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看一下以下代码片段。在这里，我们正在处理连接事件，以便我们可以将当前幻灯片编号数据传递给用户。这个事件给了我们新用户的指示。在发送数据时，你会注意到我们使用了`JSON.stringify`方法。这个方法用于从JSON中创建字符串，因为我们的对象是以JSON格式的：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Within this code, we can see that we have one parameter passed: the instance
    of the WebSocket object for that particular user. To receive messages, we need
    to add a `message` event handler which you can see in the following code. And
    the parameter is the actual message which is being passed from the client side:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们可以看到有一个参数被传递：该特定用户的WebSocket对象的实例。为了接收消息，我们需要添加一个`message`事件处理程序，你可以在以下代码中看到。参数是从客户端传递的实际消息：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After getting the message, we check if the object passed is a JSON or not.
    So for this we have the JSON method defined, which basically checks for the JSON
    string and returns true/false. After the check we parse the JSON string and check
    if the value is similar to the last value of slide index data. If not, we store
    it and broadcast the message to all the clients. The check is necessary to avoid
    duplicate calls. Following is the code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 收到消息后，我们检查传递的对象是否是JSON。为此，我们定义了JSON方法，它基本上检查JSON字符串并返回true/false。检查后，我们解析JSON字符串并检查值是否与幻灯片索引数据的最后一个值相似。如果不是，我们将其存储并将消息广播给所有客户端。检查是必要的，以避免重复调用。以下是代码：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And that is all—just a simple server code which is very powerful and works fine
    for our small applications.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样——只是一个简单的服务器代码，非常强大，适用于我们的小型应用程序。
- en: 'Once we run the application, here is how it will look:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行应用程序，它将如下所示：
- en: '![Code explanation](img/B03854_03_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![代码解释](img/B03854_03_03.jpg)'
- en: 'We can see that both have same first slide which is on index zero:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到两者都有相同的第一张幻灯片，即索引为零的幻灯片：
- en: '![Code explanation](img/B03854_03_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![代码解释](img/B03854_03_04.jpg)'
- en: And once we navigate to other slides, the slides for other users also change.
    Take a look at the **Console** log in the left-hand side window. We can see that
    **sending slide data** along with slide number is displayed, which shows that
    upon slide change, the data is being sent. In the right-hand side window, we can
    see that **changing slide to** is logged in the console, which shows that the
    data is received from the server and accordingly we see the slide changing for
    the user.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导航到其他幻灯片，其他用户的幻灯片也会改变。看一下左侧窗口中的**控制台**日志。我们可以看到**发送幻灯片数据**以及幻灯片编号被显示出来，这表明在幻灯片改变时，数据正在被发送。在右侧窗口中，我们可以看到**将幻灯片更改为**被记录在控制台中，这表明数据是从服务器接收到的，相应地我们看到用户的幻灯片也在改变。
- en: '![Code explanation](img/B03854_03_05.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![代码解释](img/B03854_03_05.jpg)'
- en: 'Similarly, if we change the slide from the right-hand side window, it will
    reflect on the left-hand side window, which is clearly visible from the logs.
    This same will happen for all users. Following is the screenshot of the logs as
    seen in the command prompt:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们从右侧窗口更改幻灯片，它将在左侧窗口上反映出来，这在日志中是清晰可见的。所有用户都会发生同样的情况。以下是在命令提示符中看到的日志的截图：
- en: '![Code explanation](img/B03854_03_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![代码解释](img/B03854_03_06.jpg)'
- en: On the sever side, we can see the data that is received and the data broadcast
    logs shows that the data is being passed on to all the users. Putting logs on
    the server side always helps to check the steps to debug the application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，我们可以看到接收到的数据和数据广播日志显示数据正在传递给所有用户。在服务器端放置日志总是有助于检查调试应用程序的步骤。
- en: Do it yourself
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自己动手
- en: This application is a very simple and easy to build application. You have learned
    how to create a simple application with some limited features. There can be many
    additions made to this application and it can be made more powerful. Let's give
    you some tips on features that you can develop.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序是一个非常简单和易于构建的应用程序。你已经学会了如何创建一个带有一些有限功能的简单应用程序。可以对这个应用程序进行许多添加，并且可以使其更加强大。让我们给你一些可以开发的功能的提示。
- en: Input username
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入用户名
- en: Whenever the user visits the URL, the application asks for the username. The
    username that is inputted is displayed in the top-left corner of the screen. I
    think this scenario is quite easy to build. I will leave its implementation to
    you. It is easy up to the point that we want to show the list of users, which
    is basically our next scenario.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户访问URL时，应用程序都会要求用户名。输入的用户名将显示在屏幕左上角。我认为这种情况相当容易构建。我会把它的实现留给你。直到我们想要显示用户列表，这是相当容易的。
- en: The list of users
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户列表
- en: 'Make a button which will show you a list of users that are currently online.
    This scenario needs code changes both on the client as well the server side. Let
    me list down some key points that you need to implement this feature:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个按钮，它将显示当前在线用户的列表。这种情况需要在客户端和服务器端都进行代码更改。让我列出一些你需要实现这个功能的关键点：
- en: As soon as the user enters the name, save it on the server side. This can be
    achieved by sending the name of the user in a particular format and handling the
    same on the server side to store it in the array or object.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户一输入名称，立即在服务器端保存。这可以通过以特定格式发送用户名称并在服务器端处理相同来实现，以将其存储在数组或对象中。
- en: Maintain a list of all the users on the server side for reference.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器端维护所有用户的列表以供参考。
- en: Fetch the list of users from the server as soon as we join the server. This
    can be achieved by sending a particular message like `getUsers` and adding another
    entry on the `message` event handler returning the list of users.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器获取用户列表，只要我们加入服务器即可。这可以通过发送一个特定的消息，比如`getUsers`，并在`message`事件处理程序中添加另一个条目来返回用户列表来实现。
- en: Make a button on the UI side and slide in the list of users.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UI界面上制作一个按钮，并滑动显示用户列表。
- en: User-based authorization to change the presentation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于用户的授权来更改演示文稿
- en: When the user enters the meeting, ask them whether they want to join as a presenter
    or attendee. If user chooses to join as a presenter, then allow the user to change
    the slide. If the user chooses to join as an attendee, then restrict the user
    from changing the slides.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户进入会议时，询问他们是否要以演讲者或与会者的身份加入。如果用户选择以演讲者身份加入，则允许用户更改幻灯片。如果用户选择以与会者身份加入，则限制用户更改幻灯片。
- en: 'Asking the user when they enter the name is easy; the slightly complicated
    part is restricting the user from changing the slides. That is easy if we dig
    into the configuration of the reveal.js library. In the configuration, we can
    see some parameters which are true and false. We just need to alter them as per
    the user type: presenter/attendee.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 询问用户输入名称很容易；稍微复杂的部分是限制用户更改幻灯片。如果我们深入研究reveal.js库的配置，这是很容易的。在配置中，我们可以看到一些参数是true和false。我们只需要根据用户类型（演讲者/与会者）进行修改。
- en: Making the user the presenter
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用户成为演讲者
- en: We have the presenter and the attendee. Now let us make a provision for the
    presenter to give permission to the attendee. So from the list of users, if the
    presenter clicks on the user name then it will make that user the presenter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有演讲者和与会者。现在让我们为演讲者提供权限，以允许与会者。因此，从用户列表中，如果演讲者点击用户名，那么该用户将成为演讲者。
- en: This can be achieved in a simple way by changing the configuration of reveal.js
    at runtime. The same configuration that we changed earlier on the basis of role,
    we just need to invoke the same functionality on the change of role of the user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在运行时更改reveal.js的配置，可以以简单的方式实现这一点。我们只需要在用户角色更改时调用相同的功能，就像我们之前根据角色更改的配置一样。
- en: Tips and tricks
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和技巧
- en: Let's talk about some tips and tricks that you can use while making an application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈在制作应用程序时可以使用的一些提示和技巧。
- en: 'Using JSON:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSON：
- en: The JSON format is an easily readable format in JavaScript. It is always good
    to transfer data in the JSON format.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: JSON格式在JavaScript中是一种易于阅读的格式。以JSON格式传输数据总是很好的。
- en: 'Object-based structure for WebSockets:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于对象的WebSocket结构：
- en: 'Normally, in any application where we have to transfer different data sets,
    it is always preferred that we finalize a proper structure for the messages. Take
    the example of a chatting application: if we finalize a structure, it is better
    to handle the message. Here is a sample structure:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在任何需要传输不同数据集的应用程序中，最好确定消息的正确结构。以聊天应用程序为例：如果我们确定了一个结构，更好地处理消息。以下是一个示例结构：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using ArrayBuffer:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ArrayBuffer：
- en: 'There is another way to send data using ArrayBuffer; you can also send a **Binary
    Large Object** (**BLOB**). Here is an example of the same:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种使用ArrayBuffer发送数据的方法；你也可以发送一个二进制大对象（BLOB）。以下是一个示例：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These kinds of structures can help in better understanding and can be used for
    different sets of messages. Here, the type can be a message, image, audio, file,
    or anything else. And the property data is generic, which can have the data for
    all these different types.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结构可以帮助更好地理解，并可用于不同类型的消息。在这里，类型可以是消息、图像、音频、文件或其他任何东西。而属性数据是通用的，可以包含所有这些不同类型的数据。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how HTML5-based JavaScript libraries can be utilized.
    We have combined WebSockets with the reveal.js library for a collaborative application.
    This was a simple example, and you have seen that with less coding we have achieved
    a good working application. You have learned how to configure the server, send
    and receive data, and broadcast the data from the server to all the clients.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何利用基于HTML5的JavaScript库。我们将WebSockets与reveal.js库结合起来，用于协作应用程序。这是一个简单的例子，您已经看到我们用更少的编码实现了一个良好的工作应用程序。您已经学会了如何配置服务器，发送和接收数据，并从服务器向所有客户端广播数据。
- en: In the coming chapter, we will see the use of another library along with some
    frameworks, to develop a complete application using modern technologies.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到另一个库的使用，以及一些框架，利用现代技术开发完整的应用程序。
