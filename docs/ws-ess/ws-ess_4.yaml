- en: Chapter 4. Using WebSockets in Real Scenario
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。在真实场景中使用WebSockets
- en: We have seen in the last chapter that how to create a real-time presentation
    sharing application. We understood how real-time data transfer works and how to
    set up the server. Now we will go to the next step, where we will see what more
    elements we need to add to strengthen our application in terms of structure with
    the use of a framework. In this chapter, we will see the different steps to create
    an application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中看到了如何创建一个实时演示共享应用程序。我们了解了实时数据传输的工作原理以及如何设置服务器。现在我们将进入下一步，看看我们需要添加哪些元素来加强我们的应用程序的结构。在这一章中，我们将看到创建应用程序的不同步骤。
- en: The real scenario
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真实场景
- en: The question here is what is a real scenario? We have already seen an application
    which is a real-world scenario application, but then what we are referring to
    here? A properly structured application is incomplete without a framework in place.
    In the last application, we used a JavaScript server and a JavaScript library,
    did the integration, and built our application. But do you think that the application
    structure is good enough to support extensibility or reusability? The answer is
    NO, it is not, because we have not used any framework which will provide better
    structuring to our application. In this chapter, let's talk about the real scenario
    where we implement different structures or frameworks for our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是什么是真实场景？我们已经看到了一个真实世界的场景应用程序，但是这里我们指的是什么？一个结构良好的应用程序如果没有框架支持是不完整的。在上一个应用程序中，我们使用了JavaScript服务器和JavaScript库，进行了集成并构建了我们的应用程序。但是你认为应用程序的结构足够好以支持可扩展性或可重用性吗？答案是否定的，因为我们没有使用任何框架来为我们的应用程序提供更好的结构。在这一章中，让我们谈谈实际场景，我们在应用程序中实现不同的结构或框架。
- en: The JavaScript framework
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript框架
- en: With the growth of HTML5, JavaScript frameworks are coming into the picture.
    And the scenario is that we have a lot of them to choose from. Some of the commonly
    used frameworks are AngularJS, Ember.js, Knockout.js, Backbone.js, and a lot more.
    We will be using AngularJS in our next example. AngularJS is developed by Google
    developers and is quite a powerful framework with a lot of needed features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着HTML5的发展，JavaScript框架开始进入视野。情况是我们有很多选择。一些常用的框架包括AngularJS、Ember.js、Knockout.js、Backbone.js等等。我们将在下一个示例中使用AngularJS。AngularJS是由谷歌开发的，是一个功能强大的框架，具有许多必要的功能。
- en: AngularJS
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AngularJS
- en: 'AngularJS is an open source framework developed by Google. It is based on a
    very famous design pattern: **Model-View-ViewModel** (**MVVM**). Along with that
    it gives features that work seamlessly with HTML5, such as directives, bindings,
    and controllers. It mainly handles the problems of single-page applications providing
    features to implement dynamic views and routing mechanisms to simplify navigation
    between pages without loading the complete webpage. This feature makes this framework
    very beneficial for developers. It not only solves the problems of development,
    but also has made testing very easy.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS是由谷歌开发的开源框架。它基于一个非常著名的设计模式：**Model-View-ViewModel**（**MVVM**）。除此之外，它还提供了与HTML5无缝配合的功能，如指令、绑定和控制器。它主要处理单页应用程序的问题，提供了实现动态视图和路由机制的功能，以简化页面之间的导航，而无需加载完整的网页。这个特性使得这个框架对开发者非常有益。它不仅解决了开发中的问题，还使得测试变得非常容易。
- en: There are a lot of details available on the Web about the AngularJS framework.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于AngularJS框架在网上有很多详细信息。
- en: Learn by doing
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学以致用
- en: Learn by doing is one of the best way of learning. Sometimes you learn about
    something and then implement it. But because you have already read the scenarios,
    you can implement it easily. One of the best methods is to start doing, and when
    you face a problem try to find a solution. This will improve your problem-solving
    skills and will help you explore more. On similar lines, let's start with an application
    and we will see where we encounter problems and where can we see the need for
    a framework.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 学以致用是学习的最佳方式之一。有时候你会学习一些东西，然后实施它。但是因为你已经阅读了场景，你可以很容易地实施它。最好的方法之一是开始行动，当你面临问题时，尝试找到解决方案。这将提高你的解决问题的能力，并帮助你探索更多。在类似的情况下，让我们从一个应用程序开始，看看我们在哪里遇到问题，以及我们在哪里可以看到需要一个框架。
- en: The collaborative drawing application
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协作绘图应用程序
- en: Let's build a drawing application in which the user can draw on a canvas and
    other users can also do the same at the same time. Basically, we are creating
    a collaborative drawing application. Before building the application, let's gather
    the requirements and do some analysis, which is necessarily required to build
    an application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个绘图应用程序，用户可以在画布上绘图，其他用户也可以同时进行相同的操作。基本上，我们正在创建一个协作绘图应用程序。在构建应用程序之前，让我们收集要求并进行一些分析，这是构建应用程序必需的。
- en: Requirements
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求
- en: Here, our main requirement is that we need to make an application which provides
    collaborative drawing. So what we need is a client application which is connected
    to a server and which delivers the data from one user to another in real time.
    Along with that, we need to make a mechanism using HTML to draw. Instead of spending
    a lot of time on coding for a drawing feature, we can use a good readymade library
    that provides us with the features we need for drawing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的主要要求是需要制作一个提供协作绘图的应用程序。所以我们需要一个客户端应用程序，它连接到服务器，并实时地将数据从一个用户传递到另一个用户。除此之外，我们需要使用HTML来绘制一个机制。我们可以使用一个很好的现成库，它为我们提供了绘图所需的功能，而不是花费大量时间编写绘图功能的代码。
- en: 'So if we make a list of the items needed to build the application, it will
    look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们列出构建应用程序所需的项目，它将如下所示：
- en: Client application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端应用程序
- en: Server
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器
- en: Drawing library
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图库
- en: Implementation of real-time data transfer
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据传输的实现
- en: Now we know what to create. The next step is to divide the tasks for the application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要创建什么。下一步是为应用程序划分任务。
- en: The drawing library
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图库
- en: 'We chose to go for a library instead of coding the whole thing. There are a
    few libraries available, but one of best is the **Fabric**.**js** library. You
    can download the library from [http://fabricjs.com/](http://fabricjs.com/). You
    can even build a custom library file with selected features to make it lightweight.
    There are many features that this library provides, all of which you can see on
    the aforementioned website. Let us see a demo code for the Fabric.js library:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择使用库而不是编写整个东西。有一些库可用，但其中最好的是**Fabric**.**js**库。你可以从[http://fabricjs.com/](http://fabricjs.com/)下载该库。你甚至可以构建一个自定义的库文件，选择其中的功能以使其更轻量级。这个库提供了许多功能，你可以在上述网站上看到所有这些功能。让我们看一下Fabric.js库的演示代码：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can see in this code how simple this library is. You just need to add the
    canvas tag and start adding the objects to it, and it will display in the application.
    This library is quite easy to implement which will help us a lot because we are
    already dealing with a lot of different things here. Try the code to see what
    you get in the output and play around the library to get used to it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这段代码中这个库是多么简单。你只需要添加画布标签并开始向其中添加对象，它就会在应用程序中显示。这个库非常容易实现，这将帮助我们很多，因为我们已经在这里处理了很多不同的事情。尝试一下这段代码，看看输出结果，并尝试使用这个库来熟悉它。
- en: The client application
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端应用程序
- en: 'The first step is to make a client application. Here is the code for the client:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是制作一个客户端应用程序。以下是客户端的代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this code, we have created a canvas and made some buttons to add different
    shapes onto the canvas. One important feature added is that of free drawing. Copy
    and paste the code into the `index.html` file and try running it. If you read
    the Fabric.js library, you will come to know how it works. Don't forget to download
    the library file and include the library in the code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们创建了一个画布，并制作了一些按钮来添加不同的形状到画布上。添加的一个重要功能是自由绘制。复制并粘贴代码到`index.html`文件中并尝试运行它。如果你阅读了Fabric.js库，你将了解它是如何工作的。不要忘记下载库文件并在代码中包含库。
- en: Integrating with the server
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与服务器集成
- en: As we have done the coding for the basic client feature, we now have to integrate
    the application with the server using WebSockets. For that, we need to first find
    out what data we need to send to the server. For collaboration, we have to send
    data about the shapes we need to create on the other user's canvas. Let's list
    the set of actions we need to carry out on the client and server side.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经为基本客户端功能编写了代码，现在我们需要使用WebSocket将应用程序与服务器集成。为此，我们首先需要找出需要发送到服务器的数据。为了协作，我们必须发送关于我们需要在其他用户画布上创建的形状的数据。让我们列出我们需要在客户端和服务器端执行的一系列操作。
- en: 'Client:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端：
- en: Capture the event for the add shape button
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获添加形状按钮的事件
- en: Send the object to the server
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象发送到服务器
- en: Create a WebSocket connection to the server
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建与服务器的WebSocket连接
- en: Capture server data
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获服务器数据
- en: Handle and add the objects received from the server to the canvas
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理并将从服务器接收的对象添加到画布上
- en: 'Server:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器：
- en: Create a WebSocket server
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个WebSocket服务器
- en: Receive the data
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收数据
- en: Pass the data to all the connected clients
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据传递给所有连接的客户端
- en: On the basis of the preceding list of items, we have made some changes to the
    code from both the server and the client side.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面列出的项目清单，我们已经对服务器端和客户端代码进行了一些更改。
- en: The client code
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端代码
- en: 'We will now implement the code as per the listed items for server communication
    in our client-side code, which will have code to communicate with the server.
    Following is the client code which has been changed according to the client items:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将根据列出的服务器通信项目在我们的客户端代码中实现代码，这将有代码与服务器通信。以下是根据客户端项目更改的客户端代码：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Code explanation
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码解释
- en: 'We have already seen in the previous chapter how to send and receive data from
    the WebSocket server. One of the methods we coded here to send the data is `sendObject`,
    which sends the type and the properties of the object to the server:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中看到了如何从WebSocket服务器发送和接收数据。这里我们编写了一个发送数据的方法`sendObject`，它将对象的类型和属性发送到服务器：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here one of the main methods is `addObject`. Once we get the data from the
    server, we get two properties: one is type and other is the object which has the
    property''s values. These are the values we send to the server and then check
    the type of the object and add it to the canvas using respective methods:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个主要方法是`addObject`。一旦我们从服务器获取数据，我们就会得到两个属性：一个是类型，另一个是具有属性值的对象。这些是我们发送到服务器的值，然后检查对象的类型并使用相应的方法将其添加到画布中：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The rest of the code is pretty simple and straightforward.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码非常简单和直接。
- en: The server code
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器代码
- en: 'Let''s now see what needs to be done on the server side. The following code
    will show what we need to write on the server side:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看在服务器端需要做什么。以下代码将展示我们需要在服务器端编写什么：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Code explanation
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码解释
- en: On the server side, we have not done much coding. It is almost the same as the
    last chapter's server code. We received the data and broadcast it to all connected
    users.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，我们并没有做太多编码。它几乎与上一章的服务器代码相同。我们接收数据并将其广播给所有连接的用户。
- en: Do it yourself
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自己动手
- en: This application is a very simple and easy-to-build application. We have seen
    how to create a simple application with some limited features. Many additions
    can be added to this application to make it more powerful. Let's give you some
    tips and information on features that you can develop.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序是一个非常简单和易于构建的应用程序。我们已经看到了如何创建一个具有一些有限功能的简单应用程序。可以添加许多功能来使这个应用程序更加强大。让我们给你一些关于你可以开发的功能的提示和信息。
- en: User registration
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户注册
- en: Whenever the user opens the URL, a log-in/sign-up dialog box will open. User
    details such as his/her name will be displayed in the top-left corner of the screen.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 用户打开URL时，将打开一个登录/注册对话框。用户的姓名等详细信息将显示在屏幕左上角。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This scenario will need a database connection. There are some databases available
    which can be easily connected to our Node.js server, such as **MongoDB**. I will
    leave its method of implementation to you. For help in connecting Node.js and
    MongoDB, visit [http://mongodb.github.io/node-mongodb-native/](http://mongodb.github.io/node-mongodb-native/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况将需要一个数据库连接。有一些数据库可以很容易地连接到我们的Node.js服务器，比如**MongoDB**。我会把它的实现方法留给你。要了解如何连接Node.js和MongoDB，请访问[http://mongodb.github.io/node-mongodb-native/](http://mongodb.github.io/node-mongodb-native/)。
- en: The list of users
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户列表
- en: 'Make a button which will show you a list of users that are currently online.
    This scenario needs code changes both on the client as well as the server side.
    Let me list down some key points that you need to implement this feature:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个按钮，点击后会显示当前在线用户的列表。这种情况需要在客户端和服务器端都进行代码更改。让我列出一些你需要实现这个功能的关键点：
- en: We are already saving the list of users in the database once you have developed
    the user registration functionality. We can maintain a list of all online users
    or we can just keep the list on the server. The problem with persisting the data
    on the server is that it will be erased once the server restarts.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你开发了用户注册功能，我们已经在数据库中保存了用户列表。我们可以维护一个所有在线用户的列表，或者我们可以只在服务器上保留列表。将数据持久化在服务器上的问题是，一旦服务器重新启动，数据将被擦除。
- en: Fetch the list of users from the server as soon as we join the server. This
    can be achieved by sending a particular message, such as `getOnlineUsers`, and
    adding another entry to the message event handler returning the list of users.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从服务器获取用户列表，一旦我们加入服务器就立即发送。这可以通过发送特定的消息来实现，比如`getOnlineUsers`，并在消息事件处理程序中添加另一个条目，返回用户列表。
- en: Display the list of users on the screen so that you can see a proper online
    users list. This needs changes on the client side.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在屏幕上显示用户列表，这样你就可以看到一个合适的在线用户列表。这需要在客户端进行更改。
- en: Share with specific users
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与特定用户分享
- en: As we have already implemented a list of users, we can now implement user-based
    drawing sharing. In this, we can share our drawings with some specific users only.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经实现了用户列表，现在我们可以实现基于用户的绘图共享。在这种情况下，我们只能与一些特定的用户分享我们的绘图。
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'This can be achieved by adding another parameter to the object we are sending
    to the server to add the object: the target user ID. This user id is unique for
    users and used to identify a user. This will help us in identifying and send the
    data to a specific user only.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过向我们发送到服务器的对象添加另一个参数来实现：目标用户ID。这个用户ID对于用户是唯一的，用于识别用户。这将帮助我们仅向特定用户发送数据。
- en: Save drawings
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存绘图
- en: Once we are done with the drawing, we can save it and make it available for
    future use.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了绘图，我们可以保存它，并使其在将来可用。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We have to connect our application to a database which can hold the values that
    we have already achieved in earlier scenario. Now we need to add another table
    in the database just to store the drawing. Fabric.js gives us an object of all
    the drawing elements that we have drawn, and we can make a JSON string and store
    it in the database for future use.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将我们的应用程序连接到一个可以保存我们在先前场景中已经实现的值的数据库。现在我们需要在数据库中添加另一个表，只用于存储绘图。Fabric.js给我们提供了我们绘制的所有绘图元素的对象，我们可以制作一个JSON字符串并将其存储在数据库中以供将来使用。
- en: The application structure
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序结构
- en: Structuring the application is a really important part. If we look at the code
    we have written, we can see that it does not have a good structure. The structure
    has to be such that in the future if we want add some features to it, it should
    be easy to do so. And code should be written in such a way that it is easily maintainable.
    To achieve this, we need to use some sort of a structure, which is called a framework.
    Frameworks are designed to give a sense of structure to the application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重构应用程序是一个非常重要的部分。如果我们看一下我们写的代码，我们会发现它没有一个良好的结构。结构必须是这样的，以便将来如果我们想要添加一些功能，那么应该很容易做到。代码应该以一种易于维护的方式编写。为了实现这一点，我们需要使用某种结构，这就是所谓的框架。框架旨在为应用程序提供一种结构感。
- en: Restructure the application
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构应用程序
- en: Now that we know about frameworks, let's restructure our application using the
    AngularJS framework. Let's see what we can restructure here; we will divide everything
    into model, view, controller, and service layers. Let's see what these terms are
    and where they fit in our application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了框架，让我们使用AngularJS框架重构我们的应用程序。让我们看看我们可以在这里重构什么；我们将把一切分成模型、视图、控制器和服务层。让我们看看这些术语是什么，它们在我们的应用程序中的作用。
- en: Model
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: In our application, we have not seen the need to store data, but if we want
    to extend our application and add more features, then there will be a need for
    a **Model**. As we have seen in some scenarios where we have a list of users and
    drawings, we need the Model to store the data on the client side so that it is
    easily accessible for use. AngularJS provides good features to store the data
    and the binding helps in showing the list data very easily in the UI.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们还没有看到存储数据的需求，但如果我们想扩展我们的应用程序并添加更多功能，那么就需要一个**模型**。正如我们在一些场景中所看到的，我们有用户和绘图列表，我们需要模型在客户端存储数据，以便很容易地访问。AngularJS提供了很好的功能来存储数据，绑定有助于在UI中非常容易地显示列表数据。
- en: View
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: An application is normally divided into different views, but in our application
    we just have one view. As we have seen in the scenarios, we need a login screen
    for users. In that scenario, we need a different view to be set up, and here Views
    come into the picture. AngularJS provides us a very easy way to maintain our Views.
    The routing mechanism of AngularJS also helps us in navigating between different
    views providing browser history as well as maintaining a single-page application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序通常被分成不同的视图，但在我们的应用程序中，我们只有一个视图。正如我们在场景中所看到的，我们需要一个用户登录界面。在这种情况下，我们需要设置一个不同的视图，这时视图就出现了。AngularJS为我们提供了一种非常简单的方式来维护我们的视图。AngularJS的路由机制也帮助我们在不同的视图之间导航，提供浏览器历史以及维护单页面应用程序。
- en: Controller
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: As the application is divided into different views, we also need different controllers
    which basically control the UI behavior and help in communicating with the services.
    AngularJS controllers are very powerful and implement **Dependency Injection**
    (**DI**), which helps in injecting services, models, and so on to the controller
    to be operated in the View.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序被分成不同的视图，我们还需要不同的控制器，这些控制器基本上控制UI行为，并帮助与服务进行通信。AngularJS控制器非常强大，并实现了**依赖注入**（**DI**），这有助于将服务、模型等注入到控制器中，以在视图中进行操作。
- en: Service
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: Service is very important when we have an application that connects to a server.
    Maintaining one place for server communication is a good approach as it creates
    different layers in the application, which can be manipulated without affecting
    the other layers of the application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个连接到服务器的应用程序时，服务非常重要。将服务器通信集中在一个地方是一个很好的方法，因为它在应用程序中创建了不同的层，可以在不影响应用程序的其他层的情况下进行操作。
- en: As we read and understand about the different patterns of structuring application
    using the AngularJS framework, I would highly recommend that you start implementing
    the same application using AngularJS. It is an excellent framework which fulfills
    all the needs of a developer and it is a fully loaded framework.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们阅读并了解使用AngularJS框架构建应用程序的不同模式时，我强烈建议您开始使用AngularJS实现相同的应用程序。这是一个非常优秀的框架，可以满足开发者的所有需求，是一个功能齐全的框架。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how HTML5-based JavaScript libraries can be utilized.
    We have combined WebSockets with the Fabric.js library for a collaborative application.
    We have also seen how an application can be divided into parts and created. We
    have seen the development flow and learned about the structuring of the application
    as well.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何利用基于HTML5的JavaScript库。我们将WebSockets与Fabric.js库结合在一起，用于协作应用程序。我们还看到了如何将应用程序分成部分并进行创建。我们了解了开发流程，并学习了应用程序的结构。
- en: In the next chapter, we will see the behavior of WebSocket and its implementation
    on mobile and tablets.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到WebSocket的行为及其在移动设备和平板电脑上的实现。
